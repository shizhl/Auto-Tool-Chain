[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "results": "```python\nimport requests\n\n# API url to search for person\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n\n# Parameters for searching Sofia Coppola\nparams_search_person = {\n    \"query\": \"Sofia Coppola\",\n    \"include_adult\": \"false\"\n}\n\n# Calling the API to search for Sofia Coppola\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\ndata_search_person = response_search_person.json()\n\n# Get the id of Sofia Coppola\nsofia_coppola_id = data_search_person['results'][0]['id']\n\n# API url to get movie credits for Sofia Coppola\nurl_movie_credits = f\"https://api.themoviedb.org/3/person/{sofia_coppola_id}/movie_credits\"\n\n# Calling the API to get movie credits for Sofia Coppola\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Counting the number of movies directed by Sofia Coppola\nmovies_directed_count = 0\nfor credit in data_movie_credits['crew']:\n    if credit['job'] == \"Director\":\n        movies_directed_count += 1\n\nprint(\"Number of movies directed by Sofia Coppola:\", movies_directed_count)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the movie \"The Dark Knight\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"The Dark Knight\"\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Step 2: Get the cast and crew for the movie found in step 1\nif data_search_movie['total_results'] > 0:\n    movie_id = data_search_movie['results'][0]['id']\n    url_credits_movie = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response_credits_movie = requests.get(url_credits_movie, headers=headers)\n    data_credits_movie = response_credits_movie.json()\n\n    # Extracting the lead actor's name from the cast\n    if data_credits_movie['cast'] and len(data_credits_movie['cast']) > 0:\n        lead_actor = data_credits_movie['cast'][0]['name']\n        print(f\"The lead actor in the movie 'The Dark Knight' was: {lead_actor}\")\n    else:\n        print(\"No cast information available for this movie.\")\nelse:\n    print(\"The movie 'The Dark Knight' was not found.\")\n\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "results": "```python\nimport requests\n\n# Set the API url and headers\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the movie id of the top-1 rated movie\nif 'results' in data and len(data['results']) > 0:\n    top_movie_id = data['results'][0]['id']\n\n    # Call the credits API to get the crew for the top-1 rated movie\n    credits_url = f\"https://api.themoviedb.org/3/movie/{top_movie_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    credits_data = credits_response.json()\n\n    # Get the director of the top-1 rated movie\n    director = None\n    if 'crew' in credits_data:\n        for crew_member in credits_data['crew']:\n            if crew_member['job'] == 'Director':\n                director = crew_member['name']\n                break\n\n    # Print the director\n    if director:\n        print(f\"The director of the top-1 rated movie is: {director}\")\n    else:\n        print(\"Director information not found.\")\nelse:\n    print(\"No top-rated movie found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "give me a image for the collection Star Wars",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the search term\nquery = \"Star Wars\"\n\n# Call the search/collection API to search for collections\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": query\n}\nsearch_response = requests.get(search_url, headers=headers, params=params)\nsearch_results = search_response.json()\n\n# Get the collection id of the first result\ncollection_id = search_results['results'][0]['id']\n\n# Call the collection/{collection_id}/images API to get the images for the collection\nimages_url = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\nimages_response = requests.get(images_url, headers=headers)\nimages_result = images_response.json()\n\n# Extract the image paths\nbackdrops = images_result['backdrops']\nposters = images_result['posters']\n\n# Print the image paths for backdrops and posters\nprint(\"Backdrops:\")\nfor backdrop in backdrops:\n    print(backdrop['file_path'])\n\nprint(\"\\nPosters:\")\nfor poster in posters:\n    print(poster['file_path'])\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/company\"\n\n# Set the parameters\nparams = {\n    \"query\": \"Walt Disney\"\n}\n\n# Include the authorization token in the header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse and print the results\ndata = response.json()\nwalt_disney_logo = data[\"results\"][\"logo_path\"]\nprint(\"The logo of Walt Disney is:\", walt_disney_logo)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie Titanic\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nmovie_search_params = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\nresponse = requests.get(url=movie_search_url, headers=headers, params=movie_search_params)\nmovie_results = response.json()[\"results\"]\n\nif len(movie_results) > 0:\n    # Get the lead actor of Titanic\n    movie_id = movie_results[0]['id']\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response = requests.get(url=credits_url, headers=headers)\n    cast_and_crew = response.json()\n    \n    if 'cast' in cast_and_crew and len(cast_and_crew['cast']) > 0:\n        lead_actor = cast_and_crew['cast'][0]\n        actor_id = lead_actor['id']\n        \n        # Get the image of the lead actor\n        person_image_url = f\"https://api.themoviedb.org/3/person/{actor_id}/images\"\n        response = requests.get(url=person_image_url, headers=headers)\n        actor_images = response.json()['profiles']\n        \n        if len(actor_images) > 0:\n            # Print out the image path of the lead actor of Titanic\n            lead_actor_image_path = actor_images[0]['file_path']\n            print(f\"The lead actor of Titanic looks like: {lead_actor_image_path}\")\n        else:\n            print(\"No images found for the lead actor of Titanic\")\n    else:\n        print(\"No cast information found for Titanic\")\nelse:\n    print(\"Titanic movie not found in the database\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie Titanic\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the first movie ID\nif search_results[\"total_results\"] > 0:\n    first_movie_id = search_results[\"results\"][0][\"id\"]\n\n    # Get similar movies for the first movie\n    similar_url = f\"https://api.themoviedb.org/3/movie/{first_movie_id}/similar\"\n    similar_params = {\n        \"page\": 1\n    }\n    similar_response = requests.get(similar_url, headers=headers, params=similar_params)\n    similar_results = similar_response.json()\n\n    # Get reviews for the first similar movie\n    if similar_results[\"total_results\"] > 0:\n        first_similar_movie_id = similar_results[\"results\"][0][\"id\"]\n\n        reviews_url = f\"https://api.themoviedb.org/3/movie/{first_similar_movie_id}/reviews\"\n        reviews_params = {\n            \"page\": 1\n        }\n        reviews_response = requests.get(reviews_url, headers=headers, params=reviews_params)\n        reviews_results = reviews_response.json()\n\n        # Print some reviews of the first similar movie\n        if reviews_results[\"total_results\"] > 0:\n            reviews = reviews_results[\"results\"]\n            for i in range(min(3, len(reviews))):  # Print the first 3 reviews if available\n                print(f\"Review {i+1}:\")\n                print(f\"Author: {reviews[i]['author']}\")\n                print(f\"Content: {reviews[i]['content']}\")\n                print(\"\\n\")\n        else:\n            print(\"No reviews found for the first similar movie.\")\n    else:\n        print(\"No similar movies found.\")\nelse:\n    print(\"No movie found with the title 'Titanic'.\")\n\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "results": "```python\nimport requests\n\n# API url for getting recommendations for a movie\nurl = \"https://api.themoviedb.org/3/movie/597/recommendations\"\n\n# Parameters for the API request\nparams = {\n    \"page\": 1\n}\n\n# Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to the API endpoint\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the movie recommendations from the API response\n    recommendations = response.json()['results']\n    \n    # Print the recommendations\n    for movie in recommendations:\n        print(movie['title'])\nelse:\n    # Print error message if request was not successful\n    print(\"Error fetching movie recommendations\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "results": "```python\nimport requests\n\n# Define the headers with Bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the latest movie directed by Christopher Nolan\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": \"false\"\n}\nresponse = requests.get(url, headers=headers, params=params)\nresults = response.json()[\"results\"]\n\n# Find the latest movie directed by Christopher Nolan\nif results:\n    nolan_id = results[0][\"id\"]\n    # Get movie credits for Christopher Nolan\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{nolan_id}/movie_credits\"\n    response = requests.get(movie_credits_url, headers=headers)\n    movies = response.json()[\"cast\"]\n    # Check for the latest movie directed by Christopher Nolan\n    latest_movie = None\n    for movie in movies:\n        if \"director\" in movie[\"job\"] and (latest_movie is None or movie[\"release_date\"] > latest_movie[\"release_date\"]):\n            latest_movie = movie\n    if latest_movie:\n        print(\"The latest movie directed by Christopher Nolan is:\", latest_movie[\"title\"])\n    else:\n        print(\"No movies directed by Christopher Nolan found.\")\nelse:\n    print(\"No results found for Christopher Nolan.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "results": "```python\nimport requests\n\n# Define the headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the director 'Martin Scorsese'\nsearch_params = {\n    \"query\": \"Martin Scorsese\",\n}\nsearch_response = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the person_id for Martin Scorsese\nif search_results[\"total_results\"] > 0:\n    person_id = search_results[\"results\"][0][\"id\"]\n    \n    # Get the movie credits for Martin Scorsese\n    credits_response = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\", headers=headers)\n    credits_results = credits_response.json()\n    \n    # Iterate through the movie credits to find the highest rated movie\n    highest_rated_movie = {\"title\": \"\", \"vote_average\": 0}\n    for movie in credits_results[\"cast\"]:\n        if movie[\"vote_average\"] > highest_rated_movie[\"vote_average\"]:\n            highest_rated_movie[\"title\"] = movie[\"title\"]\n            highest_rated_movie[\"vote_average\"] = movie[\"vote_average\"]\n    \n    print(\"The highest rated movie directed by Martin Scorsese is:\", highest_rated_movie[\"title\"])\nelse:\n    print(\"Director not found\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "results": "```python\nimport requests\n\n# Provided headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for Leonardo DiCaprio\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams_search_person = {\n    \"query\": \"Leonardo DiCaprio\"\n}\nresponse_person = requests.get(search_person_url, headers=headers, params=params_search_person)\nperson_data = response_person.json()\nperson_id = person_data['results'][0]['id']\n\n# Step 2: Get the movie credits for Leonardo DiCaprio\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse_movie_credits = requests.get(movie_credits_url, headers=headers)\nmovie_credits_data = response_movie_credits.json()\n\n# Assume the latest movie is the first movie in the list\nlatest_movie_title = movie_credits_data['cast'][0]['title']\n\n# Step 3: Get the movie details to find the director\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": latest_movie_title\n}\nresponse_movie = requests.get(search_movie_url, headers=headers, params=params_search_movie)\nmovie_data = response_movie.json()\nmovie_id = movie_data['results'][0]['id']\n\n# Step 4: Get the credits for the movie to find the director\nmovie_credits_info_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse_movie_credits_info = requests.get(movie_credits_info_url, headers=headers)\nmovie_credits_info_data = response_movie_credits_info.json()\n\n# Find the director in the crew list\nfor person in movie_credits_info_data['crew']:\n    if person['job'] == \"Director\":\n        director_name = person['name']\n        break\n\nprint(\"Director of Leonardo DiCaprio's latest movie:\", director_name)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "results": "```python\nimport requests\n\n# Define the headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people with the name \"Catherine Hardwicke\"\nparams = {\n    \"query\": \"Catherine Hardwicke\",\n    \"include_adult\": False\n}\n\n# Call the search/person API\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\ndata = response.json()\n\n# Extract the person_id of Catherine Hardwicke\nperson_id = data[\"results\"][0][\"id\"]\n\n# Get the TV show credits for Catherine Hardwicke\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\", headers=headers)\ntv_credits = response.json()\n\n# Find the most recent TV show Catherine Hardwicke directed\nrecent_tv_show = None\nfor credit in tv_credits[\"crew\"]:\n    if credit[\"department\"] == \"Directing\":\n        recent_tv_show = credit\n        break\n\n# Output the result\nif recent_tv_show:\n    print(f\"{recent_tv_show['original_name']} is the most recent TV show directed by Catherine Hardwicke.\")\nelse:\n    print(\"Catherine Hardwicke has not recently directed a TV show.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show Breaking Bad\n# Step 1: Search for Breaking Bad TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Breaking Bad\",\n    \"include_adult\": \"false\"\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nbreaking_bad_id = response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get TV show recommendations for Breaking Bad\nrecommendations_url = f\"https://api.themoviedb.org/3/tv/{breaking_bad_id}/recommendations\"\nrecommendations_params = {\n    \"page\": 1\n}\nresponse = requests.get(recommendations_url, headers=headers, params=recommendations_params)\nrecommendations = response.json()[\"results\"]\n\n# Display recommendations\nfor show in recommendations:\n    print(show[\"name\"])\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "results": "import requests\n\n# API key\napi_key = \"0dbab590c7eaca07ebelki7597fa37ad92\"\n\n# URL for getting today's trending movies\nurl = f\"https://api.themoviedb.org/3/trending/movie/day?api_key={api_key}\"\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to get trending movies\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the movie id of the most trending movie\nmovie_id = data['results'][0]['id']\n\n# URL for getting movie details\nurl = f\"https://api.themoviedb.org/3/movie/{movie_id}?api_key={api_key}\"\n\n# Send GET request to get details of the most trending movie\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the director of the movie\ncrew = data['credits']['crew']\nfor member in crew:\n    if member['job'] == 'Director':\n        director = member['name']\n        break\n\nprint(f\"The director of today's most trending movie is: {director}\")",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "results": "```python\nimport requests\n\n# Define the header with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Twilight\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Twilight\"\n}\nresponse = requests.get(url_search_movie, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie ID of \"Twilight\" from the search results\nmovie_id = data['results'][0]['id']\n\n# Get the details of the movie with the ID\nurl_movie_details = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nparams = {}\nresponse = requests.get(url_movie_details, headers=headers, params=params)\nmovie_details = response.json()\n\n# Get the director of the movie \"Twilight\"\ncrew = movie_details['crew']\ndirector = \"\"\nfor member in crew:\n    if member['job'] == 'Director':\n        director = member['name']\n        break\n\nprint(f\"The director of the movie 'Twilight' is: {director}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "results": "```python\nimport requests\n\n# API request to get the TV show details of The Witcher\ntv_show_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Witcher\",\n    \"include_adult\": \"false\"\n}\nresponse = requests.get(tv_show_url, headers=headers, params=params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# API request to get the details of the first season of The Witcher\nseason_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/1\"\nresponse = requests.get(season_url, headers=headers)\nseason_id = response.json()[\"id\"]\n\n# API request to get the images of the second episode of the first season of The Witcher\nepisode_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/{season_id}/episode/2/images\"\nresponse = requests.get(episode_url, headers=headers)\nphoto_path = response.json()[\"stills\"][0][\"file_path\"]\n\nprint(photo_path)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "What is top-1 rated movie?",
        "results": "```python\nimport requests\n\n# Define the API url for getting the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the parameters (in this case, we only need the page parameter)\nparams = {\n    \"page\": 1\n}\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the top-1 rated movie from the response\n    top_rated_movie = response.json()['results'][0]['title']\n    print(f\"The top-1 rated movie is: {top_rated_movie}\")\nelse:\n    print(\"Error fetching data\")\n\n```\nThis code sends a GET request to the API endpoint for top-rated movies and retrieves the title of the top-1 rated movie from the response data.",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "results": "```python\nimport requests\n\n# Define the API url to search for the movie \"The Matrix\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters to search for the movie \"The Matrix\"\nparams = {\n    \"query\": \"The Matrix\",\n    \"include_adult\": \"false\" # Exclude adult content\n}\n\n# Make the HTTP request to search for the movie \"The Matrix\"\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params)\ndata_search_movie = response_search_movie.json()\n\n# Extract the movie_id of \"The Matrix\" from the search results\nif \"results\" in data_search_movie and data_search_movie[\"results\"]:\n    movie_id = data_search_movie[\"results\"][0][\"id\"]\n    \n    # Define the API url to get the release date of the movie by movie_id\n    url_release_date = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n    \n    # Make the HTTP request to get the release date of the movie \"The Matrix\"\n    response_release_date = requests.get(url_release_date, headers=headers)\n    data_release_date = response_release_date.json()\n    \n    # Extract and print the release date of the movie \"The Matrix\"\n    if \"results\" in data_release_date and data_release_date[\"results\"]:\n        release_date = data_release_date[\"results\"][0][\"release_dates\"][0][\"release_date\"]\n        print(f\"The release date of the movie 'The Matrix' is: {release_date}\")\n    else:\n        print(\"Release date not found.\")\nelse:\n    print(\"Movie 'The Matrix' not found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "Who is the most popular person?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Set up the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results from the API response\n    popular_people = response.json()[\"results\"]\n    \n    # Sort the list of popular people based on their popularity\n    most_popular_person = max(popular_people, key=lambda x: x[\"popularity\"])\n    \n    print(\"The most popular person is:\", most_popular_person[\"name\"])\nelse:\n    print(\"Failed to retrieve data from API. Status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Christopher Nolan's id\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nnolan_id = response.json()['results'][0]['id']\n\n# Get the movie credits for Christopher Nolan\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{nolan_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovies = response.json()['crew']\n\n# Get the cover images of movies directed by Christopher Nolan\ncover_images = []\nfor movie in movies:\n    if movie['job'] == 'Director':\n        images_url = f\"https://api.themoviedb.org/3/movie/{movie['id']}/images\"\n        response = requests.get(images_url, headers=headers)\n        posters = response.json()['posters']\n        if posters:\n            cover_images.append(posters[0]['file_path'])\n\nprint(cover_images)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "results": "```python\nimport requests\n\n# API url to get the movie id for Titanic\nurl_movie_search = \"https://api.themoviedb.org/3/search/movie\"\nparams_movie_search = {\n    'query': 'Titanic',\n    'include_adult': False\n}\n\nresponse_movie_search = requests.get(url_movie_search, headers=headers, params=params_movie_search)\ndata_movie_search = response_movie_search.json()\n\nif data_movie_search['total_results'] > 0:\n    movie_id = data_movie_search['results'][0]['id']\n\n    # API url to get keywords for the movie Titanic\n    url_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n\n    response_keywords = requests.get(url_keywords, headers=headers)\n    data_keywords = response_keywords.json()\n\n    keywords_list = [keyword['name'] for keyword in data_keywords['keywords']]\n    print(keywords_list)\n\nelse:\n    print(\"Movie Titanic not found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "Give me a show that is currently on the air",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the query parameters\nparams = {\n    \"page\": 1\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the JSON response\ndata = response.json()\n\n# Display the results\nprint(data)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "results": "```python\nimport requests\n\n# Define the API url to search for a person\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the parameters for searching Clint Eastwood\nparams_search_person = {\n    \"query\": \"Clint Eastwood\",\n    \"include_adult\": False\n}\n\n# Call the API to search for Clint Eastwood\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\ndata_search_person = response_search_person.json()\n\n# Get the person_id of Clint Eastwood\nclint_eastwood_id = data_search_person['results'][0]['id']\n\n# Define the API url to get the movie credits for Clint Eastwood\nurl_movie_credits = f\"https://api.themoviedb.org/3/person/{clint_eastwood_id}/movie_credits\"\n\n# Call the API to get the movie credits for Clint Eastwood\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Get the latest movie scheduled release date for Clint Eastwood\nlatest_movie_release_date = data_movie_credits['cast'][0]['release_date']\n\nprint(f\"Clint Eastwood's latest movie is scheduled to be released on: {latest_movie_release_date}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "results": "```python\nimport requests\n\n# Set the API endpoint\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Prepare the query parameters\nparams = {\n    \"query\": \"The Dark Knight\",\n}\n\n# Set the API token in headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the HTTP GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Display the API response\nprint(response.json())\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "results": "```python\nimport requests\n\n# Define the headers with Authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for movies directed by Francis Ford Coppola\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\nparams_search_person = {\n    \"query\": \"Francis Ford Coppola\",\n    \"include_adult\": False\n}\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\nperson_data = response_search_person.json()\n\n# Get the person ID of Francis Ford Coppola\nperson_id = None\nif person_data.get(\"results\"):\n    person_id = person_data[\"results\"][0][\"id\"]\n\n# Step 2: Get the movie credits for Francis Ford Coppola\nif person_id:\n    url_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response_movie_credits = requests.get(url_movie_credits, headers=headers)\n    movie_credits_data = response_movie_credits.json()\n\n    # Get the movie ID of a movie directed by Francis Ford Coppola\n    movie_id = None\n    if movie_credits_data.get(\"crew\"):\n        for movie in movie_credits_data[\"crew\"]:\n            if movie[\"job\"] == \"Director\":\n                movie_id = movie[\"id\"]\n                break\n\n# Step 3: Get a list of similar movies\nif movie_id:\n    url_similar_movies = f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\n    params_similar_movies = {\n        \"page\": 1\n    }\n    response_similar_movies = requests.get(url_similar_movies, headers=headers, params=params_similar_movies)\n    similar_movies_data = response_similar_movies.json()\n\n    # Extract the list of similar movies\n    similar_movies = []\n    if similar_movies_data.get(\"results\"):\n        for movie in similar_movies_data[\"results\"]:\n            similar_movies.append(movie[\"title\"])\n\n    print(similar_movies)\nelse:\n    print(\"No movies directed by Francis Ford Coppola found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "results": "```python\nimport requests\n\n# API url to get the latest movie\nurl = \"https://api.themoviedb.org/3/movie/latest\"\n\n# Headers containing authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending GET request to the API url\nresponse = requests.get(url, headers=headers)\n\n# Getting the json response\ndata = response.json()\n\n# Extracting the cast of the movie\ncast = data['credits']['cast']\n\n# Assuming lead actor is the first person in the cast list\nlead_actor = cast[0]['name']\n\nprint(\"The lead actor in the latest released movie is:\", lead_actor)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Set the parameters\nparams = {\n    \"page\": 1\n}\n\n# Set the authentication header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the image path of the first movie in the results\n    result = response.json()\n    if len(result['results']) > 0:\n        movie = result['results'][0]\n        image_path = movie['poster_path']\n        print(f\"Image path of the movie currently in theaters: {image_path}\")\n    else:\n        print(\"No movies currently in theaters.\")\nelse:\n    print(\"Error encountered with request.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "results": "```python\nimport requests\n\n# API url to get the list of current popular movies\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Parameters for the API request\nparams = {\n    \"page\": 1,  # Specify which page to query\n    \"region\": \"US\"  # Specify the region to filter release dates\n}\n\n# Http headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the JSON response\njson_response = response.json()\n\n# Extract the most popular movie details\nmost_popular_movie = json_response['results'][0]\n\n# Get the movie id\nmovie_id = most_popular_movie['id']\n\n# API url to get keywords for the most popular movie\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n\n# Make the API request to get keywords\nkeywords_response = requests.get(keywords_url, headers=headers)\n\n# Parse the JSON response for keywords\nkeywords_json_response = keywords_response.json()\n\n# Extract the keywords for the most popular movie\nkeywords = [keyword['name'] for keyword in keywords_json_response['keywords']]\n\n# Print the most popular movie and its keywords\nprint(\"Most Popular Movie:\")\nprint(f\"Title: {most_popular_movie['title']}\")  # Movie title\nprint(f\"Keywords: {', '.join(keywords)}\")  # Keywords associated with the movie\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of current popular movies\nresponse_movies = requests.get(\"https://api.themoviedb.org/3/movie/popular\", headers=headers)\npopular_movie_id = response_movies.json()['results'][0]['id']\n\n# Get the keywords for the most popular movie\nresponse_keywords = requests.get(f\"https://api.themoviedb.org/3/movie/{popular_movie_id}/keywords\", headers=headers)\nkeywords = response_keywords.json()['keywords']\n\nprint(keywords)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "results": "```python\nimport requests\n\n# Define the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie Titanic\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Get the movie id\nif \"results\" in search_data and len(search_data[\"results\"]) > 0:\n    movie_id = search_data[\"results\"][0][\"id\"]\n    \n    # Get the credits for the movie Titanic\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    credits_data = credits_response.json()\n    \n    # Extract the cast names\n    cast_names = []\n    if \"cast\" in credits_data:\n        for cast_member in credits_data[\"cast\"]:\n            cast_names.append(cast_member[\"name\"])\n    \n    print(cast_names)\nelse:\n    print(\"Movie Titanic not found\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "results": "```python\nimport requests\n\n# Define the API endpoint for getting company details by id\nurl = \"https://api.themoviedb.org/3/company/4\"  # 4 is the company_id for Paramount Pictures\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API endpoint\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    company_details = response.json()\n    logo_path = company_details['logo_path']\n    \n    # Print the logo path\n    print(\"Logo path:\", logo_path)\n    \n    # To view the logo, you can use the base image path: https://image.tmdb.org/t/p/original/\n    # Append the logo_path to the base image path to view the logo\n    logo_url = f\"https://image.tmdb.org/t/p/original/{logo_path}\"\n    print(\"Logo URL:\", logo_url) # This will be the URL of the logo image for Paramount Pictures \nelse:\n    print(\"Failed to retrieve company details. Status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/company\"\n\n# Define the search query for \"universal pictures\"\nquery = \"universal pictures\"\n\n# Define the params for the request\nparams = {\n    \"query\": query,\n    \"page\": 1\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the relevant data from the API response\ndata = response.json()\n\n# Loop through the results to find the company \"universal pictures\"\nfor company in data['results']:\n    if company['name'].lower() == \"universal pictures\":\n        company_id = company['id']\n        break\n\n# Get the details of the company by its id\nif 'company_id' in locals():\n    url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    response = requests.get(url, headers=headers)\n    company_data = response.json()\n    \n    # Extract the headquarters information\n    headquarters = company_data['headquarters']\n    print(\"The company 'Universal Pictures' was founded at:\", headquarters)\nelse:\n    print(\"Company 'Universal Pictures' not found in the search results.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "results": "```python\nimport requests\n\n# Define the API url to search for movies\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for searching the movie \"Titanic\"\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Call the API to search for the movie \"Titanic\"\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    # Extract the release date of the first search result (assuming \"Titanic\" is the first result)\n    movie_results = response.json()[\"results\"]\n    if len(movie_results) > 0:\n        release_date = movie_results[0][\"release_date\"]\n        print(f\"The movie 'Titanic' was released on: {release_date}\")\n    else:\n        print(\"No movie found with the title 'Titanic'\")\nelse:\n    print(\"Error occurred while calling the API\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "results": "```python\nimport requests\n\n# Define the API url and movie collection id\nurl = \"https://api.themoviedb.org/3/collection/10\"\nparams = {}\n\n# Call the API using GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Extract data from the response\n    data = response.json()\n    \n    # Check if there are parts (movies) in the collection\n    if 'parts' in data:\n        parts = data['parts']\n        \n        # Get the first movie from the parts list\n        if len(parts) > 0:\n            first_movie_id = parts[0]['id']\n            \n            # Call the credits API to get the cast of the first movie\n            credits_url = f\"https://api.themoviedb.org/3/movie/{first_movie_id}/credits\"\n            credits_response = requests.get(credits_url, headers=headers, params={})\n            \n            # Check if the credits response is successful\n            if credits_response.status_code == 200:\n                # Extract cast data from the credits response\n                cast_data = credits_response.json()['cast']\n                \n                # Extract names of the cast members\n                cast_names = [cast_member['name'] for cast_member in cast_data]\n                \n                # Print the names of the cast members\n                print(\"The actors who starred in the first movie of Star Wars collection are:\")\n                for name in cast_names:\n                    print(name)\n            else:\n                print(\"Error in getting credits: \", credits_response.json())\n        else:\n            print(\"No movies found in the collection.\")\n    else:\n        print(\"Parts not found in the collection data.\")\nelse:\n    print(\"Error in getting collection data: \", response.json())\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameter to search for the collection \"Harry Potter\"\nparams = {\n    \"query\": \"Harry Potter\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# If the request was successful, parse the JSON response\nif response.status_code == 200:\n    data = response.json()\n    \n    # Extract the poster path of a movie from the Harry Potter collection\n    if data[\"results\"]:\n        movie_poster_path = data[\"results\"][0][\"poster_path\"]\n        print(f\"The movie poster path is: https://image.tmdb.org/t/p/w500/{movie_poster_path}\")\n    else:\n        print(\"No results found for the collection Harry Potter\")\nelse:\n    print(\"Error accessing the API\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the collection ID of \"The Hunger Games\"\ncollection_url = \"https://api.themoviedb.org/3/search/collection\"\ncollection_params = {\n    \"query\": \"The Hunger Games\"\n}\ncollection_response = requests.get(collection_url, headers=headers, params=collection_params)\ncollection_id = collection_response.json()[\"results\"][0][\"id\"]\n\n# Define the API endpoint to get keywords for a movie of the collection The Hunger Games\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{collection_id}/keywords\"\nkeywords_response = requests.get(keywords_url, headers=headers)\n\n# Extract the keywords from the API response\nkeywords = [keyword[\"name\"] for keyword in keywords_response.json()[\"keywords\"]]\nprint(keywords)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "results": "```python\nimport requests\n\n# Define the API url to search for The Hobbit collection\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the parameters for searching The Hobbit collection\nparams_search_collection = {\n    \"query\": \"The Hobbit\",\n    \"page\": 1\n}\n\n# Make a GET request to search for The Hobbit collection\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ndata_search_collection = response_search_collection.json()\n\n# Get the collection_id for The Hobbit\ncollection_id = data_search_collection['results'][0]['id']\n\n# Define the API url to get the release dates for the movies of The Hobbit collection\nurl_release_dates = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\n\n# Make a GET request to get the release dates for movies of The Hobbit collection\nresponse_release_dates = requests.get(url_release_dates, headers=headers)\ndata_release_dates = response_release_dates.json()\n\n# Extract and print the release dates for the movies of The Hobbit collection\nfor result in data_release_dates[\"results\"]:\n    movie_title = result[\"title\"]\n    release_dates = result[\"release_dates\"]\n    \n    print(f\"Movie: {movie_title}\")\n    for date in release_dates:\n        print(f\"Release Date: {date['release_date']}\")\n    print()\n```\nThe above Python code calls the TMDB API to search for the collection \"The Hobbit\". It then retrieves the collection_id for \"The Hobbit\" and uses that to fetch the release dates for the movies in the collection. The release dates for each movie are then printed out.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "results": "```python\nimport requests\n\n# Define the API endpoint and parameters to search for The Fast and the Furious collection\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to search for The Fast and the Furious collection\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Extract the list of movies from the results\n    movies = [collection[\"name\"] for collection in data[\"results\"]]\n    print(movies)\nelse:\n    print(\"Failed to retrieve movies from The Fast and the Furious collection\")\n```  ",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the collection id of \"The Fast and the Furious\"\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\n    \"query\": \"The Fast and the Furious\"\n}\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ncollection_id = response_search_collection.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get the movie details of \"The Fast and the Furious\" collection\nurl_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse_collection_details = requests.get(url_collection_details, headers=headers)\nmovie_parts = response_collection_details.json()[\"parts\"]\n\n# Step 3: Get the reviews of the first movie in the collection\nmovie_id = movie_parts[0][\"id\"]\nurl_reviews = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\nparams_reviews = {\n    \"page\": 1\n}\nresponse_reviews = requests.get(url_reviews, headers=headers, params=params_reviews)\nreviews = response_reviews.json()[\"results\"]\n\nprint(reviews)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "results": "```python\nimport requests\n\n# Setting up the API endpoint and headers\nurl = \"https://api.themoviedb.org/3/search/collection\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending a request to search for the collection with the query \"Lord of the Rings\"\nparams = {\n    \"query\": \"Lord of the Rings\"\n}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting the collection id from the response\ncollection_id = response.json()['results'][0]['id']\n\n# Using the collection id to get the details of the collection\ncollection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse_collection = requests.get(collection_url, headers=headers)\n\n# Extracting the id of the first part (movie) in the collection\nmovie_id = response_collection.json()['parts'][0]['id']\n\n# Using the movie id to get the release dates\nrelease_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\nresponse_release = requests.get(release_url, headers=headers)\n\n# Extracting the release date of the first movie in the collection\nrelease_date = response_release.json()['results'][0]['release_dates'][0]['release_date']\n\nprint(release_date)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "results": "```python\nimport requests\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"House of Cards\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\"query\": \"House of Cards\"}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show ID for \"House of Cards\"\ntv_id = data_search_tv[\"results\"][0][\"id\"]\n\n# Get the directors of the first season of \"House of Cards\"\nurl_tv_season_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1/credits\"\nresponse_tv_season_credits = requests.get(url_tv_season_credits, headers=headers)\ndata_tv_season_credits = response_tv_season_credits.json()\n\n# Extract the directors' names\ndirectors = [crew[\"name\"] for crew in data_tv_season_credits[\"crew\"] if crew[\"department\"] == \"Directing\"]\n\nprint(directors)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for House of Cards TV show ID\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nhouse_of_cards_tv_id = response.json()[\"results\"][0][\"id\"]\n\n# Get similar TV shows\nsimilar_url = f\"https://api.themoviedb.org/3/tv/{house_of_cards_tv_id}/similar\"\nsimilar_params = {\n    \"page\": 1\n}\nresponse = requests.get(similar_url, headers=headers, params=similar_params)\n\n# Output the results\nsimilar_tv_shows = response.json()[\"results\"]\nfor show in similar_tv_shows:\n    print(show[\"name\"])\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "results": "```python\nimport requests\n\n# Set the API url to get the list of shows currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Set the parameters to get the first page of results\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the response json\ndata = response.json()\n\n# Extract the name and first air date of the most popular show currently on the air\nmost_popular_show = data['results'][0]\nshow_name = most_popular_show['name']\nfirst_air_date = most_popular_show['first_air_date']\n\nprint(f\"The most popular show currently on the air is {show_name} which started airing on {first_air_date}.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "results": "```python\nimport requests\n\n# API url to search for the movie \"Django Unchained\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Django Unchained\",\n    \"include_adult\": False\n}\n\n# Make a request to search for the movie \"Django Unchained\"\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\nif search_results['total_results'] > 0:\n    # Extract the director name from the search results\n    director_name = search_results['results'][0]['belongs_to_collection']['name']\n\n    # API url to search for other works directed by the same director\n    credits_url = f\"https://api.themoviedb.org/3/search/movie\"\n    credits_params = {\n        \"query\": director_name,\n        \"include_adult\": False\n    }\n\n    # Make a request to search for other works directed by the same director\n    credits_response = requests.get(credits_url, headers=headers, params=credits_params)\n    credits_results = credits_response.json()\n\n    # Extract and print the list of other works directed by the same director\n    other_works = [movie['title'] for movie in credits_results['results']]\n    print(other_works)\n\nelse:\n    print(\"Director information not found for Django Unchained.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "results": "```python\nimport requests\n\n# Specify the API url\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Specify the parameters (optional for this API)\nparams = {\n    'page': 1\n}\n\n# Specify the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the HTTP GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the json response data\ndata = response.json()\n\n# Extract the cast from the response\nif 'results' in data and data['results']:\n    tv_show = data['results'][0]\n    tv_id = tv_show['id']\n\n    cast_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    \n    # Make the HTTP GET request to get the cast of the TV show\n    response_cast = requests.get(cast_url, headers=headers)\n    data_cast = response_cast.json()\n\n    # Extract the cast members\n    cast = data_cast['cast']\n    \n    print(cast)\nelse:\n    print(\"No TV show currently on the air found in the response.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "I need a review for Breaking Bad",
        "results": "```python\nimport requests\n\n# Define the API url for searching tv shows\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters for the query\nparams = {\n    \"query\": \"Breaking Bad\",\n    \"include_adult\": False\n}\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the HTTP GET request to search for TV shows\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()\n\n    # Extract the TV show ID for Breaking Bad\n    tv_show_id = results[\"results\"][0][\"id\"]\n\n    # Define the API url for fetching reviews for the TV show\n    reviews_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/reviews\"\n\n    # Make the HTTP GET request to get the reviews\n    reviews_response = requests.get(reviews_url, headers=headers)\n\n    # Check if the request for reviews was successful\n    if reviews_response.status_code == 200:\n        # Get the reviews data\n        reviews_data = reviews_response.json()\n        print(reviews_data)\n    else:\n        print(\"Failed to fetch reviews\")\nelse:\n    print(\"Failed to search for TV shows\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Last Of Us TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Last Of Us\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(search_url, headers=headers, params=search_params)\nresult = response.json()\ntv_id = result[\"results\"][0][\"id\"]     # Get the ID of The Last Of Us TV show\n\n# Get recommendations for The Last Of Us\nrecommendations_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\nrecommendations_params = {\n    \"page\": 1\n}\n\nrecommendations_response = requests.get(recommendations_url, headers=headers, params=recommendations_params)\nrecommendations_result = recommendations_response.json()\n\n# Print the recommendations\nfor show in recommendations_result[\"results\"]:\n    print(show[\"name\"])\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ]
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# Define the base url for the TMDB API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the API key\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Define the headers with the Authorization Bearer token\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show \"The Last Of Us\"\nquery = \"The Last Of Us\"\nurl = f\"{base_url}/search/tv\"\nparams = {\n    \"query\": query\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show id for \"The Last Of Us\"\ntv_id = data['results'][0]['id']\n\n# Get recommendations for the TV show based on the tv_id\nrecommendations_url = f\"{base_url}/tv/{tv_id}/recommendations\"\nresponse = requests.get(recommendations_url, headers=headers)\nrecommendations = response.json()\n\n# Output the list of TV show recommendations\nprint(recommendations['results'])\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "results": "```python\nimport requests\n\n# Define the API url for getting credits for a specific TV episode\nurl = \"https://api.themoviedb.org/3/tv/1668/season/3/episode/24/credits\"\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the guest stars for the episode\n    guest_stars = data[\"guest_stars\"]\n    \n    # Extract the names of the guest stars\n    guest_star_names = [star[\"name\"] for star in guest_stars]\n    \n    print(\"Guest star(s) for season 3, episode 24 of Friends:\")\n    for name in guest_star_names:\n        print(name)\nelse:\n    print(\"Failed to retrieve guest stars. Status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the list of popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the parameters for the HTTP request\nparams = {\n    \"page\": 1\n}\n\n# Set the HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to get the list of popular TV shows\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the JSON response\ndata = response.json()\n\n# Get the details of the most popular TV show\nmost_popular_show = data['results'][0]\n\n# Get the ID of the most popular TV show\ntv_id = most_popular_show['id']\n\n# Define the API endpoint to get the credits for the most popular TV show\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n\n# Make the GET request to get the credits of the most popular TV show\ncredits_response = requests.get(credits_url, headers=headers)\n\n# Parse the JSON response for credits\ncredits_data = credits_response.json()\n\n# Get the lead actor of the most popular TV show\nlead_actor = credits_data['cast'][0]['name']\n\nprint(f\"The lead actor in the most popular TV show is: {lead_actor}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the top rated TV shows\nurl = \"https://api.themoviedb.org/3/tv/top_rated\"\nparams = {\"page\": 1}\nresponse = requests.get(url, headers=headers, params=params)\ntop_rated_shows = response.json()\n\n# Get the TV show id of the top-1 rated show\ntv_id = top_rated_shows[\"results\"][0][\"id\"]\n\n# Get the keywords of the top-1 rated TV show\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\nresponse = requests.get(url, headers=headers)\nkeywords = response.json()\n\n# Extract the first keyword\nif keywords[\"results\"]:\n    top_keyword = keywords[\"results\"][0][\"name\"]\n    print(f\"The top keyword of the top-1 rated TV show is: {top_keyword}\")\nelse:\n    print(\"No keywords found for the top-1 rated TV show.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show \"2 Broke Girls\"\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\",\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the image path of the first result\nif 'results' in data and len(data['results']) > 0:\n    poster_path = data['results'][0]['poster_path']\n    \n    # Get the full image URL\n    if poster_path:\n        base_image_url = \"https://image.tmdb.org/t/p/w500\"\n        full_image_url = base_image_url + poster_path\n        \n        print(full_image_url)\n    else:\n        print(\"No poster found for 2 Broke Girls\")\nelse:\n    print(\"No results found for 2 Broke Girls\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query for searching TV show with the name \"2 Broke Girls\"\nparams = {\n    \"query\": \"2 Broke Girls\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the TV show id of \"2 Broke Girls\"\n    tv_show_id = response.json()['results'][0]['id']\n    \n    # Now we make a request to get the primary TV show details using the tv_show_id\n    url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\n    response = requests.get(url, headers=headers)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        # Get the total number of episodes for \"2 Broke Girls\"\n        total_episodes = response.json()['number_of_episodes']\n        \n        print(f\"Total episodes of '2 Broke Girls': {total_episodes}\")\n    else:\n        print(\"Error in fetching TV show details\")\nelse:\n    print(\"Error in searching for TV show\")\n\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "results": "```python\nimport requests\n\n# Set the company id for Warner Bros. Television (the production company for The Big Bang Theory)\ncompany_id = 1957\n\n# Set the API url for retrieving company details\nurl = f\"https://api.themoviedb.org/3/company/{company_id}\"\n\n# Set the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to retrieve company details\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    company_info = response.json()\n    company_name = company_info['name']\n    founding_year = company_info.get('foundation_date', 'Date not available')\n\n    print(f\"The company '{company_name}' that produced The Big Bang Theory was founded in: {founding_year}\")\nelse:\n    print(\"Failed to retrieve company details\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the parameters for the TV show \"The Big Bang Theory\"\nparams = {\n    \"query\": \"The Big Bang Theory\",\n    \"include_adult\": False\n}\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful and get the creation date of \"The Big Bang Theory\"\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        # Assume the first result is the TV show we are looking for\n        result = data[\"results\"][0]\n        creation_date = result[\"first_air_date\"]\n        print(\"The Big Bang Theory was created on:\", creation_date)\n    else:\n        print(\"TV show not found\")\nelse:\n    print(\"Unable to fetch data\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the parameters for the request\nparams = {\n    \"page\": 1\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the data from the response\ndata = response.json()\n\n# Extract the first TV show\ntv_show = data[\"results\"][0]\n\n# Get the TV show id\ntv_id = tv_show[\"id\"]\n\n# Call the API to get keywords for the most popular TV show\nkeyword_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\nkeyword_response = requests.get(keyword_url, headers=headers)\n\n# Get the keyword data from the response\nkeyword_data = keyword_response.json()\n\n# Extract the keyword of the most popular TV show\nkeyword = keyword_data[\"results\"][0][\"name\"]\n\n# Print the keyword of the most popular TV show\nprint(\"Keyword of the most popular TV show:\", keyword)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "results": "```python\nimport requests\n\n# Define the API key and base URL\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show \"Westworld\"\nsearch_params = {\n    \"query\": \"Westworld\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(f\"{base_url}/search/tv\", headers=headers, params=search_params)\nwestworld_id = search_response.json()[\"results\"][0][\"id\"]  # Get the id of Westworld TV show\n\n# Get the details of the second season of Westworld\nseason_params = {}\nseason_response = requests.get(f\"{base_url}/tv/{westworld_id}/season/2\", headers=headers, params=season_params)\nthird_episode_description = season_response.json()[\"episodes\"][2][\"overview\"]\n\nprint(third_episode_description)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "results": "```python\nimport requests\n\n# Given API url\nurl = \"https://api.themoviedb.org/3/tv/1399/season/2\"\n\n# Adding the required headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Getting the JSON response\ndata = response.json()\n\n# Extracting the air_date of the second season of Game of Thrones\nsecond_season_air_date = None\nif 'air_date' in data:\n    second_season_air_date = data['air_date']\n\nprint(\"The air date of the second season of Game of Thrones is:\", second_season_air_date)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "results": "```python\nimport requests\n\n# API url to search for TV shows\nurl = \"https://api.themoviedb.org/3/search/tv\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Parameters for searching for a TV show\nparams = {\n    \"query\": \"Band of Brothers\",\n    \"include_adult\": False\n}\n\n# Make a GET request to search for the TV show \"Band of Brothers\"\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the id of the TV show \"Band of Brothers\"\ntv_id = response.json()[\"results\"][0][\"id\"]\n\n# API url to get the details of the third episode of Band of Brothers\nurl_episode = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1/episode/3\"\n# Make a GET request to get the details of the third episode of Band of Brothers\nresponse_episode = requests.get(url_episode, headers=headers)\n\n# Extract the poster path of the third episode of Band of Brothers\nposter_path = response_episode.json()[\"still_path\"]\n\nprint(f\"Poster of the third episode of Band of Brothers: https://image.tmdb.org/t/p/w500{poster_path}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "results": "```python\nimport requests\n\n# Define the API url to search for the TV show \"Game of Thrones\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Game of Thrones\",\n    \"include_adult\": False\n}\n\n# Make a GET request to search for the TV show\nsearch_response = requests.get(search_url, headers=headers, params=params)\nsearch_results = search_response.json()\n\n# Get the network id of the TV show Game of Thrones\nnetwork_id = search_results[\"results\"][0][\"networks\"][0][\"id\"]\n\n# Define the API url to get the network details by id\nnetwork_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\n# Make a GET request to get the network details\nnetwork_response = requests.get(network_url, headers=headers)\nnetwork_details = network_response.json()\n\n# Get the logo of the network that produced Game of Thrones\nnetwork_logo = network_details[\"logos\"][0][\"file_path\"]\nprint(network_logo)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "results": "```python\nimport requests\n\n# Define the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the TV show \"Game of Thrones\" to get the network ID\nsearch_params = {\n    \"query\": \"Game of Thrones\"\n}\nsearch_response = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=search_params)\ngame_of_thrones_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get the primary TV show details by id to find out the network\ntv_show_response = requests.get(f\"https://api.themoviedb.org/3/tv/{game_of_thrones_id}\", headers=headers)\nnetwork_id = tv_show_response.json()[\"networks\"][0][\"id\"]\n\n# Step 3: Get the details of the network using the network ID\nnetwork_response = requests.get(f\"https://api.themoviedb.org/3/network/{network_id}\", headers=headers)\nnetwork_homepage = network_response.json()[\"homepage\"]\n\nprint(network_homepage)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "results": "```python\nimport requests\n\n# API url to get the list of popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n# Parameters - we want only the first page\nparams = {\"page\": 1}\n\n# Make a GET request to get the list of popular TV shows\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results which contain information about popular TV shows\n    tv_shows = response.json()['results']\n    \n    # Get the tv_id of the most popular TV show\n    most_popular_show_id = tv_shows[0]['id']\n    \n    # API url to get the keywords of the most popular TV show\n    keywords_url = f\"https://api.themoviedb.org/3/tv/{most_popular_show_id}/keywords\"\n    \n    # Make a GET request to get the keywords of the most popular TV show\n    response_keywords = requests.get(keywords_url, headers=headers)\n    \n    # Check if the request was successful\n    if response_keywords.status_code == 200:\n        # Get the keywords of the most popular TV show\n        keywords = response_keywords.json()['results']\n        print(\"Keyword of the most popular TV show currently is:\", keywords[0]['name'])\n    else:\n        print(\"Failed to get keywords of the most popular TV show\")\nelse:\n    print(\"Failed to get list of popular TV shows\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get list of current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}\nresponse = requests.get(url, headers=headers, params=params)\npopular_tv_shows = response.json()[\"results\"]\n\n# Get the company that produced the most popular TV show\nmost_popular_tv_show = popular_tv_shows[0]\ncompany_id = most_popular_tv_show[\"production_companies\"][0][\"id\"]\n\n# Get company details\nurl = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse = requests.get(url, headers=headers)\ncompany_details = response.json()\n\nheadquarter_location = company_details[\"headquarters\"]\nprint(headquarter_location)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "results": "```python\nimport requests\n\n# Define the API url for searching TV show by query\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the query parameters\nparams = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\n\n# Include the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Get the genre_ids of the first result (assuming it's The Mandalorian)\n    if data['results']:\n        genre_ids = data['results'][0]['genre_ids']\n        print(\"Genre IDs of The Mandalorian:\", genre_ids)\n    else:\n        print(\"The Mandalorian was not found in the search results.\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "results": "```python\nimport requests\n\n# HTTP headers to be included in the request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get today's trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\ndata_trending_tv = response_trending_tv.json()\n\n# Extract the TV show id of the most trending TV show\nmost_trending_tv_id = data_trending_tv['results'][0]['id']\n\n# Get the credits of the most trending TV show to find the lead actor\nurl_credits = f\"https://api.themoviedb.org/3/tv/{most_trending_tv_id}/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Extract the lead actor id\nlead_actor_id = data_credits['cast'][0]['id']\n\n# Get the details of the lead actor to find their birthday\nurl_actor_details = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse_actor_details = requests.get(url_actor_details, headers=headers)\ndata_actor_details = response_actor_details.json()\n\n# Extract the birthday of the lead actor\nlead_actor_birthday = data_actor_details['birthday']\n\n# Output the lead actor's birthday\nprint(f\"The birthday of the lead actor of today's most trending TV show is: {lead_actor_birthday}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "results": "```python\nimport requests\n\n# API url to get the daily trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send request to get the trending TV shows\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the first TV show from the trending list\nfirst_tv_show_id = data['results'][0]['id']\n\n# API url to get the details of the TV show by id\ntv_show_url = f\"https://api.themoviedb.org/3/tv/{first_tv_show_id}\"\n# Send request to get the details of the TV show\ntv_show_response = requests.get(tv_show_url, headers=headers)\ntv_show_data = tv_show_response.json()\n\n# Get the network id of the TV show\nnetwork_id = tv_show_data['networks'][0]['id']\n\n# API url to get the details of the network by id\nnetwork_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\n# Send request to get the details of the network\nnetwork_response = requests.get(network_url, headers=headers)\nnetwork_data = network_response.json()\n\n# Get the homepage of the network\nnetwork_homepage = network_data['homepage']\n\nprint(f\"The homepage of the network that produced today's most trending TV show is: {network_homepage}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "give me a review of today's most trending TV show",
        "results": "```python\nimport requests\n\n# Define the API url to get today's most trending TV show\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the headers needed to access the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    # Get the TV show id of the most trending TV show\n    tv_id = response.json()['results'][0]['id']\n\n    # Define the API url to get reviews for TV show\n    reviews_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\n\n    # Send GET request to get reviews of the TV show\n    reviews_response = requests.get(reviews_url, headers=headers)\n\n    if reviews_response.status_code == 200:\n        reviews = reviews_response.json()['results']\n        print(reviews)\n\n    else:\n        print(\"Unable to fetch reviews\")\n\nelse:\n    print(\"Unable to fetch trending TV show\")\n\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "results": "```python\nimport requests\n\n# Define the API key\nAPI_KEY = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Define the base URL for the API\nbase_url = \"https://api.themoviedb.org/3/\"\n\n# HTTP header\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\"\n}\n\n# Get today's trending TV shows\nresponse = requests.get(f\"{base_url}trending/tv/day\", headers=headers)\ntrending_tv_shows = response.json()\n\n# Get the TV ID of the most trending TV show\ntrending_tv_id = trending_tv_shows['results'][0]['id']\n\n# Get a list of similar TV shows based on the trending TV show\nresponse = requests.get(f\"{base_url}tv/{trending_tv_id}/similar\", headers=headers)\nsimilar_tv_shows = response.json()\n\n# Extract relevant information from the response\nsimilar_shows_data = []\nfor show in similar_tv_shows['results']:\n    show_info = {\n        'name': show['name'],\n        'overview': show['overview'],\n        'first_air_date': show['first_air_date']\n    }\n    similar_shows_data.append(show_info)\n\nprint(similar_shows_data)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "results": "```python\nimport requests\n\n# Define the API url to get the trending TV shows airing today\nurl = \"https://api.themoviedb.org/3/tv/airing_today\"\n\n# Set the page parameter to 1 to get the first page of results\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the poster path of the first TV show in the results\n    trending_tv_shows = response.json()\n    if len(trending_tv_shows['results']) > 0:\n        first_tv_show = trending_tv_shows['results'][0]\n        poster_path = first_tv_show['poster_path']\n        print(\"Poster of today's most trending TV show:\", poster_path)\n    else:\n        print(\"No trending TV shows found for today.\")\nelse:\n    print(\"Error: Unable to fetch trending TV shows. Status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\ndef get_cast_credits(person_id):\n    # API url to get movie credits of a person\n    url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n    # Call the API to get movie credits of the person\n    response = requests.get(url, headers=headers)\n    data = response.json()\n\n    return data\n\ndef get_tv_credits(person_id):\n    # API url to get TV show credits of a person\n    url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n\n    # Call the API to get TV show credits of the person\n    response = requests.get(url, headers=headers)\n    data = response.json()\n\n    return data\n\n# Search for Jeremy Clarkson's person id\nquery = \"Jeremy Clarkson\"\nparams = {\n    \"query\": query,\n    \"include_adult\": False\n}\nurl = \"https://api.themoviedb.org/3/search/person\"\nresponse = requests.get(url, headers=headers, params=params)\nresult = response.json()\n\n# Get the person id of Jeremy Clarkson\nperson_id = result['results'][0]['id']\n\n# Get movie and TV show credits of Jeremy Clarkson\nmovie_credits = get_cast_credits(person_id)\ntv_credits = get_tv_credits(person_id)\n\n# Store all TV shows in a list\ntv_shows = []\nfor credit in tv_credits['cast']:\n    tv_shows.append(credit['title'])\n\n# Find the most popular TV show\nmost_popular_tv_show = max(tv_shows, key=tv_shows.count)\n\nprint(f\"The most popular TV show of Jeremy Clarkson is: {most_popular_tv_show}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ]
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "results": "```python\nimport requests\n\n# Define the API url to get the details of the TV show \"Black Mirror\"\ntv_id = 2743  # The TV show id for Black Mirror\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Retrieve the details of the first episode of the second season of Black Mirror\n    data = response.json()\n    first_episode = data['episodes'][0]\n\n    # Get the lead actor's details from the crew of the first episode\n    for crew_member in first_episode['crew']:\n        if crew_member['job'] == 'Director':\n            lead_actor = crew_member\n            break\n\n    lead_actor_name = lead_actor['name']\n    lead_actor_profile_path = lead_actor['profile_path']\n\n    print(f\"The lead actor of the first episode of the second season of Black Mirror is {lead_actor_name}.\")\n    if lead_actor_profile_path:\n        print(f\"Profile picture: https://image.tmdb.org/t/p/w200{lead_actor_profile_path}\")\n    else:\n        print(\"No profile picture available.\")\n\nelse:\n    print(\"Error occurred while fetching the data.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "results": "```python\nimport requests\n\n# API key and header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Mandalorian TV show\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"The Mandalorian\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Extract the TV show id for The Mandalorian\ntv_show_id = data_search_tv[\"results\"][0][\"id\"]\n\n# Get the credits for The Mandalorian\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the details for the lead actor\nlead_actor_id = data_credits[\"cast\"][0][\"id\"]\nurl_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse_person = requests.get(url_person, headers=headers)\ndata_person = response_person.json()\n\n# Extract the birthdate of the lead actor of The Mandalorian\nlead_actor_birthdate = data_person[\"birthday\"]\nprint(\"The lead actor of The Mandalorian is born on:\", lead_actor_birthdate)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "results": "```python\nimport requests\n\n# API headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of current popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}  # Specify page 1\nresponse_popular_tv = requests.get(url_popular_tv, headers=headers, params=params)\ndata_popular_tv = response_popular_tv.json()\n\n# Get the TV show details of the most popular TV show\npopular_tv_id = data_popular_tv['results'][0]['id']  # Get the TV show ID of the most popular TV show\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{popular_tv_id}\"\nresponse_tv_details = requests.get(url_tv_details, headers=headers)\ndata_tv_details = response_tv_details.json()\n\n# Get the details of the lead actor of the most popular TV show\nlead_actor_id = data_tv_details['created_by'][0]['id']  # Assuming the first creator is the lead actor\nurl_actor_details = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse_actor_details = requests.get(url_actor_details, headers=headers)\ndata_actor_details = response_actor_details.json()\n\nlead_actor_name = data_actor_details['name']\nprint(f\"The lead actor of today's most popular TV show is: {lead_actor_name}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "results": "```python\nimport requests\n\n# Http header to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get a list of the current popular TV shows\npopular_tv_url = \"https://api.themoviedb.org/3/tv/popular\"\npopular_tv_params = {\"page\": 1}  # Assume we are querying the first page\npopular_tv_response = requests.get(popular_tv_url, headers=headers, params=popular_tv_params)\npopular_tv_data = popular_tv_response.json()\n\nif popular_tv_response.status_code == 200:\n    # Get the ID of the most popular TV show\n    most_popular_tv_id = popular_tv_data[\"results\"][0][\"id\"]\n\n    # Call the API to get the credits of the most popular TV show\n    credits_url = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    credits_data = credits_response.json()\n    \n    if credits_response.status_code == 200 and credits_data[\"cast\"]:\n        # Get the profile path of the lead actor\n        lead_actor_profile_path = credits_data[\"cast\"][0][\"profile_path\"]\n        \n        if lead_actor_profile_path:\n            # Construct the image url for the lead actor\n            base_image_url = \"https://image.tmdb.org/t/p/w500\"\n            lead_actor_image_url = f\"{base_image_url}{lead_actor_profile_path}\"\n            \n            print(f\"The photo of the lead actor of the most popular TV show of this week: {lead_actor_image_url}\")\n        else:\n            print(\"Lead actor's profile path is not available.\")\n    else:\n        print(\"Error: No cast details available for the most popular TV show.\")\nelse:\n    print(\"Error: Unable to retrieve data from the API.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Cate Blanchett\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Cate Blanchett\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the latest TV show credits for Cate Blanchett\ntv_credit_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(tv_credit_url, headers=headers)\nlatest_tv_show_id = response.json()[\"cast\"][0][\"id\"]\n\n# Get the reviews for the latest TV show\ntv_reviews_url = f\"https://api.themoviedb.org/3/tv/{latest_tv_show_id}/reviews\"\nparams = {\"page\": 1}\nresponse = requests.get(tv_reviews_url, headers=headers, params=params)\nreviews = response.json()[\"results\"]\n\n# Output the reviews\nprint(reviews)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for David Schwimmer\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\ndata = response.json()\n\n# Get the person's id\nperson_id = data['results'][0]['id']\n\n# Get the TV show credits for David Schwimmer\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\", headers=headers)\ntv_credits = response.json()\n\n# Find the most popular TV show\nmost_popular_tv_show = max(tv_credits['cast'], key=lambda x: x['popularity'])\n\n# Print the most popular TV show\nprint(f\"The most popular TV show of David Schwimmer is: {most_popular_tv_show['name']}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "results": "```python\nimport requests\n\n# API url to get the TV show details by id (Black Mirror) and season number\nurl = \"https://api.themoviedb.org/3/tv/42009/season/2\"\n\n# Headers containing Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Parsing the JSON response\ndata = response.json()\n\n# Extracting the director of the third episode of the second season of Black Mirror\n# The crew array contains information about the directors and other crew members\nfor episode in data[\"episodes\"]:\n    if episode[\"episode_number\"] == 3:\n        for crew_member in episode[\"crew\"]:\n            if crew_member[\"job\"] == \"Director\":\n                director_name = crew_member[\"name\"]\n                print(f\"The director of the third episode of the second season of Black Mirror is: {director_name}\")\n                break\n        break\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ]
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "results": "```python\nimport requests\n\n# Define the API url and headers\nurl = \"https://api.themoviedb.org/3/search/person\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameters\nparams = {\n    \"query\": \"Christopher Nolan\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\nresult = response.json()\n\n# Get the known_for movies of Christopher Nolan\nknown_for_movies = []\nfor person in result[\"results\"]:\n    if person[\"name\"] == \"Christopher Nolan\":\n        known_for_movies = person[\"known_for\"]\n        break\n\n# Print the list of movies Christopher Nolan is known for\nfor movie in known_for_movies:\n    print(movie[\"title\"])\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Avatar movie\navatar_params = {\n    \"query\": \"Avatar\",\n    \"include_adult\": False\n}\navatar_response = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=avatar_params)\navatar_data = avatar_response.json()\n\n# Search for Avatar: The Way of Water movie\navatar_water_params = {\n    \"query\": \"Avatar: The Way of Water\",\n    \"include_adult\": False\n}\navatar_water_response = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=avatar_water_params)\navatar_water_data = avatar_water_response.json()\n\navatar_rating = 0\navatar_water_rating = 0\nfor result in avatar_data['results']:\n    if result['title'] == \"Avatar\":\n        avatar_rating = result['vote_average']\n\nfor result in avatar_water_data['results']:\n    if result['title'] == \"Avatar: The Way of Water\":\n        avatar_water_rating = result['vote_average']\n\nif avatar_rating > avatar_water_rating:\n    print(\"Avatar has a higher rating than Avatar: The Way of Water\")\nelse:\n    print(\"Avatar: The Way of Water has a higher rating than Avatar\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "results": "```python\nimport requests\n\n# API url\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n\n# Parameters\nparams = {\n    \"region\": \"US\", \n    \"sort_by\": \"vote_average.desc\",\n    \"primary_release_date.gte\": \"2021-01-01\",\n    \"vote_average.gte\": 7.0,\n    \"with_original_language\": \"en\",\n    \"page\": 1\n}\n\n# Headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get and print the response\nif response.status_code == 200:\n    data = response.json()\n    results = data[\"results\"]\n    for movie in results:\n        print(\"Movie Title:\", movie[\"title\"])\n        print(\"Release Date:\", movie[\"release_date\"])\n        print(\"Rating:\", movie[\"vote_average\"])\n        print(\"Overview:\", movie[\"overview\"])\n        print(\"--------------------\")\nelse:\n    print(\"Failed to fetch data\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "results": "```python\nimport requests\n\n# Define the API url for searching movie\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the query parameter for the movie search\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make a GET request to search for movies matching the query\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    data = response.json()\n    # Extract the genre ids of the first movie in the search results\n    if data[\"total_results\"] > 0:\n        genre_ids = data[\"results\"][0][\"genre_ids\"]\n        print(\"Genre ids of the movie Lord of the Rings:\", genre_ids)\n    else:\n        print(\"No results found for the query.\")\nelse:\n    print(\"Failed to fetch data. Status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Set the page parameter to 1 to get the first page of popular people\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the birthday of the most popular person\nif response.status_code == 200:\n    data = response.json()\n    # Get the birthday of the most popular person\n    most_popular_person_birthday = data[\"results\"][0][\"birthday\"]\n    print(\"Birthday of the most popular person right now:\", most_popular_person_birthday)\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "results": "```python\nimport requests\n\n# Define the base url for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the API endpoint for searching TV shows\nendpoint = \"/search/tv\"\n\n# Set the API key\napi_key = \"YOUR_API_KEY\"\n\n# Set the query parameter for the TV show \"Big Bang Theory\"\nparams = {\n    \"query\": \"Big Bang Theory\",\n    \"include_adult\": False\n}\n\n# Make the API request\nresponse = requests.get(base_url + endpoint, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show id for \"Big Bang Theory\" from the search results\ntv_id = data[\"results\"][0][\"id\"]\n\n# Define the API endpoint for getting the images of a TV season\nendpoint_season = f\"/tv/{tv_id}/season/2/images\"\n\n# Make the API request to get the images of the second season\nresponse_season = requests.get(base_url + endpoint_season, headers=headers)\ndata_season = response_season.json()\n\n# Get the poster path of the second season of \"Big Bang Theory\"\nposter_path = data_season[\"posters\"][0][\"file_path\"]\n\n# Print the poster path\nprint(poster_path)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "results": "```python\nimport requests\n\n# Define the necessary parameters\ntv_id = 82856  # The Mandalorian TV show id\nseason_number = 2  # Season number\nepisode_number = 3  # Episode number\n\n# API url to get the episode details\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the name of the third episode of the second season of Mandalorian\nthird_episode_name = data[\"name\"]\nprint(third_episode_name)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "results": "```python\nimport requests\n\n# Set the API url to get the lead actor of the movie The Shawshank Redemption\nmovie_id = 278  # The Shawshank Redemption movie_id\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Set the HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call to get the cast and crew of the movie\nresponse = requests.get(credits_url, headers=headers)\ndata = response.json()\n\n# Find the lead actor based on order\nlead_actor = None\nfor cast_member in data['cast']:\n    if cast_member['order'] == 1:  # Assuming order 1 represents the lead actor\n        lead_actor = cast_member\n        break\n\nif lead_actor:\n    # Get the lead actor's birthday\n    person_id = lead_actor['id']\n    person_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n    response = requests.get(person_url, headers=headers)\n    person_data = response.json()\n\n    # Print the lead actor's birthday\n    print(f\"The lead actor of The Shawshank Redemption is {lead_actor['name']} and his birthday is {person_data['birthday']}\")\nelse:\n    print(\"Lead actor information not found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ]
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# Define the API url to search for the movie \"The Shawshank Redemption\"\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the parameters for the search query\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make a GET request to search for the movie \"The Shawshank Redemption\"\nsearch_response = requests.get(search_movie_url, headers=headers, params=params).json()\n\n# Get the movie id of \"The Shawshank Redemption\"\nmovie_id = search_response[\"results\"][0][\"id\"]\n\n# Define the API url to get the credits of the movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make a GET request to get the credits of the movie \"The Shawshank Redemption\"\ncredits_response = requests.get(credits_url, headers=headers).json()\n\n# Get the director's id of the movie\nfor crew in credits_response[\"crew\"]:\n    if crew[\"job\"] == \"Director\":\n        director_id = crew[\"id\"]\n        break\n\n# Define the API url to get the details of the director\nperson_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n\n# Make a GET request to get the details of the director\nperson_response = requests.get(person_url, headers=headers).json()\n\n# Get the birthday of the director\ndirector_birthday = person_response[\"birthday\"]\n\n# Print the birthday of the director of the movie \"The Shawshank Redemption\"\nprint(f\"The birthday of the director of the movie 'The Shawshank Redemption' is: {director_birthday}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/movie/278\"\n\n# Set the API key in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Parse the JSON response\ndata = response.json()\n\n# Extract the production companies information\nproduction_companies = data['production_companies']\n\n# Get the first company's id\ncompany_id = production_companies[0]['id']\n\n# Set the API url to get the company details\ncompany_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n\n# Send the GET request to get the company details\ncompany_response = requests.get(company_url, headers=headers)\n\n# Parse the JSON response\ncompany_data = company_response.json()\n\n# Get the headquarters of the company that created the movie\nheadquarters = company_data['headquarters']\n\nprint(f\"The headquarters of the company that created the movie 'The Shawshank Redemption' is: {headquarters}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "results": "```python\nimport requests\n\n# Provided headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections with the name \"Star Wars\"\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Star Wars\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ncollection_data = response.json()\n\nif collection_data[\"total_results\"] > 0:\n    # Get the id of the first collection found\n    collection_id = collection_data[\"results\"][0][\"id\"]\n\n    # Get the details of the collection by id\n    url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    response = requests.get(url, headers=headers)\n    collection_details = response.json()\n\n    # Get the company id of the company that created the collection\n    company_id = collection_details[\"parts\"][0][\"id\"]\n\n    # Get the details of the company by id\n    url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    response = requests.get(url, headers=headers)\n    company_details = response.json()\n\n    headquarters_location = company_details[\"headquarters\"]\n    print(\"The headquarters of the company that created the collection Star Wars is:\", headquarters_location)\nelse:\n    print(\"No collection found with the name Star Wars.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "results": "```python\nimport requests\n\n# Define the API url for searching movies\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define parameters for searching the movie \"The Double Life of Veronique\"\nparams1 = {\n    \"query\": \"The Double Life of Veronique\",\n    \"include_adult\": False\n}\n# Get the search result for the movie\nresponse1 = requests.get(url, headers=headers, params=params1)\ndata1 = response1.json()\n\n# Get the release date of \"The Double Life of Veronique\"\nrelease_date_veronique = data1['results'][0]['release_date']\n\n# Define parameters for searching the movie \"Mulholland Drive\"\nparams2 = {\n    \"query\": \"Mulholland Drive\",\n    \"include_adult\": False\n}\n# Get the search result for the movie\nresponse2 = requests.get(url, headers=headers, params=params2)\ndata2 = response2.json()\n\n# Get the release date of \"Mulholland Drive\"\nrelease_date_drive = data2['results'][0]['release_date']\n\n# Compare the release dates to determine which movie has an earlier release date\nif release_date_veronique < release_date_drive:\n    print(\"The Double Life of Veronique was released earlier.\")\nelse:\n    print(\"Mulholland Drive was released earlier.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the credits for Twin Peaks Season 1\nresponse_season1 = requests.get(\"https://api.themoviedb.org/3/tv/1920/season/1/credits\", headers=headers)\ndata_season1 = response_season1.json()\n\n# Extract the director of Twin Peaks Season 1\ndirector_season1 = None\nfor crew_member in data_season1['crew']:\n    if crew_member['job'] == 'Director':\n        director_season1 = crew_member['name']\n        break\n\n# Call the API to get the credits for Mulholland Drive\nresponse_movie = requests.get(\"https://api.themoviedb.org/3/movie/101/movie/credits\", headers=headers)\ndata_movie = response_movie.json()\n\n# Extract the director of Mulholland Drive\ndirector_movie = None\nfor crew_member in data_movie['crew']:\n    if crew_member['job'] == 'Director':\n        director_movie = crew_member['name']\n        break\n\n# Check if the director of Twin Peaks Season 1 and Mulholland Drive are the same\nif director_season1 is not None and director_movie is not None:\n    if director_season1 == director_movie:\n        print(\"Yes, the director of Twin Peaks Season 1 and Mulholland Drive is the same person.\")\n    else:\n        print(\"No, the director of Twin Peaks Season 1 and Mulholland Drive is not the same person.\")\nelse:\n    print(\"Director information not found for either Twin Peaks Season 1 or Mulholland Drive.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "results": "```python\nimport requests\n\n# API key and headers\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Mulholland Drive\"\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"api_key\": api_key,\n    \"query\": \"Mulholland Drive\"\n}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\ndata = response.json()\n\nif data['total_results'] > 0:\n    movie_id = data['results'][0]['id']\n\n    # Get credits for the movie\n    movie_credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    params = {\n        \"api_key\": api_key\n    }\n    response = requests.get(movie_credits_url, headers=headers, params=params)\n    credits_data = response.json()\n\n    # Find the director's id\n    director_id = None\n    for crew_member in credits_data['crew']:\n        if crew_member['job'] == 'Director':\n            director_id = crew_member['id']\n            break\n\n    if director_id:\n        # Get the details of the director\n        person_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n        params = {\n            \"api_key\": api_key\n        }\n        response = requests.get(person_url, headers=headers, params=params)\n        person_data = response.json()\n\n        # Print the birth place of the director\n        print(\"The director of Mulholland Drive was born in:\", person_data['place_of_birth'])\n    else:\n        print(\"Director information not found.\")\nelse:\n    print(\"Movie not found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "results": "```python\nimport requests\n\n# HTTP headers to be used in the API requests\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to check if a particular movie is in the top-10 rated list\ndef is_movie_in_top_10(movie_title):\n    url = \"https://api.themoviedb.org/3/movie/top_rated\"\n    params = {\"page\": 1}  # Get the first page of top-rated movies\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n    \n    # Check if the movie is in the top 10 list\n    for movie in data[\"results\"]:\n        if movie[\"title\"] == movie_title:\n            return True\n    \n    return False\n\n# Check if \"Mulholland Drive\" is in the top-10 rated list\nis_in_top_10 = is_movie_in_top_10(\"Mulholland Drive\")\nprint(is_in_top_10)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "results": "```python\nimport requests\n\n# Define the headers needed to access the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the base URL for the TMDb API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Function to get the total movie count directed by a person\ndef get_directed_movie_count(person_name):\n    # Search for the person\n    search_person_url = f\"{base_url}/search/person\"\n    params = {\n        \"query\": person_name\n    }\n    response = requests.get(search_person_url, headers=headers, params=params)\n    person_data = response.json()[\"results\"][0]\n    person_id = person_data[\"id\"]\n    \n    # Get the person's movie credits\n    person_credits_url = f\"{base_url}/person/{person_id}/movie_credits\"\n    response = requests.get(person_credits_url, headers=headers)\n    movie_credits = response.json()[\"crew\"]\n    \n    return len(movie_credits)\n\n# Get the total movie count directed by Akira Kurosawa\nkurosawa_movie_count = get_directed_movie_count(\"Akira Kurosawa\")\n\n# Get the total movie count directed by Spielberg\nspielberg_movie_count = get_directed_movie_count(\"Steven Spielberg\")\n\n# Compare the total movie counts\nif kurosawa_movie_count > spielberg_movie_count:\n    print(\"Akira Kurosawa directed more movies.\")\nelif kurosawa_movie_count < spielberg_movie_count:\n    print(\"Steven Spielberg directed more movies.\")\nelse:\n    print(\"Both Akira Kurosawa and Steven Spielberg directed the same number of movies.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person ID of the director of Mulholland Drive\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params={\"query\": \"David Lynch\"})\ndata = response.json()\nperson_id = data['results'][0]['id']  # Get the person ID\n\n# Get the TV show credits for the director\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\", headers=headers)\ndata = response.json()\n\n# Extract the TV shows directed by the person\ntv_shows_directed = [credit['name'] for credit in data['crew'] if credit['job'] == 'Director']\n\nprint(tv_shows_directed)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "results": "```python\nimport requests\n\n# API url to search for a person\nurl = \"https://api.themoviedb.org/3/search/person\"\n# Provided headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Parameters to search for the person Scarlett Johansson\nparams = {\n    \"query\": \"Scarlett Johansson\",\n    \"include_adult\": False, # Do not include adult content\n    \"page\": 1\n}\n\n# Send the GET request to API\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the person id of Scarlett Johansson\nperson_id = data['results'][0]['id']\n\n# API url to get the person's details\nperson_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n# Call the API to get the person's details\nperson_response = requests.get(person_url, headers=headers)\nperson_data = person_response.json()\n\n# Print the birthday of Scarlett Johansson\nprint(f\"Scarlett Johansson's birthday is: {person_data['birthday']}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Sword Art Online\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Sword Art Online\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Get the primary details of the TV show\ntv_id = search_data['results'][0]['id']\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\ntv_details_response = requests.get(tv_details_url, headers=headers)\ntv_details_data = tv_details_response.json()\n\n# Extract the number of seasons\nnum_seasons = tv_details_data['number_of_seasons']\n\nprint(f\"The total number of seasons of Sword Art Online is: {num_seasons}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "results": "```python\nimport requests\n\n# Define the API endpoints for getting movie credits for Yui Aragaki\naragaki_id = 200949\naragaki_credits_url = f\"https://api.themoviedb.org/3/person/{aragaki_id}/movie_credits\"\n\n# Define the API endpoints for getting movie credits for Gen Hoshino\nhoshino_id = 133368\nhoshino_credits_url = f\"https://api.themoviedb.org/3/person/{hoshino_id}/movie_credits\"\n\n# Define the API endpoints for searching the movie \"We Married as Job\"\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make API calls to get movie credits for Yui Aragaki and Gen Hoshino\naragaki_response = requests.get(aragaki_credits_url, headers=headers)\nhoshino_response = requests.get(hoshino_credits_url, headers=headers)\n\nif aragaki_response.status_code == 200 and hoshino_response.status_code == 200:\n    aragaki_movies = aragaki_response.json()[\"cast\"]\n    hoshino_movies = hoshino_response.json()[\"cast\"]\n\n    # Check if both Yui Aragaki and Gen Hoshino are in the cast of \"We Married as Job\"\n    we_married_as_job_id = 362899\n    aragaki_in_we_married = any(movie[\"id\"] == we_married_as_job_id for movie in aragaki_movies)\n    hoshino_in_we_married = any(movie[\"id\"] == we_married_as_job_id for movie in hoshino_movies)\n\n    if aragaki_in_we_married and hoshino_in_we_married:\n        print(\"Yui Aragaki and Gen Hoshino are co-starring in We Married as Job\")\n    else:\n        print(\"Yui Aragaki and Gen Hoshino are not co-starring in We Married as Job\")\nelse:\n    print(\"Error: Unable to fetch movie credits data\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the director of a movie\ndef get_movie_director(movie_id):\n    url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        data = response.json()\n        for crew_member in data[\"crew\"]:\n            if crew_member[\"job\"] == \"Director\":\n                return crew_member[\"name\"]\n    return None\n\n# Function to get the lead actor of a TV show\ndef get_tv_show_lead_actor(tv_id):\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        data = response.json()\n        return data[\"cast\"][0][\"name\"]\n    return None\n\n# Get the director of the movie \"Barbie\"\nbarbie_director = get_movie_director(307843)\n\n# Get the lead actor of the TV show \"Death Note\"\ndeath_note_lead_actor = get_tv_show_lead_actor(670)\n\n# Print the result\nif barbie_director is not None and death_note_lead_actor is not None:\n    print(f\"The director of film Barbie is {barbie_director} and the lead actor of television Death Note is {death_note_lead_actor}.\")\nelse:\n    print(\"Director of Barbie or lead actor of Death Note not found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "results": "```python\nimport requests\n\n# Define the API url to search for the person\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the query parameters\nparams = {\n    \"query\": \"Katherine LaNasa\",\n    \"include_adult\": False,\n    \"region\": \"US\"  # Assuming US region for release dates\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the person's ID from the search results\n    person_id = response.json()[\"results\"][0][\"id\"]\n\n    # Define the API url to get movie credits for the person\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    \n    # Make the API request to get movie credits\n    movie_credits_response = requests.get(movie_credits_url, headers=headers)\n    \n    # Check if the second request was successful\n    if movie_credits_response.status_code == 200:\n        # Get the latest movie appearance\n        latest_movie = movie_credits_response.json()[\"cast\"][0][\"title\"]\n        print(f\"Katherine LaNasa's latest movie appearance: {latest_movie}\")\n    else:\n        print(\"Error fetching movie credits data\")\nelse:\n    print(\"Error fetching person data\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query for the movie \"Oppenheimer\"\nparams = {\n    \"query\": \"Oppenheimer\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the GET request to search for the movie\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results in JSON format\n    data = response.json()\n    \n    # Get the poster path of the first movie in the search results\n    if data[\"total_results\"] > 0:\n        poster_path = data[\"results\"][0][\"poster_path\"]\n        # Construct the full image url\n        image_url = f\"https://image.tmdb.org/t/p/original{poster_path}\"\n        \n        print(image_url)\n    else:\n        print(\"No results found for the movie 'Oppenheimer'\")\nelse:\n    print(\"Failed to retrieve data from TMDB API\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    }
]