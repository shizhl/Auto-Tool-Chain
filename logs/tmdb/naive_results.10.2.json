[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "results": "```python\nimport requests\n\n# Define the headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person - Sofia Coppola\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nperson_search_params = {\n    \"query\": \"Sofia Coppola\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(person_search_url, headers=headers, params=person_search_params)\ndata = response.json()\n\n# Extract the person ID for Sofia Coppola\nperson_id = None\nif data.get(\"results\"):\n    for result in data.get(\"results\"):\n        if result.get(\"name\") == \"Sofia Coppola\":\n            person_id = result.get(\"id\")\n            break\n\n# If person ID is found, get the movie credits for the person\nif person_id:\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(movie_credits_url, headers=headers)\n    movie_credits_data = response.json()\n    \n    # Count the number of movies directed by Sofia Coppola\n    num_movies_directed = 0\n    if movie_credits_data.get(\"crew\"):\n        for credit in movie_credits_data.get(\"crew\"):\n            if credit.get(\"job\") == \"Director\":\n                num_movies_directed += 1\n\n    print(f\"Number of movies directed by Sofia Coppola: {num_movies_directed}\")\n\nelse:\n    print(\"Person ID for Sofia Coppola not found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "results": "```python\nimport requests\n\n# API url to search for the movie \"The Dark Knight\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"The Dark Knight\",\n    \"include_adult\": False\n}\n\n# Retrieve the movie id for \"The Dark Knight\"\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\nsearch_results = response_search_movie.json()\nmovie_id = search_results[\"results\"][0][\"id\"]\n\n# API url to get credits for the movie\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Retrieve the credits for the movie\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\nmovie_credits = response_movie_credits.json()\nlead_actor = movie_credits[\"cast\"][0][\"name\"]\n\nprint(f\"The lead actor in the movie 'The Dark Knight' was: {lead_actor}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "results": "```python\nimport requests\n\n# API url to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Parameters for the API request\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Adding the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request to get the top rated movies\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the response to get the director of the top rated movie\nif response.status_code == 200:\n    # Get the movie results from the response\n    movie_results = response.json()[\"results\"]\n    \n    # Check if there are movie results\n    if len(movie_results) > 0:\n        # Get the id of the top rated movie\n        top_movie_id = movie_results[0][\"id\"]\n        \n        # API url to get the credits of the top rated movie\n        credits_url = f\"https://api.themoviedb.org/3/movie/{top_movie_id}/credits\"\n        \n        # Make the API request to get the credits of the top rated movie\n        credits_response = requests.get(credits_url, headers=headers)\n        \n        # Parse the credits response to get the director of the top rated movie\n        if credits_response.status_code == 200:\n            crew = credits_response.json()[\"crew\"]\n            for member in crew:\n                if member[\"job\"] == \"Director\":\n                    director = member[\"name\"]\n                    print(\"The director of the top rated movie is:\", director)\n                    break\n        else:\n            print(\"Failed to get credits of the top rated movie\")\n    else:\n        print(\"No movie results found\")\nelse:\n    print(\"Failed to get top rated movies\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "give me a image for the collection Star Wars",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the parameters\nquery = \"Star Wars\"\nparams = {\n    \"query\": query,\n    \"page\": 1\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse and display the response\nresult = response.json()\nif 'results' in result and len(result['results']) > 0:\n    collection_id = result['results'][0]['id']\n    collection_name = result['results'][0]['name']\n\n    # Call images API for the specific collection\n    images_url = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\n    images_response = requests.get(images_url, headers=headers)\n    images_result = images_response.json()\n\n    # Display image for the collection\n    if 'posters' in images_result and len(images_result['posters']) > 0:\n        image_path = images_result['posters'][0]['file_path']\n        print(f\"Image for collection {collection_name}: https://image.tmdb.org/t/p/original{image_path}\")\n    else:\n        print(\"No image found for the collection.\")\nelse:\n    print(\"No collection found with the provided query.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/search/company\"\nparams = {\n    \"query\": \"Walt Disney\"\n}\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the company_id for Walt Disney from the search result\ncompany_id = None\nfor result in data['results']:\n    if result['name'] == \"Walt Disney\":\n        company_id = result['id']\n        break\n\n# If the company_id is found, get the logo image\nif company_id:\n    url = f\"https://api.themoviedb.org/3/company/{company_id}/images\"\n    response = requests.get(url, headers=headers)\n    data = response.json()\n    logos = data['logos']\n    \n    # Print the logo information\n    if logos:\n        for logo in logos:\n            print(\"Logo URL: https://image.tmdb.org/t/p/original\" + logo['file_path'])\n    else:\n        print(\"No logo found for Walt Disney.\")\nelse:\n    print(\"Walt Disney not found in the company search results.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "results": "```python\nimport requests\n\n# API url to search for the movie Titanic\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\n# Parameters for searching for the movie Titanic\nparams = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n# Make a GET request to search for the movie Titanic\nresponse = requests.get(search_movie_url, headers=headers, params=params)\n# Extracting the movie id of Titanic from the search result\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# API url to get the cast and crew for the movie Titanic\nmovie_credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n# Make a GET request to get the cast and crew for the movie Titanic\nresponse_credits = requests.get(movie_credits_url, headers=headers)\n\n# Extracting the lead actor (first cast member)\nlead_actor_name = response_credits.json()[\"cast\"][0][\"name\"]\n# Printing the lead actor's name\nprint(f\"The lead actor of Titanic is: {lead_actor_name}\")\n\n# Using the lead actor's id to get images for the lead actor\nlead_actor_id = response_credits.json()[\"cast\"][0][\"id\"]\n# API url to get images for the lead actor of Titanic\nimages_actor_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}/images\"\n# Make a GET request to get images for the lead actor\nresponse_images = requests.get(images_actor_url, headers=headers)\n\n# Extracting image file paths for the lead actor\nimage_paths = [image[\"file_path\"] for image in response_images.json()[\"profiles\"]]\n# Printing the image paths for the lead actor\nprint(\"Image paths for the lead actor:\")\nfor path in image_paths:\n    print(path)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie ID of Titanic\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\",\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\ntitanic_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get the similar movies to Titanic\nsimilar_url = f\"https://api.themoviedb.org/3/movie/{titanic_id}/similar\"\nsimilar_params = {\n    \"page\": 1\n}\nsimilar_response = requests.get(similar_url, headers=headers, params=similar_params)\nsimilar_movies = similar_response.json()[\"results\"]\n\n# Get the reviews of the first similar movie\nfirst_similar_id = similar_movies[0][\"id\"]\nreviews_url = f\"https://api.themoviedb.org/3/movie/{first_similar_id}/reviews\"\nreviews_params = {\n    \"page\": 1\n}\nreviews_response = requests.get(reviews_url, headers=headers, params=reviews_params)\nreviews = reviews_response.json()[\"results\"]\n\n# Output the reviews\nprint(reviews)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "results": "```python\nimport requests\n\n# API url for getting recommendations for a movie\nurl_recommendations = \"https://api.themoviedb.org/3/movie/597/recommendations\"  # Assuming Titanic movie_id is 597\n\n# Parameters for the API request\nparams_recommendations = {\n    'page': 1\n}\n\n# Sending a GET request to the API\nresponse_recommendations = requests.get(url_recommendations, headers=headers, params=params_recommendations)\n\n# Getting the response data\nrecommendations_data = response_recommendations.json()\n\n# Extracting and printing the recommended movies\nif 'results' in recommendations_data:\n    for movie in recommendations_data['results']:\n        print(movie['title'])\nelse:\n    print(\"No recommendations found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "results": "```python\nimport requests\n\n# Set the API URL\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n\n# Set the parameters to discover movies directed by Christopher Nolan\nparams = {\n    \"api_key\": \"YOUR_API_KEY\",\n    \"with_crew\": \"5250\",  # Christopher Nolan's id as a director\n    \"sort_by\": \"release_date.desc\"  # Sort by release date in descending order\n}\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the latest movie directed by Christopher Nolan\nif response.status_code == 200:\n    data = response.json()\n    latest_movie = data[\"results\"][0][\"title\"]\n    print(f\"The latest movie directed by Christopher Nolan is: {latest_movie}\")\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for person with name \"Martin Scorsese\"\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Martin Scorsese\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person_id of Martin Scorsese\nif len(data[\"results\"]) > 0:\n    person_id = data[\"results\"][0][\"id\"]\n\n    # Get the movie credits of Martin Scorsese\n    person_movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(person_movie_credits_url, headers=headers)\n    movie_credits = response.json()\n\n    # Find the highest rated movie directed by Martin Scorsese\n    highest_rated_movie = None\n    max_vote_average = 0\n    for movie in movie_credits[\"crew\"]:\n        if movie[\"job\"] == \"Director\" and movie[\"vote_average\"] > max_vote_average:\n            max_vote_average = movie[\"vote_average\"]\n            highest_rated_movie = movie\n\n    if highest_rated_movie:\n        movie_title = highest_rated_movie[\"title\"]\n        vote_average = highest_rated_movie[\"vote_average\"]\n        print(f\"The highest rated movie directed by Martin Scorsese is '{movie_title}' with a rating of {vote_average}.\")\n    else:\n        print(\"No movie directed by Martin Scorsese found.\")\nelse:\n    print(\"Martin Scorsese not found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "results": "```python\nimport requests\n\n# API headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the latest movie of an actor\ndef get_latest_movie(actor_name):\n    # Search for the actor ID\n    search_url = \"https://api.themoviedb.org/3/search/person\"\n    search_params = {\n        \"query\": actor_name,\n        \"page\": 1,\n        \"include_adult\": False,\n        \"region\": \"US\"\n    }\n    response = requests.get(search_url, headers=headers, params=search_params)\n    actor_id = response.json()[\"results\"][0][\"id\"]\n\n    # Get the movie credits of the actor\n    credits_url = f\"https://api.themoviedb.org/3/person/{actor_id}/movie_credits\"\n    response = requests.get(credits_url, headers=headers)\n    latest_movie = response.json()[\"cast\"][0]\n\n    return latest_movie\n\n# Function to get the director of a movie\ndef get_director(movie_id):\n    # Get the credits of the movie\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response = requests.get(credits_url, headers=headers)\n    crew = response.json()[\"crew\"]\n    \n    # Find the director from the crew\n    for person in crew:\n        if person[\"job\"] == \"Director\":\n            return person[\"name\"]\n\n# Get the latest movie of Leonardo DiCaprio\nlatest_movie = get_latest_movie(\"Leonardo DiCaprio\")\n\n# Get the director of the latest movie\ndirector_name = get_director(latest_movie[\"id\"])\n\nprint(f\"The director of Leonardo DiCaprio's latest movie is: {director_name}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\"query\": \"Catherine Hardwicke\", \"page\": 1, \"include_adult\": False, \"region\": \"US\"}\nresponse_person = requests.get(search_person_url, headers=headers, params=params)\nperson_results = response_person.json()[\"results\"]\n\n# Get TV show credits for the person\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_results[0]['id']}/tv_credits\"\nresponse_tv_credits = requests.get(tv_credits_url, headers=headers)\ntv_credits = response_tv_credits.json()\n\n# Filter for TV shows where Catherine Hardwicke is a director\nrecent_tv_shows_directed = []\nfor credit in tv_credits['crew']:\n    if credit['job'] == \"Director\" and credit['name'] == \"Catherine Hardwicke\":\n        recent_tv_show_info_url = f\"https://api.themoviedb.org/3/tv/{credit['id']}\"\n        response_tv_show_info = requests.get(recent_tv_show_info_url, headers=headers)\n        recent_tv_show_info = response_tv_show_info.json()\n        recent_tv_shows_directed.append(recent_tv_show_info)\n\nprint(recent_tv_shows_directed)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show id of Breaking Bad\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Breaking Bad\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the TV show id of Breaking Bad\n# Assuming the first result is the correct one\nbreaking_bad_id = search_results[\"results\"][0][\"id\"]\n\n# Get recommendations for the TV show with the Breaking Bad id\nrecommend_url = f\"https://api.themoviedb.org/3/tv/{breaking_bad_id}/recommendations\"\nrecommend_params = {\n    \"page\": 1\n}\nrecommend_response = requests.get(recommend_url, headers=headers, params=recommend_params)\nrecommend_results = recommend_response.json()\n\n# Extract and display the recommendations\nrecommendations = recommend_results[\"results\"]\nfor recommendation in recommendations:\n    print(recommendation[\"name\"])\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "results": "```python\nimport requests\n\n# API url to get the daily trending movies\nurl = \"https://api.themoviedb.org/3/trending/movie/day\"\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API request\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\nif 'results' in data and len(data['results']) > 0:\n    # Get the ID of the most trending movie\n    movie_id = data['results'][0]['id']\n\n    # API url to get the credits for a movie\n    url_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    \n    # Making the API request to get the credits for the movie\n    response_credits = requests.get(url_credits, headers=headers)\n    credits_data = response_credits.json()\n\n    if 'crew' in credits_data:\n        director = None\n        for crew_member in credits_data['crew']:\n            if crew_member['job'] == 'Director':\n                director = crew_member['name']\n                break\n        \n        if director:\n            print(f\"The director of today's most trending movie is: {director}\")\n        else:\n            print(\"Director information not found for the movie.\")\n    else:\n        print(\"Crew information not found for the movie.\")\nelse:\n    print(\"No trending movies found.\")\n\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for the movie \"Twilight\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Twilight\",\n    \"include_adult\": False,\n    \"page\": 1,\n}\n\n# Make the API request to search for the movie \"Twilight\"\nresponse = requests.get(url_search_movie, headers=headers, params=params)\nsearch_results = response.json()\n\n# Get the movie id of the first search result\nif search_results[\"total_results\"] > 0:\n    movie_id = search_results[\"results\"][0][\"id\"]\nelse:\n    print(\"Movie 'Twilight' not found\")\n    movie_id = None\n\n# Check if the movie id exists\nif movie_id:\n    # Define the API endpoint to get the credits of the movie\n    url_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    \n    # Make the API request to get the credits of the movie\n    response_credits = requests.get(url_movie_credits, headers=headers)\n    credits = response_credits.json()\n    \n    # Find the director in the crew list\n    director = None\n    for crew_member in credits[\"crew\"]:\n        if crew_member[\"job\"] == \"Director\":\n            director = crew_member[\"name\"]\n            break\n    \n    if director:\n        print(f\"The director of the movie 'Twilight' is: {director}\")\n    else:\n        print(\"Director information not found for the movie 'Twilight'\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "results": "```python\nimport requests\n\n# Define the API url to get the images for the second episode of the first season of The Witcher\nurl = \"https://api.themoviedb.org/3/tv/85271/season/1/episode/2/images\"\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the data in JSON format\n    data = response.json()\n    # Extract the image file path from the response\n    if len(data[\"stills\"]) > 0:\n        image_path = data[\"stills\"][0][\"file_path\"]\n        print(\"Image path for the second episode of the first season of The Witcher:\", image_path)\n    else:\n        print(\"No images found for the specified episode.\")\nelse:\n    print(\"Error with status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "What is top-1 rated movie?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Calling the API to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\nparams = {\"page\": 1}  # Requesting the first page\nresponse = requests.get(url, headers=headers, params=params)\n\n# Getting the results and extracting the top-1 movie\nif response.status_code == 200:\n    data = response.json()\n    top_rated_movies = data['results']\n    top_rated_movie = top_rated_movies[0]  # Top-1 rated movie is the first element in the list\n    print(top_rated_movie['title'])  # Print the title of the top-1 rated movie\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching a movie\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for the search query, searching for \"The Matrix\"\nparams = {\n    \"query\": \"The Matrix\",\n    \"page\": 1,\n    \"include_adult\": False,\n}\n\n# Make the HTTP request to search for the movie\nresponse_search = requests.get(url_search_movie, headers=headers, params=params)\ndata_search = response_search.json()\n\n# Extract the movie_id of \"The Matrix\" from the search results\nif data_search[\"total_results\"] > 0:\n    movie_id = data_search[\"results\"][0][\"id\"]\n\n    # Define the API endpoint for getting release dates of a movie by movie_id\n    url_release_dates = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n\n    # Make the HTTP request to get the release dates of \"The Matrix\"\n    response_release_dates = requests.get(url_release_dates, headers=headers)\n    data_release_dates = response_release_dates.json()\n\n    # Extract and print the release dates\n    for result in data_release_dates[\"results\"]:\n        for release_date_info in result[\"release_dates\"]:\n            if release_date_info[\"type\"] == 2:  # Theatrical release type\n                release_date = release_date_info[\"release_date\"]\n                print(\"Release date of 'The Matrix':\", release_date)\n                break  # Break since we found the theatrical release date\n            else:\n                print(\"Release date not found.\")\nelse:\n    print(\"Movie 'The Matrix' not found.\")\n\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    },
    {
        "query": "Who is the most popular person?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Getting the list of popular people\nresponse = requests.get(url, headers=headers)\n\n# Checking if the request was successful\nif response.status_code == 200:\n    popular_people = response.json()\n    most_popular_person = popular_people['results'][0]  # The first person is the most popular based on the response\n    print(f\"The most popular person is: {most_popular_person['name']}\")\nelse:\n    print(\"Failed to retrieve data\")\n\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person 'Christopher Nolan'\nresponse_person = requests.get(\"https://api.themoviedb.org/3/search/person\", \n                               headers=headers, \n                               params={\"query\": \"Christopher Nolan\"})\nperson_data = response_person.json()\n\n# Get the person id of Christopher Nolan\nperson_id = person_data['results'][0]['id']\n\n# Get the movie credits of Christopher Nolan\nresponse_movie_credits = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\",\n                                      headers=headers)\nmovie_credits_data = response_movie_credits.json()\n\n# Get the cover images of movies directed by Christopher Nolan\ncover_images = []\nfor movie in movie_credits_data['crew']:\n    if movie['job'] == \"Director\":\n        movie_id = movie['id']\n        response_images = requests.get(f\"https://api.themoviedb.org/3/movie/{movie_id}/images\",\n                                       headers=headers)\n        images_data = response_images.json()\n        if 'posters' in images_data:\n            cover_images.extend(images_data['posters'])\n\n# Output the cover images\nprint(cover_images)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the movie ID for \"Titanic\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Extract the movie ID for \"Titanic\" from the search results\nif data_search_movie['total_results'] > 0:\n    movie_id = data_search_movie['results'][0]['id']\n\n    # Define the API endpoint to get the keywords for the movie\n    url_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n    response_keywords = requests.get(url_keywords, headers=headers)\n    data_keywords = response_keywords.json()\n\n    # Extract and print the keywords associated with the movie \"Titanic\"\n    if 'keywords' in data_keywords:\n        keywords = [keyword['name'] for keyword in data_keywords['keywords']]\n        print(keywords)\n    else:\n        print(\"Keywords not found for the movie Titanic.\")\nelse:\n    print(\"Movie Titanic not found.\")\n\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "Give me a show that is currently on the air",
        "results": "```python\nimport requests\n\n# Define the API url to get the list of shows currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n# Define the parameters (if needed)\nparams = {\"page\": 1}\n# Assign the headers with bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse and print the response data\n    data = response.json()\n    tv_shows = data[\"results\"]\n    \n    for show in tv_shows:\n        print(show[\"name\"])\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "results": "```python\nimport requests\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for Clint Eastwood\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\nparams_search_person = {\n    \"query\": \"Clint Eastwood\"\n}\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\nresult_search_person = response_search_person.json()\n\n# Extract person_id for Clint Eastwood\nclint_eastwood_id = result_search_person[\"results\"][0][\"id\"]\n\n# Step 2: Get the movie credits for Clint Eastwood\nurl_movie_credits = f\"https://api.themoviedb.org/3/person/{clint_eastwood_id}/movie_credits\"\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\nresult_movie_credits = response_movie_credits.json()\n\n# Extract the release date (latest movie) for Clint Eastwood\nlatest_movie_release_date = result_movie_credits[\"cast\"][0][\"release_date\"]\nprint(\"Clint Eastwood's latest movie is scheduled to be released on:\", latest_movie_release_date)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "results": "```python\nimport requests\n\n# Define the API url, in this case, we will search for the movie id of \"The Dark Knight\" first\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"api_key\": \"YOUR_API_KEY_HERE\",\n    \"query\": \"The Dark Knight\"\n}\n\n# Make a GET request to search for the movie\nresponse = requests.get(movie_search_url, params=params)\n\n# Extract the movie ID from the search results\nif response.status_code == 200:\n    movie_id = response.json()[\"results\"][0][\"id\"]\n\n    # Use the movie ID to get the reviews for that movie\n    movie_reviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n    params = {\n        \"api_key\": \"YOUR_API_KEY_HERE\",\n        \"page\": 1\n    }\n\n    # Make a GET request to get the reviews\n    response = requests.get(movie_reviews_url, headers=headers, params=params)\n\n    if response.status_code == 200:\n        reviews = response.json()[\"results\"]\n        for review in reviews:\n            print(f\"Author: {review['author']}\")\n            print(f\"Content: {review['content']}\")\n            print(\"----\")\n    else:\n        print(\"Failed to get movie reviews.\")\nelse:\n    print(\"Failed to find the movie ID for 'The Dark Knight' using the search API.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for a person using the name 'Francis Ford Coppola'\nparams = {\n    \"query\": \"Francis Ford Coppola\",\n    \"include_adult\": False\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\nperson_results = response.json()['results']\n\nif person_results:\n    # Get the movies directed by Francis Ford Coppola\n    person_id = person_results[0]['id']\n    response = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\", headers=headers)\n    movie_credits = response.json()['crew']\n\n    if movie_credits:\n        # For simplicity, consider the first movie directed by Francis Ford Coppola\n        movie_id = movie_credits[0]['id']\n\n        # Get similar movies to the selected movie\n        params = {\n            \"page\": 1\n        }\n        response = requests.get(f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\", headers=headers, params=params)\n        similar_movies = response.json()['results']\n\n        # Print the title of similar movies\n        for movie in similar_movies:\n            print(movie['title'])\n    else:\n        print(\"No movie credits found.\")\nelse:\n    print(\"Person not found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "results": "```python\nimport requests\n\n# Headers to access the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API URL to get the latest movie\nlatest_movie_url = \"https://api.themoviedb.org/3/movie/latest\"\n\n# Make the API request\nresponse = requests.get(latest_movie_url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the lead actor name from the response\n    latest_movie_data = response.json()\n    if 'cast' in latest_movie_data:\n        lead_actor = latest_movie_data['cast'][0]['name']\n        print(\"The lead actor in the latest released movie is:\", lead_actor)\n    else:\n        print(\"Lead actor data not found.\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the API url to get a list of movies currently playing in theaters\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the first movie result from the response\n    movie_info = response.json()[\"results\"][0]\n\n    # Get the movie ID\n    movie_id = movie_info[\"id\"]\n\n    # Define the API url to get images of the movie by ID\n    images_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n\n    # Send a GET request to the images API\n    images_response = requests.get(images_url, headers=headers)\n\n    # Check if the request was successful\n    if images_response.status_code == 200:\n        # Get the first backdrop image of the movie\n        image_path = images_response.json()[\"backdrops\"][0][\"file_path\"]\n        image_url = f\"https://image.tmdb.org/t/p/original{image_path}\"\n\n        print(f\"Image URL of the movie currently playing in theaters: {image_url}\")\n    else:\n        print(\"Error in fetching images\")\nelse:\n    print(\"Error in fetching movie details\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n# Define the API parameters\nparams = {\n    \"page\": 1,  # Page number\n    \"region\": \"US\"  # Region code\n}\n# Include the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie_id of the most popular movie\n    most_popular_movie_id = response.json()[\"results\"][0][\"id\"]\n\n    # Define the API endpoint for getting keywords of a movie\n    keywords_url = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\n    \n    # Make a request to get the keywords of the most popular movie\n    keywords_response = requests.get(keywords_url, headers=headers)\n    \n    # Check if the request was successful\n    if keywords_response.status_code == 200:\n        # Get the keywords of the most popular movie\n        keywords = keywords_response.json()[\"keywords\"]\n        \n        print(\"Most popular movie keywords:\")\n        for keyword in keywords:\n            print(keyword[\"name\"])\n    else:\n        print(\"Failed to get keywords for the most popular movie.\")\nelse:\n    print(\"Failed to get the most popular movie.\")\n\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Define the parameters for the request\nparams = {\n    \"page\": 1,  # Get the first page\n    \"region\": \"US\"  # Specify the region (ISO 3166-1 code)\n}\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the JSON response\ndata = response.json()\n\n# Get the movie id of the most popular movie\nmost_popular_movie_id = data['results'][0]['id']\n\n# Use the movie id to call the keywords API\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\nkeywords_response = requests.get(keywords_url, headers=headers)\n\n# Get the keywords of the most popular movie\nkeywords_data = keywords_response.json()\nkeywords = [keyword['name'] for keyword in keywords_data['keywords']]\nprint(keywords)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "results": "```python\nimport requests\n\n# Define the API url to search for the movie Titanic\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Parameters for searching the movie Titanic\nparams_search_movie = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\n\n# Make the HTTP request to search for the movie Titanic\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie ID for Titanic\nif data_search_movie[\"total_results\"] > 0:\n    movie_id_titanic = data_search_movie[\"results\"][0][\"id\"]\nelse:\n    print(\"Titanic movie not found.\")\n    exit()\n\n# Define the API url to get the cast and crew for the movie Titanic\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id_titanic}/credits\"\n\n# Make the HTTP request to get the cast and crew for the movie Titanic\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Get the cast members for the movie Titanic\ncast_members = data_movie_credits[\"cast\"]\n\n# Extract the names of the cast members\ncast_names = [member[\"name\"] for member in cast_members]\n\n# Print the list of cast members who starred in the movie Titanic\nprint(\"Cast members of Titanic:\")\nfor name in cast_names:\n    print(name)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "results": "```python\nimport requests\n\n# API url to get the company details by id\nurl = \"https://api.themoviedb.org/3/company/4\"  # 4 is the company_id for Paramount Pictures\n\n# HTTP headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the logo_path for Paramount Pictures\n    company_data = response.json()\n    logo_path = company_data[\"logo_path\"]\n    \n    print(\"Logo path for Paramount Pictures:\")\n    print(logo_path)\nelse:\n    print(\"Failed to fetch logo information for Paramount Pictures.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for companies with the query \"universal pictures\"\nurl_search_company = \"https://api.themoviedb.org/3/search/company\"\nparams_search_company = {\n    \"query\": \"universal pictures\",\n    \"page\": 1\n}\n\nresponse_search_company = requests.get(url_search_company, headers=headers, params=params_search_company)\ndata_search_company = response_search_company.json()\n\n# Get the details of the first company found\nif data_search_company['total_results'] > 0:\n    company_id = data_search_company['results'][0]['id']\n    \n    # Get the company details by ID\n    url_company_details = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    response_company_details = requests.get(url_company_details, headers=headers)\n    data_company_details = response_company_details.json()\n    \n    # Extract the headquarters location\n    headquarters_location = data_company_details['headquarters']\n    print(f\"The headquarters location of Universal Pictures is: {headquarters_location}\")\nelse:\n    print(\"Universal Pictures company not found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "results": "```python\nimport requests\n\n# Set the API url for searching a movie\nurl = \"https://api.themoviedb.org/3/search/movie\"\nmovie_name = \"Titanic\"\n\n# Define the parameters for the search query\nparams = {\n    \"query\": movie_name,\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Make a GET request to search for the movie\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results from the response\n    results = response.json()[\"results\"]\n    \n    # Check if there are any results\n    if results:\n        # Get the first movie in the results (assuming it is the correct movie)\n        first_movie = results[0]\n        movie_id = first_movie[\"id\"]\n        \n        # Now we get the release dates for the movie using the movie_id\n        release_dates_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n        release_dates_response = requests.get(release_dates_url, headers=headers)\n        \n        if release_dates_response.status_code == 200:\n            # Get the results from the response\n            release_dates = release_dates_response.json()[\"results\"]\n            \n            # Find the release date for the movie\n            for release_date in release_dates:\n                if release_date[\"iso_3166_1\"] == \"US\":\n                    formatted_release_date = release_date[\"release_dates\"][0][\"release_date\"]\n                    print(f\"The movie '{movie_name}' was released on: {formatted_release_date}\")\n                    break\n        else:\n            print(\"Unable to retrieve release dates for the movie.\")\n    else:\n        print(f\"No movie found with the name '{movie_name}'.\")\nelse:\n    print(\"Failed to search for the movie.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for Star Wars collection\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Step 2: Get details of the first collection found\nif search_results['total_results'] > 0:\n    collection_id = search_results['results'][0]['id']\n\n    collection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    collection_details_response = requests.get(collection_details_url, headers=headers)\n    collection_details = collection_details_response.json()\n\n    # Step 3: Get the cast of the first movie in the collection\n    if len(collection_details['parts']) > 0:\n        first_movie_cast_url = f\"https://api.themoviedb.org/3/movie/{collection_details['parts'][0]['id']}/credits\"\n        first_movie_cast_response = requests.get(first_movie_cast_url, headers=headers)\n        first_movie_cast = first_movie_cast_response.json()\n\n        # Extract cast names\n        cast_names = [actor['name'] for actor in first_movie_cast['cast']]\n        print(cast_names)\n    else:\n        print(\"No movie found in the collection\")\nelse:\n    print(\"Star Wars collection not found\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the query parameters\nparams = {\n    \"query\": \"Harry Potter\",\n    \"page\": 1\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    results = data['results']\n    \n    # Get the poster path of the first collection (assuming there is a match)\n    if results:\n        collection = results[0]\n        poster_path = collection['poster_path']\n        print(poster_path)\n    else:\n        print(\"No movie cover found for the collection 'Harry Potter'\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "results": "```python\nimport requests\n\n# HTTP headers containing authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Searching for collection 'The Hunger Games' to get the collection id\nsearch_collection_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"The Hunger Games\"\n}\nresponse = requests.get(search_collection_url, headers=headers, params=search_params)\ncollection_id = response.json()[\"results\"][0][\"id\"]\n\n# Using the collection id to get the details of the collection\ncollection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse = requests.get(collection_details_url, headers=headers)\nkeywords = response.json()[\"parts\"][0][\"keywords\"]\nkeyword_list = [keyword[\"name\"] for keyword in keywords]\n\nprint(keyword_list)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "results": "```python\nimport requests\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections with the name \"The Hobbit\"\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"The Hobbit\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the collection id for \"The Hobbit\"\ncollection_id = search_results['results'][0]['id']\n\n# Get the details of the collection with id = collection_id\ncollection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\ncollection_details_response = requests.get(collection_details_url, headers=headers)\ncollection_details = collection_details_response.json()\n\n# Extract the release dates of the movies in the collection\nrelease_dates = []\nfor movie in collection_details['parts']:\n    release_dates.append(movie['release_date'])\n\nprint(release_dates)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "results": "```python\nimport requests\n\n# Api key for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Fast and the Furious collection\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    results = response.json()[\"results\"]\n    for result in results:\n        print(\"Name:\", result[\"name\"])\n        print(\"Collection ID:\", result[\"id\"])\n        print(\"Poster Path:\", result[\"poster_path\"])\n        print(\"---\")\nelse:\n    print(\"Error connecting to API\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "results": "```python\nimport requests\n\n# Set the API key and headers\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Step 1: Search for the collection ID of \"The Fast and the Furious\"\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"The Fast and the Furious\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params).json()\n\n# Extract the collection ID\ncollection_id = search_response['results'][0]['id']\n\n# Step 2: Get the reviews of a movie in the collection\nreview_url = f\"https://api.themoviedb.org/3/movie/{collection_id}/reviews\"\nreview_params = {\n    \"page\": 1\n}\nreview_response = requests.get(review_url, headers=headers, params=review_params).json()\n\n# Output the reviews\nreviews = review_response['results']\nfor review in reviews:\n    print(f\"Author: {review['author']}\")\n    print(f\"Content: {review['content']}\")\n    print()\n```\nThis code first searches for the collection ID of \"The Fast and the Furious\" and then retrieves the reviews of a movie in that collection. Finally, it outputs the author and content of each review.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "results": "```python\nimport requests\n\n# API endpoint to search for collections\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Parameters for search collection API\nparams_search_collection = {\n    \"query\": \"Lord of the Rings\"\n}\n\n# Call the search collection API\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ndata_search_collection = response_search_collection.json()\n\n# Get the collection ID of \"Lord of the Rings\"\ncollection_id = data_search_collection['results'][0]['id']\n\n# API endpoint to get collection details by id\nurl_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n# Call the collection details API\nresponse_collection_details = requests.get(url_collection_details, headers=headers)\ndata_collection_details = response_collection_details.json()\n\n# Get the release date of the first movie in the collection\nfirst_movie_release_date = data_collection_details['parts'][0]['release_date']\n\nprint(first_movie_release_date)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"0dbab590c7eaca07ebf2d7e8e2242f63\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show \"House of Cards\" to get its ID\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nshow_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the first season of House of Cards\ncredits_url = f\"https://api.themoviedb.org/3/tv/{show_id}/season/1/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits = response.json()\n\n# Extracting directors from the crew list for the first season\ndirectors = [crew[\"name\"] for crew in credits[\"crew\"] if crew[\"job\"] == \"Director\"]\n\n# Print the directors of the first season of House of Cards\nprint(directors)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"House of Cards\"\nsearch_params = {\n    \"query\": \"House of Cards\"\n}\nsearch_response = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=search_params)\nhouse_of_cards_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get a list of similar TV shows to \"House of Cards\"\nsimilar_params = {\n    \"page\": 1\n}\nsimilar_response = requests.get(f\"https://api.themoviedb.org/3/tv/{house_of_cards_id}/similar\", headers=headers, params=similar_params)\nsimilar_tv_shows = similar_response.json()[\"results\"]\n\n# Print the names of similar TV shows\nfor show in similar_tv_shows:\n    print(show[\"name\"])\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API endpoint to get list of shows currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Calling the API to get a list of shows currently on the air\nresponse = requests.get(url, headers=headers)\n\n# Checking if the response is successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Getting the details of the most popular TV show currently on the air\n    most_popular_show = data['results'][0]\n    \n    # Extracting the start date of the show\n    start_date = most_popular_show['first_air_date']\n    \n    print(\"The most popular TV show currently on the air started on:\", start_date)\nelse:\n    print(\"Failed to get data from the API\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "results": "```python\nimport requests\n\n# Define the API url to get the movie details of Django Unchained\nmovie_id = 68718\nurl = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nparams = {'append_to_response': 'credits'}\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    # Extract the director name from the response\n    movie_details = response.json()\n    director_name = None\n    for crew in movie_details['credits']['crew']:\n        if crew['job'] == 'Director':\n            director_name = crew['name']\n            break\n\n    if director_name:\n        # API to get the movie credits for the director\n        url = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\n        response = requests.get(url, headers=headers)\n\n        if response.status_code == 200:\n            # Extract a few more works directed by the director\n            director_credits = response.json()['crew']\n            more_works = [work['title'] for work in director_credits[:5]]  # Get the titles of the first 5 movies\n            print(\"A few more works directed by the director of Django Unchained:\")\n            for work in more_works:\n                print(work)\n        else:\n            print(\"Error in getting director credits.\")\n    else:\n        print(\"Director of Django Unchained not found.\")\nelse:\n    print(\"Error in getting movie details.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "results": "```python\nimport requests\n\n# API url to get the list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\nparams = {\"page\": 1}  # Specify the page number\n\n# Make the get request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the JSON data from the response\n    tv_shows_data = response.json()\n    \n    # Get the first TV show from the results\n    if len(tv_shows_data[\"results\"]) > 0:\n        first_tv_show = tv_shows_data[\"results\"][0]\n        tv_show_id = first_tv_show[\"id\"]\n        \n        # API url to get the credits for a specific TV show\n        credits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n        \n        # Make another get request to get the credits of the TV show\n        credits_response = requests.get(credits_url, headers=headers)\n        \n        # Check if the credits response is successful\n        if credits_response.status_code == 200:\n            # Get the cast data from the response\n            credits_data = credits_response.json()\n            \n            # Extract the cast list from the credits data\n            cast_list = credits_data[\"cast\"]\n            \n            # Print the list of cast members\n            for cast_member in cast_list:\n                print(cast_member[\"name\"])\n        else:\n            print(\"Error fetching credits data\")\n    else:\n        print(\"No TV show on the air found\")\nelse:\n    print(\"Error fetching TV shows data\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "I need a review for Breaking Bad",
        "results": "```python\nimport requests\n\n# Api endpoint to search for TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nparams = {\n    \"query\": \"Breaking Bad\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting TV show id for Breaking Bad\ntv_id = response.json()['results'][0]['id']\n\n# Api endpoint to get reviews for the TV show Breaking Bad\nurl_reviews = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\nparams_reviews = {\n    \"page\": 1\n}\nresponse_reviews = requests.get(url_reviews, headers=headers, params=params_reviews)\n\n# Extracting reviews for Breaking Bad\nreviews = response_reviews.json()['results']\n\nprint(reviews)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# API url to search for TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for the search query\nparams = {\n    \"query\": \"The Last Of Us\",\n    \"include_adult\": False\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()[\"results\"]\n    \n    # Get the TV show id for \"The Last Of Us\"\n    tv_id = results[0][\"id\"]\n    \n    # API url to get TV show recommendations\n    url_recommendations = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\n\n    # Make a GET request to the API for recommendations\n    response_recommendations = requests.get(url_recommendations, headers=headers, params={\"page\": 1})\n\n    # Check if the request was successful\n    if response_recommendations.status_code == 200:\n        # Get the recommendations\n        recommendations = response_recommendations.json()[\"results\"]\n        print(recommendations)\n    else:\n        print(\"Failed to retrieve recommendations\")\nelse:\n    print(\"Failed to retrieve TV show information\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# Define the base URL for the TMDB API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Set the API key\napi_key = \"YOUR_API_KEY_HERE\"\n\n# Set the headers for the API request\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show \"The Last of Us\" to get its ID\nsearch_params = {\n    \"query\": \"The Last of Us\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(f\"{base_url}/search/tv\", headers=headers, params=search_params)\nsearch_results = search_response.json()\ntv_show_id = search_results[\"results\"][0][\"id\"]\n\n# Get recommendations for the TV show using its ID\nrecommendation_params = {\n    \"page\": 1\n}\nrecommendation_response = requests.get(f\"{base_url}/tv/{tv_show_id}/recommendations\", headers=headers, params=recommendation_params)\nrecommendation_results = recommendation_response.json()\n\n# Print the recommendations\nrecommendations = recommendation_results[\"results\"]\nfor recommendation in recommendations:\n    print(recommendation[\"name\"])\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "results": "```python\nimport requests\n\n# Define the API URL to get the TV show details by id\napi_url = \"https://api.themoviedb.org/3/tv/1668/season/3/episode/24/credits\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(api_url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    \n    # Extract the guest stars information from the response\n    guest_stars = data[\"guest_stars\"]\n    \n    # Iterate over the guest stars and print their names\n    for star in guest_stars:\n        print(star[\"name\"])\n\nelse:\n    # Print an error message if the request was not successful\n    print(\"Error: Unable to retrieve guest stars. Status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "results": "```python\nimport requests\n\n# Assign the authorization token to the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get a list of popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}\nresponse = requests.get(url, headers=headers, params=params)\ntv_shows_data = response.json()\n\n# Get the TV show id of the most popular TV show\nmost_popular_tv_show_id = tv_shows_data['results'][0]['id']\n\n# Call the API to get the credits (cast and crew) of the most popular TV show\ncredits_url = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_show_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\n\n# Get the lead actor in the most popular TV show\nlead_actor = credits_data['cast'][0]['name']\nprint(lead_actor)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/top_rated\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the parameters (page=1)\nparams = {\n    \"page\": 1\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the keyword of the top-1 rated TV show\n    top_rated_tv_shows = response.json()['results']\n    if len(top_rated_tv_shows) > 0:\n        top_1_keyword = requests.get(f\"https://api.themoviedb.org/3/tv/{top_rated_tv_shows[0]['id']}/keywords\", headers=headers).json()['results'][0]['name']\n        print(f\"The keyword of the top-1 rated TV show is: {top_1_keyword}\")\n    else:\n        print(\"No top rated TV show found.\")\nelse:\n    print(\"Failed to fetch data\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "results": "```python\nimport requests\n\n# API key and headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"2 Broke Girls\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ntv_show_id = response.json()['results'][0]['id']\n\n# Get the images of the TV show\nimages_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/images\"\nresponse = requests.get(images_url, headers=headers)\nposter_path = response.json()['posters'][0]['file_path']\n\n# Base URL for image poster\nbase_url = \"https://image.tmdb.org/t/p/w500/\"\n\n# Print the URL for the poster of \"2 Broke Girls\"\nprint(base_url + poster_path)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "results": "```python\nimport requests\n\n# Set the base URL for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"2 Broke Girls\"\nsearch_url = f\"{base_url}/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show ID for \"2 Broke Girls\"\ntv_id = data[\"results\"][0][\"id\"]\n\n# Get the details of the TV show by ID\ntv_details_url = f\"{base_url}/tv/{tv_id}\"\nresponse = requests.get(tv_details_url, headers=headers)\ndata = response.json()\n\n# Calculate the total number of episodes\ntotal_episodes = 0\nfor season in data[\"seasons\"]:\n    total_episodes += season[\"episode_count\"]\n\nprint(total_episodes)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "results": "```python\nimport requests\n\n# Define the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"The Big Bang Theory\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"The Big Bang Theory\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_show_info = response_search_tv.json()\n\n# Extract the production company id\nif 'results' in tv_show_info and len(tv_show_info['results']) > 0:\n    production_company_id = tv_show_info['results'][0]['production_companies'][0]['id']\n\n# Get the company details by id\nurl_company_details = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\nresponse_company_details = requests.get(url_company_details, headers=headers)\ncompany_info = response_company_details.json()\n\n# Print the foundation year of the company\nprint(f\"The company that produced The Big Bang Theory was founded in: {company_info['foundation_year']}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show by its name\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Big Bang Theory\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show id\ntv_id = data['results'][0]['id']\n\n# Get the primary details of the TV show by id\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Extract the first air date of the TV show\ncreation_date = data['first_air_date']\n\nprint(f\"The TV show 'The Big Bang Theory' was created on: {creation_date}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "results": "```python\nimport requests\n\n# Http header to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get a list of the current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the TV show id of the most popular TV show\n    tv_show_id = data['results'][0]['id']\n    \n    # API url to get the keywords of the most popular TV show\n    keyword_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/keywords\"\n    \n    # Send GET request to the API\n    keyword_response = requests.get(keyword_url, headers=headers)\n    \n    # Check if the keyword request was successful\n    if keyword_response.status_code == 200:\n        # Parse the keyword JSON response\n        keyword_data = keyword_response.json()\n        \n        # Get the first keyword of the most popular TV show\n        first_keyword = keyword_data['results'][0]['name']\n        \n        print(f\"The keyword of the most popular TV show is: {first_keyword}\")\n    else:\n        print(\"Failed to get keywords for the most popular TV show\")\nelse:\n    print(\"Failed to get list of popular TV shows\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "results": "```python\nimport requests\n\n# API url to get TV show details by episode\nurl = \"https://api.themoviedb.org/3/tv/63247/season/2/episode/3\"\n# Parameters\nparams = {\n    'api_key': 'YOUR_API_KEY'  # Replace 'YOUR_API_KEY' with your actual API key\n}\n# HTTP Headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Get the overview of the episode\n    episode_overview = data['overview']\n    print(\"The third episode of the second season of Westworld talked about:\", episode_overview)\nelse:\n    # Print an error message if the request was not successful\n    print(\"Error - Unable to fetch data\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/1399/season/2\"\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Convert the response to JSON\n    data = response.json()\n    \n    # Get the air date of the second season of Game of Thrones\n    air_date = data['air_date']\n    \n    print(\"The air date of the second season of Game of Thrones is:\", air_date)\nelse:\n    print(\"Error: Unable to fetch data.\")\n\n# Make sure to replace tv_id with the actual id of Game of Thrones\n# In this case, the id of Game of Thrones is 1399.\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show Band of Brothers\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_search_params = {\n    \"query\": \"Band of Brothers\"\n}\ntv_search_response = requests.get(tv_search_url, headers=headers, params=tv_search_params)\ntv_search_results = tv_search_response.json()\nband_of_brothers_id = tv_search_results[\"results\"][0][\"id\"]\n\n# Get details of the third episode of Band of Brothers\nepisode_details_url = f\"https://api.themoviedb.org/3/tv/{band_of_brothers_id}/season/1/episode/3\"\nepisode_details_response = requests.get(episode_details_url, headers=headers)\nepisode_details = episode_details_response.json()\n\n# Get the poster path of the third episode of Band of Brothers\nposter_path = episode_details[\"still_path\"]\nprint(poster_path)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "results": "```python\nimport requests\n\n# Define the base URL for API calls\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Set the API key for authorization\napi_key = \"0dbab590c7eaca07ebel625974a37ad92\"\n\n# Set the headers for the API call\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show \"Game of Thrones\"\nsearch_url = f\"{base_url}/search/tv\"\nsearch_params = {\n    \"query\": \"Game of Thrones\"\n}\n\n# Get the TV show details by id\nresponse = requests.get(search_url, headers=headers, params=search_params)\nshow_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the primary TV show details by id\ntv_details_url = f\"{base_url}/tv/{show_id}\"\ntv_details_response = requests.get(tv_details_url, headers=headers)\nnetwork_id = tv_details_response.json()[\"networks\"][0][\"id\"]\n\n# Get the network details by id\nnetwork_url = f\"{base_url}/network/{network_id}\"\nnetwork_details_response = requests.get(network_url, headers=headers)\nnetwork_logo = network_details_response.json()[\"logos\"][0][\"file_path\"]\nprint(network_logo)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "results": "```python\nimport requests\n\n# Define the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for \"Game of Thrones\"\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params={\"query\": \"Game of Thrones\"})\ngame_of_thrones_id = response.json()[\"results\"][0][\"id\"] if response.json()[\"results\"] else None\n\n# Get the primary details of \"Game of Thrones\"\nif game_of_thrones_id:\n    response = requests.get(f\"https://api.themoviedb.org/3/tv/{game_of_thrones_id}\", headers=headers)\n    game_of_thrones_details = response.json()\n\n    # Get the network id that produced Game of Thrones\n    network_id = game_of_thrones_details[\"networks\"][0][\"id\"] if game_of_thrones_details[\"networks\"] else None\n\n    # Get the homepage of the network that produced Game of Thrones\n    if network_id:\n        response = requests.get(f\"https://api.themoviedb.org/3/network/{network_id}\", headers=headers)\n        network_homepage = response.json()[\"homepage\"]\n        print(network_homepage)\n    else:\n        print(\"No network information found for Game of Thrones\")\nelse:\n    print(\"Game of Thrones not found in the database\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "results": "```python\nimport requests\n\n# API url for getting a list of the current popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n# API url for getting keywords of a TV show\nurl_keywords = \"https://api.themoviedb.org/3/tv/{}/keywords\"\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get a list of the current popular TV shows\nresponse_popular_tv = requests.get(url_popular_tv, headers=headers)\ndata_popular_tv = response_popular_tv.json()\n\n# Get the TV show ID of the most popular TV show\ntv_id = data_popular_tv[\"results\"][0][\"id\"]\n\n# Get the keywords of the most popular TV show\nresponse_keywords = requests.get(url_keywords.format(tv_id), headers=headers)\ndata_keywords = response_keywords.json()\n\n# Get the first keyword of the most popular TV show\nkeyword = data_keywords[\"results\"][0][\"name\"]\n\nprint(\"Keyword of the most popular TV show currently:\", keyword)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "results": "```python\nimport requests\n\n# Http headers for authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Request the list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {'page': 1}  # Requesting the first page\nresponse = requests.get(url_popular_tv, headers=headers, params=params)\ndata = response.json()\n\n# Get the id of the company that produced currently the most popular TV show\nmost_popular_tv_show = data['results'][0]  # Get the most popular TV show\nproduction_company_id = most_popular_tv_show['production_companies'][0]['id']\n\n# Request the details of the company\nurl_company_details = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\nresponse_company = requests.get(url_company_details, headers=headers)\ncompany_data = response_company.json()\n\n# Extracting the headquarters of the company\nheadquarter = company_data['headquarters']\n\nprint(\"The headquarters of the company that produced currently the most popular TV show is:\", headquarter)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "results": "```python\nimport requests\n\n# Define the API url to get the primary TV show details\nurl = \"https://api.themoviedb.org/3/tv/82856\"\n\n# Define the parameters\nparams = {\n    \"language\": \"en-US\"\n}\n\n# Set the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Get the genre of The Mandalorian\n    genres = data.get(\"genres\", [])\n    genre_names = [genre[\"name\"] for genre in genres]\n    print(\"The genre of The Mandalorian is:\", genre_names)\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get today's trending TV show\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\ntrending_tv_data = response_trending_tv.json()\n\n# Get the lead actor's birthday from the TV show\nif trending_tv_data[\"results\"]:\n    lead_actor_id = trending_tv_data[\"results\"][0][\"id\"]\n    url_credits = f\"https://api.themoviedb.org/3/tv/{lead_actor_id}/credits\"\n    response_credits = requests.get(url_credits, headers=headers)\n    credits_data = response_credits.json()\n\n    # Get the lead actor's id\n    lead_actor_id = credits_data[\"cast\"][0][\"id\"]\n\n    # Get the lead actor's details\n    url_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n    response_person = requests.get(url_person, headers=headers)\n    person_data = response_person.json()\n\n    birthday = person_data[\"birthday\"]\n    print(f\"The lead actor's birthday is: {birthday}\")\nelse:\n    print(\"No trending TV show found today.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "results": "```python\nimport requests\n\n# Define the API url and parameters to get the trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\nparams = {}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request to get the response\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the response JSON to get the TV show ID\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Define the API url to get the TV show details by ID\ntv_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\ntv_params = {}\n\n# Make the API request to get the TV show details\ntv_response = requests.get(tv_url, headers=headers, params=tv_params)\n\n# Get the network ID from the TV show details\nnetwork_id = tv_response.json()[\"networks\"][0][\"id\"]\n\n# Define the API url to get the network details by ID\nnetwork_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\nnetwork_params = {}\n\n# Make the API request to get the network details\nnetwork_response = requests.get(network_url, headers=headers, params=network_params)\n\n# Get the homepage of the network\nnetwork_homepage = network_response.json()[\"homepage\"]\n\nprint(network_homepage)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "give me a review of today's most trending TV show",
        "results": "```python\nimport requests\n\n# API url to get today's most trending TV shows\nurl_trending_TV = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Adding the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the trending TV shows\nresponse_trending_TV = requests.get(url_trending_TV, headers=headers)\ntrending_TV_data = response_trending_TV.json()\n\n# Get the tv_id of the most trending TV show\nif \"results\" in trending_TV_data and len(trending_TV_data[\"results\"]) > 0:\n    most_trending_TV_id = trending_TV_data[\"results\"][0][\"id\"]\n    \n    # API url to get reviews of the most trending TV show\n    url_reviews = f\"https://api.themoviedb.org/3/tv/{most_trending_TV_id}/reviews\"\n\n    # Get the reviews of the most trending TV show\n    response_reviews = requests.get(url_reviews, headers=headers)\n    reviews_data = response_reviews.json()\n\n    # Print the results\n    print(reviews_data)\nelse:\n    print(\"No trending TV show found.\")\n```  ",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "results": "```python\nimport requests\n\n# Set the API endpoint\nurl_trending = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the headers with the authentication token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to get the trending TV shows\nresponse = requests.get(url_trending, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the TV show id of the most trending TV show\n    trending_tv_show_id = response.json()[\"results\"][0][\"id\"]\n\n    # Set the API endpoint to get similar TV shows\n    url_similar_tv = f\"https://api.themoviedb.org/3/tv/{trending_tv_show_id}/similar\"\n\n    # Send a GET request to get similar TV shows\n    response_similar_tv = requests.get(url_similar_tv, headers=headers)\n\n    # Check if the request was successful\n    if response_similar_tv.status_code == 200:\n        similar_tv_shows = response_similar_tv.json()[\"results\"]\n        print(similar_tv_shows)\n    else:\n        print(\"Failed to retrieve similar TV shows.\")\nelse:\n    print(\"Failed to retrieve trending TV shows.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "results": "```python\nimport requests\n\n# Set the API url to get the trending TV shows for the day\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    \n    # Get the URL of the poster for the most trending TV show\n    if len(data[\"results\"]) > 0:\n        trending_tv_show = data[\"results\"][0]\n        poster_url = f\"https://image.tmdb.org/t/p/original{trending_tv_show['poster_path']}\"\n        print(\"Poster URL of today's most trending TV show:\", poster_url)\n    else:\n        print(\"No trending TV shows found for today\")\nelse:\n    print(\"Failed to retrieve trending TV show data. Status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "results": "```python\n# First, we need to find Jeremy Clarkson's person_id\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nparams = {\n    \"query\": \"Jeremy Clarkson\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\ndata = response.json()\nperson_id = data['results'][0]['id']\n\n# Next, we need to get the TV credits for Jeremy Clarkson\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\", headers=headers)\ntv_credits_data = response.json()\n\n# Now, we will find the most popular TV show Jeremy Clarkson has worked on\nmax_popularity = 0\nmost_popular_show = \"\"\n\nfor show in tv_credits_data['cast']:\n    if show['popularity'] > max_popularity:\n        max_popularity = show['popularity']\n        most_popular_show = show['name']\n\n# Finally, we will find the people who have worked with Jeremy Clarkson in his most popular TV show\nfor show in tv_credits_data['cast']:\n    if show['name'] == most_popular_show:\n        cast_members = show['cast']\n        for member in cast_members:\n            if member['name'] != 'Jeremy Clarkson': # To exclude Jeremy Clarkson from the list\n                print(member['name'])\n                break\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "results": "```python\nimport requests\n\n# Define the API endpoints\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_credits_url = \"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits\"\nperson_images_url = \"https://api.themoviedb.org/3/person/{person_id}/images\"\n\n# Set the API token in headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Black Mirror\" to get its ID\nsearch_params = {\n    \"query\": \"Black Mirror\"\n}\nresponse = requests.get(search_tv_url, headers=headers, params=search_params)\ntv_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits of the first episode of the second season of Black Mirror\ntv_credits_params = {\n    \"tv_id\": tv_id,\n    \"season_number\": 2,\n    \"episode_number\": 1\n}\nresponse = requests.get(tv_credits_url.format(tv_id=tv_id, season_number=2, episode_number=1), headers=headers, params=tv_credits_params)\nlead_actor_id = response.json()[\"cast\"][0][\"id\"]\n\n# Get the images of the lead actor\nresponse = requests.get(person_images_url.format(person_id=lead_actor_id), headers=headers)\nlead_actor_image_path = response.json()[\"profiles\"][0][\"file_path\"]\n\nprint(\"The lead actor of the first episode of the second season of Black Mirror looks like:\")\nprint(f\"https://image.tmdb.org/t/p/w500{lead_actor_image_path}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "results": "```python\nimport requests\n\n# Define the API url to search for TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Define the query parameter to search for \"The Mandalorian\"\nparams_search_tv = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\n\n# Make the API call to search for TV shows\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\n\n# Check if the response status is successful\nif response_search_tv.status_code == 200:\n    # Get the results from the response\n    results_search_tv = response_search_tv.json()[\"results\"]\n    if results_search_tv:\n        # Get the TV show id for \"The Mandalorian\"\n        tv_id = results_search_tv[0][\"id\"]\n        \n        # Define the API url to get the credits for the TV show\n        url_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n        \n        # Make the API call to get the credits for \"The Mandalorian\"\n        response_credits = requests.get(url_credits, headers=headers)\n        \n        # Check if the response status is successful\n        if response_credits.status_code == 200:\n            # Get the cast information from the response\n            cast_info = response_credits.json()[\"cast\"]\n            \n            # Find the lead actor of \"The Mandalorian\"\n            for actor in cast_info:\n                if actor[\"order\"] == 0:  # The lead actor usually has the order 0\n                    lead_actor_id = actor[\"id\"]\n                    break\n            \n            # Define the API url to get the person details\n            url_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n            \n            # Make the API call to get the person details of the lead actor\n            response_person = requests.get(url_person, headers=headers)\n            \n            # Check if the response status is successful\n            if response_person.status_code == 200:\n                # Get the birthdate of the lead actor of \"The Mandalorian\"\n                birthdate = response_person.json()[\"birthday\"]\n                print(f\"The lead actor of The Mandalorian is born on: {birthdate}\")\n            else:\n                print(\"Failed to retrieve the lead actor's details\")\n        else:\n            print(\"Failed to retrieve cast details for The Mandalorian\")\n    else:\n        print(\"No results found for The Mandalorian\")\nelse:\n    print(\"Failed to search for TV shows\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API endpoint to get the list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Getting the popular TV shows data\nresponse = requests.get(url_popular_tv, headers=headers)\ndata = response.json()\n\n# Extracting the TV show ID of the most popular TV show\nmost_popular_tv_id = data['results'][0]['id']\n\n# API endpoint to get the credits (cast and crew) of a TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_id}/credits\"\n\n# Getting the credits data of the most popular TV show\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Extracting the lead actor of the most popular TV show\nlead_actor = data_credits['cast'][0]['name']\n\nprint(f\"The lead actor of today's most popular TV show is: {lead_actor}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the appropriate parameters for the API call\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request to get popular TV shows\nresponse = requests.get(url_popular_tv, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show ID of the most popular TV show\ntv_show_id = data[\"results\"][0][\"id\"]\n\n# Define the API endpoint to get the credits of the TV show\nurl_tv_credits = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n\n# Make the API request to get the credits of the TV show\nresponse_credits = requests.get(url_tv_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the profile path of the lead actor\nlead_actor_profile_path = data_credits[\"cast\"][0][\"profile_path\"]\n\n# Print the URL of the lead actor's profile image\nif lead_actor_profile_path:\n    lead_actor_image_url = f\"https://image.tmdb.org/t/p/original{lead_actor_profile_path}\"\n    print(lead_actor_image_url)\nelse:\n    print(\"Lead actor profile image not available.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "results": "```python\nimport requests\n\n# Set the API key and headers\nAPI_KEY = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\"\n}\n\n# Search for Cate Blanchett\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Cate Blanchett\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nresults = response.json()\n\n# Get the person id for Cate Blanchett\nperson_id = results['results'][0]['id']\n\n# Get the latest TV show credits for Cate Blanchett\nperson_tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(person_tv_credits_url, headers=headers)\ncredits = response.json()\n\n# Get the latest TV show id for Cate Blanchett\nlatest_tv_show_id = credits['cast'][0]['id']\n\n# Get the reviews for the latest TV show\ntv_reviews_url = f\"https://api.themoviedb.org/3/tv/{latest_tv_show_id}/reviews\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(tv_reviews_url, headers=headers, params=params)\ntv_reviews = response.json()\n\n# Extract and print some reviews\nfor review in tv_reviews['results']:\n    print(\"Author:\", review['author'])\n    print(\"Content:\", review['content'])\n    print(\"----\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "results": "```python\nimport requests\n\n# API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n\n}\n\n# Search for David Schwimmer\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\ndata = response.json()\n\n# Get David Schwimmer's person ID\nperson_id = data['results'][0]['id']\n\n# Get David Schwimmer's TV show credits\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\ntv_credits_data = response.json()\n\n# Find the most popular TV show\npopular_tv_show = max(tv_credits_data['cast'], key=lambda x: x['popularity'])\n\nprint(\"David Schwimmer's most popular TV show is:\", popular_tv_show['original_name'])\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "results": "```python\nimport requests\n\n# Define the headers including the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Get the TV show ID for Black Mirror\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Black Mirror\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_id = response_search_tv.json()['results'][0]['id']\n\n# 2. Get the credits for the third episode of the second season of Black Mirror\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/episode/3/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndirector = response_credits.json()['crew'][0]['name']\n\nprint(f\"The director of the third episode of the second season of Black Mirror is: {director}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Christopher Nolan\nsearch_people_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_people_url, headers=headers, params=params)\ndata = response.json()\n\n# Get Christopher Nolan's ID\nchristopher_nolan_id = None\nif data[\"results\"]:\n    christopher_nolan_id = data[\"results\"][0][\"id\"]\n\nmovies_known_for = []\n\nif christopher_nolan_id:\n    # Get Christopher Nolan's information\n    person_images_url = f\"https://api.themoviedb.org/3/person/{christopher_nolan_id}/images\"\n    response = requests.get(person_images_url, headers=headers)\n    data = response.json()\n\n    # Get images from the response\n    if \"profiles\" in data:\n        images = data[\"profiles\"]\n\n        # Get a list of movies Christopher Nolan is known for based on images\n        for image in images:\n            movie_id = image.get(\"id\")\n            if movie_id:\n                movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n                params = {}\n                response = requests.get(movie_details_url, headers=headers, params=params)\n                movie_data = response.json()\n                movies_known_for.append(movie_data)\n\n# Print the list of movies Christopher Nolan is known for\nfor movie in movies_known_for:\n    print(movie[\"title\"])\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for movie \"Avatar\"\nurl_avatar = \"https://api.themoviedb.org/3/search/movie\"\nparams_avatar = {\n    \"query\": \"Avatar\",\n    \"include_adult\": False\n}\nresponse_avatar = requests.get(url_avatar, headers=headers, params=params_avatar)\navatar_data = response_avatar.json()\n\n# Step 2: Search for movie \"Avatar: The Way of Water\"\nurl_avatar_water = \"https://api.themoviedb.org/3/search/movie\"\nparams_avatar_water = {\n    \"query\": \"Avatar: The Way of Water\",\n    \"include_adult\": False\n}\nresponse_avatar_water = requests.get(url_avatar_water, headers=headers, params=params_avatar_water)\navatar_water_data = response_avatar_water.json()\n\n# Step 3: Get the average rating for each movie\nrating_avatar = 0\nrating_avatar_water = 0\n\nif avatar_data['total_results'] > 0:\n    rating_avatar = avatar_data['results'][0]['vote_average']\n\nif avatar_water_data['total_results'] > 0:\n    rating_avatar_water = avatar_water_data['results'][0]['vote_average']\n\n# Step 4: Compare the ratings\nresult = \"\"\nif rating_avatar > rating_avatar_water:\n    result = \"Avatar has a higher rating than Avatar: The Way of Water\"\nelif rating_avatar < rating_avatar_water:\n    result = \"Avatar: The Way of Water has a higher rating than Avatar\"\nelse:\n    result = \"Avatar and Avatar: The Way of Water have the same rating\"\n\nprint(result)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "results": "```python\nimport requests\n\n# API url\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n# Parameters\nparams = {\n    \"api_key\": \"YOUR_API_KEY\",\n    \"language\": \"en-US\",\n    \"page\": 1,\n    \"primary_release_year\": 2021,\n    \"vote_average.gte\": 7.0,\n    \"with_original_language\": \"en\"\n}\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Display the movie titles\nif response.status_code == 200:\n    results = data['results']\n    for movie in results:\n        print(movie['title'])\nelse:\n    print(\"Error in fetching data\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "results": "```python\nimport requests\n\n# Define the API url to search for the movie \"Lord of the Rings\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Send a GET request to search for the movie\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the movie genre\nif 'results' in data and len(data['results']) > 0:\n    movie_id = data['results'][0]['id']\n    url_movie_details = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    response_movie_details = requests.get(url_movie_details, headers=headers)\n    data_movie_details = response_movie_details.json()\n    if 'genres' in data_movie_details:\n        genres = [genre['name'] for genre in data_movie_details['genres']]\n        print(genres)\n    else:\n        print(\"Genre information not found.\")\nelse:\n    print(\"Movie not found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ]
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the popular person API\npopular_person_url = \"https://api.themoviedb.org/3/person/popular\"\nresponse = requests.get(popular_person_url, headers=headers)\n\nif response.status_code == 200:\n    popular_person_data = response.json()\n    # Get the birthday of the most popular person\n    most_popular_person = popular_person_data['results'][0]\n    birthday = most_popular_person.get('birthday', 'Birthday information not available')\n    print(\"The birthday of the most popular person right now is:\", birthday)\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "results": "```python\nimport requests\n\n# Replace the API key with your own\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the Big Bang Theory TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Big Bang Theory\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\ntv_id = search_results['results'][0]['id']\n\n# Get the images for the second season of the Big Bang Theory\nseason_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/images\"\nseason_response = requests.get(season_url, headers=headers)\nseason_results = season_response.json()\nposter_path = season_results['posters'][0]['file_path']\n\nprint(poster_path)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "results": "```python\nimport requests\n\n# Headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2/episode/3\"\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    episode_name = data['name']\n    print(\"The name of the third episode of the second season of Mandalorian is:\", episode_name)\nelse:\n    print(\"Error in fetching data. Status code:\", response.status_code)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching the movie 'The Shawshank Redemption'\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n    \"include_adult\": False\n}\n\n# Call the API to search for the movie\nresponse = requests.get(search_movie_url, headers=headers, params=params)\nmovie_results = response.json()\n\n# Get the movie ID of 'The Shawshank Redemption' to fetch the credits\nif 'results' in movie_results and len(movie_results['results']) > 0:\n    movie_id = movie_results['results'][0]['id']\n\n    # Define the API endpoint to get the credits of a movie by its ID\n    get_credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n    # Call the API to get the credits of the movie\n    response_credits = requests.get(get_credits_url, headers=headers)\n    credits_info = response_credits.json()\n\n    # Get the lead actor's ID\n    lead_actor_id = None\n    if 'cast' in credits_info and len(credits_info['cast']) > 0:\n        lead_actor_id = credits_info['cast'][0]['id']\n\n    if lead_actor_id:\n        # Define the API endpoint to get the details of a person by ID\n        get_person_details_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n\n        # Call the API to get the details of the lead actor\n        response_person = requests.get(get_person_details_url, headers=headers)\n        person_details = response_person.json()\n\n        if 'birthday' in person_details:\n            lead_actor_birthday = person_details['birthday']\n            print(f\"The birthday of the lead actor of the movie 'The Shawshank Redemption' is: {lead_actor_birthday}\")\n        else:\n            print(\"Birthday information not available for the lead actor.\")\n    else:\n        print(\"Lead actor information not found.\")\nelse:\n    print(\"Movie 'The Shawshank Redemption' not found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/278/credits\"\n\n# Set the headers including the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to get the cast and crew for the movie\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Find the director of the movie The Shawshank Redemption\ncrew = data[\"crew\"]\nfor person in crew:\n    if person[\"job\"] == \"Director\":\n        director_id = person[\"id\"]\n        break\n\n# Using the director's id to find the birthday\nperson_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\nperson_response = requests.get(person_url, headers=headers)\nperson_data = person_response.json()\n\n# Extract the birthday of the director\nbirthday = person_data[\"birthday\"]\nprint(birthday)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the movie The Shawshank Redemption\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\"\n}\nresponse_search = requests.get(search_movie_url, headers=headers, params=params_search_movie)\ndata_search = response_search.json()\n\n# Step 2: Get the production company of the movie\ncompany_id = data_search['results'][0]['production_companies'][0]['id']\n\n# Step 3: Get the company details by id\ncompany_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse_company = requests.get(company_url, headers=headers)\ndata_company = response_company.json()\n\n# Extracting the headquarters of the company\nheadquarter_location = data_company['headquarters']\n\nprint(\"The headquarter of the company that created the movie The Shawshank Redemption is:\", headquarter_location)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the query parameter to search for the collection\nparams = {\n    \"query\": \"Star Wars\"\n}\n\n# Set the HTTP header with the required Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the company id that created the Star Wars collection\nstar_wars_collection = None\nfor result in data['results']:\n    if result['name'] == \"Star Wars\":\n        star_wars_collection = result\n        break\n\nif star_wars_collection:\n    company_id = star_wars_collection.get('id')\n    # Use the company id to query the company details\n    url_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    response_company = requests.get(url_company, headers=headers)\n    data_company = response_company.json()\n    \n    # Extract the headquarter information of the company\n    headquarter = data_company.get('headquarters')\n    print(\"The headquarter of the company that created the collection Star Wars is:\", headquarter)\nelse:\n    print(\"Star Wars collection not found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "results": "```python\nimport requests\n\n# Define the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Double Life of Veronique\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"The Double Life of Veronique\",\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nveronique_results = search_response.json()[\"results\"]\n\n# Search for the movie \"Mulholland Drive\"\nsearch_params[\"query\"] = \"Mulholland Drive\"\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nmulholland_results = search_response.json()[\"results\"]\n\nveronique_release_date = None\nmulholland_release_date = None\n\n# Get the release dates of the movies\nfor result in veronique_results:\n    if result[\"title\"] == \"The Double Life of Veronique\":\n        veronique_release_date = result[\"release_date\"]\n        break\n\nfor result in mulholland_results:\n    if result[\"title\"] == \"Mulholland Drive\":\n        mulholland_release_date = result[\"release_date\"]\n        break\n\nif veronique_release_date is not None and mulholland_release_date is not None:\n    if veronique_release_date < mulholland_release_date:\n        print(\"The Double Life of Veronique has an earlier release date than Mulholland Drive.\")\n    else:\n        print(\"Mulholland Drive has an earlier release date than The Double Life of Veronique.\")\nelse:\n    print(\"Could not find release dates for both movies.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "results": "```python\nimport requests\n\n# Define the API url for getting the credits of TV season\nurl_season = \"https://api.themoviedb.org/3/tv/82/season/1/credits\"  # Assuming TV show id 82 corresponds to Twin Peaks Season 1\nresponse_season = requests.get(url_season, headers=headers)\n\n# Define the API url for getting the credits of a movie\nurl_movie = \"https://api.themoviedb.org/3/movie/884/credits\"  # Assuming movie id 884 corresponds to Mulholland Drive\nresponse_movie = requests.get(url_movie, headers=headers)\n\n# Check if the API calls were successful\nif response_season.status_code == 200 and response_movie.status_code == 200:\n    # Get the director of Twin Peaks Season 1\n    crew_season = response_season.json().get('crew', [])\n    director_season = [member['name'] for member in crew_season if member['job'] == 'Director']\n\n    # Get the director of Mulholland Drive\n    crew_movie = response_movie.json().get('crew', [])\n    director_movie = [member['name'] for member in crew_movie if member['job'] == 'Director']\n\n    # Check if the same director worked on both Twin Peaks Season 1 and Mulholland Drive\n    if director_season and director_movie:\n        if director_season[0] == director_movie[0]:\n            print(\"The director of Twin Peaks Season 1 and Mulholland Drive is the same person.\")\n        else:\n            print(\"The director of Twin Peaks Season 1 and Mulholland Drive is different.\")\n    else:\n        print(\"Director information not found for either Twin Peaks Season 1 or Mulholland Drive.\")\nelse:\n    print(\"Failed to retrieve data. Status codes - Season: {}, Movie: {}\".format(response_season.status_code, response_movie.status_code))\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "results": "```python\nimport requests\n\n# Define the API url for searching the movie \"Mulholland Drive\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the query parameter for searching the movie \"Mulholland Drive\"\nparams = {\n    \"query\": \"Mulholland Drive\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make a GET request to search for the movie \"Mulholland Drive\"\nresponse = requests.get(url_search_movie, headers=headers, params=params)\ndata = response.json()\n\n# Extract the movie ID of \"Mulholland Drive\"\nmovie_id = data['results'][0]['id']\n\n# Define the API url for getting the credits of the movie using its ID\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make a GET request to get the credits of the movie \"Mulholland Drive\"\nresponse_credits = requests.get(url_movie_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Extract the director's name of the movie \"Mulholland Drive\"\ndirector_name = data_credits['crew'][0]['name']\n\n# Define the API url for getting the person details by name\nurl_person_details = f\"https://api.themoviedb.org/3/search/person\"\n\n# Define the query parameter for searching the director's name\nparams_person = {\n    \"query\": director_name,\n    \"page\": 1\n}\n\n# Make a GET request to search for the director's details\nresponse_person = requests.get(url_person_details, headers=headers, params=params_person)\ndata_person = response_person.json()\n\n# Extract the place of birth of the director\ndirector_birth_place = data_person['results'][0]['place_of_birth']\n\nprint(f\"The director of Mulholland Drive was born in: {director_birth_place}\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "results": "```python\nimport requests\n\n# Define the API url to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the parameters for the query\nparams = {\n    \"page\": 1\n}\n\n# Define the HTTP header with the Bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Check if Mulholland Drive is in the top rated list\n    for movie in data[\"results\"]:\n        if movie[\"title\"] == \"Mulholland Drive\":\n            print(\"Mulholland Drive is in the Top-10 rated list of the TMDB.\")\n            break\n    else:\n        print(\"Mulholland Drive is not in the Top-10 rated list of the TMDB.\")\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "results": "```python\nimport requests\n\n# API URL to search for Akira Kurosawa\nakira_url = \"https://api.themoviedb.org/3/search/person\"\nakira_params = {\n    \"query\": \"Akira Kurosawa\",\n    \"include_adult\": False\n}\n\nresponse_akira = requests.get(akira_url, headers=headers, params=akira_params)\nakira_data = response_akira.json()\n\n# Extracting the person id for Akira Kurosawa\nakira_person_id = akira_data['results'][0]['id']\n\n# API URL to get the movie credits for Akira Kurosawa\nakira_credits_url = f\"https://api.themoviedb.org/3/person/{akira_person_id}/movie_credits\"\nakira_credits_params = {}\n\nresponse_akira_credits = requests.get(akira_credits_url, headers=headers, params=akira_credits_params)\nakira_credits_data = response_akira_credits.json()\n\n# Counting the number of movies directed by Akira Kurosawa\nakira_movie_count = len(akira_credits_data['crew'])\n\n# API URL to search for Steven Spielberg\nspielberg_url = \"https://api.themoviedb.org/3/search/person\"\nspielberg_params = {\n    \"query\": \"Steven Spielberg\",\n    \"include_adult\": False\n}\n\nresponse_spielberg = requests.get(spielberg_url, headers=headers, params=spielberg_params)\nspielberg_data = response_spielberg.json()\n\n# Extracting the person id for Steven Spielberg\nspielberg_person_id = spielberg_data['results'][0]['id']\n\n# API URL to get the movie credits for Steven Spielberg\nspielberg_credits_url = f\"https://api.themoviedb.org/3/person/{spielberg_person_id}/movie_credits\"\nspielberg_credits_params = {}\n\nresponse_spielberg_credits = requests.get(spielberg_credits_url, headers=headers, params=spielberg_credits_params)\nspielberg_credits_data = response_spielberg_credits.json()\n\n# Counting the number of movies directed by Steven Spielberg\nspielberg_movie_count = len(spielberg_credits_data['crew'])\n\n# Comparing the number of movies directed by Akira Kurosawa and Steven Spielberg\nif akira_movie_count > spielberg_movie_count:\n    print(\"Akira Kurosawa directed more movies.\")\nelif spielberg_movie_count > akira_movie_count:\n    print(\"Steven Spielberg directed more movies.\")\nelse:\n    print(\"Both Akira Kurosawa and Steven Spielberg directed the same number of movies.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "results": "```python\nimport requests\n\n# Http header for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person with name \"David Lynch\" who is the director of Mulholland Drive\nquery_params = {\n    \"query\": \"David Lynch\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=query_params)\ndata = response.json()\n\n# Get the person id of David Lynch\nperson_id = data[\"results\"][0][\"id\"]\n\n# Get the TV show credits for David Lynch\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\ntv_credits_data = response.json()\n\n# Find the TV series directed by David Lynch\ntv_series_directed = []\nfor credit in tv_credits_data[\"crew\"]:\n    if credit[\"job\"] == \"Director\":\n        tv_series_directed.append(credit[\"name\"])\n\nprint(tv_series_directed)\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Scarlett Johansson\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Scarlett Johansson\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\nif search_response.status_code == 200 and search_data[\"total_results\"] > 0:\n    person_id = search_data[\"results\"][0][\"id\"]\n    \n    # Get person details by id\n    person_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n    person_response = requests.get(person_url, headers=headers)\n    person_data = person_response.json()\n\n    if person_response.status_code == 200:\n        birthday = person_data[\"birthday\"]\n        print(\"Scarlett Johansson's birthday is:\", birthday)\n    else:\n        print(\"Error: Failed to get actor's details\")\nelse:\n    print(\"Error: Actor not found\")\n\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "results": "```python\nimport requests\n\n# Define the API url for searching TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n# Define the parameters for searching TV show\nparams = {\n    \"query\": \"Sword Art Online\",\n    \"include_adult\": False\n}\n# Define the HTTP headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to search for TV show\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the TV show id of \"Sword Art Online\"\nif 'results' in data and len(data['results']) > 0:\n    tv_id = data['results'][0]['id']\n\n    # Define the API url for getting the TV show details by id\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    # Send a GET request to get the TV show details\n    response = requests.get(url, headers=headers)\n    data = response.json()\n\n    # Get the number of seasons of \"Sword Art Online\"\n    num_seasons = data['number_of_seasons']\n    print(f\"The number of seasons of Sword Art Online is: {num_seasons}\")\nelse:\n    print(\"Sword Art Online TV show not found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "results": "```python\nimport requests\n\n# Define the HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"We Married as Job\" to get its id\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"We Married as Job\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Check if the search was successful and the movie was found\nif search_data[\"total_results\"] > 0:\n    movie_id = search_data[\"results\"][0][\"id\"]\n\n    # Get the cast and crew for the movie with id = movie_id\n    cast_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    cast_response = requests.get(cast_url, headers=headers)\n    cast_data = cast_response.json()\n\n    # Check if Yui Aragaki and Gen Hoshino are part of the cast\n    cast_list = cast_data[\"cast\"]\n    yui_aragaki_present = False\n    gen_hoshino_present = False\n    for cast_member in cast_list:\n        if cast_member[\"name\"] == \"Yui Aragaki\":\n            yui_aragaki_present = True\n        elif cast_member[\"name\"] == \"Gen Hoshino\":\n            gen_hoshino_present = True\n\n    if yui_aragaki_present and gen_hoshino_present:\n        print(\"Yes, Yui Aragaki and Gen Hoshino are co-starring in We Married as Job.\")\n    else:\n        print(\"No, Yui Aragaki and Gen Hoshino are not co-starring in We Married as Job.\")\nelse:\n    print(\"Movie 'We Married as Job' not found.\")\n\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "results": "```python\nimport requests\n\n# Set the API url for searching movies\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the API url for retrieving credits of a movie\nurl_movie_credits = \"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Set the API url for retrieving credits of a TV show\nurl_tv_credits = \"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n\n# Set the API headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the director of the movie \"Barbie\"\nparams_search_movie_barbie = {\"query\": \"Barbie\"}\nresponse_search_movie_barbie = requests.get(url_search_movie, headers=headers, params=params_search_movie_barbie)\ndirector_barbie_id = response_search_movie_barbie.json()[\"results\"][0][\"id\"]\n\n# Get the lead actor of the TV show \"DEATH NOTE\"\nparams_search_tv_death_note = {\"query\": \"DEATH NOTE\"}\nresponse_search_tv_death_note = requests.get(url_search_tv, headers=headers, params=params_search_tv_death_note)\nlead_actor_death_note_id = response_search_tv_death_note.json()[\"results\"][0][\"id\"]\n\n# Get the credits of the director of the movie \"Barbie\"\nurl_movie_director_credits = url_movie_credits.format(movie_id=director_barbie_id)\nresponse_movie_director_credits = requests.get(url_movie_director_credits, headers=headers)\ndirector_birthday = response_movie_director_credits.json()[\"crew\"][0][\"birthday\"]\n\n# Get the credits of the lead actor of the TV show \"DEATH NOTE\"\nurl_tv_lead_actor_credits = url_tv_credits.format(tv_id=lead_actor_death_note_id)\nresponse_tv_lead_actor_credits = requests.get(url_tv_lead_actor_credits, headers=headers)\nlead_actor_birthday = response_tv_lead_actor_credits.json()[\"cast\"][0][\"birthday\"]\n\n# Calculate the age difference in years\ndef calculate_age(birthdate):\n    birth_year = int(birthdate.split(\"-\")[0])\n    current_year = 2021\n    return current_year - birth_year\n\ndirector_age = calculate_age(director_birthday)\nlead_actor_age = calculate_age(lead_actor_birthday)\nage_difference = abs(director_age - lead_actor_age)\n\nprint(\"The director of the movie Barbie is older than the lead actor of the TV show DEATH NOTE.\")\nprint(\"By\", age_difference, \"years.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for Katherine LaNasa\nperson_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Katherine LaNasa\",\n}\nresponse = requests.get(person_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person_id of Katherine LaNasa\nperson_id = data['results'][0]['id']\n\n# Step 2: Get the movie credits of Katherine LaNasa\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovie_credits = response.json()\n\n# Get the latest movie appearance of Katherine LaNasa\nlatest_movie = movie_credits['cast'][0]\n\nprint(\"Katherine LaNasa's latest movie appearance:\")\nprint(\"Title:\", latest_movie['title'])\nprint(\"Character:\", latest_movie['character'])\nprint(\"Release Date:\", latest_movie['release_date'])\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Search for the movie 'Oppenheimer'\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Oppenheimer\"\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nresults = response.json()[\"results\"]\n\nif results:  # If there are search results\n    movie_id = results[0][\"id\"]  # Get the movie id of the first result\n\n    # 2. Get the images of the movie with id\n    images_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n    images_params = {}\n    images_response = requests.get(images_url, headers=headers, params=images_params)\n    \n    # Get the cover image of the movie\n    cover_image = images_response.json()[\"posters\"][0][\"file_path\"]\n    print(f\"The cover image of the movie 'Oppenheimer': https://image.tmdb.org/t/p/original{cover_image}\")\n\nelse:\n    print(\"Movie 'Oppenheimer' not found.\")\n```",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    }
]