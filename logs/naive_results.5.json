[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for Sofia Coppola\nurl = \"https://api.themoviedb.org/3/search/person\"\n# Define the parameters for the API call\nparams = {\n    \"query\": \"Sofia Coppola\",\n    \"include_adult\": False\n}\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person ID of Sofia Coppola\nperson_id = None\nif data[\"total_results\"] > 0:\n    person_id = data[\"results\"][0][\"id\"]\n\n# If the person ID is found, get the movie credits\nnum_movies_directed = 0\nif person_id:\n    url_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response_movie_credits = requests.get(url_movie_credits, headers=headers)\n    data_movie_credits = response_movie_credits.json()\n\n    # Count the number of movies directed by Sofia Coppola\n    for credit in data_movie_credits[\"crew\"]:\n        if credit[\"job\"] == \"Director\":\n            num_movies_directed += 1\n\nprint(num_movies_directed)\n```"
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for the movie \"The Dark Knight\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameter to search for the movie \"The Dark Knight\"\nparams = {\n    \"query\": \"The Dark Knight\"\n}\n\n# Make the GET request to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie ID of \"The Dark Knight\"\nmovie_id = data_search_movie['results'][0]['id']\n\n# Define the API url to get the cast and crew of the movie\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make the GET request to get the cast and crew of the movie\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Get the lead actor's name from the cast of the movie \"The Dark Knight\"\nlead_actor_name = data_movie_credits['cast'][0]['name']\n\nprint(f\"The lead actor in the movie 'The Dark Knight' was: {lead_actor_name}\")\n```"
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\nparams = {\"page\": 1}  # Get the first page of top rated movies\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie id of the top-1 rated movie\ntop_rated_movie_id = data[\"results\"][0][\"id\"]\n\n# Call the API to get the credits of the top-1 rated movie\nurl_credits = f\"https://api.themoviedb.org/3/movie/{top_rated_movie_id}/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the director of the top-1 rated movie\ndirector = None\nfor crew_member in data_credits[\"crew\"]:\n    if crew_member[\"job\"].lower() == \"director\":\n        director = crew_member[\"name\"]\n        break\n\nprint(f\"The director of the top-1 rated movie is: {director}\")\n```"
    },
    {
        "query": "give me a image for the collection Star Wars",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Define the necessary details to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection id for \"Star Wars\"\ncollection_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Star Wars\"\n}\nresponse = requests.get(collection_url, headers=headers, params=params)\ncollection_id = response.json()[\"results\"][0][\"id\"]  # Get the collection id\n\n# Get the images for the collection with the obtained collection id\nimages_url = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\nresponse = requests.get(images_url, headers=headers)\n\n# Extract and print the image paths for the collection\nbackdrops = response.json()[\"backdrops\"]\nposters = response.json()[\"posters\"]\nfor backdrop in backdrops:\n    print(\"Backdrop Image Path:\", backdrop[\"file_path\"])\nfor poster in posters:\n    print(\"Poster Image Path:\", poster[\"file_path\"])\n```"
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for a company by name\ncompany_search_url = \"https://api.themoviedb.org/3/search/company\"\n\n# Define the headers required for the API call\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the parameters for the API call to search for Walt Disney\nparams = {\n    'query': 'Walt Disney'\n}\n\n# Make the API call to search for companies (Walt Disney)\nresponse = requests.get(company_search_url, headers=headers, params=params)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Check if there are results returned for the search query\n    if data['total_results'] > 0:\n        # Extract the company id for Walt Disney\n        walt_disney_id = data['results'][0]['id']\n        \n        # Define the API url to get the logos of a company by id\n        company_logos_url = f\"https://api.themoviedb.org/3/company/{walt_disney_id}/images\"\n        \n        # Make the API call to get the logos of Walt Disney\n        response_logos = requests.get(company_logos_url, headers=headers)\n        \n        # Check if the API call was successful\n        if response_logos.status_code == 200:\n            logos_data = response_logos.json()\n            \n            # Extract the logo path of Walt Disney\n            walt_disney_logo = logos_data['logos'][0]['file_path']\n            print(f\"The logo of Walt Disney is: {walt_disney_logo}\")\n            \n        else:\n            print(f\"Failed to retrieve logos for Walt Disney. Error: {response_logos.json()}\")\n    else:\n        print(\"No results found for Walt Disney\")\n        \nelse:\n    print(f\"Failed to retrieve company details for Walt Disney. Error: {response.json()}\")\n```"
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API URLs\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nmovie_credits_url = \"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nperson_images_url = \"https://api.themoviedb.org/3/person/{person_id}/images\"\nperson_details_url = \"https://api.themoviedb.org/3/person/{person_id}\"\n\n# Set the API Key in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie Titanic\nparams = {\"query\": \"Titanic\", \"include_adult\": False}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie id for Titanic\nif data[\"total_results\"] > 0:\n    movie_id = data[\"results\"][0][\"id\"]\n\n    # Get the credits (cast and crew) for Titanic\n    credits_url = movie_credits_url.format(movie_id=movie_id)\n    response = requests.get(credits_url, headers=headers)\n    credits_data = response.json()\n\n    # Get the lead actor id (assuming lead actor is the first in the cast list)\n    lead_actor_id = credits_data[\"cast\"][0][\"id\"]\n\n    # Get the images for the lead actor\n    person_images_url = person_images_url.format(person_id=lead_actor_id)\n    response = requests.get(person_images_url, headers=headers)\n    person_images_data = response.json()\n\n    # Get the details of the lead actor\n    person_details_url = person_details_url.format(person_id=lead_actor_id)\n    response = requests.get(person_details_url, headers=headers)\n    person_details_data = response.json()\n\n    # Print out the profile picture of the lead actor\n    if person_images_data[\"profiles\"]:\n        profile_picture_url = \"https://image.tmdb.org/t/p/original\" + person_images_data[\"profiles\"][0][\"file_path\"]\n        print(f\"The lead actor of Titanic looks like:\")\n        print(profile_picture_url)\n    else:\n        print(\"No images found for the lead actor.\")\nelse:\n    print(\"Movie Titanic not found.\")\n```"
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and parameters to search for movies similar to Titanic\napi_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\",\n    \"year\": 1997\n}\n\n# Make a GET request to search for movies similar to Titanic\nresponse = requests.get(api_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie id of the first result\nmovie_id = data[\"results\"][0][\"id\"]\n\n# Define the API url to get reviews of the first similar movie\nreviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\nreviews_params = {\n    \"page\": 1\n}\n\n# Make a GET request to get reviews of the first similar movie\nreviews_response = requests.get(reviews_url, headers=headers, params=reviews_params)\nreviews_data = reviews_response.json()\n\n# Extract and print the reviews\nreviews = reviews_data[\"results\"]\nprint(reviews)\n```"
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the movie Titanic\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ntitanic_results = response.json()['results']\n\n# Step 2: Get recommendations for the movie Titanic\nif titanic_results:\n    movie_id = titanic_results[0]['id']\n    recommendations_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/recommendations\"\n    response = requests.get(recommendations_url, headers=headers)\n    recommended_movies = response.json()['results']\n    \n    # Print the recommended movies\n    for movie in recommended_movies:\n        print(movie['title'])\nelse:\n    print(\"Movie Titanic not found\")\n```"
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers using the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to search for people\ndef search_person(query):\n    url = \"https://api.themoviedb.org/3/search/person\"\n    params = {\n        \"query\": query\n    }\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n    return data\n\n# Search for Christopher Nolan\nquery = \"Christopher Nolan\"\nperson_results = search_person(query)\n\n# Function to get movie credits for a person\ndef get_movie_credits(person_id):\n    url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(url, headers=headers)\n    data = response.json()\n    return data\n\n# Get movie credits of Christopher Nolan\nperson_id = person_results[\"results\"][0][\"id\"]\nmovie_credits = get_movie_credits(person_id)\n\n# Find the latest movie directed by Christopher Nolan\nlatest_movie = None\nlatest_release_date = \"0000-00-00\"\nfor movie in movie_credits[\"crew\"]:\n    if \"Christopher Nolan\" in movie[\"name\"] and movie[\"release_date\"] > latest_release_date:\n        latest_movie = movie[\"title\"]\n        latest_release_date = movie[\"release_date\"]\n\nprint(\"The latest movie directed by Christopher Nolan is:\", latest_movie)\n```"
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for Martin Scorsese\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Martin Scorsese\",\n    \"include_adult\": \"false\"\n}\n\n# Make a GET request to search for Martin Scorsese\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the person id for Martin Scorsese\nperson_id = search_results[\"results\"][0][\"id\"]\n\n# Define the API url to get the movie credits for Martin Scorsese\ncredits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n# Make a GET request to get the movie credits for Martin Scorsese\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_results = credits_response.json()\n\n# Find the highest rated movie directed by Martin Scorsese\nhighest_rated_movie = None\nhighest_rating = 0\nfor movie in credits_results[\"crew\"]:\n    if movie[\"job\"] == \"Director\" and movie[\"vote_average\"] > highest_rating:\n        highest_rating = movie[\"vote_average\"]\n        highest_rated_movie = movie[\"title\"]\n\nprint(f\"The highest rated movie directed by Martin Scorsese is: {highest_rated_movie}\")\n```"
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers provided\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Leonardo DiCaprio\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Leonardo DiCaprio\"\n}\nresponse = requests.get(url, headers=headers, params=params)\nresult = response.json()\n\n# Get the person_id of Leonardo DiCaprio\nperson_id = result['results'][0]['id']\n\n# Get the movie credits for Leonardo DiCaprio\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(url, headers=headers)\nmovie_credits = response.json()\n\n# Get the latest movie\nlatest_movie = movie_credits['cast'][0]\n\n# Get the movie_id of the latest movie\nmovie_id = latest_movie['id']\n\n# Get the credits for the latest movie\nurl = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(url, headers=headers)\nmovie_credits = response.json()\n\n# Find the director of the latest movie\ndirector = [crew['name'] for crew in movie_credits['crew'] if crew['job'] == 'Director']\n\nprint(\"The director of Leonardo DiCaprio's latest movie is:\", director[0])\n```"
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching a person\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n# Define the API url for getting TV show credits of a person\nurl_person_tv_credits = \"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n# Define the API url for getting the most newly created movie\nurl_latest_movie = \"https://api.themoviedb.org/3/movie/latest\"\n# Define the API url for getting the list of official genres for TV shows\nurl_tv_genres_list = \"https://api.themoviedb.org/3/genre/tv/list\"\n# Define the API url for getting images of a movie\nurl_movie_images = \"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n\n# Set the API token in headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for person with the name \"Catherine Hardwicke\"\nparams_search_person = {\n    \"query\": \"Catherine Hardwicke\",\n    \"include_adult\": \"false\"\n}\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\nresults_search_person = response_search_person.json()\nperson_id = results_search_person['results'][0]['id']\n\n# Get the TV show credits for the person\nurl_person_tv_credits = url_person_tv_credits.format(person_id=person_id)\nresponse_person_tv_credits = requests.get(url_person_tv_credits, headers=headers)\nresults_person_tv_credits = response_person_tv_credits.json()\n\n# Find the most recent TV show directed by Catherine Hardwicke\nrecent_tv_show = None\nfor credit in results_person_tv_credits['crew']:\n    if credit['job'] == 'Director' and credit['media_type'] == 'tv':\n        recent_tv_show = credit\n        break\n\n# Output the most recent TV show directed by Catherine Hardwicke\nif recent_tv_show:\n    print(f\"The most recent TV show directed by Catherine Hardwicke is '{recent_tv_show['original_name']}'\")\nelse:\n    print(\"No recent TV show directed by Catherine Hardwicke found.\")\n```"
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nurl_recommendations = \"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\n\n# Set the query parameters\nquery = \"Breaking Bad\"\nparams_search_tv = {\n    \"query\": query,\n    \"include_adult\": \"false\",\n    \"page\": 1\n}\n\n# Make the request to search for the TV show\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\nsearch_results = response_search_tv.json()\ntv_id = search_results['results'][0]['id']\n\n# Set the query parameters for recommendations\nparams_recommendations = {\n    \"page\": 1\n}\n\n# Make the request to get recommendations for the TV show\nurl_recommendations = url_recommendations.format(tv_id=tv_id)\nresponse_recommendations = requests.get(url_recommendations, headers=headers, params=params_recommendations)\nrecommendations = response_recommendations.json()\n\n# Extract and print the recommended TV shows\nrecommended_shows = [show['name'] for show in recommendations['results']]\nprint(recommended_shows)\n```"
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\n# API url to get the trending movies for today\nurl = \"https://api.themoviedb.org/3/trending/movie/day\"\n\n# Headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the movie id of the most trending movie\nmovie_id = data['results'][0]['id']\n\n# API url to get the credits of the movie\nurl_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make a GET request to the credits API\nresponse_credits = requests.get(url_credits, headers=headers)\ncredits_data = response_credits.json()\n\n# Get the director of the movie\nfor crew_member in credits_data['crew']:\n    if crew_member['job'] == 'Director':\n        director_name = crew_member['name']\n        break\n\nprint(f\"The director of today's most trending movie is: {director_name}\")\n```"
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# Define headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the movie \"Twilight\" to get the movie ID\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Twilight\"\n}\n\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie ID of the first result\nmovie_id = data[\"results\"][0][\"id\"]\n\n# Step 2: Get the credits for the movie using the movie ID\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\nresponse = requests.get(credits_url, headers=headers)\ncredits_data = response.json()\n\n# Extract the director from the crew list\nfor crew_member in credits_data[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director = crew_member[\"name\"]\n        print(f\"The director of the movie Twilight is: {director}\")\n        break\n```\nOutput:\n```\nThe director of the movie Twilight is: Catherine Hardwicke\n```"
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Get the TV show ID for \"The Witcher\"\nquery_params = {\n    \"query\": \"The Witcher\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nresponse = requests.get(search_tv_url, headers=headers, params=query_params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get the images for the second episode of the first season of \"The Witcher\"\nepisode_images_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/1/episode/2/images\"\nresponse = requests.get(episode_images_url, headers=headers)\nepisode_images = response.json()[\"stills\"]\n\n# Output the image path\nif episode_images:\n    print(episode_images[0][\"file_path\"])\nelse:\n    print(\"No images found for the second episode of the first season of The Witcher.\")\n```"
    },
    {
        "query": "What is top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Parameters: page=1\nparams = {\"page\": 1}\n\n# Make GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the top-1 rated movie from the results\nif response.status_code == 200:\n    data = response.json()\n    top_rated_movie = data[\"results\"][0][\"title\"]\n    print(\"Top-1 rated movie:\", top_rated_movie)\nelse:\n    print(\"Failed to retrieve data from the API.\")\n```"
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Matrix\" to get its ID\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"The Matrix\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nmovie_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get the release dates for the movie using its ID\nrelease_date_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\nrelease_date_response = requests.get(release_date_url, headers=headers)\nrelease_date = release_date_response.json()[\"results\"][0][\"release_dates\"][0][\"release_date\"]\n\nprint(\"The release date of the movie 'The Matrix' is:\", release_date)\n```"
    },
    {
        "query": "Who is the most popular person?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get the list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Get the results array from the response\n    popular_people = data.get('results', [])\n    \n    # Sort the popular people based on their popularity\n    most_popular_person = max(popular_people, key=lambda x: x.get('popularity', 0))\n    \n    # Print the name of the most popular person\n    print(f\"The most popular person is: {most_popular_person.get('name')}\")\n\nelse:\n    print(\"Failed to retrieve data from the API\")\n```"
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ],
        "results": "```python\nimport requests\n\n# Define the API urls\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nperson_movie_credits_url = \"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nmovie_images_url = \"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n\n# Set the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Christopher Nolan\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(search_person_url, headers=headers, params=params)\nresults = response.json()\n\n# Get the person id for Christopher Nolan\nperson_id = results['results'][0]['id']\n\n# Get the movie credits for Christopher Nolan\nresponse = requests.get(person_movie_credits_url.format(person_id=person_id), headers=headers)\nmovie_credits = response.json()\n\n# Get cover images of movies directed by Christopher Nolan\ncover_images = []\nfor movie in movie_credits['crew']:\n    if movie['job'] == 'Director':\n        response = requests.get(movie_images_url.format(movie_id=movie['id']), headers=headers)\n        movie_images = response.json()\n        if 'posters' in movie_images:\n            for poster in movie_images['posters']:\n                cover_images.append(poster['file_path'])\n\nprint(cover_images)\n```"
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# API url to search for the movie Titanic\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n# Parameters for searching the movie Titanic\nparams_search_movie = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\n\n# Call the API to search for the movie Titanic\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie_id of Titanic\ntitanic_movie_id = data_search_movie['results'][0]['id']\n\n# API url to get keywords associated with the movie Titanic\nurl_keywords = f\"https://api.themoviedb.org/3/movie/{titanic_movie_id}/keywords\"\n\n# Call the API to get keywords associated with the movie Titanic\nresponse_keywords = requests.get(url_keywords, headers=headers)\ndata_keywords = response_keywords.json()\n\n# Extract the keywords associated with the movie Titanic\nkeywords_list = [keyword['name'] for keyword in data_keywords['keywords']]\nprint(keywords_list)\n```"
    },
    {
        "query": "Give me a show that is currently on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for getting shows currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the first show in the results list\n    show = data['results'][0]\n    \n    # Print the name of the show\n    print(\"Show currently on the air:\", show['name'])\nelse:\n    print(\"Failed to retrieve the information\")\n```"
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and person name\nurl = \"https://api.themoviedb.org/3/search/person\"\nperson_name = \"Clint Eastwood\"\n\n# Define the parameters for the API request\nparams = {\n    \"query\": person_name,\n    \"include_adult\": \"false\",\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Add the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1I6IjY4NjM4MDg1NiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.I1IIsXzKceAClOUX7gwM4jAn3I2OrZzEckxNIl-hHvo\"\n}\n\n# Make the API request to search for the person\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the person id from the search results\nperson_id = data['results'][0]['id']\n\n# Define the API url to get person's movie credits\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n# Make the API request to get the movie credits for the person\nresponse = requests.get(movie_credits_url, headers=headers)\ndata = response.json()\n\n# Extract the release date of the latest movie\nlatest_movie_release_date = data['cast'][0]['release_date']\n\nprint(f\"The latest movie of Clint Eastwood is scheduled to be released on {latest_movie_release_date}\")\n```"
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ],
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"YOUR_API_KEY\"\nheaders = {\n    \"Authorization\": \"Bearer \" + api_key\n}\n\n# Step 1: Search for the movie id of \"The Dark Knight\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"The Dark Knight\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Extract the movie id of \"The Dark Knight\"\nmovie_id = data_search_movie[\"results\"][0][\"id\"]\n\n# Step 2: Get the user reviews for the movie with id \"The Dark Knight\"\nurl_movie_reviews = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\nparams_movie_reviews = {\n    \"page\": 1\n}\nresponse_movie_reviews = requests.get(url_movie_reviews, headers=headers, params=params_movie_reviews)\ndata_movie_reviews = response_movie_reviews.json()\n\n# Extract and print the reviews\nreviews = data_movie_reviews[\"results\"]\nfor review in reviews:\n    print(f\"Author: {review['author']}\")\n    print(f\"Review: {review['content']}\")\n    print(\"--------------------------------------\")\n```"
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for Francis Ford Coppola\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Francis Ford Coppola\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person_id of Francis Ford Coppola\nperson_id = data['results'][0]['id']\n\n# Get the movie credits for Francis Ford Coppola\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\ndata = response.json()\n\n# Get a list of similar movies to one of the movies directed by Francis Ford Coppola\nmovie_id = data['cast'][0]['id']\nsimilar_movies_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(similar_movies_url, headers=headers, params=params)\nsimilar_movies = response.json()\n\n# Output the list of similar movies\nfor movie in similar_movies['results']:\n    print(movie['title'])\n```"
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/latest\"\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers)\n\n# Extract the lead actor from the response\nif response.status_code == 200:\n    latest_movie = response.json()\n    cast = latest_movie.get('cast', [])\n    if cast:\n        lead_actor = cast[0]['name']\n        print(f\"The lead actor in the latest released movie is: {lead_actor}\")\n    else:\n        print(\"Lead actor information not found.\")\nelse:\n    print(\"Failed to retrieve data.\")\n```"
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Initialize the API URL\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Define the parameters for the API request\nparams = {\n    'page': 1  # We request the first page to get the first movie\n}\n\n# Define the headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the response in JSON format\ndata = response.json()\n\n# Get the first movie from the results\nif data['results']:\n    first_movie = data['results'][0]\n\n    # Check if the first movie has a 'poster_path' available\n    if 'poster_path' in first_movie:\n        image_path = first_movie['poster_path']\n        \n        # Print the image path\n        print(f\"Image path of the movie currently showing in theaters: https://image.tmdb.org/t/p/original{image_path}\")\n\n# If no results or no image available, print a message\nelse:\n    print(\"No movies currently showing in theaters or no image available.\")\n```"
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get a list of current popular movies\nparams = {\n    \"page\": 1\n}\nurl = \"https://api.themoviedb.org/3/movie/popular\"\nresponse = requests.get(url, headers=headers, params=params)\npopular_movies = response.json()\n\n# Get the movie id of the most popular movie\nmost_popular_movie_id = popular_movies['results'][0]['id']\n\n# Get the keywords of the most popular movie\nurl = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\nresponse = requests.get(url, headers=headers)\nmovie_keywords = response.json()\n\nprint(movie_keywords)\n```  "
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "results": "```python\nimport requests\n\n# HTTP header with authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get the current popular movies\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Parameters to get the first page of popular movies\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the movie ID of the most popular movie\nif response.status_code == 200:\n    popular_movies = response.json()\n    most_popular_movie_id = popular_movies['results'][0]['id']\n    print(\"Most popular movie ID:\", most_popular_movie_id)\nelse:\n    print(\"Failed to retrieve popular movies:\", response.status_code)\n\n# API url to get the keywords of the most popular movie\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\n\n# Make a GET request to get the keywords of the most popular movie\nkeywords_response = requests.get(keywords_url, headers=headers)\n\n# Get the keywords of the most popular movie\nif keywords_response.status_code == 200:\n    keywords_data = keywords_response.json()\n    movie_keywords = [keyword['name'] for keyword in keywords_data['keywords']]\n    print(\"Keywords of the most popular movie:\", movie_keywords)\nelse:\n    print(\"Failed to retrieve keywords of the most popular movie:\", keywords_response.status_code)\n```"
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and movie name\nurl = \"https://api.themoviedb.org/3/search/movie\"\nmovie_name = \"Titanic\"\n\n# Set the parameters for the API request\nparams = {\n    \"query\": movie_name,\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Set the API access token in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Get the movie ID of the first search result\n    movie_id = data['results'][0]['id']\n    \n    # Make a request to get the credits for the movie\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    \n    if credits_response.status_code == 200:\n        credits_data = credits_response.json()\n        \n        # Get the cast information\n        cast = credits_data['cast']\n        \n        # Extract the names of the actors who starred in the movie\n        actors = [actor['name'] for actor in cast]\n        \n        print(f\"The following actors starred in the movie {movie_name}: {', '.join(actors)}\")\n    else:\n        print(\"Failed to retrieve credits data\")\nelse:\n    print(\"Failed to retrieve movie data\")\n```"
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for getting the company details by id\nurl = \"https://api.themoviedb.org/3/company/4\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    company_data = response.json()\n    \n    # Get the logo path for Paramount Pictures\n    logo_path = company_data['logo_path']\n    \n    # Print the logo path\n    print(\"Logo path for Paramount Pictures:\", logo_path)\n\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```\nNOTE: In the above code, I used the company_id of 4 for \"Paramount Pictures\" based on TMDB data. This id may vary depending on the TMDB database."
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get company details by name\ndef get_company_details(company_name):\n    url = \"https://api.themoviedb.org/3/search/company\"\n    params = {\n        \"query\": company_name\n    }\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n    company_id = data['results'][0]['id']\n    \n    company_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    details_response = requests.get(company_url, headers=headers)\n    details_data = details_response.json()\n    \n    return details_data['headquarters']\n\n# Finding headquarters location of Universal Pictures\ncompany_name = \"Universal Pictures\"\nheadquarters_location = get_company_details(company_name)\nprint(f\"The company '{company_name}' was founded in {headquarters_location}\")\n```"
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Titanic\"\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie id for \"Titanic\"\nmovie_id = data_search_movie[\"results\"][0][\"id\"]\n\n# Get the release dates for the movie \"Titanic\"\nurl_release_dates = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\nresponse_release_dates = requests.get(url_release_dates, headers=headers)\ndata_release_dates = response_release_dates.json()\n\n# Extract the release dates\nrelease_dates = data_release_dates[\"results\"][0][\"release_dates\"]\nfor date_info in release_dates:\n    if date_info[\"type\"] == 3:  # Theatrical type\n        release_date = date_info[\"release_date\"]\n        print(f\"The movie 'Titanic' was released on: {release_date}\")\n        break  # Stop after finding the theatrical release date\n```"
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for collections\nurl_search_collections = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the parameters for the search query\nparams = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\n\n# Call the API to search for collections\nresponse = requests.get(url_search_collections, headers=headers, params=params)\n\n# Extract the collection id of the first result\ncollection_id = response.json()[\"results\"][0][\"id\"]\n\n# Define the API endpoint to get collection details by id\nurl_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n# Call the API to get collection details by id\nresponse_collection = requests.get(url_collection_details, headers=headers)\n\n# Extract the cast information of the first movie in the collection\ncast = response_collection.json()[\"parts\"][0][\"cast\"]\n\n# Extract the names of the actors who starred in the first movie of Star Wars collection\nactors = [actor[\"name\"] for actor in cast]\n\n# Print the list of actors who starred in the first movie of Star Wars collection\nprint(actors)\n```"
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for collections\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections with the name Harry Potter\nparams_search_collection = {\n    \"query\": \"Harry Potter\"\n}\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\nresult_collection_search = response_search_collection.json()\n\nif len(result_collection_search[\"results\"]) > 0:\n    # Get the collection id of the first result\n    collection_id = result_collection_search[\"results\"][0][\"id\"]\n\n    # Define the API endpoint to get collection details by id\n    url_get_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n    # Get the details of the Harry Potter collection\n    response_get_collection_details = requests.get(url_get_collection_details, headers=headers)\n    result_collection_details = response_get_collection_details.json()\n\n    # Display the poster path of the first part of the collection\n    if len(result_collection_details[\"parts\"]) > 0:\n        print(\"Movie cover of a movie from the collection Harry Potter:\")\n        print(result_collection_details[\"parts\"][0][\"poster_path\"])\nelse:\n    print(\"No collection found with the name Harry Potter\")\n```"
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# API url to search for collections\nurl_collections = \"https://api.themoviedb.org/3/search/collection\"\n\n# Parameters for searching for a specific collection (The Hunger Games collection)\nparams_collections = {\n    \"query\": \"The Hunger Games\"\n}\n\n# Make a GET request to search for collections\nresponse_collections = requests.get(url_collections, headers=headers, params=params_collections)\n\n# Extract the collection_id for The Hunger Games collection\ncollection_id = response_collections.json()[\"results\"][0][\"id\"]\n\n# API url to get keywords for a movie in the collection\nurl_keywords = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n# Make a GET request to get the collection details\nresponse_keywords = requests.get(url_keywords, headers=headers)\n\n# Extract the keywords for a movie in The Hunger Games collection\nkeywords = response_keywords.json()[\"parts\"][0][\"keywords\"]\n\n# Print the keywords for the movie in The Hunger Games collection\nfor keyword in keywords:\n    print(keyword[\"name\"])\n```"
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv"
        ],
        "results": "```python\nimport requests\n\n# API endpoint to search for collections\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# API endpoint to get collection details by id\nurl_collection_detail = \"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n# Headers for API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Parameters for search collection API\nparams_search_collection = {\n    \"query\": \"The Hobbit\"\n}\n\n# Make request to search for collections\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\nsearch_results = response_search_collection.json()\n\nif search_results and \"results\" in search_results:\n    collections = search_results[\"results\"]\n    \n    # Iterate over search results to find The Hobbit collection\n    for collection in collections:\n        if collection[\"name\"] == \"The Hobbit\":\n            collection_id = collection[\"id\"]\n            url_collection_detail = url_collection_detail.format(collection_id=collection_id)\n            \n            # Make request to get collection details by id\n            response_collection_detail = requests.get(url_collection_detail, headers=headers)\n            collection_details = response_collection_detail.json()\n            \n            # Get release dates for the movies in the collection\n            if \"parts\" in collection_details:\n                movies = collection_details[\"parts\"]\n                for movie in movies:\n                    print(f\"Movie: {movie['title']} | Release Date: {movie['release_date']}\")\n            break\n```"
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Search for collections\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\n    \"query\": \"The Fast and the Furious\"\n}\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ncollection_data = response_search_collection.json()\n\n# Extract collection id\ncollection_id = collection_data['results'][0]['id']\n\n# 2. Get collection details by id\nurl_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse_collection_details = requests.get(url_collection_details, headers=headers)\ncollection_details = response_collection_details.json()\n\n# Get the parts of the collection\nparts = collection_details['parts']\n\n# Print the list of movies in the collection\nfor part in parts:\n    print(f\"Movie Title: {part['title']}\")\n```"
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the collection 'The Fast and the Furious'\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\n    \"query\": \"The Fast and the Furious\"\n}\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ncollection_id = response_search_collection.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get the movie details from the collection\nurl_get_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse_get_collection_details = requests.get(url_get_collection_details, headers=headers)\nmovie_ids = [part[\"id\"] for part in response_get_collection_details.json()[\"parts\"]]\n\n# Step 3: Get the reviews for one of the movies in the collection\nselected_movie_id = movie_ids[0]\nurl_get_movie_reviews = f\"https://api.themoviedb.org/3/movie/{selected_movie_id}/reviews\"\nparams_get_movie_reviews = {\n    \"page\": 1\n}\nresponse_get_movie_reviews = requests.get(url_get_movie_reviews, headers=headers, params=params_get_movie_reviews)\n\n# Output the reviews\nreviews = response_get_movie_reviews.json()[\"results\"]\nprint(reviews)\n```"
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query text for searching for the Lord of the Rings collection\nparams = {\n    \"query\": \"Lord of the Rings\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the collection id of Lord of the Rings\ncollection_id = data['results'][0]['id']\n\n# Now, use the collection id to get details of the collection\nurl = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse = requests.get(url, headers=headers)\ncollection_data = response.json()\n\n# Get the first movie in the collection to find its release date\nfirst_movie = collection_data['parts'][0]\nrelease_date = first_movie['release_date']\n\nprint(\"The first movie of the Lord of the Rings collection was released on:\", release_date)\n```"
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for the TV show \"House of Cards\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters for the search API\nparams_search_tv = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False,\n}\n\n# Make a GET request to search for the TV show \"House of Cards\"\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\n\n# Get the TV show ID of \"House of Cards\" from the search results\ntv_show_id = response_search_tv.json()[\"results\"][0][\"id\"]\n\n# Define the API endpoint to get the details of the first season of \"House of Cards\"\nurl_season_details = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/1\"\n\n# Make a GET request to get the details of the first season of \"House of Cards\"\nresponse_season_details = requests.get(url_season_details, headers=headers)\n\n# Extract the crew information (directors) from the response\ndirectors = [crew[\"name\"] for crew in response_season_details.json()[\"crew\"] if crew[\"job\"] == \"Director\"]\n\nprint(directors)\n```"
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "results": "import requests\n\n# Set the API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the API url for getting similar TV shows\nurl_similar_tv = \"https://api.themoviedb.org/3/tv/{tv_id}/similar\"\n\n# Set the API url for trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the API url for getting keywords of a TV show\nurl_tv_keywords = \"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n\n# Define the headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for a TV show similar to \"House of Cards\"\nparams_search_tv = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False  # Exclude adult content\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\nresults_search_tv = response_search_tv.json()\n\n# Get the TV show ID for \"House of Cards\" to find similar TV shows\nif results_search_tv[\"total_results\"] > 0:\n    tv_id = results_search_tv[\"results\"][0][\"id\"]\n\n    # Get the list of similar TV shows\n    url_similar_tv = url_similar_tv.format(tv_id=tv_id)\n    params_similar_tv = {\n        \"page\": 1\n    }\n    response_similar_tv = requests.get(url_similar_tv, headers=headers, params=params_similar_tv)\n    similar_tv_results = response_similar_tv.json()\n    print(similar_tv_results[\"results\"])\nelse:\n    print(\"No TV show found for the query 'House of Cards'\")"
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get a list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\nparams = {\"page\": 1}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\nif response.status_code == 200:\n    # Get the most popular TV show currently on the air\n    most_popular_show = max(data[\"results\"], key=lambda x: x[\"popularity\"])\n    \n    # Get the start date of the show\n    print(\"The most popular TV show currently on the air started airing on:\", most_popular_show[\"first_air_date\"])\nelse:\n    print(\"Error - API request failed\")\n```"
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoints\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nmovie_credits_url = \"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nperson_movie_credits_url = \"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n# API key to access TMDB\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# HTTP headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer \" + api_key\n}\n\n# Search for the movie Django Unchained\nparams = {\n    \"query\": \"Django Unchained\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the director of Django Unchained\ndirector_id = None\nif data[\"results\"]:\n    director_id = data[\"results\"][0][\"id\"]\nelse:\n    print(\"No results found for Django Unchained\")\n\n# Get the movie credits for the director\nif director_id:\n    credits_url = person_movie_credits_url.format(person_id=director_id)\n    response = requests.get(credits_url, headers=headers)\n    credits_data = response.json()\n\n    # Get a few more works directed by the director of Django Unchained\n    works = []\n    if \"crew\" in credits_data:\n        for credit in credits_data[\"crew\"]:\n            # Exclude Django Unchained from the results\n            if credit[\"title\"] != \"Django Unchained\":\n                works.append(credit[\"title\"])\n\n    print(\"Few more works directed by the director of Django Unchained:\")\n    for work in works[:5]:  # Displaying only the first 5 works\n        print(work)\n```\nThis code will search for the movie \"Django Unchained\", retrieve the director's ID from the search results, and then fetch a few more works directed by the same director excluding Django Unchained from the results. Finally, it will print the list of works."
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# API url to get list of shows currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n# Set the page parameter to retrieve the first page\nparams = {\"page\": 1}\n# Call the API to get the list of shows currently on the air\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the response JSON data\n    data = response.json()\n    \n    # Get the id of the first show in the list\n    tv_id = data[\"results\"][0][\"id\"]\n    \n    # API url to get the cast of a TV show by its id\n    cast_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    # Call the API to get the cast of the TV show\n    cast_response = requests.get(cast_url, headers=headers)\n    \n    # Check if the cast request was successful\n    if cast_response.status_code == 200:\n        # Parse the cast response JSON data\n        cast_data = cast_response.json()\n        \n        # Get the list of cast members\n        cast_list = cast_data[\"cast\"]\n        \n        # Display the list of cast members\n        for cast_member in cast_list:\n            print(f\"Character: {cast_member['character']}, Name: {cast_member['name']}\")\n    else:\n        print(\"Failed to retrieve cast data\")\nelse:\n    print(\"Failed to retrieve TV show data\")\n```"
    },
    {
        "query": "I need a review for Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show Breaking Bad\nparams = {\n    \"query\": \"Breaking Bad\"\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params)\ntv_show_data = response.json()\n\n# Get the TV show id for Breaking Bad\ntv_id = tv_show_data['results'][0]['id']\n\n# Get the reviews for Breaking Bad\nresponse = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\", headers=headers)\nreviews_data = response.json()\n\nprint(reviews_data)\n```"
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"The Last Of Us\" to get its tv_id\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Last Of Us\"\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\ndata = response.json()\ntv_id = data[\"results\"][0][\"id\"]\n\n# Get recommendations for the TV show with tv_id\nrecommendations_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\nrecommendations_params = {}\nresponse = requests.get(recommendations_url, headers=headers, params=recommendations_params)\nrecommendations_data = response.json()\n\n# Extract and print the list of recommended TV shows\nrecommended_shows = []\nfor result in recommendations_data[\"results\"]:\n    recommended_shows.append(result[\"name\"])\n\nprint(recommended_shows)\n```"
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API URLs\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nrecommendations_url = \"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\ntv_details_url = \"https://api.themoviedb.org/3/tv/{tv_id}\"\ntv_id = None # Placeholder for the TV show ID\n\n# Set the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"The Last Of Us\"\nsearch_params = {\n    \"query\": \"The Last Of Us\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_tv_url, headers=headers, params=search_params)\ndata = response.json()\n\n# Get the TV show ID\nif data['total_results'] > 0:\n    tv_id = data['results'][0]['id']\n\n# Get recommendations based on the TV show ID\nif tv_id:\n    recommendations_params = {\n        \"page\": 1\n    }\n    recommendations_response = requests.get(recommendations_url.format(tv_id=tv_id), headers=headers, params=recommendations_params)\n    recommendations_data = recommendations_response.json()\n    recommendations = recommendations_data['results']\n    print(recommendations)\nelse:\n    print(\"TV show 'The Last Of Us' not found.\")\n```"
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Friends\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Friends\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the ID of the TV show \"Friends\"\nfriends_id = search_results[\"results\"][0][\"id\"]\n\n# Get the guest stars for season 3, episode 24 of the TV show \"Friends\"\nepisode_credits_url = f\"https://api.themoviedb.org/3/tv/{friends_id}/season/3/episode/24/credits\"\nepisode_credits_response = requests.get(episode_credits_url, headers=headers)\nepisode_credits_results = episode_credits_response.json()\n\nguest_stars = episode_credits_results[\"guest_stars\"]\nfor guest_star in guest_stars:\n    print(guest_star[\"name\"])\n```"
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the parameters\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the results\n    tv_shows = response.json()[\"results\"]\n    \n    # Get the lead actor of the most popular TV show\n    most_popular_show = tv_shows[0]\n    \n    # Get the TV show's credits\n    tv_id = most_popular_show[\"id\"]\n    credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    \n    if credits_response.status_code == 200:\n        cast = credits_response.json()[\"cast\"]\n        \n        # Assuming the lead actor is the first in the cast list\n        lead_actor = cast[0][\"name\"]\n        \n        print(f\"The lead actor in the most popular TV show is: {lead_actor}\")\n    else:\n        print(\"Error getting TV show credits data\")\nelse:\n    print(\"Error getting TV show data\")\n```"
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Headers containing authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the top rated TV shows API\nresponse_top_rated = requests.get(\"https://api.themoviedb.org/3/tv/top_rated\", headers=headers)\ntop_rated_tv_shows = response_top_rated.json()\n\n# Get the tv_id of the top-1 rated TV show\ntv_id = top_rated_tv_shows['results'][0]['id']\n\n# Call the keywords API for the top-1 rated TV show\nresponse_keywords = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\", headers=headers)\nkeywords = response_keywords.json()\n\n# Get the first keyword of the top-1 rated TV show\nkeyword = keywords['results'][0]['name']\n\nprint(keyword)\n```"
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the parameters for the query\nparams = {\n    \"query\": \"2 Broke Girls\",\n    \"include_adult\": \"false\"\n}\n\n# Set the API key in headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the json response\n    data = response.json()\n    \n    # Extract the poster path of 2 Broke Girls\n    poster_path = data[\"results\"][0][\"poster_path\"]\n    \n    print(\"Poster path of 2 Broke Girls:\", poster_path)\nelse:\n    print(\"Error in API request\")\n```"
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n# Set the headers with the authorization field\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show 2 Broke Girls\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"2 Broke Girls\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n# Extract the TV show id\ntv_id = search_results[\"results\"][0][\"id\"]\n\n# Get the primary TV show details by id\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\ntv_details_response = requests.get(tv_details_url, headers=headers)\ntv_details = tv_details_response.json()\n# Calculate the total number of episodes\ntotal_episodes = sum([season[\"episode_count\"] for season in tv_details[\"seasons\"]])\n\nprint(f\"2 Broke Girls has a total of {total_episodes} episodes.\")\n```"
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# URL for searching TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for searching TV show\nsearch_params = {\n    \"query\": \"The Big Bang Theory\",\n    \"include_adult\": \"false\"\n}\n\n# Make the API request to search for the TV show\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the TV show ID for The Big Bang Theory\ntv_show_id = search_results[\"results\"][0][\"id\"]\n\n# URL for getting the TV show details\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\n\n# Make the API request to get the TV show details\ntv_details_response = requests.get(tv_details_url, headers=headers)\ntv_details = tv_details_response.json()\n\n# Get the production companies information\nproduction_companies = tv_details[\"production_companies\"]\n\n# Loop through the production companies to find the one that produced The Big Bang Theory\nfor company in production_companies:\n    company_id = company[\"id\"]\n    \n    # URL for getting the company details\n    company_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    \n    # Make the API request to get the company details\n    company_response = requests.get(company_url, headers=headers)\n    company_details = company_response.json()\n    \n    # Check if the company is the correct one, then print the foundation date\n    if \"The Big Bang Theory\" in company_details[\"description\"]:\n        foundation_date = company_details[\"foundation_date\"]\n        print(f\"The company that produced The Big Bang Theory was founded on: {foundation_date}\")\n        break\n```"
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show The Big Bang Theory\nurl_search = \"https://api.themoviedb.org/3/search/tv\"\nparams_search = {\n    \"query\": \"The Big Bang Theory\"\n}\nresponse_search = requests.get(url_search, headers=headers, params=params_search)\ndata_search = response_search.json()\n\n# Get the primary TV show details for The Big Bang Theory\ntv_id = data_search['results'][0]['id']  # get the TV show id\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\nresponse_tv_details = requests.get(url_tv_details, headers=headers)\ndata_tv_details = response_tv_details.json()\n\n# Extract the first air date for The Big Bang Theory\ncreation_date = data_tv_details['first_air_date']\n\nprint(f\"The TV show 'The Big Bang Theory' was created on: {creation_date}\")\n```"
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the page parameter to 1 to get the first page of results\nparams = {\n    \"page\": 1\n}\n\n# Set the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results from the response\n    results = response.json()['results']\n    \n    # Get the TV show id of the most popular TV show\n    tv_id = results[0]['id']\n    \n    # Make a new request to get the keywords of the most popular TV show\n    keyword_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    keyword_response = requests.get(keyword_url, headers=headers)\n    \n    # Check if the keyword request was successful\n    if keyword_response.status_code == 200:\n        # Get the keywords from the response\n        keywords = keyword_response.json()['results']\n        \n        # Print the first keyword associated with the most popular TV show\n        print(keywords[0]['name'])\n    else:\n        print(\"Failed to get keywords for the most popular TV show\")\nelse:\n    print(\"Failed to get popular TV shows\")\n```"
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show with the query \"Westworld\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Westworld\",\n    \"include_adult\": False\n}\n\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show ID\ntv_id = data_search_tv[\"results\"][0][\"id\"]\n\n# Get the details of the third episode of the second season of Westworld\nurl_episode_details = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/episode/3\"\nresponse_episode_details = requests.get(url_episode_details, headers=headers)\nepisode_data = response_episode_details.json()\n\n# Print the overview of the episode\nprint(\"The third episode of the second season of Westworld talked about:\")\nprint(episode_data[\"overview\"])\n```"
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/company"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the params for searching \"Game of Thrones\"\nparams = {\n    \"query\": \"Game of Thrones\"\n}\n\n# Make the HTTP request to search for \"Game of Thrones\"\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the TV show id for \"Game of Thrones\" from the response\ntv_show_id = response.json()['results'][0]['id']\n\n# Define the API url to get the details of the second season of Game of Thrones\nurl_season = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/2\"\n\n# Make the HTTP request to get the details of the second season of \"Game of Thrones\"\nresponse_season = requests.get(url_season, headers=headers)\n\n# Get the air date of the second season of \"Game of Thrones\"\nair_date = response_season.json()['air_date']\n\nprint(\"The air date of the second season of Game of Thrones is:\", air_date)\n```"
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# API url to get the TV show details by query\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# API url to get the images of a TV episode\nurl_episode_images = \"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images\"\n\n# Headers required to access the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Parameters for searching TV show \"Band of Brothers\"\nparams_search_tv = {\n    \"query\": \"Band of Brothers\",\n    \"include_adult\": False\n}\n\n# Send GET request to search for TV show\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show ID for \"Band of Brothers\"\ntv_id = data_search_tv['results'][0]['id']\n\n# Parameters for getting the images of the third episode of \"Band of Brothers\"\nparams_episode_images = {\n    \"language\": \"en-US\"\n}\n\n# Specify the season number and episode number to get the images\nseason_number = 1\nepisode_number = 3\n\n# Replace the placeholders in the URL with actual values\nurl_episode_images = url_episode_images.format(tv_id=tv_id, season_number=season_number, episode_number=episode_number)\n\n# Send GET request to get the images of the third episode of \"Band of Brothers\"\nresponse_episode_images = requests.get(url_episode_images, headers=headers, params=params_episode_images)\ndata_episode_images = response_episode_images.json()\n\n# Get the poster path of the images of the third episode\nepisode_poster_path = data_episode_images['stills'][0]['file_path']\n\n# Print the poster path of the third episode of \"Band of Brothers\"\nprint(\"Poster path of the third episode of Band of Brothers:\", episode_poster_path)\n```"
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/1399\"\n\n# Define the headers containing the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the list of production companies for the TV show\n    production_companies = data.get('production_companies', [])\n    \n    # Find the logo of the network that produced Game of Thrones (HBO)\n    for company in production_companies:\n        if company.get('name') == \"HBO\":\n            logo_path = company.get('logo_path')\n            print(f\"The logo of HBO is: {logo_path}\")\n            break\nelse:\n    print(\"Error in retrieving the data\")\n```"
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "results": "```python\nimport requests\n\n# API url to search for TV shows\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\n# Parameters for searching TV shows with the query \"Game of Thrones\"\nsearch_params = {\n    \"query\": \"Game of Thrones\"\n}\n# Sending a GET request to search for TV shows\nsearch_response = requests.get(search_tv_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Getting the TV show id for Game of Thrones\ngame_of_thrones_id = search_results[\"results\"][0][\"id\"]\n\n# API url to get details of a TV show by id\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{game_of_thrones_id}\"\n# Sending a GET request to get details of Game of Thrones\ntv_details_response = requests.get(tv_details_url, headers=headers)\ntv_details = tv_details_response.json()\n\n# Getting the network id of the network that produced Game of Thrones\nnetwork_id = tv_details[\"networks\"][0][\"id\"]\n\n# API url to get details of a network by id\nnetwork_details_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\n# Sending a GET request to get details of the network\nnetwork_response = requests.get(network_details_url, headers=headers)\nnetwork_details = network_response.json()\n\n# Getting the homepage of the network that produced Game of Thrones\nnetwork_homepage = network_details[\"homepage\"]\n\nprint(network_homepage)\n```"
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get a list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\n    \"page\": 1  # We only want the first page\n}\nresponse = requests.get(url_popular_tv, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show id of the most popular show\nmost_popular_tv_id = data['results'][0]['id']\n\n# Get keywords of the most popular TV show\nurl_keywords = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_id}/keywords\"\nresponse_keywords = requests.get(url_keywords, headers=headers)\ndata_keywords = response_keywords.json()\n\n# Extract and print the first keyword of the most popular TV show\nfirst_keyword = data_keywords['results'][0]['name']\nprint(first_keyword)\n```"
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for getting the list of popular TV shows\nurl_tv_popular = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Define the API url for getting the details of a TV show by id\nurl_tv_details = \"https://api.themoviedb.org/3/tv/{}\"\n\n# Define the API url for getting details of a company by id\nurl_company_details = \"https://api.themoviedb.org/3/company/{}\"\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of popular TV shows\nparams = {\"page\": 1}\nresponse_tv_popular = requests.get(url_tv_popular, headers=headers, params=params)\nif response_tv_popular.status_code == 200:\n    popular_tv_shows = response_tv_popular.json()[\"results\"]\n    if len(popular_tv_shows) > 0:\n        # Get the id of the most popular TV show\n        most_popular_tv_id = popular_tv_shows[0][\"id\"]\n        \n        # Get the details of the most popular TV show by id\n        response_tv_details = requests.get(url_tv_details.format(most_popular_tv_id), headers=headers)\n        if response_tv_details.status_code == 200:\n            production_companies = response_tv_details.json()[\"production_companies\"]\n            if len(production_companies) > 0:\n                # Get the id of the company that produced the most popular TV show\n                company_id = production_companies[0][\"id\"]\n                \n                # Get the details of the company by id\n                response_company_details = requests.get(url_company_details.format(company_id), headers=headers)\n                if response_company_details.status_code == 200:\n                    headquarter = response_company_details.json()[\"headquarters\"]\n                    print(\"Headquarter of the company that produced the most popular TV show: \", headquarter)\n                else:\n                    print(\"Failed to fetch company details\")\n            else:\n                print(\"No production company details found for the most popular TV show\")\n        else:\n            print(\"Failed to fetch TV show details\")\n    else:\n        print(\"No popular TV shows found\")\nelse:\n    print(\"Failed to fetch popular TV shows\")\n```"
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details\nurl = \"https://api.themoviedb.org/3/search/tv\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nparams = {\n    \"query\": \"The Mandalorian\"\n}\n\n# Make the API call to get the TV show details\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the genre of The Mandalorian\nif 'results' in data and len(data['results']) > 0:\n    genre_ids = data['results'][0]['genre_ids']\n    \n    # Now get the genre names based on the genre ids\n    genre_url = \"https://api.themoviedb.org/3/genre/tv/list\"\n    genre_params = {}\n    response_genre = requests.get(genre_url, headers=headers, params=genre_params)\n    genre_data = response_genre.json()\n\n    genre_dict = {genre['id']: genre['name'] for genre in genre_data['genres']}\n    genre_names = [genre_dict[genre_id] for genre_id in genre_ids]\n\n    print(\"The genre of The Mandalorian is:\", genre_names)\nelse:\n    print(\"TV show 'The Mandalorian' not found.\")\n```"
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the daily trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(url, headers=headers)\n\n# Extract the TV show id of the most trending TV show\ntv_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits of the TV show to find the lead actor\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\n\n# Extract the lead actor id from the credits\nlead_actor_id = credits_response.json()[\"cast\"][0][\"id\"]\n\n# Get the details of the lead actor to find their birthday\nperson_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nperson_response = requests.get(person_url, headers=headers)\n\n# Extract the birthday of the lead actor\nlead_actor_birthday = person_response.json()[\"birthday\"]\nprint(f\"The birthday of the lead actor of today's most trending TV show is: {lead_actor_birthday}\")\n```"
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for getting today's trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call to get today's trending TV shows\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\njson_response_trending_tv = response_trending_tv.json()\n\n# Get the TV show id of the most trending TV show\nmost_trending_tv_show_id = json_response_trending_tv[\"results\"][0][\"id\"]\n\n# Define the API url for getting details of a TV show by id\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{most_trending_tv_show_id}\"\n\n# Make the API call to get details of the most trending TV show\nresponse_tv_details = requests.get(url_tv_details, headers=headers)\njson_response_tv_details = response_tv_details.json()\n\n# Get the network id that produced the most trending TV show\nnetwork_id = json_response_tv_details[\"networks\"][0][\"id\"]\n\n# Define the API url for getting network details by id\nurl_network_details = f\"https://api.themoviedb.org/3/network/{network_id}\"\n\n# Make the API call to get details of the network that produced the most trending TV show\nresponse_network_details = requests.get(url_network_details, headers=headers)\njson_response_network_details = response_network_details.json()\n\n# Get the homepage of the network\nnetwork_homepage = json_response_network_details[\"homepage\"]\nprint(network_homepage)\n```"
    },
    {
        "query": "give me a review of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\n# API url for getting trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Request the trending TV shows API\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\n\nif response_trending_tv.status_code == 200:\n    # Get the TV Id of the most trending TV show\n    tv_id = response_trending_tv.json()[\"results\"][0][\"id\"]\n\n    # API url for getting reviews of the most trending TV show\n    url_reviews_tv = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\n\n    # Request the reviews API for the most trending TV show\n    response_reviews_tv = requests.get(url_reviews_tv, headers=headers)\n\n    if response_reviews_tv.status_code == 200:\n        tv_reviews = response_reviews_tv.json()[\"results\"]\n        for review in tv_reviews:\n            print(f\"Author: {review['author']}\")\n            print(f\"Content: {review['content']}\")\n            print(\"----------\")\n    else:\n        print(\"Failed to fetch TV show reviews\")\nelse:\n    print(\"Failed to fetch trending TV shows\")\n```"
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for getting the daily trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Define the API url for getting similar TV shows\nurl_similar_tv = \"https://api.themoviedb.org/3/tv/{}/similar\"\n\n# Define the API url for getting TV show details by id\nurl_tv_details = \"https://api.themoviedb.org/3/tv/{}\"\n\n# Headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the daily trending TV shows\nresponse = requests.get(url_trending_tv, headers=headers)\ntrending_tv_data = response.json()\n\n# Get the most trending TV show's ID\nmost_trending_tv_id = trending_tv_data['results'][0]['id']\n\n# Get list of similar TV shows to the most trending TV show\nresponse_similar_tv = requests.get(url_similar_tv.format(most_trending_tv_id), headers=headers)\nsimilar_tv_data = response_similar_tv.json()\n\n# Get details of the most similar TV show\nmost_similar_tv_id = similar_tv_data['results'][0]['id']\nresponse_tv_details = requests.get(url_tv_details.format(most_similar_tv_id), headers=headers)\nsimilar_tv_details = response_tv_details.json()\n\n# Print the details of the most similar TV show\nprint(similar_tv_details)\n```"
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get today's trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the API key in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the response data\n    data = response.json()\n\n    # Get the poster path of the first trending TV show\n    if len(data.get('results', [])) > 0:\n        poster_path = data['results'][0].get('poster_path', \"No poster path available\")\n        print(\"Poster of today's most trending TV show:\")\n        print(poster_path)\n    else:\n        print(\"No trending TV shows found.\")\nelse:\n    print(\"Failed to retrieve trending TV shows. Status code:\", response.status_code)\n```"
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ],
        "results": "```python\nimport requests\n\n# API headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for Jeremy Clarkson\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Jeremy Clarkson\"\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nresult = response.json()\n\n# Get Jeremy Clarkson's ID\nclarkson_id = result['results'][0]['id']\n\n# Step 2: Get Jeremy Clarkson's TV show credits\ncredits_url = f\"https://api.themoviedb.org/3/person/{clarkson_id}/tv_credits\"\nresponse = requests.get(credits_url, headers=headers)\ntv_credits = response.json()\n\n# Step 3: Find Jeremy Clarkson's most popular TV show\nmax_popularity = 0\nmost_popular_show = \"\"\nfor show in tv_credits['cast']:\n    if show['popularity'] > max_popularity:\n        max_popularity = show['popularity']\n        most_popular_show = show['original_name']\n\n# Step 4: Get the list of people who worked with Jeremy Clarkson in his most popular TV show\nfor show in tv_credits['cast']:\n    if show['original_name'] == most_popular_show:\n        cast_list = []\n        for cast_member in show['cast']:\n            cast_list.append(cast_member['name'])\n\nprint(cast_list)\n```"
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Query for the TV show Black Mirror\ntv_search_params = {\n    \"query\": \"Black Mirror\",\n    \"include_adult\": False,\n}\ntv_search_response = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=tv_search_params)\ntv_search_results = tv_search_response.json()\nblack_mirror_id = tv_search_results[\"results\"][0][\"id\"]\n\n# Get the credits for the first episode of the second season of Black Mirror\ntv_credits_url = f\"https://api.themoviedb.org/3/tv/{black_mirror_id}/season/2/episode/1/credits\"\ntv_credits_response = requests.get(tv_credits_url, headers=headers)\ntv_credits_results = tv_credits_response.json()\n\n# Get the lead actor for the first episode\nlead_actor = tv_credits_results[\"cast\"][0]\n\n# Get the image of the lead actor\nperson_id = lead_actor[\"id\"]\nperson_images_url = f\"https://api.themoviedb.org/3/person/{person_id}/images\"\nperson_images_response = requests.get(person_images_url, headers=headers)\nperson_images_results = person_images_response.json()\n\nlead_actor_name = lead_actor[\"name\"]\nlead_actor_image_url = \"https://image.tmdb.org/t/p/w500\" + person_images_results[\"profiles\"][0][\"file_path\"]\n\nprint(f\"The lead actor of the first episode of the second season of Black Mirror, {lead_actor_name}, looks like:\")\nprint(lead_actor_image_url)\n```"
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/company"
        ],
        "results": "```python\nimport requests\n\n# Define the API URLs\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_credits_url = \"https://api.themoviedb.org/3/tv/{}/credits\"\nperson_details_url = \"https://api.themoviedb.org/3/person/{}\"\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Mandalorian TV show\nsearch_params = {\n    \"query\": \"The Mandalorian\"\n}\nsearch_response = requests.get(search_tv_url, headers=headers, params=search_params)\n# Get the TV show ID\ntv_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get the credits of The Mandalorian\ncredits_response = requests.get(tv_credits_url.format(tv_id), headers=headers)\n# Get the lead actor ID\nlead_actor_id = credits_response.json()[\"cast\"][0][\"id\"]\n\n# Get the details of the lead actor\nperson_response = requests.get(person_details_url.format(lead_actor_id), headers=headers)\n# Extract the birthday of the lead actor\nlead_actor_birthday = person_response.json()[\"birthday\"]\n\n# Output the lead actor's birthday\nprint(\"The lead actor of The Mandalorian was born on:\", lead_actor_birthday)\n```"
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ],
        "results": "```python\nimport requests\n\n# API url to get a list of current popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n# API url to get the credits of a particular TV show\nurl_tv_credits = \"https://api.themoviedb.org/3/tv/{}/credits\"\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get a list of current popular TV shows\nresponse = requests.get(url_popular_tv, headers=headers)\nif response.status_code == 200:\n    # Get the TV show id of the most popular TV show\n    tv_id = response.json()['results'][0]['id']\n    # Get the credits for the most popular TV show\n    response_credits = requests.get(url_tv_credits.format(tv_id), headers=headers)\n    if response_credits.status_code == 200:\n        # Get the lead actor's name from the credits\n        lead_actor = response_credits.json()['cast'][0]['name']\n        print(\"The lead actor of today's most popular TV show is:\", lead_actor)\n    else:\n        print(\"Failed to fetch TV show credits.\")\nelse:\n    print(\"Failed to fetch popular TV shows.\")\n```"
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API URLs\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\nurl_tv_credits = \"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\nurl_person_images = \"https://api.themoviedb.org/3/person/{person_id}/images\"\n\n# Define the headers with the provided authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of current popular TV shows\nresponse_tv = requests.get(url_popular_tv, headers=headers)\npopular_tv_data = response_tv.json()\n\n# Get the TV show ID of the most popular TV show of this week\nmost_popular_tv_id = popular_tv_data['results'][0]['id']\n\n# Call the API to get the credits (cast and crew) of the most popular TV show\nurl_tv_credits = url_tv_credits.format(tv_id=most_popular_tv_id)\nresponse_credits = requests.get(url_tv_credits, headers=headers)\ntv_credits_data = response_credits.json()\n\n# Get the lead actor ID\nlead_actor_id = tv_credits_data['cast'][0]['id']\n\n# Call the API to get the images of the lead actor\nurl_person_images = url_person_images.format(person_id=lead_actor_id)\nresponse_images = requests.get(url_person_images, headers=headers)\nperson_images_data = response_images.json()\n\n# Get the file path of the first image of the lead actor\nlead_actor_image = person_images_data['profiles'][0]['file_path']\n\nprint(\"Photo of the lead actor of the most popular TV show of this week: \", lead_actor_image)\n```"
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching person\nsearch_person_api = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the API endpoint for getting TV show credits for a person\ntv_credits_api = \"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n\n# Define the API endpoint for getting TV show reviews\ntv_reviews_api = \"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\n\n# Define the headers with the Bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Cate Blanchett\nparams = {\n    \"query\": \"Cate Blanchett\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse = requests.get(search_person_api, headers=headers, params=params)\nperson_data = response.json()\n\nif person_data and 'results' in person_data and len(person_data['results']) > 0:\n    person_id = person_data['results'][0]['id']\n    \n    # Get the TV show credits for Cate Blanchett\n    tv_credits_url = tv_credits_api.format(person_id=person_id)\n    response = requests.get(tv_credits_url, headers=headers)\n    tv_credits_data = response.json()\n    \n    if tv_credits_data and 'cast' in tv_credits_data:\n        latest_tv_show_id = tv_credits_data['cast'][0]['id']\n        \n        # Get the reviews for the latest TV show\n        tv_reviews_url = tv_reviews_api.format(tv_id=latest_tv_show_id)\n        response = requests.get(tv_reviews_url, headers=headers)\n        tv_reviews_data = response.json()\n        \n        # Print out the reviews\n        if tv_reviews_data and 'results' in tv_reviews_data:\n            print(\"Reviews of Cate Blanchett's latest TV show:\")\n            for review in tv_reviews_data['results']:\n                print(f\"Author: {review['author']}\")\n                print(f\"Content: {review['content']}\")\n                print(\"-----\")\nelse:\n    print(\"No results found for Cate Blanchett.\")\n```"
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoints\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nperson_tv_credits_url = \"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\ntv_credits_url = \"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\ngenre_tv_list_url = \"https://api.themoviedb.org/3/genre/tv/list\"\npopular_person_url = \"https://api.themoviedb.org/3/person/popular\"\n\n# Define the API key and headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for David Schwimmer\nsearch_params = {\n    \"query\": \"David Schwimmer\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(search_person_url, headers=headers, params=search_params)\nsearch_results = response.json()\n\n# Get the person id for David Schwimmer\nperson_id = search_results['results'][0]['id']\n\n# Get the TV credits for David Schwimmer\ntv_credits_url = person_tv_credits_url.format(person_id=person_id)\nresponse = requests.get(tv_credits_url, headers=headers)\ntv_credits = response.json()['cast']\n\n# Find the most popular TV show\nmost_popular_tv_show = max(tv_credits, key=lambda x: x['popularity'])\n\nprint(\"David Schwimmer's most popular TV show is:\", most_popular_tv_show['name'])\n```"
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Black Mirror\",\n    \"include_adult\": False\n}\n\n# Make the API request to search for TV shows\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\nsearch_results = response_search_tv.json()\n\n# Extract the TV show ID for Black Mirror\nblack_mirror_id = search_results[\"results\"][0][\"id\"]\n\n# Define the API url to get credits for the second season of Black Mirror\nurl_season_credits = f\"https://api.themoviedb.org/3/tv/{black_mirror_id}/season/2/credits\"\n\n# Make the API request to get credits for the second season of Black Mirror\nresponse_season_credits = requests.get(url_season_credits, headers=headers)\ncredits_results = response_season_credits.json()\n\n# Find the director of the third episode of the second season of Black Mirror\nfor crew_member in credits_results[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\" and crew_member[\"episode_number\"] == 3:\n        director_name = crew_member[\"name\"]\n        break\n\nprint(f\"The director of the third episode of the second season of Black Mirror is {director_name}\")\n```"
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Christopher Nolan's movies based on person search API\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nperson_search_params = {\n    \"query\": \"Christopher Nolan\",\n    \"api_key\": \"0dba590c7eaca07ebe625974a37ad92\",\n}\nperson_search_response = requests.get(person_search_url, headers=headers, params=person_search_params)\nperson_search_results = person_search_response.json()\n\n# Get the known_for movies of Christopher Nolan\nif 'results' in person_search_results and len(person_search_results['results']) > 0:\n    known_for_movies = person_search_results['results'][0]['known_for']\n    for movie in known_for_movies:\n        print(movie['title'])\n\n```\nThis code snippet does the following:\n1. Sets up the HTTP headers required for authorization.\n2. Calls the person search API to search for movies associated with Christopher Nolan.\n3. Extracts and prints the titles of movies known for Christopher Nolan."
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# API url for searching movies\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Headers required for authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Query for 'Avatar' movie\nparams_avatar = {\n    \"query\": \"Avatar\",\n    \"include_adult\": False\n}\n\n# Query for 'Avatar: The Way of Water' movie\nparams_avatar_water = {\n    \"query\": \"Avatar: The Way of Water\",\n    \"include_adult\": False\n}\n\n# Call the API with the provided parameters\nresponse_avatar = requests.get(url, headers=headers, params=params_avatar)\nresponse_avatar_water = requests.get(url, headers=headers, params=params_avatar_water)\n\n# Extract the vote average for 'Avatar' movie\nif response_avatar.status_code == 200:\n    data_avatar = response_avatar.json()\n    \n    total_results_avatar = data_avatar[\"total_results\"]\n    \n    if total_results_avatar > 0:\n        avatar_vote_average = data_avatar[\"results\"][0][\"vote_average\"]\n    else:\n        avatar_vote_average = 0\n\n# Extract the vote average for 'Avatar: The Way of Water' movie\nif response_avatar_water.status_code == 200:\n    data_avatar_water = response_avatar_water.json()\n    \n    total_results_avatar_water = data_avatar_water[\"total_results\"]\n    \n    if total_results_avatar_water > 0:\n        avatar_water_vote_average = data_avatar_water[\"results\"][0][\"vote_average\"]\n    else:\n        avatar_water_vote_average = 0\n\n# Compare the vote averages and print the result\nif avatar_vote_average > avatar_water_vote_average:\n    print(\"Avatar has a higher rating than Avatar: The Way of Water\")\nelif avatar_vote_average < avatar_water_vote_average:\n    print(\"Avatar: The Way of Water has a higher rating than Avatar\")\nelse:\n    print(\"Both movies have the same rating\")\n```"
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n\n# Define the parameters for the query\nparams = {\n    \"language\": \"en\",\n    \"sort_by\": \"primary_release_date.desc\",\n    \"vote_average.gte\": 7.0,\n    \"primary_release_date.gte\": \"2021-01-01\",\n    \"page\": 1\n}\n\n# Add the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract and print the result\nresult = response.json()\nprint(result)\n```"
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Lord of the Rings\" to get its ID\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Lord of the Rings\",\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\nmovie_id = search_results[\"results\"][0][\"id\"]\n\n# Get the primary information about the movie using its ID\nmovie_info_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nmovie_info_response = requests.get(movie_info_url, headers=headers)\nmovie_info = movie_info_response.json()\n\n# Extract and print the genre of the movie\ngenre = movie_info[\"genres\"][0][\"name\"]\nprint(f\"The genre of the movie Lord of the Rings is: {genre}\")\n```"
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the response to get the birthday of the most popular person\nif response.status_code == 200:\n    popular_people = response.json()\n    if popular_people[\"results\"]:\n        most_popular_person = popular_people[\"results\"][0]\n        most_popular_person_id = most_popular_person[\"id\"]\n        \n        # Make another API call to get the details of the most popular person\n        person_url = f\"https://api.themoviedb.org/3/person/{most_popular_person_id}\"\n        person_response = requests.get(person_url, headers=headers)\n        \n        if person_response.status_code == 200:\n            person_details = person_response.json()\n            birthday = person_details[\"birthday\"]\n            print(\"Birthday of the most popular person right now:\", birthday)\n        else:\n            print(\"Failed to retrieve person details\")\n    else:\n        print(\"No popular people found in the response\")\nelse:\n    print(\"Failed to retrieve popular people\")\n\n```"
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ],
        "results": "```python\nimport requests\n\n# API url to search for TV shows\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for the search query\nparams = {\n    \"query\": \"Big Bang Theory\",  # Search query for the TV show\n    \"include_adult\": False\n}\n\n# Making the GET request to search for the TV show\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the TV show ID for Big Bang Theory\ntv_show_id = data['results'][0]['id']\n\n# Getting the images of the second season of Big Bang Theory\nseason_number = 2\nseason_images_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/{season_number}/images\"\nresponse = requests.get(season_images_url, headers=headers)\nseason_images_data = response.json()\n\n# Getting the poster paths for the second season\nposter_paths = [image['file_path'] for image in season_images_data['posters']]\n\nprint(poster_paths)\n```"
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the search TV API to get the ID of the Mandalorian TV show\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_tv_params = {\n    \"query\": \"Mandalorian\"\n}\nsearch_tv_response = requests.get(search_tv_url, headers=headers, params=search_tv_params)\nmandalorian_id = search_tv_response.json()[\"results\"][0][\"id\"]\n\n# Call the episode details API to get the details of the third episode of the second season of Mandalorian\nepisode_url = f\"https://api.themoviedb.org/3/tv/{mandalorian_id}/season/2/episode/3\"\nepisode_response = requests.get(episode_url, headers=headers)\nthird_episode_name = episode_response.json()[\"name\"]\n\nprint(third_episode_name)\n```"
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for the movie \"The Shawshank Redemption\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n# Define the API url to get the cast and crew of a movie\nurl_movie_credits = \"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n# Define the API url to get person details by id\nurl_person_details = \"https://api.themoviedb.org/3/person/{person_id}\"\n\n# Set the API key in the header for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Shawshank Redemption\"\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse_search = requests.get(url_search_movie, headers=headers, params=params)\nmovie_results = response_search.json()['results']\n\nif movie_results:\n    movie_id = movie_results[0]['id']\n    \n    # Get the cast and crew for the movie \"The Shawshank Redemption\"\n    url_movie_credits = url_movie_credits.format(movie_id=movie_id)\n    response_credits = requests.get(url_movie_credits, headers=headers)\n    cast_crew = response_credits.json()\n\n    # Check the lead actor id from the cast\n    lead_actor_id = cast_crew['cast'][0]['id']\n\n    # Get the person details by id (including the birthday)\n    url_person_details = url_person_details.format(person_id=lead_actor_id)\n    response_person = requests.get(url_person_details, headers=headers)\n    lead_actor_details = response_person.json()\n\n    # Extract the birthdate of the lead actor\n    lead_actor_birthday = lead_actor_details['birthday']\n    \n    print(\"Birthday of the lead actor of the movie 'The Shawshank Redemption' is:\", lead_actor_birthday)\nelse:\n    print(\"Movie 'The Shawshank Redemption' not found.\")\n```"
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# API url to search for the movie \"The Shawshank Redemption\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the API call to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie id of \"The Shawshank Redemption\" from the search results\nmovie_id = data_search_movie['results'][0]['id']\n\n# API url to get the credits of the movie using the movie_id\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make the API call to get the credits of the movie\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Get the director's name from the credits\ndirector_name = None\nfor crew_member in data_movie_credits['crew']:\n    if crew_member['job'] == 'Director':\n        director_name = crew_member['name']\n        break\n\nif director_name is not None:\n    # API url to get the person details by name\n    url_person_details = f\"https://api.themoviedb.org/3/search/person\"\n    params_person_details = {\n        \"query\": director_name,\n        \"page\": 1\n    }\n\n    # Make the API call to get the details of the director\n    response_person_details = requests.get(url_person_details, headers=headers, params=params_person_details)\n    data_person_details = response_person_details.json()\n\n    # Assuming the first person in the response is the director\n    person_id = data_person_details['results'][0]['id']\n\n    # API url to get the person details by id\n    url_person_details_by_id = f\"https://api.themoviedb.org/3/person/{person_id}\"\n\n    # Make the API call to get the details of the person by id\n    response_person_details_by_id = requests.get(url_person_details_by_id, headers=headers)\n    data_person_details_by_id = response_person_details_by_id.json()\n\n    director_birthday = data_person_details_by_id['birthday']\n    \n    print(f\"The birthday of the director of the movie 'The Shawshank Redemption' is: {director_birthday}\")\nelse:\n    print(\"Director not found for the movie 'The Shawshank Redemption'\")\n```"
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie 'The Shawshank Redemption' to get its ID\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"The Shawshank Redemption\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\nmovie_id = search_results['results'][0]['id']\n\n# Get the primary information about the movie using its ID\nmovie_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nmovie_response = requests.get(movie_url, headers=headers)\nmovie_info = movie_response.json()\n\n# Get the company ID that created the movie\nproduction_companies = movie_info['production_companies']\ncompany_id = production_companies[0]['id']\n\n# Get the details of the company including its headquarters\ncompany_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\ncompany_response = requests.get(company_url, headers=headers)\ncompany_info = company_response.json()\n\n# Print the headquarters of the company that created the movie\nprint(\"The headquarters of the company that created the movie 'The Shawshank Redemption' is:\", company_info['headquarters'])\n```"
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Step 1: Search for the collection id of Star Wars\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Star Wars\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Extract the collection id of Star Wars\nstar_wars_collection_id = search_data[\"results\"][0][\"id\"]\n\n# Step 2: Get the details of the company that created the Star Wars collection\ncollection_url = f\"https://api.themoviedb.org/3/collection/{star_wars_collection_id}\"\ncollection_response = requests.get(collection_url, headers=headers)\ncollection_data = collection_response.json()\n\n# Extract the company id that created the Star Wars collection\ncompany_id = collection_data[\"parts\"][0][\"id\"]\n\n# Step 3: Get the details of the company using the company id\ncompany_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\ncompany_response = requests.get(company_url, headers=headers)\ncompany_data = company_response.json()\n\n# Extract the headquarters of the company\nheadquarters = company_data[\"headquarters\"]\n\nprint(headquarters)\n```"
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Double Life of Veronique\nsearch_params_veronique = {\n    \"query\": \"The Double Life of Veronique\",\n    \"include_adult\": False\n}\nresponse_veronique = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=search_params_veronique)\nveronique_results = response_veronique.json()[\"results\"]\nveronique_release_date = veronique_results[0][\"release_date\"] if veronique_results else None\n\n# Search for Mulholland Drive\nsearch_params_mulholland = {\n    \"query\": \"Mulholland Drive\",\n    \"include_adult\": False\n}\nresponse_mulholland = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=search_params_mulholland)\nmulholland_results = response_mulholland.json()[\"results\"]\nmulholland_release_date = mulholland_results[0][\"release_date\"] if mulholland_results else None\n\nif veronique_release_date and mulholland_release_date:\n    if veronique_release_date < mulholland_release_date:\n        print(\"The Double Life of Veronique has an earlier release date.\")\n    elif veronique_release_date > mulholland_release_date:\n        print(\"Mulholland Drive has an earlier release date.\")\n    else:\n        print(\"Both movies have the same release date.\")\nelse:\n    print(\"Unable to determine the release dates due to missing information.\")\n```"
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers needed to access the TMDB API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the credits for a TV season\ndef get_tv_season_credits(tv_id, season_number):\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits\"\n    response = requests.get(url, headers=headers)\n    return response.json()\n\n# Function to get the director's name from the credits\ndef get_director_name(credits):\n    crew = credits['crew']\n    director_name = None\n    for member in crew:\n        if member['job'] == 'Director':\n            director_name = member['name']\n            break\n    return director_name\n\n# Get the credits for Twin Peaks Season 1\ntwin_peaks_season_1_credits = get_tv_season_credits(1104, 1)\ntwin_peaks_season_1_director = get_director_name(twin_peaks_season_1_credits)\n\n# Get the credits for Mulholland Drive\nmulholland_drive_credits = get_movie_credits(3996)\nmulholland_drive_director = get_director_name(mulholland_drive_credits)\n\n# Check if the director of Twin Peaks Season 1 and Mulholland Drive is the same person\nif twin_peaks_season_1_director is not None and mulholland_drive_director is not None:\n    if twin_peaks_season_1_director == mulholland_drive_director:\n        print(\"The director of Twin Peaks Season 1 and Mulholland Drive is the same person.\")\n    else:\n        print(\"The director of Twin Peaks Season 1 and Mulholland Drive is not the same person.\")\nelse:\n    print(\"Director information is not available.\")\n\n```"
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movie with query \"Mulholland Drive\"\n# Get the movie id of \"Mulholland Drive\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Mulholland Drive\"\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\nmovie_id = data_search_movie[\"results\"][0][\"id\"]\n\n# Get the credits details for the movie with the movie id\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Get the director's person id\ndirector_id = None\nfor crew_member in data_movie_credits[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director_id = crew_member[\"id\"]\n        break\n\n# Get the person details for the director\nurl_person_details = f\"https://api.themoviedb.org/3/person/{director_id}\"\nresponse_person_details = requests.get(url_person_details, headers=headers)\ndata_person_details = response_person_details.json()\n\n# Extract the birthplace of the director\ndirector_birthplace = data_person_details[\"place_of_birth\"]\nprint(\"The director of Mulholland Drive was born in:\", director_birthplace)\n```"
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the top rated movies on TMDb\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\nparams = {\"page\": 1}  # We are only interested in the first page of results\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if \"Mulholland Drive\" is in the top-10 rated movies\nif response.ok:\n    data = response.json()\n    top_rated_movies = data.get(\"results\", [])\n    for i, movie in enumerate(top_rated_movies):\n        if movie.get(\"title\") == \"Mulholland Drive\":\n            print(\"Yes, 'Mulholland Drive' is in the Top-10 rated list.\")\n            break\n    else:\n        print(\"No, 'Mulholland Drive' is not in the Top-10 rated list.\")\nelse:\n    print(\"Failed to fetch data from API\")\n```"
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# First, let's find the director_id of Akira Kurosawa\n# Search for the person with name Akira Kurosawa\nurl_akira_search = \"https://api.themoviedb.org/3/search/person\"\nparams_akira_search = {\n    \"query\": \"Akira Kurosawa\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\nresponse_akira_search = requests.get(url_akira_search, headers=headers, params=params_akira_search)\nakira_results = response_akira_search.json()[\"results\"]\nakira_id = akira_results[0][\"id\"]\n\n# Get the movie credits for Akira Kurosawa\nurl_akira_credits = f\"https://api.themoviedb.org/3/person/{akira_id}/movie_credits\"\nparams_akira_credits = {}\nresponse_akira_credits = requests.get(url_akira_credits, headers=headers, params=params_akira_credits)\nakira_movie_credits = response_akira_credits.json()\n\n# Count the number of movies directed by Akira Kurosawa\nakira_directed_movies = len(akira_movie_credits[\"crew\"])\n\n# Now, let's find the director_id of Spielberg\n# Search for the person with name Spielberg\nurl_spielberg_search = \"https://api.themoviedb.org/3/search/person\"\nparams_spielberg_search = {\n    \"query\": \"Steven Spielberg\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\nresponse_spielberg_search = requests.get(url_spielberg_search, headers=headers, params=params_spielberg_search)\nspielberg_results = response_spielberg_search.json()[\"results\"]\nspielberg_id = spielberg_results[0][\"id\"]\n\n# Get the movie credits for Spielberg\nurl_spielberg_credits = f\"https://api.themoviedb.org/3/person/{spielberg_id}/movie_credits\"\nparams_spielberg_credits = {}\nresponse_spielberg_credits = requests.get(url_spielberg_credits, headers=headers, params=params_spielberg_credits)\nspielberg_movie_credits = response_spielberg_credits.json()\n\n# Count the number of movies directed by Spielberg\nspielberg_directed_movies = len(spielberg_movie_credits[\"crew\"])\n\n# Compare the number of movies directed by Akira Kurosawa and Spielberg\nif akira_directed_movies > spielberg_directed_movies:\n    print(\"Akira Kurosawa directed more movies.\")\nelif akira_directed_movies < spielberg_directed_movies:\n    print(\"Spielberg directed more movies.\")\nelse:\n    print(\"Akira Kurosawa and Spielberg directed an equal number of movies.\")\n```"
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the credits of the director of Mulholland Drive\nurl = \"https://api.themoviedb.org/3/movie/1018/credits\"\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Make the GET request to get the cast details of the movie\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Extracting the director's name from the cast details\nfor crew in data[\"crew\"]:\n    if crew[\"job\"] == \"Director\":\n        director_name = crew[\"name\"]\n        break\n\n# Now, get the TV show credits for the director\nurl = f\"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": director_name\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the TV show credits for the director\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{data['results'][0]['id']}/tv_credits\"\ntv_credits_response = requests.get(tv_credits_url, headers=headers)\ntv_credits_data = tv_credits_response.json()\n\n# Getting the list of TV shows directed by the director of Mulholland Drive\ntv_series_directed = []\nfor crew in tv_credits_data[\"crew\"]:\n    if crew[\"job\"] == \"Director\":\n        tv_series_directed.append(crew[\"original_name\"])\n\nprint(tv_series_directed)\n```"
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Scarlett Johansson\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Scarlett Johansson\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        # Get Scarlett Johansson's person details\n        person_id = data[\"results\"][0][\"id\"]\n        \n        person_details_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n        response = requests.get(person_details_url, headers=headers)\n        \n        if response.status_code == 200:\n            person_data = response.json()\n            birthday = person_data[\"birthday\"]\n            print(f\"Scarlett Johansson's birthday is {birthday}\")\n        else:\n            print(\"Failed to retrieve person details.\")\n    else:\n        print(\"Scarlett Johansson not found.\")\nelse:\n    print(\"Failed to search for Scarlett Johansson.\")\n```"
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for the TV show \"Sword Art Online\"\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Sword Art Online\",\n    \"include_adult\": False,\n}\n\n# Make the API request to search for the TV show \"Sword Art Online\"\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Retrieve the TV show ID for \"Sword Art Online\"\nif data[\"results\"]:\n    tv_show_id = data[\"results\"][0][\"id\"]\n\n    # Define the API url to get the details of the TV show by ID\n    url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\n\n    # Make the API request to get the details of the TV show by ID\n    response = requests.get(url, headers=headers)\n    data = response.json()\n\n    # Get the number of seasons of \"Sword Art Online\"\n    number_of_seasons = data[\"number_of_seasons\"]\n    print(f\"The TV show 'Sword Art Online' has {number_of_seasons} seasons.\")\nelse:\n    print(\"No TV show found with the name 'Sword Art Online'.\")\n```"
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "results": "```python\nimport requests\n\n# Set the API key and headers\napi_key = \"0dbab590c7eaca07ebc6625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Step 1: Search for the movie \"We Married as Job\" on TMDB\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"We Married as Job\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\nif search_results['total_results'] > 0:\n    movie_id = search_results['results'][0]['id']\n    \n    # Step 2: Get the cast and crew for the movie\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    credits_data = credits_response.json()\n    \n    # Step 3: Check if Yui Aragaki and Gen Hoshino are co-starring in the movie\n    yui_aragaki_present = False\n    gen_hoshino_present = False\n    \n    for cast_member in credits_data['cast']:\n        if cast_member['name'] == 'Yui Aragaki':\n            yui_aragaki_present = True\n        if cast_member['name'] == 'Gen Hoshino':\n            gen_hoshino_present = True\n    \n    if yui_aragaki_present and gen_hoshino_present:\n        print(\"Yui Aragaki and Gen Hoshino are co-starring in We Married as Job.\")\n    else:\n        print(\"Yui Aragaki and Gen Hoshino are not co-starring in We Married as Job.\")\nelse:\n    print(\"Movie not found.\")\n```"
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers for authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie Barbie\nmovie_query = \"Barbie\"\nmovie_params = {\n    \"query\": movie_query,\n    \"include_adult\": False\n}\n\nmovie_response = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=movie_params)\nmovie_data = movie_response.json()\nbarbie_director_id = movie_data['results'][0]['id']\n\n# Get the cast and crew for the movie Barbie\nbarbie_credits_url = f\"https://api.themoviedb.org/3/movie/{barbie_director_id}/credits\"\nbarbie_credits_response = requests.get(barbie_credits_url, headers=headers)\n\nbarbie_credits_data = barbie_credits_response.json()\ndirector_name = barbie_credits_data['crew'][0]['name']\ndirector_birth_year = director_name.split()[-1]  # Assume the birth year is at the end of the name\n\n# Search for the TV show DEATH NOTE\ntv_show_query = \"DEATH NOTE\"\ntv_show_params = {\n    \"query\": tv_show_query,\n    \"include_adult\": False\n}\n\ntv_show_response = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=tv_show_params)\ntv_show_data = tv_show_response.json()\ndeath_note_lead_actor_id = tv_show_data['results'][0]['id']\n\n# Get the credits for the TV show DEATH NOTE\ndeath_note_credits_url = f\"https://api.themoviedb.org/3/tv/{death_note_lead_actor_id}/credits\"\ndeath_note_credits_response = requests.get(death_note_credits_url, headers=headers)\n\ndeath_note_credits_data = death_note_credits_response.json()\nlead_actor_name = death_note_credits_data['cast'][0]['name']\nlead_actor_birth_year = lead_actor_name.split()[-1]\n\n# Calculate the age difference\ndirector_age = 2021 - int(director_birth_year)\nlead_actor_age = 2021 - int(lead_actor_birth_year)\n\nif director_age > lead_actor_age:\n    age_difference = director_age - lead_actor_age\n    print(f\"The director of movie Barbie is older than the lead actor of TV show DEATH NOTE by {age_difference} years.\")\nelse:\n    age_difference = lead_actor_age - director_age\n    print(f\"The lead actor of TV show DEATH NOTE is older than the director of movie Barbie by {age_difference} years.\")\n```"
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# API url to search for person\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Katherine LaNasa\",\n    \"include_adult\": False,\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Making a GET request to search for the person\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person's id\nperson_id = data['results'][0]['id']\n\n# API url to get movie credits for the person\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n# Making a GET request to get the movie credits for the person\nmovie_credits_response = requests.get(movie_credits_url, headers=headers)\nmovie_credits_data = movie_credits_response.json()\n\n# Get the latest movie appearance\nlatest_movie = movie_credits_data['cast'][0]['title']\n\nprint(f\"Katherine LaNasa's latest movie appearance is in the movie: {latest_movie}\")\n```"
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie Oppenheimer\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Oppenheimer\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Check if any movie found\nif search_data[\"total_results\"] > 0:\n    movie_id = search_data[\"results\"][0][\"id\"]\n    \n    # Get the images of the movie Oppenheimer\n    images_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n    images_response = requests.get(images_url, headers=headers)\n    images_data = images_response.json()\n\n    # Get the cover image\n    if len(images_data[\"posters\"]) > 0:\n        cover_image_path = images_data[\"posters\"][0][\"file_path\"]\n        # Construct the full image url\n        base_image_url = \"https://image.tmdb.org/t/p/original\"\n        cover_image_url = f\"{base_image_url}{cover_image_path}\"\n        print(cover_image_url)\n    else:\n        print(\"Cover image not found.\")\nelse:\n    print(\"Movie Oppenheimer not found.\")\n```"
    }
]