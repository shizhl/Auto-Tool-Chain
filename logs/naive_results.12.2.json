[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person Sofia Coppola\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Sofia Coppola\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the person_id for Sofia Coppola\nif search_results[\"total_results\"] > 0:\n    person_id = search_results[\"results\"][0][\"id\"]\n\n    # Get the movie credits for Sofia Coppola\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    movie_credits_response = requests.get(movie_credits_url, headers=headers)\n    movie_credits = movie_credits_response.json()\n\n    # Count the number of movies directed by Sofia Coppola\n    directed_movies_count = sum(1 for credit in movie_credits[\"crew\"] if credit[\"job\"] == \"Director\")\n    print(f\"The number of movies directed by Sofia Coppola is: {directed_movies_count}\")\n\nelse:\n    print(\"Sofia Coppola not found.\")\n```"
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for the movie \nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the API endpoint to get the credits for a movie\nurl_movie_credits = \"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Define the parameters for searching the movie \"The Dark Knight\"\nparams_search_movie = {\n    \"query\": \"The Dark Knight\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the API call to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie id for \"The Dark Knight\"\nmovie_id = data_search_movie['results'][0]['id']\n\n# Make the API call to get the credits for the movie based on the movie id\nurl_movie_credits = url_movie_credits.format(movie_id=movie_id)\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Extract the lead actor from the credits\nlead_actor = data_movie_credits['cast'][0]['name']\n\nprint(\"The lead actor in the movie The Dark Knight was:\", lead_actor)\n```"
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Add authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the HTTP request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the data from the response\n    data = response.json()\n    # Extract the director of the top-1 rated movie\n    top_movie_id = data['results'][0]['id']\n    \n    # Now call the credits API to get the cast and crew for the top-1 rated movie\n    credits_url = f\"https://api.themoviedb.org/3/movie/{top_movie_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    if credits_response.status_code == 200:\n        credits_data = credits_response.json()\n        # Find the director in the crew list\n        for crew_member in credits_data['crew']:\n            if crew_member['job'] == 'Director':\n                director = crew_member['name']\n                print(f\"The director of the top-1 rated movie is: {director}\")\n                break\n    else:\n        print(\"Error accessing credits API\")\nelse:\n    print(\"Error accessing top rated movies API\")\n```"
    },
    {
        "query": "give me a image for the collection Star Wars",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the necessary information for the API call\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the Star Wars collection\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Star Wars\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params).json()\n\n# Get the collection id of Star Wars for the image retrieval\ncollection_id = search_response[\"results\"][0][\"id\"]\n\n# Get the images for the Star Wars collection by id\nimages_url = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\nimages_response = requests.get(images_url, headers=headers).json()\n\n# Extract the necessary image information\nimages_list = images_response[\"backdrops\"]\nimage_paths = [image[\"file_path\"] for image in images_list]\n\nprint(image_paths)\n```"
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "results": "```python\n# Import the requests library\nimport requests\n\n# Set the API url to search for the company\nurl_search_company = \"https://api.themoviedb.org/3/search/company\"\n\n# Set the parameters for the company search query\nparams_search_company = {\n    \"query\": \"Walt Disney\"  # Search query for Walt Disney\n}\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to search for the company\nresponse = requests.get(url_search_company, headers=headers, params=params_search_company)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the company logo if the search is successful\n    data = response.json()\n    if data[\"results\"]:\n        company_id = data[\"results\"][0][\"id\"]\n        \n        # Set the API url to get the company logos by id\n        url_company_images = f\"https://api.themoviedb.org/3/company/{company_id}/images\"\n        \n        # Send a GET request to get the company logos by id\n        response_images = requests.get(url_company_images, headers=headers)\n        \n        # Check if the request for company logos was successful\n        if response_images.status_code == 200:\n            # Get and print the company logos\n            data_images = response_images.json()\n            logos = data_images[\"logos\"]\n            for logo in logos:\n                print(logo[\"file_path\"])  # Print the logo path\n        else:\n            print(\"Failed to retrieve company logos\")\n    else:\n        print(\"Company not found\")\nelse:\n    print(\"Failed to search for company\")\n\n```"
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for the movie \"Titanic\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"api_key\": \"0dbab590c7eaca07ebe625974a37ad92\"  # API key for accessing TMDB\n}\nresponse_movie_search = requests.get(url_search_movie, headers=headers, params=params)\nmovie_data = response_movie_search.json()\n\n# Extract the movie_id of Titanic\ntitanic_movie_id = movie_data[\"results\"][0][\"id\"]\n\n# Define the API endpoint to get cast and crew for the movie Titanic\nurl_cast_crew = f\"https://api.themoviedb.org/3/movie/{titanic_movie_id}/credits\"\nparams_cast_crew = {\n    \"api_key\": \"0dbab590c7eaca07ebe625974a37ad92\"  # API key for accessing TMDB\n}\nresponse_cast_crew = requests.get(url_cast_crew, headers=headers, params=params_cast_crew)\ncast_crew_data = response_cast_crew.json()\n\n# Find the lead actor of Titanic\nlead_actor = \"\"\nfor cast_member in cast_crew_data[\"cast\"]:\n    if cast_member[\"order\"] == 1:  # Assuming the lead actor is in order 1\n        lead_actor = cast_member[\"name\"]\n        lead_actor_id = cast_member[\"id\"]\n        break\n\n# Define the API endpoint to get the images of the lead actor\nurl_actor_images = f\"https://api.themoviedb.org/3/person/{lead_actor_id}/images\"\nparams_actor_images = {\n    \"api_key\": \"0dbab590c7eaca07ebe625974a37ad92\"  # API key for accessing TMDB\n}\nresponse_actor_images = requests.get(url_actor_images, headers=headers, params=params_actor_images)\nactor_images_data = response_actor_images.json()\n\n# Printing the lead actor's name and image information\nprint(f\"The lead actor of Titanic is: {lead_actor}\")\nprint(\"A sample image of the lead actor:\")\nif actor_images_data[\"profiles\"]:\n    print(actor_images_data[\"profiles\"][0][\"file_path\"])\nelse:\n    print(\"No image available\")\n```"
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoints\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nsimilar_movie_url = \"https://api.themoviedb.org/3/movie/{}/similar\"\nreviews_url = \"https://api.themoviedb.org/3/movie/{}/reviews\"\n\n# Define the headers with authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movies similar to \"Titanic\"\nsearch_params = {\n    \"query\": \"Titanic\",\n    \"page\": 1\n}\nresponse = requests.get(search_movie_url, headers=headers, params=search_params)\nsearch_results = response.json()\n\n# Check if there are results and get the movie id of the first result\nif search_results.get(\"results\"):\n    first_movie_id = search_results[\"results\"][0][\"id\"]\n    \n    # Get the list of similar movies\n    similar_params = {\n        \"page\": 1\n    }\n    similar_response = requests.get(similar_movie_url.format(first_movie_id), headers=headers, params=similar_params)\n    similar_results = similar_response.json()\n    \n    # Check if there are similar movies and get the list of reviews for the first similar movie\n    if similar_results.get(\"results\"):\n        first_similar_movie_id = similar_results[\"results\"][0][\"id\"]\n        \n        reviews_params = {\n            \"page\": 1\n        }\n        reviews_response = requests.get(reviews_url.format(first_similar_movie_id), headers=headers, params=reviews_params)\n        reviews = reviews_response.json()[\"results\"]\n        \n        # Print the reviews\n        for review in reviews:\n            print(\"Author:\", review[\"author\"])\n            print(\"Content:\", review[\"content\"])\n            print(\"URL:\", review[\"url\"])\n            print()\n    else:\n        print(\"No similar movies found.\")\nelse:\n    print(\"No results found for the movie search.\")\n```"
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie Titanic\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\ntitanic_results = search_response.json()[\"results\"]\n\nif len(titanic_results) > 0:\n    recommended_movie_id = titanic_results[0][\"id\"]\n    \n    # Get recommended movies for Titanic\n    recommendations_url = f\"https://api.themoviedb.org/3/movie/{recommended_movie_id}/recommendations\"\n    recommendations_params = {\n        \"page\": 1\n    }\n    recommendations_response = requests.get(recommendations_url, headers=headers, params=recommendations_params)\n    recommended_movies = recommendations_response.json()[\"results\"]\n    \n    # Print recommended movies\n    for movie in recommended_movies:\n        print(movie[\"title\"])\nelse:\n    print(\"No results found for Titanic.\")\n```"
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "results": "```python\nimport requests\n\n# API url to search for Christopher Nolan\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": \"false\"\n}\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Christopher Nolan\nresponse = requests.get(url, headers=headers, params=params)\nsearch_results = response.json()\n\nif search_results['total_results'] > 0:\n    # Get the person id for Christopher Nolan\n    person_id = search_results['results'][0]['id']\n\n    # API url to get movie credits for Christopher Nolan\n    credit_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    credit_response = requests.get(credit_url, headers=headers)\n    credit_results = credit_response.json()\n\n    # Find the latest movie directed by Christopher Nolan\n    directed_movies = [movie for movie in credit_results['crew'] if movie['job'] == \"Director\"]\n    directed_movies.sort(key=lambda x: x['release_date'], reverse=True)\n\n    latest_movie = directed_movies[0]['title'] if directed_movies else \"No movie found\"\n    \n    print(\"The latest movie directed by Christopher Nolan is:\", latest_movie)\nelse:\n    print(\"Christopher Nolan not found in the database\")\n```"
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\n# Import the requests library\nimport requests\n\n# Define the API endpoint for searching people\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the query to search for Martin Scorsese\nquery = \"Martin Scorsese\"\n\n# Define the parameters for the API\nparams = {\n    \"query\": query,\n    \"include_adult\": False,\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Set the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    data = response.json()\n    # Get the person_id of Martin Scorsese\n    person_id = data[\"results\"][0][\"id\"]\n    \n    # Now, we will get the movie credits for Martin Scorsese\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    movie_credits_params = {}\n    \n    # Make the API request to get the movie credits\n    movie_credits_response = requests.get(movie_credits_url, headers=headers, params=movie_credits_params)\n    \n    # Check if the request was successful\n    if movie_credits_response.status_code == 200:\n        # Get the movie credits data\n        movie_credits_data = movie_credits_response.json()\n        # Find the movie with the highest rating\n        highest_rated_movie = max(movie_credits_data[\"cast\"], key=lambda x: x.get(\"vote_average\", 0))\n        \n        print(\"Highest rated movie directed by Martin Scorsese:\")\n        print(highest_rated_movie[\"title\"])\n    else:\n        print(\"Error fetching movie credits data\")\nelse:\n    print(\"Error fetching person data\")\n```"
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Set the headers with the API key\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for Leonardo DiCaprio\nsearch_params = {\n    \"query\": \"Leonardo DiCaprio\"\n}\nsearch_response = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=search_params)\nsearch_results = search_response.json()\n\nif search_results[\"total_results\"] > 0:\n    # Get the person id of Leonardo DiCaprio\n    person_id = search_results[\"results\"][0][\"id\"]\n    \n    # Get the movie credits of the person\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    movie_credits_response = requests.get(movie_credits_url, headers=headers)\n    movie_credits = movie_credits_response.json()\n    \n    if movie_credits[\"cast\"]:\n        # Get the latest movie of Leonardo DiCaprio\n        latest_movie = movie_credits[\"cast\"][0]\n        \n        # Get the details of the latest movie\n        movie_id = latest_movie[\"id\"]\n        movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n        movie_details_response = requests.get(movie_details_url, headers=headers)\n        movie_details = movie_details_response.json()\n        \n        # Output the director of the latest movie\n        if movie_details[\"crew\"]:\n            for crew_member in movie_details[\"crew\"]:\n                if crew_member[\"job\"] == \"Director\":\n                    director_name = crew_member[\"name\"]\n                    print(f\"The director of Leonardo DiCaprio's latest movie is: {director_name}\")\n                    break\n    else:\n        print(\"No movie credits found for Leonardo DiCaprio.\")\nelse:\n    print(\"Leonardo DiCaprio not found.\")\n```"
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the person with the name \"Catherine Hardwicke\"\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Catherine Hardwicke\",\n    \"include_adult\": False\n}\nresponse = requests.get(person_search_url, headers=headers, params=params)\nperson_data = response.json()\n\n# Get the person ID for Catherine Hardwicke\nif person_data[\"total_results\"] > 0:\n    person_id = person_data[\"results\"][0][\"id\"]\n\n    # Get the TV show credits for Catherine Hardwicke\n    tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n    response = requests.get(tv_credits_url, headers=headers)\n    tv_credits_data = response.json()\n\n    # Extract the most recent TV show directed by Catherine Hardwicke\n    if len(tv_credits_data[\"crew\"]) > 0:\n        for credit in tv_credits_data[\"crew\"]:\n            if credit[\"job\"] == \"Director\" and credit[\"department\"] == \"Directing\":\n                most_recent_show = credit\n                break\n\n        if most_recent_show:\n            print(f\"The most recent TV show directed by Catherine Hardwicke is: {most_recent_show['name']}\")\n        else:\n            print(\"Catherine Hardwicke has not directed any TV shows recently.\")\n    else:\n        print(\"No TV show credits found for Catherine Hardwicke.\")\nelse:\n    print(\"Catherine Hardwicke not found.\")\n```"
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\n# Provided HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Breaking Bad\" to get its id\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Breaking Bad\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nbreaking_bad_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get recommendations for the TV show with id = breaking_bad_id\nrecommendations_url = f\"https://api.themoviedb.org/3/tv/{breaking_bad_id}/recommendations\"\nrecommendations_params = {\n    \"page\": 1\n}\nrecommendations_response = requests.get(recommendations_url, headers=headers, params=recommendations_params)\nrecommendations = recommendations_response.json()[\"results\"]\n\n# Output the list of TV shows similar to Breaking Bad\nfor show in recommendations:\n    print(show[\"name\"])\n```"
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the trending movies for today\ntoday_trending_url = \"https://api.themoviedb.org/3/trending/all/day\"\ntoday_trending_response = requests.get(today_trending_url, headers=headers)\ntoday_trending_data = today_trending_response.json()\n\n# Get the movie_id of the most trending movie\nmost_trending_movie_id = today_trending_data['results'][0]['id']\n\n# Get the credits (cast and crew) for the most trending movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{most_trending_movie_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\n\n# Find the director from crew members\ndirector = \"\"\nfor member in credits_data['crew']:\n    if member['job'] == \"Director\":\n        director = member['name']\n        break\n\nprint(\"The director of today's most trending movie is:\", director)\n```"
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/tv"
        ],
        "results": "```python\nimport requests\n\n# HTTP header for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Twilight\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Twilight\",\n    \"page\": 1\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ntwilight_data = response.json()\n\n# Get the movie ID for \"Twilight\"\nmovie_id = twilight_data[\"results\"][0][\"id\"]\n\n# Get the credits for the movie with ID\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits_data = response.json()\n\n# Extract the director name from the crew list\ncrew = credits_data[\"crew\"]\ndirector = None\nfor member in crew:\n    if member[\"job\"] == \"Director\":\n        director = member[\"name\"]\n        break\n\nprint(\"Director of the movie 'Twilight' is:\", director)\n```"
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/1399/season/1/episode/2/images\"\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# If the request is successful\nif response.status_code == 200:\n    data = response.json()\n    # Access the image file path\n    image_path = data['stills'][0]['file_path']\n    print(\"Image path:\", image_path)\nelse:\n    print(\"Failed to fetch data\")  # Print an error message if the request is unsuccessful\n```"
    },
    {
        "query": "What is top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the query parameters\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the response data\n    data = response.json()\n    \n    # Get the top-rated movie from the results\n    top_rated_movie = data['results'][0]['title']\n    \n    print(f\"The top rated movie is: {top_rated_movie}\")\nelse:\n    print(\"Failed to get data.\")\n```"
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Matrix\"\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Matrix\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie_id of \"The Matrix\"\nmovie_id = data['results'][0]['id']\n\n# Get the release dates of the movie with movie_id\nmovie_release_date_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\nresponse = requests.get(movie_release_date_url, headers=headers)\nrelease_dates_data = response.json()\n\n# Extract the release date of the movie\nrelease_dates = release_dates_data['results']\nfor release_date_info in release_dates:\n    for release_info in release_date_info['release_dates']:\n        if release_info['type'] == 3:  # Theatrical release\n            print(f\"The release date of 'The Matrix' is: {release_info['release_date']}\")\n            break\n```"
    },
    {
        "query": "Who is the most popular person?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Get the most popular person from the list\n    most_popular_person = data['results'][0]['name']\n    print(f\"The most popular person is: {most_popular_person}\")\nelse:\n    print(\"Error in fetching data\")\n```"
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for a person\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n\n# Specify the query parameters to search for Christopher Nolan\nparams_search_person = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\n\n# Call the API to search for Christopher Nolan\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\ndata_search_person = response_search_person.json()\n\n# Get the person ID of Christopher Nolan\nperson_id = data_search_person['results'][0]['id']\n\n# Define the API url to get movie credits for a person\nurl_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n# Call the API to get movie credits for Christopher Nolan\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Extract cover images of movies directed by Christopher Nolan\ncover_images = []\nfor credit in data_movie_credits['crew']:\n    if credit['job'] == \"Director\" and credit['media_type'] == \"movie\":\n        cover_images.append(credit['poster_path'])\n\nprint(cover_images)\n```"
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the movie 'Titanic' to get the movie ID\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\"\n}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\ndata = response.json()\nmovie_id = data['results'][0]['id']\n\n# Step 2: Get the keywords associated with the movie using the movie ID\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\nresponse = requests.get(keywords_url, headers=headers)\nkeywords_data = response.json()\n\n# Extracting and printing the keywords\nkeywords = [keyword['name'] for keyword in keywords_data['keywords']]\nprint(keywords)\n```"
    },
    {
        "query": "Give me a show that is currently on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Parameters\nparams = {\n    \"page\": 1\n}\n\n# Call the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the show that is currently on the air\n    show = response.json()[\"results\"][0]\n    print(show)\nelse:\n    print(\"Error: Failed to retrieve the show on the air\")\n```"
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/latest"
        ],
        "results": "```python\nimport requests\n\n# API endpoint to search for Clint Eastwood\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Clint Eastwood\",\n    \"include_adult\": False,\n    \"page\": 1,\n    \"region\": \"US\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get Clint Eastwood's person id\nclint_eastwood_id = data['results'][0]['id']\n\n# API endpoint to get the movie credits for Clint Eastwood\ncredits_url = f\"https://api.themoviedb.org/3/person/{clint_eastwood_id}/movie_credits\"\nresponse = requests.get(credits_url, headers=headers)\ndata = response.json()\n\n# Get the latest movie's release date\nlatest_movie_release_date = data['cast'][0]['release_date']\nprint(\"Clint Eastwood's latest movie is scheduled to be released on:\", latest_movie_release_date)\n```  "
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the query parameter with the search keyword \"The Dark Knight\"\nparams = {\n    \"query\": \"The Dark Knight\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the GET request to search for movies\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting movie results from the response\nresults = response.json()[\"results\"]\n\n# Extracting movie id for \"The Dark Knight\"\nmovie_id = results[0][\"id\"]\n\n# Define the API url to get reviews for the movie\nreviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n\n# Make the GET request to get reviews for \"The Dark Knight\"\nreviews_response = requests.get(reviews_url, headers=headers)\n\n# Extracting reviews from the response\nreviews = reviews_response.json()[\"results\"]\n\n# Displaying the reviews\nfor review in reviews:\n    author = review[\"author\"]\n    content = review[\"content\"]\n    print(f\"Author: {author}\")\n    print(f\"Review: {content}\")\n    print()\n```"
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Get the person details by searching for Francis Ford Coppola\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Francis Ford Coppola\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_results = response.json()\n\n# Step 2: Get the movie credits for Francis Ford Coppola\nperson_id = person_results[\"results\"][0][\"id\"]\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovie_credits = response.json()\n\n# Step 3: Choose one of the movies directed by Francis Ford Coppola and get a list of similar movies\nmovie_id = movie_credits[\"cast\"][0][\"id\"]\nsimilar_movies_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(similar_movies_url, headers=headers, params=params)\nsimilar_movies = response.json()\n\n# Output: List of similar movies\nprint(similar_movies[\"results\"])\n```"
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for getting the latest movie\nurl_latest_movie = \"https://api.themoviedb.org/3/movie/latest\"\n\n# Define the headers containing the API authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the HTTP GET request to get the latest movie details\nresponse_latest_movie = requests.get(url_latest_movie, headers=headers)\n\n# Extracting the lead actor from the response\nif response_latest_movie.status_code == 200:\n    latest_movie_data = response_latest_movie.json()\n    cast = latest_movie_data.get('cast', [])\n    if cast:\n        lead_actor = cast[0]['name']\n        print(f\"The lead actor in the latest released movie is: {lead_actor}\")\n    else:\n        print(\"Lead actor information not found.\")\nelse:\n    print(\"Failed to retrieve data for the latest movie.\")\n```"
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get a list of movies in theaters\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the poster_path of the first movie\nif 'results' in data and len(data['results']) > 0:\n    first_movie_poster_path = data['results'][0]['poster_path']\n    image_url = f\"https://image.tmdb.org/t/p/original{first_movie_poster_path}\"\n    print(image_url)\nelse:\n    print(\"No movie data found.\")\n```"
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Set the API url and parameters for getting the list of movies in theatres\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\nparams = {\n    \"page\": 1,  # Specify the first page\n}\n\n# Set the HTTP header with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request to get the list of movies in theatres\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the most popular movie id\nmost_popular_movie_id = data[\"results\"][0][\"id\"]\n\n# Make a new API request to get the keywords of the most popular movie\nurl_keywords = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\nresponse_keywords = requests.get(url_keywords, headers=headers)\ndata_keywords = response_keywords.json()\n\n# Extract the keywords of the most popular movie\nkeywords = [keyword[\"name\"] for keyword in data_keywords[\"keywords\"]]\n\n# Print the most popular movie and its keywords\nprint(\"The most popular movie right now is:\", data[\"results\"][0][\"title\"])\nprint(\"Keywords of the most popular movie:\", keywords)\n```"
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url for getting popular movies\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Checking if the request was successful\nif response.status_code == 200:\n    # Getting the movie list result from the response\n    movie_list = response.json()[\"results\"]\n    if len(movie_list) > 0:\n        # Getting the movie ID of the most popular movie\n        most_popular_movie_id = movie_list[0][\"id\"]\n\n        # API url for getting keywords of a movie\n        keywords_url = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\n\n        # Sending GET request to get the keywords of the most popular movie\n        keywords_response = requests.get(keywords_url, headers=headers)\n\n        # Checking if the request was successful\n        if keywords_response.status_code == 200:\n            # Extracting the keywords of the most popular movie\n            keywords = keywords_response.json()[\"keywords\"]\n            print(keywords)\n        else:\n            print(\"Failed to get keywords for the most popular movie\")\n    else:\n        print(\"No movies found in the popular movies list\")\nelse:\n    print(\"Failed to get popular movies list\")\n```"
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching movie\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for searching the movie Titanic\nparams_search_movie = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Make a GET request to search for the movie Titanic\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Extract the movie_id of Titanic from the search results\nif \"results\" in data_search_movie:\n    results = data_search_movie[\"results\"]\n    if results:\n        movie_id = results[0][\"id\"]\n\n        # Define the API endpoint to get the cast of a movie by movie_id\n        url_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n        \n        # Make a GET request to get the cast of the movie Titanic\n        response_movie_credits = requests.get(url_movie_credits, headers=headers)\n        data_movie_credits = response_movie_credits.json()\n\n        # Extract the cast members of the movie Titanic\n        cast_members = []\n        if \"cast\" in data_movie_credits:\n            cast = data_movie_credits[\"cast\"]\n            for member in cast:\n                cast_members.append(member[\"name\"])\n\n        # Print the cast members of the movie Titanic\n        print(\"Cast of Titanic:\")\n        for member in cast_members:\n            print(member)\n    else:\n        print(\"No results found for the movie Titanic\")\nelse:\n    print(\"No results found for the movie Titanic\")\n```"
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ],
        "results": "```python\nimport requests\n\n# API url for getting the details of a company by id\nurl = \"https://api.themoviedb.org/3/company/4\"\n# We are using company id 4 for Paramount Pictures\nparams = {}\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the logo path for Paramount Pictures\nlogo_path = data.get('logo_path')\n\nif logo_path:\n    print(f\"Logo path for Paramount Pictures: https://image.tmdb.org/t/p/original{logo_path}\")\nelse:\n    print(\"Logo not found for Paramount Pictures.\")\n```"
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the \"Universal Pictures\" company\nsearch_url = \"https://api.themoviedb.org/3/search/company\"\nsearch_params = {\n    \"query\": \"Universal Pictures\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\ncompany_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get company details to find where it was founded\ncompany_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\ncompany_response = requests.get(company_url, headers=headers)\n\n# Extracting the headquarters information\nheadquarters = company_response.json()[\"headquarters\"]\nprint(f\"The company 'Universal Pictures' was founded in: {headquarters}\")\n```"
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching movies\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the query parameter to search for the movie \"Titanic\"\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to search for the movie \"Titanic\"\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the release date of the first result (assuming it's the movie Titanic)\n    movie_results = response.json()[\"results\"]\n    if len(movie_results) > 0:\n        release_date = movie_results[0][\"release_date\"]\n        print(f\"The movie 'Titanic' was released on: {release_date}\")\n    else:\n        print(\"No results found for the movie 'Titanic'\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```"
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for Star Wars collection\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n# Define the API url to get details of a movie by id\nurl_movie_details = \"https://api.themoviedb.org/3/movie/11\"\n\n# Set the query parameter to search for the Star Wars collection\nparams_search = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\n\n# Set the headers with the Bearer token for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to search for Star Wars collection\nresponse_search = requests.get(url_search_collection, headers=headers, params=params_search)\ndata_search = response_search.json()\n\n# Get the id of the Star Wars collection\nstar_wars_collection_id = data_search['results'][0]['id']\n\n# Make a GET request to get details of the first Star Wars movie in the collection\nurl_movie_details_first = url_movie_details.format(movie_id=star_wars_collection_id)\nresponse_movie_details = requests.get(url_movie_details_first, headers=headers)\ndata_movie_details = response_movie_details.json()\n\n# Extract the cast of the first Star Wars movie\nstar_wars_cast = []\nfor cast_member in data_movie_details['credits']['cast']:\n    star_wars_cast.append(cast_member['name'])\n\nprint(star_wars_cast)\n```"
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection with the term \"Harry Potter\"\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\n    \"query\": \"Harry Potter\"\n}\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ndata_search_collection = response_search_collection.json()\n\n# Get the collection ID of Harry Potter\ncollection_id = data_search_collection['results'][0]['id']\n\n# Get the details of the Harry Potter collection\nurl_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse_collection_details = requests.get(url_collection_details, headers=headers)\ndata_collection_details = response_collection_details.json()\n\n# Extract the poster path of the first movie in the collection\nposter_path = data_collection_details['parts'][0]['poster_path']\n\nprint(poster_path)\n```"
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections with query 'The Hunger Games'\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"The Hunger Games\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the collection id of 'The Hunger Games'\ncollection_id = search_results['results'][0]['id']\n\n# Get the keywords for a movie of the collection 'The Hunger Games'\nmovie_id = collection_id  # Using the collection id as the movie id\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\nkeywords_response = requests.get(keywords_url, headers=headers)\nkeywords_results = keywords_response.json()\n\n# Extract and print the keywords\nkeywords = [keyword['name'] for keyword in keywords_results['keywords']]\nprint(keywords)\n```"
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching collections\nurl_search_collections = \"https://api.themoviedb.org/3/search/collection\"\n# Define the API url for getting collection details\nurl_collection_details = \"https://api.themoviedb.org/3/collection/{collection_id}\"\n# Define the API url for getting keywords of a movie\nurl_movie_keywords = \"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n# Define the API url for getting movies in theatres\nurl_now_playing_movies = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Set the headers for authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection \"The Hobbit\"\nparams = {\"query\": \"The Hobbit\"}\nresponse = requests.get(url_search_collections, headers=headers, params=params)\ncollection_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the details of the collection \"The Hobbit\"\nurl_collection_details = url_collection_details.format(collection_id=collection_id)\nresponse = requests.get(url_collection_details, headers=headers)\nparts = response.json()[\"parts\"]\n\n# Loop through each movie in the collection to get the release date\nfor part in parts:\n    movie_id = part[\"id\"]\n    url_movie_keywords = url_movie_keywords.format(movie_id=movie_id)\n    response = requests.get(url_movie_keywords, headers=headers)\n    movie_keywords = response.json()[\"keywords\"]\n    \n    # Check if \"release date\" is a keyword\n    release_date_keyword = next((keyword for keyword in movie_keywords if keyword[\"name\"].lower() == \"release date\"), None)\n    \n    # If release date is found, get the movie details to include actual release date\n    if release_date_keyword:\n        url_now_playing_movies = url_now_playing_movies.format(movie_id=movie_id)\n        response = requests.get(url_now_playing_movies, headers=headers)\n        movie_details = response.json()[\"results\"][0]\n        print(f\"The release date for the movie '{part['original_title']}' is: {movie_details['release_date']}\")\n```\nThis code will search for the collection \"The Hobbit\", retrieve the details of each movie in the collection, check if \"release date\" is a keyword for each movie, and get the actual release date of the movie from the list of movies currently in theatres. The release dates for the movies of the collection \"The Hobbit\" will be printed as the output."
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the parameters\nparams = {\n    \"query\": \"The Fast and the Furious\",\n    \"page\": 1\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Extract the list of movies from the collection\n    movies = []\n    for result in data[\"results\"]:\n        movies.append(result[\"name\"])\n    \n    # Print the list of movies\n    print(movies)\nelse:\n    print(\"Failed to retrieve data\")\n```"
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# API url to search for collections\nurl_search_collections = \"https://api.themoviedb.org/3/search/collection\"\n\n# Parameters for searching the collection \"The Fast and the Furious\"\nparams_search_collections = {\n    \"query\": \"The Fast and the Furious\"\n}\n\n# Making the API request to search for collections\nresponse_search_collections = requests.get(url_search_collections, headers=headers, params=params_search_collections)\n\n# Extracting the collection id for \"The Fast and the Furious\"\ncollection_id = response_search_collections.json()[\"results\"][0][\"id\"]\n\n# API url to get reviews of a movie from the collection\nurl_movie_reviews = f\"https://api.themoviedb.org/3/movie/{collection_id}/reviews\"\n\n# Parameters for getting the reviews of a movie from the collection\nparams_movie_reviews = {\n    \"page\": 1\n}\n\n# Making the API request to get the reviews of a movie from the collection\nresponse_movie_reviews = requests.get(url_movie_reviews, headers=headers, params=params_movie_reviews)\n\n# Displaying the reviews of a movie from the collection\nprint(response_movie_reviews.json()[\"results\"])\n```"
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for the collection\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the search query for the collection (in this case \"Lord of the Rings\")\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1\n}\n\n# Call the API to search for the collection\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params)\ndata_search_collection = response_search_collection.json()\n\n# Extract the collection id from the search results\ncollection_id = data_search_collection['results'][0]['id']\n\n# Define the API endpoint to get the details of the collection by id\nurl_get_collection = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n# Call the API to get the details of the collection\nresponse_get_collection = requests.get(url_get_collection, headers=headers)\ndata_get_collection = response_get_collection.json()\n\n# Extract the details of the first part of the collection (movie)\nfirst_movie_details = data_get_collection['parts'][0]\n\n# Get the release date of the first movie in the collection\nrelease_date = first_movie_details['release_date']\nprint(release_date)\n```"
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details for 'House of Cards'\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_search_params = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\n\n# Make the API request to search for 'House of Cards' TV show\ntv_search_response = requests.get(tv_search_url, headers=headers, params=tv_search_params)\ntv_search_results = tv_search_response.json()\n\nif tv_search_results['total_results'] > 0:\n    # Get the TV show id for 'House of Cards'\n    tv_id = tv_search_results['results'][0]['id']\n    \n    # Define the API url to get the credits for the first season of 'House of Cards'\n    season_credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1/credits\"\n    \n    # Make the API request to get credits for the first season of 'House of Cards'\n    season_credits_response = requests.get(season_credits_url, headers=headers)\n    season_credits_results = season_credits_response.json()\n    \n    # Extract directors from the crew of the first season\n    directors = [crew['name'] for crew in season_credits_results['crew'] if crew['job'] == 'Director']\n    \n    print(\"Directors of the first season of House of Cards:\")\n    print(directors)\nelse:\n    print(\"No results found for 'House of Cards'\")\n```  "
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the query parameters\nparams = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False,\n    \"first_air_date_year\": 2013\n}\n\n# Set the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    tv_shows = response.json()\n    \n    # Display the results\n    for show in tv_shows[\"results\"]:\n        print(show[\"name\"])\nelse:\n    print(\"Error fetching data\")\n\n```"
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and necessary headers\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Parse the response and get the start date of the most popular TV show\nif response.status_code == 200:\n    tv_shows = response.json()\n    # Sort the TV shows by popularity\n    tv_shows_sorted = sorted(tv_shows[\"results\"], key=lambda x: x[\"popularity\"], reverse=True)\n    # Get the start date of the most popular TV show\n    most_popular_show_start_date = tv_shows_sorted[0][\"first_air_date\"]\n    print(\"The most popular TV show currently on the air started on:\", most_popular_show_start_date)\nelse:\n    print(\"Error:\", response.status_code)\n```"
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie 'Django Unchained'\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Django Unchained\",\n}\nresponse = requests.get(search_movie_url, headers=headers, params=search_params)\nresults = response.json()[\"results\"]\n\nif len(results) > 0:\n    # Get the director id(s) of 'Django Unchained'\n    movie_id = results[0][\"id\"]\n    movie_credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response = requests.get(movie_credits_url, headers=headers)\n    movie_credits = response.json()\n\n    director_ids = [crew[\"id\"] for crew in movie_credits[\"crew\"] if crew[\"job\"] == \"Director\"]\n\n    if len(director_ids) > 0:\n        # Get the works of the director(s)\n        director_id = director_ids[0]  # Assuming the first director for simplicity\n        person_works_url = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\n        response = requests.get(person_works_url, headers=headers)\n        person_works = response.json()\n\n        # Printing a few more works directed by the director of Django Unchained\n        print(\"A few more works directed by the director of Django Unchained:\")\n        for work in person_works['crew']:\n            print(work[\"title\"])\n    else:\n        print(\"No director information found for Django Unchained.\")\nelse:\n    print(\"No results found for Django Unchained.\")\n```"
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\ntv_shows = response.json()['results']\n\n# Select the first TV show and get the cast\nif tv_shows:\n    first_tv_show_id = tv_shows[0]['id']\n    credits_url = f\"https://api.themoviedb.org/3/tv/{first_tv_show_id}/credits\"\n    response = requests.get(credits_url, headers=headers)\n    cast = response.json()['cast']\n    print(cast)\nelse:\n    print(\"No TV show currently on the air\")\n```"
    },
    {
        "query": "I need a review for Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Http header with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show Breaking Bad\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Breaking Bad\",\n    \"include_adult\": False\n}\n\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the TV show id for Breaking Bad\ntv_id = search_results[\"results\"][0][\"id\"]\n\n# Get the reviews for the TV show Breaking Bad\nreview_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\nreview_params = {\"page\": 1}\n\nreview_response = requests.get(review_url, headers=headers, params=review_params)\nreview_results = review_response.json()\n\n# Print the review for Breaking Bad\nif review_results[\"total_results\"] > 0:\n    print(\"Review for Breaking Bad:\")\n    print(review_results[\"results\"][0][\"content\"])\nelse:\n    print(\"No reviews found for Breaking Bad.\")\n```"
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# The API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n# The API url for TV show recommendations\nurl_tv_recommendations = \"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\n\n# Parameters for searching TV shows\nparams_search_tv = {\n    \"query\": \"The Last Of Us\",\n    \"include_adult\": \"false\"\n}\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Calling the API to search for TV shows\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\nif response_search_tv.status_code == 200:\n    tv_show_results = response_search_tv.json().get(\"results\", [])\n    if len(tv_show_results) > 0:\n        tv_id = tv_show_results[0].get(\"id\")\n        \n        # Parameters for TV show recommendations\n        params_tv_recommendations = {\n            \"page\": 1\n        }\n        \n        # Calling the API to get TV show recommendations\n        url_tv_recommendations = url_tv_recommendations.format(tv_id=tv_id)\n        response_tv_recommendations = requests.get(url_tv_recommendations, headers=headers, params=params_tv_recommendations)\n        \n        if response_tv_recommendations.status_code == 200:\n            recommendations = response_tv_recommendations.json().get(\"results\", [])\n            print(recommendations)\n        else:\n            print(\"Error occurred while fetching recommendations for this TV show\")\n    else:\n        print(\"No TV show found with the given query\")\nelse:\n    print(\"Error occurred while searching for TV shows\")\n```"
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and parameters for searching for a TV show\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"The Last Of Us\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Make a GET request to search for the TV show\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Extract the TV show ID and name\ntv_id = data_search_tv['results'][0]['id']\ntv_name = data_search_tv['results'][0]['name']\n\n# Define the API url and parameters for getting TV show recommendations\nurl_recommendations = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\nparams_recommendations = {\n    \"page\": 1\n}\n\n# Make a GET request to get TV show recommendations\nresponse_recommendations = requests.get(url_recommendations, headers=headers, params=params_recommendations)\ndata_recommendations = response_recommendations.json()\n\n# Extract the recommended TV shows\nrecommended_shows = [{\"name\": show[\"name\"], \"overview\": show[\"overview\"]} for show in data_recommendations[\"results\"]]\n\nprint(f\"Recommendations for TV show '{tv_name}':\")\nfor show in recommended_shows:\n    print(f\"Name: {show['name']}\")\n    print(f\"Overview: {show['overview']}\")\n    print(\"------------------------\")\n\n```"
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the TV show ID for Friends\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Friends\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_show_id = response_search_tv.json()[\"results\"][0][\"id\"]\n\n# Get the guest stars for season 3 episode 24 of Friends\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/3/episode/24/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\n\n# Extract the guest stars\nguest_stars = response_credits.json()[\"guest_stars\"]\nfor guest_star in guest_stars:\n    print(guest_star[\"name\"])\n```"
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "results": "```python\nimport requests\n\n# Set the API url to get a list of the current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the parameters for the API call\nparams = {\n    \"page\": 1\n}\n\n# Make the API call to get a list of popular TV shows\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results from the response\n    results = response.json()[\"results\"]\n    \n    # Get the lead actor from the first TV show in the list\n    lead_actor = results[0][\"credits\"][\"cast\"][0][\"name\"]\n    \n    print(\"The lead actor in the most popular TV show is:\", lead_actor)\nelse:\n    print(\"Error: Unable to fetch data from API\")\n```"
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of top rated TV shows\nurl = \"https://api.themoviedb.org/3/tv/top_rated\"\nparams = {\"page\": 1}  # Get the first page of results\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the TV show ID of the top-1 rated TV show\ntop_rated_tv_show_id = data['results'][0]['id']\n\n# Call the API to get the keywords of the top rated TV show\nurl = f\"https://api.themoviedb.org/3/tv/{top_rated_tv_show_id}/keywords\"\nresponse = requests.get(url, headers=headers)\nkeywords_data = response.json()\n\n# Extract the keyword of the top-1 rated TV show\ntop_rated_tv_show_keyword = keywords_data['results'][0]['name']\nprint(top_rated_tv_show_keyword)\n```"
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the TV show \"2 Broke Girls\"\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\"\n}\nresponse = requests.get(search_tv_url, headers=headers, params=params)\ndata = response.json()\n# Extracting the TV show ID for \"2 Broke Girls\"\ntv_id = data[\"results\"][0][\"id\"]\n\n# Step 2: Get the poster of the TV show \"2 Broke Girls\"\ntv_images_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/images\"\nresponse = requests.get(tv_images_url, headers=headers)\ndata = response.json()\n# Taking the first poster image path\nposter_path = data[\"posters\"][0][\"file_path\"]\nprint(poster_path)\n```"
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show '2 Broke Girls'\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\"query\": \"2 Broke Girls\"}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params).json()\n\n# Get the TV show details by id\nif response_search_tv and response_search_tv[\"total_results\"] > 0:\n    tv_id = response_search_tv[\"results\"][0][\"id\"]\n    url_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    response_tv_details = requests.get(url_tv_details, headers=headers).json()\n\n    # Count the total number of episodes\n    total_episodes = 0\n    if response_tv_details:\n        total_episodes = sum([season[\"episode_count\"] for season in response_tv_details[\"seasons\"]])\n\n    print(f\"The total number of episodes of '2 Broke Girls' is: {total_episodes}\")\nelse:\n    print(\"TV show '2 Broke Girls' not found.\")\n```"
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show - The Big Bang Theory\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Big Bang Theory\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\nif search_results[\"total_results\"] > 0:\n    the_big_bang_theory_id = search_results[\"results\"][0][\"id\"]\n    \n    # Get the primary TV show details by id\n    tv_details_url = f\"https://api.themoviedb.org/3/tv/{the_big_bang_theory_id}\"\n    tv_details_response = requests.get(tv_details_url, headers=headers)\n    tv_details = tv_details_response.json()\n    \n    # Get the primary production company id\n    company_id = tv_details[\"production_companies\"][0][\"id\"]\n    \n    # Get the details of the production company\n    company_details_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    company_details_response = requests.get(company_details_url, headers=headers)\n    company_details = company_details_response.json()\n    \n    # Print the founding year of the production company\n    print(f\"The production company that produced The Big Bang Theory was founded in: {company_details['description']}\")\nelse:\n    print(\"The Big Bang Theory TV show not found.\")\n```"
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "results": "import requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"The Big Bang Theory\"\nparams = {\n    \"query\": \"The Big Bang Theory\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params)\n\nif response.status_code == 200:\n    results = response.json()[\"results\"]\n    if len(results) > 0:\n        # Get the first result of \"The Big Bang Theory\"\n        tv_show_id = results[0][\"id\"]\n        \n        # Get the primary details of \"The Big Bang Theory\" by its id\n        response_tv_details = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_show_id}\", headers=headers)\n        if response_tv_details.status_code == 200:\n            tv_details = response_tv_details.json()\n            creation_date = tv_details[\"first_air_date\"]\n            print(f\"The TV show 'The Big Bang Theory' was created on: {creation_date}\")\n        else:\n            print(\"Error fetching TV show details\")\n    else:\n        print(\"No results found for 'The Big Bang Theory'\")\nelse:\n    print(\"Error searching for 'The Big Bang Theory' TV show\")"
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "results": "```python\nimport requests\n\n# API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n# Parameters\nparams = {\n    \"page\": 1\n}\n# Call the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the first TV show id from the response\n    tv_id = response.json()[\"results\"][0][\"id\"]\n    \n    # API url to get keywords for the TV show\n    keywords_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    \n    # Call the keywords API\n    keywords_response = requests.get(keywords_url, headers=headers)\n    \n    # Check if the keywords response is successful\n    if keywords_response.status_code == 200:\n        # Get the first keyword from the response\n        keyword = keywords_response.json()[\"results\"][0][\"name\"]\n        print(keyword)\n    else:\n        print(\"Error fetching keywords:\", keywords_response.json())\nelse:\n    print(\"Error fetching TV shows:\", response.json())\n```"
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show id for Westworld\nurl_tv_search = \"https://api.themoviedb.org/3/search/tv\"\nparams_tv_search = {\n    \"query\": \"Westworld\",\n    \"page\": 1\n}\n\n# Call the API to search for the TV show Westworld\nresponse_tv_search = requests.get(url_tv_search, headers=headers, params=params_tv_search)\ndata_tv_search = response_tv_search.json()\n\n# Get the tv_id of Westworld\ntv_id_westworld = data_tv_search['results'][0]['id']\n\n# Define the API url to get the details of the third episode of the second season of Westworld\nurl_episode_details = f\"https://api.themoviedb.org/3/tv/{tv_id_westworld}/season/2/episode/3\"\n\n# Call the API to get the details of the third episode of the second season of Westworld\nresponse_episode_details = requests.get(url_episode_details, headers=headers)\ndata_episode_details = response_episode_details.json()\n\n# Print the overview of the third episode of the second season of Westworld\nprint(data_episode_details['overview'])\n```"
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API details\nurl = \"https://api.themoviedb.org/3/tv/82/season/2\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    if 'air_date' in data:\n        air_date = data['air_date']\n        print(f\"The air date of the second season of Game of Thrones is: {air_date}\")\n    else:\n        print(\"Air date information not found for the second season of Game of Thrones.\")\nelse:\n    print(\"Failed to get data from the API. Status code:\", response.status_code)\n```"
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/858/season/1/episode/3/images\"\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the image file path of the third episode\n    data = response.json()\n    image_path = data[\"stills\"][2][\"file_path\"]  # Index 2 corresponds to the third episode\n    print(\"Image path of the third episode of Band of Brothers:\", image_path)\nelse:\n    print(\"Failed to fetch data\")\n```"
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the parameters for the query to search for Game of Thrones\nparams = {\n    \"query\": \"Game of Thrones\",\n    \"include_adult\": False\n}\n\n# Set the http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the response to get the network_id of Game of Thrones\nnetwork_id = response.json()[\"results\"][0][\"networks\"][0][\"id\"]\n\n# Define the API url for getting the images of the network\nurl = f\"https://api.themoviedb.org/3/network/{network_id}/images\"\n\n# Make the API call to get the images of the network\nresponse = requests.get(url, headers=headers)\n\n# Get the logo of the network\nlogo_image_path = response.json()[\"logos\"][0][\"file_path\"]\n\n# Print the logo image path\nprint(logo_image_path)\n```"
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Game of Thrones\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Game of Thrones\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Check if there are any results for the search\nif data_search_tv[\"total_results\"] > 0:\n    tv_id = data_search_tv[\"results\"][0][\"id\"]\n\n    # Get the primary details of the TV show\n    url_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    response_tv_details = requests.get(url_tv_details, headers=headers)\n    data_tv_details = response_tv_details.json()\n\n    # Get the network id that produced Game of Thrones\n    network_id = data_tv_details[\"networks\"][0][\"id\"]\n\n    # Get the details of the network by id to find the homepage\n    url_network = f\"https://api.themoviedb.org/3/network/{network_id}\"\n    response_network = requests.get(url_network, headers=headers)\n    data_network = response_network.json()\n\n    # Extract and print the homepage of the network that produced Game of Thrones\n    homepage = data_network[\"homepage\"]\n    print(\"Homepage of the network that produced Game of Thrones:\", homepage)\n\nelse:\n    print(\"No results found for the TV show 'Game of Thrones'.\")\n```"
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}\nresponse_popular_tv = requests.get(url_popular_tv, headers=headers, params=params)\ndata_popular_tv = response_popular_tv.json()\n\n# Get the TV show ID of the most popular TV show\nmost_popular_tv_id = data_popular_tv['results'][0]['id']\n\n# Call the API to get the keywords of the most popular TV show\nurl_keywords = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_id}/keywords\"\nresponse_keywords = requests.get(url_keywords, headers=headers)\ndata_keywords = response_keywords.json()\n\n# Extract the keyword\nkeyword = data_keywords['results'][0]['name']\n\nprint(keyword)\n```"
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of current popular TV shows\nurl_tv_popular = \"https://api.themoviedb.org/3/tv/popular\"\nparams_tv_popular = {\"page\": 1}\nresponse_tv_popular = requests.get(url_tv_popular, headers=headers, params=params_tv_popular)\ndata_tv_popular = response_tv_popular.json()\n# Extract the id of the company that produced the currently most popular TV show\ncompany_id = data_tv_popular['results'][0]['production_companies'][0]['id']\n\n# Get the details of the company by id\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse_company = requests.get(url_company, headers=headers)\ndata_company = response_company.json()\n\n# Print the headquarters of the company\nheadquarters = data_company['headquarters']\nprint(\"Headquarters of the company that produced the currently most popular TV show:\", headquarters)\n```"
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the parameters for the search query\nparams = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\n\n# Set the headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the request to search for TV show 'The Mandalorian'\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the genre ids for the first result\n    results = response.json()[\"results\"]\n    if len(results) > 0:\n        the_mandalorian_id = results[0][\"id\"]\n        \n        # Get the details of the TV show by id to find the genre\n        tv_details_url = f\"https://api.themoviedb.org/3/tv/{the_mandalorian_id}\"\n        tv_details_response = requests.get(tv_details_url, headers=headers)\n        \n        if tv_details_response.status_code == 200:\n            genre_ids = tv_details_response.json()[\"genres\"]\n            genre_names = [genre[\"name\"] for genre in genre_ids]\n            print(\"The genre of The Mandalorian is: \", genre_names)\n        else:\n            print(\"Failed to fetch details of The Mandalorian\")\n\n    else:\n        print(\"The Mandalorian TV show not found\")\nelse:\n    print(\"Failed to search for The Mandalorian TV show\")\n```"
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the most trending TV show that is airing today\nurl_trending_tv = \"https://api.themoviedb.org/3/tv/airing_today\"\nparams_trending_tv = {\n    \"page\": 1\n}\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers, params=params_trending_tv)\ntrending_tv_data = response_trending_tv.json()\n\nif response_trending_tv.status_code == 200:\n    # Get the TV show ID of the most trending TV show airing today\n    trending_tv_id = trending_tv_data['results'][0]['id']\n    \n    # Get the lead actor's birthday from the TV show's credits\n    url_tv_credits = f\"https://api.themoviedb.org/3/tv/{trending_tv_id}/credits\"\n    response_tv_credits = requests.get(url_tv_credits, headers=headers)\n    tv_credits_data = response_tv_credits.json()\n    \n    if response_tv_credits.status_code == 200:\n        # Find the lead actor in the cast\n        lead_actor = next((actor for actor in tv_credits_data['cast'] if actor['order'] == 0), None)\n        \n        if lead_actor:\n            lead_actor_id = lead_actor['id']\n            # Get the birthday of the lead actor\n            url_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n            response_person = requests.get(url_person, headers=headers)\n            person_data = response_person.json()\n            \n            if response_person.status_code == 200:\n                lead_actor_birthday = person_data['birthday']\n                print(f\"The birthday of the lead actor of today's most trending TV show is: {lead_actor_birthday}\")\n            else:\n                print(\"Failed to retrieve lead actor's birthday information\")\n        else:\n            print(\"Lead actor not found in the credits\")\n    else:\n        print(\"Failed to retrieve TV show credits\")\nelse:\n    print(\"Failed to retrieve trending TV show data\")\n```"
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the daily trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the network id of the production company of the most trending TV show\nnetwork_id = data['results'][0]['networks'][0]['id']\n\n# Get the homepage of the network\nnetwork_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\nresponse = requests.get(network_url, headers=headers)\nnetwork_data = response.json()\n\n# Extract and print the homepage of the network\nhomepage = network_data['homepage']\nprint(homepage)\n```"
    },
    {
        "query": "give me a review of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# API url to get today's trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# API url to get reviews for a TV show\nurl_reviews = \"https://api.themoviedb.org/3/tv/{}/reviews\"\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get today's trending TV shows\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\nif response_trending_tv.status_code == 200:\n    trending_tv_data = response_trending_tv.json()\n    if 'results' in trending_tv_data and len(trending_tv_data['results']) > 0:\n        # Get the TV show ID of the most trending TV show\n        trending_tv_id = trending_tv_data['results'][0]['id']\n\n        # Get reviews for the most trending TV show\n        response_reviews = requests.get(url_reviews.format(trending_tv_id), headers=headers)\n        if response_reviews.status_code == 200:\n            reviews_data = response_reviews.json()\n            if 'results' in reviews_data and len(reviews_data['results']) > 0:\n                # Output the review of the most trending TV show\n                print(\"Review of today's most trending TV show:\")\n                print(reviews_data['results'][0]['content'])\n            else:\n                print(\"No reviews found for the most trending TV show\")\n        else:\n            print(\"Failed to get reviews for the most trending TV show\")\n    else:\n        print(\"No trending TV shows found\")\nelse:\n    print(\"Failed to get today's trending TV shows\")\n```"
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/latest"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get today's trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get today's trending TV shows\nresponse = requests.get(url_trending_tv, headers=headers)\nif response.status_code == 200:\n    # Extract the TV show ID of the most trending TV show\n    trending_tv_show_id = response.json()['results'][0]['id']\n    \n    # Define the API url to get similar TV shows\n    url_similar_tv = f\"https://api.themoviedb.org/3/tv/{trending_tv_show_id}/similar\"\n    \n    # Call the API to get similar TV shows\n    response_similar = requests.get(url_similar_tv, headers=headers)\n    if response_similar.status_code == 200:\n        # Extract and print the list of similar TV shows\n        similar_tv_shows = response_similar.json()['results']\n        for show in similar_tv_shows:\n            print(f\"TV Show Name: {show['name']}\")\n    else:\n        print(\"Failed to get similar TV shows.\")\nelse:\n    print(\"Failed to get today's trending TV shows.\")\n```"
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the trending API to get today's trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the poster path of the most trending TV show\nposter_path = data['results'][0]['poster_path']\n\nprint(poster_path)\n```"
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "results": "```python\nimport requests\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Search for Jeremy Clarkson's id\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Jeremy Clarkson\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\nresponse_data = response.json()\njeremy_id = response_data['results'][0]['id']\n\n# 2. Get Jeremy Clarkson's TV show credits\nurl = f\"https://api.themoviedb.org/3/person/{jeremy_id}/tv_credits\"\nresponse = requests.get(url, headers=headers)\nresponse_data = response.json()\ntv_credits = response_data['cast']\n\n# Find the most popular TV show where Jeremy Clarkson has worked\nmost_popular_show_id = None\nmax_popularity = -1\nfor show in tv_credits:\n    if show['popularity'] > max_popularity:\n        most_popular_show_id = show['id']\n        max_popularity = show['popularity']\n\n# 3. Get the cast of the most popular TV show\nurl = f\"https://api.themoviedb.org/3/tv/{most_popular_show_id}/credits\"\nresponse = requests.get(url, headers=headers)\nresponse_data = response.json()\ncast = response_data['cast']\n\n# Find people who have worked in the most popular show with Jeremy Clarkson\npeople_worked_with_clarkson = []\nfor person in cast:\n    if person['name'] != 'Jeremy Clarkson':  # Exclude Jeremy Clarkson himself\n        people_worked_with_clarkson.append(person['name'])\n\n# Print the list of people who have worked with Jeremy Clarkson in his most popular TV show\nprint(people_worked_with_clarkson)\n```"
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Assign the API key to a variable\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Assign the base url for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the headers for the HTTP request\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show \"Black Mirror\" to get the TV show id\nsearch_tv_url = f\"{base_url}/search/tv\"\nsearch_tv_params = {\n    \"query\": \"Black Mirror\"\n}\nresponse = requests.get(search_tv_url, headers=headers, params=search_tv_params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the second season of Black Mirror\nseason_number = 2\ncredits_url = f\"{base_url}/tv/{tv_show_id}/season/{season_number}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncast = response.json()[\"cast\"]\n\n# Get the profile image of the lead actor in the first episode\nlead_actor = cast[0][\"name\"]\nprofile_path = cast[0][\"profile_path\"]\n\nprint(f\"The lead actor of the first episode of season {season_number} of Black Mirror is {lead_actor}.\")\nprint(f\"Profile image: https://image.tmdb.org/t/p/w500{profile_path}\")\n```"
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the necessary parameters\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_credits_url = \"https://api.themoviedb.org/3/person/{}/\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nquery = \"The Mandalorian\"\n\n# Call the search TV API to find the TV show\nparams = {\"query\": query}\nresponse = requests.get(tv_search_url, headers=headers, params=params).json()\n\n# Extract the lead actor's ID from the search results\nlead_actor_id = response[\"results\"][0][\"id\"]\n\n# Call the person details API with the lead actor's ID\nresponse = requests.get(tv_credits_url.format(lead_actor_id), headers=headers).json()\nlead_actor_birthdate = response[\"birthday\"]\n\nprint(\"The lead actor of The Mandalorian was born on:\", lead_actor_birthdate)\n```"
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get a list of the current popular TV shows\npopular_url = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}\nresponse = requests.get(popular_url, headers=headers, params=params)\npopular_tv_shows = response.json()[\"results\"]\n\n# Get the credits for the most popular TV show\nmost_popular_tv_show_id = popular_tv_shows[0][\"id\"]\ncredits_url = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_show_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits = response.json()\n\n# Get the lead actor of the most popular TV show\nlead_actor = credits[\"cast\"][0][\"name\"]\nprint(f\"The lead actor of today's most popular TV show is: {lead_actor}\")\n```"
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call to get the list of popular TV shows\nresponse = requests.get(url_popular_tv, headers=headers)\ndata = response.json()\n\n# Extract the TV show ID and name of the most popular TV show\nmost_popular_tv_id = data['results'][0]['id']\nmost_popular_tv_name = data['results'][0]['name']\n\n# Define the API url to get the credits of the most popular TV show including the lead actor\nurl_credits = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_id}/credits\"\n\n# Make the API call to get the credits of the most popular TV show\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Extract the profile path of the lead actor\nlead_actor_profile_path = data_credits['cast'][0]['profile_path']\n\n# Print the URL for the photo of the lead actor\nif lead_actor_profile_path is not None:\n    lead_actor_photo_url = f\"https://image.tmdb.org/t/p/original{lead_actor_profile_path}\"\n    print(lead_actor_photo_url)\nelse:\n    print(\"Lead actor's photo not found.\")\n```"
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for a person\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the parameters to search for Cate Blanchett\nparams_search_person = {\n    \"query\": \"Cate Blanchett\",\n    \"include_adult\": False\n}\n\n# Make a request to search for Cate Blanchett\nresponse_person = requests.get(url_search_person, headers=headers, params=params_search_person)\ndata_person = response_person.json()\n\n# Extract the person ID for Cate Blanchett\nif data_person[\"total_results\"] > 0:\n    person_id = data_person[\"results\"][0][\"id\"]\n\n    # Define the API url to get TV show credits for the person\n    url_tv_credits = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n\n    # Make a request to get TV show credits for Cate Blanchett\n    response_tv_credits = requests.get(url_tv_credits, headers=headers)\n    data_tv_credits = response_tv_credits.json()\n\n    # Extract the latest TV show ID for Cate Blanchett\n    if len(data_tv_credits[\"cast\"]) > 0:\n        latest_tv_show_id = data_tv_credits[\"cast\"][0][\"id\"]\n\n        # Define the API url to get reviews for the latest TV show\n        url_tv_reviews = f\"https://api.themoviedb.org/3/tv/{latest_tv_show_id}/reviews\"\n\n        # Make a request to get reviews for the latest TV show\n        response_tv_reviews = requests.get(url_tv_reviews, headers=headers)\n        data_tv_reviews = response_tv_reviews.json()\n\n        # Display the reviews of Cate Blanchett's latest TV show\n        print(data_tv_reviews[\"results\"])\n    else:\n        print(\"No TV show credits found for Cate Blanchett\")\nelse:\n    print(\"No results found for Cate Blanchett\")\n```"
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\nimport requests\n\n# Set the API endpoint\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Parameters for searching info about David Schwimmer\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"include_adult\": \"false\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person id of David Schwimmer\nperson_id = data[\"results\"][0][\"id\"]\n\n# Set the API endpoint to get TV show credits for David Schwimmer\nurl_tv_credits = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n\n# Make the API request to get TV show credits\nresponse_tv_credits = requests.get(url_tv_credits, headers=headers)\ntv_credits_data = response_tv_credits.json()\n\n# Find the most popular TV show\nmost_popular_tv_show = max(tv_credits_data[\"cast\"], key=lambda x: x[\"popularity\"])\n\n# Print out the most popular TV show\nprint(\"David Schwimmer's most popular TV show is:\", most_popular_tv_show[\"original_name\"])\n```"
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Black Mirror\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Black Mirror\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_id = response_search_tv.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the third episode of the second season of Black Mirror\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/episode/3/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\n\n# Extract the crew for that episode\ncrew = response_credits.json()[\"crew\"]\n\nfor person in crew:\n    if person[\"job\"] == \"Director\":\n        director_name = person[\"name\"]\n        break\n\nprint(director_name)\n```"
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Christopher Nolan\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nresults = response.json()\n\n# Get the known movies of Christopher Nolan\nknown_for_movies = []\nif \"results\" in results and len(results[\"results\"]) > 0:\n    known_for = results[\"results\"][0].get(\"known_for\", [])\n    for item in known_for:\n        known_for_movies.append(item.get(\"original_title\", \"\"))\n\nprint(known_for_movies)\n```"
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie 'Avatar'\navatar_response = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params={\"query\": \"Avatar\"})\navatar_data = avatar_response.json()\navatar_rating = avatar_data[\"results\"][0][\"vote_average\"]\n\n# Search for the movie 'Avatar: The Way of Water'\navatar_water_response = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params={\"query\": \"Avatar: The Way of Water\"})\navatar_water_data = avatar_water_response.json()\navatar_water_rating = avatar_water_data[\"results\"][0][\"vote_average\"]\n\n# Comparing the ratings\nif avatar_rating > avatar_water_rating:\n    print(\"Avatar has a higher rating than Avatar: The Way of Water\")\nelif avatar_rating < avatar_water_rating:\n    print(\"Avatar: The Way of Water has a higher rating than Avatar\")\nelse:\n    print(\"Both movies have the same rating\")\n```"
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n\n# Define the parameters\nparams = {\n    \"api_key\": \"<Your TMDB API Key>\",\n    \"language\": \"en-US\",\n    \"sort_by\": \"popularity.desc\",\n    \"vote_average.gte\": 7.0,\n    \"primary_release_date.gte\": \"2021\",\n    \"with_original_language\": \"en\"\n}\n\n# Add the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the results from the response\n    results = response.json()[\"results\"]\n    \n    # Print the titles of the English movies rated no less than 7.0 and no earlier than 2021\n    for movie in results:\n        print(movie[\"title\"])\nelse:\n    print(\"Failed to retrieve data from TMDB API\")\n```"
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "results": "```python\nimport requests\n\n# API url to search for the movie \"Lord of the Ring\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the genre of the movie Lord of the Rings\nif data[\"total_results\"] > 0:\n    movie_id = data[\"results\"][0][\"id\"]\n    movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    params = {}\n    response = requests.get(movie_details_url, headers=headers, params=params)\n    movie_details = response.json()\n    genre_ids = movie_details[\"genres\"]\n    \n    # Get the genre names based on genre ids\n    genre_names = []\n    for genre_id in genre_ids:\n        genre_names.append(genre_id[\"name\"])\n    \n    print(genre_names)\nelse:\n    print(\"Movie not found\")\n```"
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the birthday of the most popular person\nmost_popular_person = data[\"results\"][0]\nbirthday = most_popular_person[\"birthday\"]\n\nprint(\"Birthday of the most popular person right now:\", birthday)\n```"
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching TV shows\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameters for searching 'Big Bang Theory'\nparams = {\n    \"query\": \"Big Bang Theory\",\n    \"page\": 1\n}\n\n# Make the API call to search for 'Big Bang Theory'\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check for the response status and get the poster path of the second season\nif response.status_code == 200:\n    # Get the TV show ID for 'Big Bang Theory'\n    tv_id = data['results'][0]['id']\n\n    # Define the API url for retrieving images of the second season of 'Big Bang Theory'\n    season_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/images\"\n\n    # Make the API call to get images of the second season\n    season_response = requests.get(season_url, headers=headers)\n    season_data = season_response.json()\n\n    # Get the poster path of the second season\n    if season_response.status_code == 200:\n        second_season_poster = season_data['posters'][0]['file_path']\n        print(\"Poster of the second season of Big Bang Theory:\", second_season_poster)\n    else:\n        print(\"Error in retrieving images of the second season\")\nelse:\n    print(\"Error in searching for the TV show\")\n```"
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2/episode/3\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Extract the name of the third episode of the second season of Mandalorian\n    third_episode_name = data['name']\n    \n    print(\"The name of the third episode of the second season of Mandalorian is:\", third_episode_name)\nelse:\n    print(\"Could not retrieve data. Status code:\", response.status_code)\n```"
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Set the API url to get the movie details for The Shawshank Redemption\nurl = \"https://api.themoviedb.org/3/search/movie\"\n# Replace the API key and set the query parameter to search for The Shawshank Redemption movie\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n    \"include_adult\": False\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if there are any results\nif data[\"total_results\"] > 0:\n    # Get the movie id of The Shawshank Redemption\n    movie_id = data[\"results\"][0][\"id\"]\n    \n    # Set the API url to get the movie credits\n    url_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    \n    # Make a GET request to get the credits of the movie\n    response_credits = requests.get(url_credits, headers=headers)\n    credits_data = response_credits.json()\n    \n    # Get the lead actor id from the credits\n    lead_actor_id = credits_data[\"cast\"][0][\"id\"]\n    \n    # Set the API url to get the person details of the lead actor\n    url_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n    \n    # Make a GET request to get the person details\n    response_person = requests.get(url_person, headers=headers)\n    person_data = response_person.json()\n    \n    # Get the birthday of the lead actor\n    lead_actor_birthday = person_data[\"birthday\"]\n    \n    print(f\"The birthday of the lead actor of The Shawshank Redemption is: {lead_actor_birthday}\")\nelse:\n    print(\"The Shawshank Redemption movie not found.\")\n```"
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/company"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for the movie \"The Shawshank Redemption\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the API request to search for the movie\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Extract the director's id from the search results\nif search_response.status_code == 200:\n    movie_id = search_data['results'][0]['id']\n    \n    # Define the API endpoint to get the movie credits\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    \n    # Make the API request to get the movie credits\n    credits_response = requests.get(credits_url, headers=headers)\n    credits_data = credits_response.json()\n\n    # Find the director in the crew\n    director_id = None\n    for crew_member in credits_data['crew']:\n        if crew_member['job'] == 'Director':\n            director_id = crew_member['id']\n            break\n\n    if director_id:\n        # Define the API endpoint to get the details of the director\n        person_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n\n        # Make the API request to get the details of the director\n        person_response = requests.get(person_url, headers=headers)\n        person_data = person_response.json()\n\n        if person_response.status_code == 200:\n            director_birthday = person_data['birthday']\n            print(f\"The birthday of the director of the movie 'The Shawshank Redemption' is: {director_birthday}\")\n        else:\n            print(\"Failed to retrieve director's details\")\n    else:\n        print(\"Director not found in the crew\")\nelse:\n    print(\"Failed to retrieve movie data\")\n```"
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie The Shawshank Redemption\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"The Shawshank Redemption\",\n    \"include_adult\": \"false\"\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\ndata = response.json()\ncompany_id = data['results'][0]['production_company'][0]['id']\n\n# Get details of the company\ncompany_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\ncompany_response = requests.get(company_url, headers=headers)\ncompany_data = company_response.json()\nheadquarter = company_data['headquarters']\n\nprint(headquarter)\n```"
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# Set up the API endpoint\nurl = \"https://api.themoviedb.org/3/search/collection\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nparams = {\n    \"query\": \"Star Wars\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if the collection was found\nif data[\"total_results\"] > 0:\n    # Get the collection id\n    collection_id = data[\"results\"][0][\"id\"]\n    \n    # Get the details of the collection\n    url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    response = requests.get(url, headers=headers)\n    data = response.json()\n    \n    # Get the company id that created the collection\n    if data[\"parts\"]:\n        company_id = data[\"parts\"][0][\"production_companies\"][0][\"id\"]\n        \n        # Get the details of the company\n        url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n        response = requests.get(url, headers=headers)\n        company_data = response.json()\n        \n        headquarters = company_data[\"headquarters\"]\n        print(headquarters)\n    else:\n        print(\"Company not found.\")\nelse:\n    print(\"Collection not found.\")\n```"
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# API url to search for the movie \"The Double Life of Veronique\"\nsearch_url_veronique = \"https://api.themoviedb.org/3/search/movie\"\nveronique_params = {\n    \"query\": \"The Double Life of Veronique\",\n}\nveronique_response = requests.get(search_url_veronique, headers=headers, params=veronique_params)\nveronique_data = veronique_response.json()\nveronique_release_date = veronique_data[\"results\"][0][\"release_date\"]\n\n# API url to search for the movie \"Mulholland Drive\"\nsearch_url_mulholland = \"https://api.themoviedb.org/3/search/movie\"\nmulholland_params = {\n    \"query\": \"Mulholland Drive\",\n}\nmulholland_response = requests.get(search_url_mulholland, headers=headers, params=mulholland_params)\nmulholland_data = mulholland_response.json()\nmulholland_release_date = mulholland_data[\"results\"][0][\"release_date\"]\n\n# Comparing the release dates of the movies\nif veronique_release_date < mulholland_release_date:\n    print(\"The Double Life of Veronique has an earlier release date.\")\nelse:\n    print(\"Mulholland Drive has an earlier release date.\")\n```"
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the director of a movie or TV show by ID\ndef get_director(id, is_movie):\n    if is_movie:\n        url = f\"https://api.themoviedb.org/3/movie/{id}\"\n    else:\n        url = f\"https://api.themoviedb.org/3/tv/{id}\"\n    \n    params = {\"append_to_response\": \"credits\"}\n    response = requests.get(url, headers=headers, params=params)\n    \n    if response.status_code == 200:\n        data = response.json()\n        if \"credits\" in data:\n            crew = data[\"credits\"][\"crew\"]\n            for member in crew:\n                if member[\"job\"] == \"Director\":\n                    return member[\"name\"]\n        return None\n    else:\n        return None\n\n# Get the director of Twin Peaks Season 1 (TV Show) and Mulholland Drive (Movie)\ntwin_peaks_director = get_director(253, False)  # Twin Peaks Season 1 TV Show ID\nmulholland_drive_director = get_director(101, True)  # Mulholland Drive Movie ID\n\n# Check if the directors are the same\nif twin_peaks_director and mulholland_drive_director and twin_peaks_director == mulholland_drive_director:\n    print(\"Yes, the director of Twin Peaks Season 1 and Mulholland Drive is the same person.\")\nelse:\n    print(\"No, the director of Twin Peaks Season 1 and Mulholland Drive is not the same person.\")\n```"
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Mulholland Drive\"\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Mulholland Drive\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie details\nif data[\"total_results\"] > 0:\n    movie_id = data[\"results\"][0][\"id\"]\n    movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    response = requests.get(movie_details_url, headers=headers)\n    data = response.json()\n\n    # Get the director's details\n    director_details = None\n    for crew_member in data[\"production_companies\"]:\n        if crew_member[\"job\"] == \"Director\":\n            director_id = crew_member[\"id\"]\n            person_details_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n            response = requests.get(person_details_url, headers=headers)\n            director_details = response.json()\n            break\n\n    if director_details:\n        print(f\"The director of Mulholland Drive was born in {director_details['place_of_birth']}\")\n    else:\n        print(\"Director details not found.\")\nelse:\n    print(\"Movie not found.\")\n```"
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# URL for getting the list of top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Set the query parameters for the request\nparams = {\n    \"page\": 1\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if Mulholland Drive is in the top-10 list\nis_in_top_10 = False\nif response.status_code == 200:\n    # Iterate over the top-10 movies to check for Mulholland Drive\n    for movie in data[\"results\"][:10]:\n        if movie[\"title\"] == \"Mulholland Drive\":\n            is_in_top_10 = True\n            break\n\n# Output the result\nprint(is_in_top_10)\n```"
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Akira Kurosawa's movies\nurl_akira = \"https://api.themoviedb.org/3/search/person\"\nparams_akira = {\n    \"query\": \"Akira Kurosawa\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse_akira = requests.get(url_akira, headers=headers, params=params_akira)\nresults_akira = response_akira.json()\n\n# Search for Spielberg's movies\nurl_spielberg = \"https://api.themoviedb.org/3/search/person\"\nparams_spielberg = {\n    \"query\": \"Steven Spielberg\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse_spielberg = requests.get(url_spielberg, headers=headers, params=params_spielberg)\nresults_spielberg = response_spielberg.json()\n\n# Compare the number of movies directed by each person\nnum_movies_akira = 0\nnum_movies_spielberg = 0\n\nif 'results' in results_akira:\n    num_movies_akira = len(results_akira['results'][0]['known_for'])\n\nif 'results' in results_spielberg:\n    num_movies_spielberg = len(results_spielberg['results'][0]['known_for'])\n\nif num_movies_akira > num_movies_spielberg:\n    print(\"Akira Kurosawa directed more movies.\")\nelif num_movies_spielberg > num_movies_akira:\n    print(\"Steven Spielberg directed more movies.\")\nelse:\n    print(\"Akira Kurosawa and Steven Spielberg directed the same number of movies.\")\n```"
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the director of Mulholland Drive\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params={\"query\": \"David Lynch\"})\nresponse_json = response.json()\ndirector_id = response_json['results'][0]['id']\n\n# Get TV show credits for the director\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{director_id}/tv_credits\", headers=headers)\ntv_credits = response.json()\n\n# Extract the TV series directed by the director\ntv_series_directed = []\nfor credit in tv_credits['crew']:\n    if credit['job'] == 'Director':\n        tv_series_directed.append(credit['original_name'])\n\nprint(tv_series_directed)\n```"
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Set the API url with the appropriate person_id for actor Scarlett Johansson\nurl = \"https://api.themoviedb.org/3/person/192?api_key=<API_KEY>\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Retrieve the birthday information from the response\n    birthday = response.json().get('birthday')\n    print(f\"Scarlett Johansson's birthday is on: {birthday}\")\nelse:\n    print(\"Error: Unable to fetch the information\")\n```"
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show Sword Art Online\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nquery_params = {\n    \"query\": \"Sword Art Online\",\n    \"include_adult\": False\n}\n\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=query_params)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show id for Sword Art Online\nif data_search_tv[\"results\"]:\n    tv_id = data_search_tv[\"results\"][0][\"id\"]\n\n    # Get the details of Sword Art Online\n    url_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    response_tv_details = requests.get(url_tv_details, headers=headers)\n    data_tv_details = response_tv_details.json()\n\n    total_seasons = data_tv_details[\"number_of_seasons\"]\n    print(f\"The total number of seasons for Sword Art Online is: {total_seasons}\")\n\nelse:\n    print(\"Sword Art Online TV show not found.\")\n```"
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show We Married as Job using the search API\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"We Married as Job\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nsearch_results = response.json()\n\n# Get the TV show id if found\ntv_show_id = None\nif search_results[\"total_results\"] > 0:\n    tv_show_id = search_results[\"results\"][0][\"id\"]\n\n# Check if Yui Aragaki and Gen Hoshino are co-starring in the TV show by getting the credits\nif tv_show_id:\n    credits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n    response = requests.get(credits_url, headers=headers)\n    credits_info = response.json()\n    \n    # Check if Yui Aragaki and Gen Hoshino are in the cast\n    yui_found = False\n    gen_found = False\n    for cast_member in credits_info[\"cast\"]:\n        if cast_member[\"name\"] == \"Yui Aragaki\":\n            yui_found = True\n        if cast_member[\"name\"] == \"Gen Hoshino\":\n            gen_found = True\n    \n    if yui_found and gen_found:\n        print(\"Yui Aragaki and Gen Hoshino are co-starring in We Married as Job.\")\n    else:\n        print(\"Yui Aragaki and Gen Hoshino are not co-starring in We Married as Job.\")\nelse:\n    print(\"TV show 'We Married as Job' not found.\")\n```"
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the age of a person\ndef get_age(birth_date):\n    return 2022 - int(birth_date[:4])\n\n# Function to get the person's birth date\ndef get_birth_date(credit_id):\n    # Get the details of a person\n    person_url = f\"https://api.themoviedb.org/3/person/{credit_id}\"\n    params = {}\n    response = requests.get(person_url, headers=headers, params=params)\n    person_details = response.json()\n    \n    # Get the birth date\n    return person_details['birthday']\n\n# Get the director of the movie \"Barbie\"\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Barbie\",\n    \"include_adult\": False\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\nmovie_results = response.json()['results']\nif movie_results:\n    movie_id = movie_results[0]['id']\n    movie_credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response = requests.get(movie_credits_url, headers=headers)\n    movie_credits = response.json()\n    director_id = movie_credits['crew'][0]['id']  # Assuming the director is the first crew member\n    director_birth_date = get_birth_date(director_id)\n    director_age = get_age(director_birth_date)\n\n# Get the lead actor of the TV show \"DEATH NOTE\"\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"DEATH NOTE\"\n}\nresponse = requests.get(tv_search_url, headers=headers, params=params)\ntv_results = response.json()['results']\nif tv_results:\n    tv_id = tv_results[0]['id']\n    tv_credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    response = requests.get(tv_credits_url, headers=headers)\n    tv_credits = response.json()\n    lead_actor_id = tv_credits['cast'][0]['id']  # Assuming the lead actor is the first cast member\n    lead_actor_birth_date = get_birth_date(lead_actor_id)\n    lead_actor_age = get_age(lead_actor_birth_date)\n\n# Calculate and print the age difference\nif director_age > lead_actor_age:\n    age_difference = director_age - lead_actor_age\n    print(f\"The director of Barbie is older than the lead actor of DEATH NOTE by {age_difference} years.\")\nelse:\n    age_difference = lead_actor_age - director_age\n    print(f\"The lead actor of DEATH NOTE is older than the director of Barbie by {age_difference} years.\")\n```"
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/person\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the query parameters\nparams = {\n    \"query\": \"Katherine LaNasa\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person ID of Katherine LaNasa\nperson_id = data[\"results\"][0][\"id\"]\n\n# Call the API to get Katherine LaNasa's movie credits\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(url, headers=headers)\nmovie_credits = response.json()\n\n# Get the latest appearance\nlatest_movie = movie_credits[\"cast\"][0][\"title\"]\nlatest_movie_release_date = movie_credits[\"cast\"][0][\"release_date\"]\n\nprint(f\"Katherine LaNasa's latest movie appearance is in the movie '{latest_movie}' released on {latest_movie_release_date}.\")\n```"
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "results": "```python\nimport requests\n\n# API url for searching a movie\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Parameters for searching the movie 'Oppenheimer'\nparams = {\n    \"query\": \"Oppenheimer\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to search for the movie 'Oppenheimer'\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the poster_path of the first movie in the search results\n    movie_results = response.json()[\"results\"]\n    if movie_results:\n        first_movie = movie_results[0]\n        poster_path = first_movie[\"poster_path\"]\n        # Print the URL of the cover image for the movie 'Oppenheimer'\n        print(f\"The cover image URL for the movie 'Oppenheimer': https://image.tmdb.org/t/p/original{poster_path}\")\n    else:\n        print(\"No movie found with the name 'Oppenheimer'\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```"
    }
]