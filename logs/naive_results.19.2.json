[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for people\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the parameters for searching for Sofia Coppola\nparams_search_person = {\n    \"query\": \"Sofia Coppola\",\n    \"include_adult\": False\n}\n\n# Make the API request to search for people\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\n\n# Check if the request was successful\nif response_search_person.status_code == 200:\n    data_search_person = response_search_person.json()\n    \n    # Extract the person id of Sofia Coppola\n    if data_search_person[\"results\"]:\n        person_id = data_search_person[\"results\"][0][\"id\"]\n        \n        # Define the API url to get the movie credits for a person\n        url_person_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n        \n        # Make the API request to get the movie credits for Sofia Coppola\n        response_movie_credits = requests.get(url_person_movie_credits, headers=headers)\n        \n        # Check if the request was successful\n        if response_movie_credits.status_code == 200:\n            data_movie_credits = response_movie_credits.json()\n            \n            # Count the number of movies directed by Sofia Coppola\n            movie_credits = data_movie_credits[\"crew\"]\n            num_movies_directed = len([movie for movie in movie_credits if movie[\"job\"] == \"Director\"])\n            \n            # Print the number of movies directed by Sofia Coppola\n            print(f\"The number of movies directed by Sofia Coppola is: {num_movies_directed}\")\n        else:\n            print(\"Failed to retrieve the movie credits for Sofia Coppola\")\n    else:\n        print(\"Sofia Coppola not found in the search results\")\nelse:\n    print(\"Failed to retrieve person information\")\n```",
        "usage": [
            404,
            11215,
            11619
        ]
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# API url to search for the movie The Dark Knight\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Dark Knight\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the movie id from the search results\nmovie_id = response.json()['results'][0]['id']\n\n# API url to get the credits of the movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make the API request to get the credits\ncredits_response = requests.get(credits_url, headers=headers)\n\n# Extract the lead actor\nlead_actor = credits_response.json()['cast'][0]['name']\n\nlead_actor\n```",
        "usage": [
            181,
            9926,
            10107
        ]
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for getting the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the parameters\nparams = {\n    \"page\": 1,  # Specify the page number\n    \"region\": \"US\"  # Specify the region\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the JSON response\ndata = response.json()\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the director of the top-1 rated movie\n    if data[\"results\"][0][\"id\"]:\n        movie_id = data[\"results\"][0][\"id\"]\n        # Call the API to get credits for the movie\n        credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n        credits_response = requests.get(credits_url, headers=headers)\n        credits_data = credits_response.json()\n        # Check if the request was successful\n        if credits_response.status_code == 200:\n            # Extract the director's name\n            for crew_member in credits_data[\"crew\"]:\n                if crew_member[\"job\"] == \"Director\":\n                    director_name = crew_member[\"name\"]\n                    print(f\"The director of the top-1 rated movie is: {director_name}\")\n                    break\n        else:\n            print(\"Error in getting movie credits API\")\n    else:\n        print(\"Error in getting top-1 rated movie id\")\nelse:\n    print(\"Error in getting top rated movies API\")\n```",
        "usage": [
            504,
            10159,
            10663
        ]
    },
    {
        "query": "give me a image for the collection Star Wars",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\n# Define the headers to access the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the Star Wars collection\nurl_search = \"https://api.themoviedb.org/3/search/collection\"\nparams_search = {\n    \"query\": \"Star Wars\"\n}\nresponse_search = requests.get(url_search, headers=headers, params=params_search)\ncollection_id = response_search.json()['results'][0]['id']\n\n# Get the images for the collection by id\nurl_images = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\nresponse_images = requests.get(url_images, headers=headers)\n\n# Extract and print the image paths\nbackdrop_images = response_images.json()['backdrops']\nposter_images = response_images.json()['posters']\n\nfor image in backdrop_images:\n    print(\"Backdrop Image Path:\", image['file_path'])\n\nfor image in poster_images:\n    print(\"Poster Image Path:\", image['file_path'])\n```",
        "usage": [
            361,
            9436,
            9797
        ]
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for companies\nurl = \"https://api.themoviedb.org/3/search/company\"\n\n# Define the parameters for the query to search for Walt Disney\nparams = {\n    \"query\": \"Walt Disney\",\n    \"page\": 1\n}\n\n# Define the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Find the logo path for Walt Disney\n    for result in data[\"results\"]:\n        if result[\"name\"] == \"Walt Disney\":\n            if result[\"logo_path\"]:\n                logo_url = f\"https://www.themoviedb.org/t/p/original{result['logo_path']}\"\n                print(\"The logo of Walt Disney:\", logo_url)\n            else:\n                print(\"Walt Disney logo not found.\")\n            break\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            388,
            9747,
            10135
        ]
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching the movie \"Titanic\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Parameters for searching the movie \"Titanic\"\nparams_search_movie = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Send a GET request to search for the movie \"Titanic\"\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie ID for \"Titanic\"\nmovie_id_titanic = data_search_movie[\"results\"][0][\"id\"]\n\n# Define the API url for getting the credits of the movie \"Titanic\"\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id_titanic}/credits\"\n\n# Send a GET request to get the credits of the movie \"Titanic\"\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Get the lead actor of the movie \"Titanic\"\nlead_actor_name = data_movie_credits[\"cast\"][0][\"name\"]\nlead_actor_profile_path = data_movie_credits[\"cast\"][0][\"profile_path\"]\n\n# Print the lead actor's name and profile path\nprint(\"Lead actor of Titanic:\", lead_actor_name)\nprint(\"Lead actor's profile path:\", lead_actor_profile_path)\n```",
        "usage": [
            316,
            10715,
            11031
        ]
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching movies\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the API endpoint for getting similar movies\nsimilar_movie_url = \"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\n\n# Define the API endpoint for getting reviews of a movie\nreviews_url = \"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Query to search for movies similar to Titanic\nsearch_params = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Call the search movie API to get the movie details\nsearch_response = requests.get(search_movie_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the id of the first movie similar to Titanic\nif search_results.get(\"results\"):\n    if len(search_results[\"results\"]) > 0:\n        first_movie_id = search_results[\"results\"][0][\"id\"]\n\n        # Use the first movie id to get similar movies\n        similar_params = {\n            \"page\": 1\n        }\n        similar_response = requests.get(similar_movie_url.format(movie_id=first_movie_id), headers=headers, params=similar_params)\n        similar_results = similar_response.json()\n\n        # Get the id of the first similar movie\n        if similar_results.get(\"results\"):\n            if len(similar_results[\"results\"]) > 0:\n                first_similar_id = similar_results[\"results\"][0][\"id\"]\n\n                # Use the first similar movie id to get the reviews\n                reviews_response = requests.get(reviews_url.format(movie_id=first_similar_id), headers=headers)\n                reviews_results = reviews_response.json()\n\n                # Print the reviews\n                if reviews_results.get(\"results\"):\n                    for review in reviews_results[\"results\"]:\n                        print(\"Author:\", review[\"author\"])\n                        print(\"Content:\", review[\"content\"])\n                        print(\"------------------\")\n\n```\nThis code first searches for movies similar to \"Titanic\", then retrieves the first similar movie and finally fetches the reviews for that movie. It then prints out the author and content of each review.",
        "usage": [
            633,
            9637,
            10270
        ]
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\n# Provided API url and headers\nurl = \"https://api.themoviedb.org/3/movie/597/recommendations\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making an HTTP GET request to get movie recommendations for movie id 597 (Titanic)\nresponse = requests.get(url, headers=headers)\n\n# Extracting the movie recommendations from the response\nif response.status_code == 200:\n    movie_recommendations = response.json()[\"results\"]\n    for movie in movie_recommendations:\n        print(movie[\"title\"])\nelse:\n    print(\"Error occurred while fetching movie recommendations\")\n```",
        "usage": [
            285,
            8686,
            8971
        ]
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Set the API url to get the popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Set the parameters to get the page with popular people\nparams = {\"page\": 1}\n\n# Set the API key in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the popular people data from the response\n    popular_people = response.json()\n\n    # Find the person ID for Christopher Nolan\n    christopher_nolan_id = None\n    for person in popular_people['results']:\n        if person['name'] == 'Christopher Nolan':\n            christopher_nolan_id = person['id']\n            break\n\n    # If the ID is found, get the latest movie directed by Christopher Nolan\n    if christopher_nolan_id is not None:\n        url = f\"https://api.themoviedb.org/3/person/{christopher_nolan_id}/movie_credits\"\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            movie_credits = response.json()\n            # Get the latest movie directed by Christopher Nolan\n            for movie in movie_credits['crew']:\n                if movie['job'] == 'Director':\n                    latest_movie = movie\n                    break\n            print(\"The latest movie directed by Christopher Nolan is:\", latest_movie['title'])\n        else:\n            print(\"Failed to retrieve movie credits.\")\n    else:\n        print(\"Christopher Nolan's ID not found in popular people.\")\nelse:\n    print(\"Failed to retrieve popular people data.\")\n```",
        "usage": [
            520,
            10771,
            11291
        ]
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for person ID of Martin Scorsese\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Martin Scorsese\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the list of movies directed by Martin Scorsese\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovies = response.json()[\"crew\"]\n\n# Find the highest rated movie\nhighest_rated_movie = max(movies, key=lambda x: x[\"vote_average\"])\n\n# Output the title of the highest rated movie directed by Martin Scorsese\nprint(\"The highest rated movie directed by Martin Scorsese is:\", highest_rated_movie[\"title\"])\n```",
        "usage": [
            377,
            11225,
            11602
        ]
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Headers with Authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Leonardo DiCaprio\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Leonardo DiCaprio\"\n}\nresponse = requests.get(person_search_url, headers=headers, params=params)\nperson_json = response.json()\nperson_id = person_json[\"results\"][0][\"id\"]\n\n# Get Leonardo DiCaprio's movie credits\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovie_credits_json = response.json()\n\n# Get the latest movie that he was part of\nlatest_movie = movie_credits_json[\"cast\"][0]\nmovie_id = latest_movie[\"id\"]\n\n# Get the movie details\nmovie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(movie_details_url, headers=headers)\nmovie_details_json = response.json()\n\n# Find the director of the latest movie\nfor crew_member in movie_details_json[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director = crew_member[\"name\"]\n        break\n\nprint(f\"The director of Leonardo DiCaprio's latest movie is: {director}\")\n```",
        "usage": [
            446,
            8983,
            9429
        ]
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the base URL and headers\nbase_url = \"https://api.themoviedb.org/3\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Catherine Hardwicke\nsearch_person_url = f\"{base_url}/search/person\"\nparams = {\n    \"query\": \"Catherine Hardwicke\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nresults = response.json()\n\n# Extract the person id of Catherine Hardwicke\nperson_id = results['results'][0]['id'] if results['results'] else None\n\n# Get the TV show credits for Catherine Hardwicke\nif person_id:\n    tv_credits_url = f\"{base_url}/person/{person_id}/tv_credits\"\n    response = requests.get(tv_credits_url, headers=headers)\n    tv_credits = response.json()\n\n    # Find the most recent TV show directed by Catherine Hardwicke\n    recent_tv_show = None\n    for credit in tv_credits['crew']:\n        if credit['job'] == 'Director' and credit['media_type'] == 'tv':\n            recent_tv_show = credit\n            break\n\n    if recent_tv_show:\n        print(f\"The most recent TV show directed by Catherine Hardwicke is '{recent_tv_show['original_name']}'\")\n    else:\n        print(\"No TV show directed by Catherine Hardwicke found.\")\nelse:\n    print(\"Catherine Hardwicke not found in the database.\")\n```",
        "usage": [
            481,
            11325,
            11806
        ]
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters for the API request\nparams = {\n    \"query\": \"Breaking Bad\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Setting the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the JSON response\nsimilar_shows = response.json()\n\n# Extract the results\nresults = similar_shows['results']\n\n# Display the results\nfor show in results:\n    print(show['name'])\n```",
        "usage": [
            304,
            9444,
            9748
        ]
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get today's trending movies\nurl = \"https://api.themoviedb.org/3/trending/all/day\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the request to get today's trending movies\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the movie id of the most trending movie\nmost_trending_movie_id = data['results'][0]['id']\n\n# Define the API url to get credits for a movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{most_trending_movie_id}/credits\"\n\n# Make the request to get the credits for the most trending movie\nresponse_credits = requests.get(credits_url, headers=headers)\ncredits_data = response_credits.json()\n\n# Get the details of the crew to find the director\ndirectors = [crew['name'] for crew in credits_data['crew'] if crew['job'] == \"Director\"]\n\nif directors:\n    print(f\"The director of today's most trending movie is: {directors[0]}\")\nelse:\n    print(\"Director information not found for the most trending movie.\")\n```",
        "usage": [
            412,
            7744,
            8156
        ]
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching movies\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the query parameter for searching the movie \"Twilight\"\nparams = {\n    \"query\": \"Twilight\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Set the HTTP headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    movie_data = response.json()\n    \n    # Get the results for the movie \"Twilight\"\n    if len(movie_data[\"results\"]) > 0:\n        twilight_movie = movie_data[\"results\"][0]\n        \n        # Get the movie ID for further API call\n        movie_id = twilight_movie[\"id\"]\n        \n        # Define the API endpoint for getting the credits of the movie\n        credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n        \n        # Make the API request to get the credits of the movie\n        credits_response = requests.get(credits_url, headers=headers)\n        \n        # Check if the request for credits was successful\n        if credits_response.status_code == 200:\n            credits_data = credits_response.json()\n            \n            # Find the director in the crew list\n            for crew_member in credits_data[\"crew\"]:\n                if crew_member[\"job\"] == \"Director\":\n                    director_name = crew_member[\"name\"]\n                    print(f\"The director of the movie 'Twilight' is: {director_name}\")\n                    break\n        else:\n            print(\"Unable to retrieve credits information\")\n    else:\n        print(\"No movie found with the title 'Twilight'\")\nelse:\n    print(f\"Error: {response.status_code}\")\n```",
        "usage": [
            555,
            10547,
            11102
        ]
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\n# Define the URL of the API\nurl = \"https://api.themoviedb.org/3/tv/1399/season/1/episode/2/images\"\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Assuming the API response contains an array of 'stills', we can access the first photo\n    if 'stills' in data and len(data['stills']) > 0:\n        photo_path = data['stills'][0]['file_path']\n        print(\"The photo path is:\", photo_path)\n    else:\n        print(\"No photos found for the specified episode.\")\nelse:\n    print(\"Error: Unable to fetch the data. Status code:\", response.status_code)\n```",
        "usage": [
            360,
            8094,
            8454
        ]
    },
    {
        "query": "What is top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\nparams = {\n    \"page\": 1\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\nif 'results' in data and len(data['results']) > 0:\n    top_rated_movie = data['results'][0]['title']\n    print(f\"The top rated movie is: {top_rated_movie}\")\nelse:\n    print(\"No results found.\")\n```",
        "usage": [
            276,
            10792,
            11068
        ]
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching a movie\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the query parameter to search for \"The Matrix\" movie\nparams = {\n    \"query\": \"The Matrix\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"  # Example region code\n}\n\n# Make the API request\nresponse = requests.get(url_search_movie, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the response JSON\n    movie_results = response.json()\n\n    # Get the movie id of the first search result\n    if movie_results[\"total_results\"] > 0:\n        movie_id = movie_results[\"results\"][0][\"id\"]\n\n        # Define the API url for getting release dates of a movie\n        url_movie_release_dates = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n\n        # Make the API request to get release dates for the movie\n        response_release_dates = requests.get(url_movie_release_dates, headers=headers)\n\n        # Check if the request was successful\n        if response_release_dates.status_code == 200:\n            # Parse the response JSON\n            release_dates_result = response_release_dates.json()\n\n            # Extract and print the release date of the movie\n            release_dates = release_dates_result[\"results\"]\n            for result in release_dates:\n                if result[\"iso_3166_1\"] == \"US\":  # Assuming US as the region\n                    release_date = result[\"release_dates\"][0][\"release_date\"]\n                    print(f\"The release date of the movie 'The Matrix' is {release_date}\")\n                break\n        else:\n            print(\"Failed to retrieve release dates for the movie\")\n    else:\n        print(\"No movie found with the title 'The Matrix'\")\nelse:\n    print(\"Failed to retrieve movie details\")\n```",
        "usage": [
            412,
            12013,
            12425
        ]
    },
    {
        "query": "Who is the most popular person?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "results": "```python\nimport requests\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get the list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    # Extract the data from the response\n    data = response.json()\n    # Find the most popular person\n    most_popular_person = max(data['results'], key=lambda x: x['popularity'])\n    print(\"The most popular person is:\", most_popular_person['name'])\nelse:\n    print(\"Failed to fetch data. Status code:\", response.status_code)\n```",
        "usage": [
            311,
            9916,
            10227
        ]
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Search for Christopher Nolan\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = response.json()\n\n# Get the person_id of Christopher Nolan\nperson_id = search_results[\"results\"][0][\"id\"]\n\n# 2. Get movie credits for Christopher Nolan\ncredits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits_results = response.json()\n\n# Get the movie_ids for movies directed by Christopher Nolan\nmovie_ids = [movie[\"id\"] for movie in credits_results[\"crew\"] if movie[\"job\"] == \"Director\"]\n\n# 3. Get images for movies directed by Christopher Nolan\ncover_images = []\nfor movie_id in movie_ids:\n    images_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n    response = requests.get(images_url, headers=headers)\n    images_results = response.json()\n    cover_images.extend(images_results[\"posters\"])\n\n# Print the cover images\nprint(cover_images)\n```",
        "usage": [
            448,
            9139,
            9587
        ]
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching movies\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for searching the movie \"Titanic\"\nparams = {\n    \"query\": \"Titanic\",\n    \"api_key\": \"0dbab590c7eaca07ebe625974a37ad92\"  # Replace with your actual API key\n}\n\n# Make a GET request to search for the movie \"Titanic\"\nresponse = requests.get(url_search_movie, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie id for \"Titanic\" from the search results\n    movie_id = response.json()['results'][0]['id']\n\n    # Define the API endpoint for getting keywords for a movie\n    url_movie_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n\n    # Make a GET request to get the keywords of the movie \"Titanic\"\n    response_keywords = requests.get(url_movie_keywords, headers=headers)\n\n    # Check if the request was successful\n    if response_keywords.status_code == 200:\n        # Extract the keywords associated with the movie \"Titanic\"\n        keywords = [keyword['name'] for keyword in response_keywords.json()['keywords']]\n        print(keywords)\n    else:\n        print(\"Failed to retrieve keywords for the movie Titanic.\")\nelse:\n    print(\"Failed to search for the movie Titanic.\")\n```",
        "usage": [
            314,
            9104,
            9418
        ]
    },
    {
        "query": "Give me a show that is currently on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "results": "```python\nimport requests\n\n# API url for getting shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Parameters\nparams = {\n    \"page\": 1 # Specify the first page\n}\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Extracting the name of the first show on the list\n    if \"results\" in data and len(data[\"results\"]) > 0:\n        show_name = data[\"results\"][0][\"name\"]\n        print(f\"A show currently on the air: {show_name}\")\n    else:\n        print(\"No shows currently on the air.\")\nelse:\n    print(\"Failed to fetch data from the API.\")\n```",
        "usage": [
            358,
            12401,
            12759
        ]
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Clint Eastwood\nclint_search_params = {\n    \"query\": \"Clint Eastwood\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\nclint_search_response = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=clint_search_params)\nclint_data = clint_search_response.json()\n\n# Getting Clint Eastwood's latest movie id\nclint_id = clint_data[\"results\"][0][\"id\"]\n\n# Get Clint Eastwood's movie credits\nmovie_credits_response = requests.get(f\"https://api.themoviedb.org/3/person/{clint_id}/movie_credits\", headers=headers)\nmovie_credits_data = movie_credits_response.json()\n\n# Find the latest movie and get release date\nlatest_movie = movie_credits_data[\"cast\"][0]\nlatest_movie_id = latest_movie[\"id\"]\n\n# Get the movie details\nmovie_details_response = requests.get(f\"https://api.themoviedb.org/3/movie/{latest_movie_id}\", headers=headers)\nmovie_details_data = movie_details_response.json()\n\n# Extract the release date of Clint Eastwood's latest movie\nrelease_date = movie_details_data[\"release_date\"]\n\nprint(f\"Clint Eastwood's latest movie is scheduled to be released on: {release_date}\")\n```",
        "usage": [
            460,
            8395,
            8855
        ]
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/tv"
        ],
        "results": "```python\nimport requests\n\n# API URL to search for a movie\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Parameters for searching for the movie \"The Dark Knight\"\nparams = {\n    \"query\": \"The Dark Knight\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending a GET request to search for the movie\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting the movie reviews from the response\nif response.status_code == 200:\n    movie_results = response.json()[\"results\"]\n    for movie in movie_results:\n        movie_id = movie[\"id\"]\n        # API URL to get the reviews for a movie\n        review_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n        review_params = {\n            \"page\": 1\n        }\n        review_response = requests.get(review_url, headers=headers, params=review_params)\n        reviews = review_response.json()[\"results\"]\n        for review in reviews:\n            print(\"Author:\", review[\"author\"])\n            print(\"Content:\", review[\"content\"])\n            print(\"----------------------\")\nelse:\n    print(\"Failed to retrieve movie data.\")\n```",
        "usage": [
            427,
            9293,
            9720
        ]
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for movies similar to a movie\nurl_search_similar_movies = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the API endpoint to get the movie credits for a person\nurl_person_movie_credits = \"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n# Define the API endpoint to get the movie details\nurl_movie_details = \"https://api.themoviedb.org/3/movie/{movie_id}\"\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the movies by a specific director\ndef get_movies_by_director(director_name):\n    # Initialize list to store movie IDs directed by the given director\n    director_movie_ids = []\n    \n    # Search for the person ID of the director\n    params_person_search = {\"query\": director_name}\n    response_person_search = requests.get(url=\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params_person_search)\n    person_search_results = response_person_search.json()\n    \n    if person_search_results[\"results\"]:\n        person_id = person_search_results[\"results\"][0][\"id\"]\n        \n        # Get the movie credits for the director\n        url_person_movie_credits_updated = url_person_movie_credits.format(person_id=person_id)\n        response_person_movie_credits = requests.get(url=url_person_movie_credits_updated, headers=headers)\n        movie_credits = response_person_movie_credits.json()\n        \n        for movie in movie_credits[\"cast\"]:\n            director_movie_ids.append(movie[\"id\"])\n        \n    return director_movie_ids\n\n# Function to get similar movies based on a given movie\ndef get_similar_movies(movie_id):\n    # Get the movie details\n    url_movie_details_updated = url_movie_details.format(movie_id=movie_id)\n    response_movie_details = requests.get(url=url_movie_details_updated, headers=headers)\n    movie_details = response_movie_details.json()\n    \n    # Get the list of genres associated with the movie\n    genre_ids = movie_details[\"genres\"]\n    \n    # Search for movies with similar genres\n    params_search_similar_movies = {\"page\": 1, \"with_genres\": \",\".join(str(genre[\"id\"]) for genre in genre_ids)}\n    response_search_similar_movies = requests.get(url=url_search_similar_movies, headers=headers, params=params_search_similar_movies)\n    similar_movies = response_search_similar_movies.json()\n    \n    return similar_movies\n\n# Get the director's name\ndirector_name = \"Francis Ford Coppola\"\n# Get movies directed by Francis Ford Coppola\ndirector_movie_ids = get_movies_by_director(director_name)\n\n# Get similar movies for one of the movies directed by Francis Ford Coppola\nif director_movie_ids:\n    similar_movies = get_similar_movies(director_movie_ids[0])\n    print(similar_movies)\nelse:\n    print(\"Director not found or no movies directed by the given director\")\n```",
        "usage": [
            785,
            8476,
            9261
        ]
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# Set the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/latest\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers)\n\n# Check if the response status code is successful\nif response.status_code == 200:\n    # Extract the lead actor from the response\n    movie_data = response.json()\n    lead_actor = movie_data['cast'][0]['name']\n    print(f\"The lead actor in the latest released movie is: {lead_actor}\")\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            293,
            10387,
            10680
        ]
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Define the parameters\nparams = {\n    \"page\": 1  # Assuming we want to get the first page of results\n}\n\n# Define the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the image path of the first movie in the results\n    data = response.json()\n    if data['results']:\n        poster_path = data['results'][0]['poster_path']\n        if poster_path:\n            print(f\"Image path of the first movie currently showing in theaters: {poster_path}\")\n        else:\n            print(\"No image found for the first movie currently showing in theaters\")\n    else:\n        print(\"No movies currently showing in theaters\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            383,
            11281,
            11664
        ]
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API to get a list of the current popular movies\nurl_popular = \"https://api.themoviedb.org/3/movie/popular\"\nparams_popular = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\nresponse_popular = requests.get(url_popular, headers=headers, params=params_popular)\ndata_popular = response_popular.json()\n\n# Get the most popular movie\nmost_popular_movie = data_popular['results'][0]\n\n# Extract movie id\nmovie_id = most_popular_movie['id']\n\n# API to get the keywords for the most popular movie\nurl_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n\nresponse_keywords = requests.get(url_keywords, headers=headers)\ndata_keywords = response_keywords.json()\n\n# Extract the keywords\nkeywords = data_keywords['keywords']\n\nprint(\"Most Popular Movie Right Now:\")\nprint(f\"Title: {most_popular_movie['title']}\")\nprint(\"Keywords:\")\nfor keyword in keywords:\n    print(f\"- {keyword['name']}\")\n```",
        "usage": [
            398,
            10458,
            10856
        ]
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# API url to get a list of popular movies\nurl_popular_movies = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1,  # for the first page\n    \"region\": \"US\"  # filtering by release region (example: US)\n}\n\n# Sending a GET request to get the list of popular movies\nresponse_popular_movies = requests.get(url_popular_movies, headers=headers, params=params)\n\n# Check if the request was successful\nif response_popular_movies.status_code == 200:\n    # Get the movie id of the most popular movie from the response\n    movie_id = response_popular_movies.json()[\"results\"][0][\"id\"]\n\n    # API url to get the keywords of a movie\n    url_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n\n    # Sending a GET request to get the keywords of the most popular movie\n    response_keywords = requests.get(url_keywords, headers=headers)\n\n    # Check if the request was successful\n    if response_keywords.status_code == 200:\n        # Extracting the keywords from the response\n        keywords = [keyword[\"name\"] for keyword in response_keywords.json()[\"keywords\"]]\n        print(keywords)\n    else:\n        print(\"Error in getting keywords.\")\nelse:\n    print(\"Error in getting popular movies.\")\n```",
        "usage": [
            298,
            9487,
            9785
        ]
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the API token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\"\n}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie ID of \"Titanic\"\nmovie_id = data['results'][0]['id']\n\n# Get the credits for the movie \"Titanic\"\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits_data = response.json()\n\n# Get the list of cast members who starred in the movie \"Titanic\"\ncast_list = []\nfor cast in credits_data['cast']:\n    cast_list.append(cast['name'])\n\nprint(cast_list)\n```",
        "usage": [
            356,
            10024,
            10380
        ]
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/company/4\"\n\n# Define the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers)\n\n# Parse the JSON response\ncompany_details = response.json()\n\n# Extract the logo path\nlogo_path = company_details[\"logo_path\"]\n\nprint(f\"The logo path for Paramount Pictures is: {logo_path}\")\n```\nThis code makes a GET request to the TMDB API to get the company details for Paramount Pictures (company_id=4) and then extracts and prints the logo's file path.",
        "usage": [
            298,
            7961,
            8259
        ]
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for companies\nurl = \"https://api.themoviedb.org/3/search/company\"\n\n# Define the query parameters to search for the company \"Universal Pictures\"\nparams = {\n    \"query\": \"Universal Pictures\",\n    \"page\": 1\n}\n\n# Make a GET request to search for the company \"Universal Pictures\"\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        universal_company_id = data[\"results\"][0][\"id\"]\n        \n        # Define the API url to get the company details by id\n        company_details_url = f\"https://api.themoviedb.org/3/company/{universal_company_id}\"\n        \n        # Make a GET request to get the company details for \"Universal Pictures\"\n        company_response = requests.get(company_details_url, headers=headers)\n\n        # Check if the request for company details was successful\n        if company_response.status_code == 200:\n            company_data = company_response.json()\n            headquarters = company_data[\"headquarters\"]\n            print(f\"Universal Pictures was founded in: {headquarters}\")\n        else:\n            print(\"Failed to retrieve company details\")\n    else:\n        print(\"Company 'Universal Pictures' not found\")\nelse:\n    print(\"Failed to search for companies\")\n```",
        "usage": [
            297,
            8534,
            8831
        ]
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nurl_search = \"https://api.themoviedb.org/3/search/movie\"\nparams_search = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nresponse_search = requests.get(url_search, headers=headers, params=params_search)\ndata_search = response_search.json()\n\n# Get the movie id of \"Titanic\"\nmovie_id = data_search[\"results\"][0][\"id\"]\n\n# Get the release dates for the movie \"Titanic\"\nurl_release_dates = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\nresponse_release_dates = requests.get(url_release_dates, headers=headers)\ndata_release_dates = response_release_dates.json()\n\n# Extract the release dates information\nfor result in data_release_dates[\"results\"]:\n    if result[\"iso_3166_1\"] == \"US\":  # Assuming release date for movie \"Titanic\" in US\n        release_date = result[\"release_dates\"][0][\"release_date\"]\n        print(f'The movie \"Titanic\" was released on: {release_date}')\n        break\n```",
        "usage": [
            421,
            9080,
            9501
        ]
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for the Star Wars collection\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the required parameters to search for the Star Wars collection\nparams_search_collection = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\n\n# Make the request to search for the Star Wars collection\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\n\n# Check if the request was successful\nif response_search_collection.status_code == 200:\n    # Get the collection ID of the first Star Wars collection\n    star_wars_collection_id = response_search_collection.json()['results'][0]['id']\n    \n    # Define the API endpoint to get details of the Star Wars collection by ID\n    url_collection_details = f\"https://api.themoviedb.org/3/collection/{star_wars_collection_id}\"\n    \n    # Make the request to get details of the Star Wars collection\n    response_collection_details = requests.get(url_collection_details, headers=headers)\n    \n    # Check if the request was successful\n    if response_collection_details.status_code == 200:\n        # Get the first movie ID in the Star Wars collection\n        first_movie_id = response_collection_details.json()['parts'][0]['id']\n        \n        # Define the API endpoint to get credits (cast and crew) for the first movie of Star Wars\n        url_movie_credits = f\"https://api.themoviedb.org/3/movie/{first_movie_id}/credits\"\n        \n        # Make the request to get credits for the first movie of Star Wars\n        response_movie_credits = requests.get(url_movie_credits, headers=headers)\n        \n        # Check if the request was successful\n        if response_movie_credits.status_code == 200:\n            # Get the cast details of the first movie of Star Wars\n            cast = response_movie_credits.json()['cast']\n            \n            # Extract the names of the actors who starred in the movie\n            actors = [actor['name'] for actor in cast]\n            \n            # Print the list of actors who starred in the first movie of Star Wars collection\n            print(\"Actors who starred in the first movie of Star Wars collection:\")\n            for actor in actors:\n                print(actor)\n        else:\n            print(\"Failed to retrieve credits for the first movie of Star Wars collection\")\n    else:\n        print(\"Failed to retrieve details of the Star Wars collection\")\nelse:\n    print(\"Failed to search for the Star Wars collection\")\n```",
        "usage": [
            527,
            7312,
            7839
        ]
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections with the query \"Harry Potter\"\nsearch_collection_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Harry Potter\"\n}\nresponse = requests.get(search_collection_url, headers=headers, params=params)\ncollection_data = response.json()\n\n# Get the collection id of Harry Potter\ncollection_id = collection_data['results'][0]['id']\n\n# Get the images for the collection with the specified id\ncollection_images_url = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\nresponse = requests.get(collection_images_url, headers=headers)\ncollection_images_data = response.json()\n\n# Extract the poster_path of the first image in the collection\nposter_url = f\"https://image.tmdb.org/t/p/w500{collection_images_data['posters'][0]['file_path']}\"\nprint(poster_url)\n```",
        "usage": [
            368,
            9514,
            9882
        ]
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/collection/10\"\n\n# Set the parameters\nparams = {\"api_key\": \"YOUR_API_KEY\"}  # Replace YOUR_API_KEY with your actual API key\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the keywords from the API response\n    keywords = response.json()[\"keywords\"]\n    keyword_names = [keyword[\"name\"] for keyword in keywords]\n    print(keyword_names)\nelse:\n    print(\"Failed to retrieve keywords\")\n```",
        "usage": [
            314,
            10164,
            10478
        ]
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# Set the API key and headers\napi_key = \"0dbab590c7eaca07ebel26974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the collection id of \"The Hobbit\"\ncollection_query = \"The Hobbit\"\ncollection_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": collection_query\n}\n\nresponse = requests.get(collection_url, headers=headers, params=params)\ncollection_data = response.json()\n\n# Get the collection id for \"The Hobbit\"\ncollection_id = collection_data['results'][0]['id']\n\n# Get the movies in the collection\nmovies_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse = requests.get(movies_url, headers=headers)\nmovies_data = response.json()\n\n# Extract the release dates of the movies in the collection\nrelease_dates = []\nfor movie in movies_data['parts']:\n    release_dates.append(movie['release_date'])\n\nprint(release_dates)\n```",
        "usage": [
            228,
            9880,
            10108
        ]
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for collections\nurl = \"https://api.themoviedb.org/3/search/collection\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Define the search query for The Fast and the Furious collection\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\n\n# Make a GET request to search for collections\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the movie list from the response\n    data = response.json()\n    movie_list = data['results']\n\n    # Print the list of movies from The Fast and the Furious collection\n    for movie in movie_list:\n        print(movie['name'])\nelse:\n    print(\"Error fetching data\")\n```",
        "usage": [
            330,
            9058,
            9388
        ]
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API URL for searching collections\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Parameters for searching The Fast and the Furious collection\nparams_collection = {\n    \"query\": \"The Fast and the Furious\",\n    \"page\": 1\n}\n\n# Make a GET request to search for the collection\nresponse_collection = requests.get(url_search_collection, headers=headers, params=params_collection)\n\n# Retrieve the collection id from the search results\ncollection_id = response_collection.json()[\"results\"][0][\"id\"]\n\n# Define the API URL for getting movie reviews\nurl_movie_reviews = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n# Make a GET request to get details of The Fast and the Furious collection\nresponse_movie_reviews = requests.get(url_movie_reviews, headers=headers)\n\n# Output the reviews of the movies in The Fast and the Furious collection\nprint(response_movie_reviews.json())\n```",
        "usage": [
            202,
            8853,
            9055
        ]
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\nimport requests\n\n# Set the API url to get the collection details by name\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the parameters for the query\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1\n}\n\n# Make the request to search for the collection\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the collection id from the response\n    collection_id = response.json()[\"results\"][0][\"id\"]\n    \n    # Set the API url to get the collection details by id\n    url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    \n    # Make the request to get the collection details\n    response = requests.get(url, headers=headers)\n    \n    # Check if the request was successful\n    if response.status_code == 200:\n        # Extract the first movie release date from the response\n        first_movie_release_date = response.json()[\"parts\"][0][\"release_date\"]\n        print(\"The first movie of the collection Lord of the Rings was released on:\", first_movie_release_date)\n    else:\n        print(\"Failed to get collection details by id.\")\nelse:\n    print(\"Failed to search for the collection.\")\n```",
        "usage": [
            281,
            9681,
            9962
        ]
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"House of Cards\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the TV show ID for House of Cards\ntv_show_id = search_results['results'][0]['id']\n\n# Get the credits for the first season of House of Cards\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/1/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_results = credits_response.json()\n\n# Extract the directors from the crew\ndirectors = [member['name'] for member in credits_results['crew'] if member['job'] == \"Director\"]\n\nprint(directors)\n```",
        "usage": [
            375,
            8598,
            8973
        ]
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the parameters\nparams = {\n    \"query\": \"House of Cards\",  # TV show to search for\n    \"include_adult\": False,  # Exclude adult content\n    \"page\": 1  # Specify page number\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse and print the results\n    results = response.json()\n    similar_shows = results[\"results\"]\n    for show in similar_shows:\n        print(show[\"name\"])\nelse:\n    print(\"Failed to retrieve similar TV shows.\")\n```",
        "usage": [
            340,
            8740,
            9080
        ]
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get a list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if there are any results\nif data.get(\"results\"):\n    tv_show = data[\"results\"][0]  # Get the most popular TV show currently on the air\n    start_date = tv_show[\"first_air_date\"]\n    print(\"The most popular TV show currently on the air started on:\", start_date)\nelse:\n    print(\"No results found\")\n```",
        "usage": [
            315,
            10462,
            10777
        ]
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\n# Step 1: Find the director id of Django Unchained\nimport requests\n\n# API url to search for movies\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Params to search for Django Unchained\nparams = {\n    \"query\": \"Django Unchained\",\n    \"include_adult\": False\n}\n\n# Send a GET request to search for Django Unchained\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the director id of Django Unchained\ndirector_id = data['results'][0]['id']\n\n# Step 2: Find other movies directed by the director\n# API url to get the person's movie credits\ndirector_credits_url = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\n\n# Send a GET request to get the movie credits of the director\nresponse_credits = requests.get(director_credits_url, headers=headers)\ndata_credits = response_credits.json()\n\n# Extract the list of movie titles directed by the director\nother_works = [movie['title'] for movie in data_credits['crew'] if movie['job'] == \"Director\"]\n\n# Output the list of other works directed by the director of Django Unchained\nprint(other_works)\n```",
        "usage": [
            281,
            8346,
            8627
        ]
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# API url for getting a list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1  # Specify the page number\n}\n\n# Headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if API call was successful\nif response.status_code == 200:\n    # Extracting the cast of the first show in the results\n    top_show_cast = response.json()[\"results\"][0][\"name\"]\n    print(\"Cast of the top show currently on the air:\", top_show_cast)\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            330,
            7777,
            8107
        ]
    },
    {
        "query": "I need a review for Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show with the query \"Breaking Bad\"\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Breaking Bad\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the TV show id for Breaking Bad\ntv_id = data['results'][0]['id']\n\n# Get the reviews for the TV show Breaking Bad\nurl_reviews = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\nresponse_reviews = requests.get(url_reviews, headers=headers)\ndata_reviews = response_reviews.json()\n\n# Print the reviews for Breaking Bad\nfor review in data_reviews['results']:\n    print(\"Author:\", review['author'])\n    print(\"Content:\", review['content'])\n    print(\"------------------------------\")\n```  ",
        "usage": [
            352,
            8947,
            9299
        ]
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show 'The Last Of Us' to get the TV ID\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Last Of Us\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\ntv_id = search_results['results'][0]['id']\n\n# Get recommendations for the TV show based on the TV ID\nrecommendation_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\nrecommendation_params = {}\nrecommendation_response = requests.get(recommendation_url, headers=headers, params=recommendation_params)\nrecommendation_results = recommendation_response.json()\n\n# Print the list of TV show recommendations\nfor result in recommendation_results['results']:\n    print(result['name'])\n```",
        "usage": [
            359,
            8535,
            8894
        ]
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "results": "```python\nimport requests\n\n# API url to search for The Last Of Us TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Last Of Us\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Calling the search API to get the TV show details\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the TV show ID for The Last Of Us\ntv_id = data[\"results\"][0][\"id\"]\n\n# API url to get recommendations for the TV show\nrecommendations_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\nparams = {\n    \"page\": 1\n}\n\n# Calling the recommendations API to get recommendations for The Last Of Us\nresponse = requests.get(recommendations_url, headers=headers, params=params)\nrecommendations = response.json()\n\n# Outputting the recommendations\nprint(recommendations)\n```",
        "usage": [
            215,
            10479,
            10694
        ]
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# First, get the TV show id for the show 'Friends'\nparams = {\n    \"query\": \"Friends\",\n    \"page\": 1\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Next, get the guest stars for season 3, episode 24 of Friends\nresponse = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/3/episode/24/credits\", headers=headers)\nguest_stars = response.json()[\"guest_stars\"]\n\n# Extract and print the names of the guest stars\nguest_star_names = [star[\"name\"] for star in guest_stars]\nprint(guest_star_names)\n```",
        "usage": [
            344,
            10134,
            10478
        ]
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Add the required parameters\nparams = {\n    \"page\": 1\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the data from the response\n    popular_tv_shows = response.json()[\"results\"]\n    \n    # Assuming lead actor is the first person in the cast list\n    lead_actor = popular_tv_shows[0][\"cast\"][0][\"name\"]\n    \n    print(\"The lead actor in the most popular TV show is:\", lead_actor)\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            344,
            8837,
            9181
        ]
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of top rated TV shows\ntop_rated_tv_url = \"https://api.themoviedb.org/3/tv/top_rated\"\nparams = {\"page\": 1}\nresponse = requests.get(top_rated_tv_url, headers=headers, params=params)\ntop_rated_tv_data = response.json()\n\n# Get the tv_id of the top-1 rated TV show\ntop_rated_tv_id = top_rated_tv_data[\"results\"][0][\"id\"]\n\n# Call the API to get the keywords of the top-1 rated TV show\ntv_keywords_url = f\"https://api.themoviedb.org/3/tv/{top_rated_tv_id}/keywords\"\nresponse = requests.get(tv_keywords_url, headers=headers)\nkeywords_data = response.json()\n\n# Extract the keyword of the top-1 rated TV show\ntop_rated_tv_keyword = keywords_data[\"results\"][0][\"name\"]\n\nprint(top_rated_tv_keyword)\n```",
        "usage": [
            374,
            9305,
            9679
        ]
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"2 Broke Girls\" to get the show ID\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_search_params = {\"query\": \"2 Broke Girls\"}\nresponse = requests.get(tv_search_url, headers=headers, params=tv_search_params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the details of the TV show including the poster\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\nresponse = requests.get(tv_details_url, headers=headers)\nposter_path = response.json()[\"poster_path\"]\n\n# Print the URL of the poster image\nbase_image_url = \"https://image.tmdb.org/t/p/original\"\nposter_url = base_image_url + poster_path\nprint(poster_url)\n```",
        "usage": [
            354,
            9671,
            10025
        ]
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/company"
        ],
        "results": "```python\nimport requests\n\n# Set the API url for searching TV shows\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the query parameters\nparams = {\n    \"query\": \"2 Broke Girls\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show id for \"2 Broke Girls\"\ntv_show_id = data[\"results\"][0][\"id\"]\n\n# Set the API url for getting TV show details by id\nurl = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\ntv_show_data = response.json()\n\n# Get the number of episodes\ntotal_episodes = tv_show_data[\"number_of_episodes\"]\n\nprint(f\"Total episodes of '2 Broke Girls': {total_episodes}\")\n```",
        "usage": [
            208,
            13026,
            13234
        ]
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\n# Setting up the required headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show 'The Big Bang Theory' to get the production company id\nparams_tv_search = {\n    \"query\": \"The Big Bang Theory\",\n    \"page\": 1\n}\nresponse_tv_search = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params_tv_search)\ntv_search_results = response_tv_search.json()\nproduction_company_id = tv_search_results['results'][0]['production_company'][0]['id']\n\n# Get the details of the production company\nresponse_company_details = requests.get(f\"https://api.themoviedb.org/3/company/{production_company_id}\", headers=headers)\ncompany_details = response_company_details.json()\nfoundation_date = company_details['start_date']\n\nprint(f\"The company that produced 'The Big Bang Theory' was founded on: {foundation_date}\")\n```",
        "usage": [
            355,
            10059,
            10414
        ]
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the required Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to search for the TV show \"The Big Bang Theory\"\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Big Bang Theory\"\n}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the creation date of the TV show from the response\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        first_air_date = data[\"results\"][0][\"first_air_date\"]\n        print(\"The TV show 'The Big Bang Theory' was first aired on:\", first_air_date)\n    else:\n        print(\"TV show not found in the database.\")\nelse:\n    print(\"Error in fetching data. Status code:\", response.status_code)\n```",
        "usage": [
            351,
            11428,
            11779
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the TV popular API to get a list of the popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    # Get the first TV show from the results\n    first_tv_show = data['results'][0]\n    tv_id = first_tv_show['id']\n    \n    # Call the keywords API for the TV show\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    response = requests.get(url, headers=headers)\n\n    if response.status_code == 200:\n        keyword_data = response.json()\n        keyword = keyword_data['results'][0]['name']\n        print(f\"The keyword of the most popular TV show is: {keyword}\")\n    else:\n        print(\"Failed to get keyword data for the TV show\")\nelse:\n    print(\"Failed to get popular TV show data\")\n```",
        "usage": [
            398,
            7558,
            7956
        ]
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}\"\ntv_id = 63247  # Westworld's TV show id\nseason_number = 2\nepisode_number = 3\n\n# Replace the variables in the url\nurl = url.format(tv_id=tv_id, season_number=season_number, episode_number=episode_number)\n\n# Set the headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the overview of the third episode of the second season of Westworld\n    episode_overview = data[\"overview\"]\n    \n    print(episode_overview)\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            373,
            10716,
            11089
        ]
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show 'Game of Thrones' to get the ID\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Game of Thrones\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\ngame_of_thrones_id = search_results['results'][0]['id']\n\n# Get the details of Season 2 using the TV show ID\nseason_url = f\"https://api.themoviedb.org/3/tv/{game_of_thrones_id}/season/2\"\nseason_response = requests.get(season_url, headers=headers)\nseason_details = season_response.json()\nair_date = season_details['air_date']\n\nprint(\"Air date of the second season of Game of Thrones:\", air_date)\n```",
        "usage": [
            351,
            8200,
            8551
        ]
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# Http headers to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Band of Brothers\"\nbase_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Band of Brothers\",\n    \"include_adult\": False\n}\nresponse = requests.get(base_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show id\ntv_show_id = data['results'][0]['id']\n\n# Get the details of the first season of \"Band of Brothers\"\nseason_number = 1\nseason_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/{season_number}\"\nresponse = requests.get(season_url, headers=headers)\nseason_data = response.json()\n\n# Get the poster of the third episode\nepisode_number = 3\nepisode = season_data['episodes'][episode_number - 1]\nposter_path = episode['still_path']\n\nif poster_path:\n    poster_url = f\"https://image.tmdb.org/t/p/original/{poster_path}\"\n    print(poster_url)\nelse:\n    print(\"No poster found for the third episode of Band of Brothers.\")\n```",
        "usage": [
            417,
            9429,
            9846
        ]
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the API URL to get the primary TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/1399\"\n\n# Define the parameters (if any)\nparams = {}\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Get the list of production companies\n    production_companies = data.get('production_companies', [])\n    # Find the production company with the name \"Home Box Office (HBO)\"\n    for company in production_companies:\n        if company.get('name') == \"Home Box Office (HBO)\":\n            # Get the logo path of the network\n            logo_path = company.get('logo_path')\n            if logo_path:\n                print(f\"Logo of the network that produced Game of Thrones: https://image.tmdb.org/t/p/original{logo_path}\")\n            else:\n                print(\"Logo path is not available for the network.\")\n            break\n    else:\n        print(\"Network 'Home Box Office (HBO)' not found in production companies.\")\nelse:\n    print(\"Error occurred while fetching data.\")\n```",
        "usage": [
            443,
            9968,
            10411
        ]
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters to search for Game of Thrones\nparams_search_tv = {\n    \"query\": \"Game of Thrones\",\n    \"include_adult\": False\n}\n\n# Call the API to search for TV shows\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Extract the network ID from the search results\nnetwork_id = data_search_tv['results'][0]['networks'][0]['id']\n\n# Define the API url to get network details\nurl_network = f\"https://api.themoviedb.org/3/network/{network_id}\"\n\n# Call the API to get network details\nresponse_network = requests.get(url_network, headers=headers)\ndata_network = response_network.json()\n\n# Output the homepage of the network that produced Game of Thrones\nprint(data_network['homepage'])\n```",
        "usage": [
            213,
            9177,
            9390
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Send the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the data from the response\n    data = response.json()\n    # Get the first TV show result\n    tv_show = data[\"results\"][0]\n    # Get the TV show id\n    tv_id = tv_show[\"id\"]\n\n    # Call the API to get the keywords of the most popular TV show\n    keyword_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    keyword_response = requests.get(keyword_url, headers=headers)\n    \n    # Check if the keyword response is successful\n    if keyword_response.status_code == 200:\n        # Get the keyword data from the response\n        keyword_data = keyword_response.json()\n        # Get the first keyword if available\n        keyword = keyword_data[\"results\"][0][\"name\"]\n        print(\"Keyword of the most popular TV show currently:\", keyword)\n    else:\n        print(\"Failed to retrieve keywords\")\nelse:\n    print(\"Failed to retrieve TV shows\")\n\n```",
        "usage": [
            455,
            10851,
            11306
        ]
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "results": "```python\nimport requests\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of current popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\n    \"page\": 1\n}\nresponse_tv = requests.get(url_popular_tv, headers=headers, params=params)\ndata_tv = response_tv.json()\n\n# Get the company id that produced the most popular TV show\ncompany_id = data_tv['results'][0]['production_companies'][0]['id']\n\n# Get the company details using the company id\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse_company = requests.get(url_company, headers=headers)\ndata_company = response_company.json()\n\n# Get the headquarters of the company\nheadquarters = data_company['headquarters']\n\nprint(headquarters)\n```",
        "usage": [
            348,
            11446,
            11794
        ]
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv"
        ],
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for 'The Mandalorian'\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Mandalorian\",\n    \"page\": 1\n}\n\nresponse = requests.get(search_url, headers=headers, params=search_params)\nresults = response.json()\n\n# Get the TV show id for 'The Mandalorian'\ntv_id = results['results'][0]['id']\n\n# Get details for 'The Mandalorian'\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\ndetails_params = {}\n\nresponse = requests.get(tv_details_url, headers=headers, params=details_params)\ndetails = response.json()\n\n# Extract the genre of 'The Mandalorian'\ngenre_ids = details['genres']\ngenres = [genre['name'] for genre in genre_ids]\n\nprint(\"The genre of The Mandalorian is:\", genres)\n```",
        "usage": [
            367,
            10641,
            11008
        ]
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "results": "```python\nimport requests\n\n# API url to get the daily trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Call the API to get the trending TV shows\nresponse = requests.get(url, headers=headers)\n# Parse the response to get the lead actor's birthday\nif response.status_code == 200:\n    trending_shows = response.json().get('results')\n    if trending_shows:\n        # Assuming the first show in the list is the most trending show\n        lead_actor_id = trending_shows[0].get('credits', {}).get('cast', [])[0].get('id')\n        # Using the lead actor's id to get the details\n        person_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n        person_response = requests.get(person_url, headers=headers)\n        if person_response.status_code == 200:\n            lead_actor_birthday = person_response.json().get('birthday')\n            print(f\"The birthday of the lead actor of today's most trending TV show is: {lead_actor_birthday}\")\n        else:\n            print(f\"Failed to get the lead actor's details. Status code: {person_response.status_code}\")\n    else:\n        print(\"No trending TV shows found.\")\nelse:\n    print(f\"Failed to get trending TV shows. Status code: {response.status_code}\")\n```",
        "usage": [
            469,
            11974,
            12443
        ]
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the today's trending TV shows\nurl_trending = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending = requests.get(url_trending, headers=headers)\ndata_trending = response_trending.json()\n\n# Get the network id of the most trending TV show\nnetwork_id = data_trending['results'][0]['networks'][0]['id']\n\n# Get the details of the network\nurl_network = f\"https://api.themoviedb.org/3/network/{network_id}\"\nresponse_network = requests.get(url_network, headers=headers)\ndata_network = response_network.json()\n\n# Get the homepage of the network\nnetwork_homepage = data_network['homepage']\n\nprint(network_homepage)\n```",
        "usage": [
            330,
            10481,
            10811
        ]
    },
    {
        "query": "give me a review of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the header with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the data from the response\n    data = response.json()\n    \n    # Get the TV show id of the most trending TV show\n    tv_id = data['results'][0]['id']\n    \n    # Call the API to get the reviews for the most trending TV show\n    review_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\n    review_response = requests.get(review_url, headers=headers)\n    \n    # Check if the review response is successful\n    if review_response.status_code == 200:\n        # Get the reviews data\n        review_data = review_response.json()\n        \n        # Print the reviews\n        print(\"Reviews of today's most trending TV show:\")\n        for review in review_data['results']:\n            print(f\"Author: {review['author']}\")\n            print(f\"Content: {review['content']}\")\n            print(\"-------\")\n    else:\n        print(\"Failed to get the reviews data\")\nelse:\n    print(\"Failed to get the trending TV shows data\")\n```",
        "usage": [
            460,
            8452,
            8912
        ]
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get today's trending TV shows\ntrending_tv_response = requests.get(\"https://api.themoviedb.org/3/trending/tv/day\", headers=headers)\nif trending_tv_response.status_code == 200:\n    trending_tv_data = trending_tv_response.json()\n    # Extract the most trending TV show\n    most_trending_tv_id = trending_tv_data['results'][0]['id']\n    \n    # Get similar TV shows to the most trending TV show\n    similar_tv_response = requests.get(f\"https://api.themoviedb.org/3/tv/{most_trending_tv_id}/similar\", headers=headers)\n    if similar_tv_response.status_code == 200:\n        similar_tv_data = similar_tv_response.json()\n        # Display list of similar TV shows\n        similar_tv_list = similar_tv_data['results']\n        for show in similar_tv_list:\n            print(show['name'])\n    else:\n        print(\"Failed to fetch similar TV shows\")\nelse:\n    print(\"Failed to fetch trending TV shows\")\n```",
        "usage": [
            388,
            10381,
            10769
        ]
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url for getting today's trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    \n    # Extract the poster path of the first trending TV show\n    trending_tv_show_poster = data['results'][0]['poster_path']\n    \n    print(\"Poster of today's most trending TV show:\")\n    print(trending_tv_show_poster)\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            330,
            9140,
            9470
        ]
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for 'Jeremy Clarkson' to get his person ID\nparams = {\"query\": \"Jeremy Clarkson\", \"include_adult\": False}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\ndata = response.json()\nperson_id = data[\"results\"][0][\"id\"]\n\n# Get the TV credits for Jeremy Clarkson\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\ntv_credits = response.json()\n\n# Get the most popular TV show ID for Jeremy Clarkson\nmost_popular_tv_show = max(tv_credits[\"cast\"], key=lambda x: x[\"popularity\"])\ntv_id = most_popular_tv_show[\"id\"]\n\n# Get details of the most popular TV show\ntv_show_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\nresponse = requests.get(tv_show_url, headers=headers)\ntv_show_details = response.json()\n\n# Get the credits for the most popular TV show\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ntv_credits = response.json()\n\n# Find out who has worked with Jeremy Clarkson in his most popular TV show\ncast_list = tv_credits[\"cast\"]\ncollaborators = set()\nfor cast_member in cast_list:\n    if cast_member[\"name\"] != \"Jeremy Clarkson\":\n        collaborators.add(cast_member[\"name\"])\n\nprint(collaborators)\n```",
        "usage": [
            514,
            8383,
            8897
        ]
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n# Define the API url for getting the credits of a TV show\nurl_tv_credits = \"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n# Define the API url for getting images of a person\nurl_person_images = \"https://api.themoviedb.org/3/person/{person_id}/images\"\n\n# Set the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Black Mirror\"\nparams_search_tv = {\n    \"query\": \"Black Mirror\",\n    \"page\": 1\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_show_id = response_search_tv.json()['results'][0]['id']\n\n# Get the TV show credits\nurl_tv_credits = url_tv_credits.format(tv_id=tv_show_id)\nresponse_tv_credits = requests.get(url_tv_credits, headers=headers)\nlead_actor_id = response_tv_credits.json()['cast'][0]['id']\n\n# Get the images of the lead actor\nurl_person_images = url_person_images.format(person_id=lead_actor_id)\nresponse_person_images = requests.get(url_person_images, headers=headers)\nlead_actor_image_path = response_person_images.json()[\"profiles\"][0][\"file_path\"]\n\nprint(\"Lead Actor Image Path:\", lead_actor_image_path)\n```",
        "usage": [
            473,
            7576,
            8049
        ]
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for \"The Mandalorian\" TV show\nurl_tv_search = \"https://api.themoviedb.org/3/search/tv\"\nparams_tv_search = {\n    \"query\": \"The Mandalorian\",\n    \"page\": 1\n}\nresponse_tv_search = requests.get(url_tv_search, headers=headers, params=params_tv_search)\ndata_tv_search = response_tv_search.json()\n\n# Get the TV show ID for \"The Mandalorian\"\ntv_id = data_tv_search['results'][0]['id']\n\n# Get the credits for \"The Mandalorian\" TV show\nurl_tv_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\nresponse_tv_credits = requests.get(url_tv_credits, headers=headers)\ndata_tv_credits = response_tv_credits.json()\n\n# Get the lead actor's ID for \"The Mandalorian\"\nlead_actor_id = data_tv_credits['cast'][0]['id']\n\n# Get the lead actor's details\nurl_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse_person = requests.get(url_person, headers=headers)\ndata_person = response_person.json()\n\n# Extract the birthdate of the lead actor\nlead_actor_birthdate = data_person['birthday']\n\nprint(f\"The lead actor of The Mandalorian was born on: {lead_actor_birthdate}\")\n```",
        "usage": [
            463,
            10202,
            10665
        ]
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of popular TV shows airing today\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/airing_today\"\nparams_popular_tv = {\"page\": 1}\nresponse_popular_tv = requests.get(url_popular_tv, headers=headers, params=params_popular_tv)\ndata_popular_tv = response_popular_tv.json()\n\n# Get the TV show ID of the most popular TV show\nmost_popular_show_id = data_popular_tv[\"results\"][0][\"id\"]\n\n# Get the credits (cast and crew) of the most popular TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{most_popular_show_id}/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the lead actor of the most popular TV show\nlead_actor = data_credits[\"cast\"][0][\"name\"]\n\nprint(f\"The lead actor of today's most popular TV show is: {lead_actor}\")\n```",
        "usage": [
            395,
            7530,
            7925
        ]
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\n# Set the API url to get the list of popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the parameters to get the first page of popular TV shows\nparams = {\n    \"page\": 1\n}\n\n# Call the API to get the list of popular TV shows\nresponse = requests.get(url, headers=headers, params=params)\npopular_tv_shows = response.json()\n\n# Get the id of the most popular TV show\nmost_popular_show_id = popular_tv_shows['results'][0]['id']\n\n# Set the API url to get the credits of the most popular TV show\ncredits_url = f\"https://api.themoviedb.org/3/tv/{most_popular_show_id}/credits\"\n\n# Call the API to get the credits of the most popular TV show\nresponse_credits = requests.get(credits_url, headers=headers)\ncredits = response_credits.json()\n\n# Get the profile path of the lead actor of the most popular TV show\nlead_actor_profile_path = credits['cast'][0]['profile_path']\n\n# Print the full image url of the lead actor\nif lead_actor_profile_path:\n    image_url = f\"https://image.tmdb.org/t/p/w500{lead_actor_profile_path}\"\n    print(\"The photo of the lead actor of the most popular TV show of this week:\")\n    print(image_url)\nelse:\n    print(\"Lead actor profile path not available.\")\n```",
        "usage": [
            307,
            8336,
            8643
        ]
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\n# Http header for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Cate Blanchett's latest TV show\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Cate Blanchett\",\n}\nresponse = requests.get(person_search_url, headers=headers, params=params)\nperson_id = response.json()['results'][0]['id']\n\n# Get the TV show credits for Cate Blanchett\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\nlatest_tv_show_id = response.json()['cast'][0]['id']\n\n# Get the reviews for Cate Blanchett's latest TV show\ntv_reviews_url = f\"https://api.themoviedb.org/3/tv/{latest_tv_show_id}/reviews\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(tv_reviews_url, headers=headers, params=params)\nreviews = response.json()['results']\n\nprint(reviews)\n```",
        "usage": [
            393,
            9605,
            9998
        ]
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for David Schwimmer\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\nresults = response.json()\n\n# Get David Schwimmer's ID\nperson_id = results['results'][0]['id']\n\n# Get the TV show credits for David Schwimmer\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(url, headers=headers)\ntv_credits = response.json()\n\n# Find the most popular TV show\nmax_popularity = 0.0\nmost_popular_tv_show = \"\"\nfor credit in tv_credits['cast']:\n    if credit['popularity'] > max_popularity:\n        max_popularity = credit['popularity']\n        most_popular_tv_show = credit['name']\n\nprint(most_popular_tv_show)\n```",
        "usage": [
            384,
            11778,
            12162
        ]
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/42009/season/2\"\n\n# Define the parameters\nparams = {\n    \"api_key\": \"YOUR_API_KEY\" # Don't forget to replace YOUR_API_KEY with your actual API key\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the crew information for the third episode of the second season\n    for episode in data[\"episodes\"]:\n        if episode[\"episode_number\"] == 3:\n            for crew_member in episode[\"crew\"]:\n                if crew_member[\"job\"] == \"Director\":\n                    director_name = crew_member[\"name\"]\n                    print(f\"The director of the third episode of the second season of Black Mirror is: {director_name}\")\n                    break\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            229,
            11034,
            11263
        ]
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# The API url to search for a person\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Parameters for the query\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\n\n# Adding the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Getting the results\nresults = response.json()\n\n# Extracting known_for movies of Christopher Nolan\nknown_for_movies = results['results'][0]['known_for']\n\n# Printing the known_for movies\nfor movie in known_for_movies:\n    print(movie['original_title'])\n```",
        "usage": [
            309,
            8942,
            9251
        ]
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Function to get movie details by title\ndef get_movie_details(title):\n    url = \"https://api.themoviedb.org/3/search/movie\"\n    params = {\n        \"query\": title\n    }\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n    return data\n\n# Get movie details for Avatar\navatar_data = get_movie_details(\"Avatar\")\n\n# Get movie details for Avatar: The Way of Water\navatar_water_data = get_movie_details(\"Avatar: The Way of Water\")\n\n# Check which movie has a higher rating\nif avatar_data[\"results\"][0][\"vote_average\"] > avatar_water_data[\"results\"][0][\"vote_average\"]:\n    print(\"Avatar has a higher rating.\")\nelse:\n    print(\"Avatar: The Way of Water has a higher rating.\")\n```",
        "usage": [
            220,
            8830,
            9050
        ]
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ],
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"YOUR_API_KEY\"\n\n# Set the headers with the authorization token\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Set the base url for the discover movie API\nbase_url = \"https://api.themoviedb.org/3/discover/movie\"\n\n# Set the parameters for the API request\nparams = {\n    \"api_key\": api_key,\n    \"language\": \"en-US\",\n    \"sort_by\": \"vote_average.desc\",\n    \"vote_average.gte\": 7.0,\n    \"primary_release_date.gte\": \"2021-01-01\",\n    \"with_original_language\": \"en\",\n    \"page\": 1\n}\n\n# Make the API request\nresponse = requests.get(base_url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting relevant information from the response\nmovies = data[\"results\"]\n\nfor movie in movies:\n    title = movie[\"title\"]\n    release_date = movie[\"release_date\"]\n    rating = movie[\"vote_average\"]\n    print(f\"Title: {title}, Release Date: {release_date}, Rating: {rating}\")\n```",
        "usage": [
            247,
            11354,
            11601
        ]
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Lord of the Rings\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\"query\": \"Lord of the Rings\"}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the genre of the first movie in the search results\nfirst_movie_id = data_search_movie['results'][0]['id']\nurl_get_movie_details = f\"https://api.themoviedb.org/3/movie/{first_movie_id}\"\nparams_get_movie_details = {}\nresponse_get_movie_details = requests.get(url_get_movie_details, headers=headers, params=params_get_movie_details)\ndata_get_movie_details = response_get_movie_details.json()\n\n# Extract the genre of the movie\ngenre_ids = data_get_movie_details['genres']\ngenres = [genre['name'] for genre in genre_ids]\n\nprint(genres)\n```",
        "usage": [
            372,
            8538,
            8910
        ]
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Sending the GET request\nresponse = requests.get(url, headers=headers)\n\n# Parsing the response and extracting the birthday of the most popular person\nif response.status_code == 200:\n    data = response.json()\n    most_popular_person = data['results'][0]  # The most popular person is the first entry in the 'results' list\n    birthday = most_popular_person['birthday']\n    print(\"The birthday of the most popular person right now is:\", birthday)\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            316,
            10568,
            10884
        ]
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers containing the Bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Big Bang Theory\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Big Bang Theory\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show ID for \"Big Bang Theory\"\ntv_id = data_search_tv[\"results\"][0][\"id\"]\n\n# Get the images for the second season of \"Big Bang Theory\"\nurl_season_images = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/images\"\nresponse_season_images = requests.get(url_season_images, headers=headers)\ndata_season_images = response_season_images.json()\n\n# Extract the poster for the second season\nposter_path = data_season_images[\"posters\"][0][\"file_path\"]\nprint(poster_path)\n```",
        "usage": [
            375,
            8205,
            8580
        ]
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2/episode/3\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    third_episode_name = data[\"name\"]\n    print(\"Name of the third episode of the second season of Mandalorian:\", third_episode_name)\nelse:\n    print(\"Unable to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            303,
            11065,
            11368
        ]
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the movie The Shawshank Redemption to get the movie ID\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\nmovie_id = \"\"\nif response.status_code == 200:\n    result = response.json()\n    if result[\"total_results\"] > 0:\n        movie_id = result[\"results\"][0][\"id\"]\n\n# Step 2: Get the credits for the movie to find the lead actor\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\nlead_actor_birthday = \"\"\nif response.status_code == 200:\n    credits = response.json()\n    lead_actor_id = credits[\"cast\"][0][\"id\"]  # Assuming the first cast member is the lead actor\n\n    # Step 3: Get the details of the lead actor to retrieve birthday\n    person_details_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n    response = requests.get(person_details_url, headers=headers)\n    if response.status_code == 200:\n        person_details = response.json()\n        lead_actor_birthday = person_details[\"birthday\"]\n\nprint(\"Birthday of the lead actor of The Shawshank Redemption is:\", lead_actor_birthday)\n```",
        "usage": [
            486,
            9117,
            9603
        ]
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# The Shawshank Redemption movie id\nmovie_id = 278\n\n# Call the movie details API to get the director information\nmovie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nparams = {\"append_to_response\": \"credits\"}\nresponse = requests.get(movie_details_url, headers=headers, params=params)\n\nif response.status_code == 200:\n    movie_details = response.json()\n    # Get the director's id from the credits section\n    credits = movie_details.get(\"credits\", {})\n    crew = credits.get(\"crew\", [])\n    director_id = None\n    for member in crew:\n        if member[\"job\"] == \"Director\":\n            director_id = member[\"id\"]\n            break\n    \n    if director_id:\n        # Call the person details API to get the birthday of the director\n        person_details_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n        response = requests.get(person_details_url, headers=headers)\n        \n        if response.status_code == 200:\n            director_details = response.json()\n            director_name = director_details.get(\"name\", \"\")\n            director_birthday = director_details.get(\"birthday\", \"\")\n            print(f\"The birthday of the director of The Shawshank Redemption ({director_name}) is on {director_birthday}.\")\n        else:\n            print(\"Failed to get director details.\")\n    else:\n        print(\"Director not found for the movie.\")\nelse:\n    print(\"Failed to get movie details.\")\n```",
        "usage": [
            314,
            8983,
            9297
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/popular"
        ],
        "results": "```python\nimport requests\n\n# Set the API url for searching movies\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the query parameters to search for 'The Shawshank Redemption'\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\",\n    \"year\": 1994,\n    \"primary_release_year\": 1994\n}\n\n# Make the API request to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the company ID that created 'The Shawshank Redemption'\ncompany_id = data_search_movie['results'][0]['id']\n\n# Set the API url to get details of the company by ID\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\n\n# Make the API request to get details of the company\nresponse_company = requests.get(url_company, headers=headers)\ndata_company = response_company.json()\n\n# Get the headquarter location of the company\nheadquarter_location = data_company['headquarters']\n\nprint(headquarter_location)\n```",
        "usage": [
            261,
            9735,
            9996
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching the collection\nurl = \"https://api.themoviedb.org/3/search/collection\"\n# Set the query parameter to search for the collection Star Wars\nparams = {\n    \"query\": \"Star Wars\"\n}\n# Make the GET request to search for the collection\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the company_id of the company that created the Star Wars collection\ncompany_id = None\nif data[\"total_results\"] > 0:\n    company_id = data[\"results\"][0][\"id\"]\n\n# If company_id is found, get the company details to find the headquarters\nheadquarters = None\nif company_id:\n    # Define the API url to get the company details by id\n    company_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    # Make the GET request to get the company details\n    company_response = requests.get(company_url, headers=headers)\n    company_data = company_response.json()\n    \n    # Extract the headquarters of the company\n    headquarters = company_data.get(\"headquarters\")\n\nprint(headquarters)\n```",
        "usage": [
            246,
            10809,
            11055
        ]
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for 'The Double Life of Veronique'\nsearch_params_veronique = {\n    \"query\": \"The Double Life of Veronique\",\n    \"include_adult\": False\n}\nresponse_veronique = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=search_params_veronique)\nveronique_results = response_veronique.json()[\"results\"]\nveronique_release_date = veronique_results[0][\"release_date\"]\n\n# Search for 'Mulholland Drive'\nsearch_params_mulholland = {\n    \"query\": \"Mulholland Drive\",\n    \"include_adult\": False\n}\nresponse_mulholland = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=search_params_mulholland)\nmulholland_results = response_mulholland.json()[\"results\"]\nmulholland_release_date = mulholland_results[0][\"release_date\"]\n\n# Comparing release dates\nif veronique_release_date < mulholland_release_date:\n    print(\"The Double Life of Veronique has an earlier release date than Mulholland Drive.\")\nelse:\n    print(\"Mulholland Drive has an earlier release date than The Double Life of Veronique.\")\n```",
        "usage": [
            440,
            10625,
            11065
        ]
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get credits (cast and crew) for TV show by id\ndef get_credits_for_tv_show(tv_id):\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    response = requests.get(url, headers=headers)\n    data = response.json()\n    return data\n\n# Function to get the director for a specific TV show\ndef get_director(tv_credits):\n    for crew_member in tv_credits['crew']:\n        if crew_member['job'] == 'Director':\n            return crew_member['name']\n    return None\n\n# Get the credits for Twin Peaks Season 1\ntwin_peaks_season_1_id = 82  # Twin Peaks Season 1 TV id\ntwin_peaks_season_1_credits = get_credits_for_tv_show(twin_peaks_season_1_id)\ndirector_twin_peaks_season_1 = get_director(twin_peaks_season_1_credits)\n\n# Get the credits for Mulholland Drive\nmulholland_drive_id = 321  # Mulholland Drive TV id\nmulholland_drive_credits = get_credits_for_tv_show(mulholland_drive_id)\ndirector_mulholland_drive = get_director(mulholland_drive_credits)\n\n# Check if the directors are the same\nif director_twin_peaks_season_1 is not None and director_mulholland_drive is not None:\n    if director_twin_peaks_season_1 == director_mulholland_drive:\n        print(f\"The director of Twin Peaks Season 1 and Mulholland Drive is the same person: {director_twin_peaks_season_1}\")\n    else:\n        print(\"The directors are different.\")\nelse:\n    print(\"Director information not found for one or both TV shows.\")\n```",
        "usage": [
            550,
            9129,
            9679
        ]
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie Mulholland Drive\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Mulholland Drive\"\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\nmovie_id = response_search_movie.json()[\"results\"][0][\"id\"]\n\n# Get the primary information about the movie Mulholland Drive\nurl_movie_info = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nparams_movie_info = {}\nresponse_movie_info = requests.get(url_movie_info, headers=headers, params=params_movie_info)\ndirector_id = response_movie_info.json()[\"belongs_to_collection\"][\"id\"]\n\n# Get the primary person details for the director of Mulholland Drive\nurl_director_info = f\"https://api.themoviedb.org/3/person/{director_id}\"\nparams_director_info = {}\nresponse_director_info = requests.get(url_director_info, headers=headers, params=params_director_info)\ndirector_birthplace = response_director_info.json()[\"place_of_birth\"]\n\nprint(\"The director of Mulholland Drive was born in:\", director_birthplace)\n```",
        "usage": [
            423,
            9254,
            9677
        ]
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\nimport requests\n\n# API url to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Parameters for the API call\nparams = {\n    \"page\": 1\n}\n\n# Headers needed for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    # Extract the list of movies from the response\n    movie_list = response.json()[\"results\"]\n    \n    # Check if Mulholland Drive is in the top-10 rated list\n    mulholland_drive_in_top_10 = False\n    for i, movie in enumerate(movie_list):\n        if movie[\"title\"] == \"Mulholland Drive\":\n            print(\"Mulholland Drive is in the top rated list at position:\", i+1)\n            mulholland_drive_in_top_10 = True\n            break\n    if not mulholland_drive_in_top_10:\n        print(\"Mulholland Drive is not in the top-10 rated list.\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            417,
            8399,
            8816
        ]
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"YOUR_API_KEY\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Define the API urls to get the credits for the directors' movies\nakira_kurosawa_url = \"https://api.themoviedb.org/3/search/person\"\nspielberg_url = \"https://api.themoviedb.org/3/search/person\"\n\n# Search for Akira Kurosawa\nakira_params = {\n    \"query\": \"Akira Kurosawa\",\n    \"include_adult\": \"false\"\n}\nakira_response = requests.get(akira_kurosawa_url, headers=headers, params=akira_params)\nakira_data = akira_response.json()\n\n# Search for Spielberg\nspielberg_params = {\n    \"query\": \"Steven Spielberg\",\n    \"include_adult\": \"false\"\n}\nspielberg_response = requests.get(spielberg_url, headers=headers, params=spielberg_params)\nspielberg_data = spielberg_response.json()\n\n# Count the total number of movies directed by each director\nakira_movie_count = 0\nspielberg_movie_count = 0\n\nif akira_response.status_code == 200:\n    # Check the results for Akira Kurosawa\n    for person in akira_data[\"results\"]:\n        if person[\"name\"] == \"Akira Kurosawa\":\n            akira_id = person[\"id\"]\n            akira_movie_credits_url = f\"https://api.themoviedb.org/3/person/{akira_id}/movie_credits\"\n            akira_credits_response = requests.get(akira_movie_credits_url, headers=headers)\n            if akira_credits_response.status_code == 200:\n                akira_movie_count = len(akira_credits_response.json()[\"crew\"])\n            break\n\nif spielberg_response.status_code == 200:\n    # Check the results for Spielberg\n    for person in spielberg_data[\"results\"]:\n        if person[\"name\"] == \"Steven Spielberg\":\n            spielberg_id = person[\"id\"]\n            spielberg_movie_credits_url = f\"https://api.themoviedb.org/3/person/{spielberg_id}/movie_credits\"\n            spielberg_credits_response = requests.get(spielberg_movie_credits_url, headers=headers)\n            if spielberg_credits_response.status_code == 200:\n                spielberg_movie_count = len(spielberg_credits_response.json()[\"crew\"])\n            break\n\n# Compare the movie counts for Akira Kurosawa and Spielberg\nif akira_movie_count > spielberg_movie_count:\n    print(\"Akira Kurosawa directed more movies.\")\nelif spielberg_movie_count > akira_movie_count:\n    print(\"Steven Spielberg directed more movies.\")\nelse:\n    print(\"Both Akira Kurosawa and Steven Spielberg directed the same number of movies.\")\n```",
        "usage": [
            591,
            11116,
            11707
        ]
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the director of Mulholland Drive (David Lynch)\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params={\"query\": \"David Lynch\"})\ndirector_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the TV show credits for the director\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{director_id}/tv_credits\", headers=headers)\ntv_credits = response.json()[\"cast\"]\n\n# Find the TV shows directed by the director\ntv_series_directed = []\nfor credit in tv_credits:\n    if credit[\"job\"] == \"Director\":\n        tv_series_directed.append(credit[\"name\"])\n\nprint(tv_series_directed)\n```",
        "usage": [
            336,
            11104,
            11440
        ]
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "results": "```python\nimport requests\n\n# API url to get person details by id\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Parameters for the query\nparams = {\n    \"query\": \"Scarlett Johansson\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Adding the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parsing the JSON response\ndata = response.json()\n\n# Getting the id of Scarlett Johansson from the response\nperson_id = data['results'][0]['id']\n\n# API url to get person details by id\nurl = f\"https://api.themoviedb.org/3/person/{person_id}\"\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Parsing the JSON response\ndata = response.json()\n\n# Getting the birthday of Scarlett Johansson\nbirthday = data['birthday']\nprint(\"Scarlett Johansson's birthday is:\", birthday)\n```",
        "usage": [
            381,
            8625,
            9006
        ]
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the TV show Sword Art Online\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Sword Art Online\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_tv_url, headers=headers, params=params)\nsearch_results = response.json()\n\n# Step 2: Get the details of Sword Art Online TV show\nif search_results['total_results'] > 0:\n    tv_id = search_results['results'][0]['id']\n    \n    # Call API to get TV show details\n    tv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    params = {}\n    response = requests.get(tv_details_url, headers=headers, params=params)\n    tv_details = response.json()\n    \n    # Get the number of seasons\n    num_seasons = tv_details['number_of_seasons']\n    print(f\"The number of seasons of Sword Art Online is: {num_seasons}\")\nelse:\n    print(\"Sword Art Online TV show not found.\")\n```",
        "usage": [
            404,
            9081,
            9485
        ]
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Yui Aragaki movies\nparams_yui = {\n    \"query\": \"Yui Aragaki\",\n    \"include_adult\": False\n}\nresponse_yui = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params_yui)\ndata_yui = response_yui.json()\nyui_id = data_yui[\"results\"][0][\"id\"]\n\n# Search for Gen Hoshino movies\nparams_gen = {\n    \"query\": \"Gen Hoshino\",\n    \"include_adult\": False\n}\nresponse_gen = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params_gen)\ndata_gen = response_gen.json()\ngen_id = data_gen[\"results\"][0][\"id\"]\n\n# Search for the TV show \"We Married as Job\" to check if both Yui Aragaki and Gen Hoshino are in the cast\nparams_show = {\n    \"query\": \"We Married as Job\",\n    \"include_adult\": False\n}\nresponse_show = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params_show)\ndata_show = response_show.json()\nshow_id = data_show[\"results\"][0][\"id\"]\n\n# Get the credits for the TV show to check if both Yui Aragaki and Gen Hoshino are in the cast\nresponse_credits = requests.get(f\"https://api.themoviedb.org/3/tv/{show_id}/credits\", headers=headers)\ndata_credits = response_credits.json()\n\n# Check if both Yui Aragaki and Gen Hoshino are in the cast\nyui_in_cast = any(actor[\"id\"] == yui_id for actor in data_credits[\"cast\"])\ngen_in_cast = any(actor[\"id\"] == gen_id for actor in data_credits[\"cast\"])\n\nif yui_in_cast and gen_in_cast:\n    print(\"Yui Aragaki and Gen Hoshino are co-starring in 'We Married as Job'.\")\nelse:\n    print(\"Yui Aragaki and Gen Hoshino are not co-starring in 'We Married as Job'.\")\n```",
        "usage": [
            641,
            9343,
            9984
        ]
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\n# Define headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get person details by id\ndef get_person_details(person_id):\n    url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        data = response.json()\n        return data\n    return None\n\n# Get the details of the director of the film \"Barbie\"\nbarbie_movie_director_id = 123  # Add the correct movie director id for Barbie movie\nbarbie_director_details = get_person_details(barbie_movie_director_id)\n\n# Get the details of the lead actor of the television show \"DEATH NOTE\"\ndeath_note_tv_lead_actor_id = 456  # Add the correct lead actor id for Death Note TV show\ndeath_note_lead_actor_details = get_person_details(death_note_tv_lead_actor_id)\n\n# Calculate the age difference in years\nif barbie_director_details and death_note_lead_actor_details:\n    barbie_birth_year = int(barbie_director_details['birthday'][:4])\n    death_note_birth_year = int(death_note_lead_actor_details['birthday'][:4])\n    \n    age_difference = abs(barbie_birth_year - death_note_birth_year)\n    \n    print(f\"The director of Barbie is older than the lead actor of DEATH NOTE by {age_difference} years.\")\n```",
        "usage": [
            459,
            10925,
            11384
        ]
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "results": "```python\nimport requests\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Katherine LaNasa\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\"query\": \"Katherine LaNasa\", \"include_adult\": False}  # Specify the query and exclude adult content\nresponse = requests.get(search_person_url, headers=headers, params=params)\nresults = response.json()\nperson_id = results['results'][0]['id']  # Get the person id of Katherine LaNasa\n\n# Get Katherine LaNasa's movie credits\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovie_credits = response.json()\n\n# Get details of the latest movie appearance\nlatest_movie = movie_credits['cast'][0]\nprint(\"Katherine LaNasa's latest movie appearance:\")\nprint(f\"Movie: {latest_movie['title']}\")\nprint(f\"Character: {latest_movie['character']}\")\nprint(f\"Release Date: {latest_movie['release_date']}\")\n```",
        "usage": [
            404,
            9353,
            9757
        ]
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Oppenheimer\"\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Oppenheimer\"\n}\nsearch_response = requests.get(search_movie_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the cover image of the first movie in the search results\nif search_results[\"total_results\"] > 0:\n    first_movie_id = search_results[\"results\"][0][\"id\"]\n    images_url = f\"https://api.themoviedb.org/3/movie/{first_movie_id}/images\"\n    images_response = requests.get(images_url, headers=headers)\n    images_data = images_response.json()\n\n    # Display the first cover image if available\n    if images_data[\"posters\"]:\n        first_poster_path = images_data[\"posters\"][0][\"file_path\"]\n        full_url = f\"https://image.tmdb.org/t/p/original{first_poster_path}\"\n        print(full_url)\n    else:\n        print(\"No cover image found for the movie Oppenheimer.\")\nelse:\n    print(\"No results found for the movie Oppenheimer.\")\n```",
        "usage": [
            420,
            9303,
            9723
        ]
    }
]