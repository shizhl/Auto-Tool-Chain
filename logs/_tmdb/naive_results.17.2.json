[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "results": "```python\nimport requests\n\n# API url to search for a person\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Parameters to search for Sofia Coppola\nparams = {\n    \"query\": \"Sofia Coppola\",\n}\n\n# Make a GET request to search for Sofia Coppola\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if there are results for Sofia Coppola\nif len(data[\"results\"]) > 0:\n    # Get the person id for Sofia Coppola\n    person_id = data[\"results\"][0][\"id\"]\n\n    # API url to get movie credits for a person\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    \n    # Make a GET request to get movie credits for Sofia Coppola\n    movie_credits_response = requests.get(movie_credits_url, headers=headers)\n    movie_credits_data = movie_credits_response.json()\n    \n    # Count the number of movies directed by Sofia Coppola\n    movie_count = sum(1 for credit in movie_credits_data[\"crew\"] if credit[\"job\"] == \"Director\")\n\n    print(f\"Number of movies directed by Sofia Coppola: {movie_count}\")\n\nelse:\n    print(\"No results found for Sofia Coppola\")\n```",
        "usage": [
            283,
            8728,
            9011
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "results": "```python\nimport requests\n\n# Http headers to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Dark Knight\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Dark Knight\",\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the cast and crew for the movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncast = response.json()[\"cast\"]\n\n# Extract the lead actor\nlead_actor = cast[0][\"name\"]\n\nprint(f\"The lead actor in the movie 'The Dark Knight' was: {lead_actor}\")\n```",
        "usage": [
            333,
            8192,
            8525
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "results": "```python\nimport requests\n\n# Define the url and headers\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Extracting the director of the top-1 rated movie\ntop_rated_movie_id = data[\"results\"][0][\"id\"]\ncredits_url = f\"https://api.themoviedb.org/3/movie/{top_rated_movie_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\n\n# Finding the director in the credits\ncrew = credits_data[\"crew\"]\ndirector = next((member[\"name\"] for member in crew if member[\"job\"] == \"Director\"), None)\n\nprint(f\"The director of the top-1 rated movie is: {director}\")\n```",
        "usage": [
            346,
            7288,
            7634
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "give me a image for the collection Star Wars",
        "results": "```python\nimport requests\n\n# Define the API url to search for collections\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Create the parameters dictionary for the query\nparams = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    results = response.json()\n    \n    # Retrieve the image path for the collection \"Star Wars\"\n    for collection in results[\"results\"]:\n        if collection[\"name\"] == \"Star Wars\":\n            image_path = collection[\"poster_path\"]\n            print(\"Image path for Star Wars collection:\", image_path)\n            break\nelse:\n    print(\"Error with the request. Status code:\", response.status_code)\n```",
        "usage": [
            362,
            7284,
            7646
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "results": "```python\nimport requests\n\n# Define the headers with the access token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the company with the name \"Walt Disney\"\nsearch_url = \"https://api.themoviedb.org/3/search/company\"\nsearch_params = {\"query\": \"Walt Disney\", \"page\": 1}\n\nresponse = requests.get(search_url, headers=headers, params=search_params)\ncompany_results = response.json()[\"results\"]\n\n# Get the company details by id to obtain the logo\ncompany_id = company_results[0][\"id\"]\ncompany_logo_url = f\"https://api.themoviedb.org/3/company/{company_id}/images\"\n\nlogo_response = requests.get(company_logo_url, headers=headers)\ncompany_logo = logo_response.json()[\"logos\"][0][\"file_path\"]\n\nprint(\"The logo of Walt Disney:\", company_logo)\n```",
        "usage": [
            337,
            10176,
            10513
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "results": "```python\nimport requests\n\n# Define the API url to get the cast and crew for a movie\nurl = \"https://api.themoviedb.org/3/movie/597/credits\"  # 597 is the movie_id for Titanic\n\n# Set the necessary headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API url with headers\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Extract the JSON data from the response\n    data = response.json()\n    \n    # Get the cast details\n    cast = data[\"cast\"]\n    \n    # Check if there are actors in the cast\n    if len(cast) > 0:\n        # Get the details of the lead actor (index 0)\n        lead_actor = cast[0]\n        \n        # Get the name of the lead actor\n        actor_name = lead_actor[\"name\"]\n        \n        # Get the profile path of the lead actor (image of the actor)\n        actor_profile_path = lead_actor[\"profile_path\"]\n        \n        # Print the details of the lead actor\n        print(\"Lead Actor of Titanic:\", actor_name)\n        print(\"Profile Path:\", actor_profile_path)\n    else:\n        print(\"No lead actor found.\")\nelse:\n    print(\"Error in API call. Status code:\", response.status_code)\n```",
        "usage": [
            449,
            7448,
            7897
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "results": "```python\nimport requests\n\n# Use the search movie API to search for movies similar to Titanic\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nresponse = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = response.json()\n\nif search_results[\"total_results\"] > 0:\n    # Get the movie ID of the first movie similar to Titanic\n    movie_id = search_results[\"results\"][0][\"id\"]\n\n    # Use the movie/{movie_id}/similar API to get a list of similar movies\n    similar_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\n    similar_params = {\n        \"page\": 1\n    }\n\n    response = requests.get(similar_url, headers=headers, params=similar_params)\n    similar_results = response.json()\n\n    if similar_results[\"total_results\"] > 0:\n        # Get the movie ID of the first similar movie\n        similar_movie_id = similar_results[\"results\"][0][\"id\"]\n\n        # Use the movie/{movie_id}/reviews API to get reviews of the similar movie\n        reviews_url = f\"https://api.themoviedb.org/3/movie/{similar_movie_id}/reviews\"\n        reviews_params = {\n            \"page\": 1\n        }\n\n        response = requests.get(reviews_url, headers=headers, params=reviews_params)\n        reviews = response.json()\n\n        # Display the reviews of the first movie similar to Titanic\n        print(reviews[\"results\"])\n    else:\n        print(\"No similar movies found for Titanic\")\nelse:\n    print(\"No results found for Titanic\")\n```",
        "usage": [
            367,
            9576,
            9943
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the movie ID for \"Titanic\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\ntitanic_id = search_response.json()[\"results\"][0][\"id\"]  # get the movie ID for Titanic\n\n# Get movie recommendations based on Titanic\nrecommendation_url = f\"https://api.themoviedb.org/3/movie/{titanic_id}/recommendations\"\nrecommendation_params = {\n    \"page\": 1\n}\nrecommendation_response = requests.get(recommendation_url, headers=headers, params=recommendation_params)\nrecommendations = recommendation_response.json()[\"results\"]\n\n# Print the list of recommended movies\nfor movie in recommendations:\n    print(movie[\"title\"])\n```",
        "usage": [
            356,
            7986,
            8342
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "results": "```python\nimport requests\n\n# Http header with API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API to search for the person (director) with query as Christopher Nolan\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the person_id for Christopher Nolan\nperson_id = data['results'][0]['id']\n\n# API to get the movie credits for the person (Christopher Nolan)\nperson_movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(person_movie_credits_url, headers=headers)\ndata = response.json()\n\n# Find the latest movie directed by Christopher Nolan\nlatest_movie = None\nlatest_release_date = \"\"\nfor movie in data['crew']:\n    if 'director' in movie['job'].lower():  # Check if the person directed the movie\n        if movie['release_date'] > latest_release_date:\n            latest_movie = movie['title']\n            latest_release_date = movie['release_date']\n\nprint(f\"The latest movie directed by Christopher Nolan is: {latest_movie}\")\n```",
        "usage": [
            421,
            9452,
            9873
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "results": "```python\nimport requests\n\n# Define the API url to search for movies directed by Martin Scorsese\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the parameters for the API request\nparams = {\n    \"query\": \"Martin Scorsese\",\n    \"include_adult\": False\n}\n\n# Make the API request to search for people\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the person id of Martin Scorsese\nperson_id = data['results'][0]['id']\n\n# Define the API url to get the movie credits of Martin Scorsese\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n# Make the API request to get the movie credits of Martin Scorsese\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Find the highest rated movie directed by Martin Scorsese\nhighest_rated_movie = None\nhighest_rating = 0\n\nfor movie in data['cast']:\n    if movie['vote_average'] > highest_rating:\n        highest_rating = movie['vote_average']\n        highest_rated_movie = movie['title']\n\n# Output the highest rated movie directed by Martin Scorsese\nprint(f\"The highest rated movie directed by Martin Scorsese is: {highest_rated_movie}\")\n```",
        "usage": [
            285,
            8645,
            8930
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "results": "```python\nimport requests\n\n# Define the API key\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n# Define the base url for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Step 1: Search for Leonardo DiCaprio's latest movie\nsearch_person_url = f\"{base_url}/search/person\"\nparams = {\n    \"api_key\": api_key,\n    \"query\": \"Leonardo DiCaprio\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_results = response.json()[\"results\"]\n# Get the id of the first person (assuming it's Leonardo DiCaprio)\nperson_id = person_results[0][\"id\"]\n\n# Step 2: Get the latest movie credits of Leonardo DiCaprio\nperson_movie_credits_url = f\"{base_url}/person/{person_id}/movie_credits\"\nparams = {\n    \"api_key\": api_key\n}\nresponse = requests.get(person_movie_credits_url, headers=headers, params=params)\nmovie_credits = response.json()[\"cast\"]\n# Get the latest movie id of Leonardo DiCaprio\nlatest_movie_id = movie_credits[0][\"id\"]\n\n# Step 3: Get the details of Leonardo DiCaprio's latest movie\nmovie_details_url = f\"{base_url}/movie/{latest_movie_id}\"\nparams = {\n    \"api_key\": api_key\n}\nresponse = requests.get(movie_details_url, headers=headers, params=params)\nmovie_details = response.json()\n# Get the director of the movie\nfor crew_member in movie_details[\"credits\"][\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director_name = crew_member[\"name\"]\n        break\n\n# Output the director's name\nprint(f\"The director of Leonardo DiCaprio's latest movie is: {director_name}\")\n```",
        "usage": [
            387,
            7929,
            8316
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "results": "```python\nimport requests\n\n# Provided Http Headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person \"Catherine Hardwicke\"\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Catherine Hardwicke\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nresult = response.json()\n\n# Get the person ID of Catherine Hardwicke\nif \"results\" in result and len(result[\"results\"]) > 0:\n    person_id = result[\"results\"][0][\"id\"]\n\n    # Get the TV show credits for the person\n    tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n    response = requests.get(tv_credits_url, headers=headers)\n    tv_credits = response.json()\n\n    # Check the latest TV show directed by Catherine Hardwicke\n    if \"crew\" in tv_credits:\n        recent_show = None\n        for credit in tv_credits[\"crew\"]:\n            if credit[\"job\"] == \"Director\":\n                recent_show = credit\n                break\n\n        if recent_show:\n            show_name = recent_show[\"original_name\"]\n            print(f\"A TV show recently directed by Catherine Hardwicke: {show_name}\")\n        else:\n            print(\"No recent TV show directed by Catherine Hardwicke found.\")\n    else:\n        print(\"No TV show credits found for Catherine Hardwicke.\")\nelse:\n    print(\"Catherine Hardwicke not found in the search results.\")\n```",
        "usage": [
            503,
            8924,
            9427
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show id of Breaking Bad\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Breaking Bad\"\n}\nresponse = requests.get(tv_search_url, headers=headers, params=params)\nbreaking_bad_id = response.json()[\"results\"][0][\"id\"]\n\n# Get recommendations for the TV show with similar id as Breaking Bad\nrecommendations_url = f\"https://api.themoviedb.org/3/tv/{breaking_bad_id}/recommendations\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(recommendations_url, headers=headers, params=params)\nrecommendations = response.json()[\"results\"]\n\n# Output the recommended TV shows\nfor recommendation in recommendations:\n    print(recommendation[\"name\"])\n```",
        "usage": [
            342,
            8506,
            8848
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "results": "```python\nimport requests\n\n# Define the API url for getting the daily trending movies\nurl = \"https://api.themoviedb.org/3/trending/movie/day\"\n\n# Include the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the HTTP request to get the trending movies\nresponse = requests.get(url, headers=headers)\n\n# Check if the response was successful\nif response.status_code == 200:\n    # Get the movie details from the response\n    trending_movies = response.json()[\"results\"]\n    if trending_movies:\n        # Get the director of the first trending movie\n        movie_id = trending_movies[0][\"id\"]\n        credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n        \n        # Make the HTTP request to get the credits for the movie\n        credits_response = requests.get(credits_url, headers=headers)\n        \n        # Check if the credits response was successful\n        if credits_response.status_code == 200:\n            # Get the crew details from the credits response\n            crew = credits_response.json()[\"crew\"]\n            for person in crew:\n                if person[\"job\"] == \"Director\":\n                    director_name = person[\"name\"]\n                    print(f\"The director of today's most trending movie is: {director_name}\")\n                    break\n        else:\n            print(\"Failed to get credits for the movie\")\n    else:\n        print(\"No trending movies found\")\nelse:\n    print(\"Failed to get trending movies\")\n```",
        "usage": [
            466,
            7807,
            8273
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Twilight\" to get the movie ID\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Twilight\"\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the movie with the director information\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncrew = response.json()[\"crew\"]\ndirector = next(member[\"name\"] for member in crew if member[\"job\"] == \"Director\")\n\nprint(f\"The director of the movie 'Twilight' is: {director}\")\n```",
        "usage": [
            335,
            8689,
            9024
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "results": "```python\nimport requests\n\n# API url to get the images for a TV episode\nurl = \"https://api.themoviedb.org/3/tv/65685/season/1/episode/2/images\"\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Extracting the image details of the episode\n    episode_images = data[\"stills\"]\n    # Printing out the file path of the first image\n    print(\"File path of the image in the second episode of the first season of the Witcher:\")\n    print(episode_images[0][\"file_path\"])\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            339,
            7515,
            7854
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "What is top-1 rated movie?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the parameters (in this case we will request the first page only)\nparams = {\n    \"page\": 1\n}\n\n# Define the headers with the Bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the JSON response\ndata = response.json()\n\n# Extract the top-1 rated movie\ntop_rated_movie = data['results'][0]['title']\n\n# Output the result\nprint(\"Top-1 rated movie: \", top_rated_movie)\n```",
        "usage": [
            307,
            10420,
            10727
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "results": "```python\nimport requests\n\n# Define the headers with the access token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Matrix\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"The Matrix\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"\",\n    \"year\": 0,\n    \"primary_release_year\": 0\n}\n\n# Make the API call to search for the movie\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the movie id from the search results\nmovie_id = search_results[\"results\"][0][\"id\"]\n\n# Get the release dates of the movie\nrelease_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\nrelease_params = {}\n\n# Make the API call to get the release dates\nrelease_response = requests.get(release_url, headers=headers, params=release_params)\nrelease_results = release_response.json()\n\n# Extract the release date of the movie\nrelease_dates = release_results[\"results\"]\nfor result in release_dates:\n    if result[\"iso_3166_1\"] == \"US\":  # Assuming we want the release date in the US\n        release_date = result[\"release_dates\"][0][\"release_date\"]\n        break\n\nprint(\"The release date of The Matrix is:\", release_date)\n```",
        "usage": [
            466,
            7379,
            7845
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "Who is the most popular person?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Define the parameters\nparams = {\n    \"page\": 1  # We just need to get the first page to find the most popular person\n}\n\n# Include the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()\n    # Get the first person in the results (most popular person)\n    most_popular_person = results['results'][0]['name']\n    print(\"The most popular person is:\", most_popular_person)\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            335,
            9588,
            9923
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "results": "```python\nimport requests\n\n# HTTP header with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movies directed by Christopher Nolan\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": \"false\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nresults = response.json()[\"results\"]\n\n# Check if there are any results for Christopher Nolan\nif results:\n    # Get the person id for Christopher Nolan\n    person_id = results[0][\"id\"]\n    \n    # Get the movie credits for Christopher Nolan\n    credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(credits_url, headers=headers)\n    movie_credits = response.json()[\"cast\"]\n    \n    # Extract the cover images of the movies\n    cover_images = []\n    for movie in movie_credits:\n        if \"poster_path\" in movie:\n            cover_images.append(movie[\"poster_path\"])\n    \n    print(cover_images)\nelse:\n    print(\"No results found for Christopher Nolan.\")\n```",
        "usage": [
            403,
            9481,
            9884
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "results": "```python\n# Using the API to get the movie_id for the movie \"Titanic\"\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\"\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\nmovie_id = data['results'][0]['id']\n\n# Using the movie_id to get the keywords associated with the movie \"Titanic\"\nurl_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\nresponse_keywords = requests.get(url_keywords, headers=headers)\ndata_keywords = response_keywords.json()\n\nkeywords = [keyword['name'] for keyword in data_keywords['keywords']]\n\nprint(keywords)\n```",
        "usage": [
            325,
            9872,
            10197
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ]
    },
    {
        "query": "Give me a show that is currently on the air",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Define the parameters (optional)\nparams = {\n    \"page\": 1\n}\n\n# Add the necessary headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    tv_shows = response.json()[\"results\"]\n    \n    # Print the first show in the list\n    print(tv_shows[0])\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            300,
            8717,
            9017
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "results": "```python\nimport requests\n\n# Define the headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Clint Eastwood\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Clint Eastwood\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nperson_id = search_response.json()['results'][0]['id']\n\n# Get the movie credits for Clint Eastwood\ncredits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\ncredits_response = requests.get(credits_url, headers=headers)\nlatest_movie_release_date = credits_response.json()['cast'][0]['release_date']\nprint(f\"The latest movie for Clint Eastwood is scheduled to be released on: {latest_movie_release_date}\")\n```",
        "usage": [
            335,
            8911,
            9246
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "results": "```python\nimport requests\n\n# Provided headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie id of The Dark Knight\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Dark Knight\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the reviews for the movie\nreviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\nparams = {\n    \"page\": 1\n}\nreviews_response = requests.get(reviews_url, headers=headers, params=params)\nreviews = reviews_response.json()[\"results\"]\n\n# Display the reviews\nfor review in reviews:\n    print(\"Author:\", review[\"author\"])\n    print(\"Content:\", review[\"content\"])\n    print(\"----\")\n```",
        "usage": [
            360,
            7428,
            7788
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Find the movies directed by Francis Ford Coppola\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\nparams_search_person = {'query': 'Francis Ford Coppola', 'include_adult': False}\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\ndata_search_person = response_search_person.json()\nperson_id = data_search_person['results'][0]['id']\n\n# Get the movie credits for Francis Ford Coppola\nurl_person_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse_person_movie_credits = requests.get(url_person_movie_credits, headers=headers)\ndata_person_movie_credits = response_person_movie_credits.json()\n\n# Get the similar movies for one of the movies directed by Francis Ford Coppola\nif 'cast' in data_person_movie_credits and len(data_person_movie_credits['cast']) > 0:\n    movie_id = data_person_movie_credits['cast'][0]['id']\n    url_similar_movies = f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\n    params_similar_movies = {'page': 1}  # You can adjust the page number if needed\n    response_similar_movies = requests.get(url_similar_movies, headers=headers, params=params_similar_movies)\n    data_similar_movies = response_similar_movies.json()\n\n    # Output the similar movies\n    similar_movies = data_similar_movies['results']\n    for movie in similar_movies:\n        print(movie['title'])\n\n# If no movie directed by Francis Ford Coppola is found or no similar movies are available\nelse:\n    print(\"No movies directed by Francis Ford Coppola found or no similar movies available.\")\n```",
        "usage": [
            547,
            9767,
            10314
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/latest\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    latest_movie = response.json()\n    \n    # Check if there are any cast members\n    if \"genres\" in latest_movie and len(latest_movie[\"genres\"]) > 0:\n        lead_actor = latest_movie[\"genres\"][0][\"name\"]\n        print(\"The lead actor in the latest released movie is:\", lead_actor)\n    else:\n        print(\"Lead actor information not found.\")\nelse:\n    print(\"Failed to retrieve the latest movie details.\")\n```",
        "usage": [
            333,
            9003,
            9336
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n# Set the parameters\nparams = {\n    \"page\": 1,  # Specify the page to query\n}\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the image path of the first movie in the results\n    movie_data = response.json()\n    if movie_data['results']:\n        movie_image_path = movie_data['results'][0]['poster_path']\n        print(f\"Image path of the first movie currently showing in theaters: {movie_image_path}\")\n    else:\n        print(\"No movies currently showing in theaters\")\nelse:\n    print(\"Failed to fetch data\")  # Print an error message if the request was not successful\n```",
        "usage": [
            365,
            8572,
            8937
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Define the query parameters\nparams = {\n    \"page\": 1,  # Fetching the first page\n    \"region\": \"US\"  # Filter by US region\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Extract the most popular movie details\n    most_popular_movie = data[\"results\"][0]  # Assuming the first movie in the results is the most popular\n    \n    # Get the movie's keywords by calling the keywords API\n    movie_id = most_popular_movie[\"id\"]\n    keywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n    keywords_response = requests.get(keywords_url, headers=headers)\n\n    if keywords_response.status_code == 200:\n        keywords_data = keywords_response.json()\n        keywords = keywords_data[\"keywords\"]\n        \n        # Print the most popular movie and its keywords\n        print(\"Most Popular Movie:\")\n        print(most_popular_movie)\n        print(\"\\nKeywords:\")\n        print(keywords)\n    else:\n        print(\"Failed to fetch keywords for the movie\")\nelse:\n    print(\"Failed to fetch data from the API\")\n```",
        "usage": [
            473,
            9917,
            10390
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "results": "```python\nimport requests\n\n# Define the API url for getting the list of popular movies\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to get the list of popular movies\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie id of the most popular movie\n    most_popular_movie_id = response.json()['results'][0]['id']\n\n    # Define the API url for getting the keywords of a movie by movie id\n    keywords_url = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\n\n    # Send a GET request to get the keywords of the most popular movie\n    keywords_response = requests.get(keywords_url, headers=headers)\n\n    # Check if the request was successful\n    if keywords_response.status_code == 200:\n        keywords = keywords_response.json()['keywords']\n        print(keywords)  # Output the keywords of the most popular movie\n    else:\n        print(\"Failed to retrieve keywords for the most popular movie\")\nelse:\n    print(\"Failed to retrieve list of popular movies\")\n```",
        "usage": [
            426,
            7007,
            7433
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "results": "```python\nimport requests\n\n# Define the API url for searching a movie\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the query parameter for the movie \"Titanic\"\nquery = \"Titanic\"\n\n# Set other optional parameters\nparams = {\n    \"query\": query,\n    \"include_adult\": False\n}\n\n# Make the GET request to search for the movie\nresponse = requests.get(url_search_movie, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the movie id of the first result\n    if data['total_results'] > 0:\n        movie_id = data['results'][0]['id']\n        \n        # Define the API url for getting the cast and crew of a movie\n        url_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n        \n        # Make the GET request to get the cast and crew of the movie\n        response_credits = requests.get(url_movie_credits, headers=headers)\n        \n        # Check if the credits request was successful\n        if response_credits.status_code == 200:\n            # Parse the credits JSON response\n            credits_data = response_credits.json()\n            \n            # Get the list of cast members\n            cast_list = [cast['name'] for cast in credits_data['cast']]\n            \n            print(cast_list) # Print the list of cast members\n            \n        else:\n            print(\"Failed to fetch movie credits.\")\n    else:\n        print(\"Movie not found in the database.\")\nelse:\n    print(\"Failed to fetch movie data.\")\n```",
        "usage": [
            358,
            8680,
            9038
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "results": "```python\nimport requests\n\n# Define the API url for getting company details by id\nurl = \"https://api.themoviedb.org/3/company/4\"\n# Set the headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Extract the logo_path from the response\nlogo_path = data.get(\"logo_path\")\n\nif logo_path:\n    print(f\"The logo path for Paramount Pictures is: https://image.tmdb.org/t/p/original{logo_path}\")\nelse:\n    print(\"Logo path not found for Paramount Pictures.\")\n```",
        "usage": [
            295,
            7361,
            7656
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "results": "```python\nimport requests\n\n# Define the API url to search for the company \"Universal Pictures\"\nurl_search_company = \"https://api.themoviedb.org/3/search/company\"\n\n# Specify the query parameter with the company name \"Universal Pictures\"\nparams_search_company = {\n    \"query\": \"Universal Pictures\"\n}\n\n# Make a GET request to search for the company using the provided headers\nresponse_search_company = requests.get(url_search_company, headers=headers, params=params_search_company)\n\n# Check if the request was successful\nif response_search_company.status_code == 200:\n    # Extract the company id of \"Universal Pictures\" from the search results\n    company_id = response_search_company.json()[\"results\"][0][\"id\"]\n    \n    # Define the API url to get details of the company by id\n    url_company_details = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    \n    # Make a GET request to get the details of the company using the provided headers\n    response_company_details = requests.get(url_company_details, headers=headers)\n    \n    # Check if the request was successful\n    if response_company_details.status_code == 200:\n        # Extract the headquarters information of the company\n        headquarters = response_company_details.json()[\"headquarters\"]\n        print(f\"The company 'Universal Pictures' was founded in: {headquarters}\")\n    else:\n        print(\"Failed to get company details\")\nelse:\n    print(\"Failed to search for the company\")\n\n```",
        "usage": [
            303,
            8097,
            8400
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nsearch_results = response.json()\n\n# Get the TMDB id of the movie \"Titanic\"\ntitanic_id = search_results['results'][0]['id']\n\n# Get the details of the movie \"Titanic\"\nmovie_url = f\"https://api.themoviedb.org/3/movie/{titanic_id}\"\nresponse = requests.get(movie_url, headers=headers)\nmovie_details = response.json()\n\n# Extract the release date of the movie \"Titanic\"\nrelease_date = movie_details['release_date']\n\nprint(\"The movie Titanic was released on:\", release_date)\n```",
        "usage": [
            354,
            7198,
            7552
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "results": "```python\nimport requests\n\n# Define the API url to get details of the first movie in Star Wars collection\nurl = \"https://api.themoviedb.org/3/collection/10\"\n\n# Define the parameters (collection_id for Star Wars collection)\nparams = {}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie id of the first movie in the collection\n    movie_id = response.json()[\"parts\"][0][\"id\"]\n\n    # Call the API to get the credits for the movie using the movie_id\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n\n    # Check if the credits API request was successful\n    if credits_response.status_code == 200:\n        # Get the cast list from the response\n        cast_list = credits_response.json()[\"cast\"]\n\n        # Extract the names of the actors who starred in the movie\n        actors = [actor[\"name\"] for actor in cast_list]\n\n        print(\"Actors who starred in the first movie of Star Wars collection:\")\n        for actor in actors:\n            print(actor)\n    else:\n        print(\"Error: Unable to fetch credits for the movie.\")\nelse:\n    print(\"Error: Unable to fetch details of the first movie in Star Wars collection.\")\n```",
        "usage": [
            306,
            8538,
            8844
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection with the name \"Harry Potter\"\ncollection_search_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Harry Potter\",\n    \"page\": 1\n}\n\nresponse = requests.get(collection_search_url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the collection id of the Harry Potter collection\ncollection_id = data['results'][0]['id']\n\n# Get the collection details by id\ncollection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse = requests.get(collection_details_url, headers=headers)\ncollection_data = response.json()\n\n# Extracting the poster path (cover) of a movie from the Harry Potter collection\nif 'parts' in collection_data:\n    if len(collection_data['parts']) > 0:\n        movie_cover = collection_data['parts'][0]['poster_path']\n        print(\"Movie Cover of a movie from the Harry Potter collection:\", movie_cover)\n    else:\n        print(\"No movie covers found for the Harry Potter collection\")\nelse:\n    print(\"No movie covers found for the Harry Potter collection\")\n```",
        "usage": [
            421,
            10080,
            10501
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "results": "```python\nimport requests\n\n# API url to search for the collection \"The Hunger Games\"\nurl = \"https://api.themoviedb.org/3/search/collection\"\n# Parameters for the query\nparams = {\n    \"query\": \"The Hunger Games\"\n}\n# Adding the API authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the GET request to search for the collection\nresponse = requests.get(url, headers=headers, params=params)\n\n# Checking if the response is successful\nif response.status_code == 200:\n    # Extracting the collection id for \"The Hunger Games\" collection\n    collection_id = response.json()[\"results\"][0][\"id\"]\n    \n    # API url to get keywords for a movie of the collection by collection_id\n    keywords_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    \n    # Making the GET request to get keywords for a movie of the collection\n    keywords_response = requests.get(keywords_url, headers=headers)\n    \n    # Checking if the keywords response is successful\n    if keywords_response.status_code == 200:\n        # Extracting the keywords for a movie of the collection\n        keywords = keywords_response.json()[\"parts\"][0][\"keywords\"]\n        # Displaying the keywords\n        print(keywords)\n    else:\n        print(\"Error fetching keywords for the movie\")\nelse:\n    print(\"Error fetching collection for The Hunger Games\")\n```  ",
        "usage": [
            455,
            7978,
            8433
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "results": "```python\nimport requests\n\n# Set the API url for searching collection\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the parameters for searching the collection The Hobbit\nparams = {\n    \"query\": \"The Hobbit\",\n    \"page\": 1\n}\n\n# Make the GET request to search for the collection The Hobbit\nresponse = requests.get(url_search_collection, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Parse the response to get the collection id of The Hobbit\n    collection_id = response.json()[\"results\"][0][\"id\"]\n    \n    # Set the API url for getting the release dates of the movies in the collection by collection_id\n    url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    \n    # Make the GET request to get the details of the collection by collection_id\n    response = requests.get(url, headers=headers)\n    \n    # Check if the response is successful\n    if response.status_code == 200:\n        # Parse the response to get the release dates of the movies in the collection The Hobbit\n        release_dates = response.json()[\"parts\"]\n        \n        # Print the release dates for the movies in the collection The Hobbit\n        for movie in release_dates:\n            print(f\"Movie: {movie['title']}, Release Date: {movie['release_date']}\")\n    else:\n        print(\"Failed to fetch collection details\")\nelse:\n    print(\"Failed to search for the collection The Hobbit\")\n```",
        "usage": [
            332,
            8487,
            8819
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the query parameters\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Extract the movie details from the response\n    movies = []\n    for result in data[\"results\"]:\n        movies.append({\n            \"id\": result[\"id\"],\n            \"name\": result[\"name\"],\n            \"poster_path\": result[\"poster_path\"],\n            \"backdrop_path\": result[\"backdrop_path\"]\n        })\n    print(movies)\nelse:\n    print(\"Failed to get data from the API\")\n```",
        "usage": [
            349,
            11474,
            11823
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "results": "```python\nimport requests\n\n# Endpoint to search for collections\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the parameters for searching for the collection\nparams_search = {\n    \"query\": \"The Fast and the Furious\",\n    \"page\": 1\n}\n\n# Make the API call to search for the collection\nresponse_search = requests.get(url_search_collection, headers=headers, params=params_search)\ndata_search = response_search.json()\n\n# Extract the collection ID of \"The Fast and the Furious\"\ncollection_id = data_search['results'][0]['id']\n\n# Endpoint to get the reviews for a movie\nurl_movie_review = f\"https://api.themoviedb.org/3/movie/{collection_id}/reviews\"\n\n# Define the parameters for getting the reviews of a movie from the collection\nparams_review = {\n    \"page\": 1\n}\n\n# Make the API call to get the reviews of a movie from the collection\nresponse_review = requests.get(url_movie_review, headers=headers, params=params_review)\ndata_review = response_review.json()\n\n# Print the reviews of the movie from the collection\nprint(data_review['results'])\n```",
        "usage": [
            242,
            10156,
            10398
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ]
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "results": "```python\nimport requests\n\n# HTTP header for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection - Lord of the Rings\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\nif search_data[\"total_results\"] > 0:\n    # Get the collection id for Lord of the Rings\n    collection_id = search_data[\"results\"][0][\"id\"]\n\n    # Get details of the collection by id\n    collection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    collection_response = requests.get(collection_url, headers=headers)\n    collection_data = collection_response.json()\n\n    # Find the first movie of the collection Lord of the Rings and its release date\n    parts = collection_data[\"parts\"]\n    # Sort by release date\n    sorted_parts = sorted(parts, key=lambda x: x[\"release_date\"])\n    \n    # Get the release date of the first movie\n    first_movie_release_date = sorted_parts[0][\"release_date\"]\n    print(\"Release date of the first movie in the collection Lord of the Rings:\", first_movie_release_date)\nelse:\n    print(\"Collection Lord of the Rings not found.\")\n```",
        "usage": [
            453,
            8061,
            8514
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "results": "```python\nimport requests\n\n# Define the API url to get the credits for the first season of House of Cards\nurl = \"https://api.themoviedb.org/3/tv/18347/season/1/credits\"  # 18347 is the TV show ID for House of Cards\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Extract the crew information for the first season of House of Cards\n    crew = data['crew']\n    \n    # Filter out the directors from the crew information\n    directors = [member['name'] for member in crew if member['job'] == 'Director']\n    \n    print(\"Directors of the first season of House of Cards:\")\n    print(directors)\nelse:\n    print(\"Error in API request\")\n```",
        "usage": [
            377,
            7802,
            8179
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show ID of \"House of Cards\"\nquery = \"House of Cards\"\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params={\"query\": query})\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        house_of_cards_id = data[\"results\"][0][\"id\"]\n\n        # Get the list of similar TV shows based on the TV show ID of \"House of Cards\"\n        response = requests.get(f\"https://api.themoviedb.org/3/tv/{house_of_cards_id}/similar\", headers=headers)\n        if response.status_code == 200:\n            similar_shows = response.json()[\"results\"]\n            for show in similar_shows:\n                print(show[\"name\"])  # Print the names of similar TV shows\n    else:\n        print(\"No results found for the TV show 'House of Cards'\")\nelse:\n    print(\"Error fetching data from TMDB API\")\n```",
        "usage": [
            393,
            8758,
            9151
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the request to get the list of popular TV shows currently on the air\npopular_tv_url = \"https://api.themoviedb.org/3/tv/on_the_air\"\nresponse = requests.get(popular_tv_url, headers=headers)\ndata = response.json()\n\n# Get the most popular TV show based on the highest popularity value\nmost_popular_tv = max(data['results'], key=lambda x: x['popularity'])\n\n# Extract the start date of the most popular TV show\nstart_date = most_popular_tv['first_air_date']\nprint(\"The most popular TV show currently on the air started on:\", start_date)\n```",
        "usage": [
            309,
            9086,
            9395
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# First, we need to find the director of Django Unchained\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Django Unchained\",\n    \"include_adult\": False\n}\n\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\nif data_search_movie[\"total_results\"] > 0:\n    director_id = data_search_movie[\"results\"][0][\"id\"]\nelse:\n    print(\"Django Unchained not found\")\n    director_id = None\n\n# Then we get the director's credits\nif director_id:\n    url_director_credits = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\n    response_director_credits = requests.get(url_director_credits, headers=headers)\n\n    data_director_credits = response_director_credits.json()\n    \n    # Get a few more works directed by the director of Django Unchained\n    director_name = data_director_credits[\"cast\"][0][\"name\"]\n    director_works = [work[\"title\"] for work in data_director_credits[\"crew\"] if work[\"job\"] == \"Director\"]\n\n    print(f\"Director: {director_name}\")\n    print(\"Few more works directed by the director:\")\n    for work in director_works:\n        print(work)\nelse:\n    print(\"Director not found\")\n```",
        "usage": [
            485,
            8712,
            9197
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "results": "```python\nimport requests\n\n# API endpoint to get a list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Parameters\nparams = {\n    \"page\": 1  # Specify which page to query\n}\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting the cast of the TV show\nif response.status_code == 200:\n    tv_show_data = response.json()\n    if tv_show_data.get(\"results\"):\n        if len(tv_show_data[\"results\"]) > 0:\n            tv_show_id = tv_show_data[\"results\"][0][\"id\"]\n            credits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n            credits_response = requests.get(credits_url, headers=headers)\n            \n            if credits_response.status_code == 200:\n                cast_data = credits_response.json()\n                if cast_data.get(\"cast\"):\n                    cast_list = []\n                    for person in cast_data[\"cast\"]:\n                        cast_list.append(person[\"name\"])\n                    \n                    print(cast_list)\n                else:\n                    print(\"Cast data not available\")\n            else:\n                print(\"Failed to fetch credits data\")\n        else:\n            print(\"No TV show data available\")\n    else:\n        print(\"Results not found in the response\")\nelse:\n    print(\"Failed to fetch TV show data\")\n```",
        "usage": [
            471,
            8027,
            8498
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "I need a review for Breaking Bad",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV shows related to Breaking Bad\nquery = \"Breaking Bad\"\nparams = {\n    \"query\": query,\n    \"include_adult\": False\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params)\ndata = response.json()\n\n# Check if there are any results\nif data['total_results'] > 0:\n    tv_show_id = data['results'][0]['id']\n\n    # Get the reviews for the TV show\n    response_reviews = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_show_id}/reviews\", headers=headers)\n    reviews_data = response_reviews.json()\n\n    if reviews_data['total_results'] > 0:\n        print(\"Review for Breaking Bad:\")\n        print(reviews_data['results'][0]['content'])\n    else:\n        print(\"No reviews found for Breaking Bad.\")\nelse:\n    print(\"No TV show found for Breaking Bad.\")\n```",
        "usage": [
            382,
            8943,
            9325
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# Provided headers for authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Last Of Us tv series\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Last Of Us\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nif search_response.status_code == 200:\n    search_results = search_response.json()\n    if search_results[\"total_results\"] > 0:\n        tv_id = search_results[\"results\"][0][\"id\"]\n\n        # Get recommendations for The Last Of Us tv series\n        recommendations_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\n        recommendations_params = {\n            \"page\": 1\n        }\n        recommendations_response = requests.get(recommendations_url, headers=headers, params=recommendations_params)\n        if recommendations_response.status_code == 200:\n            recommendations = recommendations_response.json()[\"results\"]\n            recommended_shows = [{\"name\": show[\"name\"]} for show in recommendations]\n            print(recommended_shows)\n        else:\n            print(\"Error fetching tv series recommendations\")\n    else:\n        print(\"The Last Of Us tv series not found\")\nelse:\n    print(\"Error searching for The Last Of Us tv series\")\n```",
        "usage": [
            438,
            8728,
            9166
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the base URL for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Search for the TV show \"The Last Of Us\"\nsearch_tv_url = f\"{base_url}/search/tv\"\nsearch_tv_params = {\n    \"query\": \"The Last Of Us\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_tv_url, headers=headers, params=search_tv_params)\ntv_id = response.json()[\"results\"][0][\"id\"]\n\n# Get recommendations for the TV show\nrecommendations_url = f\"{base_url}/tv/{tv_id}/recommendations\"\nrecommendations_params = {\n    \"page\": 1\n}\nrecommendations_response = requests.get(recommendations_url, headers=headers, params=recommendations_params)\n\n# Extract and print the recommendations\nrecommendations = recommendations_response.json()[\"results\"]\nfor recommendation in recommendations:\n    print(recommendation[\"name\"])\n```  ",
        "usage": [
            372,
            8507,
            8879
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "results": "```python\nimport requests\n\n# Define the base URL for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Set the API key in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Friends\"\nsearch_params = {\n    \"query\": \"Friends\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(f\"{base_url}/search/tv\", headers=headers, params=search_params)\nsearch_results = search_response.json()[\"results\"]\n\nif search_results:\n    friends_id = search_results[0][\"id\"]\n\n    # Get the guest stars for season 3, episode 24 of Friends\n    season = 3\n    episode = 24\n    episode_credits_response = requests.get(f\"{base_url}/tv/{friends_id}/season/{season}/episode/{episode}/credits\", headers=headers)\n    guest_stars = episode_credits_response.json()[\"guest_stars\"]\n    \n    # Extract the names of the guest stars\n    guest_star_names = [star[\"name\"] for star in guest_stars]\n    print(guest_star_names)\nelse:\n    print(\"TV show 'Friends' not found.\")\n```",
        "usage": [
            406,
            8505,
            8911
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "results": "```python\nimport requests\n\n# API url to get list of popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n# Parameters for the API\nparams = {\n    \"page\": 1\n}\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get a list of popular TV shows\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    popular_shows = response.json()[\"results\"]\n    # Get the lead actor of the most popular TV show\n    most_popular_show = popular_shows[0]\n    tv_id = most_popular_show[\"id\"]\n    \n    # API url to get the credits for a TV show\n    credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    \n    # Call the API to get the credits for the most popular TV show\n    credits_response = requests.get(credits_url, headers=headers)\n    \n    # Check if the API call was successful\n    if credits_response.status_code == 200:\n        credits = credits_response.json()\n        # Get the lead actor of the most popular TV show\n        lead_actor = credits[\"cast\"][0][\"name\"]\n        print(f\"The lead actor in the most popular TV show is: {lead_actor}\")\n    else:\n        print(\"Unable to retrieve credits for the most popular TV show.\")\nelse:\n    print(\"Unable to retrieve list of popular TV shows.\")\n```",
        "usage": [
            485,
            7270,
            7755
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/tv/top_rated\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the json data from the response\n    data = response.json()\n    \n    # Extract the keyword of the top-1 rated TV show\n    if 'results' in data and len(data['results']) > 0:\n        top_rated_show = data['results'][0]\n        tv_id = top_rated_show['id']\n        \n        # Make a new API call to get the keywords of the top-1 rated TV show\n        keyword_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n        keyword_response = requests.get(keyword_url, headers=headers)\n        \n        # Check if the request was successful\n        if keyword_response.status_code == 200:\n            keyword_data = keyword_response.json()\n            if 'results' in keyword_data and len(keyword_data['results']) > 0:\n                keyword = keyword_data['results'][0]['name']\n                print(keyword)\n            else:\n                print(\"No keywords found for the top rated TV show.\")\n        else:\n            print(\"Failed to get keywords of the top-1 rated TV show.\")\n    else:\n        print(\"No results found for the top rated TV show.\")\nelse:\n    print(\"Failed to get the top rated TV show data.\")\n\n```      ",
        "usage": [
            344,
            7786,
            8130
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"2 Broke Girls\"\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the poster image of the first result\nif data.get(\"results\"):\n    first_result = data[\"results\"][0]\n    if first_result.get(\"poster_path\"):\n        poster_path = first_result[\"poster_path\"]\n        print(poster_path)\n    else:\n        print(\"No poster image available for 2 Broke Girls\")\nelse:\n    print(\"No results found for 2 Broke Girls\")\n```",
        "usage": [
            323,
            7173,
            7496
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the TV show details by name (2 Broke Girls)\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"2 Broke Girls\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show details by ID\nif data_search_tv['total_results'] > 0:\n    tv_id = data_search_tv['results'][0]['id']\n    url_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    response_tv_details = requests.get(url_tv_details, headers=headers)\n    data_tv_details = response_tv_details.json()\n\n    # Calculate total number of episodes\n    total_episodes = 0\n    for season in data_tv_details['seasons']:\n        total_episodes += season['episode_count']\n\n    print(f\"Total number of episodes in '2 Broke Girls': {total_episodes}\")\nelse:\n    print(\"TV Show '2 Broke Girls' not found.\")\n```",
        "usage": [
            408,
            10707,
            11115
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Big Bang Theory TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Big Bang Theory\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\ntv_show_id = search_response.json()['results'][0]['id']\n\n# Get the primary TV show details\ntv_show_details_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\ntv_show_details_response = requests.get(tv_show_details_url, headers=headers)\nproduction_company_id = tv_show_details_response.json()['production_companies'][0]['id']\n\n# Get the production company details\ncompany_url = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\ncompany_response = requests.get(company_url, headers=headers)\nfounded_year = company_response.json()['origin_country']\n\nprint(f\"The production company that produced The Big Bang Theory was founded in {founded_year}\")\n```",
        "usage": [
            394,
            10378,
            10772
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "results": "```python\nimport requests\n\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Big Bang Theory\",\n    \"include_adult\": False\n}\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\nif 'results' in data and data['results']:\n    first_show = data['results'][0]\n    if 'first_air_date' in first_show:\n        print(\"The Big Bang Theory was created on:\", first_show['first_air_date'])\n    else:\n        print(\"First air date unknown for The Big Bang Theory\")\nelse:\n    print(\"TV show The Big Bang Theory not found in the results.\")\n```",
        "usage": [
            315,
            9951,
            10266
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "results": "```python\nimport requests\n\n# Set the API URL for getting the list of current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the parameters\nparams = {\n    \"page\": 1\n}\n\n# Set the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the first TV show and retrieve its keywords\ntv_show_id = data[\"results\"][0][\"id\"]\n\n# Set the API URL for getting the keywords of a TV show\nkeywords_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/keywords\"\n\n# Make the API call to retrieve the keywords\nkeywords_response = requests.get(keywords_url, headers=headers)\nkeywords_data = keywords_response.json()\n\n# Get the first keyword of the TV show\nkeyword = keywords_data[\"results\"][0][\"name\"]\n\nprint(\"Keyword of the most popular TV show:\", keyword)\n```",
        "usage": [
            377,
            7519,
            7896
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "results": "```python\nimport requests\n\n# API url for getting the details of the third episode of the second season of Westworld\nurl = \"https://api.themoviedb.org/3/tv/63247/season/2/episode/3\"\nparams = {}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    episode_details = response.json()\n    overview = episode_details.get(\"overview\")\n    print(\"The third episode of the second season of Westworld talked about: \", overview)\nelse:\n    print(\"Failed to retrieve episode details\")\n```",
        "usage": [
            131,
            7935,
            8066
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of TV shows with the title \"Game of Thrones\"\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Game of Thrones\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the TV show ID for Game of Thrones\ntv_id = data['results'][0]['id']\n\n# Call the API to get the details of the second season of Game of Thrones\nurl_season = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2\"\nresponse_season = requests.get(url_season, headers=headers)\ndata_season = response_season.json()\n\n# Extract and print the air date of the second season of Game of Thrones\nair_date = data_season['air_date']\nprint(air_date)\n```",
        "usage": [
            359,
            8978,
            9337
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Band of Brothers to get the tv_id\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Band of Brothers\"\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\ntv_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the images of the third episode of Band of Brothers\nepisode_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1/episode/3/images\"\nresponse = requests.get(episode_url, headers=headers)\nposter_path = response.json()[\"stills\"][0][\"file_path\"]\n\n# Base url for image\nbase_url = \"https://image.tmdb.org/t/p/original\"\nposter_url = base_url + poster_path\nprint(poster_url)\n```",
        "usage": [
            352,
            9015,
            9367
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "results": "```python\nimport requests\n\n# Define the API url for searching TV shows\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters for the query\nparams = {\n    \"query\": \"Game of Thrones\",\n    \"api_key\": \"0dbab590c7eaca07ebe625974a37ad92\"\n}\n\n# Define the headers for the API call\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call to search for Game of Thrones TV show\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the network id of the TV show Game of Thrones\nnetwork_id = data['results'][0]['networks'][0]['id']\n\n# Define the API url for getting network images\nurl = f\"https://api.themoviedb.org/3/network/{network_id}/images\"\n\n# Define the parameters for the query\nparams = {\n    \"api_key\": \"0dbab590c7eaca07ebe625974a37ad92\"\n}\n\n# Make the API call to get the network images\nresponse = requests.get(url, headers=headers, params=params)\nnetwork_data = response.json()\n\n# Extract the logo of the network\nnetwork_logo = network_data['logos'][0]['file_path']\n\nprint(f\"The logo of the network that produced Game of Thrones is: {network_logo}\")\n```",
        "usage": [
            453,
            7411,
            7864
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for the TV show \"Game of Thrones\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters for the search query\nparams_search_tv = {\n    \"query\": \"Game of Thrones\",\n    \"include_adult\": False\n}\n\n# Make the API call to search for the TV show \"Game of Thrones\"\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Extract the network id of the TV show \"Game of Thrones\"\nnetwork_id = data_search_tv['results'][0]['networks'][0]['id']\n\n# Define the API endpoint to get the details of the network by id\nurl_network = f\"https://api.themoviedb.org/3/network/{network_id}\"\n\n# Make the API call to get the details of the network that produced \"Game of Thrones\"\nresponse_network = requests.get(url_network, headers=headers)\ndata_network = response_network.json()\n\n# Extract the homepage of the network\nnetwork_homepage = data_network['homepage']\n\nprint(network_homepage)\n```",
        "usage": [
            244,
            8555,
            8799
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}  # Specify the page\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the list of popular TV shows\n    tv_shows = response.json()[\"results\"]\n    \n    # Get the first TV show\n    tv_show = tv_shows[0]\n    \n    # Get the TV show ID\n    tv_id = tv_show[\"id\"]\n    \n    # Call the API to get keywords for the TV show\n    keywords_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    keywords_response = requests.get(keywords_url, headers=headers)\n    \n    # Get the first keyword of the TV show\n    if keywords_response.status_code == 200:\n        keywords = keywords_response.json()[\"results\"]\n        if keywords:\n            print(\"Keyword of the most popular TV show currently:\", keywords[0][\"name\"])\n        else:\n            print(\"No keywords found for the TV show.\")\n    else:\n        print(\"Error in fetching keywords:\", keywords_response.status_code)\nelse:\n    print(\"Error in fetching TV shows:\", response.status_code)\n```",
        "usage": [
            286,
            8188,
            8474
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of current popular TV shows\nurl_tv_popular = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}\nresponse_tv_popular = requests.get(url_tv_popular, headers=headers, params=params)\ndata_tv_popular = response_tv_popular.json()\n# Extract the id of the company that produced the most popular TV show\ntv_show_id = data_tv_popular[\"results\"][0][\"id\"]\n\n# Get the details of the most popular TV show\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\nresponse_tv_details = requests.get(url_tv_details, headers=headers)\ndata_tv_details = response_tv_details.json()\n# Extract the company id\nproduction_company_id = data_tv_details[\"production_companies\"][0][\"id\"]\n\n# Get the details of the production company\nurl_company_details = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\nresponse_company_details = requests.get(url_company_details, headers=headers)\ndata_company_details = response_company_details.json()\n# Extract the headquarters of the company\nheadquarters = data_company_details[\"headquarters\"]\n\nprint(\"The headquarter of the company that produced the most popular TV show is:\", headquarters)\n```",
        "usage": [
            446,
            8555,
            9001
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the query parameters\nparams = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Get the genre_ids of the first TV show in the results\n    genre_ids = data[\"results\"][0][\"genre_ids\"]\n    \n    # Print the genre_ids\n    print(genre_ids)\nelse:\n    print(\"Failed to get the genre information for The Mandalorian.\")\n```",
        "usage": [
            329,
            7471,
            7800
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Get the trending TV shows for today\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\ntrending_tv_data = response_trending_tv.json()\n\n# Extract the TV show id for the most trending TV show\nmost_trending_tv_id = trending_tv_data[\"results\"][0][\"id\"]\n\n# Step 2: Get the credits for the most trending TV show\nurl_tv_credits = f\"https://api.themoviedb.org/3/tv/{most_trending_tv_id}/credits\"\nresponse_tv_credits = requests.get(url_tv_credits, headers=headers)\ntv_credits_data = response_tv_credits.json()\n\n# Extract the lead actor's id\nlead_actor_id = tv_credits_data[\"cast\"][0][\"id\"]\n\n# Step 3: Get the details of the lead actor to find birthday\nurl_actor_details = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse_actor_details = requests.get(url_actor_details, headers=headers)\nactor_details = response_actor_details.json()\n\n# Extract the birthday of the lead actor\nlead_actor_birthday = actor_details[\"birthday\"]\n\nprint(\"The birthday of the lead actor of today's most trending TV show is:\", lead_actor_birthday)\n```",
        "usage": [
            464,
            7500,
            7964
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "results": "```python\nimport requests\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\ntrending_tv_data = response_trending_tv.json()\n\n# Get the network id of the most trending TV show\nnetwork_id = trending_tv_data['results'][0]['networks'][0]['id']\n\n# Get the details of the network\nurl_network = f\"https://api.themoviedb.org/3/network/{network_id}\"\nresponse_network = requests.get(url_network, headers=headers)\nnetwork_data = response_network.json()\n\n# Get the homepage of the network\nnetwork_homepage = network_data['homepage']\n\nprint(network_homepage)\n```",
        "usage": [
            335,
            8423,
            8758
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "give me a review of today's most trending TV show",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the trending TV shows for today\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    # Extracting the TV show id of the most trending show\n    trending_tv_id = response.json()['results'][0]['id']\n\n    # Get the reviews for the most trending TV show\n    review_url = f\"https://api.themoviedb.org/3/tv/{trending_tv_id}/reviews\"\n    review_response = requests.get(review_url, headers=headers)\n\n    if review_response.status_code == 200:\n        reviews = review_response.json()['results']\n        print(reviews)\n    else:\n        print(\"Failed to fetch reviews.\")\nelse:\n    print(\"Failed to fetch trending TV shows.\")\n```",
        "usage": [
            350,
            7827,
            8177
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "results": "```python\nimport requests\n\n# Provided headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Get the trending TV shows for the week\nurl_trending = \"https://api.themoviedb.org/3/trending/tv/week\"\nresponse_trending = requests.get(url_trending, headers=headers)\ntrending_tv_ids = response_trending.json()[\"results\"]\n\nif not trending_tv_ids:\n    print(\"No trending TV shows found\")\nelse:\n    # Step 2: Get details of the first trending TV show\n    first_trending_tv_id = trending_tv_ids[0][\"id\"]\n    url_details = f\"https://api.themoviedb.org/3/tv/{first_trending_tv_id}\"\n    response_details = requests.get(url_details, headers=headers)\n    trending_tv_details = response_details.json()\n\n    print(\"Details of today's most trending TV show:\")\n    print(trending_tv_details[\"name\"])\n```",
        "usage": [
            355,
            8133,
            8488
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get a list of TV shows that are airing today\nurl = \"https://api.themoviedb.org/3/tv/airing_today\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    \n    # Assuming the first TV show in the results is the most trending one\n    if data['results']:\n        trending_show = data['results'][0]\n        \n        # Check if the TV show has a poster\n        if trending_show.get('poster_path'):\n            poster_url = f\"https://image.tmdb.org/t/p/w500/{trending_show['poster_path']}\"\n            print(f\"Poster URL of today's most trending TV show: {poster_url}\")\n        else:\n            print(\"No poster available for today's most trending TV show\")\n    else:\n        print(\"No TV shows are airing today\")\nelse:\n    print(\"Error fetching data, status code:\", response.status_code)\n```",
        "usage": [
            391,
            9171,
            9562
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Jeremy Clarkson's details\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Jeremy Clarkson\",\n    \"include_adult\": \"false\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract Jeremy Clarkson's person_id\nperson_id = data['results'][0]['id']\n\n# Get Jeremy Clarkson's TV credits\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Extract the TV show details where Jeremy Clarkson has worked\ntv_show_credits = data['cast']\nmost_popular_tv_show = max(tv_show_credits, key=lambda x: x['popularity'])\n\n# Get the details of the most popular TV show\ntv_show_id = most_popular_tv_show['id']\ntv_show_name = most_popular_tv_show['original_name']\n\n# Get the credits (cast and crew) that have been added to the most popular TV show\nurl = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Find out who has worked with Jeremy Clarkson in his most popular TV show\ncast = data['cast']\ncollaborators = [person['name'] for person in cast if person['name'] != 'Jeremy Clarkson']\n\nprint(f\"The collaborators who have worked with Jeremy Clarkson in his most popular TV show '{tv_show_name}' are:\")\nfor collaborator in collaborators:\n    print(collaborator)\n```",
        "usage": [
            522,
            7904,
            8426
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "results": "```python\nimport requests\n\n# Set the API url to get the TV show details\nurl = \"https://api.themoviedb.org/3/tv/42009/season/2/episode/1/credits\"\n\n# Set the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the lead actor of the first episode of the second season of Black Mirror\n    lead_actor = response.json()[\"cast\"][0][\"name\"]\n    actor_profile_path = response.json()[\"cast\"][0][\"profile_path\"]\n    \n    if actor_profile_path:\n        actor_image_url = f\"https://image.tmdb.org/t/p/w200{actor_profile_path}\"\n        print(f\"The lead actor of the first episode of the second season of Black Mirror is: {lead_actor}\")\n        print(f\"The actor looks like:\")\n        print(actor_image_url)\n    else:\n        print(f\"The lead actor of the first episode of the second season of Black Mirror is: {lead_actor}\")\nelse:\n    print(\"Failed to retrieve data.\")\n```",
        "usage": [
            407,
            9550,
            9957
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "results": "```python\nimport requests\n\n# Define the API url and TV show id for The Mandalorian\nurl = \"https://api.themoviedb.org/3/search/tv\"\ntv_id = 82856\n\n# Define the parameters for the API request\nparams = {\n    'query': 'The Mandalorian',\n    'page': 1\n}\n\n# Make the API request to search for The Mandalorian\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the lead actor name from the search results\nlead_actor_name = data['results'][0]['first_air_date']\n\n# Using the actor name, query the person endpoint to get the birthday\nperson_url = f\"https://api.themoviedb.org/3/person/{lead_actor_name}\"\nperson_response = requests.get(person_url, headers=headers)\nperson_data = person_response.json()\n\n# Extract and print the birthday of the lead actor of The Mandalorian\nbirth_date = person_data['birthday']\nprint(\"The lead actor of The Mandalorian was born on:\", birth_date)\n```",
        "usage": [
            222,
            8345,
            8567
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the API url to get the list of TV shows airing today\nurl_airing_today = \"https://api.themoviedb.org/3/tv/airing_today\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1\n}\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url_airing_today, headers=headers, params=params)\ndata = response.json()\n\n# Get the details of the most popular TV show airing today\ntop_show_details = data[\"results\"][0]\n\n# Get the id of the most popular TV show\ntv_id = top_show_details[\"id\"]\n\n# Define the API url to get the credits of the TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n\n# Make the API call to get the credits of the TV show\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Check if there is a lead actor (cast with order 0)\nlead_actor = None\nfor cast in data_credits[\"cast\"]:\n    if cast[\"order\"] == 0:\n        lead_actor = cast[\"name\"]\n        break\n\n# Print the lead actor of the most popular TV show airing today\nprint(\"Lead actor of today's most popular TV show: \", lead_actor)\n```",
        "usage": [
            458,
            8549,
            9007
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "results": "```python\nimport requests\n\n# Define the API url to get the list of current popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to get the list of popular TV shows\nresponse = requests.get(url_popular_tv, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the json data from the response\n    data = response.json()\n    \n    # Get the TV show id of the most popular TV show\n    tv_id = data['results'][0]['id']\n    \n    # Define the API url to get the credits (cast and crew) of the TV show\n    url_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    \n    # Make a GET request to get the credits of the TV show\n    response_credits = requests.get(url_credits, headers=headers)\n    \n    # Check if the response is successful\n    if response_credits.status_code == 200:\n        # Get the json data from the credits response\n        data_credits = response_credits.json()\n        \n        # Get the profile path of the lead actor in the cast\n        lead_actor_profile_path = data_credits['cast'][0]['profile_path']\n        \n        # Print the full URL of the image\n        if lead_actor_profile_path:\n            lead_actor_image_url = f\"https://image.tmdb.org/t/p/original/{lead_actor_profile_path}\"\n            print(lead_actor_image_url)\n        else:\n            print(\"Lead actor profile image not available\")\n    else:\n        print(\"Failed to fetch credits data\")\nelse:\n    print(\"Failed to fetch popular TV shows data\")\n```",
        "usage": [
            542,
            9166,
            9708
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "results": "```python\nimport requests\n\n# Define the API url for searching person\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the API url for getting TV show credits for a person\nurl_person_tv_credits = \"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n\n# Define the API url for getting reviews for a TV show\nurl_tv_show_reviews = \"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Cate Blanchett\nparams_search_person = {\n    \"query\": \"Cate Blanchett\",\n    \"include_adult\": False\n}\n\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\nsearch_results = response_search_person.json()\nperson_id = search_results[\"results\"][0][\"id\"]\n\n# Get the TV show credits for Cate Blanchett\nurl_person_tv_credits = url_person_tv_credits.format(person_id=person_id)\nresponse_person_tv_credits = requests.get(url_person_tv_credits, headers=headers)\ntv_credits = response_person_tv_credits.json()\n\n# Find the latest TV show Cate Blanchett is credited in\nlatest_tv_show_id = tv_credits[\"cast\"][0][\"id\"]\n\n# Get the reviews for the latest TV show\nurl_tv_show_reviews = url_tv_show_reviews.format(tv_id=latest_tv_show_id)\nresponse_tv_show_reviews = requests.get(url_tv_show_reviews, headers=headers)\ntv_show_reviews = response_tv_show_reviews.json()\n\n# Print the reviews\nprint(tv_show_reviews[\"results\"])\n```",
        "usage": [
            513,
            10407,
            10920
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for David Schwimmer\nsearch_params = {\"query\": \"David Schwimmer\", \"page\": 1, \"include_adult\": False, \"region\": \"US\"}\nsearch_response = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the person id for David Schwimmer\nperson_id = search_results[\"results\"][0][\"id\"]\n\n# Get the TV show credits for David Schwimmer\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\ntv_credits_response = requests.get(tv_credits_url, headers=headers)\ntv_credits = tv_credits_response.json()\n\n# Find the most popular TV show\npopular_show = max(tv_credits[\"cast\"], key=lambda x: x[\"popularity\"])\n\n# Print the most popular TV show for David Schwimmer\nprint(popular_show[\"name\"])\n```",
        "usage": [
            381,
            8194,
            8575
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show 'Black Mirror'\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Black Mirror\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params).json()\n\n# Get the TV show id for 'Black Mirror'\ntv_show_id = search_response[\"results\"][0][\"id\"]\n\n# Get the credits for the third episode of the second season of Black Mirror\nepisode_credits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/2/episode/3/credits\"\nepisode_credits_response = requests.get(episode_credits_url, headers=headers).json()\n\n# Extract the director of the episode\nfor crew_member in episode_credits_response[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director = crew_member[\"name\"]\n        break\n\nprint(f\"The director of the third episode of the second season of Black Mirror is: {director}\")\n```",
        "usage": [
            399,
            6740,
            7139
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person by name (in this case, Christopher Nolan)\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nperson_params = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\nresponse_person = requests.get(search_url, headers=headers, params=person_params)\nperson_data = response_person.json()\n\n# Get the person_id for Christopher Nolan\nperson_id = person_data['results'][0]['id']\n\n# Get the known_for movies for Christopher Nolan\nperson_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\nmovies_params = {}\nresponse_movies = requests.get(person_url, headers=headers, params=movies_params)\nmovies_data = response_movies.json()\n\n# Extract the known_for information (movies)\nknown_for_movies = movies_data['known_for']\nprint(known_for_movies)\n```",
        "usage": [
            359,
            8244,
            8603
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "results": "```python\nimport requests\n\n# Define the API endpoints\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nmovie_details_url = \"https://api.themoviedb.org/3/movie/{}\"\n\n# API Key\napi_key = \"YOUR_API_KEY\"\n\n# HTTP headers\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for Avatar movie\nparams_avatar = {\n    \"query\": \"Avatar\",\n    \"include_adult\": False\n}\nresponse_avatar = requests.get(search_movie_url, headers=headers, params=params_avatar)\ndata_avatar = response_avatar.json()\navatar_id = data_avatar['results'][0]['id']\n\n# Get the details of Avatar movie\nresponse_avatar_details = requests.get(movie_details_url.format(avatar_id), headers=headers)\ndata_avatar_details = response_avatar_details.json()\navatar_rating = data_avatar_details['vote_average']\n\n# Search for Avatar: The Way of Water movie\nparams_avatar_water = {\n    \"query\": \"Avatar: The Way of Water\",\n    \"include_adult\": False\n}\nresponse_avatar_water = requests.get(search_movie_url, headers=headers, params=params_avatar_water)\ndata_avatar_water = response_avatar_water.json()\navatar_water_id = data_avatar_water['results'][0]['id']\n\n# Get the details of Avatar: The Way of Water movie\nresponse_avatar_water_details = requests.get(movie_details_url.format(avatar_water_id), headers=headers)\ndata_avatar_water_details = response_avatar_water_details.json()\navatar_water_rating = data_avatar_water_details['vote_average']\n\n# Compare ratings\nif avatar_rating > avatar_water_rating:\n    print(\"Avatar has a higher rating than Avatar: The Way of Water.\")\nelif avatar_rating < avatar_water_rating:\n    print(\"Avatar: The Way of Water has a higher rating than Avatar.\")\nelse:\n    print(\"Both Avatar and Avatar: The Way of Water have the same rating.\")\n```",
        "usage": [
            392,
            7561,
            7953
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "results": "```python\nimport requests\n\n# define the API endpoint for searching movies\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n\n# set the parameters for the query (English movies with rating no less than 7.0 and released after 2021)\nparams = {\n    \"api_key\": \"0dbab590c7eaca07ebelviz94a37ad92\",\n    \"language\": \"en-US\",\n    \"sort_by\": \"vote_average.desc\",\n    \"vote_average.gte\": 7.0,\n    \"primary_release_date.gte\": \"2021-01-01\"\n}\n\n# headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# check if the response is successful\nif response.status_code == 200:\n    # extract the movie data\n    movie_data = response.json()\n    movies = movie_data[\"results\"]\n    \n    # print out the movie titles\n    for movie in movies:\n        print(movie[\"title\"])\nelse:\n    print(\"Failed to retrieve movie data.\")\n```",
        "usage": [
            396,
            7949,
            8345
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "results": "```python\nimport requests\n\n# HTTP headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Lord of the Rings\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the genre ids for the movie\nif data.get(\"results\") and len(data[\"results\"]) > 0:\n    movie_id = data[\"results\"][0][\"id\"]\n    movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    response = requests.get(movie_details_url, headers=headers)\n    movie_data = response.json()\n    \n    # Get the genres of the movie\n    genres = []\n    if movie_data.get(\"genres\"):\n        for genre in movie_data[\"genres\"]:\n            genres.append(genre[\"name\"])\n    \n    print(\"Genres of the movie Lord of the Rings:\", genres)\nelse:\n    print(\"Movie not found\")\n```",
        "usage": [
            399,
            8260,
            8659
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ]
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "results": "```python\nimport requests\n\n# Define the API endpoint for getting the list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Define the parameters (page=1 for the first page)\nparams = {\n    \"page\": 1\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the birthday of the most popular person\n    popular_people = response.json()[\"results\"]\n    most_popular_person = popular_people[0]\n    birthday = most_popular_person[\"birthday\"]\n\n    print(\"The birthday of the most popular person right now is:\", birthday)\nelse:\n    print(\"Failed to fetch data from the API\")\n```",
        "usage": [
            166,
            7482,
            7648
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "results": "```python\nimport requests\n\n# Headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show - Big Bang Theory\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Big Bang Theory\",\n    \"page\": 1\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nshow_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get images of the second season\nseason_url = f\"https://api.themoviedb.org/3/tv/{show_id}/season/2/images\"\nseason_response = requests.get(season_url, headers=headers)\n\n# Print the poster path of the second season\nsecond_season_poster = season_response.json()[\"posters\"][0][\"file_path\"]\nprint(second_season_poster)\n```",
        "usage": [
            335,
            8601,
            8936
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2/episode/3\"\n\n# Define the query parameters\nparams = {\n    \"api_key\": \"0dbab590c7eaca07ebe625974a37ad92\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, params=params)\n\n# Get the json response\ndata = response.json()\n\n# Extract the name of the third episode of the second season\nname = data[\"name\"]\n\nprint(f\"The name of the third episode of the second season of Mandalorian is: {name}\")\n```",
        "usage": [
            151,
            8553,
            8704
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "results": "```python\nimport requests\n\n# Define the headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Shawshank Redemption\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"The Shawshank Redemption\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the movie id of \"The Shawshank Redemption\" to fetch credits\nif search_results['results']:\n    movie_id = search_results['results'][0]['id']\n\n    # Get the credits of the movie \"The Shawshank Redemption\" to find the lead actor\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    credits_results = credits_response.json()\n\n    # Get the lead actor's person id\n    lead_actor_id = credits_results['cast'][0]['id']\n\n    # Get the details of the lead actor to find their birthday\n    person_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n    person_response = requests.get(person_url, headers=headers)\n    person_details = person_response.json()\n\n    lead_actor_birthday = person_details['birthday']\n    print(f\"The lead actor's birthday is: {lead_actor_birthday}\")\n\nelse:\n    print(\"No results found for the movie 'The Shawshank Redemption'\")\n```",
        "usage": [
            485,
            9662,
            10147
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# API url to search for the movie \"The Shawshank Redemption\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"The Shawshank Redemption\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Get the movie director's id\ndirector_id = search_data[\"results\"][0][\"id\"]  # Assuming the first result is the correct movie\n\n# API url to get the credits for the movie by director id\ncredits_url = f\"https://api.themoviedb.org/3/movie/{director_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\n\n# Get the director's id from the credits\ndirector_id = None\nfor crew_member in credits_data[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director_id = crew_member[\"id\"]\n        break\n\nif director_id:\n    # API url to get the director's details by id\n    person_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n    person_response = requests.get(person_url, headers=headers)\n    person_data = person_response.json()\n\n    director_birthday = person_data[\"birthday\"]\n    print(f\"The birthday of the director of the movie 'The Shawshank Redemption' is: {director_birthday}\")\nelse:\n    print(\"Director information not found for the movie 'The Shawshank Redemption'\")\n```",
        "usage": [
            331,
            7605,
            7936
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for the movie \"The Shawshank Redemption\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n# Set the query parameter to search for the movie by title\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n# Make a GET request to search for the movie\nresponse = requests.get(url_search_movie, headers=headers, params=params)\ndata = response.json()\n\nif data[\"total_results\"] > 0:\n    # Assuming the first result is the correct movie\n    movie_id = data[\"results\"][0][\"id\"]\n\n    # Define the API endpoint to get the primary information about a movie\n    url_movie_info = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    # Make a GET request to get the movie information\n    response_movie = requests.get(url_movie_info, headers=headers)\n    movie_data = response_movie.json()\n\n    if \"production_companies\" in movie_data:\n        # Assuming the first production company listed is the creator\n        company_id = movie_data[\"production_companies\"][0][\"id\"]\n\n        # Define the API endpoint to get the company details by id\n        url_company_info = f\"https://api.themoviedb.org/3/company/{company_id}\"\n        # Make a GET request to get the company information\n        response_company = requests.get(url_company_info, headers=headers)\n        company_info = response_company.json()\n\n        headquarters = company_info[\"headquarters\"]\n        print(\"The headquarter of the company that created The Shawshank Redemption is:\", headquarters)\n\nelse:\n    print(\"The movie 'The Shawshank Redemption' was not found.\")\n```",
        "usage": [
            373,
            8186,
            8559
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "results": "```python\n# Import the requests library\nimport requests\n\n# Prepare the API URL to get the details of the Star Wars collection\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Star Wars\"\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the results from the response\n    results = response.json()[\"results\"]\n    if results:\n        # Get the id of the Star Wars collection\n        star_wars_collection_id = results[0][\"id\"]\n        \n        # Prepare the API URL to get the details of the Star Wars collection by ID\n        url = f\"https://api.themoviedb.org/3/collection/{star_wars_collection_id}\"\n        \n        # Make the API call to get the collection details\n        response = requests.get(url, headers=headers)\n        \n        # Check if the response is successful\n        if response.status_code == 200:\n            # Get the company_id from the response\n            company_id = response.json()[\"part_of\"]\n            \n            # Prepare the API URL to get the details of the company by ID\n            url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n            \n            # Make the API call to get the company details\n            response = requests.get(url, headers=headers)\n            \n            # Check if the response is successful\n            if response.status_code == 200:\n                # Get the headquarters of the company\n                headquarters = response.json()[\"headquarters\"]\n                print(headquarters)\n            else:\n                print(\"Error in getting company details\")\n        else:\n            print(\"Error in getting collection details\")\n    else:\n        print(\"Star Wars collection not found\")\nelse:\n    print(\"Error in searching for collection\") \n```",
        "usage": [
            566,
            7636,
            8202
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movies The Double Life of Veronique\nveronique_response = requests.get(\"https://api.themoviedb.org/3/search/movie\", \n                                  headers=headers, \n                                  params={\"query\": \"The Double Life of Veronique\", \"include_adult\": False})\nveronique_data = veronique_response.json()\nveronique_release_date = veronique_data[\"results\"][0][\"release_date\"]\n\n# Search for movies Mulholland Drive\nmulholland_response = requests.get(\"https://api.themoviedb.org/3/search/movie\", \n                                   headers=headers, \n                                   params={\"query\": \"Mulholland Drive\", \"include_adult\": False})\nmulholland_data = mulholland_response.json()\nmulholland_release_date = mulholland_data[\"results\"][0][\"release_date\"]\n\n# Compare the release dates\nif veronique_release_date < mulholland_release_date:\n    print(\"The Double Life of Veronique has an earlier release date.\")\nelse:\n    print(\"Mulholland Drive has an earlier release date.\")\n```",
        "usage": [
            405,
            10423,
            10828
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the crew of a specific movie or TV show\ndef get_crew(media_type, media_id, season_number=None):\n    crew = []\n    if media_type == \"movie\":\n        # Request the credits for the given movie\n        url = f\"https://api.themoviedb.org/3/movie/{media_id}/credits\"\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            crew = response.json()[\"crew\"]\n    elif media_type == \"tv\":\n        # Request the credits for the given TV show and season\n        url = f\"https://api.themoviedb.org/3/tv/{media_id}/season/{season_number}/credits\"\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            crew = response.json()[\"crew\"]\n    \n    return crew\n\n# Get the crew for Twin Peaks Season 1\ntwin_peaks_crew = get_crew(\"tv\", 1920, 1)  # Twin Peaks ID is 1920\n# Get the crew for Mulholland Drive\nmulholland_drive_crew = get_crew(\"movie\", 101, 1)  # Mulholland Drive ID is 101\n\n# Extract the directors from the crew\ntwin_peaks_director = [member[\"name\"] for member in twin_peaks_crew if member[\"job\"] == \"Director\"]\nmulholland_drive_director = [member[\"name\"] for member in mulholland_drive_crew if member[\"job\"] == \"Director\"]\n\n# Check if the directors are the same\nif twin_peaks_director and mulholland_drive_director:\n    if twin_peaks_director[0] == mulholland_drive_director[0]:\n        print(\"The director of Twin Peaks Season 1 and Mulholland Drive is the same person.\")\n    else:\n        print(\"The director of Twin Peaks Season 1 and Mulholland Drive is not the same person.\")\nelse:\n    print(\"Director information not found.\")\n```",
        "usage": [
            607,
            8812,
            9419
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Mulholland Drive\"\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Mulholland Drive\"\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the director's information by accessing the movie details\nif data[\"total_results\"] > 0:\n    movie_id = data[\"results\"][0][\"id\"]\n    movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response = requests.get(movie_details_url, headers=headers)\n    movie_credits = response.json()\n\n    # Find the director information\n    director_info = None\n    for crew_member in movie_credits[\"crew\"]:\n        if crew_member[\"job\"] == \"Director\":\n            director_id = crew_member[\"id\"]\n            director_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n            response = requests.get(director_url, headers=headers)\n            director_info = response.json()\n            break\n\n    if director_info:\n        # Extract the birthplace of the director\n        birthplace = director_info.get(\"place_of_birth\", \"Not available\")\n        print(\"The director of Mulholland Drive was born in:\", birthplace)\n    else:\n        print(\"Director information not found.\")\nelse:\n    print(\"Mulholland Drive movie not found.\")\n```",
        "usage": [
            479,
            7431,
            7910
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie 'Mulholland Drive'\nparams_search_movie = {\n    \"query\": \"Mulholland Drive\"\n}\nresponse_search_movie = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=params_search_movie)\nsearch_results = response_search_movie.json()['results']\n\n# Check if 'Mulholland Drive' is in the top rated list\nif search_results:\n    # Assume the first result is the movie we are looking for\n    movie_id = search_results[0]['id']  # Get the movie id\n    response_top_rated = requests.get(f\"https://api.themoviedb.org/3/movie/top_rated\", headers=headers)\n    top_rated_movies = response_top_rated.json()['results']\n\n    # Check if 'Mulholland Drive' is in the top rated list\n    is_top_rated = False\n    for movie in top_rated_movies:\n        if movie['title'] == 'Mulholland Drive':\n            is_top_rated = True\n            break\n\n    if is_top_rated:\n        print(\"Yes, Mulholland Drive is in the Top-10 rated list of TMDB.\")\n    else:\n        print(\"No, Mulholland Drive is not in the Top-10 rated list of TMDB.\")\nelse:\n    print(\"Movie 'Mulholland Drive' not found.\")\n```",
        "usage": [
            465,
            9390,
            9855
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the base url for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\ndef get_movie_director_count(person_name):\n    # Define the endpoint to search for a person\n    search_person_endpoint = \"/search/person\"\n    \n    # Set the query parameter to search for the person\n    params = {\n        \"query\": person_name\n    }\n    \n    # Make the HTTP request to search for the person\n    response = requests.get(base_url + search_person_endpoint, headers=headers, params=params)\n    search_results = response.json()\n    \n    if \"results\" in search_results:\n        # Get the person id of the first result\n        person_id = search_results[\"results\"][0][\"id\"]\n    \n        # Define the endpoint to get movie credits for the person\n        movie_credits_endpoint = f\"/person/{person_id}/movie_credits\"\n    \n        # Make the HTTP request to get the movie credits for the person\n        response = requests.get(base_url + movie_credits_endpoint, headers=headers)\n        movie_credits = response.json()\n        \n        # Count the number of movies directed\n        movie_count = 0\n        if \"crew\" in movie_credits:\n            for movie in movie_credits[\"crew\"]:\n                if movie[\"job\"] == \"Director\":\n                    movie_count += 1\n        \n        return movie_count\n    else:\n        return 0\n\n# Get the number of movies directed by Akira Kurosawa\nakira_movie_count = get_movie_director_count(\"Akira Kurosawa\")\n# Get the number of movies directed by Spielberg\nspielberg_movie_count = get_movie_director_count(\"Steven Spielberg\")\n\n# Compare the number of movies directed\nif akira_movie_count > spielberg_movie_count:\n    print(\"Akira Kurosawa directed more movies.\")\nelif akira_movie_count < spielberg_movie_count:\n    print(\"Steven Spielberg directed more movies.\")\nelse:\n    print(\"Akira Kurosawa and Steven Spielberg directed the same number of movies.\")\n```",
        "usage": [
            600,
            10060,
            10660
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "results": "```python\nimport requests\n\n# Define the API url to get the credits for a person\nurl_person_credits = \"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n\n# Define the API url to get TV details by id\nurl_tv_details = \"https://api.themoviedb.org/3/tv/{tv_id}\"\n\n# Define the API url to get TV details by id\nurl_tv_details_season = \"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}\"\n\n# Define the headers containing the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the director's person ID (David Lynch)\ndirector_id = 3223\n\n# Step 1: Get the TV show credits for the director (David Lynch)\nresponse_person_credits = requests.get(url_person_credits.format(person_id=director_id), headers=headers)\nperson_credits_data = response_person_credits.json()\n\n# Step 2: Find the TV series directed by David Lynch\ntv_series_directed = []\nfor credit in person_credits_data['crew']:\n    if credit['job'] == 'Director':\n        tv_id = credit['id']\n        # Get the TV details by ID\n        response_tv_details = requests.get(url_tv_details.format(tv_id=tv_id), headers=headers)\n        tv_details_data = response_tv_details.json()\n        tv_series_directed.append(tv_details_data['name'])\n\n# Output the TV series directed by David Lynch\nprint(\"TV series directed by David Lynch:\")\nfor series in tv_series_directed:\n    print(series)\n```",
        "usage": [
            494,
            8748,
            9242
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "results": "```python\nimport requests\n\n# Define the API url for getting information about a person by their ID\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the parameters for the API request\nparams = {\n    \"query\": \"Scarlett Johansson\",\n    \"include_adult\": False,\n    \"page\": 1,\n    \"region\": \"US\"  # Assuming US as the region to filter release dates\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the person ID for Scarlett Johansson from the response\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Now, use the person ID to get more details about Scarlett Johansson\nurl = f\"https://api.themoviedb.org/3/person/{person_id}\"\n\n# Make the API request to get details of Scarlett Johansson\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract Scarlett Johansson's birthday from the response\n    birthday = response.json()[\"birthday\"]\n    print(f\"Scarlett Johansson's birthday is {birthday}\")\nelse:\n    print(\"Error: Failed to retrieve information\")\n\n```",
        "usage": [
            258,
            9651,
            9909
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "results": "```python\nimport requests\n\n# Set the API url for searching TV show by query\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the parameters for the query\nparams = {\n    \"query\": \"Sword Art Online\",\n    \"include_adult\": False\n}\n\n# Set the authentication header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if there are any results\nif data['results']:\n    # Get the TV show id for Sword Art Online\n    show_id = data['results'][0]['id']\n    \n    # Set the API url to get the details of the TV show by id\n    url = f\"https://api.themoviedb.org/3/tv/{show_id}\"\n    \n    # Make the API request\n    response = requests.get(url, headers=headers)\n    show_data = response.json()\n    \n    # Get the number of seasons of the TV show\n    num_seasons = show_data['number_of_seasons']\n    \n    print(f\"The number of seasons of Sword Art Online are: {num_seasons}\")\nelse:\n    print(\"TV show not found\")  # If no results found for the query\n```",
        "usage": [
            430,
            9683,
            10113
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ]
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"We Married as Job\" to get the movie_id\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"We Married as Job\"\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\nmovie_id = data_search_movie[\"results\"][0][\"id\"]\n\n# Get the credits for the movie with movie_id\nurl_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Check if Yui Aragaki and Gen Hoshino are co-starring in the movie\nactors = data_credits[\"cast\"]\nyui_aragaki_found = False\ngen_hoshino_found = False\n\nfor actor in actors:\n    if actor[\"name\"] == \"Yui Aragaki\":\n        yui_aragaki_found = True\n    elif actor[\"name\"] == \"Gen Hoshino\":\n        gen_hoshino_found = True\n\n# Output the result\nif yui_aragaki_found and gen_hoshino_found:\n    print(\"Yes, Yui Aragaki and Gen Hoshino are co-starring in We Married as Job.\")\nelse:\n    print(\"No, Yui Aragaki and Gen Hoshino are not co-starring in We Married as Job.\")\n```",
        "usage": [
            497,
            10998,
            11495
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "results": "```python\nimport requests\n\n# Headers required to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1I6IjY1M2NmODM3NjYxMWY0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get information about a movie by ID\ndef get_movie_details(movie_id):\n    url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    response = requests.get(url, headers=headers)\n    movie_data = response.json()\n    return movie_data\n\n# Function to get information about a TV show by ID\ndef get_tvshow_details(tv_id):\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    response = requests.get(url, headers=headers)\n    tvshow_data = response.json()\n    return tvshow_data\n\n# Get director's birth year from movie Barbie\nbarbie_movie_id = 1234  # Replace 1234 with the actual movie ID of Barbie\nbarbie_movie_details = get_movie_details(barbie_movie_id)\ndirector_birth_year = int(barbie_movie_details['release_date'][:4])\n\n# Get lead actor's birth year from TV show DEATH NOTE\ndeath_note_tv_id = 5678  # Replace 5678 with the actual TV show ID of DEATH NOTE\ndeath_note_tv_details = get_tvshow_details(death_note_tv_id)\nlead_actor_birth_year = int(death_note_tv_details['release_date'][:4])\n\n# Calculate the age difference\nage_difference = abs(director_birth_year - lead_actor_birth_year)\n\n# Output the result\nprint(f\"The director of the film Barbie is older than the lead actor of the TV show DEATH NOTE by {age_difference} years.\")\n```",
        "usage": [
            492,
            9929,
            10421
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "results": "```python\nimport requests\n\n# Define the API url and person name\nurl = \"https://api.themoviedb.org/3/search/person\"\nperson_name = \"Katherine LaNasa\"\n\n# Define the query parameters\nparams = {\n    \"query\": person_name,\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person_id of Katherine LaNasa\nif \"results\" in data and len(data[\"results\"]) > 0:\n    person_id = data[\"results\"][0][\"id\"]\n\n    # Call the API to get the movie credits of the person\n    url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    params = {}\n    response = requests.get(url, headers=headers, params=params)\n    movie_credits = response.json()\n\n    # Get the latest movie appearance of Katherine LaNasa\n    if \"cast\" in movie_credits and len(movie_credits[\"cast\"]) > 0:\n        latest_movie = movie_credits[\"cast\"][0]\n        print(\"Katherine LaNasa's latest movie appearance:\")\n        print(f\"Movie: {latest_movie['title']}\")\n        print(f\"Character: {latest_movie['character']}\")\n        print(f\"Release Date: {latest_movie['release_date']}\")\n    else:\n        print(\"No movie credits found for Katherine LaNasa.\")\nelse:\n    print(\"Katherine LaNasa not found in the database.\")\n```",
        "usage": [
            339,
            10778,
            11117
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Oppenheimer\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Oppenheimer\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the cover image of the first movie in the search results\nif data['total_results'] > 0:\n    movie_id = data['results'][0]['id']\n    images_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n    response = requests.get(images_url, headers=headers)\n    images_data = response.json()\n    \n    # Get the cover image path if available\n    if len(images_data['posters']) > 0:\n        cover_image_path = images_data['posters'][0]['file_path']\n        print(\"Cover Image of the movie Oppenheimer:\", cover_image_path)\n    else:\n        print(\"No cover image available for the movie Oppenheimer\")\nelse:\n    print(\"Movie Oppenheimer not found.\")\n```",
        "usage": [
            402,
            7514,
            7916
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    }
]