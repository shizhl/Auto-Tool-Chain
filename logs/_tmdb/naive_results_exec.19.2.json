[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "results": "```python\nimport requests\n\n# Define the API url to search for people\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the parameters for searching for Sofia Coppola\nparams_search_person = {\n    \"query\": \"Sofia Coppola\",\n    \"include_adult\": False\n}\n\n# Make the API request to search for people\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\n\n# Check if the request was successful\nif response_search_person.status_code == 200:\n    data_search_person = response_search_person.json()\n    \n    # Extract the person id of Sofia Coppola\n    if data_search_person[\"results\"]:\n        person_id = data_search_person[\"results\"][0][\"id\"]\n        \n        # Define the API url to get the movie credits for a person\n        url_person_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n        \n        # Make the API request to get the movie credits for Sofia Coppola\n        response_movie_credits = requests.get(url_person_movie_credits, headers=headers)\n        \n        # Check if the request was successful\n        if response_movie_credits.status_code == 200:\n            data_movie_credits = response_movie_credits.json()\n            \n            # Count the number of movies directed by Sofia Coppola\n            movie_credits = data_movie_credits[\"crew\"]\n            num_movies_directed = len([movie for movie in movie_credits if movie[\"job\"] == \"Director\"])\n            \n            # Print the number of movies directed by Sofia Coppola\n            print(f\"The number of movies directed by Sofia Coppola is: {num_movies_directed}\")\n        else:\n            print(\"Failed to retrieve the movie credits for Sofia Coppola\")\n    else:\n        print(\"Sofia Coppola not found in the search results\")\nelse:\n    print(\"Failed to retrieve person information\")\n```",
        "usage": [
            404,
            11215,
            11619
        ],
        "executed": "The number of movies directed by Sofia Coppola is: 14\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "results": "```python\nimport requests\n\n# API url to search for the movie The Dark Knight\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Dark Knight\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the movie id from the search results\nmovie_id = response.json()['results'][0]['id']\n\n# API url to get the credits of the movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make the API request to get the credits\ncredits_response = requests.get(credits_url, headers=headers)\n\n# Extract the lead actor\nlead_actor = credits_response.json()['cast'][0]['name']\n\nlead_actor\n```",
        "usage": [
            181,
            9926,
            10107
        ],
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "results": "```python\nimport requests\n\n# Define the API endpoint for getting the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the parameters\nparams = {\n    \"page\": 1,  # Specify the page number\n    \"region\": \"US\"  # Specify the region\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the JSON response\ndata = response.json()\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the director of the top-1 rated movie\n    if data[\"results\"][0][\"id\"]:\n        movie_id = data[\"results\"][0][\"id\"]\n        # Call the API to get credits for the movie\n        credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n        credits_response = requests.get(credits_url, headers=headers)\n        credits_data = credits_response.json()\n        # Check if the request was successful\n        if credits_response.status_code == 200:\n            # Extract the director's name\n            for crew_member in credits_data[\"crew\"]:\n                if crew_member[\"job\"] == \"Director\":\n                    director_name = crew_member[\"name\"]\n                    print(f\"The director of the top-1 rated movie is: {director_name}\")\n                    break\n        else:\n            print(\"Error in getting movie credits API\")\n    else:\n        print(\"Error in getting top-1 rated movie id\")\nelse:\n    print(\"Error in getting top rated movies API\")\n```",
        "usage": [
            504,
            10159,
            10663
        ],
        "executed": "The director of the top-1 rated movie is: Frank Darabont\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "give me a image for the collection Star Wars",
        "results": "```python\nimport requests\n\n# Define the headers to access the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the Star Wars collection\nurl_search = \"https://api.themoviedb.org/3/search/collection\"\nparams_search = {\n    \"query\": \"Star Wars\"\n}\nresponse_search = requests.get(url_search, headers=headers, params=params_search)\ncollection_id = response_search.json()['results'][0]['id']\n\n# Get the images for the collection by id\nurl_images = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\nresponse_images = requests.get(url_images, headers=headers)\n\n# Extract and print the image paths\nbackdrop_images = response_images.json()['backdrops']\nposter_images = response_images.json()['posters']\n\nfor image in backdrop_images:\n    print(\"Backdrop Image Path:\", image['file_path'])\n\nfor image in poster_images:\n    print(\"Poster Image Path:\", image['file_path'])\n```",
        "usage": [
            361,
            9436,
            9797
        ],
        "executed": "Backdrop Image Path: /d8duYyyC9J5T825Hg7grmaabfxQ.jpg\nBackdrop Image Path: /zZDkgOmFMVYpGAkR9Tkxw0CRnxX.jpg\nBackdrop Image Path: /itH1Wlzwf6yTNa7fVkYMVUwXlhR.jpg\nBackdrop Image Path: /vusuae67ukSLazTnR5Ab8uUZ0dj.jpg\nBackdrop Image Path: /jci0IkGpJRwpTx62jDxIFXAt2Sr.jpg\nBackdrop Image Path: /trf3Hi3tPOJARsCBoVMDBlpjPC4.jpg\nBackdrop Image Path: /iY2ujEY2m68OTTlPFTiHub9joHS.jpg\nBackdrop Image Path: /h3JDR9iruHqwGC4Dm8UbYkY9paK.jpg\nBackdrop Image Path: /benqmUIQGqU7iMYrDl8aUxhXWC.jpg\nBackdrop Image Path: /sGxcMvC6mfCzEir0c1tldsPhZEF.jpg\nBackdrop Image Path: /noKFlPn2GjuUounuxtmPnkRlZpa.jpg\nBackdrop Image Path: /e9mh9iqVxhon2Y7pkLZ7zItUWHX.jpg\nBackdrop Image Path: /4z9ijhgEthfRHShoOvMaBlpciXS.jpg\nBackdrop Image Path: /eO3PyZbDe7UlkyypMgfHWdeo9VZ.jpg\nBackdrop Image Path: /qCECROwx3TRUEgoZv2Mz2D723QC.jpg\nBackdrop Image Path: /n9NcXAZIurCo9RHvMahOCT244rF.jpg\nBackdrop Image Path: /5PqKzRkcPZOsKy1sqAC8IrYkeyc.jpg\nBackdrop Image Path: /9RykAYGe1wbygBAmqNhhtCj99ss.jpg\nBackdrop Image Path: /bMPfIfBZOUv7c357J8HliYJfpca.jpg\nBackdrop Image Path: /e2XZ6rbBFYqWB5n5na4GCjljfDM.jpg\nBackdrop Image Path: /3XwvVWP33yWOqwVlJCSZWC1Uy58.jpg\nBackdrop Image Path: /qVPChlozQ1BP3svfHjiAdNneMGA.jpg\nBackdrop Image Path: /gTwXUbylwCBNedCSNrOVKZzLTT8.jpg\nBackdrop Image Path: /osBSTziJWBaXbK0eTpNnPb5eIi4.jpg\nBackdrop Image Path: /rgjAb1oUCzJk1U2WhtQt7gGu84U.jpg\nBackdrop Image Path: /uyFHjhN8McyCy9EPaO1MsS3CydT.jpg\nBackdrop Image Path: /oGf9FeB8coLGYVp3SMHjAR809Lv.jpg\nBackdrop Image Path: /ojMAbHNL0VBXiV2oQpROJ6Xx827.jpg\nBackdrop Image Path: /ezt8TqHdwbs1iJhp3PTURDZ3hkh.jpg\nBackdrop Image Path: /kIL3Me1fuwPqYvE26N47bQuLz4a.jpg\nBackdrop Image Path: /wRrpzewue8QqBYcaIDCHcOFgyGT.jpg\nBackdrop Image Path: /5T9HNK6EZc0OlFmr6MWfFRse4l8.jpg\nBackdrop Image Path: /6hMN4oospeDItQlACbAWkjI7nC9.jpg\nBackdrop Image Path: /8ojRcy7XVNLI3bR6remPkk2xDJp.jpg\nBackdrop Image Path: /k3cZ5ked9bV1xHsmEdOYEZEIRu5.jpg\nPoster Image Path: /gfHJ2GJm44ZY2CO2MaBFYZEjmhy.jpg\nPoster Image Path: /r8Ph5MYXL04Qzu4QBbq2KjqwtkQ.jpg\nPoster Image Path: /gq5Wi7i4SF3lo4HHkJasDV95xI9.jpg\nPoster Image Path: /22dj38IckjzEEUZwN1tPU5VJ1qq.jpg\nPoster Image Path: /iTQHKziZy9pAAY4hHEDCGPaOvFC.jpg\nPoster Image Path: /bYbHqvRANCpuRTs0RAu10LhmVKU.jpg\nPoster Image Path: /6mHkagjziBPth2Mx0VpEercocm4.jpg\nPoster Image Path: /t2sABFPr9ft0bJ6XYdhCPsfooCd.jpg\nPoster Image Path: /suaJuFprbgdZaTE0mOt0xWIGFyQ.jpg\nPoster Image Path: /tdQzRSk4PXX6hzjLcQWHafYtZTI.jpg\nPoster Image Path: /gbaFVZMVL0nUhZLmX3TWNZj8ydE.jpg\nPoster Image Path: /7s98is4MxeDVCxIVrAsfrr50dMm.jpg\nPoster Image Path: /btVpLbQCNE8mDTRrb6Llk5B5pGr.jpg\nPoster Image Path: /pWVLFh4OuejTpUaDQbB1C4zoS2p.jpg\nPoster Image Path: /aSrMJYmQX8kpF26LijkCsYhBMvm.jpg\nPoster Image Path: /8X3WoKnDw9r7SIvM5vx0mpnb2yZ.jpg\nPoster Image Path: /8Li4KawpEa5i2gm5gFSBKmEFtvy.jpg\nPoster Image Path: /y6kKwGLCCy3MMbBdUnxB3afIfsd.jpg\nPoster Image Path: /xFnzs2hjiWBgv46XnCdBUToBKED.jpg\nPoster Image Path: /4QfUvGMaSMoItapTeg51Knf1PiF.jpg\nPoster Image Path: /rG8P8pPUDSm02VW3cKtivca4rqE.jpg\nPoster Image Path: /jGNtfNeFRmJBIwL1exFteZhedOr.jpg\nPoster Image Path: /ojQvEl8rFqJWYIATlDCUtxa1TeV.jpg\nPoster Image Path: /fByDz2DSFKR8jugyApmHFUQF1pq.jpg\nPoster Image Path: /oFgwvpoPi2Ixcg3YLxQpYhoH1Jm.jpg\nPoster Image Path: /9cSsr4dqTSqSlUOsbufco2YRrZQ.jpg\nPoster Image Path: /l9cWYWFwRZNdw0r2gesdDyXTbGx.jpg\nPoster Image Path: /sqYlJCjwdbhxlhbOVK9iMLYUZIF.jpg\nPoster Image Path: /qhEimz49g0r2sQ06Xfb8Hxmfk3T.jpg\nPoster Image Path: /hU6FebQXRKu0bd0VMNa8mTal8Eh.jpg\nPoster Image Path: /cEHz2gnXYZuqNGc8hAy35VgIvbT.jpg\nPoster Image Path: /drr5Td2aWuUR23ckuSOP6DhXBGL.jpg\nPoster Image Path: /1U4s6OoPoVScNh2xFNfzLMGDu59.jpg\nPoster Image Path: /vKeB6QYgi0b7VHHmeJ8JZzC99K8.jpg\nPoster Image Path: /mWU0DuJtl2bOno6kwXs3HZ3abwC.jpg\nPoster Image Path: /mLRwi2OQZWT58tOH83ysZWMnhUN.jpg\nPoster Image Path: /hf10Oz89bIyrtjKraH849ZCQliM.jpg\nPoster Image Path: /10rGm5WQpXclsqr2T8SFLYWMI0Q.jpg\nPoster Image Path: /knhIHcaUdLExfdksyvcIEssbJzT.jpg\nPoster Image Path: /nH3TpzQOPtnqauB8kntTnljBIns.jpg\nPoster Image Path: /4b3V0P5hpUHTM8ggfQQFFqKe5lc.jpg\nPoster Image Path: /kX5kXDAemzVv7yHezufeHDDGHkl.jpg\nPoster Image Path: /gP2aT6rwtjzGI8HapE4mNehaoZL.jpg\nPoster Image Path: /nMqQzmePEvjVcQZxKC38nS9Dqvh.jpg\nPoster Image Path: /b8FzGmDRm8E1revfJGLbJb33BkO.jpg\nPoster Image Path: /6yAb4kFTkm3R2qRk5uvSF2Hr7Nf.jpg\nPoster Image Path: /mEpQbsUSekbQRdffXMeQWjeHb34.jpg\nPoster Image Path: /aLDdG5e3c2qNMcWzlxAnW15okOr.jpg\nPoster Image Path: /bLPTI0236VjeBhcycu2wUwNSXGv.jpg\nPoster Image Path: /z37SuzzQZawvdBmtYcQWxriQmCK.jpg\nPoster Image Path: /fYWbvEBCLHWPHo0QZt6o7dKBSLP.jpg\nPoster Image Path: /drJ1vvVlwr5bmH9ssOl1m37q3Lc.jpg\nPoster Image Path: /ww4rH6EQ3610fBNuZBdIL9hSYkE.jpg\nPoster Image Path: /fI9R8fkW21fv0HDrwNnM3PZhgN.jpg\nPoster Image Path: /lYFNh6yeYWTPgg0qvnZMKKA8RS1.jpg\nPoster Image Path: /v3e56rck9tv8zeMuNldJdtpgFeQ.jpg\nPoster Image Path: /dcVdgUBO8lpuKpH7GzeyeqjSO0l.jpg\nPoster Image Path: /wRBGET9QNCOQJY55yAA1ZyF6cCb.jpg\nPoster Image Path: /qJNGWrKB3Bnshc1iuedpxXbVQMe.jpg\nPoster Image Path: /tGKRoZprIpJXFNvOtWu93KfWYIk.jpg\nPoster Image Path: /ufEdffeQOl8oTDHrBh34cDZtuZl.jpg\nPoster Image Path: /ikiFMVGhCePycr7MQQd8FufPh1F.jpg\nPoster Image Path: /46oFAcjORMltwPxR6uU6hM4mN7F.jpg\nPoster Image Path: /5gmlZYd76FPrc8zLNVDEDVQL9fh.jpg\nPoster Image Path: /wCRLEnMHmMLiQ6ixs8lbggLeNq4.jpg\nPoster Image Path: /mWAfAZVaw9mOOFEpaPwJHRENPza.jpg\nPoster Image Path: /7TOaabZ4TFqtn8cD1Jw1G7ycgSs.jpg\nPoster Image Path: /zwFQlQZYf6Zh6FncP76okjFZZfh.jpg\nPoster Image Path: /kVstTGhkSsILxxIUYIEGmlaYTFe.jpg\nPoster Image Path: /k6SPwdWi1m3p2JhoYn2KhRgZgEx.jpg\nPoster Image Path: /juoqZnVARJhZn5UjRodl6rVHXHY.jpg\nPoster Image Path: /58CAUPUgoTTA1LuesMrM5CbpcuW.jpg\nPoster Image Path: /defdE4jKZSBJ4DxdmOtYnLz8Qj7.jpg\nPoster Image Path: /lBdOIyD5rOJA34qiDi3yrZqdbg7.jpg\nPoster Image Path: /pKLFj7UNEcsRJxV69xmq6BB2i9s.jpg\nPoster Image Path: /t06usnuvImXwTa92SHoAkMEn8v2.jpg\nPoster Image Path: /y8T6UdWBPSG878n2sZiddx9vWER.jpg\nPoster Image Path: /aWxzsGF7PaZKR77F7SXkTc6npP1.jpg\nPoster Image Path: /jVTIJ33eGKja0SfI40ntASPBmnw.jpg\nPoster Image Path: /xAwL3ySFqWHYjpqXlQQXcbWCoII.jpg\nPoster Image Path: /me843ySolO7vwJqQcJ6OUbcRM3H.jpg\nPoster Image Path: /4B4OwAiu0xhOLI0p1AWBifG3qPE.jpg\nPoster Image Path: /4gsn3sBxH3Owx1Id7lTYkW52524.jpg\nPoster Image Path: /xwsYa1wA9EB9ibW1stJZpqHznKY.jpg\nPoster Image Path: /dLBoWkfIbEQRAYiXdB2uMXAqFoT.jpg\nPoster Image Path: /y6oGacKFP025f0PVwG94X60jjQS.jpg\nPoster Image Path: /klv4rvIxnyJcZAI3DFvW5gHTSpM.jpg\nPoster Image Path: /mttbNMFuyXvZJpSAdGqoolk69uk.jpg\nPoster Image Path: /qgnOC2T0kmxWOS32SKGsbtxSvN6.jpg\nPoster Image Path: /gZPLydtYmniGwP4zoxTnP47yWnu.jpg\nPoster Image Path: /6EvyuI0XpL7JopXTE72FsgM5d47.jpg\nPoster Image Path: /3JacSFXvk9AbCjz0nTdHMkDwTTH.jpg\nPoster Image Path: /18ticQ3bpUUGZGCR3pGglrz7ly0.jpg\nPoster Image Path: /hCxhxuc5or4ZKtiwQDmWBUN7Xbr.jpg\nPoster Image Path: /vGkiaAWM6B0bFyz2aW3fSRSM8cH.jpg\nPoster Image Path: /oG2xkP2Kwkrn3C8dyqyRXMOEx50.jpg\nPoster Image Path: /pYOArjBUvtPBsuWTIE58lQTrDwn.jpg\nPoster Image Path: /ajd1f8pX1JcYZBrxbAVm3l53TJ7.jpg\nPoster Image Path: /lGM4SPc5MtQDUTz6M18aVTEjy7Y.jpg\nPoster Image Path: /q2FanXsFtdrOsrGplVtOg7oFrc3.jpg\nPoster Image Path: /8EjZLn7SZ9fG6l2anOJwB8u6prb.jpg\nPoster Image Path: /27d091mfAQ7PJ0TrZaglWPzm0va.jpg\nPoster Image Path: /v4dUG5ujNR63UbEDfSDZ3KaINlh.jpg\nPoster Image Path: /nf3N6GphVFJCTUdlb4nQyxgFk7T.jpg\nPoster Image Path: /yvQdymDQiTYHLsE7qv41liZ7auy.jpg\nPoster Image Path: /zVEJCIguJkxSFaQZSSFMq6l2Vq3.jpg\nPoster Image Path: /sJ0zFbzrTAG3riisqLuhF8WcM45.jpg\nPoster Image Path: /9m4sVAYCZcxdJR3D4xAbLZE7PuE.jpg\nPoster Image Path: /y2SNPwLT9zdZjJQRVX7T5u8mko7.jpg\nPoster Image Path: /z9QaA7oszDSY0jLgv0mDkYF7u8M.jpg\nPoster Image Path: /hpwpPOuuAuSadR2BNSKKAz9aD9O.jpg\nPoster Image Path: /p8PPWEfm30i9pIcbu5fXQBcTi5L.jpg\nPoster Image Path: /bH5tGEuQexH0bt4ruobaquxv7U4.jpg\nPoster Image Path: /j0m8uIWawPibEAzYdlf0t7GRzJs.jpg\nPoster Image Path: /6Rj64rPRrzoN0Dm7UQdW36YwuIi.jpg\nPoster Image Path: /mUk8Byi4ZkT9Wt5NPkjCXwrV5FP.jpg\nPoster Image Path: /fD8QxkMfIRtEBvpNMUCi3NYLbtc.jpg\nPoster Image Path: /mwcBF8UlkRO7O3N4fPpQX98kxrN.jpg\nPoster Image Path: /sYxKQMKQ4aX7LZW4mEv7V8bOp9e.jpg\nPoster Image Path: /uiUqpCjyZOEeb1DJHSjlyyCBkT0.jpg\nPoster Image Path: /9fI5hioAJrj02h0J9879zLhUesh.jpg\nPoster Image Path: /1wFBiObLTenV5F8ybngRYBP8OMi.jpg\nPoster Image Path: /rltyPUOCL2xM5qB6KfD62qDdr73.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "results": "```python\nimport requests\n\n# Define the API url to search for companies\nurl = \"https://api.themoviedb.org/3/search/company\"\n\n# Define the parameters for the query to search for Walt Disney\nparams = {\n    \"query\": \"Walt Disney\",\n    \"page\": 1\n}\n\n# Define the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Find the logo path for Walt Disney\n    for result in data[\"results\"]:\n        if result[\"name\"] == \"Walt Disney\":\n            if result[\"logo_path\"]:\n                logo_url = f\"https://www.themoviedb.org/t/p/original{result['logo_path']}\"\n                print(\"The logo of Walt Disney:\", logo_url)\n            else:\n                print(\"Walt Disney logo not found.\")\n            break\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            388,
            9747,
            10135
        ],
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "results": "```python\nimport requests\n\n# Define the API url for searching the movie \"Titanic\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Parameters for searching the movie \"Titanic\"\nparams_search_movie = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Send a GET request to search for the movie \"Titanic\"\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie ID for \"Titanic\"\nmovie_id_titanic = data_search_movie[\"results\"][0][\"id\"]\n\n# Define the API url for getting the credits of the movie \"Titanic\"\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id_titanic}/credits\"\n\n# Send a GET request to get the credits of the movie \"Titanic\"\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Get the lead actor of the movie \"Titanic\"\nlead_actor_name = data_movie_credits[\"cast\"][0][\"name\"]\nlead_actor_profile_path = data_movie_credits[\"cast\"][0][\"profile_path\"]\n\n# Print the lead actor's name and profile path\nprint(\"Lead actor of Titanic:\", lead_actor_name)\nprint(\"Lead actor's profile path:\", lead_actor_profile_path)\n```",
        "usage": [
            316,
            10715,
            11031
        ],
        "executed": "Lead actor of Titanic: Leonardo DiCaprio\nLead actor's profile path: /wo2hJpn04vbtmh0B9utCFdsQhxM.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching movies\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the API endpoint for getting similar movies\nsimilar_movie_url = \"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\n\n# Define the API endpoint for getting reviews of a movie\nreviews_url = \"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Query to search for movies similar to Titanic\nsearch_params = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Call the search movie API to get the movie details\nsearch_response = requests.get(search_movie_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the id of the first movie similar to Titanic\nif search_results.get(\"results\"):\n    if len(search_results[\"results\"]) > 0:\n        first_movie_id = search_results[\"results\"][0][\"id\"]\n\n        # Use the first movie id to get similar movies\n        similar_params = {\n            \"page\": 1\n        }\n        similar_response = requests.get(similar_movie_url.format(movie_id=first_movie_id), headers=headers, params=similar_params)\n        similar_results = similar_response.json()\n\n        # Get the id of the first similar movie\n        if similar_results.get(\"results\"):\n            if len(similar_results[\"results\"]) > 0:\n                first_similar_id = similar_results[\"results\"][0][\"id\"]\n\n                # Use the first similar movie id to get the reviews\n                reviews_response = requests.get(reviews_url.format(movie_id=first_similar_id), headers=headers)\n                reviews_results = reviews_response.json()\n\n                # Print the reviews\n                if reviews_results.get(\"results\"):\n                    for review in reviews_results[\"results\"]:\n                        print(\"Author:\", review[\"author\"])\n                        print(\"Content:\", review[\"content\"])\n                        print(\"------------------\")\n\n```\nThis code first searches for movies similar to \"Titanic\", then retrieves the first similar movie and finally fetches the reviews for that movie. It then prints out the author and content of each review.",
        "usage": [
            633,
            9637,
            10270
        ],
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "results": "```python\nimport requests\n\n# Provided API url and headers\nurl = \"https://api.themoviedb.org/3/movie/597/recommendations\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making an HTTP GET request to get movie recommendations for movie id 597 (Titanic)\nresponse = requests.get(url, headers=headers)\n\n# Extracting the movie recommendations from the response\nif response.status_code == 200:\n    movie_recommendations = response.json()[\"results\"]\n    for movie in movie_recommendations:\n        print(movie[\"title\"])\nelse:\n    print(\"Error occurred while fetching movie recommendations\")\n```",
        "usage": [
            285,
            8686,
            8971
        ],
        "executed": "Harry Potter and the Philosopher's Stone\nThe Wolf of Wall Street\nSuicide Squad\nShutter Island\nAvatar\nRomeo + Juliet\nForrest Gump\nThe Lord of the Rings: The Two Towers\nToy Story\nBatman Begins\nPirates of the Caribbean: The Curse of the Black Pearl\nThe Revenant\nKick-Ass\nMen in Black\nTwilight\nCatch Me If You Can\nInception\nThe Shawshank Redemption\nThor\nFinding Nemo\nThe Lord of the Rings: The Fellowship of the Ring\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "results": "```python\nimport requests\n\n# Set the API url to get the popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Set the parameters to get the page with popular people\nparams = {\"page\": 1}\n\n# Set the API key in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the popular people data from the response\n    popular_people = response.json()\n\n    # Find the person ID for Christopher Nolan\n    christopher_nolan_id = None\n    for person in popular_people['results']:\n        if person['name'] == 'Christopher Nolan':\n            christopher_nolan_id = person['id']\n            break\n\n    # If the ID is found, get the latest movie directed by Christopher Nolan\n    if christopher_nolan_id is not None:\n        url = f\"https://api.themoviedb.org/3/person/{christopher_nolan_id}/movie_credits\"\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            movie_credits = response.json()\n            # Get the latest movie directed by Christopher Nolan\n            for movie in movie_credits['crew']:\n                if movie['job'] == 'Director':\n                    latest_movie = movie\n                    break\n            print(\"The latest movie directed by Christopher Nolan is:\", latest_movie['title'])\n        else:\n            print(\"Failed to retrieve movie credits.\")\n    else:\n        print(\"Christopher Nolan's ID not found in popular people.\")\nelse:\n    print(\"Failed to retrieve popular people data.\")\n```",
        "usage": [
            520,
            10771,
            11291
        ],
        "executed": "Christopher Nolan's ID not found in popular people.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for person ID of Martin Scorsese\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Martin Scorsese\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the list of movies directed by Martin Scorsese\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovies = response.json()[\"crew\"]\n\n# Find the highest rated movie\nhighest_rated_movie = max(movies, key=lambda x: x[\"vote_average\"])\n\n# Output the title of the highest rated movie directed by Martin Scorsese\nprint(\"The highest rated movie directed by Martin Scorsese is:\", highest_rated_movie[\"title\"])\n```",
        "usage": [
            377,
            11225,
            11602
        ],
        "executed": "The highest rated movie directed by Martin Scorsese is: GoodFellas\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "results": "```python\nimport requests\n\n# Headers with Authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Leonardo DiCaprio\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Leonardo DiCaprio\"\n}\nresponse = requests.get(person_search_url, headers=headers, params=params)\nperson_json = response.json()\nperson_id = person_json[\"results\"][0][\"id\"]\n\n# Get Leonardo DiCaprio's movie credits\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovie_credits_json = response.json()\n\n# Get the latest movie that he was part of\nlatest_movie = movie_credits_json[\"cast\"][0]\nmovie_id = latest_movie[\"id\"]\n\n# Get the movie details\nmovie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(movie_details_url, headers=headers)\nmovie_details_json = response.json()\n\n# Find the director of the latest movie\nfor crew_member in movie_details_json[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director = crew_member[\"name\"]\n        break\n\nprint(f\"The director of Leonardo DiCaprio's latest movie is: {director}\")\n```",
        "usage": [
            446,
            8983,
            9429
        ],
        "executed": "The director of Leonardo DiCaprio's latest movie is: Baz Luhrmann\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "results": "```python\nimport requests\n\n# Define the base URL and headers\nbase_url = \"https://api.themoviedb.org/3\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Catherine Hardwicke\nsearch_person_url = f\"{base_url}/search/person\"\nparams = {\n    \"query\": \"Catherine Hardwicke\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nresults = response.json()\n\n# Extract the person id of Catherine Hardwicke\nperson_id = results['results'][0]['id'] if results['results'] else None\n\n# Get the TV show credits for Catherine Hardwicke\nif person_id:\n    tv_credits_url = f\"{base_url}/person/{person_id}/tv_credits\"\n    response = requests.get(tv_credits_url, headers=headers)\n    tv_credits = response.json()\n\n    # Find the most recent TV show directed by Catherine Hardwicke\n    recent_tv_show = None\n    for credit in tv_credits['crew']:\n        if credit['job'] == 'Director' and credit['media_type'] == 'tv':\n            recent_tv_show = credit\n            break\n\n    if recent_tv_show:\n        print(f\"The most recent TV show directed by Catherine Hardwicke is '{recent_tv_show['original_name']}'\")\n    else:\n        print(\"No TV show directed by Catherine Hardwicke found.\")\nelse:\n    print(\"Catherine Hardwicke not found in the database.\")\n```",
        "usage": [
            481,
            11325,
            11806
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters for the API request\nparams = {\n    \"query\": \"Breaking Bad\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Setting the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the JSON response\nsimilar_shows = response.json()\n\n# Extract the results\nresults = similar_shows['results']\n\n# Display the results\nfor show in results:\n    print(show['name'])\n```",
        "usage": [
            304,
            9444,
            9748
        ],
        "executed": "Breaking Bad\nBreaking Bad Fortune Teller\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "results": "```python\nimport requests\n\n# Define the API url to get today's trending movies\nurl = \"https://api.themoviedb.org/3/trending/all/day\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the request to get today's trending movies\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the movie id of the most trending movie\nmost_trending_movie_id = data['results'][0]['id']\n\n# Define the API url to get credits for a movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{most_trending_movie_id}/credits\"\n\n# Make the request to get the credits for the most trending movie\nresponse_credits = requests.get(credits_url, headers=headers)\ncredits_data = response_credits.json()\n\n# Get the details of the crew to find the director\ndirectors = [crew['name'] for crew in credits_data['crew'] if crew['job'] == \"Director\"]\n\nif directors:\n    print(f\"The director of today's most trending movie is: {directors[0]}\")\nelse:\n    print(\"Director information not found for the most trending movie.\")\n```",
        "usage": [
            412,
            7744,
            8156
        ],
        "executed": "The director of today's most trending movie is: Juan Carlos Fresnadillo\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching movies\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the query parameter for searching the movie \"Twilight\"\nparams = {\n    \"query\": \"Twilight\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Set the HTTP headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    movie_data = response.json()\n    \n    # Get the results for the movie \"Twilight\"\n    if len(movie_data[\"results\"]) > 0:\n        twilight_movie = movie_data[\"results\"][0]\n        \n        # Get the movie ID for further API call\n        movie_id = twilight_movie[\"id\"]\n        \n        # Define the API endpoint for getting the credits of the movie\n        credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n        \n        # Make the API request to get the credits of the movie\n        credits_response = requests.get(credits_url, headers=headers)\n        \n        # Check if the request for credits was successful\n        if credits_response.status_code == 200:\n            credits_data = credits_response.json()\n            \n            # Find the director in the crew list\n            for crew_member in credits_data[\"crew\"]:\n                if crew_member[\"job\"] == \"Director\":\n                    director_name = crew_member[\"name\"]\n                    print(f\"The director of the movie 'Twilight' is: {director_name}\")\n                    break\n        else:\n            print(\"Unable to retrieve credits information\")\n    else:\n        print(\"No movie found with the title 'Twilight'\")\nelse:\n    print(f\"Error: {response.status_code}\")\n```",
        "usage": [
            555,
            10547,
            11102
        ],
        "executed": "The director of the movie 'Twilight' is: Catherine Hardwicke\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "results": "```python\nimport requests\n\n# Define the URL of the API\nurl = \"https://api.themoviedb.org/3/tv/1399/season/1/episode/2/images\"\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Assuming the API response contains an array of 'stills', we can access the first photo\n    if 'stills' in data and len(data['stills']) > 0:\n        photo_path = data['stills'][0]['file_path']\n        print(\"The photo path is:\", photo_path)\n    else:\n        print(\"No photos found for the specified episode.\")\nelse:\n    print(\"Error: Unable to fetch the data. Status code:\", response.status_code)\n```",
        "usage": [
            360,
            8094,
            8454
        ],
        "executed": "The photo path is: /l0GJx3IR8YasbztTJi5uK0XqkEo.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "What is top-1 rated movie?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\nparams = {\n    \"page\": 1\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\nif 'results' in data and len(data['results']) > 0:\n    top_rated_movie = data['results'][0]['title']\n    print(f\"The top rated movie is: {top_rated_movie}\")\nelse:\n    print(\"No results found.\")\n```",
        "usage": [
            276,
            10792,
            11068
        ],
        "executed": "The top rated movie is: The Shawshank Redemption\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "results": "```python\nimport requests\n\n# Define the API url for searching a movie\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the query parameter to search for \"The Matrix\" movie\nparams = {\n    \"query\": \"The Matrix\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"  # Example region code\n}\n\n# Make the API request\nresponse = requests.get(url_search_movie, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the response JSON\n    movie_results = response.json()\n\n    # Get the movie id of the first search result\n    if movie_results[\"total_results\"] > 0:\n        movie_id = movie_results[\"results\"][0][\"id\"]\n\n        # Define the API url for getting release dates of a movie\n        url_movie_release_dates = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n\n        # Make the API request to get release dates for the movie\n        response_release_dates = requests.get(url_movie_release_dates, headers=headers)\n\n        # Check if the request was successful\n        if response_release_dates.status_code == 200:\n            # Parse the response JSON\n            release_dates_result = response_release_dates.json()\n\n            # Extract and print the release date of the movie\n            release_dates = release_dates_result[\"results\"]\n            for result in release_dates:\n                if result[\"iso_3166_1\"] == \"US\":  # Assuming US as the region\n                    release_date = result[\"release_dates\"][0][\"release_date\"]\n                    print(f\"The release date of the movie 'The Matrix' is {release_date}\")\n                break\n        else:\n            print(\"Failed to retrieve release dates for the movie\")\n    else:\n        print(\"No movie found with the title 'The Matrix'\")\nelse:\n    print(\"Failed to retrieve movie details\")\n```",
        "usage": [
            412,
            12013,
            12425
        ],
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "Who is the most popular person?",
        "results": "```python\nimport requests\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get the list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    # Extract the data from the response\n    data = response.json()\n    # Find the most popular person\n    most_popular_person = max(data['results'], key=lambda x: x['popularity'])\n    print(\"The most popular person is:\", most_popular_person['name'])\nelse:\n    print(\"Failed to fetch data. Status code:\", response.status_code)\n```",
        "usage": [
            311,
            9916,
            10227
        ],
        "executed": "The most popular person is: Jason Statham\n",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Search for Christopher Nolan\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = response.json()\n\n# Get the person_id of Christopher Nolan\nperson_id = search_results[\"results\"][0][\"id\"]\n\n# 2. Get movie credits for Christopher Nolan\ncredits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits_results = response.json()\n\n# Get the movie_ids for movies directed by Christopher Nolan\nmovie_ids = [movie[\"id\"] for movie in credits_results[\"crew\"] if movie[\"job\"] == \"Director\"]\n\n# 3. Get images for movies directed by Christopher Nolan\ncover_images = []\nfor movie_id in movie_ids:\n    images_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n    response = requests.get(images_url, headers=headers)\n    images_results = response.json()\n    cover_images.extend(images_results[\"posters\"])\n\n# Print the cover images\nprint(cover_images)\n```",
        "usage": [
            448,
            9139,
            9587
        ],
        "executed": "[{'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gEU2QniE6E77NI6lCU6MxlNBvIx.jpg', 'vote_average': 5.728, 'vote_count': 39, 'width': 2000}, {'aspect_ratio': 0.668, 'height': 1124, 'iso_639_1': 'en', 'file_path': '/mS4EvhsrT0SQZOlWrQEzWI5KiUa.jpg', 'vote_average': 6.026, 'vote_count': 33, 'width': 751}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/bzONet3OeCTz5q9WOkGjVpOHMSR.jpg', 'vote_average': 5.638, 'vote_count': 12, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/iawqQdFKI7yTUoSkDNP8gyV3J3r.jpg', 'vote_average': 5.634, 'vote_count': 14, 'width': 2000}, {'aspect_ratio': 0.707, 'height': 2829, 'iso_639_1': 'en', 'file_path': '/fX44bgxKQsS4P4ewb2iotHveEkn.jpg', 'vote_average': 5.588, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/nrSaXF39nDfAAeLKksRCyvSzI2a.jpg', 'vote_average': 5.586, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/1pnigkWWy8W032o9TKDneBa3eVK.jpg', 'vote_average': 5.522, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/9d1sCoMSGJZtghS2X9us1h9u8lW.jpg', 'vote_average': 5.522, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/nCbkOyOMTEwlEV0LtCOvCnwEONA.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cBuvBJMhdZl85v4wRKDmEZ7Qd9B.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4pWbfjzUkusGXAZQoduARaI0qu2.jpg', 'vote_average': 5.394, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'be', 'file_path': '/rPrqBqZLl8m6sUQmZCchqW7IEYo.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/iolc5VLP4PFU0XvjTVRiCb80mUR.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/xbiycuc84TrieEWwkkuH2hoEa9S.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.75, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/8ATtOkzbQ315u5muIlAxtCZESOf.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 750}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/yQvGrMoipbRoddT0ZR8tPoR7NfX.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7uCL4gbdmokTWyeYbJxwBo5pbVT.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/fb9VcK7aCI2z4kH5nXjBKkEUVEu.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/v7Iib57HHgSEI9B7XYRF6qrs11T.jpg', 'vote_average': 5.36, 'vote_count': 27, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/9PTvvflydmTnfvMWMAwMMkV7X2s.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2304, 'iso_639_1': 'en', 'file_path': '/vRJ1ScAJUDeTxuBv5cX45fDD0I0.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1536}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/6KiSSndIMLj1swkpPNq2lYppDVQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.692, 'height': 1228, 'iso_639_1': 'bg', 'file_path': '/omKeIQBr8oiW3MikuoGPQ6z55EG.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 850}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/tYaC23U62BOJRNVIlFGT6iowEwj.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ja', 'file_path': '/rgoNKrN5oEWIpfM6ZSPORbB2NYf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/zDNAeWU0PxKolEX1D8Vn1qWhGjH.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 734}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/jM4VN1IFD2R1ElpqT3T0bt08uJt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 734}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/2mRRFbnMPMSh4ZiRdiAK0q303Nm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 2963, 'iso_639_1': 'he', 'file_path': '/dyUA5G7hmMOlBfa7yzAl0Zolynr.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/uODkRJ68CQN2uiHksyGXNPTYVuN.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/q6KI8ChlkIYYZww8C053cVfPQRo.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'de', 'file_path': '/hHdhfkkzt0Mwec33Ux177Z7CO8w.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/s7r8IkdbFP42sYhHhyPRnySmqCD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/674XbyJKOO7z5ds6ddR6uAmoThU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 951}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/wM0PSFUYHcFLEguYNjn3RDOEKtt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2157, 'iso_639_1': 'en', 'file_path': '/yCKxTlmPNQBoAl5qlHfn0GHMLjV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1439}, {'aspect_ratio': 0.667, 'height': 1242, 'iso_639_1': 'en', 'file_path': '/nvA7SLPXtuI3kG1ViXb5r8v8581.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 828}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/wATQX43h29TojNIbcwLuPg7OPqi.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zrwNvkdYXrgFea41AxhJhIKopov.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2304, 'iso_639_1': 'en', 'file_path': '/jWmRKnYYoIXfsiNuQVr7iB1DE6h.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1536}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/7fEFzWmCy6rV2gDl0uhz9smCQDS.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/vReLRjDV9XPhiOSEW7QWow4DXwf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 790, 'iso_639_1': 'en', 'file_path': '/fZYl4hG1Xve39hqeEN7q6UJsWPF.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 527}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/6ricSDD83BClJsFdGB6x7cM0MFQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2829, 'iso_639_1': 'it', 'file_path': '/fD5OfSm5aMEKlFpYp9jbGP8IxuU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1886}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/mQNr5d0ypstgJ6X0umnaJWoPdH4.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/th5UkDLIa7yyma9UYDAWaIgDh6z.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1667}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/bMKiLh0mES4Uiococ240lbbTGXQ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/fbUwSqYIP0isCiJXey3staY3DNn.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'tr', 'file_path': '/y1TKElkgWOl90iFik3GHlgJdphm.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/9rSeLJx4k1TaIUlPa4gwZK6tBxl.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/mR2OK5aK5kMOdAQYfc5kkOg06Pn.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/pOQfDNjk22UhTrAGwwN8Nwz7cyj.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/h7zAAbQ0rtEteSEQf7HklyizBg5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/j5AiH1Ez0b0RCjI2MTMvSDgkyXP.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1012}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/7HEYmKkuWHya4WTGhkqCjSfokAv.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1013}, {'aspect_ratio': 0.704, 'height': 2840, 'iso_639_1': 'de', 'file_path': '/lckRcubpItGlnO1v60clysNirme.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/eloxVOLxwOCPSzv1MFO2SuJYtrH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/7v5cRygVR8hqiAUP1a9IXdV3NUB.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/3c95G7trDKHahCYKMekCXjeacdh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ka', 'file_path': '/18Whj5cKOeAH01da7PLHDvKC76S.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1104, 'iso_639_1': 'en', 'file_path': '/cA5TGzNpwxhLGeAELmWHB5klcvN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 736}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xrgBLpPMXWXKdyj5r36RVfmkRdb.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/990DWuNkoVgvzu8meLQO1WwTHHQ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/e1pkIN4dPjug8rk75BRVukyIXAn.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/p6wYy2mUsOwi4TalNAk46ft4sVJ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/5qhJeFztZ2N31T7TvG7j6M1sOtj.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1125, 'iso_639_1': 'zh', 'file_path': '/7z0QoRia9Tknxe1R1vz7jwkzUrm.jpg', 'vote_average': 5.18, 'vote_count': 18, 'width': 750}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/8YZZMKVoc05O8mWdwzKMGhtM4m.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 734}, {'aspect_ratio': 0.736, 'height': 1284, 'iso_639_1': 'fr', 'file_path': '/uWZrj6K6kwggb8qdlpko76SRSG7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 945}, {'aspect_ratio': 0.667, 'height': 1124, 'iso_639_1': 'en', 'file_path': '/1ZOWn2VSiRhGdfWW7PdreiUOYuR.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 750}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/sOXOGIAUdlsygIovTGh0YIGeREN.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/jpxJj9mVbDNyG08fbmTyGFvZFNC.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/qvxBKd8GrgPg1W5FDG5nmwpzbb7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/uz0owCMTNBmojwPQcDR6OpdCyL2.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/u6EAEtocvyBbc3vwmwHh569DOTs.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.664, 'height': 1204, 'iso_639_1': 'en', 'file_path': '/90NU5EtPAjs1toYOu2cp4emP1tk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/aQWo0r7dcqrW8OdZ5PjkKdemaXN.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'zh', 'file_path': '/c35Vwd9rmMQfaEJuUrJRF3LZWJX.jpg', 'vote_average': 5.164, 'vote_count': 14, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/cv3tj98DvCW8ba75a9XwDPdiYIt.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 1600, 'iso_639_1': 'es', 'file_path': '/d1QKiYtceF3GDtxvTFXFAqwwah9.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1120}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/zq8j3XRJDVqNhiRMensg2uTkYrd.jpg', 'vote_average': 5.12, 'vote_count': 17, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/2QzyxZlj2HxVWiCjgjORIvjAq8T.jpg', 'vote_average': 5.12, 'vote_count': 17, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'en', 'file_path': '/qDSDtonrb6LfVOJXBbpZJNLjr2L.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 600}, {'aspect_ratio': 0.697, 'height': 1438, 'iso_639_1': 'es', 'file_path': '/9kmFzQjRdEjSpjVQeGlvmHAzaPw.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1003}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/AtOL7JqNBGELgBA87gSHNcfzSD.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/sEgN6vtJTw1CW7hjQp4dMUCxUSh.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1050}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/ija1bykAdfthqxlSl0UHhOBI2YM.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/55JWKCqNTn54016voGvig52ikjb.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6LlCIoqKpyJbKB63cmD4pyByHXQ.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/kfP55zsGaq9xl4CfI1C6TFDmLkZ.jpg', 'vote_average': 5.1, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/3DKszh7Ng0EN0UoTkIT01rb0SYC.jpg', 'vote_average': 5.1, 'vote_count': 13, 'width': 672}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/eS79aflvTbW2f754gCO7NM1j7Ym.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 672}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/rUOaQxFj5aKIgQJnmJRF22qQXrH.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 672}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/cNr99Vx7jIa2VOnxRMAfatt1Ong.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/vm4avyFTQAYT4k3YCXasI2Q0BCz.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.674, 'height': 800, 'iso_639_1': 'zh', 'file_path': '/x0svdinUPWHwI14CtIdeB5KXfiy.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 539}, {'aspect_ratio': 0.674, 'height': 800, 'iso_639_1': 'zh', 'file_path': '/zLgW4iKqUXxuTBMk5DmOfhPf0zw.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 539}, {'aspect_ratio': 0.701, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/mBZgrHMZ1VQqpuhHZU8fsN03H8u.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 673}, {'aspect_ratio': 0.667, 'height': 1800, 'iso_639_1': 'zh', 'file_path': '/7I0sjfbWJ5r8e8M9jWf7WcN256j.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/zQsvYbHaMjBRfnPVxZdtbPyyFT8.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cn', 'file_path': '/ulLGFg2QUAhKvkgClIJp2uxuYiA.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.707, 'height': 1698, 'iso_639_1': 'ja', 'file_path': '/vA133yh9mW7Kt82x3f6dnirLd73.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'de', 'file_path': '/jb2lnJrWkRhDy7C3yb129YQIY6i.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/9W7qYnmi1W3648YXVJvpjk82MUf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/hbGNJb88HjoQurnRYYWg45YBFtz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1667}, {'aspect_ratio': 0.702, 'height': 1500, 'iso_639_1': 'ja', 'file_path': '/v6oNcydMvHwV8sxNIF8eivbw8tK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1053}, {'aspect_ratio': 0.71, 'height': 1408, 'iso_639_1': 'cn', 'file_path': '/eX4Al8LtAmuw5RRHRLuDxs2Kn22.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 2024, 'iso_639_1': 'ro', 'file_path': '/mgt3D3a51efPMqGOgwH7AaF5m67.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1417}, {'aspect_ratio': 0.699, 'height': 2841, 'iso_639_1': 'en', 'file_path': '/hDO9K7NLSUHTis7QDeEdH64KEJ2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1986}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xdAzr43DN4BNMUomn8kgMsGUc7Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/q4emCJmjNomEE2pVGgqr3nDEIzI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2286, 'iso_639_1': 'ko', 'file_path': '/evoEi8SBSvIIEveM3V6nCJ6vKj8.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1524}, {'aspect_ratio': 0.693, 'height': 1108, 'iso_639_1': 'el', 'file_path': '/o0xb7oUWC8K516QdYISRg57fFJv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 768}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'be', 'file_path': '/104v27KQPR4FWQJtu25WEVIKB9S.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/goxCjppjJpJhhAYgzPTTBrqbfHi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 2287, 'iso_639_1': 'ko', 'file_path': '/Ap70Jv6nsJ3RpNrK66CfcicBHTA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1602}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/1KTTpt22QCdYkPmW7qcMsrEOA1D.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 734}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/bfMkoXy8d5HGBWPxOvCPRjtRZMF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 734}, {'aspect_ratio': 0.75, 'height': 1600, 'iso_639_1': 'fr', 'file_path': '/yFWUnIdLuxEB00NXQDSjuzgH0fO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pGZpvsjeJ1F5DWBhTe5h2cjIjR9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/6qdusBmmCndnYs1jkf7BSUrIoBr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/7jOjfOlM9hsZS6B930Oj10X56ib.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/gTlZAMmuMjN2Ia0M4pxU2C0ZWxq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 1408, 'iso_639_1': 'cn', 'file_path': '/fkb2SwmbXhjTCfqU82XmpH9VRAr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cn', 'file_path': '/fPM9jZHZAIo0JI4iMLpm5pC4OLw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/zioKUjPlD1aAg0jSdlZY4LNuJgP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'hr', 'file_path': '/lGdLsK976sbGRppdSHbQ5PbAMnb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.699, 'height': 2048, 'iso_639_1': 'tr', 'file_path': '/1T0YWRHgxkRXLh78RgPBH7yGHqU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1432}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'tr', 'file_path': '/gdo6oKHUdUiNLscrXzx3LZ6QcWw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 648}, {'aspect_ratio': 0.676, 'height': 888, 'iso_639_1': 'th', 'file_path': '/gx36DX1RLixLu6sBWgmdiDr7Rbb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.676, 'height': 947, 'iso_639_1': 'th', 'file_path': '/aDJlk2mPEo0weBzJ1eikAqZeHwS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.676, 'height': 947, 'iso_639_1': 'th', 'file_path': '/6L8Eo6ZgBKz63ar5lB6esutDmCU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/rct7HdAfPyvSqbr4H86b6z10tCE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1622, 'iso_639_1': 'en', 'file_path': '/lpkCFuoPC2m1tIHzkpcx6tO2JSa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/WXwTgRstrSe83GDSJvJLhGsMia.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 667}, {'aspect_ratio': 0.704, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/jT6hhix5X8hFgFUrQBy91QwFSlE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1056}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/ogn2abMeIel1UlLm8APU2U69Ydt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/3CQX7KAtGFVfI4PiPRD93Uf3xzX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oS4PsbsKxSP16qYj3RTSYO46OtB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/75VHAQoz8oOFISA52Ojbvpkcml9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/15SGNP9JUGCdKzResOuK07rmOxn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2157, 'iso_639_1': 'en', 'file_path': '/rfgabI22dfjG30GwD87pZ3v1pJQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1439}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/u2PufavhWhs598P66oYfmGSj6A4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/78SsIp2vSCwsXWoOMTcIydMl0ur.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cheLvF0GpLQsmC56L52t2hD4TMO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/w09DcbYm6YWno1H3OgCxUuNp2QL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7FmbPtk8yYu93HeOYQuiqKg81GO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/wvvpXMNB1ocUF8ef5ENhOhcvvmc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/nfDwAaCRwj5BLnkCitv0mgfjZAr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2880, 'iso_639_1': None, 'file_path': '/8CQOK1RyhUAZGUfiea0aAw3nCub.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.717, 'height': 2788, 'iso_639_1': None, 'file_path': '/2khhc03aoTG8nHtGvehEqvcFTDQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2880, 'iso_639_1': None, 'file_path': '/9DydKQbpAgsksnG3BvuVlV28VIs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/fUlEUhtWOuaojBaYhBXdpgBG3VJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/v1M9zqBq3JAF1Et6ltN2d2i1ZS0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uluMeKfYFVvfZlmHgFBXqbnHXE2.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 906, 'iso_639_1': 'en', 'file_path': '/eyDMENQZYq0APm8AypQT0DNOrwa.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 612}, {'aspect_ratio': 0.711, 'height': 1688, 'iso_639_1': 'fr', 'file_path': '/fTWzRx8TKAxj8EaNs0wZ17kiqCW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/yuNs09hvpHVU1cBTCAk9zxsL2oW.jpg', 'vote_average': 5.576, 'vote_count': 13, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/nWtySDlffTfwAa0rSfq61o33ZXV.jpg', 'vote_average': 5.456, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/uprP8rtOgMYJQ2h3ldDFvGsaBgH.jpg', 'vote_average': 5.394, 'vote_count': 10, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/3jFQqn81xdYqNquQZtsu8PJBPiB.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/nzlv62aC0octS5AklAiWpXLX9Z0.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2234, 'iso_639_1': 'uk', 'file_path': '/j0W26SOwnorl6Kga9A90wCypjcr.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1490}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/adRNs1fR1ggpsUQejMvzRiyu7F2.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/rO9d5ES2v5h2xDDZzVWUfQwdZ42.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.707, 'height': 2000, 'iso_639_1': 'ko', 'file_path': '/vqxdADPdy0ZVJr8dMB3mh6C5Vsv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1414}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/tBS1gqYTGS31sM9vAGc5fKCAJTA.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/neHrQLVfT3KPqvv30pNPyRb6chQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/wqG9YXPBpDbC4NpV1Xc42BOm2hO.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/uSae85DR1D4uKknQIsHbuqO1RgN.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.671, 'height': 1414, 'iso_639_1': 'ko', 'file_path': '/pXLnKcUzbUZI8OwkznA8te5dOSt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 949}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/7leBWM27Q0TUnvmhw6WnFNgGn4G.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/fKTPH2WvH8nHTXeBYBVhawtRqtR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'ru', 'file_path': '/xILX5k6PvSeCQ0NFVjKQJKkiJr2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/iQmjFjtM4bf85KY3ToZTjJPNfx0.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.659, 'height': 1117, 'iso_639_1': 'en', 'file_path': '/exU1uUwNuF7EXy6G9nKVUJfGG4l.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 736}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/psE5eio91dVL1k5nTwPUNLp7Kuy.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2289, 'iso_639_1': 'uk', 'file_path': '/dH4wSoQx5Pn5Ig3lPediWEJvzzl.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1526}, {'aspect_ratio': 0.671, 'height': 1103, 'iso_639_1': 'ko', 'file_path': '/iWr4SwGJTF9Pamoeaan8tLgp0r5.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 740}, {'aspect_ratio': 0.671, 'height': 2828, 'iso_639_1': 'ko', 'file_path': '/ogpwO0trLk4Fc4eqgy5S4ShH3oJ.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1897}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/AoLzLn8Z5akd1zHfBcrIiF2MdPw.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1439, 'iso_639_1': 'uk', 'file_path': '/6BHA8tT4d4M5bpj45VCmehpaKyV.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 959}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/uCgVdMeAaGKNgXjkRoQEHuOOn6x.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1104, 'iso_639_1': 'es', 'file_path': '/5Pe6iiwZyExtIzeuk2Q5LNxLuHO.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 736}, {'aspect_ratio': 0.667, 'height': 1758, 'iso_639_1': 'uk', 'file_path': '/3PcEBIneICSp2Bct3eVDUztPkV6.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1172}, {'aspect_ratio': 0.708, 'height': 777, 'iso_639_1': 'ja', 'file_path': '/6ONkGH38ajR7uFvg5WX8SbkbfVP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'bg', 'file_path': '/d2dbk2s4Nnlw5FxJ4f0mues6kp3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/dCCsDcMeJFVOUN0mt9QYGHZDquq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oAvAkTk0cta7o1hB1WlmUYV8txT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/jEiaUHh062AlNNDdIIB6W7DMb1V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cNKT3GNCndTIHlzhEU8Ga6kMNEj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.703, 'height': 2268, 'iso_639_1': 'hu', 'file_path': '/orak5VWu5CPaty1XCzdYWnxtEEd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1594}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ytzQijCzGG8KDzHYri9nc0jyJdh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/nkmokS8g0GHjxdhmRNfYueYvUN5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/f3AKnpK3aFPwnjHTSRkviTkuobr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1800, 'iso_639_1': 'tr', 'file_path': '/31yNVJl968krAHy3f5nFB6kLl7i.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'de', 'file_path': '/qaXfDrZCdd3wix2XYor5HDDpFrT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'ru', 'file_path': '/tDDUPuvdCLjx4hwRYPHdZxt2uB4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'fr', 'file_path': '/2zjoduvmZzBWRPYti8pdBxr4tSt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/tLFV34gBCjuc55xFwFL7zyoCClK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pFj339q3hoXg0NYbo7BvnmdBRhK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.708, 'height': 2000, 'iso_639_1': 'uk', 'file_path': '/5ZbII3voM1KrQYgM76ZnnkBHXB4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1416}, {'aspect_ratio': 0.75, 'height': 1080, 'iso_639_1': 'fr', 'file_path': '/iJeqcL4vlz8u1emUeZzcBBdaLoy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 810}, {'aspect_ratio': 0.675, 'height': 1080, 'iso_639_1': 'ko', 'file_path': '/gaky2GoDZHmt1p3HwPYiiS7SOeC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 729}, {'aspect_ratio': 0.7, 'height': 750, 'iso_639_1': 'ko', 'file_path': '/60SUpn8uryJRorPOOwXYLfwNCDV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 525}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/bzu9nTQPO690uSYOOy7hXjK1vn5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ru', 'file_path': '/k34v0hBeMdVl41w47QKqZL3UH0Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/e8aNU97T9zggNstlyc922c1qOPA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oYuLEt3zVCKq57qu2F8dT7NIa6f.jpg', 'vote_average': 5.52, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/aBGVsKeDn5gtegkyajPGBHWev25.jpg', 'vote_average': 5.518, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'zh', 'file_path': '/mQw9lsrMGlWDHdigLoGvCqX4tz6.jpg', 'vote_average': 5.512, 'vote_count': 24, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/edv5CZvWj09upOsy2Y6IwDhK8bt.jpg', 'vote_average': 5.46, 'vote_count': 23, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/tXQvtRWfkUUnWJAn2tN3jERIUG.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ljsZTbVsrQSqZgWeep2B1QiDKuh.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lQEjWasu07JbQHdfFI5VnEUfId2.jpg', 'vote_average': 5.414, 'vote_count': 32, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/9e3Dz7aCANy5aRUQF745IlNloJ1.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': 'uk', 'file_path': '/r84x4x93LbZ2gozISTBYVeq0gLZ.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1067}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/xn0Kcg4e6p0mLxVS3nAWhNmW2Ni.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8IB2e4r4oVhHnANbnm7O3Tj6tF8.jpg', 'vote_average': 5.342, 'vote_count': 15, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xlaY2zyzMfkhk0HSC5VUwzoZPU1.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/5QHWgqaBxZI1eM5e3YhyKzY5o3z.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/w3tea0HZDYVwQVyjrWBoF5x0Ofs.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'de', 'file_path': '/t5WUY5ZSxwVIVExaMZmmIj88BKA.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cs', 'file_path': '/bgIt92V3IDysoAIcEfOo2ZK9PEv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'ja', 'file_path': '/qzb0slJerd5bQgJxteJ5oAmfp09.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.707, 'height': 1525, 'iso_639_1': 'bg', 'file_path': '/rxHM1Cyn0cpgF7l9DVA2m3SS5Zk.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1078}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'pl', 'file_path': '/aSY6QhgEeUYky0TMfAXjvRJj5bL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 720}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ta', 'file_path': '/paNKUnfHDVDWh4hifULoOdRVzP0.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1981, 'iso_639_1': 'he', 'file_path': '/2aQZWpZKHECecGkFKLcuWa0Cmus.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1321}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/84TynUqXvXJnYiQr8uYcdbTDDWY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/hEYPJruVOc3VBkVbEUbyVTZ2AXd.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/xMQpKxZzJog5DVMCjSTsD99AziI.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/ubj7fEmtNqxwtZtMk6wAIc0SCFJ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/frq4ygwcIMusECNv9rPBrvJwyxG.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2856, 'iso_639_1': 'ko', 'file_path': '/zTgjeblxSLSvomt6F6UYtpiD4n7.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1904}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/9Pfuay9ztGmoS3bt8LW2mfgGjHs.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/mJfTycNg8PxjvxzpnKnzAAG7RIP.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/2CkUNEqIRGAwOC5jiKcQgKFjw87.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9gk7adHYeDvHkCSEqAvQNLV5Uge.jpg', 'vote_average': 5.296, 'vote_count': 20, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2400, 'iso_639_1': 'fr', 'file_path': '/aej3LRUga5rhgkmRP6XMFw3ejbl.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 1600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gqgwNjwjSqGkOqkE2rppogenu4v.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/7SivRwOLuA6DR09zNJ9JIo14GyX.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/nPO8aNT4uGtDAY0bZZZACfP66Lo.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ja', 'file_path': '/jEsp30qRAFPAWMYFGWwK7f9ObST.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/4Kc9ij5DeAwexVwVoT0fGHWK5WM.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 1231, 'iso_639_1': 'ko', 'file_path': '/jSm8mzp7sucgL8NwINIoAmx4dS5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 826}, {'aspect_ratio': 0.671, 'height': 1749, 'iso_639_1': 'ko', 'file_path': '/anJ2PN3jfjv6nocW41Ikgqygcc6.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1173}, {'aspect_ratio': 0.671, 'height': 1231, 'iso_639_1': 'ko', 'file_path': '/dp7n2vb8bmhI2f3Fa0mkQnZnHyO.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 826}, {'aspect_ratio': 0.671, 'height': 2835, 'iso_639_1': 'ko', 'file_path': '/dVhP5LObWUYWwcHKufcdUabApII.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1902}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'hu', 'file_path': '/dUjeL2HBcOpQKATeu6gltO1CKVc.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 1971, 'iso_639_1': 'pt', 'file_path': '/ms1bJvwa4BJycBakQ7afcedGlwY.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1314}, {'aspect_ratio': 0.667, 'height': 1337, 'iso_639_1': 'pt', 'file_path': '/lFrnL8dxEOp6qVj54vyFLi0Qyw.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 892}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/vXyyn578tC5TonEUNmn49mwm4A0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/1G1DR6LxKVNKIAH1oPjp04EIsxr.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/bPYjum1fH24yU2f1exsq8nuHEG0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.698, 'height': 2835, 'iso_639_1': 'ko', 'file_path': '/4rHfaC6dthDRPO8SsrSTMgAgkdW.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1979}, {'aspect_ratio': 0.698, 'height': 2835, 'iso_639_1': 'ko', 'file_path': '/mKZVtEfdYqcCC8FnYnwO3rsgn2q.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1979}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'ru', 'file_path': '/b2jBc5P7vwnfBbLm8ZziNslFb9d.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/xgPGDEKkBrXhPaNmwIlf8e2RCMk.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/k3UoZhRHg6h2XYzwNAJJvGC2yev.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/lqkIBuRyD9mFF5tQ0gKZLfBY54a.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1000, 'iso_639_1': 'zh', 'file_path': '/agvve2rnVhH5Ybuovsqui2HkxC2.jpg', 'vote_average': 5.22, 'vote_count': 13, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/zt5kihG59UaOYyGcXnBz3HwQxXl.jpg', 'vote_average': 5.212, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/fL4CcbigFi4P0Gx1X76vbRjgg6c.jpg', 'vote_average': 5.198, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/1UgqxtiJNxRzPeqs9pztWBUJd7k.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eKkbXuGZ68YOkTs2sz8OYu7Y3hj.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/4VWZyyUTuOZGcamFWfdo9EccuQJ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/iViFPY2O3rSbK84zsw2kEUtmxVP.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/o1SB1gHCmEEURs8P6dfmSC9O3iu.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/67RLqAViz6v4ez5oTy01eVH57VC.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 2859, 'iso_639_1': 'de', 'file_path': '/eARwxzrwvayasGerlMgRH2rtILs.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/uvvH40CJ38pgqA97q2yurGVyycX.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.705, 'height': 780, 'iso_639_1': 'ja', 'file_path': '/llnw1ytJyplbttau3PWYo6P57Ma.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 550}, {'aspect_ratio': 0.67, 'height': 896, 'iso_639_1': 'th', 'file_path': '/uI1gJI93hpbP0L1OqjUQNwKHbq7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/ic8sEH971i01e9qs29795s9Sjr0.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 587}, {'aspect_ratio': 0.671, 'height': 1748, 'iso_639_1': 'ko', 'file_path': '/fB1AYIHXtZFp30khynZAx8pwCb2.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1173}, {'aspect_ratio': 0.667, 'height': 1875, 'iso_639_1': None, 'file_path': '/pMHZ5BPlB2FJWYVh8kpwPDMepUy.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1250}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/ida4t24BmQcVS3FUL4TY4uixoaU.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/A62DYEWb3dgRA2o4NNtuHciFJJi.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1748, 'iso_639_1': 'ko', 'file_path': '/d9ob4cNkH5vmyPppcrYIpIo6x8m.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1165}, {'aspect_ratio': 0.667, 'height': 2003, 'iso_639_1': 'es', 'file_path': '/iunQDLut0NRyEfsLeisnRDxzFEA.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1336}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'vi', 'file_path': '/eBtqGWtR5KUiNl6OXHLR3ri6nVm.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/efC6it8M158f76ym8BA7cHTlcBW.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'en', 'file_path': '/cHRXb7TUnfntX4XdGF63GNL3U4E.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iQUateaYbt0Zbjrl8gqaGlT56iG.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.672, 'height': 1041, 'iso_639_1': 'en', 'file_path': '/rq0UeJr9eoaAeEllw6WheF1HD9R.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 700}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/oiJOvzOcTi8g70d4bhaRVLEcQA8.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/g1z0zLD8tW94omZdM1NDg9Cb0L5.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/siwBgxiw39ox1eQ2GsTu49u7HNF.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1266, 'iso_639_1': 'uk', 'file_path': '/w7pIMKIKrkuzCAWCoUcV6H48krv.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 844}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/bmK3XsNFgAv1RfEV681KLLIKbbV.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/tLeqhlAKQicrzUoWqbTJH6Ac7Z0.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 675}, {'aspect_ratio': 0.707, 'height': 2481, 'iso_639_1': 'en', 'file_path': '/fJgkMpctcXdDo1aQz6LZ8mwuws8.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1754}, {'aspect_ratio': 0.664, 'height': 1247, 'iso_639_1': 'en', 'file_path': '/wGF3iLAkjDLvF2Ws1kcQI5VWGdv.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 828}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/kg03rABx8jwHNLnUhbTbhTGkoVH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/53rhALkaIDqkft2KRZO9ZaaRrB9.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1024, 'iso_639_1': 'en', 'file_path': '/4i1I0cvwYhUTVbU5Qe6HbD1audF.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 682}, {'aspect_ratio': 0.667, 'height': 2400, 'iso_639_1': 'en', 'file_path': '/3xxd3Ntf6dZfTQOG2edgUPx0CzD.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 1600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uoeYeDKCaxcjgZdal4r5UcQrSYD.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/pg4Q5CGD06jdkQQTi3Yz2TSzrU6.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/lCwO4czSKzL1LP4h85T4b8C0UWD.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'cn', 'file_path': '/w85Z9pG9qMtw6m9QuE6PvKygEh1.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1068, 'iso_639_1': 'en', 'file_path': '/jJKRz3f34UkncoZB7DdHJgNZFI0.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 712}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/tVmoPRtN7mMlTJLlhEZDOzqILpp.jpg', 'vote_average': 5.022, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/nJnRy3nywUceNwNZ3spYuIecIBG.jpg', 'vote_average': 5.022, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9egFcRMV4Z3ZdcaJAYoxmnbqZE7.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/nVTLDH8DCcCn4r4hixAYo6ESjyI.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hJmGoCN8DjH0yrw7XsLRFCL9VBJ.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xymM5aW6MDcH5AR9I3CamSegJd6.jpg', 'vote_average': 4.996, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/qZ0kJnOwX6Qo55vIYjicbtl8WlZ.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9nkrC15drTBc2ZWGg7T2x20MrEj.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/o8zlCwctVfRFHQYItVQgmf3mllz.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cfxBdqeRyuBnKa2axipmAFkQJPj.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/hyfpaJO6tSIHZNd9F9qoe9whJBA.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8S7couVqr7g4L48HQ7XD3jZkg5y.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/n9v7TUq3BrGlZRnGmdKVT5PDarg.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/klh1rwo3jpdvdRi2GVygmSoxWy1.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8bxMHkuEzRpIC1YeVhWJKBnj5qq.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bm1XEWLZfCZQEj77SlPcG3ZQaxd.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2963, 'iso_639_1': 'en', 'file_path': '/aC3kqu6Lqw8Rpg9c3spTTGvgOim.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/l9uiKYEmdd4cKFExymkDVeos1ED.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aQZOoAGDz7StBQVEA6hDiUGMMXA.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/p5NyT6SX3I6rjArOoxXl9U9fATf.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7futGyUOW7x0yGCHyLZvkciEeAB.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9Q7LAAkiLcgk5ohjlQPS0ocmWCe.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/d7nO6ezrtx9mkJIoaWN4QyFoloa.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/7l7GUXc4492LdNfusC3gSUKjSzk.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eM2Y0RN3mUwp40Nm9I22Slgzl4c.jpg', 'vote_average': 4.898, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oV5yEdlu1PodRNTyp8d2nvk2qOy.jpg', 'vote_average': 4.898, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1543, 'iso_639_1': 'zh', 'file_path': '/mVbiYFaGfi0YyYvQmUaObFzuvMj.jpg', 'vote_average': 4.714, 'vote_count': 16, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/jc45pxTMTuOlBilSItOejMAMH34.jpg', 'vote_average': 4.6, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1543, 'iso_639_1': 'zh', 'file_path': '/aGVZkgQVPFLAu2aVc5iwOywnskk.jpg', 'vote_average': 4.576, 'vote_count': 14, 'width': 1080}, {'aspect_ratio': 0.7, 'height': 1543, 'iso_639_1': 'zh', 'file_path': '/bseL9xvgcpp3KnYswS1rWmLPzJy.jpg', 'vote_average': 4.576, 'vote_count': 14, 'width': 1080}, {'aspect_ratio': 0.711, 'height': 1125, 'iso_639_1': 'zh', 'file_path': '/y242ckW8B10H24DrzpBAo5llXtp.jpg', 'vote_average': 4.552, 'vote_count': 12, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/jfnbkogB7iimhKYAcJDGsUHaW1b.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/3kB8ncO7iehDNQ2ERNcRnZCWiN3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/l46BsZPZ49J8oQZcOyP7pdlXkjs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/tHegx9JnXUHvIyViqZI2J9NJ2l9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/3VAhy6bMPqwaj13rzdonbDRQm5s.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/tokT0stOvqBigBpimusd4zmheI6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/9LohPHzsuILo2NUrf8nXudEiUcX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/2iTpJJlMgyPsprrovf9FTFjTa4g.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/6FE1uNqLmnjRX2W350nSO4drfuR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.706, 'height': 1000, 'iso_639_1': 'bg', 'file_path': '/dRNOQGwSZ35ByhRmKSkGMiW07Fd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 706}, {'aspect_ratio': 0.705, 'height': 1000, 'iso_639_1': 'bg', 'file_path': '/yJ2YdBfpwzrn0As12noouKt98BE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 705}, {'aspect_ratio': 0.693, 'height': 800, 'iso_639_1': 'el', 'file_path': '/ojCYOPJNUPGs9ZRrOkG08OXBQ9o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 554}, {'aspect_ratio': 0.711, 'height': 1125, 'iso_639_1': 'cn', 'file_path': '/eQmdFJJiTeFQCLMjf1gbi6euc3v.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.657, 'height': 1218, 'iso_639_1': 'cn', 'file_path': '/ssKmJjbt0JfXTFkSWcQ8t8o3GQL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.662, 'height': 1208, 'iso_639_1': 'cn', 'file_path': '/yw4pZVzVUKg5bjYUDHwXf5vHVvT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.66, 'height': 1212, 'iso_639_1': 'cn', 'file_path': '/bxccL5ak0yf26rBEdxGxKQQgQfs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.657, 'height': 1218, 'iso_639_1': 'cn', 'file_path': '/xvuafWsKv7QIzf9kqyQpnWEadZC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.697, 'height': 1200, 'iso_639_1': 'mo', 'file_path': '/RMG2IJAXRGYh1kT0r5tppM2v7P.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 836}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/wyMil0WQy0JhPVpWVfC6rRhKpTi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/qdqBcjf6hkimo5CvIToOVWweW5O.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1523, 'iso_639_1': None, 'file_path': '/8eWOfiFdhuW1Q4JiBA1qN9xa4DD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/z9iTcVx1SEAWjBFj36gSldWyGNz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/jkEx6jNxNjv0CFEJEyCpqfjXrOE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'hr', 'file_path': '/c28DpQIVrHX2py2RHM6S5pr6Wnd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'ru', 'file_path': '/qUcXimqo6p55r5D7gdYvKBeOMxB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/hzxHC3Q65MgpKsGxWKIT6I8wnxG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'pt', 'file_path': '/idHNmmHN7HRleTjwleWdMgU9IyC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/efvcvRgOAZgFC2hrPUa6YqrE1KG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.714, 'height': 1400, 'iso_639_1': 'pl', 'file_path': '/P4iP4Vgynjux22hH66oqDnrtWG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1868, 'iso_639_1': 'pl', 'file_path': '/rT8Qs7D4JLJYYy6gnD4hzZZLp3o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1260}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/gVhGjY9k7mUvsLn0ea2obchJXgk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/tKBvfN5zs7RDGEPvbLue6LZfcIy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': 'pt', 'file_path': '/b1DvgHXpVyuIEECJ5tM7cK1ydUK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/A2QSkPxjcMj4apEHO6Sz7aUCmUu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/ew7MmtIkLjhkYFKtN8dwKBBMzd0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/5MXQAlCa2npFrIbB7OjoquD4MG6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/jXE9uOtbE1BhnPgk5pioQ6aGEFy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/6DCq0lVZElOohBBYfUdLnc2wYmX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/tSHO3YQ6bdivbI5hLxuSgrPxbNR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/zxvAAPcJoNklMtM2XbgacvuGlel.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.665, 'height': 1245, 'iso_639_1': 'en', 'file_path': '/ny5ggIvfGixGZfn8nR4IzSROcGK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'fa', 'file_path': '/h7kgZg7Bk3fCmGkOD6vd9qoqdjC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/qJ2tW6WMUDux911r6m7haRef0WH.jpg', 'vote_average': 5.504, 'vote_count': 48, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/pyNXnq8QBWoK3b37RS6C3axwUOy.jpg', 'vote_average': 5.708, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/8aQ048h92EvpPME4HsgEN4oJIxu.jpg', 'vote_average': 5.652, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/8QDQExnfNFOtabLDKqfDQuHDsIg.jpg', 'vote_average': 5.456, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1863, 'iso_639_1': 'en', 'file_path': '/2Pf0Dtw6P9CWshK6GYVXmmq9NFS.jpg', 'vote_average': 5.408, 'vote_count': 24, 'width': 1242}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xQPgyZOBhaz1GdCQIPf5A5VeFzO.jpg', 'vote_average': 5.394, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/hAf98uHIXMFzqNN5LX1vnouCShr.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/tSIH3DTA4oFQDhPaJgHxxQZoqHh.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/iWXaUWpWLdB4tu0mlVElTKboPgD.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/6pQMQQrnRWm2zweL5vWyyMHvAa6.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1038}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cs', 'file_path': '/zGfUVhyIhnCb44VKiPiw7p7pdI4.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/31ASyBd8PV0GtxnhvyL4JEAB87v.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2841, 'iso_639_1': 'ja', 'file_path': '/nftQJb9550PtYFXhmTs7XiN0QhR.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1894}, {'aspect_ratio': 0.667, 'height': 1338, 'iso_639_1': 'pt', 'file_path': '/iGZX91hIqM9Uu0KGhd4MUaJ0Rtm.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 892}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ja', 'file_path': '/j2aDrirI121LOg82NlmkjQk8a04.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/3KAtr9OX8Bq2FAvZtrjYcdUuBYp.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/wzJZ6tLRMwhStehrcjSyiVGnn3R.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.676, 'height': 1398, 'iso_639_1': 'uk', 'file_path': '/8W0SjK3gNHG4cD2pZhcL4Rvgkc8.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 945}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/7IPCEr7ifdH5CtU97QG7XgAAtOp.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/lch0ILTsm9uFqowVwVmIeRsMcdL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.708, 'height': 1028, 'iso_639_1': 'bg', 'file_path': '/m3N6ejIhoD160vgsOfRpBMguADg.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 728}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'pt', 'file_path': '/4HkwsmXp3uzcrNIPlNEYo3hMbL8.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'pt', 'file_path': '/pGq8oYx466sSukN3LUv0httsxQa.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/fCVD6ZPR7XyxsXZPJWOIp2VgF32.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/1fCoidUsB2xGzbAJr502Hm7Y2Yg.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/eMaH8xS0vXae1jm1Ry0S3yRBEhM.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'it', 'file_path': '/qIhsgno1mjbzUbs4H6DaRjhskAR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1500}, {'aspect_ratio': 0.699, 'height': 2841, 'iso_639_1': 'fr', 'file_path': '/pdLAyRqMEnL6pzkVgYwMS0a3fEm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1986}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/dxWaYQtgpLbycqUpHzkqqYkT5I3.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'vi', 'file_path': '/7EfSqviKvXwbiGhUjHyUBGVdoiW.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gHc2zbaIdc8l2e3aGCiIThgOQiz.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/wsOr8j0xoUwDfcY7k815rEJXgr1.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bIqPWFTrB15fna9010pLGfTiPuL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/uOIdtyKs6Jk0kSnMRQsWpxBnGcC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'vi', 'file_path': '/AabbWDWAwtxHxTJV3v8C9e67E2p.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/9ICUbdveP56jRoMMVkXSOr3ceyV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eP5NL7ZlGoW9tE9qnCdHpOLH1Ke.jpg', 'vote_average': 5.286, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/1PEFfYM4PV80dDqqO7jkCBdjbZa.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/sqj3UE4Rahv2NYFaxXYvXzqUz5L.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/vGYJRor3pCyjbaCpJKC39MpJhIT.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'tr', 'file_path': '/ggax1nyhiGIwbq1Ynk0otH2sD6.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/j10MzKeRM0LrfVgD6tHiO3OVOqU.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/uruzphNWfIo0MxygPDQ5dvlgEQh.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'en', 'file_path': '/5GTnnwpF1aj2kc91IogJHSn229K.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 960}, {'aspect_ratio': 0.675, 'height': 1333, 'iso_639_1': 'en', 'file_path': '/rqoWYzCuNdQewVfKw6H8dFfg4dd.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 900}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/5JSt5BraClSv0XgvDeTYM1FsFjG.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1300, 'iso_639_1': 'en', 'file_path': '/dxabgTYgwysyXP25lgc6L70IJJj.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 867}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/f6dNinWX8rBM79JXKcShkfSh2oA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1077}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/vLFCrzI3V4kbze877tP1H7TqppL.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/A6LnuOLkxOsi9xicfzNege4fjWA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/i9D9jRDaPKM9GpmJdy0a2yDO0B3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/shTcPSqtnQqddboWe5Mw7WAYxQh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 951}, {'aspect_ratio': 0.667, 'height': 1443, 'iso_639_1': 'en', 'file_path': '/d031gvt75HMZq9LxcMG381Hy9ko.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 962}, {'aspect_ratio': 0.666, 'height': 1001, 'iso_639_1': 'en', 'file_path': '/xynOH3rrt2X4hSe1YQgYAkBXfy.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 667}, {'aspect_ratio': 0.668, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/25cE7rTmSWVoRbBWTqIHAcvCtlK.jpg', 'vote_average': 5.244, 'vote_count': 21, 'width': 750}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/r9BQs8VaMziqG2pVD7mcS3ORCWd.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/pKKvCaL1TPTVtbI6EeliyND3api.jpg', 'vote_average': 5.206, 'vote_count': 26, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/z4XwvnDZSm40PCdg9vFJmo0W9ri.jpg', 'vote_average': 5.198, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/30bVZPX7ZRkoOhh7hCXAoDomDgQ.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1400, 'iso_639_1': 'hu', 'file_path': '/yfY6QdlQ6QQczjUaazFdKTVrxDr.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 933}, {'aspect_ratio': 0.7, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/bqFQKVRAs4rVRBiiHDUHWJIbzTk.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1038}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cFfhGHjxv7sWjXS4uABHJi9mvzW.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1013}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/c94GEWkz12pYfg9fO1weiN1ibU4.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/1QF5OFkYCOMmCCMSr7vC5A6DE5s.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/f4KUne3zM29fIq2Nnyn4e0j34mt.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/yjwJM3VcItwvkEDW6GklMrQNBhU.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.68, 'height': 1000, 'iso_639_1': 'he', 'file_path': '/csraeJmUm7GSXEoalvb83AFFq6W.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 680}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7MQT7G87WK7Y6ZeDB7c6mGRrzK9.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.715, 'height': 1181, 'iso_639_1': 'it', 'file_path': '/paIt2d08ZhrwltpmhkQYZiJXYCP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 844}, {'aspect_ratio': 0.704, 'height': 1450, 'iso_639_1': 'it', 'file_path': '/z9Otej9dIEYuPH6teXXu2I8Oh6V.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1021}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/2Ka2nOtSlwuFlsHtrtfHKMIjldC.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/kMq65QVRSL6YWpN5WQwLbaQjV3P.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'it', 'file_path': '/Ak8vHeUtTuBhLLB48iC1o8JjRnc.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/6IOvN7okabMadYJOznljdYq3cGV.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1383}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/z2E98ETb6PZ99VMqIC7PUEAeYDA.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 859, 'iso_639_1': 'en', 'file_path': '/bRZRXgW3UTUV1a19qGpGhm6W5uE.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 580}, {'aspect_ratio': 0.675, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/oOv23H19CiK1F2MTzyx76q7dGwk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 787}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/gN4qbFbuneR9CUXleYGQzomGUjW.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/axyvLjcRhH2IqFrPSdudJL5ohmh.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2932, 'iso_639_1': 'hu', 'file_path': '/wltraa6BO2g7OowPmUKuTUvIjHk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1955}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jsvX5vNggD0ObzHDXp2uUwC2Chs.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/8t7ceMgYm6dX0FA71yJ6UO0rNO.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/txSJ30aWZY9rDg9OuE2QpDJ7WwZ.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.742, 'height': 2096, 'iso_639_1': 'en', 'file_path': '/aArYQMWP5R6PwlFpSSawLLpYEvy.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1555}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/r05GcDOai2tlc5hASixe6BB4zpj.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/h2Q0Bjzb4rOulc0ekz6mH1FFaoI.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.706, 'height': 779, 'iso_639_1': 'ja', 'file_path': '/fh0VioO7JZfM6p1mOEsA0YA2xXC.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/lvNjH1zyN1w3FYkO8ZZJsICKpgN.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/tAgldVsdvZQ9GZuFMifjtl7kMTn.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.742, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/k6hExQBHOLPiGe0K5CBWrVaM3XK.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1187}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'zh', 'file_path': '/rKyMQvIGjBe80zyytNLXvGomWlZ.jpg', 'vote_average': 4.866, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.677, 'height': 1478, 'iso_639_1': 'ko', 'file_path': '/e1nMtpUTtaJGXbeZZ2ajaIOyTgU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.686, 'height': 1457, 'iso_639_1': 'ko', 'file_path': '/8E6MS99JaEZ9mNYZUupTe2nTeKY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.686, 'height': 1457, 'iso_639_1': 'ko', 'file_path': '/pV8U6MAtQBKcjcbq8zesh4Uhe6q.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.721, 'height': 950, 'iso_639_1': 'bg', 'file_path': '/qW85opMaI2Ln5Ea3KxBpeg6qjLG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 685}, {'aspect_ratio': 0.667, 'height': 1337, 'iso_639_1': 'pt', 'file_path': '/plGiCQxuksbGT3ClQDMLlUufo9K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 892}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/gKMDmGde8aAD8M6dvm6j7wciSbJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.715, 'height': 1119, 'iso_639_1': 'cn', 'file_path': '/6ZQsIxobvm7Z0yrtS9NSeRMxuFv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'cn', 'file_path': '/4s74Ob1e11tLDVL5FbCmfcKHm64.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/An3B1Vh3vEHJN1LZh8GwkbRmRn9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/9lPoG7vJOk3GRDIRC4rZyDVOGWE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/jDxcL8SYCgLHh1a1kiT1kA8y4A5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/zq8epazaprZpsI1HsqsBAHWHOBm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1193, 'iso_639_1': 'es', 'file_path': '/noYJ2sbKQE5384I9kB4h0k2YTlG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 795}, {'aspect_ratio': 0.75, 'height': 1654, 'iso_639_1': 'fr', 'file_path': '/utDBwHoh6lqBgNEwDlm5i40COYQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1240}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/3Z5y3P6CLweBgXazo5V2iebq28H.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fi', 'file_path': '/pacP7NdLG0F3EbOYd4CTvu1DB9x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/ghxS6itn1mGzejZb0SYiTo2SOMR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.697, 'height': 760, 'iso_639_1': 'ko', 'file_path': '/qxBQaS8bxhARdZu0feQO7dZPUIw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 530}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/dQ7saTbB4h7hPpAMPkCj7lPaSAQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1077}, {'aspect_ratio': 0.697, 'height': 1062, 'iso_639_1': 'ko', 'file_path': '/aabgm6CLRVUZ3EgnDYIBDD9RjH0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 740}, {'aspect_ratio': 0.75, 'height': 2560, 'iso_639_1': 'es', 'file_path': '/nZfPDfwBX4cLulKTIitPLsjobXd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/suA9dX1bvn528mDAiSHVzMgXpVr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'es', 'file_path': '/o8i8EDSWiwzTIiaMgyPnESKYIVd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/hZUSv4mCne1DP05ihoVDoh8Dg0W.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'pt', 'file_path': '/tnM9lt8QD8PseK7ED65Yt0fIZMd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1066}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/cswulqzPjSEaFF58pzOmiYpUfjq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1077}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/eWbIUAJchJjhkfncbKrmtUPCUrO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1077}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/zAQJ08Tw4DhYcpFCHoJ2wmVt6lA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/9pwp1Maj4c1lRl4QkyXEaktA22g.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 800, 'iso_639_1': 'el', 'file_path': '/bTOmCkefIK8YNhQNe3IOSueYGNZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 556}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/4Vv2UznWz86TY64m7KWO7yhVT5A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1296, 'iso_639_1': 'it', 'file_path': '/taZARyNlDUDw2qhDVqz2LpE8sy7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 864}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/zKw1XjlUrg6SThnelftIV4g0wUF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/u8InfsF7vwXyoSH8rgfDZYQzv3n.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cCCZ5lhbfvRvseWZHX8yOuSpRDJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'vi', 'file_path': '/pJAKIBOvsCc9dBhDDgIRGQGULRR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/a1UL3FTJDgQikYIebnMDhTPFVfm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'en', 'file_path': '/967Swdyk4pvSz3n4CpGBJiGVQFr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/m393i9D8M70Wu8Pc2bLOEILfIcn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1800}, {'aspect_ratio': 0.666, 'height': 1419, 'iso_639_1': 'uk', 'file_path': '/8eJ1cTMyQHk9FOYk1TAyJLR4eDF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 945}, {'aspect_ratio': 0.709, 'height': 2820, 'iso_639_1': 'uk', 'file_path': '/la1BpzspX6ZejdGFa4MRMhUAz2x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 2048, 'iso_639_1': 'cn', 'file_path': '/sjv42EQebn1nbKGx7vOquhfi5KO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1455}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/11Zx6SodSThTbMEVoQtxt11lckL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/t63vUEzIPnZXa5JYFFIK499O6Mr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bwQPehOhS14ePNRF4EBmN1GqSB1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/jQEN95EYetUtDGvpF4F78TVsRPF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.7, 'height': 900, 'iso_639_1': 'de', 'file_path': '/z1DfRQf2CgnROyhVZ6ch8FbWt71.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 630}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/8X41aAuDesg3ZUbxwoiYEIlkFUI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.724, 'height': 1382, 'iso_639_1': 'de', 'file_path': '/1M1Y77HhjJ5SgTc4IOdrkszi0nz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.722, 'height': 1385, 'iso_639_1': 'de', 'file_path': '/kaNc6kCjNMZx7kH7j7uXn4WQN8b.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.709, 'height': 1410, 'iso_639_1': 'de', 'file_path': '/vV2SS4fSc5qlvqHAB43t3A0mzOw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/2QeXdLNwrD5SufAWhszm4VzpwV6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/j0NNGfcbrYRKO8szyrJj4E2h03y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.672, 'height': 2197, 'iso_639_1': 'ro', 'file_path': '/bl3k5MKSmayH4bDAOWhESa9lFfi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1476}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ix8teqIt5kn6vJQQF5PukRaJGj4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gloStgr5JUbEYHX4tMJrvTfkGUq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cqjHJ7jQ0RDJCNZglISv1HDcpEr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1621, 'iso_639_1': 'en', 'file_path': '/l2Nxri5wXgaVQgpOiztMHWHxIsR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/kBMA1HLVQYG9RpcCH7FmtDOE78y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hr', 'file_path': '/xsWMuavHCm08R0NxmTff1g5Q9OU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gdhjkyfc85dIm9KYc7tzsFewJsB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/btIXVwMUHTlSq1XiEafPn1LSw6p.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.665, 'height': 1622, 'iso_639_1': 'en', 'file_path': '/kX7H27dYIHXt5UhPys64oEC0q5u.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1078}, {'aspect_ratio': 0.667, 'height': 1607, 'iso_639_1': 'en', 'file_path': '/nJO79lEYO9Ldz2Zjq0OJ1IGP941.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1072}, {'aspect_ratio': 0.667, 'height': 1607, 'iso_639_1': 'en', 'file_path': '/8zdR3dg39eU01sTnmoTO7aT4ZYa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1072}, {'aspect_ratio': 0.667, 'height': 2325, 'iso_639_1': 'zh', 'file_path': '/aw5qvRlY31AixBLr5op0CIqCMdS.jpg', 'vote_average': 5.576, 'vote_count': 13, 'width': 1550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/tRNlZbgNCNOpLpbPEz5L8G8A0JN.jpg', 'vote_average': 5.516, 'vote_count': 14, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bdN3gXuIZYaJP7ftKK2sU0nPtEA.jpg', 'vote_average': 5.51, 'vote_count': 26, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gcphM7ZLxS5HPeCZgjZobfz907x.jpg', 'vote_average': 5.462, 'vote_count': 39, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/Ag2B2KHKQPukjH7WutmgnnSNurZ.jpg', 'vote_average': 5.406, 'vote_count': 22, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/37Fr7lY4QBHsuxlLJIfTNxW6nGW.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/a03qYIZM0zkEutN5JRZddTBmQqY.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/utdVHiRHQHKIMd11VHx1KOFdxFC.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/ti7W0gh3WyHnQGiBzZDMH7TpYtD.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'tr', 'file_path': '/wiSuje8hdVuwM0pvhtSFirCHmJF.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/bQNVJKVuSoyoa5iLvkesxRa8DH0.jpg', 'vote_average': 5.348, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/v5aGIxVprgv85Qa1XDbxYN2xpt6.jpg', 'vote_average': 5.342, 'vote_count': 15, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/pvSESD7ujxWZwtYDb9l57qE0ywq.jpg', 'vote_average': 5.33, 'vote_count': 9, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/9QxqZI7ssVzyKEBwdUvOt3AUWzA.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/lIl2CrnWohGrZSO9eyKRptxZ7Hs.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/nQP63IbCJ5B9O348h5FAAmGWanG.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1976}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/2ZOzyhoW08neG27DVySMCcq2emd.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/9yOIPXWQ9ttsZfzHvmcS7XiV8To.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'hu', 'file_path': '/rOa94QOq3wbqKBHjSqL0WtPPJm1.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1500}, {'aspect_ratio': 0.7, 'height': 1286, 'iso_639_1': 'ko', 'file_path': '/rwEc7SgXu7b5Yo8Co4CvSinF91v.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'ru', 'file_path': '/9jMvxh1Ib6BPnE0pprRcaNibKDO.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/6NHAZLR4AJhBAVU4qFzkucfyhVl.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 969, 'iso_639_1': 'sk', 'file_path': '/76lhZonZ0Fa2T8dq5tBtsV9yDCK.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 646}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/agcgaJ1ieNc972XWGBvsJkDxo08.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/qKnagY6ksIlZsbsUunXQCvbMk7K.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': None, 'file_path': '/8bLzqR9BuEUmVxficFYakJIQUan.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1067}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pvW6UoBZOp9IrMqpT5ha29snsDR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.703, 'height': 2185, 'iso_639_1': 'zh', 'file_path': '/3noVrrRbPU0iEcVhRRLGa7hnqY.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 1537}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/AdT50fOv8Sn7wnRMU4IUsLwy4CQ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'tr', 'file_path': '/29bgk0clNyU7xS6DkcgVFYos7yG.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'es', 'file_path': '/cibtd0x7yrEnbl2by7OnNY61bEM.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/9pJJXtw7j0nSs1TvBGPKYwQuId0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/syor3JlLzuzPkeheD2QHSYaJEQN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/rN2eGbRpbJw8ZFVDiQfDxsknirP.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/wx6gj3KKbnOsrGnwA6CyfXRrVF0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.75, 'height': 800, 'iso_639_1': 'fr', 'file_path': '/uuxtLLbfMVzWL4ythAgX87JinR3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/rHQWJ745h6vk9IzMN4NKBkxpYcR.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/4oanOpX1VAK62iU77RvOq3WcrzA.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 999, 'iso_639_1': 'ru', 'file_path': '/7bw2iBAdTu3fZoAKvZobbuMojMz.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 666}, {'aspect_ratio': 0.667, 'height': 1880, 'iso_639_1': 'pt', 'file_path': '/8wkZx4FbABuNyOFIb94DFDC3CcZ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1254}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/dKoKG8SyvDjOW3ZC4OO6mSza8xZ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 800}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'pt', 'file_path': '/9DQtfm51BsRQFVe5lOPNMY2w23O.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1880, 'iso_639_1': 'pt', 'file_path': '/qosQop2cGWG4WCtf1tbx98xXcDj.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1254}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/punmWKefqHUGo2f3dO3lpfRbOB2.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 869, 'iso_639_1': 'pt', 'file_path': '/89BhTcxt9s7daMsx44HLrH1yoYm.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 604}, {'aspect_ratio': 0.697, 'height': 750, 'iso_639_1': 'cs', 'file_path': '/j6bxCWwMpM44nwpbcosrE2fFNSr.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 523}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/xKsiJimxRa44FArhlfGHnylrT0i.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'hu', 'file_path': '/9cH4zoed31NY6xxgeMTzlzEvXaN.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/wtjVc3Yja1cTITPfgsXLgGy79MF.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 806, 'iso_639_1': 'en', 'file_path': '/rqLdxsUoGDWst28yXAmMIN1uVv6.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 564}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/A0eycgzccYk6VlpWF89L7ia2hNO.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/qTOHCFcgQH1NJZ0VI8KKuZxpd2s.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.668, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/bv15haKwQdMyGoVdnmP02MYE2bg.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 750}, {'aspect_ratio': 0.698, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/fAjOgo4NMGzqSfgvOzCBrU51hbb.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 838}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/tuLCSrXvRSXVlumY4e1TGb9zAc2.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.681, 'height': 1157, 'iso_639_1': 'zh', 'file_path': '/2SZAFZw6ITYtgRio3y5QDy2lvs0.jpg', 'vote_average': 4.774, 'vote_count': 10, 'width': 788}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ro', 'file_path': '/cNpg2TjWtsut8QUBqezkbHXQFgb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.716, 'height': 1051, 'iso_639_1': 'pt', 'file_path': '/7GyVI1QpkycimTgFPlrpUq3jqiT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 752}, {'aspect_ratio': 0.713, 'height': 800, 'iso_639_1': 'bg', 'file_path': '/h4SgwOskf3CIBlsEiZwVFDkB7Gy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 570}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/m624LrPxlbXkMZVyM9tyDkI8g0M.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/atJR8vClEvAU7MtB5hy4oxuf4RK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/zOwP4sWiVUffsbzQva742GL3ZXA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'ko', 'file_path': '/aE4PR92KPazsbZKEha06roRoXgv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.706, 'height': 779, 'iso_639_1': 'zh', 'file_path': '/dOdURWFzv6UGYK1tBzXsn9mY7oD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/ujX6Liubmg9cBdqZIm7MxYm6DvZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/jb4GtFklHbxTJ9u3zMgUvJ5dkeE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8zoy0oZ0CiCXleCsnQaPWVogAir.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/t72QYzBgFNVECrvln688z3Xf2aG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.678, 'height': 755, 'iso_639_1': 'en', 'file_path': '/u5sQzZtxe3VnWNZh8ExijDQG9yZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 512}, {'aspect_ratio': 0.684, 'height': 1280, 'iso_639_1': 'ru', 'file_path': '/yVyVqv7D6l2LpggHbwBkut7wHdw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 875}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'ru', 'file_path': '/jKFVa9Dq2lSc7VePdMs8ApZbGX4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'ru', 'file_path': '/tPAAA4p8NqKbkhIAxPz3MaAkjMA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/fqTQIMWqjHoHVQouignErrOy3Co.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': None, 'file_path': '/wsUt98RThQsNXbTY3OT5Fl2zYFa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': None, 'file_path': '/hGGmC4a3F9JYYQUM2ePz6lw4rj6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/dyXgxnqRdHPzoGXqwYKNnsJ7bgl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/yfUZxBmAdXF6DNQnBWSJqekOOJc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/mrwOUto3pCzo7EygRTjgZOJ60nk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 2585, 'iso_639_1': 'zh', 'file_path': '/mrf31ezhckXfkIUd0p8LHqksvbG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1836}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'en', 'file_path': '/cq5RVLOYxYWGkGI3FWGmoTYWheV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/3bX6VVSMf0dvzk5pMT4ALG5A92d.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1605, 'iso_639_1': 'it', 'file_path': '/fmls6kOMCfKWrJaq43PLCWVr6ve.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1070}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/odvmwLXNfkE1JmvfVBraaMGbtQQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/r1pjXIXCwlFhtrEvPXxhw2wwqry.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/g5svlJvwpUpo8NeNzIGeBoctgTX.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8Ta8uxDusA18OsIb3ksLOH4qTxv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8uWjDveJ8bkhcolpwoMMDNDOkFL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/lK9LE5D67HNyPlhJcjKAgnRh0OO.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ob9dYT7cuEcVrjkQXajnIgQsXHt.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'en', 'file_path': '/eaIXDmrHIwYSXjSK0N6hcXM0gGx.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'en', 'file_path': '/5giub1nKK3sFRvZxmebe31scQOo.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 700}, {'aspect_ratio': 0.667, 'height': 1800, 'iso_639_1': 'en', 'file_path': '/ctqienHJX0uuQCIv7Qr0WvXshld.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 1605, 'iso_639_1': 'it', 'file_path': '/cfNxgChrQI4rQqcDtWx0XbUHIP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1070}, {'aspect_ratio': 0.667, 'height': 1575, 'iso_639_1': 'it', 'file_path': '/a3TkBxEd4gS4l9JAqMOnkChguv3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1050}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'ru', 'file_path': '/oiouMT6o8ss9Iro2Y1wS6As0IS0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'es', 'file_path': '/7EpzeTKziFdjMYMtcqtu9QYmSLu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9xKxkCc3aotmu7r8iQT5jvgMRMp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 2168, 'iso_639_1': 'hu', 'file_path': '/l7EEYEjW9je0VYqQKpWe5GQqKxO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1520}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pCti3dACGQQpvD0gQnG7pacZwAD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/iLYLgzHXAf6sJUjWBTF7gkFgvYZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'pt', 'file_path': '/g4PdSeyLwpspxd47miKPFBnv7yK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'uk', 'file_path': '/hSgNpJ92Vi4SmW915qb7wzSH8aP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.665, 'height': 1926, 'iso_639_1': 'en', 'file_path': '/aN4HPRZvaNawxmDs92HrEwV7LPl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'zh', 'file_path': '/rXHdIfyJ5ojQYsN2wPrmf9aIIyN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 1241, 'iso_639_1': 'en', 'file_path': '/rzgaiEqMSvSQJWwgk5phFQnlTIa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.667, 'height': 1065, 'iso_639_1': 'en', 'file_path': '/qrB8po1jncE4tK8t3UXV040NTVb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 710}, {'aspect_ratio': 0.672, 'height': 1282, 'iso_639_1': 'en', 'file_path': '/cXDFFv6yZNW3vUHOKKUPJNnL0So.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 861}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/mJGIjkALIOmj1TGv48l3qGvJQuy.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 500}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'en', 'file_path': '/7kSYGg6zrsXBsLvZnaNwoteiruv.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 600}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4MpN4kIEqUjW8OPtOQJXlTdHiJV.jpg', 'vote_average': 5.638, 'vote_count': 12, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/6yMWU1vWkOBbNRIwOxhetd2aHhO.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'cn', 'file_path': '/olxE3239oOQGaSShbWLJs1NQXBe.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 1500}, {'aspect_ratio': 0.671, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/1P3ZyEq02wcTMd3iE4ebtLvncvH.jpg', 'vote_average': 5.396, 'vote_count': 12, 'width': 754}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/lXRSRP5QMfrr9cSiupvcGDJW1Sa.jpg', 'vote_average': 5.392, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'uk', 'file_path': '/77NraO0uqhXOG0xqLz0nIuockDf.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/j8F9HJBcrRD3xevxf4NMF2IhQE2.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/s4I1JYIacFbi6amQYqRKB7ifrHx.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'tr', 'file_path': '/q7OK13aqXAwppQAF6yT6wZeKtc6.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'hu', 'file_path': '/2DkutTDxhB7173ItFi9cVDMFqUK.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/pqB8Xlu0QdwsONakoiKtortANdn.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/h8Qi8uIYAGh4lZ357ua6NNJ8Pui.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2000, 'iso_639_1': 'en', 'file_path': '/ezD8iZcSj9zQkIbBNpDZvdMxr8P.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1333}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b1V6Qp0xcNoxrpXu9tKhJ2PoYEW.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/3F2Rbu2DCC8Q7WGWqlsWI26Bw5P.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/54Jxp5zy190oQXqxcwBUPCVngTU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/e5F9ACInAM2802QxsBmmixyaXrU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/9nBRExEia2xF2nDzCZNtQUknZGD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/f1pQPzFmBXyFaScnrqeSm8lvCH9.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/AanMvzySJHlfIiScoU6edjNvIFH.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/fIfmG3EaIy3eqebyq7hXjl1ymQW.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gDpMT5nrgsuSAgX3NfRg2ZOsr0d.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/zBVNawbcB9z3cQw3uOvQ6dTLBS2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/sPX89Td70IDDjVr85jdSBb4rWGr.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.669, 'height': 1600, 'iso_639_1': None, 'file_path': '/8grKo5VUbtnnJWX5iQBhmKOQxHY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1070}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/vGKHM0WKkjt5KYKYr6dmX7RZfJZ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8pF4KoiRlXEf1MJCKTfZ5cyJz5l.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/A92FwaxylVAEC1g88ncRjPNupJE.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2184, 'iso_639_1': 'ja', 'file_path': '/mpdTFukLMNAALO2j0yfViyoI2TF.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1456}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/e8MB1d69fmzyonT6mz9iQs3rhw7.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oyjEePAoGmeyAkpLgloOfCB2ijG.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1545, 'iso_639_1': 'en', 'file_path': '/qLrkL9RUirxJkDW7KTTfrkNsL64.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1030}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8RW2runSEc34IwKN2D1aPcJd2UL.jpg', 'vote_average': 5.286, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rdXILMlfINsio98WbUFoXTXPz5S.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/h4QzFwldlUaEvJgVwumGTPOBA59.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/uheYLZ7KxfGolGOJr6nnKiNuQKh.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jrYbYRMRwCO7vNtTdoqNcgALwAi.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/taKcn26BMWnsUcMFSlr5RfGDtFB.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/3oOBjD1LZCjfrLPPL49xP9fFgeR.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1625, 'iso_639_1': 'es', 'file_path': '/xWufUAYvji3mgltweOd41kh3MRK.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1083}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/AdhhQHrgb9eWTcmBh7pThBzU0Ra.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/5Ml3AHO8D5Kil22e5FnDg8sgBn0.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/pQFtEAJC8QSs97rIYiKCmbxJseL.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 950}, {'aspect_ratio': 0.73, 'height': 1200, 'iso_639_1': 'ja', 'file_path': '/mx5zvtwTTWBwlNzBZCKvbcjJFIH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 876}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/48sBwODorRIoJjHFeDHttVU3XAF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/udMtQ5TQ0q856XqRyqQxE2F2wTB.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/oih8KKRAhnRtyU5kzKoSMaaLhQM.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/jHX4YIJtWFIteg7jIy5lZITP40C.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 1945, 'iso_639_1': 'ko', 'file_path': '/sb3V2fPhNDRRUvHJW4pQaeHbDxm.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1305}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/zKgfW9KhKmIQyjL6b2nVFOsyeZh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aBVr0YMCeAYVrtmEtt54DrtLZeq.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.683, 'height': 1464, 'iso_639_1': 'en', 'file_path': '/7hys0bs5xfxR9tu3G5InB0xDhat.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/gsKwOfUesyN0pZtag0ulh7bpxJX.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': 'ja', 'file_path': '/tqeP1OW2welQt6cVM9YwKOTU3z8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1068}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/8G6WFTx91CAQeVopRQtVCZDYpb1.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.669, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/8D2CZEClyq9H5zY0BaD9F2miS25.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1370}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/ziFjqY3ABYTJZ2kHMzjr3eeyMQZ.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iTFxTcAZtxvSrPV87IEnmnvyQGw.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/z9iIvDrc4A6WqBg3qzmfQmRFLwe.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'en', 'file_path': '/kb9pouNQIuXhBjPzt1VWawIrEFM.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 600}, {'aspect_ratio': 0.7, 'height': 1128, 'iso_639_1': 'pt', 'file_path': '/e22BN2rABXSkDS8RChni1E9VSvP.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 790}, {'aspect_ratio': 0.704, 'height': 1080, 'iso_639_1': 'bg', 'file_path': '/A5zTY0UJg0UcuzuXE51Lc21OhUI.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 760}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'fr', 'file_path': '/voA7jH8LIkPMlmtdYAp83z7bKiS.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.686, 'height': 1000, 'iso_639_1': 'ko', 'file_path': '/ur3wsVMVubcr9wiKP6oyEHJMF75.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 686}, {'aspect_ratio': 0.686, 'height': 1166, 'iso_639_1': 'ko', 'file_path': '/jCgGjUHt9Ut7nGibLS71ePCBnV.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.742, 'height': 2096, 'iso_639_1': 'en', 'file_path': '/1CvxVIiBT9XWN2WQZCm1bqIKchw.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1555}, {'aspect_ratio': 0.652, 'height': 781, 'iso_639_1': 'el', 'file_path': '/zQSuZTwBI81CiXUxxUKExcafnO9.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 509}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/oGby1unkAP5qH9I7AavC7QWtTNt.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9ghkbUgt5lAYzkL4DuehL2DHn4X.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1228, 'iso_639_1': 'es', 'file_path': '/2mRyNFKpRT37vAcZdHzBrCpmH51.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 818}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/k5Pq6DFqKZ6k6Q1kX5MarcugysV.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2886, 'iso_639_1': 'hu', 'file_path': '/vrwZ91I7j5QIrSm3TQEbadvA0sP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1924}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aGdng8Ic4ONpcepU3bVXPSLmNd3.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1223, 'iso_639_1': 'zh', 'file_path': '/VwksWozHDudb7i1XBQBYeEfxiP.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 815}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/uGGUIOwp1F3iSMB0ZyFZJ1Uorvy.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.742, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/3TAzUgbseHTVopZYIrPPeuRtxi1.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1187}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bY1SD4t8to0OJh3NBTan4kpMM7M.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'zh', 'file_path': '/jULqFuAvuikqjp870awMKXcfiXK.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'tr', 'file_path': '/d5CPMykx24J2FZ77Coun40mkRS.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 640}, {'aspect_ratio': 0.718, 'height': 1254, 'iso_639_1': 'zh', 'file_path': '/oarR8scEjqKmgbFAYHfUdpOP8Oz.jpg', 'vote_average': 4.882, 'vote_count': 8, 'width': 900}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/peVchL19Z1JJobkGOoWBfdGyUNP.jpg', 'vote_average': 4.81, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1950, 'iso_639_1': 'en', 'file_path': '/52xooeUA0yHufOpwzeEEuQA61LW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1300}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pl', 'file_path': '/cub46jQ4bLQYYbpbSL9Q24wofS2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 800, 'iso_639_1': 'en', 'file_path': '/ocEnq79nVKZbhKAllMVpxnbAQQ5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 534}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/66BlmYvDr92ZOJXWOLMfs55p5pD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 667}, {'aspect_ratio': 0.666, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/mrkFKMgjs1TWAXHVujASiBv0PTi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 666}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/v0ANxUnWwyfkf053ijLfu1nxi0K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1350, 'iso_639_1': 'hu', 'file_path': '/1Cfe1HTWMXUeaxLi3xF072Jkf0o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/1wVhoU0bBGhJYaiu5K8DrSCqDDY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.677, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/5v9MVHgHWjA1c6Rx2BlA2ty6SU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1083}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/rSZXvInOa94udX9F4hXSruyKm3u.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jZdal8sHUCJ9mMN9qQOniaxajFF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/eKdPunkhnw2y7KL5XRKqbhoowOd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/53lvq1hrL8NcFW1VXEhfXH0UmWt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.75, 'height': 2400, 'iso_639_1': 'en', 'file_path': '/ksFkFAevvjpyj6UYl7OZ8TKJ5FS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1800}, {'aspect_ratio': 0.704, 'height': 2162, 'iso_639_1': 'hu', 'file_path': '/6VtoPn1CBUEjugkkXZzD3R31PWG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1523}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/3HT2Dd9H97qF7f0MwTLpYlIVNi2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/njDm6YxpTM6eGWemXTXEIAl1QTg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'cn', 'file_path': '/eIxXgEJoPlnZKDXTVhZqayooGFe.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 825, 'iso_639_1': 'cn', 'file_path': '/heHTe9kEUtExNnLhlU1JdXjRdov.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/miHituxAvyTN1EiVd3ivHATPMuH.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/8BKhFMoI4nLdRcNsGa0917WpFcv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/uwUJyAVJecME2Za05MO3Os5NgMN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/1tmW4YcZbbnVXsdhOF5l1Vw4hrn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bqGfUxcgh0h2G0piN14kcUp1jtX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/8hQ30FJB9OSLeF3qDDS8dEuXavd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/bhbM9ubZ1ntgG6Nb7W2aSMMHUg2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.75, 'height': 800, 'iso_639_1': 'fr', 'file_path': '/dj3gMEPXmisUr0sAfQEqguL5CcG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'es', 'file_path': '/wn6M8RUu4aXAkm5CDYi925TjF5x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/o7RGTaHBMKbcoaBmVhalbxF9iyr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/kuq4rOo5xaeE4O9UrbmYePsnGk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 815, 'iso_639_1': 'en', 'file_path': '/lvH8MQw49D2y6YfdReuVimJ2M56.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.681, 'height': 999, 'iso_639_1': 'en', 'file_path': '/ilsnLZHdsfu3BBBxDNpTtD6AcUF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 680}, {'aspect_ratio': 0.711, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/mg3pPorXcQMxwKTCGyGgUlD3AGr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 533}, {'aspect_ratio': 0.661, 'height': 1180, 'iso_639_1': 'pl', 'file_path': '/r10xlLTZACGRPk3DdUFsMbKXC6S.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 780}, {'aspect_ratio': 0.676, 'height': 1332, 'iso_639_1': 'en', 'file_path': '/67rpL2zu7XbpfnUck4EDq5dJ0oq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.763, 'height': 1179, 'iso_639_1': 'pl', 'file_path': '/fVaJ6lIPG01GbRf6CiZVWLqdRWP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/aLcqG3KYjn7UcaP9RkwoDCCVtDM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/fqCX3kCbnIoo7e0WzoYnCJpjaiA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rcvFrSxNHleYiECFK5C9UTRo6pt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/5U3zBsuLdMobHmgsImRcz9v4zJo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/151LQXEVZNcEUnHrJ6zrmC4IrJY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/lZERCEFV7eEz4HhKEc8oAV3mILn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1610, 'iso_639_1': 'en', 'file_path': '/kF1LegAFVXVLpBuncjtA2vWU4te.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1073}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b8PrXkCXucjcpMDF6wTack7XLox.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/n4wda3f2nN5ZydGFyxgVDtpGZ1s.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1667, 'iso_639_1': 'uk', 'file_path': '/AkTECnZFMA9eiHhAGTFknHRCEru.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1111}, {'aspect_ratio': 0.71, 'height': 2048, 'iso_639_1': 'cn', 'file_path': '/gC0NNBDPMv9hCE3lFDlXpxRXutJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1455}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/jfZk3qhdEHpbhOgoe6LWiWQH1vw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b7Fu087b4lbgvD2Zkh9uuUzGvGW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/qJULvvrFj2jcQSW5CpBurl5F0GH.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'hu', 'file_path': '/2iLknZbwsuo2DU2XMwFustMv1Wc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1433}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/unbyPHlYp98fZXIycBs69iIqG7X.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/1wTXK636CyqDhvJ3AHcbTQdbqzA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'en', 'file_path': '/vpl0SgFYGJASU4X5otf4bXfN3CQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.669, 'height': 1238, 'iso_639_1': 'en', 'file_path': '/eVmnHzShdLNGN6WNIEwD9lAW0XL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.666, 'height': 1400, 'iso_639_1': 'de', 'file_path': '/b3UIToGx8JIpRqUTGkaoyaNLuU3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 933}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'de', 'file_path': '/bCS4nLmIb1Trem2XD1Gmv7QVCkq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.666, 'height': 1621, 'iso_639_1': 'en', 'file_path': '/roZDhuv0u5LOAbybq2lgQpSVOGY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7oj5A9xCVwSgocb9eQfoTEFQs0L.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ijKpiStjMetB43uxOAXpE8RAQR7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/f8dHlNWaxXLod6NQ5cSJmzwxvzp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oSAVoPnVgQmYnEN3e39aXjGicnd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6mp9FB58YtnvvluKr2uYntlOUA6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4wrnEENDwfqQqWw3iibW4TO7uz2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4vj4UFn2neMtq37tdiPNKizl3yZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.676, 'height': 1480, 'iso_639_1': 'en', 'file_path': '/oZ6USHIpL6A7r6JWDxodgguYVmb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/mao3SD11TSZW40HbM2Hbc3q6Cg8.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/riVXh3EimGO0y5dgQxEWPRy5Itg.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/t3oYtCqDue393e7uhDn5f8NBQRx.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/6Vwc5vgioIXUhLQGAqmp3uDDKJJ.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/eJ49J6QXrTJryC61p43NTAULms.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/74Tw91IVP3Q8AjfeNSqgfZ0FGWK.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/u8qp8FKo6sU7SUOER8guCd8LVsv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 771, 'iso_639_1': 'pl', 'file_path': '/dVppgIoMNu3NvK3GThHdXjqOHYD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 514}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'pt', 'file_path': '/7IKbG5NpqnT8UKP6bigmeQmmR2k.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 960}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/tptisxjbdI4LInxdjrU95DYCXnT.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gjHergpHMkxtgpSr8fTbasVmXDS.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/cwB0t4OHX1Pw1Umzc9jPgzalUpS.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eJ7Rg29Gf9OMBRJTx7S1MWkoIDy.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/6O3eA55DO3fHicwlAE3DaSrA5Uv.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gAP5xELKJrIdLjc20W7QUSD2q9Z.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.689, 'height': 1000, 'iso_639_1': 'ru', 'file_path': '/o9KCIyB81bxUIysFYa32tRmDLLa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 689}, {'aspect_ratio': 0.698, 'height': 1128, 'iso_639_1': 'ko', 'file_path': '/iUVqFNAsczEZDKMZ0WUwmijFXXi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 787}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'pl', 'file_path': '/xr5vqYTGDDNp1czYWS3FXDgTLgS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/6NyOWQ32k1uh6DOtwJQkc3Gsq0V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/yfvof5mHWcHI51d985ty8Md5Unz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'hu', 'file_path': '/xKbkg7hXd2sxjC4yog7wRsa0Htf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'de', 'file_path': '/eQ0fpkk2DSlMGWp3E4BzEqAxxD5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iwU4g5UynQRp5PSMR6gLIW84FdE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'fr', 'file_path': '/lHZXeG4sTkWREgkP7iJCWGJkPmp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/7pfpRJMkk7iy4pby2gnIX8dmPQc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1014, 'iso_639_1': 'uk', 'file_path': '/yWXumElnl9Ma5upfZ0lVXzJoSIZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 676}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/hpUFOvUg4QEBaYf17ptfBgftF1A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/wz3tHxlBIlVXrwdcxi4V6RgBDLQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/2QsdTyaPOEeH3Hs9IZ7wP4Q47KI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/zeZ2KBilr4i1weqDgaJMXwfszfB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2809, 'iso_639_1': 'en', 'file_path': '/iHFgXmnl8kI5Mj7M2FIgVNidh1K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1873}, {'aspect_ratio': 0.67, 'height': 1245, 'iso_639_1': None, 'file_path': '/lVEKzRlME0PzVhhsYIjSozUzOjG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 834}, {'aspect_ratio': 0.67, 'height': 1245, 'iso_639_1': 'en', 'file_path': '/meHgOaJw1qG4ghyOQpgcAEnGiYL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 834}, {'aspect_ratio': 0.755, 'height': 2415, 'iso_639_1': 'en', 'file_path': '/lgikX0J6y1HQwd2olhpAO6uFaRM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1824}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ydO1cCU9rNkSCMwYRAj0uAXh2jc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6r0kwSACT5ByguAtPOD2jEBX4Bk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8ex63HADjW4Aq0Yyi7I206fPD4w.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/poUximKxGghA1MgjN0DNUYTb8aK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'hu', 'file_path': '/sWBfP7vfft2EcmDet9wMVS1RgZt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/grgvwGEAUNurWDsIyTLeGSQkc5r.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/8y9yQAwWlWYVzLxz0spQRoKWh3T.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/z2im6qUwtDIn2KMiWoRg0dRIXIC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'fr', 'file_path': '/5mGl3dFFCzeTCG3otMmsjY71Bdm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/l95SOzLzZ9x9qY0EdBPYa6mnFDL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bctwBm75A0hCMIkRAv9hudqJgxU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/q9rKjv1XucoqDg6046hqvfuQInA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/pMs8nZuoLPrzL20dcS7cZM11ba9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2uTHwj5aHXiDlw8V99wzRrmTljD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b4Oe15CGLL61Ped0RAS9JpqdmCt.jpg', 'vote_average': 5.708, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/y8nvZPcNzuAIjWjplDiPeS4WZ6c.jpg', 'vote_average': 5.696, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/1VOKlC35yrwVKlfBSN52NY4zoF2.jpg', 'vote_average': 5.652, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2353, 'iso_639_1': 'zh', 'file_path': '/79mvAsULqtLpQvg5zYxgkK1Yohu.jpg', 'vote_average': 5.634, 'vote_count': 14, 'width': 1569}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'pt', 'file_path': '/kO6ewhlh7OIGRRbHwylDafEM1QG.jpg', 'vote_average': 5.522, 'vote_count': 6, 'width': 960}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ebSnODDg9lbsMIaWg2uAbjn7TO5.jpg', 'vote_average': 5.508, 'vote_count': 32, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zx87sFGLXZdrSF4B9WPhwjaKuQP.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'pt', 'file_path': '/8TbAQlEpRG2EQsjMNR76IYGNuki.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/e6yYRoEz4WoHIwcCaRTcQrAmaKG.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2040, 'iso_639_1': 'it', 'file_path': '/sInkpq76Q9L3JOEXEOVEQeJTjGl.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1360}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/cCH4jLoZCklH3rgqnvatjR7Q1AL.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/pEuitXhT6LEMOZuEvB6ecAaVa1m.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/m3xR365ajZrTN5vm2xf91L1zplv.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/3ldmcbmoQ6A9dUwphrwWxXIYQZM.jpg', 'vote_average': 5.33, 'vote_count': 9, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/maCv5pCoqp8mwWIxZmejzH5aCS4.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'he', 'file_path': '/ppqNQckAPwjVisCg5VPpdUBHxxb.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/l7sMTjCVqchwVAz6Kupm1bC62eP.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/iWzrUYxUfnpmLbm0rwyGKuFwpTO.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'sk', 'file_path': '/lsJ6fO8rXfTr5tcJHmJomru9SS5.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/iz7bV07QjC7Ero4msP5c9usJ3Az.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/t1LPjG9KNQQSX156XtXPxn8vIm2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.693, 'height': 2884, 'iso_639_1': 'el', 'file_path': '/ruayowvFykAbSJr5cVNRb14KXZt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sk', 'file_path': '/k6zHXaXXBSHyExTWxk6N2dtkh4a.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/QKPYFn2IS1t2neqv6hkFfAhQCc.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1667}, {'aspect_ratio': 0.7, 'height': 1372, 'iso_639_1': 'ko', 'file_path': '/r8GRroYelxUID8dOxcyeNKKol6W.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 961}, {'aspect_ratio': 0.667, 'height': 1155, 'iso_639_1': 'pl', 'file_path': '/zPRomhANBqtY8XSb9y4f2o5nHzp.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 770}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/za5q8ZKtUj3lGazCnPEDbhcp7Q4.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.705, 'height': 2838, 'iso_639_1': 'de', 'file_path': '/jSwp3rByt0iG3LwZbrMlw40wvZP.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'es', 'file_path': '/3lc06ptVbouEaZyjdHfCzmIm6v7.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1066, 'iso_639_1': 'th', 'file_path': '/sC8ci4k90aeUw7Yfd3HBlQIWBMw.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zHqzQyu6AyAZ0JCVaYmLQGfGduQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/iwvcIamoONxy9yB2td7yjRcbTQ2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.699, 'height': 1400, 'iso_639_1': 'he', 'file_path': '/cvyJDi3hP4G8knqNSmodfnJW4Wk.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 979}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/uHBAkhW91dSHjmvm3NaVGszDGwM.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/aWPRZvXOo5MmdzXwVNqnPf4uOxm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.706, 'height': 1529, 'iso_639_1': 'cs', 'file_path': '/vvabU7mZkohtB2yeEcVV6PcE71C.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'en', 'file_path': '/ggx11MEouBJgReHeWKhVOebSCno.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/zzHmycY21doYxLt2bDnhFr8xLo6.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'ja', 'file_path': '/wMGrlJ8TGuB77jcLISUWiVlG1vY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 667}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cUqEgoP6kj8ykfNjJx3Tl5zHCcN.jpg', 'vote_average': 5.306, 'vote_count': 78, 'width': 1012}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/jkFghrF0sHmL2aPwS8fpUINOzo6.jpg', 'vote_average': 5.282, 'vote_count': 14, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/53qrLADLqLsGoLVGaAkpe6The0K.jpg', 'vote_average': 5.282, 'vote_count': 14, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'fr', 'file_path': '/a0FWEv2NXw8zCgdCYAcI3x1M2iB.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 2792, 'iso_639_1': 'es', 'file_path': '/wHK0yX54svEWqlLNVMjoHcXXijq.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1861}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/pcVC6wvEVodaUxkTsUkXlgVrXHF.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/ii5CQ1ajuyvZlC60Q2rLFJT13UV.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.67, 'height': 1689, 'iso_639_1': 'ja', 'file_path': '/8z17OrgHGepjgyKvxIX9w5i1cBm.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1132}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/1zvQOnISwPx0jACHEqUa93WP1yF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/b5i4fvzOBc9mTu2J29RDsqmdvaC.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jX2GDUad2rHelr5la31MmwiL06T.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ltbTYAXBohdIHqC72RxthWWMR8S.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2974, 'iso_639_1': 'uk', 'file_path': '/4Nw3VyTcZGgk58cJxf5BJGdBU7.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1983}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/Y9KbriUET6fnsofAOvwDnXonI9.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/bP7sTFJSRKdO1PqRXBkdr7QJG5c.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/mtXqM8rjL9rwAs4V0LxKpkZ1ca1.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 954, 'iso_639_1': 'hu', 'file_path': '/qqe7SdnqKdyuZ4txNo7UzszU8RR.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 644}, {'aspect_ratio': 0.707, 'height': 1123, 'iso_639_1': 'sk', 'file_path': '/AkEkRv6yGDKxtPaO5cta6svr8em.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 794}, {'aspect_ratio': 0.69, 'height': 1015, 'iso_639_1': 'hu', 'file_path': '/7G1swFcaEE5IOC1c9vhmsNwAnBn.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 700}, {'aspect_ratio': 0.699, 'height': 1064, 'iso_639_1': 'lt', 'file_path': '/tCrBCNzwvFpbOzpakrIzE7urv1h.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 744}, {'aspect_ratio': 0.705, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/bcukXXsDE6E1uwN9uT2a7o0IkJ3.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1057}, {'aspect_ratio': 0.666, 'height': 800, 'iso_639_1': 'tr', 'file_path': '/820AaUpKmLqc7KJePkPUf0xWmZT.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 533}, {'aspect_ratio': 0.675, 'height': 1733, 'iso_639_1': 'en', 'file_path': '/yAznDPQlypuw3xuPzB8mwZ7thOF.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1170}, {'aspect_ratio': 0.666, 'height': 1912, 'iso_639_1': 'en', 'file_path': '/eHpGqOrkKcxOsjqTVU9XiRA9lBu.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1274}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/zsR6BLC3bqBpXnOVO8GAcltK5v5.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 2878, 'iso_639_1': 'ru', 'file_path': '/koF819pZLTVJDKnXTbAjsCWByCj.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'da', 'file_path': '/b8nDCzjLwOOK84QQ8IOBSXKVYmH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1080}, {'aspect_ratio': 0.686, 'height': 2334, 'iso_639_1': 'ko', 'file_path': '/jBMxV0Ufzn5zhhavrwmcwUPTQo1.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1602}, {'aspect_ratio': 0.693, 'height': 2885, 'iso_639_1': 'el', 'file_path': '/emdQj6jFZ5KmoVR6z3GzPlUEAPR.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.749, 'height': 2669, 'iso_639_1': 'fr', 'file_path': '/kO2XxxuY0zHv9Xzi75tbb0tH0qq.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'cn', 'file_path': '/irV3zgU4sxBLiZsRaJkUsFTIWiu.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 2852, 'iso_639_1': 'zh', 'file_path': '/z8yFLxSTrKsVl0LnKkRp7m5jHGW.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/nGtEd7mQ12lJyeSvj6rQSzy8sG5.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.75, 'height': 1073, 'iso_639_1': 'fr', 'file_path': '/2FaEoBZkjkmeocMpRrsB4C36JZ9.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 805}, {'aspect_ratio': 0.707, 'height': 1199, 'iso_639_1': 'fr', 'file_path': '/6vbOiVLl6yzDrcmX5tziUY337O.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 848}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/4oBdVk1ndVAyU9vieLMQDjTR0Ja.jpg', 'vote_average': 4.996, 'vote_count': 6, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1104, 'iso_639_1': 'en', 'file_path': '/qgISWc2owsFwQs65h45FyTpecfr.jpg', 'vote_average': 4.982, 'vote_count': 13, 'width': 736}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/xWeehULdRScOlKQjvGHacs3T9F9.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1012}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'es', 'file_path': '/li2TmtEDnl9YiKu0EabKZ3UN2OD.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 648}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/4nk6rKWPFafh8XEOsWEL1iuqeBR.jpg', 'vote_average': 4.968, 'vote_count': 20, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'en', 'file_path': '/vBw02gViFMiuhmQBDXALhxDCoDs.jpg', 'vote_average': 4.956, 'vote_count': 18, 'width': 648}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'es', 'file_path': '/rirlZ4Glx1IdtCnwGmax6t65KmE.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 648}, {'aspect_ratio': 0.666, 'height': 1183, 'iso_639_1': 'en', 'file_path': '/6OXM4vZiHI38tdzNl0eZBcnJ6Py.jpg', 'vote_average': 4.914, 'vote_count': 12, 'width': 788}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/hfPZSSOL9Lx8B5iSDob9ZzrWKmG.jpg', 'vote_average': 4.81, 'vote_count': 7, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/5YRk65QJV3oWTO0pzvMhUwHM3H8.jpg', 'vote_average': 4.744, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/wgbLSRE4hx2E2u4KC05dLejglvZ.jpg', 'vote_average': 4.744, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/uvp9JwfkHAfY98IKCVyW3wn50R5.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/rkydrPu5ozwuubWUxyGM0wBd7Zf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/adGWCFQtxYrzJDbVfsXqJd6An1f.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1801, 'iso_639_1': 'bg', 'file_path': '/iVLaWEt8lVm8DaWb2yFX0gZzhT1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'de', 'file_path': '/70n4Y3GW6BbwZf8TMspkw2S3E9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'pt', 'file_path': '/a45twTYksQoA7FQxHdrPbhmdymS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'pt', 'file_path': '/vOYYPbQwmNiFtuCZxepC5jSedK2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'pt', 'file_path': '/ozZUzjUrkTHm1DsXmxq5Szr33uI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 667}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/oV1orpEEyAG6qpYvx0eXLiMDOB5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.675, 'height': 1499, 'iso_639_1': 'vi', 'file_path': '/qRtqlnvcoWIL0Uma3HA15Ll84I6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1012}, {'aspect_ratio': 0.685, 'height': 934, 'iso_639_1': 'en', 'file_path': '/ibsAJmQFKIGD5045jHCtUjZoG5V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/xqpBQsx1pLgmCZmvlm4gs7Xkd6L.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.705, 'height': 2480, 'iso_639_1': 'en', 'file_path': '/71bgUB7aDOX2c0KdItL7nHS5V7Z.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1748}, {'aspect_ratio': 0.706, 'height': 1192, 'iso_639_1': 'cs', 'file_path': '/m85YWSaKOQTGd4P2iDPrdx9MWle.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 842}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cn69SQZ7JU5jGXespkOuTT4dWcN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uWp1gGlzks1Qbn4CRD53bwd1cYP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/m72FNxY3or8guz8fQeR6k8rhqIm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/477Y0JBPosetXaAq3F4JKS5cJOT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.712, 'height': 750, 'iso_639_1': 'en', 'file_path': '/xYsBhycaMctERkAryDnxzbhvLNd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 534}, {'aspect_ratio': 0.703, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/6UOBMm3SPyQwhjXg3JAuimhKH1A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 527}, {'aspect_ratio': 0.675, 'height': 750, 'iso_639_1': 'en', 'file_path': '/bUVnHhgs623J25hQKdXj5HB4TV5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 506}, {'aspect_ratio': 0.675, 'height': 1897, 'iso_639_1': 'en', 'file_path': '/bJjDuoXQwoKwf8Ikqw5fG93SccC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 1024, 'iso_639_1': 'th', 'file_path': '/sOV8Gs14hn3tItR9iRsT0zVXaN0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 683}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6mmR4jIx4lbcAlMq5jUwoxQBUNl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hJfvoSRul0vA8buvGEf8Y0nSMLj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/izwq3XnagOtZG2tjTikKmWD72Gr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ylIWpIzgtj8Kgu2LAttG91SAOEj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1562, 'iso_639_1': 'ro', 'file_path': '/jxeyKW2r6UJy18dJOsWnNcaO9ug.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1095}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/dEpzOsUsVOthJO50EeUV6c4OzOo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/6DNV7P1dELhmXMTovH5nmX1chcx.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/47Nt9FTKaibRT59Jt1C6kFrIUul.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'en', 'file_path': '/eD87eLlEBnu7YVq1mml7Ta6vraI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rbIaxCfEXhKcs81cDoRciWeZbWu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/cqUG42ME8SPfrCIBftZCTy0dIvx.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2501, 'iso_639_1': 'en', 'file_path': '/fC17drcQkvLoSfFssEtu0nEH3Cs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1667}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/3ZEJQbwgwr1FTEMm7gWMkTgwsZe.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ae18mE3HWOnuiCtT0Bu1REsm2wl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/sv1AZIcH1tLV6bcHsyouNVM3VNy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/jJ1H0mjM9qQTv5V52RdlKvOIWMF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/4VFkZEUnqwYYiWIoweufYEH67lE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/5dfGY1MiYj93BC9FKMe1K1sOJAh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/6LPkJO0phMVbuNld3jzLgoQcaYI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/yuTd4oGNt0jlT623ElJTOCZIzoK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 976, 'iso_639_1': 'en', 'file_path': '/iUw4Qp5EwnLRihy5V7vGBohdwo3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 651}, {'aspect_ratio': 0.666, 'height': 968, 'iso_639_1': 'en', 'file_path': '/4IJjdiRxMdnYXojJCNeUzwwXkUK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 645}, {'aspect_ratio': 0.664, 'height': 2118, 'iso_639_1': 'en', 'file_path': '/fbRhW1nrxIE3nwb5ByfIIQkgUni.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1407}, {'aspect_ratio': 0.667, 'height': 993, 'iso_639_1': None, 'file_path': '/8kK5FHLTrKHRT9UJvRnMlvEhvvk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 662}, {'aspect_ratio': 0.667, 'height': 1242, 'iso_639_1': 'en', 'file_path': '/dhSlbHJU9qGruyPmupchkDV41kc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/mJgVk2lvmvZtwQwfq7H71fs1xVQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/dQ7pAZt4vpYA04dHpOOqYfhADuS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vYPgI0pGfiJOI41JX4lN9c70MCL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/pvAYIDWwaQglnKjJGIGwDq02vzA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gqvkZN4yJwaWXLdawiY6SByPNgp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/bVsNuqh2hPEiX17xmUEhA6726FF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2814, 'iso_639_1': 'en', 'file_path': '/8TjRK4ltj94BIq6d5N3aUPJSnrB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1876}, {'aspect_ratio': 0.667, 'height': 1684, 'iso_639_1': 'en', 'file_path': '/obQY1Ey2M5txxmJZfYSFBzPyMXX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1124}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/spqqZhj0r8VM62hLrv3DwHyyG8E.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': None, 'file_path': '/jmtTd2RLeIK1JXYhZ9EW2Byj8i9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/iXQUHNghW2FsOxWifI1wWx87XOQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/7wSj4SRrmiuB54VGXKNB2X0RzQt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.666, 'height': 1121, 'iso_639_1': 'en', 'file_path': '/jkTXanEbEreyPBfmJXabl4vErOz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 747}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/8rTv325KOZLFjlvYW8r2wVFjHIh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/1au2MtEbzmr9WKRnv1w5ZzX0Zbg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1667}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/8fVpaUhCszes7r9EPtQLIvhBJfw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/6nVrUvOygBS8hS4RWClRKYhkN0a.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/oDdYBp1ekTO2ELJwb6SNQoC9Cua.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/p3HyZzJYgw35OJj06OnojkAIjdg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/5Pwoe5rZwYcLEmo3CyeWMND12Sp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'fr', 'file_path': '/7gmYun3b26zyDRDS11Lef8FkAgA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/j21lDOxiJBOoW8ApfVvilSow0GY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.749, 'height': 2669, 'iso_639_1': 'fr', 'file_path': '/zKJYwNZ38BmitETM9ttkG8rvjSF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/tASJpacWyivVyRnUahaxT2cJg5L.jpg', 'vote_average': 5.708, 'vote_count': 9, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/3VijrH8284v86IO3AjG24Ri2jZ1.jpg', 'vote_average': 5.642, 'vote_count': 10, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/72SOtZnFhCumLRZhoXlX8g2IkgF.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/k68nPLbIST6NP96JmTxmZijEvCA.jpg', 'vote_average': 5.388, 'vote_count': 57, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/bHUmjIqaAAjrQ0p8RqagHgCmG7N.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'el', 'file_path': '/AdkXPG1dBkd8VnuzQIyzh6B2o0X.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 978, 'iso_639_1': 'pl', 'file_path': '/IveefzhRc6Zdd5gzQw3VFjitZP.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 652}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/iKXqUiLFDgeIGozRR6JYRvFmD5A.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.72, 'height': 1000, 'iso_639_1': 'cs', 'file_path': '/hzvQVjmagnpOd1haaJq6IPJI3es.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 720}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/2olsZGB9vcazEoQUI1eoD7NaBXI.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/aCIFMriQh8rvhxpN1IWGgvH0Tlg.jpg', 'vote_average': 5.364, 'vote_count': 31, 'width': 1365}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'zh', 'file_path': '/qs13cxcA7tVTBq0WcgJ9GGplXnK.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/1jU80STrosbPsiNe3oPpwyS5cXg.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 2918, 'iso_639_1': 'ko', 'file_path': '/ylQRi3edixhzUiubw7LQP1YhI6W.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1958}, {'aspect_ratio': 0.671, 'height': 2917, 'iso_639_1': 'ko', 'file_path': '/4ISu3R5OQQ39aWCzWWYrB9reSQD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1958}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/ApP2sz8pMkPC5xRlFa3l6MjQINB.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'hr', 'file_path': '/naWwLNGj1cQ0nVz5Ap6CC3cl0RU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/buSr2RIxzJ5Zh6dLaLBsqAdvz3I.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/3nNhvoImY5xos82ZLMhv1jGucGM.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/hsGsdJnjvdXdqXOJyLiJHVecAt5.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.676, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/oEPLD99jMDtX1HabXB4JbHhkGWS.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 676}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/VBEruSTMZfwj1VFqMqGXBqLOro.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/kjMSOw223FtsdMzEOCUvTnyDPFY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/cRDUa63MeEpOWdqZeXqReDz7KTx.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'fr', 'file_path': '/m2Lb6a38TJbjP9py0Wjml6JtIdm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/qG5B4146EZHoCRlwYgybl2C060w.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2644, 'iso_639_1': 'sk', 'file_path': '/8Rat9OEsG5Ys9YxPoLpFSwUT3Ct.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1763}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/Ae0pbv4E6YfqfN3UjKWIfQSzP9v.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 2852, 'iso_639_1': 'fr', 'file_path': '/r4aygO7YvOVIl5r9xg5NmI1M6bV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oRkLA2EkXaRLmK63BkvK74G8tC4.jpg', 'vote_average': 5.3, 'vote_count': 22, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/wRlgk7KLJNUd1Kgct5FimlGgviK.jpg', 'vote_average': 5.292, 'vote_count': 18, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/oh8XmxWlySHgGLlx8QOBmq9k72j.jpg', 'vote_average': 5.282, 'vote_count': 14, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7wHx4Vk0NExuzZuGk2KRuc8Ogw8.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/q8Py71q2dnjdZOoB6BGcUkgmy0d.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rrKH3VhHssGTCfPuaEQkxvEoElv.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1200, 'iso_639_1': 'es', 'file_path': '/jFAi1Uv3JjNPEgjKuneG5mBlAvA.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 810}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/jutsxphSGbnpxpGr23xzbf2ziQZ.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'en', 'file_path': '/igGF5CJwfsHBXO515sQbHmEwwKb.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8W7GrgHc9FdfFhExGLSD8woZaSd.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/pBtBqPcNocjYEzVqSOzW5HQlx0E.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/n0zcpLDR6cbmPgWrIWTleGeI24j.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2046, 'iso_639_1': 'en', 'file_path': '/zukO7q7I4kBQhEMZFSnDkVx6rm6.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 2880, 'iso_639_1': 'en', 'file_path': '/20OxuK7i84dlrYLZkWXCYD595bZ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1920}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/w93KBwtAyLRHSwPApC9ojVbblz3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/hTAIqYYXDHqe8xPFV5cH4ElxCqb.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/iGkkhRzdtzg56zbCOpIi9XosVps.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 1280, 'iso_639_1': 'es', 'file_path': '/sJfBFmPBgBuE4bn6LeGzt3548wc.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 890}, {'aspect_ratio': 0.675, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/gXFO3yijIcE81ToS8fex5fckQs6.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1822}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bbsLQa2MFfjkKN1jiLJniuoVmnr.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/e17TGZsyJuV8SoSmjBpYyxpWDkF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/m96dj44zZJ8TxpaMZDJv63TldZh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'th', 'file_path': '/26UM1gxWL7siq8TdTWVoioirhiz.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 648}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'tr', 'file_path': '/dj6ji5YuvYK4TqfrI7N3EwoRstA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/fxWdGXi70vp3FmMwVUgaFOuz7p5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/t20YrhZQzVKTcUarWb8hvkuVdhR.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/953c71N8KDhL0FGfFjbHltwVmNj.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gr8rLs4QSu3c7sksYxUXqAvjTtL.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/uC2Us1kfVCbTfx0rvqwqgIIjDeu.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ba6WSxKmNzfeK1XnfrNDYfU3rJN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 750, 'iso_639_1': 'en', 'file_path': '/z1NOLVngacgijfaInk6NH9teHA8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 506}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/yrp3FwZnPk76nB4YTnVCRkLUWA8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 951}, {'aspect_ratio': 0.675, 'height': 2046, 'iso_639_1': 'en', 'file_path': '/n1It9EmM9R10Z3NGTQFiG1aodpl.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9hMMIbz0Aw9zO2jXoJZPOpBiCtT.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/deLRaMU1cYxp169iIqh0Pt6MbgN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/o4WvqfFGUKIqrGqCRPQQN4LfwPn.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/y0oS0FUbEeeDJ7zB2KneCeGBE0W.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.684, 'height': 1901, 'iso_639_1': 'en', 'file_path': '/51gY7geyCQ7RsFMsySUcBShd1jp.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1300}, {'aspect_ratio': 0.666, 'height': 1936, 'iso_639_1': 'en', 'file_path': '/qEFP7olEpveUjQoJBlVL7jYne5z.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1290}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/658wTC3V8AvrdZGiUKqLzFmbnHq.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1734, 'iso_639_1': 'en', 'file_path': '/zdV05nwIfPUkJaqjENtD1Bz6dqD.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1155}, {'aspect_ratio': 0.667, 'height': 1692, 'iso_639_1': 'en', 'file_path': '/yp8DRbAnJHunlXsrhTppHAezliH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1128}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4l7xavwBLzMO7XDuUSTIWS5xFbv.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gD60HrHf3E1muyaBTiEZVSsqq3Q.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 2250, 'iso_639_1': 'en', 'file_path': '/vHBk4t6Wf777uRxTlypF28RdLc8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1498}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/VarFilyykk24q2TM72DRGQY7Z9.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/6bBseBvhfnQwWVZUNdyKzDJ2ND7.jpg', 'vote_average': 5.206, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/3oNEdly8PgenWhQSHLZBBFXL5NZ.jpg', 'vote_average': 5.198, 'vote_count': 7, 'width': 800}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'zh', 'file_path': '/p0F78BfKkX9c3JnZILgZe0IFbjh.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1382}, {'aspect_ratio': 0.669, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/jvuXK03Tvq8Ttr4VbvjtbpNv8sV.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 954}, {'aspect_ratio': 0.7, 'height': 1000, 'iso_639_1': 'zh', 'file_path': '/68hZXVFkFGQ7KN3yjPBa5bcLyHf.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 700}, {'aspect_ratio': 0.669, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/dFjRYABWTsUmLdhnxEjWtiVGUQc.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 954}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/s5jxwhLPGI4Xow8GXwenzL1MkwF.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/5egQdoW86PIeMGbMQsaP17LTUGF.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/79n0cePpWjTt8Ge4BRQB87WL0lC.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1367, 'iso_639_1': 'en', 'file_path': '/AtBOlZVuzeIHmlLxBi6vKa7LxSX.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 911}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/ve6nayrO4nCSV7f4kJtyDnRDZXj.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/bnP8QQWIHAjz8lyNXyP1aIC9gQy.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/r3576fzKQ1N5mlwT8jZuCn5Arwb.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1423, 'iso_639_1': 'ru', 'file_path': '/vspWqZ3YR7MR1njlehqNChhsJbY.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 960}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'uk', 'file_path': '/aVIT5vpLhRRG0yfTWSqahSuUBy7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1382}, {'aspect_ratio': 0.709, 'height': 776, 'iso_639_1': 'uk', 'file_path': '/als8ezMfZQOU4qCPmWY4fE3dAYQ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 550}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/q3VwIHJifJqW1aB13z7ypYLjIR1.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/g50V0IpNnA9aO2KzUsWx1IOGbl7.jpg', 'vote_average': 5.146, 'vote_count': 10, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4QUBQUtHfGVOPA5FJr9ylj7qfk4.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/ufxaLyyrpjKTBf6s95xDMMBFhv8.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/2BcA6OuvAcZYGHYT9cGnz4OaG5w.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'fr', 'file_path': '/wi5c5ui75273L8Xy7utfQ338JVM.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1080}, {'aspect_ratio': 0.675, 'height': 1553, 'iso_639_1': 'zh', 'file_path': '/ikH6hPtVBAjDJrfEPWV0WsdZOou.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1049}, {'aspect_ratio': 0.707, 'height': 2808, 'iso_639_1': 'de', 'file_path': '/rvFPyynleFmssvkHkETR5dfA4wQ.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1985}, {'aspect_ratio': 0.707, 'height': 2694, 'iso_639_1': 'de', 'file_path': '/3ethyYcHylFB0MQaR9Re8XipD9Q.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1905}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/n43gtda4d9MpkQOJuDiZsghyuDF.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'it', 'file_path': '/zyhbCFImhQZGUpaR0YxQo9cS8ug.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 640}, {'aspect_ratio': 0.75, 'height': 2184, 'iso_639_1': 'fr', 'file_path': '/n3r7TJ4Jg7IMLfjox9DKf20INrM.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1638}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'fr', 'file_path': '/iFuUdZ8Sf3aUloLrwRkE9eZe9qn.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/lvGVvKUNjkYMsCiWRQvx0zmOSgf.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1080, 'iso_639_1': 'fr', 'file_path': '/wUFgurjdZ0CZLOpDddED61LsECp.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 729}, {'aspect_ratio': 0.675, 'height': 1080, 'iso_639_1': 'es', 'file_path': '/67p7XVP5SLup521iD9cAayMNt2U.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 729}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/xXnu79NXmxeBel3GN5Q35r5M9IH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/9SG06mt9sdAKPSV24ZwSC0BTJgP.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/gPHolElXk7RZIbtH5DZYy4x89KD.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/4yap6odXTCy4B5i4yj26CX0PP5u.jpg', 'vote_average': 5.046, 'vote_count': 14, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 1840, 'iso_639_1': 'en', 'file_path': '/fIkVbwSgIbtQoTXoPQFWQQYbTNo.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1227}, {'aspect_ratio': 0.667, 'height': 2025, 'iso_639_1': 'en', 'file_path': '/r3RN7MhELaLa1TswnruOguVpbti.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1350}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/4FcXo5SMDxx3xs6Gy4Hn8ghubjF.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/gtbcNREppG3EtlWPUSBgvQX3wLl.jpg', 'vote_average': 4.954, 'vote_count': 9, 'width': 1382}, {'aspect_ratio': 0.675, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/aqeFTqYgC8LkYUcCP9kPw1mVW38.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.679, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/wqgyAiTZwCJglokIViEwAMk6UXR.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 679}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/yj2fK2noJy7IeC7IF7Ck89rGYOI.jpg', 'vote_average': 4.908, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/miydFfLqKN52EG0cRqX3DNVxTEV.jpg', 'vote_average': 4.846, 'vote_count': 11, 'width': 1012}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lM9LUM7oJ9SekpzLxLGp64ACRBr.jpg', 'vote_average': 4.828, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/vTq8Sq4BJopStWGxDcAkmNThxdM.jpg', 'vote_average': 4.794, 'vote_count': 12, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'zh', 'file_path': '/fZDEaSzIez8VlPs0s0P3qKRshaE.jpg', 'vote_average': 4.774, 'vote_count': 10, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/lX9WdoJGHMr7pVyV7FNI6dA3M8j.jpg', 'vote_average': 4.756, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/k9HBfQwoXSTZgw4O6SeuVBYUgiY.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/hPWQxw5dQH2nKvC8m15aEJvIeJ3.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lRsEThuzrJuuvj6oCDDXDAxLOFF.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/9Nqx2tMrrksmq9aO5oSO0NzUEAf.jpg', 'vote_average': 4.674, 'vote_count': 12, 'width': 1400}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/rskwnqit2uNIGzdaRiK9xlDIcdK.jpg', 'vote_average': 4.576, 'vote_count': 14, 'width': 675}, {'aspect_ratio': 0.671, 'height': 1945, 'iso_639_1': 'ko', 'file_path': '/aHt13urK4fzrOr30yHVmGT6OsE6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1305}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/4xbiHTdPSlVKtYpTu4nABh9HfGH.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/jeHQIDSIa4vJBQPztVOHr39Z6ah.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/dFafJVFABS5A0rZ5gThMHO3lH8V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cs', 'file_path': '/lhauCTw99l7NLHNMnosVcM9AR4K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'uk', 'file_path': '/3axgBjjEgEm0BFWViSkfuyBQcab.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ar', 'file_path': '/iN8mhL0vSIxsTetkmE3XsJedvAv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ar', 'file_path': '/1haRSMcIshKnVUljJF6sxr0luH9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/eMTAAOl7t37LXSfmmwQgZUQjjna.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/qnoKl9QhIfQ9ooPAltuAQgO4PdQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/k2hAyRUMu2yMWImzwJ0be1EK4mA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 978, 'iso_639_1': 'pl', 'file_path': '/akyYzv6aF8EpIFp5Q7J5gBwOPys.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 652}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ja', 'file_path': '/azzqSt3XPpRRIYyh0WT6rs2BCe7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1200, 'iso_639_1': 'vi', 'file_path': '/nSaf4wrXgifAZZ52ncKuXBuR989.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 810}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'vi', 'file_path': '/6yEC8Vzeb8Jb2v92WDDlwE7o6Qp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/vrXFOYjBMXjsVgTZTNGvX5cwsVi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/8rmXY2DH0emfwwT1hsoGkh91bTR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'tr', 'file_path': '/n8gzKzi8tvpTZh0Ev8B5c5T6Lm2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'tr', 'file_path': '/incFPFFoGrnDR6xRtEACqkug4vN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/sdS5LoMq4ELi9oPJdqDkn3nY3Jz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/7iUA9SKVHzplTIxkXsVshlAYCtX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/rpfDaRMIbEXXHXN7EfNkfLqQe0b.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/bngxk1DYQD8rzkXeyDTf9afqQS2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jDO05iH7DkjEkTiZcLvT9MAID3k.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eQy2Dceeeg31cpLuLxyyGwHgq3N.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uG3LanNAPENQSVWzSCSBMzJ8vEI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/wdUzLcYKDuEk5hRQBy4GPWaWsU9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ywl38WqU29S8S9w6h1foR9jYyRR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/f6IjjhzR3tvPCKhWAybsyGgF0aj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/g1fDu3g7BsEScobygmBiZB6y7HU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.674, 'height': 2136, 'iso_639_1': 'ar', 'file_path': '/jlOxsDp0ehXpYjymkzza9NCrTe7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/ggFZHu542Iy3Uswh3iydOnrxQaP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/e8xHyx6xnvwOEJyFF7cyyJ8vBg2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/lrFsBGRdZtLNpMYPiQLu6iQFi0M.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/ggm8X8fgwoqUoIqE8QDcKxScLlW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gyMGax60ToZCkoKOKEkTDEzfUt1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/WukyEfsKP21vRahgU8oAPwFsj2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/GqAWQHdEHS0dzyTfGFGXJtIaq7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 750, 'iso_639_1': 'zh', 'file_path': '/tVe3xHC97imJoyfZ1KaE55AdngU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 506}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/epoids15egPuq933RvT0Y34L478.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/ovMjFDybSgGTkeboRl7NW1pxQwJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/2IRYjm9TPKOcAN05JQI7p83OYfc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 889, 'iso_639_1': 'ro', 'file_path': '/8hGCmXRQwg1oFRPSoELXb5Y2qMy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 592}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/zDktJ7HvvPmQfmODoQr82Vqixas.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/trcTyjkrPtJOs3VAhsKg4VXD4e3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/1Kp80UumFADxoujem4f9XUdorns.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/c2JahdNbxE3tnuqkHzc0PV5mmaf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.676, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/uC8TeYMb21Wbp7vBJxkdLSCVowF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 676}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/dXEz6T9l4beYMLFQCz8CaxGahrA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/45xZh9ckG0G1G1KDo3b3SMpCepI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.676, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/qA0AXOdnFdEqQ5QOkXpPNBJsSaC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 676}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/qJ6BS0pq5MmHt9eJRDIOpI6HQbr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/zpIqjUYkRHOECYjrNIT3Q5n8E3I.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/2y9JfYSDiFLuQE883SpHjsqg725.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/pnK4oL7yhFVAvcIDgTw2qvxmcQq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/qijkW9NBsX620z2oIO5rSIMgkZK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2jh51rEBFF4xd01mFeVaIuEB5Zs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/wY5ADCiNmcriq4ztk8vFdmLLPZa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1364}, {'aspect_ratio': 0.702, 'height': 997, 'iso_639_1': 'en', 'file_path': '/mlOQtpJ21PwrhJMWT82HTcR66f1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.667, 'height': 1049, 'iso_639_1': 'en', 'file_path': '/gqXcpvR0XbaAKdjUOFyhMnMYyCh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.675, 'height': 1353, 'iso_639_1': 'en', 'file_path': '/3p4m0xZDxEiJlMtfaBlJrDoRd94.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 913}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'en', 'file_path': '/ikprp0ljmuqwAKVF7loD0RYB1R3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.707, 'height': 990, 'iso_639_1': 'en', 'file_path': '/t6Ci35eRRUgjheNjwvDlnZasLAz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/vqPN7tSObfi2samod5YMWk3hd1T.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 2600, 'iso_639_1': 'hi', 'file_path': '/f9zhIg8M1X1tFpHFUEA3scA6OYb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1734}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/gfK480aiP5YP6LOLMcGwuCqUwod.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/4hyLO3l1QPnaL8nelSF9gcQP6Zu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'th', 'file_path': '/5ie13iRwU9fwpNlaSvy10NJQdob.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.666, 'height': 2000, 'iso_639_1': 'en', 'file_path': '/ofEnRAtapT6QDNQRgKRnEkGi9TJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1333}, {'aspect_ratio': 0.707, 'height': 1122, 'iso_639_1': 'no', 'file_path': '/w2PVxCxX9uXgji5XKBjTh6ZYV5k.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 793}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/biB1eiXO8Gtlm3f9V6qztEOipCw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.666, 'height': 1642, 'iso_639_1': 'en', 'file_path': '/c9o3YTki4jE2KBn2U2JypADzi3l.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1094}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'fa', 'file_path': '/k2az1QwAcRojG2DkMgq547cuUtm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1493, 'iso_639_1': 'en', 'file_path': '/rGMA2oKiBQJnCiyk1jTFripWnh6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 996}, {'aspect_ratio': 0.666, 'height': 2815, 'iso_639_1': 'en', 'file_path': '/osnMHdJcOtRn9Tt0UStGmjSW8a3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1876}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/e6rWRXmXNIAbhLTxxWyL47Gl83U.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/eS4JP1cUqDDxSCl0SZ7N8fi5DDi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9kw2rw8qDeNBsyfaPQ9X2AVyI0Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/fmMkJ2OK8Kil3RDOErXeFyfp3c9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/pHgdMEMLByURAvRExapzplW7zXV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/cUvsymH3xbOqaCsEp9UpLqxuyvF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/cIsad2oTEgIStgknjKR3uaQM16O.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/dPIhW8H3wcPuYSCkJddbeEcOYia.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/wgZH8JYBRL10gt6UjKzxPKWUl2w.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/2RvO5Q8i3Cv9ExSqPtRb64yBTPT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ja', 'file_path': '/6iQh1aekQjRYxS2U9rofwGocjfZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8vQuVYhXSbkrPajWxDlHPG7AdHS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/wxwlG0M23uNvXglZ2ScUZYb9z6W.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.665, 'height': 1994, 'iso_639_1': 'en', 'file_path': '/mGb10FlelkIYQe5OPidEKsNtZmt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1327}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/srfebAZOcvZJHy0gMtI8TCwigCS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 981, 'iso_639_1': 'sk', 'file_path': '/zbKHN5YeKCjdYE6JPrJFhkbdKQR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 654}, {'aspect_ratio': 0.674, 'height': 949, 'iso_639_1': 'en', 'file_path': '/8JnqTXhjaLnTFkvPOoSdvofzPn7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4BVUrRjMj5WiyjRnHURfmAWxWME.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1000, 'iso_639_1': None, 'file_path': '/rQ884232vYo3pbm0Ov1bCrMy6Zp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 666}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hr0L2aueqlP2BYUblTTjmtn0hw4.jpg', 'vote_average': 5.458, 'vote_count': 15, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/rcqIPCMhvYpreMHzMuHiezQqBK3.jpg', 'vote_average': 5.586, 'vote_count': 7, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/rrS7K8tXVFUBliIKWaRuSq65nWr.jpg', 'vote_average': 5.522, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/8JoNBc8AMLcTXbAURDJXXZpTo9j.jpg', 'vote_average': 5.522, 'vote_count': 6, 'width': 951}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/ApcGBERN0p9I0nDOIwJeEmpnLU5.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/8JCu1wi83pirpHEbVpmpfowDolX.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': 'ja', 'file_path': '/sJTxiMt4slbmTnQoV5UyA2HlYx4.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1068}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/85cWkCVftiVs0BVey6pxX8uNmLt.jpg', 'vote_average': 5.346, 'vote_count': 17, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2366, 'iso_639_1': 'en', 'file_path': '/bOizb8SnashwNbFCpwie5pmLi1m.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1577}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/ht5Jqka646AW8P3IsdrUPf8W8La.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ja', 'file_path': '/mQyK6KLWCwvrG8lBpfDWEWd6lK1.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/bfezKMcrzCIU4p72SljoZMjJUsW.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/9LfroB8zJD7HqP5hsxeDPHrzbw0.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/oWIhEWtHbSlvttp5qbBEutPOV7G.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/vvPsRFPzOMqnlzbFfxYR2EPqUeg.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/guMc9QD270iEVYLpEJiAndSyO7G.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/1Z07Kqke0JyOn3ODt2t3qd2CEpN.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/wUpqWb7YZW1Jz2oyF4UJgItYXDC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'el', 'file_path': '/mKq0xiEM0BoETIJ3Mrs4lc5Oamw.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/3viEo7Rt7swwh573wBCZffcM7eo.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/jtB2vPm7Drpw0AToSxKIcxjRcgC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 862, 'iso_639_1': 'tr', 'file_path': '/f1Lt6pJEb25LVEIodLxZDgIhTks.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 574}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/2NaeRiOuxkpWv8s0uBzSlp7SuCn.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gP3KJvuqZGwYEZ0BWXNadYAMFO3.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.75, 'height': 960, 'iso_639_1': None, 'file_path': '/jpoA8SXWQpCsEXDeXbK6xoKccWV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 720}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/c0GcUqVFuklMyuNJuag3NRpGZpu.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/eq5P71YHwwaacEYKaQ72Wxy6BlT.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rc1iRerRJIw3iStmlsdQIZUp49J.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/mBxOeqHQvdF5lxGtDUB6XVcJNi5.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/6XDLzDabcJpuURgilfSTX080lNZ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/ws4Hj54pdDsk2DdIEPDwZU8z5KT.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2366, 'iso_639_1': 'en', 'file_path': '/eTOmj92I7sLydsEXoHE4UPFjynG.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1577}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/tTiMHKsTeA30CXJS3byz2jG1MlR.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.686, 'height': 1311, 'iso_639_1': 'ko', 'file_path': '/stbZZs3WMPr9rvAT92Qd8gXCUfx.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 900}, {'aspect_ratio': 0.695, 'height': 1920, 'iso_639_1': 'ko', 'file_path': '/1EePZmyG7B1Gm9qubLWVtlICDiG.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1335}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/70fWwkCYjsHPhPRUF9OydhbEkVC.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/4Op2hWPNa5JygwbmLs1O1pDAm7L.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/fN0YkgaNUNR8Tf2d4MdpaHwREg8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/pi6mwFCtTDIAHOHWan4AQ36Tdh2.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oAletUf008Es7TQmWIZjjPTQw1R.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/3dboviWGRZdGHXVEKqCU6jq5BX3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 951}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/xwfcNOXVaaauEG6zX73ECq5Vj6k.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.667, 'height': 919, 'iso_639_1': 'en', 'file_path': '/j3U7vzNilUnu3E3zMgBaSSRhTqF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 613}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/ezAOlzdExzNXzmsTxQUTwo6F3gZ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/df17TKgMV104fbEIfPstCkAvBbe.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/s9oQj6ZzPDVeQctL8ZDVchtDquw.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/1u2GII8LtwIRWLyGTotC6AlIZL8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/u0HJjTs5ZQd7jL9QG4mVyUVYqQD.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/fp7cZ3ENxJmKBSA46XrkqGmSZdx.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/h9x3h93HG5iCjevWwUppofmkuwW.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/i6Wdrls4gsFXmwbC2MYmabHOWzn.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/wDnmRGxiA2lUgmxgoFtYdvvzYVN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/3eYugifQ739WRTuG6q5CumYpB6.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/tQnmavK2agVr1jz0CEnPa0hsYBp.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/8EF7hJ1lWRA7ngk1SR0TePbYD6n.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.667, 'height': 1515, 'iso_639_1': 'en', 'file_path': '/6Y3tH8PrZKr0Cv6KroaWlvMIlaU.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1010}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vzvKcPQ4o7TjWeGIn0aGC9FeVNu.jpg', 'vote_average': 5.206, 'vote_count': 9, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/hrJUZ5Jo2G3Czy391evhlxgbEdJ.jpg', 'vote_average': 5.206, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2215, 'iso_639_1': 'es', 'file_path': '/rOD0IgjAop4LA2vuimhNRLyGijf.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1477}, {'aspect_ratio': 0.667, 'height': 1074, 'iso_639_1': 'pt', 'file_path': '/zRwO5BPPgkTNo1PoomZPE7wkKvQ.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 716}, {'aspect_ratio': 0.668, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/irP27RDYv9JjF7fVPKYKUODhr0S.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 750}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'it', 'file_path': '/p2JzxFRAlbxS4EvWMo4yiYZXu1W.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'pt', 'file_path': '/d9EYFtoo4QJMCl5qWzS8zAblAlf.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/nIImGBHeBW90jAxCpp7RwGN2Mgk.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.659, 'height': 990, 'iso_639_1': 'en', 'file_path': '/v4FHdJCRg94cOKX9hwKU9aTad7k.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 652}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'it', 'file_path': '/tCQtssGTb74NQV198XaaTFOxywV.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/z5bRqRQv9UIieAuySQ82CTmtU6t.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/8AYfVmtQX0MgcaAMmowLkvQv47K.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/hg9rnax7IcerZOiOvi2oEshBt7f.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/mZrnY7zrfEqjJKJT8UFs03QlTpe.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'hu', 'file_path': '/tFB5SGE30So69tRz7mebiMSCFZ3.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1401}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/pU1DqL2OhZY8i1FLb74qYWMGASa.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1337, 'iso_639_1': 'pt', 'file_path': '/dqlxzH1DEIFTSYCv6HM0C1sxVB7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 892}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/nOI2Siljlsi0HbzVpcaP2zaI3qO.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.675, 'height': 1481, 'iso_639_1': 'en', 'file_path': '/lAFXWGCUAPSF6v671gaobbfz9mq.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/3opgrJowXttqeFgLRzIdHTLmdHI.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/jDheQYsH7fwtTon6354CWxLxnbc.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/gaivVSK2pOIOAWNGGKyMGpIAC2z.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hDni6zlvNgGW4Li3SIdzhsL54uI.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.684, 'height': 750, 'iso_639_1': 'en', 'file_path': '/A3omWIGbMcGTP43nbQBn75qHjei.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 513}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/6OApdDSChDhlNmi5L2NdL4fverK.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/211ixGjXqxXNe2yeYZTAG5sd4HU.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1434}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/iRpMKBjY1sXcRWL6monOQKBfzAJ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1434}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/je9RusBcFosNylhdRrweTkLkamx.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1433}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/a14jV8DjI5enrPMX3MIRxBoXoMP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1434}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/v1jB1xjTZpW5TYtLaHnagIErFsp.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1433}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/z4h5z2ultilQ4KaEhD2dSsYbqB.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.709, 'height': 2820, 'iso_639_1': 'uk', 'file_path': '/9gtc3GLDCeLZ9vhaq2e0PZQyGDo.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gegAwg4aVl3jpS3oi8sij7fpArL.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/lEeOaKZf16R1cZCuryP859SKgE7.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.742, 'height': 2096, 'iso_639_1': 'en', 'file_path': '/nYvQZLi9P7kmR3lmgkp5tujxiMP.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1555}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/uG4D95vfcZ3SQc7AMpvQCy2kfCT.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bZhj71lpvfAIkHUMdvgftD2h1bY.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.668, 'height': 1498, 'iso_639_1': 'en', 'file_path': '/kOKvBKLCiUx1yk8wVNvp3e1DBWt.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/s9ZLJz5haARLcLm8GGvAeTSslqc.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1999}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6Wkqvkg5EMaJMLuacz4sz8T9ijp.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/5xM2crlkyRwtbbfMQFb26A6NVmr.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/6YUrt0c9Q30UpUYskc0ppbO7DXH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/s6Kf3qHvRKjnZjyVj7YcbhTHrxi.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/zGoxNkACbex9VoAmJS6iAQvXoHs.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2366, 'iso_639_1': 'en', 'file_path': '/nQfJRcsHoEnPX0RY1oHJqQl2gI4.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1577}, {'aspect_ratio': 0.699, 'height': 1700, 'iso_639_1': 'it', 'file_path': '/h7go9xdRhf4fE7rkDzWe7eGUxR6.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1189}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oKXQPPmeAf4zMK5L9WzQuItTI9y.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vak0Hclk3ih11ljYdp6HPYZ1czh.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.676, 'height': 1183, 'iso_639_1': 'en', 'file_path': '/lNYltGAlgtyNmuGKHoX8iQAeit9.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/icpIopNi4fFtgxlcWeRDH5nZPG4.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'it', 'file_path': '/fA2hFBbo1Y8sSIUtUAkUn8UiICI.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 672}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/3gdTo4OmciK2nGFBtAazDpozP95.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4w4TQUzYmiz99Pg5OqjUt1TOEAe.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.655, 'height': 1648, 'iso_639_1': 'zh', 'file_path': '/bVnHnrojrIUMLnLDSSXi3krg4VJ.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1080}, {'aspect_ratio': 0.742, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/zInSl0P8Rk04mgAHz4E1xR1hmmH.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1187}, {'aspect_ratio': 0.692, 'height': 1228, 'iso_639_1': 'bg', 'file_path': '/vt3Jf9fzHKO2WYQNCQQTsXJcdCM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 850}, {'aspect_ratio': 0.693, 'height': 796, 'iso_639_1': 'he', 'file_path': '/y0I9F5u7yianHQuFYzy8xsR94q9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 552}, {'aspect_ratio': 0.667, 'height': 2011, 'iso_639_1': 'cs', 'file_path': '/guG09K0cxo9UJMBlbYRTwh2GylW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1341}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/poNBHaE54CXOtTjmAcnrb729pDQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/xbXzUM2cQoaHNUJrp6kOKFkf3LL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/8MhqFD41aixsEGKQAfycoH4RSR5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/osjIjyDc6le4lqqNZvq9d5qj0jC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/mhiwE3OIgeURZcAecAR1Ew6W2sQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/vXVked88FPWAqVJNX7qqFarBWMP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/i5BTtItJTaqGoZ0hEKlj5SzQOkh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.71, 'height': 1127, 'iso_639_1': 'cn', 'file_path': '/ghmlIwKMK1c0cQDmGH9fnIarQ0t.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'cn', 'file_path': '/zj7PZtHjCOOw1nZ5lARNL4CafaX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/rJFbUt5CVBxOzJkrmaEnGJtma5x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 2304, 'iso_639_1': 'ko', 'file_path': '/u3y3Ex9c69T4hRBZcIIPIrKUXsw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1602}, {'aspect_ratio': 0.75, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/7eNOyX67wrsmJpuFeVmjzVL9KWw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1125}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fi', 'file_path': '/aojNRY7yRJIQ51nkW2q0ApQ9vol.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/cKEM1ERV1lqVH83F95845FO8AW6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/rFiVxVt83lFU5e3UyUjePo8wKeR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.663, 'height': 754, 'iso_639_1': 'en', 'file_path': '/dAUwS3wmSrA9IH02xukDKxB6CQK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.705, 'height': 750, 'iso_639_1': 'en', 'file_path': '/4tkTHjYJ7UHRDLZc1gfQzmEj6Qo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 529}, {'aspect_ratio': 0.7, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/zzcwe9aqLY39rEwULxYmSfOlWuF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 525}, {'aspect_ratio': 0.705, 'height': 750, 'iso_639_1': 'en', 'file_path': '/taqB3T5bt7rgYPozK56GQfU3aBf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 529}, {'aspect_ratio': 0.675, 'height': 1280, 'iso_639_1': 'en', 'file_path': '/zhHWbDF0BdCSUoLmcQMHDqM8cBI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 864}, {'aspect_ratio': 0.724, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/mepdUhSur3MXxM8VCuMaJwLShFJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 543}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'it', 'file_path': '/pDc2SDH2ndElbg93aR2Id9eTgoJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/qVs4jjEngrT71XLclmmJKMr2h72.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/tTOiMCTNSZ1IbLF0GkhKsO5YUb6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/6doRIUrCTNjUEk2WzC3DU6QMG4U.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/bxdRr1isvADfem0j3W5ZwSG6fE6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xHzULcM3LKhw532adNt54SMfdmG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 2048, 'iso_639_1': 'cn', 'file_path': '/8murHJQyYQezDHm3CHn261Zw2zs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1455}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/vIZ4X0FTDNoxhlvGKwv17CEnpUo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iWsnznzdtlgMYBaftnLbu8i1wkg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/zlvv836AMk92uUUWIFY1DWeRUn4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.707, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bkbIkAPWoVsDFJK7ria2fOBFw1A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1061}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/eQ72Hdf6sKBOnzA1HWTx5jYeuzE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/1I0wbQjSg7M2sXj5M6rllkl8sET.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/uZ9i1ivL7rtqY6Z4FxgGkSnF4mZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'en', 'file_path': '/drfusGgi3MnZs7WQROzmWRdCIhf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.666, 'height': 1688, 'iso_639_1': 'en', 'file_path': '/8oKHBckmdhH4EVhH8CE0R2IxTrw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1125}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'en', 'file_path': '/5oZO16FhBzkZ1LcMKIlm92PQQsD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1280}, {'aspect_ratio': 0.666, 'height': 1920, 'iso_639_1': 'en', 'file_path': '/MaLLF6QmfoZvGy4RH3vQTu3eWD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1279}, {'aspect_ratio': 0.672, 'height': 2197, 'iso_639_1': 'ro', 'file_path': '/kGbx95vZRmJGv6yiwDs3GyvK5LF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1476}, {'aspect_ratio': 0.667, 'height': 2147, 'iso_639_1': 'ja', 'file_path': '/z6i9Qc7UMtiSX6TbK2BpfMrFWJN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1431}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'vi', 'file_path': '/1ua0jberyWnXlOQ9JXpVLTb9vjS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/d2ir64IkXExrdLgJXtbqNEduAhZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/1HQavodBAhgkLqr29PPt4Jy2ebF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/jg7vZUBlhF9I3JAGyOjLtPi8N7Q.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bhNfqgdaf8QuVvT75sLx26UzdpE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bcRK1ykUiB0PKGVIvjf0UTlamus.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vmwSCgBIkvJAKqmEPIByHqH4px0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zjlAlpz5HaUL9bZQGg4SYqH55Oo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/3AEGRu7g8U1dwvyvMQmpsQlzODD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hr', 'file_path': '/hPnKJDvliL2cOHFL8xPZ2BmcJ5a.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9wvNBOWpUpqAP4IquQWtNar77av.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1583, 'iso_639_1': 'en', 'file_path': '/eqFhruWEIRwjkvqgJN48VPuR50Q.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1055}, {'aspect_ratio': 0.667, 'height': 853, 'iso_639_1': None, 'file_path': '/geKOL5vnXoqTEH8D2qVoYGIkfys.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 569}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg', 'vote_average': 4.982, 'vote_count': 123, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ptpr0kGAckfQkJeJIt8st5dglvd.jpg', 'vote_average': 6.24, 'vote_count': 89, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/q2uyutja5fBQJ595oEAfticrcfU.jpg', 'vote_average': 5.88, 'vote_count': 124, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/e5H3wpl1t4EOzad9LpjJAhNPka4.jpg', 'vote_average': 5.79, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/boAUuJBeID7VNp4L7LNMQs8mfQS.jpg', 'vote_average': 5.586, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aqZ75oN6yd7UTShYIMNlpSdDbbH.jpg', 'vote_average': 5.568, 'vote_count': 70, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2y48XTa483LRFIb5fDKOwr8DHWz.jpg', 'vote_average': 5.5, 'vote_count': 68, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gC88YsrMe1sKCctzfnV955tcr6c.jpg', 'vote_average': 5.46, 'vote_count': 29, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/eHjIEiEKTnb9euehI7IbCxtGH5N.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/9AiHV08v8RyyuHcO5wuTaTXBxfe.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/4mHVnPcbOmycA5n3AKREsNho1tO.jpg', 'vote_average': 5.412, 'vote_count': 30, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1575, 'iso_639_1': 'zh', 'file_path': '/aGfEOxRPwp5lEeYfUU0cBpQ0k9K.jpg', 'vote_average': 5.412, 'vote_count': 30, 'width': 1050}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/55Mshyp5vXEyZYlGF9phGdR2gsG.jpg', 'vote_average': 5.398, 'vote_count': 14, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/a6v21Mgz2w6OQL7ezkQxGbGA92W.jpg', 'vote_average': 5.396, 'vote_count': 12, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/3yw39HIxi8bS3i0I75GygeOGVbL.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/ncKCQVXgk4BcQV6XbvesgZ2zLvZ.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/iAv3HAlrrIgjcf2yCFvedJzekXT.jpg', 'vote_average': 5.384, 'vote_count': 51, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/8OQzw8keE6sDNH25sOqPRTxhFTO.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/oPfQrmf2YgwSKKdaqDohtk0LciQ.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/c0DCmfC7Et2K3URnIJ4ahJpeXR2.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/rc2naqhwFHtl5xzut3KlUQKed9x.jpg', 'vote_average': 5.372, 'vote_count': 37, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aiFAq6HrEENrP2Hs9UCrjC9siVI.jpg', 'vote_average': 5.342, 'vote_count': 48, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1894, 'iso_639_1': 'es', 'file_path': '/8HCoPfguQ3u1QhiunBBJxHSy2K1.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 1263}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ar', 'file_path': '/fj4Sw2PihpjJkkeyhAWV5x933no.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2048, 'iso_639_1': 'tr', 'file_path': '/mmZi0tyPFfbcCqEsJIPxVldCPOL.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1364}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/oejIAXQupayIdy2H5FKXidNGj02.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'vi', 'file_path': '/ixLH2iM9at8BbuLr5wQWnCfwhJO.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ar', 'file_path': '/qsX1in0bR35lbtS0m9Sdaal02K4.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1284, 'iso_639_1': 'he', 'file_path': '/ywj717tJsdtMjD1iC4dCrSJAYTw.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 856}, {'aspect_ratio': 0.667, 'height': 1863, 'iso_639_1': 'ar', 'file_path': '/2AXxc5qrYsix01mD7uyy7PTMnQq.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1242}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/89fbqq5nnnzroLpD13T4TJ55Llf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2380, 'iso_639_1': 'cs', 'file_path': '/uwOo42nxRKeD5pyG2aREp0Dfu2a.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1587}, {'aspect_ratio': 0.667, 'height': 1941, 'iso_639_1': 'ar', 'file_path': '/95mVJrYVxxZX8y7IA9QJWw21Sxe.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1294}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'bg', 'file_path': '/ooOGz4YyBgp7EewnnpavQISCr25.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'kk', 'file_path': '/yyChRudT9X0C4234kvTSNsvXirf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2846, 'iso_639_1': 'ar', 'file_path': '/cEhBHpf1tyaYM4nMAd6PW9a3oZ3.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1896}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'el', 'file_path': '/efoCIdMmNgSdOlsNwovGxByjlOR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/3syYwwZbmk8xRhFKBYvbiY0B037.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/vkecMXHRfnQ2G3n3BBbRXlrsLbR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/joNffSkuJd4n4GlzDhmCJFwpDyC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/3sUflKm4wyhABAcgSxiB8zDJ3WJ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/5t05uhX5ULn8Um2f1ZuznVvIffU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/k1qmORaMZVfF5vQArYJD8PODapt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.708, 'height': 2542, 'iso_639_1': 'de', 'file_path': '/vrcpQICJZvIfhstaWhprHP2t1pJ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/fRtaxfyynWMJI6DhejyA6JOzVTB.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/jpD6z9fgNe7OqsHoDeAWQWoULde.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/8aL8aGfyKo3KsmLJXuuPZVCeQzB.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'pl', 'file_path': '/qefIXX7dwY8eKfMUcedn98HBMhb.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/dt9ODfEeCnHBZn0rRZMLwudeGAo.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/xtiPrwnOI7cMCXwWC32GQLiWRET.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/vTtUTK447f0OQWUYLEouDg8Yank.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/riSS1kglPxjrM4zxnMsCX6zDEqi.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/j4KO91h5R4jrXHu3yWw1xBnPmyG.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2976, 'iso_639_1': 'en', 'file_path': '/yg7B62JJbJrkBwiQrRf8vMDogLB.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1984}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/AvqMWPV1oyhlceU9Eq0LNRkSKe7.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1382}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'ko', 'file_path': '/kAYtsVpE7q6NhLz6vKYAxOM6LmN.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 947}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2j5oI4E5BRJkdU0UWaelNDo0iZZ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/649ruw8GkG4Ey5JDMXxJDLC6jfD.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bNoTicKwuf13iwqSmmGjjJAQac7.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/jvaI1gezzvhkKid00goKxz9fAso.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aEY57WJu84nUn0b9PknyVAPu3xX.jpg', 'vote_average': 5.248, 'vote_count': 82, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 3000, 'iso_639_1': None, 'file_path': '/47noGzgMSj01xFnpnVUhPeNMfb2.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1999}, {'aspect_ratio': 0.666, 'height': 2048, 'iso_639_1': 'tr', 'file_path': '/ga6K522LfGAlHoTaMbc0kESNn6O.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1364}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'ko', 'file_path': '/4ZLnVUfiCe3wX8Ut9eyujndpyvA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 947}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/ePpU7vi2awWZOzfiDGVRbdsKnde.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'fa', 'file_path': '/fjZv6ATsZxMGJDVC8KRATSnnoLH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1080}, {'aspect_ratio': 0.666, 'height': 1024, 'iso_639_1': 'ru', 'file_path': '/3ZsKFl9BX8bmOoGw2lVmVMHuqdh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 682}, {'aspect_ratio': 0.667, 'height': 2865, 'iso_639_1': 'ko', 'file_path': '/qxv1LPu17lzOZvOrhtQchU1foxy.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1910}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/aefB62fAcx2OxoaSWMEPt5ezvHQ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/wxcbunCEyKxbhuaTjZv91D4f0a5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/cZ7GfieJMbcDmb7HzXo32V8gBNT.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/PnXkWrMH4WHaqD3SjulfK9otmw.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/lrcuwcNiiZjoB68fzvSOPwu9JWv.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/dT00YQDn7wiH5OGO9DziqASAw4j.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/imYs1UAGvlXq0euT2Jee8PbmFWG.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/iCvn9DQkrD1gjizYR7UkOEO1QzQ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8ITnnLLlOB7XhZsj8WOhpICFX5i.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.679, 'height': 1236, 'iso_639_1': 'en', 'file_path': '/3iD4rpmdg82TajZ8fMvfykF7By0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 839}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'en', 'file_path': '/4tbvuLIzuEKfwsNFEhP3i3usCED.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/h2NqJnjixzVGaK0G8EVAtwO1Z8J.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/x2NrJAi1hqYnS5CSRtaqmldMfzW.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/8KBYRWm2EyHKli5quoIVDHCd6F8.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/9zwb8QIbAV2l8cSKHzFIAj1322A.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/7wYG2Rowz7TwOosomGBvuqLAfe5.jpg', 'vote_average': 5.186, 'vote_count': 20, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/5NyGSpXYgJ8ZG0At8URp4muckL0.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/9fZaYcdfuHLCWUYabdVzaZnLHFW.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/idq4eV7xRhEeI2JTOC2PmOjjhTk.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uXhV97FuB8OFt1pSEvIdf3Pnvgg.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ko', 'file_path': '/z3PjbQPksbnAwwzSfLnSph3ZJyA.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/barGT1G6ElVIdyFrOohQ0gtUp4F.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'es', 'file_path': '/lfPDe1GRL5sASJc3yf0YEPwiAmP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/j8zvODfD3ZKx1rizFN3Ai3kqX1O.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1350, 'iso_639_1': 'es', 'file_path': '/sCUySzcdrsHrGmvpkgsQ4bRMhvB.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1350, 'iso_639_1': 'es', 'file_path': '/5GbB0I4zSnc1HeLrErwSMcz31KP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 900}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'cs', 'file_path': '/xluNQVt0p3pXzLWLby0qH1NIeQu.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/jBthaXnKQzdpC2adZsN14KtFGdk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/xPtwGWt72dRDIRlpHgCMmriK1EG.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/umM0Bt8GOqpWhmVbdEY9fg0Op6K.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/5RfTJgNOA1UOysOHtVOXaJWvaCZ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/hjgOCeGIn56Y0syegaceC57k6gP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/25k4Bz7HaoLjOCnVZBz52IJDVQq.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.674, 'height': 1930, 'iso_639_1': 'fa', 'file_path': '/2UBFPLKt5YbYJMov4ToKAbX9dXQ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1300}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/vNcKXmUI4Hvn5VMvCpCWlnoQVz4.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/3bRQcScE7LhTrxAyETY4xHG76cb.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/pkxwlwcYfH1s66Ye2mO5ttOObOO.jpg', 'vote_average': 5.146, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.677, 'height': 2048, 'iso_639_1': 'zh', 'file_path': '/dvSCpCMcfBHqe5etXDDtFHe2Eld.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1387}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'zh', 'file_path': '/3PYDPnCq27g1juniyMvePYtfVSJ.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 947}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/wPYBGNV4KREkgZ4ELBZ2axd6NH6.jpg', 'vote_average': 5.114, 'vote_count': 41, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/eOOjas7U0O2QYvOh2vsN6krVWxX.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1999}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4qFBCufnzW1BubZjJoj1e5H4fhC.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/nu3oii71mRekR6beDNpiihd6GSL.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 799}, {'aspect_ratio': 0.666, 'height': 1178, 'iso_639_1': 'de', 'file_path': '/ePxV40QYOSZgrpBEZOmDtlQRR6g.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 785}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'de', 'file_path': '/9UYo2H6XTPUMpYiTxewsr4laxbz.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 640}, {'aspect_ratio': 0.75, 'height': 1350, 'iso_639_1': 'fr', 'file_path': '/3D9w3Vv1G1YxSdqwKnfiKDXuz1V.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 1012}, {'aspect_ratio': 0.666, 'height': 2560, 'iso_639_1': 'en', 'file_path': '/A5DGdsvMWIDgc75qXzDIX1ufLnh.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1706}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/mgjKNDzFINGvNFtHSqzfUZ4pk6Y.jpg', 'vote_average': 5.018, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ekfE5ChBWPGF5p3VWhrpKgLFYwa.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/t2GFUkjgEfynpmxqHf60cbIrj9Y.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gO6UfLfoOGnbmbrnbF3KMTNqfNC.jpg', 'vote_average': 5.006, 'vote_count': 17, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lTEyneX42noQDG8Cxc8DJvkUB6m.jpg', 'vote_average': 4.996, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/v6614PcDdocBAKYJMkfKaLSMVJA.jpg', 'vote_average': 4.992, 'vote_count': 24, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/3cKaEyoEUhxhnZG48dRG0iufPxs.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/4QCAm7J3nfjZygFQOuWace6ULPX.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7p4JCF9ptaE7Ptc9SLxTPv7QdfH.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/iJOJRVSdKGx3yYdbwfqCiAPHxfK.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2457, 'iso_639_1': 'zh', 'file_path': '/1eCxQQUEhMVS0nWOSD1SlVbGUWI.jpg', 'vote_average': 4.828, 'vote_count': 9, 'width': 1638}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/9Yg7DZE4ip2Yl0K2BUm6hAd8iRK.jpg', 'vote_average': 4.828, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.709, 'height': 2820, 'iso_639_1': 'uk', 'file_path': '/p81GFBwd9YaZnx6luJO5bJOqqHJ.jpg', 'vote_average': 4.81, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/wIAxpY365lKSlSXaM8BH7pB3y0M.jpg', 'vote_average': 4.6, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/mesnygQJfEJaWMA89rLk8VEZNj8.jpg', 'vote_average': 4.398, 'vote_count': 18, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/pyWvLGCaaI7N8U92BRLBNul2vuI.jpg', 'vote_average': 4.398, 'vote_count': 18, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/gF1XEP9gfE6og6s8MGvyFI4Muig.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/q7zrl3Kvu9E3t1ZCzm8w0lOaQW5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 2100, 'iso_639_1': 'th', 'file_path': '/xloEW5DQGqkR9i4EbJ0RXag3DIS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1399}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cn', 'file_path': '/or2wuvAbf2AG9MWylxPUisb85Ew.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'cs', 'file_path': '/uejpfeP1atdbdEea84cHFNKL24g.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 947}, {'aspect_ratio': 0.71, 'height': 1080, 'iso_639_1': 'cn', 'file_path': '/ObORCPqtaZgRhIvPnTTXGk5rAN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 767}, {'aspect_ratio': 0.666, 'height': 800, 'iso_639_1': 'th', 'file_path': '/ryW8AqLEt7viQZI40obvCVgKyEF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 533}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/guswIMwCLrDDrLfyiUBJJktmhBh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1351, 'iso_639_1': 'ar', 'file_path': '/y3I2XL5436scaaiQh5cfSXHEHnV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1587, 'iso_639_1': 'lt', 'file_path': '/tYFY9CkTy6yoaqTZTEu1IAtMBgT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1058}, {'aspect_ratio': 0.71, 'height': 1126, 'iso_639_1': 'cn', 'file_path': '/atkSaDwZEcINEaoL0JF25DDdcni.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aDIFDU7niNbIHUp5vdCsSxthpeW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1420, 'iso_639_1': 'ko', 'file_path': '/pb9giHGBgA4wbRREbbd8XL4XaN7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 947}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/akndvu1UcoMrEh4NQHXRLxGPTGg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/dW9C0FKB3HvwugUUtKXEXBFqcIL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2304, 'iso_639_1': 'en', 'file_path': '/t0uXoXeF9GMdviHgMW7UQzQ4eSG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1536}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/utCBEg4YNuZYaWSZaY13MXj1Z9G.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/m75xCRghGBAyXRKuiWbJvDPPGrS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2976, 'iso_639_1': 'en', 'file_path': '/eb6vkfY72J5gZhEnnRncsXSDftz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1984}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'nl', 'file_path': '/jtTHxuJhuZpFAnCI4vGjg1LGmpY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/qp595lmvI6UTWb1Gc8DD5SnLHnm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.739, 'height': 1623, 'iso_639_1': 'sk', 'file_path': '/gz0LUZClgzS6hCzurFk89e5G5d1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/aQxeSwWXB3NaRTiN1DRNHIxReAG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/1YX789imfZI5xaztsaqmtz6DVmX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/dRRjhIncQlg2Kak1oASyzGEtZ0t.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/kphZJTxd47ThurGYP01s67m8Dmt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1367, 'iso_639_1': 'en', 'file_path': '/6uq1c4QTytke0y2NWUsCpi0tISw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 911}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/bbYXxNaOAFtJjQnygqPKm13AC7a.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/hRJNOQBGkdU7K7DZTB9pGVYpfok.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.679, 'height': 1236, 'iso_639_1': 'en', 'file_path': '/j5GfnhEeBTl46SSc54CMDouRE7Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 839}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/kR32sxbb7wNK5pJLlwTido7RCAz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/x451yAdEA1OAnt5P2KVRgMoV5Ba.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 2702, 'iso_639_1': 'cn', 'file_path': '/cp7zu2Spi1hkkeI408Ebrhv4zc1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.701, 'height': 1152, 'iso_639_1': 'ru', 'file_path': '/lnxdR1XCdhV268bwOykdsRcUN1x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 808}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/hZcoR85iY5uDvzlSxAYTGvOLvV9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/mXOpcMOEruhz4BX3vXnIYe3rYDM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/udw0rc91ixvWneOwuEftXOfzF0x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cn', 'file_path': '/yef6p6pDg3YNk8I31wlQpotsaYa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/obAL7JCj46c7ogTt0PERbEYJlXn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/44ZIBFFkkVtBPtjdC2aPMH4YeYf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2842, 'iso_639_1': 'zh', 'file_path': '/5s3LUmU4G5ogVueGsWdbSTnMA0o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1895}, {'aspect_ratio': 0.675, 'height': 2963, 'iso_639_1': 'zh', 'file_path': '/6TgpVL16UT5ptzRrepVUaYjrg2Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/94UsD1QNU1f4tlkj8Ex3Jim4dj4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.707, 'height': 1527, 'iso_639_1': 'ja', 'file_path': '/1jLg9oKyMfQlcLtAUskZ5MDra5W.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/9cObSJoxDSVclz9OJzZiSUsYF4i.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1110, 'iso_639_1': None, 'file_path': '/iY1FDQM6taKwO7bG6YH09nE8NSs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 740}, {'aspect_ratio': 0.667, 'height': 2454, 'iso_639_1': None, 'file_path': '/7QjqXSW8pl2PCSaYSUHdO1qc0vh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1636}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/uL0iqPb4dtICVCCMKYem2yRPBRX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching movies\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for searching the movie \"Titanic\"\nparams = {\n    \"query\": \"Titanic\",\n    \"api_key\": \"0dbab590c7eaca07ebe625974a37ad92\"  # Replace with your actual API key\n}\n\n# Make a GET request to search for the movie \"Titanic\"\nresponse = requests.get(url_search_movie, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie id for \"Titanic\" from the search results\n    movie_id = response.json()['results'][0]['id']\n\n    # Define the API endpoint for getting keywords for a movie\n    url_movie_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n\n    # Make a GET request to get the keywords of the movie \"Titanic\"\n    response_keywords = requests.get(url_movie_keywords, headers=headers)\n\n    # Check if the request was successful\n    if response_keywords.status_code == 200:\n        # Extract the keywords associated with the movie \"Titanic\"\n        keywords = [keyword['name'] for keyword in response_keywords.json()['keywords']]\n        print(keywords)\n    else:\n        print(\"Failed to retrieve keywords for the movie Titanic.\")\nelse:\n    print(\"Failed to search for the movie Titanic.\")\n```",
        "usage": [
            314,
            9104,
            9418
        ],
        "executed": "['epic', 'ship', 'drowning', 'panic', 'shipwreck', 'evacuation', 'iceberg', 'titanic', 'forbidden love', 'ocean liner', 'based on true story', 'rich woman poor man', 'love', 'tragedy', 'tragic love', 'disaster', 'historical fiction', 'class differences', 'love affair', 'historical event', 'lifeboat', 'star crossed lovers', 'sinking ship', 'steerage', 'rich snob', 'disaster movie', '1910s', 'sunken ship']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "Give me a show that is currently on the air",
        "results": "```python\nimport requests\n\n# API url for getting shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Parameters\nparams = {\n    \"page\": 1 # Specify the first page\n}\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Extracting the name of the first show on the list\n    if \"results\" in data and len(data[\"results\"]) > 0:\n        show_name = data[\"results\"][0][\"name\"]\n        print(f\"A show currently on the air: {show_name}\")\n    else:\n        print(\"No shows currently on the air.\")\nelse:\n    print(\"Failed to fetch data from the API.\")\n```",
        "usage": [
            358,
            12401,
            12759
        ],
        "executed": "A show currently on the air: Sturm der Liebe\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Clint Eastwood\nclint_search_params = {\n    \"query\": \"Clint Eastwood\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\nclint_search_response = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=clint_search_params)\nclint_data = clint_search_response.json()\n\n# Getting Clint Eastwood's latest movie id\nclint_id = clint_data[\"results\"][0][\"id\"]\n\n# Get Clint Eastwood's movie credits\nmovie_credits_response = requests.get(f\"https://api.themoviedb.org/3/person/{clint_id}/movie_credits\", headers=headers)\nmovie_credits_data = movie_credits_response.json()\n\n# Find the latest movie and get release date\nlatest_movie = movie_credits_data[\"cast\"][0]\nlatest_movie_id = latest_movie[\"id\"]\n\n# Get the movie details\nmovie_details_response = requests.get(f\"https://api.themoviedb.org/3/movie/{latest_movie_id}\", headers=headers)\nmovie_details_data = movie_details_response.json()\n\n# Extract the release date of Clint Eastwood's latest movie\nrelease_date = movie_details_data[\"release_date\"]\n\nprint(f\"Clint Eastwood's latest movie is scheduled to be released on: {release_date}\")\n```",
        "usage": [
            460,
            8395,
            8855
        ],
        "executed": "Clint Eastwood's latest movie is scheduled to be released on: 1997-02-14\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "results": "```python\nimport requests\n\n# API URL to search for a movie\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Parameters for searching for the movie \"The Dark Knight\"\nparams = {\n    \"query\": \"The Dark Knight\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending a GET request to search for the movie\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting the movie reviews from the response\nif response.status_code == 200:\n    movie_results = response.json()[\"results\"]\n    for movie in movie_results:\n        movie_id = movie[\"id\"]\n        # API URL to get the reviews for a movie\n        review_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n        review_params = {\n            \"page\": 1\n        }\n        review_response = requests.get(review_url, headers=headers, params=review_params)\n        reviews = review_response.json()[\"results\"]\n        for review in reviews:\n            print(\"Author:\", review[\"author\"])\n            print(\"Content:\", review[\"content\"])\n            print(\"----------------------\")\nelse:\n    print(\"Failed to retrieve movie data.\")\n```",
        "usage": [
            427,
            9293,
            9720
        ],
        "executed": "Author: tricksy\nContent: Excellent movie. Best of the trilogy. Lovely music. Nolan is a genius. So is Heath Ledger.\n----------------------\nAuthor: talisencrw\nContent: This has no competition. It is the very finest comic-book character movie ever made. Knowing the Burton, Donner and Nolan filmic adaptations of Batman and Superman exist helps me to sleep at night. They are Exhibit A of 'How to Make a Comic-Book Movie'. Nothing else has ever come even remotely close. These seven films (I include 'Superman II' because it was mostly Donner's work)--and Nolan's trilogy especially--are what I imagine a great director like Kubrick, Hitchcock or Kurosawa would have come up with, if they had ever been asked to make a Superman or Batman movie. They are the easiest for an audience to identify with because in these the scripts most approximate human emotions and the typical conundrums of the human experience--in short, are the closest, in a good way, they come to the complexities of the human condition. Peerless.\n----------------------\nAuthor: erickprieto\nContent: Perhaps the best Batman movie of all times. I think that this Batman trilogy presents the well-known superhero history in an unexpected way with the capable to maintain on the edge of the chair all time.\r\n**Heath Ledger** present an excellent impersonification of a psychopath.\r\nAll support roles are magnificent.\r\nAnd Bruce Wayne role played by Christian Bale, shows a human being behind of the mask.\n----------------------\nAuthor: moubledian\nContent: I used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\r\n\r\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it's definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\r\n\r\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\r\n\r\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson's portrayal is true unpredictability. It's obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn't easy. How exactly does one take him down when he's woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\r\n\r\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\r\n\r\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can't represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we've seen just the prelude to the Dark Knight's upcoming legendary battles with the worst of Gotham City's dark underside.\r\n\r\n\"The Dark Knight\" gets a solid 10 of 10 stars.\r\n\r\nI used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\r\n\r\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it's definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\r\n\r\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\r\n\r\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson's portrayal is true unpredictability. It's obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn't easy. How exactly does one take him down when he's woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\r\n\r\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\r\n\r\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can't represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we've seen just the prelude to the Dark Knight's upcoming legendary battles with the worst of Gotham City's dark underside.\r\n\r\n\"The Dark Knight\" gets a solid 10 of 10 stars.\r\n\r\nI used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\r\n\r\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it's definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\r\n\r\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\r\n\r\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson's portrayal is true unpredictability. It's obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn't easy. How exactly does one take him down when he's woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\r\n\r\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\r\n\r\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can't represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we've seen just the prelude to the Dark Knight's upcoming legendary battles with the worst of Gotham City's dark underside.\r\n\r\n\"The Dark Knight\" gets a solid 10 of 10 stars.\n----------------------\nAuthor: tmdb22590444\nContent: One of the best movies of all time. Christopher Nolan has brought us the Batman trilogy that it made it feel it could happen today. Christian Bale returns as Batman, was able to perform as wonderfully as he did in Batman Begins. The one person that ultimately stole the show had to be the late Heath Ledger who played as the Joker. His performance as a psychotic clown terrorizing Gotham City was one of the best performance as a superhero villain. One of the best parts of the Joker was when he was telling his victims on how \u201che got his scars?\u201d. Another great part was when he kidnapped a police officer and he was recording it while scaring the man and also giving a warning to Batman. The supporting actor and actresses did a good job of delivering the story. I was disappointed that Katie Holmes did not return as Rachael Dawes but the actress how played as her Maggie Gyllenhaal did a really good job. One of the best parts of Christopher Nolan is that in every movie of his, the cinematography would look amazing and this movie is no exception.\n----------------------\nAuthor: tmdb79614358\nContent: A Masterpiece!!! I Love how The Dark Knight shows to me the \"Dark & Gritty Tone\". Overall, Nolan give us the Game changing, best superhero film OF ALL TIME. For me it's 10/10\n----------------------\nAuthor: EDSR\nContent: A sickening, borderline fascist film that is simultaneously dull and harmful. The editing represents that of an anti-pirate commercial and the politics are beyond reprehensible. The film ends with a monologue about how violent law-enforcement and brutality is what the country needs, but does not deserve. Nolan clearly did not intend for any subtext, yet that is not an excuse, if anything, that makes it worse. He includes these scenes to make the film more dark and edgy, yet there are people, from suppressed countries, who have to live through the hardships of violence from law-enforcers and dictatorship every day, and in his obliviousness, Nolan thinks that using this in a superhero film is a good excuse for self-importance. He is a war profiteer, and exploiter, and this is nothing short of disgusting.\n----------------------\nAuthor: AstroNoud\nContent: Unforgettable crime film with good dialogue, thrilling action and chase scenes and once again a magnificent cast (most notably a terrifically terrifying Ledger) and superb score.\r\n\r\n10/10\n----------------------\nAuthor: CinemaSerf\nContent: Heath Ledger is outstanding in this follow up to the 2006 \"Batman Begins\" outing for the caped crusader. His portrayal of the malevolent \"Joker' is confident and highly entertaining, treading a fine line between supreme intellect and total insanity with considerable aplomb. He comes back to terrorise \"Gotham\" after \"Batman\" (Christian Bale), \"Gordon\" (Gary Oldman) - now Commissioner in charge of the police force, and newly installed District Attorney \"Dent\" (Aaron Eckhart) had made progress getting the criminals off the street. The \"Joker\", meantime, decides that the best strategy is to rob the mob - and pitching them all against each other, and with the help of the duplicitous \"Lau\" (Chin Han) manages to secure enough of their funds to initiate a campaign of lawlessness that is ruthless, manipulative and good fun to watch. Not only has the man in black his new, potent, nemesis to deal with - but he also begins to realise that his childhood sweetheart \"Rachel\" (this time Maggie Gyllenhaal) is drifting into the arms of the new DA. it is also pretty clear that they are both now proving to be an useful additional weapon in the armoury of his enemy who knows, increasingly, which buttons to press to cause maximum anxiety among those who would bring him down. It's over 2\u00bd hours long, but really does fly by as the quickly paced action really does kick in right from the start. The story is dark and gritty but the pace isn't ponderous and moody - Ledger exudes a sense of peril throughout the whole thing, but that has an edge to it - a sophistication that plays well against the flawed superhero who is increasingly having to identify and cope with his own demons. Sir Michael Caine pops up now and again as his shrewd butler \"Alfred\", always striving to keep his boss on the right side of sanity, and Morgan Freeman continues to feature (sparingly) and his quartermaster. On that latter front, there are loads of new gadgets that still have that element of plausibility to them (no super-powers!). On balance I think I still preferred the first film, but as sequels go - this takes, and will take, some beating. On a big screen in a packed cinema, it's just a great experience.\n----------------------\nAuthor: The Movie Mob\nContent: **Overall : A cinematic marvel and once-in-a-decade masterpiece.**\r\n\r\nThis isn't simply a superhero movie or a Christopher Nolan film. The Dark Knight is a masterpiece. A perfect film. An epic scale with magnificent action pieces, oscar-winning performances, incredible writing, excellent pacing, dazzling special effects, and the list goes on and on, including the set design, costumes, and more. But, Christopher Nolan did more than make the greatest superhero movie of all time. He made one of the greatest movies of all time! All this is elevated further by Heath Ledger's once-in-a-lifetime portrayal of the Joker. Ledger was born for this role with a performance in league with Anthony Hopkins' Hannibal Lecter or Val Kilmer's Doc Holliday.\n----------------------\nAuthor: drystyx\nContent: Even worse than Tim Burton's Batman, although obviously copying the neo Nazi ideology of \"kill all the brunettes you can in a movie\".\r\nThis is so predictable and so poorly written that it boggles the mind. Yet there is a fan base of what can only be described as neo Nazis. I guess those fans were poor cuckolds who got jilted by too many brunettes at a young age, and they couldn't get over it.\r\nThat's about the entire story here. Oh, the Joker kills anything he sees. Whoopee. And he's invulnerable. And he's a demigod who can only be beaten by another demigod.\r\nSo, we've got traditional mundane Greek heroes and villains here, just like most Hollywood movies.\r\nUnfortunately, the fans of these traditional Hollywood movies are the loudest people on Earth, and the biggest control freaks. It's ridiculous to believe there are actually this big a percentage of fans for this kind of depressing Hollywood formula movie making, but if you look at Imdb's top 250, you see such movies make up over half of the top 250. Are they voted up because control freaks vote more than non control freaks? Or are they voted up because control freaks use many fake user names? Probably both, which explains why over half of the top 250 are nothing more than Greek traditional idolizations of control freaks.\r\nOh, and Batman turns totally gay, which would be okay if he'd admit it, but he's given the choice of saving a man from death or a hot woman from death, and he chooses to save the man. This isn't any real Batman. It's just another contrived story line for the Nolan Nazi merit badge. They are not even subtle. They bang you over the head with their worship of Adolf and Eva. \r\nGod help the world if this garbage still has a fan base fifty years from now. But it could happen. We may have drug addicts and meth heads around for even longer than that, praising the hate and feeding the hate. It would be nice if someone made a real Batman movie with a real story line involving some degree of motivation.\n----------------------\nAuthor: Andre Gonzales\nContent: I enjoyed watching the Dark Knight. They were at least able to keep the same batman from the the last one made too.\n----------------------\nAuthor: JN2012\nContent: If I can hold my pee for a whole two and a half hours rewatching a film I\u2019ve already seen then I love it.\n----------------------\nAuthor: Travis Bell\nContent: I felt like this was a tremendous end to Nolan's Batman trilogy. The Dark Knight Rises may very well have been the weakest of all 3 films but when you're talking about a scale of this magnitude, it still makes this one of the best movies I've seen in the past few years.\r\n\r\nI expected a little more _Batman_ than we got (especially with a runtime of 2:45) but while the story around the fall of Bruce Wayne and Gotham City was good I didn't find it amazing. This might be in fact, one of my only criticisms\u2014it was a long movie but still, maybe too short for the story I felt was really being told. I feel confident in saying this big of a story could have been split into two movies.\r\n\r\nThe acting, editing, pacing, soundtrack and overall theme were the same 'as-close-to-perfect' as ever with any of Christopher Nolan's other films. Man does this guy know how to make a movie!\r\n\r\nYou don't have to be a Batman fan to enjoy these movies and I hope any of you who feel this way re-consider. These 3 movies are without a doubt in my mind, the finest display of comic mythology ever told on the big screen. They are damn near perfect.\n----------------------\nAuthor: Chris\nContent: I personally thought this film is on par if not better than the Dark Knight.\r\n\r\nWhilst some think the film is too long for the story I didn't find this. The length of the film is longer than some (but doesn't feel it), I liked that the film took it's time rather than shoving more elements in it - I think this contributed to the dramatic ending (much like a classical piece of music will be relaxed and calm before the final crescendo).\r\n\r\nAt the end of the day whether you like this film will boil down to if you like films Christopher Nolan has directed and/or you like the Christopher Nolan Batman series so far.\r\n\r\nStupendously good film in my opinion.\n----------------------\nAuthor: GeekMasher\nContent: The Dark Knight Rises is one of the best movies to come out in 2012. The story compels you to watch it time and time again. It also has I of, I my opinion, the best bad guys in any movie, Bane! Batman was well played as all ways and the cast where well selected. I think this movie is the best batman to see the light of day or the darkest nights (pun intended).\n----------------------\nAuthor: Im_Infinity\nContent: No doubt that the movie is one of the best movies of this era.\r\nThe film doesn't lack in whatever it try to do.It has Simple narration with extraordinary Direction,Acting,Music,Cinematography and a lot of qualities.\r\nChristian Bale is supremely entertaining for sure.\r\nThe person behind the scenes is actually the real core creater of the film yes! The Director Christopher Nolan \u2764 .\r\nThe film ofcorse completes with philosophical quality loaded with Lots of Sacrifices.\r\nThis one is the one you surely can't afford to miss.\r\nGo watch The Dark Knight.Go now.\n----------------------\nAuthor: talisencrw\nContent: While it's clearly not as superlative as its famous predecessor, it's simply because of both Heath Ledger's outstanding and Oscar-winning performance, and the character of the Joker's etching in our collective unconscious as the greatest comic-book villain ever created (with Lex Luthor a very distant second place). This is still a masterwork, and is an excellent coda to the finest filmic trilogy ever made. As great as Christopher Nolan is as a director, and as fine a film as 'Interstellar' is, I really don't know if he'll ever be able to top his work here, on these three films. But I, for one, am certainly looking forward to finding out...\n----------------------\nAuthor: DoryDarko\nContent: So here we have it. The end of a trilogy, the end of an era of the universe of Batman through the eyes of Christopher Nolan. And baby, it goes out with a bang...\r\n\r\nGoing into the theatre tonight I actually wasn't sure what I was up for. I loved Batman Begins, but I didn't actually care that much for The Dark Knight. So the big question was, will TDKR actually be more like the first or the second film? The answer is: neither.\r\n\r\nThis third instalment of the Nolan-franchise carries its weight all on its own merits. Despite the lack of any kind of intro or opening credits, there actually is plenty of build-up (partly thanks to the insane opening scene). The foundation for a proper, action-packed story is laid down perfectly, explaining things just enough whilst keeping the viewer intrigued to find out more. But if you thought that Nolan couldn't surpass his previous work, you will be pleasantly deceived.\r\n\r\nChristian Bale as Batman is terrific. Never before was a superhero so human, so vulnerable. As his mask of intangibility and anonymity slowly starts to crumble, this is a man who questions his reasons to keep being who he is, and he must figure it out before it is too late. Because somebody\u2019s preparing to take him and Gotham down, and he might just be too strong for the Batman...\r\n\r\nThis somebody is a character called Bane. As a character, an actor and a performance it must be incredibly hard to follow Heath Ledger's The Joker, which was easily one of the greatest villains to ever appear on the silver screen. But tonight, Tom Hardy took a swing for the fence... and made it. His performance is thrilling and actually frightening, in the sense that you don't just *know* you're supposed to be afraid of this character, you actually FEEL it. He instils a feeling of horror and discomfort that is not rivalled by many other film villains. What I actually liked about his character the most is the fact that unlike Scarecrow, who grew into being a villain, and the Joker, who was just a raving maniac, Bane was actually (literally) born from evil. Born in hell, as it is said in the film. This is not a man, this is a creature. A living, breathing manifestation of evil that cannot be reasoned or negotiated with. Hardy's performance is masterful. Since his creepy mask is never removed, he, like only a few actors before him, must act without the use of any facial expressions, making his voice is main tool. His manner of speech (and the sound of it through his mask) is enough to send chills down your spine. This is more than just a another villain from a superhero flick, this is a character that just got torpedoed into the top 10 of the greatest antagonists in the history of film. Now I realise that's a bold statement to make, but you just go and watch TDKR and prove me wrong.\r\n\r\nI would say a slight downside to this film is the overflow of characters, both new and old. Aside from the already familiar characters, three new major ones are introduced. And there are also many characters running along in the margin which may seem not important enough to pay attention to, but actually they are so you need to stay focused.\r\n\r\nI understand the character of Joseph Gordon-Levitt, Blake, was written in specifically for him because Nolan wanted him in it. And although as a character he works just fine, it does feel like it was at the expense of Gary Oldman. As a cop, Levitt does everything that Oldman's character could've done, but he spends most of his screen time in the hospital, almost like they wanted to get him out of the way, and that's really too bad.\r\n\r\nNow, I was extremely excited to see what Nolan had done with Catwoman, because she is one of my favourite film characters. When I heard that she would be played by Anne Hathaway, I had my doubts. I thought she was just way too sweet to pull this off. But I must say, Ms Hathaway did a pretty good job. She is actually much more sly and devious than I thought she could be. The Nolan brothers, on the other hand, disappointed me here. Catwoman isn't really Catwoman, she's just a sexy girl in a spandex suit who can kick your ass. Her movements aren't even typically cat-like... So that was a bit of a letdown.\r\n\r\nI would also like to make a note on Michael Caine. I think his performance here was so much deeper and more character-driven than the other two films. In fact, there is one scene in particular, where he confesses something to Bruce, that almost moved me to tears. And this is actually TDKR\u2019s greatest strength; unlike the other two films, this one deals much more with actual human emotions, it gives us an insight into what actually drives these characters, both heroes and villains alike. \r\n\r\nAs much as I would love to, the word-limit restricts me from elaborating more on the characters, so I'll just move on to the technical stuff. And in that department, actually pretty much everything was perfect. The pacing was very well balanced, and during those 2 \u00bd hours I didn't get bored once. Great action scenes alternate with more quiet moments, and the special effects are absolutely awesome. Hans Zimmer once again delivered a terrific score and there was some high quality dialogue. Also in store: a couple of great plot twists and two very cool cameos... There are a few plot holes, but everything else easily makes up for it. \r\n\r\nI highly recommend The Dark Knight Rises. It is a worthy conclusion to the trilogy, and it far exceeded my expectations.\r\n_(July 2012)_\n----------------------\nAuthor: Per Gunnar Jonsson\nContent: Batman was one of my childhood heroes from the Comic magazines even though the Swedish plonkers, in their infinite stupidity, had renamed him to something as ridiculous \u201cL\u00e4derlappen\u201d which basically translates into \u201cpatch of leather\u201d.\r\n\r\nThus, when Christopher Nolan brought us Batman Begins and steered away from the ridiculous comic shows that the previous batman movies (except the first one) had turned into I was thrilled. Unfortunately I was equally disappointed with this one.\r\n\r\nI think the title of the movie is quite misleading since Batman isn\u2019t exactly rising at all but rather sinking. If this would have been a movie about some other \u201cguy\u201d it would probably have been excellent but it isn\u2019t. It\u2019s about Batman and as such I had expected him to be the hero going around beating up the bad guys.\r\n\r\nInstead the movie starts downright boring with Batman having dug himself down into a swamp of melancholy and closed himself off from the world. When he finally starts to appear again he gets pretty much beaten at every turn not to mention conned out of the Wayne fortune. What the f\u2026 is that? It isn\u2019t until the end that he starts to be the real Batman and even then it\u2019s not very exciting.\r\n\r\nActually Batman, as in Batman and not Wayne, is not really in the movie for a good chunk of the time and the real hero in this movie is really the young cop and he sure isn\u2019t a particularly good substitute for the superhero Batman that I was expecting to watch.\r\n\r\nI was struggling with what to give this movie but in the end, since I probably would have thought it to be a good movie if it had not been labelled as a Batman movie, I gave it 5 out 10 stars. At least the special effects where quite okay.\n----------------------\nAuthor: Reviewsforlife\nContent: \"And when it is done, and Gotham is in ashes, then you have my permission to die.\" - Bane, the Dark Knight Rises.\r\n\r\nAn epic, amazing end to the Dark Knight trilogy, with great acting, numerous complex subplots, a creepy villain, amazing action scenes and a heart-thumping score. I really love this film and consider it one of Nolan's better works, and I wish more people on the Internet would start giving it more respect.\r\n\r\nOh, also, I really don't care about the small plot holes like the magic mechanical leg and Bruce appearing in Gotham when he was at the desert shortly before - do you really want to see ten minutes of Bruce using plastic surgery to fix his bone, or him in a airport going to Gotham?\n----------------------\nAuthor: AstroNoud\nContent: Even though the plot feels messier than the previous two installments, one cannot resist a smile after the unexpected twist and final scenes, which make \u2018The Dark Knight Rises\u2019 a worthy final chapter of Nolan's epical trilogy.\r\n\r\n9/10\n----------------------\nAuthor: CinemaSerf\nContent: Tom Hardy is superb in this denouement to Christopher Nolan's \"Batman\" trilogy. His depiction of the clever and malevolent \"Bane\" is intricate and terrifying in equal measure. Christian Bale also has the role very much under control now as he joins forces with his old pal \"Gordon\" (Gary Oldman) and jewel thief turned \"Catwoman\" (Anne Hathaway) to rise to his biggest challenge yet... What's great about this film is that is ties up all of the loose ends from the first two; it dots some i's and crosses the t's as the story neatly, and frequently quite subtly, introduces new threads to an old suit of clothes. This is an hugely characterful outing for all concerned - especially Sir Michael Caine as the wonderfully underplayed \"Alfred\" and Morgan Freeman as the arch-inventor \"Fox\". The plot takes it's time to develop, there is plenty of to-ing and fro-ing as they battle for the upper hand; new allies must learn to trust and to rely on each other. I found myself drawn to the \"Bane\" cause more than I ought to admit - a sign of a great baddie; you empathise with the evil (I think of \"Darth Vader\") especially once the story unveils traits in his character and elements of his history that, to a certain extent, justify his behaviour. The dialogue is sparing and potent and photography is really effective: the light and shade are used creatively with the Hans Zimmer score an huge improvement on his last outing. This is certainly one for a big screen - there is loads to see each time you watch, and though \"Batman\" was never my favourite super-hero, this has to be up there as one of the darkest and best super-hero films.\n----------------------\nAuthor: Andre Gonzales\nContent: I enjoyed watching the Dark Knight. They were at least able to keep the same batman from the the last one made too.\n----------------------\nAuthor: Gimly\nContent: The only area in which _The Dark Knight Returns, Part 2_ suffers, is foretold in the title: This is just part two. You watch those two parts combined back to back? You've got the best superhero movie ever made.\r\n\r\n_Final rating:\u2605\u2605\u2605\u2605\u00bd - Ridiculously strong appeal. I can\u2019t stop thinking about it._\n----------------------\nAuthor: Gimly\nContent: The only area in which _The Dark Knight Returns, Part 1_ suffers, is foretold in the title: This is just part one. You watch those two parts combined back to back? You've got the best superhero movie ever made.\r\n\r\n_Final rating:\u2605\u2605\u2605\u2605\u00bd - Ridiculously strong appeal. I can\u2019t stop thinking about it._\n----------------------\nAuthor: Gimly\nContent: This blending of _Batman: The Dark Knight Part 1_ and _Part 2_, released as a single cohesive whole under the subtitle _(Deluxe Edition)_, is, quite simply, the best superhero movie ever put to screen. A testament to what can be done by basically translating your source material shot-for-shot. It can't always work, but here? Boy does it ever.\r\n\r\n_Final rating:\u2605\u2605\u2605\u2605\u00bd - Ridiculously strong appeal. I can\u2019t stop thinking about it._\n----------------------\nAuthor: Kobayoyee\nContent: The Sonic 3 & Knuckles of Batman films.\n----------------------\nAuthor: stevzhe\nContent: KIBA: Ankoku Kishi Gaiden is a spin-off V-Cinema of the GARO television series, set for release on Blu-ray and DVD on September 7, 2011. A limited theatrical release will take place on September 3, 2011, in Tokyo's Ikebukuro district and on September 4, 2011, in Osaka's Umeda district at Cine Libre theaters.\r\n\r\nActor and musician Masaki Kyomoto reprises his role as psychologist and counselor Karune Ryuzaki, the disguise for villainous Makai Knight Barago who is later taken over by the Dark Makai Knight Kiba, from the original GARO television series in a film revealing the character's history as well as the character's actions during the television series prior to his final battle. Mika Hijii also reprises her role as Kaoru Mitsuki, the female lead of GARO and one of Ryuzaki's patients who Barago intends to use to revive the Horror Messiah. Singer Leah Dizon joins the cast of Kiba Gaiden as the mysterious woman known as Makai Guide Elda who directs Barago towards his goal.\n----------------------\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for movies similar to a movie\nurl_search_similar_movies = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the API endpoint to get the movie credits for a person\nurl_person_movie_credits = \"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n# Define the API endpoint to get the movie details\nurl_movie_details = \"https://api.themoviedb.org/3/movie/{movie_id}\"\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the movies by a specific director\ndef get_movies_by_director(director_name):\n    # Initialize list to store movie IDs directed by the given director\n    director_movie_ids = []\n    \n    # Search for the person ID of the director\n    params_person_search = {\"query\": director_name}\n    response_person_search = requests.get(url=\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params_person_search)\n    person_search_results = response_person_search.json()\n    \n    if person_search_results[\"results\"]:\n        person_id = person_search_results[\"results\"][0][\"id\"]\n        \n        # Get the movie credits for the director\n        url_person_movie_credits_updated = url_person_movie_credits.format(person_id=person_id)\n        response_person_movie_credits = requests.get(url=url_person_movie_credits_updated, headers=headers)\n        movie_credits = response_person_movie_credits.json()\n        \n        for movie in movie_credits[\"cast\"]:\n            director_movie_ids.append(movie[\"id\"])\n        \n    return director_movie_ids\n\n# Function to get similar movies based on a given movie\ndef get_similar_movies(movie_id):\n    # Get the movie details\n    url_movie_details_updated = url_movie_details.format(movie_id=movie_id)\n    response_movie_details = requests.get(url=url_movie_details_updated, headers=headers)\n    movie_details = response_movie_details.json()\n    \n    # Get the list of genres associated with the movie\n    genre_ids = movie_details[\"genres\"]\n    \n    # Search for movies with similar genres\n    params_search_similar_movies = {\"page\": 1, \"with_genres\": \",\".join(str(genre[\"id\"]) for genre in genre_ids)}\n    response_search_similar_movies = requests.get(url=url_search_similar_movies, headers=headers, params=params_search_similar_movies)\n    similar_movies = response_search_similar_movies.json()\n    \n    return similar_movies\n\n# Get the director's name\ndirector_name = \"Francis Ford Coppola\"\n# Get movies directed by Francis Ford Coppola\ndirector_movie_ids = get_movies_by_director(director_name)\n\n# Get similar movies for one of the movies directed by Francis Ford Coppola\nif director_movie_ids:\n    similar_movies = get_similar_movies(director_movie_ids[0])\n    print(similar_movies)\nelse:\n    print(\"Director not found or no movies directed by the given director\")\n```",
        "usage": [
            785,
            8476,
            9261
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "results": "```python\nimport requests\n\n# Set the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/latest\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers)\n\n# Check if the response status code is successful\nif response.status_code == 200:\n    # Extract the lead actor from the response\n    movie_data = response.json()\n    lead_actor = movie_data['cast'][0]['name']\n    print(f\"The lead actor in the latest released movie is: {lead_actor}\")\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            293,
            10387,
            10680
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Define the parameters\nparams = {\n    \"page\": 1  # Assuming we want to get the first page of results\n}\n\n# Define the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the image path of the first movie in the results\n    data = response.json()\n    if data['results']:\n        poster_path = data['results'][0]['poster_path']\n        if poster_path:\n            print(f\"Image path of the first movie currently showing in theaters: {poster_path}\")\n        else:\n            print(\"No image found for the first movie currently showing in theaters\")\n    else:\n        print(\"No movies currently showing in theaters\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            383,
            11281,
            11664
        ],
        "executed": "Image path of the first movie currently showing in theaters: /hu40Uxp9WtpL34jv3zyWLb5zEVY.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API to get a list of the current popular movies\nurl_popular = \"https://api.themoviedb.org/3/movie/popular\"\nparams_popular = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\nresponse_popular = requests.get(url_popular, headers=headers, params=params_popular)\ndata_popular = response_popular.json()\n\n# Get the most popular movie\nmost_popular_movie = data_popular['results'][0]\n\n# Extract movie id\nmovie_id = most_popular_movie['id']\n\n# API to get the keywords for the most popular movie\nurl_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n\nresponse_keywords = requests.get(url_keywords, headers=headers)\ndata_keywords = response_keywords.json()\n\n# Extract the keywords\nkeywords = data_keywords['keywords']\n\nprint(\"Most Popular Movie Right Now:\")\nprint(f\"Title: {most_popular_movie['title']}\")\nprint(\"Keywords:\")\nfor keyword in keywords:\n    print(f\"- {keyword['name']}\")\n```",
        "usage": [
            398,
            10458,
            10856
        ],
        "executed": "Most Popular Movie Right Now:\nTitle: No Way Up\nKeywords:\n- ocean\n- bodyguard\n- rescue mission\n- childhood trauma\n- shark\n- airplane trip\n- sharks\n- air crash\n- survivor\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "results": "```python\nimport requests\n\n# API url to get a list of popular movies\nurl_popular_movies = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1,  # for the first page\n    \"region\": \"US\"  # filtering by release region (example: US)\n}\n\n# Sending a GET request to get the list of popular movies\nresponse_popular_movies = requests.get(url_popular_movies, headers=headers, params=params)\n\n# Check if the request was successful\nif response_popular_movies.status_code == 200:\n    # Get the movie id of the most popular movie from the response\n    movie_id = response_popular_movies.json()[\"results\"][0][\"id\"]\n\n    # API url to get the keywords of a movie\n    url_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n\n    # Sending a GET request to get the keywords of the most popular movie\n    response_keywords = requests.get(url_keywords, headers=headers)\n\n    # Check if the request was successful\n    if response_keywords.status_code == 200:\n        # Extracting the keywords from the response\n        keywords = [keyword[\"name\"] for keyword in response_keywords.json()[\"keywords\"]]\n        print(keywords)\n    else:\n        print(\"Error in getting keywords.\")\nelse:\n    print(\"Error in getting popular movies.\")\n```",
        "usage": [
            298,
            9487,
            9785
        ],
        "executed": "['ocean', 'bodyguard', 'rescue mission', 'childhood trauma', 'shark', 'airplane trip', 'sharks', 'air crash', 'survivor']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "results": "```python\nimport requests\n\n# Define the headers with the API token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\"\n}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie ID of \"Titanic\"\nmovie_id = data['results'][0]['id']\n\n# Get the credits for the movie \"Titanic\"\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits_data = response.json()\n\n# Get the list of cast members who starred in the movie \"Titanic\"\ncast_list = []\nfor cast in credits_data['cast']:\n    cast_list.append(cast['name'])\n\nprint(cast_list)\n```",
        "usage": [
            356,
            10024,
            10380
        ],
        "executed": "['Leonardo DiCaprio', 'Kate Winslet', 'Billy Zane', 'Kathy Bates', 'Frances Fisher', 'Gloria Stuart', 'Victor Garber', 'Bill Paxton', 'Bernard Hill', 'David Warner', 'Jonathan Hyde', 'Lewis Abernathy', 'Suzy Amis', 'Nicholas Cascone', 'Danny Nucci', 'Jason Barry', 'Lew Palter', 'Eric Braeden', 'Ewan Stewart', 'Bernard Fox', 'Ioan Gruffudd', 'Jonny Phillips', 'Edward Fletcher', 'Scott G. Anderson', 'Martin East', 'Gregory Cooke', 'Alexandrea Owens', 'Seth Adkins', 'Michael Ensign', 'Anatoly M. Sagalevitch', 'Martin Hub', 'Mark Lindsay Chapman', 'Richard Graham', 'Paul Brightwell', 'Craig Kelly', 'Ron Donachie', 'Charlotte Chatton', 'Fannie Brett', 'Jenette Goldstein', 'Camilla Overbye Roos', 'Linda Kerns', 'Amy Gaipa', 'Martin Jarvis', 'Rosalind Ayres', 'Rochelle Rose', 'Jonathan Evans-Jones', 'Rocky Taylor', 'Liam Tuohy', 'Simon Crane', 'James Lancaster', 'Elsa Raven', 'Reece P. Thompson III', 'Laramie Landis', 'Mark Rafael Truitt', 'John Walcutt', 'Terry Forrestal', 'Derek Lea', 'Richard Ashton', 'Sean Nepita', 'Brendan Connolly', 'David Cronnelly', 'Garth Wilton', 'Richard Fox', 'Nick Meaney', 'Kevin Owers', 'Mark Capri', 'Marc Cass', 'Paul Herbert', 'Emmett James', 'Chris Byrne', 'Oliver Page', 'James Garrett', 'Erik Holland', 'Jari Kinnunen', 'Anders Falk', 'Barry Dennen', 'Vern Urich', 'Rebecca Klingler', \"Tricia O'Neil\", 'Kathleen S. Dunn', 'Romeo Francis', 'Mandana Marino', 'Van Ling', 'Bj\u00f8rn Olsen', 'Dan Pettersson', 'Shay Duffin', 'Greg Ellis', 'Diana Morgan', 'Kris Andersson', 'Bobbie Bates', 'Aaron James Cash', 'Anne Fletcher', 'Edmond Alan Forsyth', 'Andie Hicks', 'Scott Hislop', 'Stan Mazin', 'Lisa Ratzin', 'Julene Renee', 'Brian Walsh', 'Alexandra Boyd', 'James Cameron', 'Mike Butters', 'Bruno Campolo', 'Kevin De La Noy', 'Tony Kenny', 'Sean Lawlor', 'Don Lynch', 'Johnny Martin', 'Ryan McClurkin', 'Meghan McLeod', \"Mike O'Neal\", 'Phil Parlapiano', 'Steven Quale', 'R. Gern Trowbridge', 'Olivia Rosewood', 'John Slade', 'Brian McDermott', 'Bret Aaron Knower']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/company/4\"\n\n# Define the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers)\n\n# Parse the JSON response\ncompany_details = response.json()\n\n# Extract the logo path\nlogo_path = company_details[\"logo_path\"]\n\nprint(f\"The logo path for Paramount Pictures is: {logo_path}\")\n```\nThis code makes a GET request to the TMDB API to get the company details for Paramount Pictures (company_id=4) and then extracts and prints the logo's file path.",
        "usage": [
            298,
            7961,
            8259
        ],
        "executed": "The logo path for Paramount Pictures is: /gz66EfNoYPqHTYI4q9UEN4CbHRc.png\n",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "results": "```python\nimport requests\n\n# Define the API url to search for companies\nurl = \"https://api.themoviedb.org/3/search/company\"\n\n# Define the query parameters to search for the company \"Universal Pictures\"\nparams = {\n    \"query\": \"Universal Pictures\",\n    \"page\": 1\n}\n\n# Make a GET request to search for the company \"Universal Pictures\"\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        universal_company_id = data[\"results\"][0][\"id\"]\n        \n        # Define the API url to get the company details by id\n        company_details_url = f\"https://api.themoviedb.org/3/company/{universal_company_id}\"\n        \n        # Make a GET request to get the company details for \"Universal Pictures\"\n        company_response = requests.get(company_details_url, headers=headers)\n\n        # Check if the request for company details was successful\n        if company_response.status_code == 200:\n            company_data = company_response.json()\n            headquarters = company_data[\"headquarters\"]\n            print(f\"Universal Pictures was founded in: {headquarters}\")\n        else:\n            print(\"Failed to retrieve company details\")\n    else:\n        print(\"Company 'Universal Pictures' not found\")\nelse:\n    print(\"Failed to search for companies\")\n```",
        "usage": [
            297,
            8534,
            8831
        ],
        "executed": "Universal Pictures was founded in: Universal City, California\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nurl_search = \"https://api.themoviedb.org/3/search/movie\"\nparams_search = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nresponse_search = requests.get(url_search, headers=headers, params=params_search)\ndata_search = response_search.json()\n\n# Get the movie id of \"Titanic\"\nmovie_id = data_search[\"results\"][0][\"id\"]\n\n# Get the release dates for the movie \"Titanic\"\nurl_release_dates = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\nresponse_release_dates = requests.get(url_release_dates, headers=headers)\ndata_release_dates = response_release_dates.json()\n\n# Extract the release dates information\nfor result in data_release_dates[\"results\"]:\n    if result[\"iso_3166_1\"] == \"US\":  # Assuming release date for movie \"Titanic\" in US\n        release_date = result[\"release_dates\"][0][\"release_date\"]\n        print(f'The movie \"Titanic\" was released on: {release_date}')\n        break\n```",
        "usage": [
            421,
            9080,
            9501
        ],
        "executed": "The movie \"Titanic\" was released on: 1997-12-14T00:00:00.000Z\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for the Star Wars collection\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the required parameters to search for the Star Wars collection\nparams_search_collection = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\n\n# Make the request to search for the Star Wars collection\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\n\n# Check if the request was successful\nif response_search_collection.status_code == 200:\n    # Get the collection ID of the first Star Wars collection\n    star_wars_collection_id = response_search_collection.json()['results'][0]['id']\n    \n    # Define the API endpoint to get details of the Star Wars collection by ID\n    url_collection_details = f\"https://api.themoviedb.org/3/collection/{star_wars_collection_id}\"\n    \n    # Make the request to get details of the Star Wars collection\n    response_collection_details = requests.get(url_collection_details, headers=headers)\n    \n    # Check if the request was successful\n    if response_collection_details.status_code == 200:\n        # Get the first movie ID in the Star Wars collection\n        first_movie_id = response_collection_details.json()['parts'][0]['id']\n        \n        # Define the API endpoint to get credits (cast and crew) for the first movie of Star Wars\n        url_movie_credits = f\"https://api.themoviedb.org/3/movie/{first_movie_id}/credits\"\n        \n        # Make the request to get credits for the first movie of Star Wars\n        response_movie_credits = requests.get(url_movie_credits, headers=headers)\n        \n        # Check if the request was successful\n        if response_movie_credits.status_code == 200:\n            # Get the cast details of the first movie of Star Wars\n            cast = response_movie_credits.json()['cast']\n            \n            # Extract the names of the actors who starred in the movie\n            actors = [actor['name'] for actor in cast]\n            \n            # Print the list of actors who starred in the first movie of Star Wars collection\n            print(\"Actors who starred in the first movie of Star Wars collection:\")\n            for actor in actors:\n                print(actor)\n        else:\n            print(\"Failed to retrieve credits for the first movie of Star Wars collection\")\n    else:\n        print(\"Failed to retrieve details of the Star Wars collection\")\nelse:\n    print(\"Failed to search for the Star Wars collection\")\n```",
        "usage": [
            527,
            7312,
            7839
        ],
        "executed": "Actors who starred in the first movie of Star Wars collection:\nMark Hamill\nHarrison Ford\nCarrie Fisher\nPeter Cushing\nAlec Guinness\nAnthony Daniels\nKenny Baker\nPeter Mayhew\nDavid Prowse\nJames Earl Jones\nPhil Brown\nShelagh Fraser\nJack Purvis\nAlex McCrindle\nEddie Byrne\nDrewe Henley\nDenis Lawson\nGarrick Hagon\nJack Klaff\nWilliam Hootkins\nAngus MacInnes\nJeremy Sinden\nGraham Ashley\nDon Henderson\nRichard LeParmentier\nLeslie Schofield\nMichael Leader\nDavid Ankrum\nScott Beach\nLightning Bear\nJon Berg\nDoug Beswick\nPaul Blake\nJanice Burchette\nTed Burnett\nJohn Chapman\nGilda Cohen\nTim Condren\nBarry Copping\nAlfie Curtis\nRobert Davies\nMaria De Aragon\nRobert A. Denham\nFrazer Diamond\nPeter Diamond\nWarwick Diamond\nSadie Eden\nKim Falkinburg\nHarry Fielder\nTed Gagliano\nSalo Gardner\nSteve Gawley\nBarry Gnome\nRusty Goffe\nIsaac Grand\nReg Harding\nAlan Harris\nFrank Henson\nArthur Howell\nTommy Ilsley\nJoe Johnston\nAnnette Jones\nLinda Jones\nJoe Kaye\nColin Michael Kitchens\nMelissa Kurtz\nTiffany Hillkurtz\nAl Lampert\nAnthony Lang\nLaine Liska\nDerek Lyons\nMahjoub\nAlf Mangan\nGrant McCune\nGeoffrey Moon\nMandy Morton\nLorne Peterson\nMarcus Powell\nShane Rimmer\nPam Rose\nGeorge Roubicek\nErica Simmons\nAngela Staines\nGeorge Stock\nRoy Straite\nPeter Sturgeon\nPeter Sumner\nJohn Sylla\nTom Sylla\nMalcolm Tierney\nPhil Tippett\nBurnell Tucker\nMorgan Upton\nJerry Walter\nHal Wamsley\nDiana Sadley Way\nBill Weston\nFred Wood\nColin Higgins\nRon Tarr\nAnthony Forrest\nFrances Alfred Basil Tomlin\nLarry Ward\nJohn Cannon\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections with the query \"Harry Potter\"\nsearch_collection_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Harry Potter\"\n}\nresponse = requests.get(search_collection_url, headers=headers, params=params)\ncollection_data = response.json()\n\n# Get the collection id of Harry Potter\ncollection_id = collection_data['results'][0]['id']\n\n# Get the images for the collection with the specified id\ncollection_images_url = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\nresponse = requests.get(collection_images_url, headers=headers)\ncollection_images_data = response.json()\n\n# Extract the poster_path of the first image in the collection\nposter_url = f\"https://image.tmdb.org/t/p/w500{collection_images_data['posters'][0]['file_path']}\"\nprint(poster_url)\n```",
        "usage": [
            368,
            9514,
            9882
        ],
        "executed": "https://image.tmdb.org/t/p/w500/eVPs2Y0LyvTLZn6AP5Z6O2rtiGB.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/collection/10\"\n\n# Set the parameters\nparams = {\"api_key\": \"YOUR_API_KEY\"}  # Replace YOUR_API_KEY with your actual API key\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the keywords from the API response\n    keywords = response.json()[\"keywords\"]\n    keyword_names = [keyword[\"name\"] for keyword in keywords]\n    print(keyword_names)\nelse:\n    print(\"Failed to retrieve keywords\")\n```",
        "usage": [
            314,
            10164,
            10478
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "results": "```python\nimport requests\n\n# Set the API key and headers\napi_key = \"0dbab590c7eaca07ebel26974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the collection id of \"The Hobbit\"\ncollection_query = \"The Hobbit\"\ncollection_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": collection_query\n}\n\nresponse = requests.get(collection_url, headers=headers, params=params)\ncollection_data = response.json()\n\n# Get the collection id for \"The Hobbit\"\ncollection_id = collection_data['results'][0]['id']\n\n# Get the movies in the collection\nmovies_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse = requests.get(movies_url, headers=headers)\nmovies_data = response.json()\n\n# Extract the release dates of the movies in the collection\nrelease_dates = []\nfor movie in movies_data['parts']:\n    release_dates.append(movie['release_date'])\n\nprint(release_dates)\n```",
        "usage": [
            228,
            9880,
            10108
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "results": "```python\nimport requests\n\n# Define the API url to search for collections\nurl = \"https://api.themoviedb.org/3/search/collection\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Define the search query for The Fast and the Furious collection\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\n\n# Make a GET request to search for collections\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the movie list from the response\n    data = response.json()\n    movie_list = data['results']\n\n    # Print the list of movies from The Fast and the Furious collection\n    for movie in movie_list:\n        print(movie['name'])\nelse:\n    print(\"Error fetching data\")\n```",
        "usage": [
            330,
            9058,
            9388
        ],
        "executed": "The Fast and the Furious Collection\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "results": "```python\nimport requests\n\n# Define the API URL for searching collections\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Parameters for searching The Fast and the Furious collection\nparams_collection = {\n    \"query\": \"The Fast and the Furious\",\n    \"page\": 1\n}\n\n# Make a GET request to search for the collection\nresponse_collection = requests.get(url_search_collection, headers=headers, params=params_collection)\n\n# Retrieve the collection id from the search results\ncollection_id = response_collection.json()[\"results\"][0][\"id\"]\n\n# Define the API URL for getting movie reviews\nurl_movie_reviews = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n# Make a GET request to get details of The Fast and the Furious collection\nresponse_movie_reviews = requests.get(url_movie_reviews, headers=headers)\n\n# Output the reviews of the movies in The Fast and the Furious collection\nprint(response_movie_reviews.json())\n```",
        "usage": [
            202,
            8853,
            9055
        ],
        "executed": "{'id': 9485, 'name': 'The Fast and the Furious Collection', 'overview': 'An action film series centered on illegal street racing and heists.', 'poster_path': '/rKKSOVv6iU3nULrKQmd9uEx9gez.jpg', 'backdrop_path': '/56h4DCt0ogIRI7B71xD5iA5hES1.jpg', 'parts': [{'adult': False, 'backdrop_path': '/xWf5Mjtv2HfIB9FyPYbbaSDdfCW.jpg', 'id': 584, 'title': '2 Fast 2 Furious', 'original_language': 'en', 'original_title': '2 Fast 2 Furious', 'overview': 'It\\'s a major double-cross when former police officer Brian O\\'Conner teams up with his ex-con buddy Roman Pearce to transport a shipment of \"dirty\" money for shady Miami-based import-export dealer Carter Verone. But the guys are actually working with undercover agent Monica Fuentes to bring Verone down.', 'poster_path': '/6nDZExrDKIXvSAghsFKVFRVJuSf.jpg', 'media_type': 'movie', 'genre_ids': [28, 80, 53], 'popularity': 8.734, 'release_date': '2003-06-05', 'video': False, 'vote_average': 6.498, 'vote_count': 7065}, {'adult': False, 'backdrop_path': '/dMARcKLrv0T7kVJ4iQR3vqTTdtT.jpg', 'id': 9615, 'title': 'The Fast and the Furious: Tokyo Drift', 'original_language': 'en', 'original_title': 'The Fast and the Furious: Tokyo Drift', 'overview': 'In order to avoid a jail sentence, Sean Boswell heads to Tokyo to live with his military father. In a low-rent section of the city, Shaun gets caught up in the underground world of drift racing', 'poster_path': '/wTLaII3WAkQcsyiF4sI6PlXZ0dF.jpg', 'media_type': 'movie', 'genre_ids': [28, 80, 18, 53], 'popularity': 13.14, 'release_date': '2006-06-03', 'video': False, 'vote_average': 6.473, 'vote_count': 6472}, {'adult': False, 'backdrop_path': '/jY9ef5nqY4xIIMu3yzW3qamUCoi.jpg', 'id': 9799, 'title': 'The Fast and the Furious', 'original_language': 'en', 'original_title': 'The Fast and the Furious', 'overview': \"Dominic Toretto is a Los Angeles street racer suspected of masterminding a series of big-rig hijackings. When undercover cop Brian O'Conner infiltrates Toretto's iconoclastic crew, he falls for Toretto's sister and must choose a side: the gang or the LAPD.\", 'poster_path': '/gqY0ITBgT7A82poL9jv851qdnIb.jpg', 'media_type': 'movie', 'genre_ids': [28, 80, 53], 'popularity': 6.808, 'release_date': '2001-06-22', 'video': False, 'vote_average': 6.975, 'vote_count': 9524}, {'adult': False, 'backdrop_path': '/lvSxooYCRuF3S2kHWXYTrcOtYco.jpg', 'id': 51497, 'title': 'Fast Five', 'original_language': 'en', 'original_title': 'Fast Five', 'overview': \"Former cop Brian O'Conner partners with ex-con Dom Toretto on the opposite side of the law. Since Brian and Mia Toretto broke Dom out of custody, they've blown across many borders to elude authorities. Now backed into a corner in Rio de Janeiro, they must pull one last job in order to gain their freedom.\", 'poster_path': '/gEfQjjQwY7fh5bI4GlG0RrBu7Pz.jpg', 'media_type': 'movie', 'genre_ids': [28, 53, 80], 'popularity': 7.047, 'release_date': '2011-04-20', 'video': False, 'vote_average': 7.25, 'vote_count': 7818}, {'adult': False, 'backdrop_path': '/mRfI3y2oAd7ejur2di09xC9niqp.jpg', 'id': 82992, 'title': 'Fast & Furious 6', 'original_language': 'en', 'original_title': 'Fast & Furious 6', 'overview': 'Hobbs has Dominic and Brian reassemble their crew to take down a team of mercenaries; Dominic unexpectedly gets sidetracked with facing his presumed deceased girlfriend, Letty.', 'poster_path': '/3EXOOkhSmJQ9DisNmIjZ8Xi633I.jpg', 'media_type': 'movie', 'genre_ids': [28, 53, 80], 'popularity': 6.807, 'release_date': '2013-05-21', 'video': False, 'vote_average': 6.816, 'vote_count': 10232}, {'adult': False, 'backdrop_path': '/cHkhb5A4gQRK6zs6Pv7zorHs8Nk.jpg', 'id': 168259, 'title': 'Furious 7', 'original_language': 'en', 'original_title': 'Furious 7', 'overview': 'Deckard Shaw seeks revenge against Dominic Toretto and his family for his comatose brother.', 'poster_path': '/ktofZ9Htrjiy0P6LEowsDaxd3Ri.jpg', 'media_type': 'movie', 'genre_ids': [28, 53, 80], 'popularity': 72.506, 'release_date': '2015-04-01', 'video': False, 'vote_average': 7.235, 'vote_count': 10239}, {'adult': False, 'backdrop_path': '/3ZiM6gm2XL8qnhZCXsTjixvaH4v.jpg', 'id': 13804, 'title': 'Fast & Furious', 'original_language': 'en', 'original_title': 'Fast & Furious', 'overview': \"When a crime brings them back to L.A., fugitive ex-con Dom Toretto reignites his feud with agent Brian O'Conner. But as they are forced to confront a shared enemy, Dom and Brian must give in to an uncertain new trust if they hope to outmaneuver him. And the two men will find the best way to get revenge: push the limits of what's possible behind the wheel.\", 'poster_path': '/lUtVoRukW7WNtUySwd8hWlByBds.jpg', 'media_type': 'movie', 'genre_ids': [28, 80, 18, 53], 'popularity': 7.26, 'release_date': '2009-04-02', 'video': False, 'vote_average': 6.682, 'vote_count': 6910}, {'adult': False, 'backdrop_path': '/jzdnhRhG0dsuYorwvSqPqqnM1cV.jpg', 'id': 337339, 'title': 'The Fate of the Furious', 'original_language': 'en', 'original_title': 'The Fate of the Furious', 'overview': 'When a mysterious woman seduces Dom into the world of crime and a betrayal of those closest to him, the crew face trials that will test them as never before.', 'poster_path': '/dImWM7GJqryWJO9LHa3XQ8DD5NH.jpg', 'media_type': 'movie', 'genre_ids': [28, 80, 53], 'popularity': 59.154, 'release_date': '2017-04-12', 'video': False, 'vote_average': 6.882, 'vote_count': 9945}, {'adult': False, 'backdrop_path': '/4XM8DUTQb3lhLemJC51Jx4a2EuA.jpg', 'id': 385687, 'title': 'Fast X', 'original_language': 'en', 'original_title': 'Fast X', 'overview': \"Over many missions and against impossible odds, Dom Toretto and his family have outsmarted, out-nerved and outdriven every foe in their path. Now, they confront the most lethal opponent they've ever faced: A terrifying threat emerging from the shadows of the past who's fueled by blood revenge, and who is determined to shatter this family and destroy everything\u2014and everyone\u2014that Dom loves, forever.\", 'poster_path': '/fiVW06jE7z9YnO4trhaMEdclSiC.jpg', 'media_type': 'movie', 'genre_ids': [28, 80, 53], 'popularity': 268.592, 'release_date': '2023-05-17', 'video': False, 'vote_average': 7.145, 'vote_count': 4941}, {'adult': False, 'backdrop_path': '/xXHZeb1yhJvnSHPzZDqee0zfMb6.jpg', 'id': 385128, 'title': 'F9', 'original_language': 'en', 'original_title': 'F9', 'overview': \"Dominic Toretto and his crew battle the most skilled assassin and high-performance driver they've ever encountered: his forsaken brother.\", 'poster_path': '/bOFaAXmWWXC3Rbv4u4uM9ZSzRXP.jpg', 'media_type': 'movie', 'genre_ids': [28, 12, 80], 'popularity': 47.62, 'release_date': '2021-05-19', 'video': False, 'vote_average': 7.108, 'vote_count': 6885}, {'adult': False, 'backdrop_path': None, 'id': 755679, 'title': 'Fast X: Part 2', 'original_language': 'en', 'original_title': 'Fast X: Part 2', 'overview': 'The eleventh installment in The Fast Saga.', 'poster_path': '/lD8V3DBban95Mxz4sjuA81Tw771.jpg', 'media_type': 'movie', 'genre_ids': [28, 12, 80, 53], 'popularity': 24.543, 'release_date': '2025-04-03', 'video': False, 'vote_average': 0.0, 'vote_count': 0}]}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "results": "```python\nimport requests\n\n# Set the API url to get the collection details by name\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the parameters for the query\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1\n}\n\n# Make the request to search for the collection\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the collection id from the response\n    collection_id = response.json()[\"results\"][0][\"id\"]\n    \n    # Set the API url to get the collection details by id\n    url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    \n    # Make the request to get the collection details\n    response = requests.get(url, headers=headers)\n    \n    # Check if the request was successful\n    if response.status_code == 200:\n        # Extract the first movie release date from the response\n        first_movie_release_date = response.json()[\"parts\"][0][\"release_date\"]\n        print(\"The first movie of the collection Lord of the Rings was released on:\", first_movie_release_date)\n    else:\n        print(\"Failed to get collection details by id.\")\nelse:\n    print(\"Failed to search for the collection.\")\n```",
        "usage": [
            281,
            9681,
            9962
        ],
        "executed": "The first movie of the collection Lord of the Rings was released on: 2002-04-01\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"House of Cards\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the TV show ID for House of Cards\ntv_show_id = search_results['results'][0]['id']\n\n# Get the credits for the first season of House of Cards\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/1/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_results = credits_response.json()\n\n# Extract the directors from the crew\ndirectors = [member['name'] for member in credits_results['crew'] if member['job'] == \"Director\"]\n\nprint(directors)\n```",
        "usage": [
            375,
            8598,
            8973
        ],
        "executed": "[]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the parameters\nparams = {\n    \"query\": \"House of Cards\",  # TV show to search for\n    \"include_adult\": False,  # Exclude adult content\n    \"page\": 1  # Specify page number\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse and print the results\n    results = response.json()\n    similar_shows = results[\"results\"]\n    for show in similar_shows:\n        print(show[\"name\"])\nelse:\n    print(\"Failed to retrieve similar TV shows.\")\n```",
        "usage": [
            340,
            8740,
            9080
        ],
        "executed": "House of Cards\nHouse of Cards\nThe Final Cut\nTo Play the King\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get a list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if there are any results\nif data.get(\"results\"):\n    tv_show = data[\"results\"][0]  # Get the most popular TV show currently on the air\n    start_date = tv_show[\"first_air_date\"]\n    print(\"The most popular TV show currently on the air started on:\", start_date)\nelse:\n    print(\"No results found\")\n```",
        "usage": [
            315,
            10462,
            10777
        ],
        "executed": "The most popular TV show currently on the air started on: 2005-09-26\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "results": "```python\n# Step 1: Find the director id of Django Unchained\nimport requests\n\n# API url to search for movies\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Params to search for Django Unchained\nparams = {\n    \"query\": \"Django Unchained\",\n    \"include_adult\": False\n}\n\n# Send a GET request to search for Django Unchained\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the director id of Django Unchained\ndirector_id = data['results'][0]['id']\n\n# Step 2: Find other movies directed by the director\n# API url to get the person's movie credits\ndirector_credits_url = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\n\n# Send a GET request to get the movie credits of the director\nresponse_credits = requests.get(director_credits_url, headers=headers)\ndata_credits = response_credits.json()\n\n# Extract the list of movie titles directed by the director\nother_works = [movie['title'] for movie in data_credits['crew'] if movie['job'] == \"Director\"]\n\n# Output the list of other works directed by the director of Django Unchained\nprint(other_works)\n```",
        "usage": [
            281,
            8346,
            8627
        ],
        "executed": "[]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "results": "```python\nimport requests\n\n# API url for getting a list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1  # Specify the page number\n}\n\n# Headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if API call was successful\nif response.status_code == 200:\n    # Extracting the cast of the first show in the results\n    top_show_cast = response.json()[\"results\"][0][\"name\"]\n    print(\"Cast of the top show currently on the air:\", top_show_cast)\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            330,
            7777,
            8107
        ],
        "executed": "Cast of the top show currently on the air: Sturm der Liebe\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "I need a review for Breaking Bad",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show with the query \"Breaking Bad\"\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Breaking Bad\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the TV show id for Breaking Bad\ntv_id = data['results'][0]['id']\n\n# Get the reviews for the TV show Breaking Bad\nurl_reviews = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\nresponse_reviews = requests.get(url_reviews, headers=headers)\ndata_reviews = response_reviews.json()\n\n# Print the reviews for Breaking Bad\nfor review in data_reviews['results']:\n    print(\"Author:\", review['author'])\n    print(\"Content:\", review['content'])\n    print(\"------------------------------\")\n```  ",
        "usage": [
            352,
            8947,
            9299
        ],
        "executed": "Author: slyone10001\nContent: Wow....where to start. Not really into \"DRUG\" inspired shows. But this one had me from the start. The only bad about this show was the split seasons when it was a first run show. But now you can go right through to the next episode with out having to wait.....MUST WATCH ! !\n------------------------------\nAuthor: Dean\nContent: I'll be honest, at first when I started this TV show and finished first season, I didn't like it. It felt boring for me and I stopped watching, but after few years, I decided to give it a chance and continue. I'm so happy because of my decision, because after finishing this TV show, I can definitely tell that it was a masterpiece! 5th season is a bomb and 14th season was shocking! It left me with sad, euphoric shock feeling. It was mind blowing! I'm not gonna spoil you what happened, but if you started first season and you don't like it, for goodness sake, give it a chance and continue watching. I promise you won't regret.\r\n\r\nCharacters are very well developed. Acting is superb! Plot is very interesting. Whole TV show is tense, especially the last season. The only downside I can think about is camera. Sometimes it's shaking on some certain scenes. I don't know why they didn't pay attention to this, but this is nothing, just a very minor minus. Everything else is great about this TV show.\n------------------------------\nAuthor: l33t5p34k3r\nContent: Started out really good, but dropped quality after the second to last season\n------------------------------\nAuthor: drystyx\nContent: This is the kind of TV show for the \"formula lovers\" who want to feel superior.\r\nThere is an air of the superiority complex of the \"drug knowledgeable\" crowd in this series about a \"smart guy\" breaking into the drug trade.\r\nHis \"talent\" makes him the important cog in the machine. He can call his shots.\r\nStill, the ruffians give him a rough way to go, because criminals really are stupid.\r\nOnce they learn that they are nothing without him, he gets his way.\r\nMuch like a Western town blacksmith, he's the needed ingredient.\r\nHowever, things get very formula early on in the show. And there's always this sense of a superiority complex from the sort of people who push shows like this onto their friends and acquaintances. The directing writing team tap into the control freak crowd very well.\r\nBut it is a dull show about dull people.\n------------------------------\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show 'The Last Of Us' to get the TV ID\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Last Of Us\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\ntv_id = search_results['results'][0]['id']\n\n# Get recommendations for the TV show based on the TV ID\nrecommendation_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\nrecommendation_params = {}\nrecommendation_response = requests.get(recommendation_url, headers=headers, params=recommendation_params)\nrecommendation_results = recommendation_response.json()\n\n# Print the list of TV show recommendations\nfor result in recommendation_results['results']:\n    print(result['name'])\n```",
        "usage": [
            359,
            8535,
            8894
        ],
        "executed": "The Mandalorian\nWednesday\nGame of Thrones\nChernobyl\nBreaking Bad\nStranger Things\nTulsa King\nHouse of the Dragon\nThe Walking Dead\nYou\nThe Boys\nRick and Morty\nSecret Invasion\nThe Night Agent\nBEEF\nThe Glory\nSeverance\nThe Lord of the Rings: The Rings of Power\nFrom\nVelma\nThe Queen's Gambit\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ]
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# API url to search for The Last Of Us TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Last Of Us\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Calling the search API to get the TV show details\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the TV show ID for The Last Of Us\ntv_id = data[\"results\"][0][\"id\"]\n\n# API url to get recommendations for the TV show\nrecommendations_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\nparams = {\n    \"page\": 1\n}\n\n# Calling the recommendations API to get recommendations for The Last Of Us\nresponse = requests.get(recommendations_url, headers=headers, params=params)\nrecommendations = response.json()\n\n# Outputting the recommendations\nprint(recommendations)\n```",
        "usage": [
            215,
            10479,
            10694
        ],
        "executed": "{'page': 1, 'results': [{'adult': False, 'backdrop_path': '/9zcbqSxdsRMZWHYtyCd1nXPr2xq.jpg', 'id': 82856, 'name': 'The Mandalorian', 'original_language': 'en', 'original_name': 'The Mandalorian', 'overview': 'After the fall of the Galactic Empire, lawlessness has spread throughout the galaxy. A lone gunfighter makes his way through the outer reaches, earning his keep as a bounty hunter.', 'poster_path': '/eU1i6eHXlzMOlEq0ku1Rzq7Y4wA.jpg', 'media_type': 'tv', 'genre_ids': [10765, 10759, 18], 'popularity': 227.975, 'first_air_date': '2019-11-12', 'vote_average': 8.445, 'vote_count': 9657, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/iHSwvRVsRyxpX7FE7GbviaDvgGZ.jpg', 'id': 119051, 'name': 'Wednesday', 'original_language': 'en', 'original_name': 'Wednesday', 'overview': 'Wednesday Addams is sent to Nevermore Academy, a bizarre boarding school where she attempts to master her psychic powers, stop a monstrous killing spree of the town citizens, and solve the supernatural mystery that affected her family 25 years ago \u2014 all while navigating her new relationships.', 'poster_path': '/9PFonBhy4cQy7Jz20NpMygczOkv.jpg', 'media_type': 'tv', 'genre_ids': [10765, 9648, 35], 'popularity': 194.558, 'first_air_date': '2022-11-23', 'vote_average': 8.499, 'vote_count': 8032, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/rIe3PnM6S7IBUmvNwDkBMX0i9EZ.jpg', 'id': 1399, 'name': 'Game of Thrones', 'original_language': 'en', 'original_name': 'Game of Thrones', 'overview': \"Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond.\", 'poster_path': '/1XS1oqL89opfnbLl8WnZY1O1uJx.jpg', 'media_type': 'tv', 'genre_ids': [10765, 18, 10759], 'popularity': 994.002, 'first_air_date': '2011-04-17', 'vote_average': 8.446, 'vote_count': 22760, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/20eIP9o5ebArmu2HxJutaBjhLf4.jpg', 'id': 87108, 'name': 'Chernobyl', 'original_language': 'en', 'original_name': 'Chernobyl', 'overview': 'The true story of one of the worst man-made catastrophes in history: the catastrophic nuclear accident at Chernobyl. A tale of the brave men and women who sacrificed to save Europe from unimaginable disaster.', 'poster_path': '/hlLXt2tOPT6RRnjiUmoxyG1LTFi.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 124.986, 'first_air_date': '2019-05-06', 'vote_average': 8.66, 'vote_count': 5773, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/9faGSFi5jam6pDWGNd0p8JcJgXQ.jpg', 'id': 1396, 'name': 'Breaking Bad', 'original_language': 'en', 'original_name': 'Breaking Bad', 'overview': \"Walter White, a New Mexico chemistry teacher, is diagnosed with Stage III cancer and given a prognosis of only two years left to live. He becomes filled with a sense of fearlessness and an unrelenting desire to secure his family's financial future at any cost as he enters the dangerous world of drugs and crime.\", 'poster_path': '/ztkUQFLlC19CCMYHW9o1zWhJRNq.jpg', 'media_type': 'tv', 'genre_ids': [18, 80], 'popularity': 649.263, 'first_air_date': '2008-01-20', 'vote_average': 8.904, 'vote_count': 13220, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/56v2KjBlU4XaOv9rVYEQypROD7P.jpg', 'id': 66732, 'name': 'Stranger Things', 'original_language': 'en', 'original_name': 'Stranger Things', 'overview': 'When a young boy vanishes, a small town uncovers a mystery involving secret experiments, terrifying supernatural forces, and one strange little girl.', 'poster_path': '/49WJfeN0moxb9IPfGn8AIqMGskD.jpg', 'media_type': 'tv', 'genre_ids': [18, 10765, 9648], 'popularity': 338.647, 'first_air_date': '2016-07-15', 'vote_average': 8.6, 'vote_count': 16776, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/mNHRGO1gFpR2CYZdANe72kcKq7G.jpg', 'id': 153312, 'name': 'Tulsa King', 'original_language': 'en', 'original_name': 'Tulsa King', 'overview': 'Just after he is released from prison after 25 years, New York mafia capo Dwight \u201cThe General\u201d Manfredi is unceremoniously exiled by his boss to set up shop in Tulsa, Okla. Realizing that his mob family may not have his best interests in mind, Dwight slowly builds a \u201ccrew\u201d from a group of unlikely characters, to help him establish a new criminal empire in a place that to him might as well be another planet.', 'poster_path': '/fwTv3RPRAIy0maOMns5eYRRwnDk.jpg', 'media_type': 'tv', 'genre_ids': [80, 18], 'popularity': 118.295, 'first_air_date': '2022-11-13', 'vote_average': 8.4, 'vote_count': 1494, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/vXpeJJs1z8OKC88CNJX9O9QOhtr.jpg', 'id': 94997, 'name': 'House of the Dragon', 'original_language': 'en', 'original_name': 'House of the Dragon', 'overview': 'The Targaryen dynasty is at the absolute apex of its power, with more than 15 dragons under their yoke. Most empires crumble from such heights. In the case of the Targaryens, their slow fall begins when King Viserys breaks with a century of tradition by naming his daughter Rhaenyra heir to the Iron Throne. But when Viserys later fathers a son, the court is shocked when Rhaenyra retains her status as his heir, and seeds of division sow friction across the realm.', 'poster_path': '/m7ta0kNg2ONvnBFF76miVvbWK1V.jpg', 'media_type': 'tv', 'genre_ids': [10765, 18, 10759], 'popularity': 299.308, 'first_air_date': '2022-08-21', 'vote_average': 8.421, 'vote_count': 3731, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/x4salpjB11umlUOltfNvSSrjSXm.jpg', 'id': 1402, 'name': 'The Walking Dead', 'original_language': 'en', 'original_name': 'The Walking Dead', 'overview': \"Sheriff's deputy Rick Grimes awakens from a coma to find a post-apocalyptic world dominated by flesh-eating zombies. He sets out to find his family and encounters many other survivors along the way.\", 'poster_path': '/n7PVu0hSz2sAsVekpOIoCnkWlbn.jpg', 'media_type': 'tv', 'genre_ids': [10759, 18, 10765], 'popularity': 521.542, 'first_air_date': '2010-10-31', 'vote_average': 8.1, 'vote_count': 15872, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/2ZNFu0hkSVtAI6LRWGIlCPNd1Tj.jpg', 'id': 78191, 'name': 'You', 'original_language': 'en', 'original_name': 'You', 'overview': 'A dangerously charming, intensely obsessive young man goes to extreme measures to insert himself into the lives of those he is transfixed by.', 'poster_path': '/7bEYwjUvlJW7GerM8GYmqwl4oS3.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 187.278, 'first_air_date': '2018-09-09', 'vote_average': 8.066, 'vote_count': 2944, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/n6vVs6z8obNbExdD3QHTr4Utu1Z.jpg', 'id': 76479, 'name': 'The Boys', 'original_language': 'en', 'original_name': 'The Boys', 'overview': 'A group of vigilantes known informally as \u201cThe Boys\u201d set out to take down corrupt superheroes with no more than blue-collar grit and a willingness to fight dirty.', 'poster_path': '/7Ns6tO3aYjppI5bFhyYZurOYGBT.jpg', 'media_type': 'tv', 'genre_ids': [10765, 10759], 'popularity': 346.739, 'first_air_date': '2019-07-25', 'vote_average': 8.5, 'vote_count': 9228, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/rBF8wVQN8hTWHspVZBlI3h7HZJ.jpg', 'id': 60625, 'name': 'Rick and Morty', 'original_language': 'en', 'original_name': 'Rick and Morty', 'overview': \"Rick is a mentally-unbalanced but scientifically gifted old man who has recently reconnected with his family. He spends most of his time involving his young grandson Morty in dangerous, outlandish adventures throughout space and alternate universes. Compounded with Morty's already unstable family life, these events cause Morty much distress at home and school.\", 'poster_path': '/gdIrmf2DdY5mgN6ycVP0XlzKzbE.jpg', 'media_type': 'tv', 'genre_ids': [16, 35, 10765, 10759], 'popularity': 666.249, 'first_air_date': '2013-12-02', 'vote_average': 8.702, 'vote_count': 9218, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/57clBMPX25NNO6nmDw3TV3zQaQE.jpg', 'id': 114472, 'name': 'Secret Invasion', 'original_language': 'en', 'original_name': 'Secret Invasion', 'overview': 'Nick Fury and Talos discover a faction of shapeshifting Skrulls who have been infiltrating Earth for years.', 'poster_path': '/f5ZMzzCvt2IzVDxr54gHPv9jlC9.jpg', 'media_type': 'tv', 'genre_ids': [18, 10765, 10759], 'popularity': 126.163, 'first_air_date': '2023-06-21', 'vote_average': 6.859, 'vote_count': 928, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/vLN520GJvHJJQOFqqV7RjZNBwi7.jpg', 'id': 129552, 'name': 'The Night Agent', 'original_language': 'en', 'original_name': 'The Night Agent', 'overview': 'While monitoring an emergency line, a vigilant FBI agent answers a call that plunges him into a deadly conspiracy involving a mole at the White House.', 'poster_path': '/xjsx6rGEgHl2tUqkimo6Bz2KzVo.jpg', 'media_type': 'tv', 'genre_ids': [18, 9648, 10759], 'popularity': 90.464, 'first_air_date': '2023-03-23', 'vote_average': 7.874, 'vote_count': 573, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/u7OpeS4eckBSR1wFxFTuyy3FjHE.jpg', 'id': 154385, 'name': 'BEEF', 'original_language': 'en', 'original_name': 'BEEF', 'overview': 'A road rage incident between two strangers \u2014 a failing contractor and an unfulfilled entrepreneur \u2014 sparks a feud that brings out their darkest impulses.', 'poster_path': '/4b4v7RnPhNyPEaVGFarEuo74r8W.jpg', 'media_type': 'tv', 'genre_ids': [35, 18], 'popularity': 66.703, 'first_air_date': '2023-04-06', 'vote_average': 7.839, 'vote_count': 482, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/AjwoDj77HLlqcpwEGqsnvMXm5my.jpg', 'id': 136283, 'name': 'The Glory', 'original_language': 'ko', 'original_name': '\ub354 \uae00\ub85c\ub9ac', 'overview': 'After a childhood marked by pain and violence, a woman puts a carefully planned revenge scheme in motion.', 'poster_path': '/uUM4LVlPgIrww07OoEKrGWlS1Ej.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 111.593, 'first_air_date': '2022-12-30', 'vote_average': 8.555, 'vote_count': 568, 'origin_country': ['KR']}, {'adult': False, 'backdrop_path': '/npD65vPa4vvn1ZHpp3o05A5vdKT.jpg', 'id': 95396, 'name': 'Severance', 'original_language': 'en', 'original_name': 'Severance', 'overview': 'Mark leads a team of office workers whose memories have been surgically divided between their work and personal lives. When a mysterious colleague appears outside of work, it begins a journey to discover the truth about their jobs.', 'poster_path': '/lFf6LLrQjYldcZItzOkGmMMigP7.jpg', 'media_type': 'tv', 'genre_ids': [18, 9648, 10765], 'popularity': 117.625, 'first_air_date': '2022-02-17', 'vote_average': 8.403, 'vote_count': 1007, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/qBppESpY8e97WfPWVZiU0JdRXw.jpg', 'id': 84773, 'name': 'The Lord of the Rings: The Rings of Power', 'original_language': 'en', 'original_name': 'The Lord of the Rings: The Rings of Power', 'overview': 'Beginning in a time of relative peace, we follow an ensemble cast of characters as they confront the re-emergence of evil to Middle-earth. From the darkest depths of the Misty Mountains, to the majestic forests of Lindon, to the breathtaking island kingdom of N\u00famenor, to the furthest reaches of the map, these kingdoms and characters will carve out legacies that live on long after they are gone.', 'poster_path': '/mYLOqiStMxDK3fYZFirgrMt8z5d.jpg', 'media_type': 'tv', 'genre_ids': [10759, 10765, 18], 'popularity': 211.148, 'first_air_date': '2022-09-01', 'vote_average': 7.4, 'vote_count': 2396, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/hR2pFXMxVihldEk5WoSrV7Yq2ra.jpg', 'id': 124364, 'name': 'From', 'original_language': 'en', 'original_name': 'From', 'overview': 'Unravel the mystery of a nightmarish town in middle America that traps all those who enter. As the unwilling residents fight to keep a sense of normalcy and search for a way out, they must also survive the threats of the surrounding forest \u2013 including the terrifying creatures that come out when the sun goes down.', 'poster_path': '/pnrv8tfOcWxu4CrB8N7xK0jYJsR.jpg', 'media_type': 'tv', 'genre_ids': [9648, 18, 10765], 'popularity': 188.821, 'first_air_date': '2022-02-20', 'vote_average': 8.146, 'vote_count': 869, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/mYegNdFjJeCISA1RDDCKBhKB4Ao.jpg', 'id': 126725, 'name': 'Velma', 'original_language': 'en', 'original_name': 'Velma', 'overview': 'Jinkies! This raucous reimagining of the Scooby-Doo franchise unravels the mysterious origins of Mystery, Inc. \u2013 as seen through the eyes of the gang\u2019s beloved bespectacled detective Velma.', 'poster_path': '/zxkNhuPSHeDv3yA7sFu2RuEOGgR.jpg', 'media_type': 'tv', 'genre_ids': [16, 35], 'popularity': 39.651, 'first_air_date': '2023-01-12', 'vote_average': 3.464, 'vote_count': 248, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/34OGjFEbHj0E3lE2w0iTUVq0CBz.jpg', 'id': 87739, 'name': \"The Queen's Gambit\", 'original_language': 'en', 'original_name': \"The Queen's Gambit\", 'overview': 'In a 1950s orphanage, a young girl reveals an astonishing talent for chess and begins an unlikely journey to stardom while grappling with addiction.', 'poster_path': '/zU0htwkhNvBQdVSIKB9s6hgVeFK.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 113.416, 'first_air_date': '2020-10-23', 'vote_average': 8.503, 'vote_count': 4123, 'origin_country': ['US']}], 'total_pages': 2, 'total_results': 40}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# First, get the TV show id for the show 'Friends'\nparams = {\n    \"query\": \"Friends\",\n    \"page\": 1\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Next, get the guest stars for season 3, episode 24 of Friends\nresponse = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/3/episode/24/credits\", headers=headers)\nguest_stars = response.json()[\"guest_stars\"]\n\n# Extract and print the names of the guest stars\nguest_star_names = [star[\"name\"] for star in guest_stars]\nprint(guest_star_names)\n```",
        "usage": [
            344,
            10134,
            10478
        ],
        "executed": "['Christine Taylor', 'James Hong', 'Jon Favreau', 'Steve Park', \"Joe O'Connor\", 'Robin Williams', 'Billy Crystal', 'Bruce Buffer', 'John McCarthy', 'Sam McMurray']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Add the required parameters\nparams = {\n    \"page\": 1\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the data from the response\n    popular_tv_shows = response.json()[\"results\"]\n    \n    # Assuming lead actor is the first person in the cast list\n    lead_actor = popular_tv_shows[0][\"cast\"][0][\"name\"]\n    \n    print(\"The lead actor in the most popular TV show is:\", lead_actor)\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            344,
            8837,
            9181
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of top rated TV shows\ntop_rated_tv_url = \"https://api.themoviedb.org/3/tv/top_rated\"\nparams = {\"page\": 1}\nresponse = requests.get(top_rated_tv_url, headers=headers, params=params)\ntop_rated_tv_data = response.json()\n\n# Get the tv_id of the top-1 rated TV show\ntop_rated_tv_id = top_rated_tv_data[\"results\"][0][\"id\"]\n\n# Call the API to get the keywords of the top-1 rated TV show\ntv_keywords_url = f\"https://api.themoviedb.org/3/tv/{top_rated_tv_id}/keywords\"\nresponse = requests.get(tv_keywords_url, headers=headers)\nkeywords_data = response.json()\n\n# Extract the keyword of the top-1 rated TV show\ntop_rated_tv_keyword = keywords_data[\"results\"][0][\"name\"]\n\nprint(top_rated_tv_keyword)\n```",
        "usage": [
            374,
            9305,
            9679
        ],
        "executed": "hotel\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"2 Broke Girls\" to get the show ID\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_search_params = {\"query\": \"2 Broke Girls\"}\nresponse = requests.get(tv_search_url, headers=headers, params=tv_search_params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the details of the TV show including the poster\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\nresponse = requests.get(tv_details_url, headers=headers)\nposter_path = response.json()[\"poster_path\"]\n\n# Print the URL of the poster image\nbase_image_url = \"https://image.tmdb.org/t/p/original\"\nposter_url = base_image_url + poster_path\nprint(poster_url)\n```",
        "usage": [
            354,
            9671,
            10025
        ],
        "executed": "https://image.tmdb.org/t/p/original/qCa4ANpF1QOioqRUNHgk2B3KFMZ.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "results": "```python\nimport requests\n\n# Set the API url for searching TV shows\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the query parameters\nparams = {\n    \"query\": \"2 Broke Girls\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show id for \"2 Broke Girls\"\ntv_show_id = data[\"results\"][0][\"id\"]\n\n# Set the API url for getting TV show details by id\nurl = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\ntv_show_data = response.json()\n\n# Get the number of episodes\ntotal_episodes = tv_show_data[\"number_of_episodes\"]\n\nprint(f\"Total episodes of '2 Broke Girls': {total_episodes}\")\n```",
        "usage": [
            208,
            13026,
            13234
        ],
        "executed": "Total episodes of '2 Broke Girls': 137\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "results": "```python\nimport requests\n\n# Setting up the required headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show 'The Big Bang Theory' to get the production company id\nparams_tv_search = {\n    \"query\": \"The Big Bang Theory\",\n    \"page\": 1\n}\nresponse_tv_search = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params_tv_search)\ntv_search_results = response_tv_search.json()\nproduction_company_id = tv_search_results['results'][0]['production_company'][0]['id']\n\n# Get the details of the production company\nresponse_company_details = requests.get(f\"https://api.themoviedb.org/3/company/{production_company_id}\", headers=headers)\ncompany_details = response_company_details.json()\nfoundation_date = company_details['start_date']\n\nprint(f\"The company that produced 'The Big Bang Theory' was founded on: {foundation_date}\")\n```",
        "usage": [
            355,
            10059,
            10414
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "results": "```python\nimport requests\n\n# Define the headers with the required Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to search for the TV show \"The Big Bang Theory\"\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Big Bang Theory\"\n}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the creation date of the TV show from the response\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        first_air_date = data[\"results\"][0][\"first_air_date\"]\n        print(\"The TV show 'The Big Bang Theory' was first aired on:\", first_air_date)\n    else:\n        print(\"TV show not found in the database.\")\nelse:\n    print(\"Error in fetching data. Status code:\", response.status_code)\n```",
        "usage": [
            351,
            11428,
            11779
        ],
        "executed": "The TV show 'The Big Bang Theory' was first aired on: 2007-09-24\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the TV popular API to get a list of the popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    # Get the first TV show from the results\n    first_tv_show = data['results'][0]\n    tv_id = first_tv_show['id']\n    \n    # Call the keywords API for the TV show\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    response = requests.get(url, headers=headers)\n\n    if response.status_code == 200:\n        keyword_data = response.json()\n        keyword = keyword_data['results'][0]['name']\n        print(f\"The keyword of the most popular TV show is: {keyword}\")\n    else:\n        print(\"Failed to get keyword data for the TV show\")\nelse:\n    print(\"Failed to get popular TV show data\")\n```",
        "usage": [
            398,
            7558,
            7956
        ],
        "executed": "The keyword of the most popular TV show is: germany\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}\"\ntv_id = 63247  # Westworld's TV show id\nseason_number = 2\nepisode_number = 3\n\n# Replace the variables in the url\nurl = url.format(tv_id=tv_id, season_number=season_number, episode_number=episode_number)\n\n# Set the headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the overview of the third episode of the second season of Westworld\n    episode_overview = data[\"overview\"]\n    \n    print(episode_overview)\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            373,
            10716,
            11089
        ],
        "executed": "There is beauty in who we are. Shouldn't we, too, try to survive? Truth is, we don't all deserve to make it. Dolores makes her next move as Charlotte scrambles to protect Delos' most prized asset. Bernard gets closer to the truth and Maeve continues the search for her daughter.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show 'Game of Thrones' to get the ID\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Game of Thrones\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\ngame_of_thrones_id = search_results['results'][0]['id']\n\n# Get the details of Season 2 using the TV show ID\nseason_url = f\"https://api.themoviedb.org/3/tv/{game_of_thrones_id}/season/2\"\nseason_response = requests.get(season_url, headers=headers)\nseason_details = season_response.json()\nair_date = season_details['air_date']\n\nprint(\"Air date of the second season of Game of Thrones:\", air_date)\n```",
        "usage": [
            351,
            8200,
            8551
        ],
        "executed": "Air date of the second season of Game of Thrones: 2012-03-31\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "results": "```python\nimport requests\n\n# Http headers to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Band of Brothers\"\nbase_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Band of Brothers\",\n    \"include_adult\": False\n}\nresponse = requests.get(base_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show id\ntv_show_id = data['results'][0]['id']\n\n# Get the details of the first season of \"Band of Brothers\"\nseason_number = 1\nseason_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/{season_number}\"\nresponse = requests.get(season_url, headers=headers)\nseason_data = response.json()\n\n# Get the poster of the third episode\nepisode_number = 3\nepisode = season_data['episodes'][episode_number - 1]\nposter_path = episode['still_path']\n\nif poster_path:\n    poster_url = f\"https://image.tmdb.org/t/p/original/{poster_path}\"\n    print(poster_url)\nelse:\n    print(\"No poster found for the third episode of Band of Brothers.\")\n```",
        "usage": [
            417,
            9429,
            9846
        ],
        "executed": "https://image.tmdb.org/t/p/original//122cDgrjc5lFqUZ7cYi8vUVrcrn.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "results": "```python\nimport requests\n\n# Define the API URL to get the primary TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/1399\"\n\n# Define the parameters (if any)\nparams = {}\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Get the list of production companies\n    production_companies = data.get('production_companies', [])\n    # Find the production company with the name \"Home Box Office (HBO)\"\n    for company in production_companies:\n        if company.get('name') == \"Home Box Office (HBO)\":\n            # Get the logo path of the network\n            logo_path = company.get('logo_path')\n            if logo_path:\n                print(f\"Logo of the network that produced Game of Thrones: https://image.tmdb.org/t/p/original{logo_path}\")\n            else:\n                print(\"Logo path is not available for the network.\")\n            break\n    else:\n        print(\"Network 'Home Box Office (HBO)' not found in production companies.\")\nelse:\n    print(\"Error occurred while fetching data.\")\n```",
        "usage": [
            443,
            9968,
            10411
        ],
        "executed": "Network 'Home Box Office (HBO)' not found in production companies.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ]
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "results": "```python\nimport requests\n\n# Define the API url to search for TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters to search for Game of Thrones\nparams_search_tv = {\n    \"query\": \"Game of Thrones\",\n    \"include_adult\": False\n}\n\n# Call the API to search for TV shows\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Extract the network ID from the search results\nnetwork_id = data_search_tv['results'][0]['networks'][0]['id']\n\n# Define the API url to get network details\nurl_network = f\"https://api.themoviedb.org/3/network/{network_id}\"\n\n# Call the API to get network details\nresponse_network = requests.get(url_network, headers=headers)\ndata_network = response_network.json()\n\n# Output the homepage of the network that produced Game of Thrones\nprint(data_network['homepage'])\n```",
        "usage": [
            213,
            9177,
            9390
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Send the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the data from the response\n    data = response.json()\n    # Get the first TV show result\n    tv_show = data[\"results\"][0]\n    # Get the TV show id\n    tv_id = tv_show[\"id\"]\n\n    # Call the API to get the keywords of the most popular TV show\n    keyword_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    keyword_response = requests.get(keyword_url, headers=headers)\n    \n    # Check if the keyword response is successful\n    if keyword_response.status_code == 200:\n        # Get the keyword data from the response\n        keyword_data = keyword_response.json()\n        # Get the first keyword if available\n        keyword = keyword_data[\"results\"][0][\"name\"]\n        print(\"Keyword of the most popular TV show currently:\", keyword)\n    else:\n        print(\"Failed to retrieve keywords\")\nelse:\n    print(\"Failed to retrieve TV shows\")\n\n```",
        "usage": [
            455,
            10851,
            11306
        ],
        "executed": "Keyword of the most popular TV show currently: germany\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "results": "```python\nimport requests\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of current popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\n    \"page\": 1\n}\nresponse_tv = requests.get(url_popular_tv, headers=headers, params=params)\ndata_tv = response_tv.json()\n\n# Get the company id that produced the most popular TV show\ncompany_id = data_tv['results'][0]['production_companies'][0]['id']\n\n# Get the company details using the company id\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse_company = requests.get(url_company, headers=headers)\ndata_company = response_company.json()\n\n# Get the headquarters of the company\nheadquarters = data_company['headquarters']\n\nprint(headquarters)\n```",
        "usage": [
            348,
            11446,
            11794
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for 'The Mandalorian'\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Mandalorian\",\n    \"page\": 1\n}\n\nresponse = requests.get(search_url, headers=headers, params=search_params)\nresults = response.json()\n\n# Get the TV show id for 'The Mandalorian'\ntv_id = results['results'][0]['id']\n\n# Get details for 'The Mandalorian'\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\ndetails_params = {}\n\nresponse = requests.get(tv_details_url, headers=headers, params=details_params)\ndetails = response.json()\n\n# Extract the genre of 'The Mandalorian'\ngenre_ids = details['genres']\ngenres = [genre['name'] for genre in genre_ids]\n\nprint(\"The genre of The Mandalorian is:\", genres)\n```",
        "usage": [
            367,
            10641,
            11008
        ],
        "executed": "The genre of The Mandalorian is: ['Sci-Fi & Fantasy', 'Action & Adventure', 'Drama']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "results": "```python\nimport requests\n\n# API url to get the daily trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Call the API to get the trending TV shows\nresponse = requests.get(url, headers=headers)\n# Parse the response to get the lead actor's birthday\nif response.status_code == 200:\n    trending_shows = response.json().get('results')\n    if trending_shows:\n        # Assuming the first show in the list is the most trending show\n        lead_actor_id = trending_shows[0].get('credits', {}).get('cast', [])[0].get('id')\n        # Using the lead actor's id to get the details\n        person_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n        person_response = requests.get(person_url, headers=headers)\n        if person_response.status_code == 200:\n            lead_actor_birthday = person_response.json().get('birthday')\n            print(f\"The birthday of the lead actor of today's most trending TV show is: {lead_actor_birthday}\")\n        else:\n            print(f\"Failed to get the lead actor's details. Status code: {person_response.status_code}\")\n    else:\n        print(\"No trending TV shows found.\")\nelse:\n    print(f\"Failed to get trending TV shows. Status code: {response.status_code}\")\n```",
        "usage": [
            469,
            11974,
            12443
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ]
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the today's trending TV shows\nurl_trending = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending = requests.get(url_trending, headers=headers)\ndata_trending = response_trending.json()\n\n# Get the network id of the most trending TV show\nnetwork_id = data_trending['results'][0]['networks'][0]['id']\n\n# Get the details of the network\nurl_network = f\"https://api.themoviedb.org/3/network/{network_id}\"\nresponse_network = requests.get(url_network, headers=headers)\ndata_network = response_network.json()\n\n# Get the homepage of the network\nnetwork_homepage = data_network['homepage']\n\nprint(network_homepage)\n```",
        "usage": [
            330,
            10481,
            10811
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "give me a review of today's most trending TV show",
        "results": "```python\nimport requests\n\n# Define the API url for trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the header with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the data from the response\n    data = response.json()\n    \n    # Get the TV show id of the most trending TV show\n    tv_id = data['results'][0]['id']\n    \n    # Call the API to get the reviews for the most trending TV show\n    review_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\n    review_response = requests.get(review_url, headers=headers)\n    \n    # Check if the review response is successful\n    if review_response.status_code == 200:\n        # Get the reviews data\n        review_data = review_response.json()\n        \n        # Print the reviews\n        print(\"Reviews of today's most trending TV show:\")\n        for review in review_data['results']:\n            print(f\"Author: {review['author']}\")\n            print(f\"Content: {review['content']}\")\n            print(\"-------\")\n    else:\n        print(\"Failed to get the reviews data\")\nelse:\n    print(\"Failed to get the trending TV shows data\")\n```",
        "usage": [
            460,
            8452,
            8912
        ],
        "executed": "Reviews of today's most trending TV show:\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get today's trending TV shows\ntrending_tv_response = requests.get(\"https://api.themoviedb.org/3/trending/tv/day\", headers=headers)\nif trending_tv_response.status_code == 200:\n    trending_tv_data = trending_tv_response.json()\n    # Extract the most trending TV show\n    most_trending_tv_id = trending_tv_data['results'][0]['id']\n    \n    # Get similar TV shows to the most trending TV show\n    similar_tv_response = requests.get(f\"https://api.themoviedb.org/3/tv/{most_trending_tv_id}/similar\", headers=headers)\n    if similar_tv_response.status_code == 200:\n        similar_tv_data = similar_tv_response.json()\n        # Display list of similar TV shows\n        similar_tv_list = similar_tv_data['results']\n        for show in similar_tv_list:\n            print(show['name'])\n    else:\n        print(\"Failed to fetch similar TV shows\")\nelse:\n    print(\"Failed to fetch trending TV shows\")\n```",
        "usage": [
            388,
            10381,
            10769
        ],
        "executed": "American Gigolo\nLord, Give Me Patience\nAladdin\nBad Teacher\nFX: The Series\nLas historias de Sussi\nHoney, I Shrunk the Kids: The TV Show\nRoughnecks: Starship Troopers Chronicles\nHistory of the World: Part II\nMonarch: Legacy of Monsters\nLet Them Eat Cake\nThe Dead Zone\nUnder Pressure\nted\n18 Again\nAldo: Mais Forte que o Mundo\nLilo & Stitch: The Series\nThe Real Ghostbusters\nCruel Intentions\nAnna Karenina\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url for getting today's trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    \n    # Extract the poster path of the first trending TV show\n    trending_tv_show_poster = data['results'][0]['poster_path']\n    \n    print(\"Poster of today's most trending TV show:\")\n    print(trending_tv_show_poster)\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            330,
            9140,
            9470
        ],
        "executed": "Poster of today's most trending TV show:\n/e5hw7bThIs8u6WBHjYHhwTIRsL2.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for 'Jeremy Clarkson' to get his person ID\nparams = {\"query\": \"Jeremy Clarkson\", \"include_adult\": False}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\ndata = response.json()\nperson_id = data[\"results\"][0][\"id\"]\n\n# Get the TV credits for Jeremy Clarkson\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\ntv_credits = response.json()\n\n# Get the most popular TV show ID for Jeremy Clarkson\nmost_popular_tv_show = max(tv_credits[\"cast\"], key=lambda x: x[\"popularity\"])\ntv_id = most_popular_tv_show[\"id\"]\n\n# Get details of the most popular TV show\ntv_show_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\nresponse = requests.get(tv_show_url, headers=headers)\ntv_show_details = response.json()\n\n# Get the credits for the most popular TV show\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ntv_credits = response.json()\n\n# Find out who has worked with Jeremy Clarkson in his most popular TV show\ncast_list = tv_credits[\"cast\"]\ncollaborators = set()\nfor cast_member in cast_list:\n    if cast_member[\"name\"] != \"Jeremy Clarkson\":\n        collaborators.add(cast_member[\"name\"])\n\nprint(collaborators)\n```",
        "usage": [
            514,
            8383,
            8897
        ],
        "executed": "{'Graham Norton'}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ]
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "results": "```python\nimport requests\n\n# Define the API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n# Define the API url for getting the credits of a TV show\nurl_tv_credits = \"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n# Define the API url for getting images of a person\nurl_person_images = \"https://api.themoviedb.org/3/person/{person_id}/images\"\n\n# Set the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Black Mirror\"\nparams_search_tv = {\n    \"query\": \"Black Mirror\",\n    \"page\": 1\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_show_id = response_search_tv.json()['results'][0]['id']\n\n# Get the TV show credits\nurl_tv_credits = url_tv_credits.format(tv_id=tv_show_id)\nresponse_tv_credits = requests.get(url_tv_credits, headers=headers)\nlead_actor_id = response_tv_credits.json()['cast'][0]['id']\n\n# Get the images of the lead actor\nurl_person_images = url_person_images.format(person_id=lead_actor_id)\nresponse_person_images = requests.get(url_person_images, headers=headers)\nlead_actor_image_path = response_person_images.json()[\"profiles\"][0][\"file_path\"]\n\nprint(\"Lead Actor Image Path:\", lead_actor_image_path)\n```",
        "usage": [
            473,
            7576,
            8049
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for \"The Mandalorian\" TV show\nurl_tv_search = \"https://api.themoviedb.org/3/search/tv\"\nparams_tv_search = {\n    \"query\": \"The Mandalorian\",\n    \"page\": 1\n}\nresponse_tv_search = requests.get(url_tv_search, headers=headers, params=params_tv_search)\ndata_tv_search = response_tv_search.json()\n\n# Get the TV show ID for \"The Mandalorian\"\ntv_id = data_tv_search['results'][0]['id']\n\n# Get the credits for \"The Mandalorian\" TV show\nurl_tv_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\nresponse_tv_credits = requests.get(url_tv_credits, headers=headers)\ndata_tv_credits = response_tv_credits.json()\n\n# Get the lead actor's ID for \"The Mandalorian\"\nlead_actor_id = data_tv_credits['cast'][0]['id']\n\n# Get the lead actor's details\nurl_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse_person = requests.get(url_person, headers=headers)\ndata_person = response_person.json()\n\n# Extract the birthdate of the lead actor\nlead_actor_birthdate = data_person['birthday']\n\nprint(f\"The lead actor of The Mandalorian was born on: {lead_actor_birthdate}\")\n```",
        "usage": [
            463,
            10202,
            10665
        ],
        "executed": "The lead actor of The Mandalorian was born on: 1975-04-02\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ]
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of popular TV shows airing today\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/airing_today\"\nparams_popular_tv = {\"page\": 1}\nresponse_popular_tv = requests.get(url_popular_tv, headers=headers, params=params_popular_tv)\ndata_popular_tv = response_popular_tv.json()\n\n# Get the TV show ID of the most popular TV show\nmost_popular_show_id = data_popular_tv[\"results\"][0][\"id\"]\n\n# Get the credits (cast and crew) of the most popular TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{most_popular_show_id}/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the lead actor of the most popular TV show\nlead_actor = data_credits[\"cast\"][0][\"name\"]\n\nprint(f\"The lead actor of today's most popular TV show is: {lead_actor}\")\n```",
        "usage": [
            395,
            7530,
            7925
        ],
        "executed": "The lead actor of today's most popular TV show is: Dirk Galuba\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "results": "```python\nimport requests\n\n# Set the API url to get the list of popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the parameters to get the first page of popular TV shows\nparams = {\n    \"page\": 1\n}\n\n# Call the API to get the list of popular TV shows\nresponse = requests.get(url, headers=headers, params=params)\npopular_tv_shows = response.json()\n\n# Get the id of the most popular TV show\nmost_popular_show_id = popular_tv_shows['results'][0]['id']\n\n# Set the API url to get the credits of the most popular TV show\ncredits_url = f\"https://api.themoviedb.org/3/tv/{most_popular_show_id}/credits\"\n\n# Call the API to get the credits of the most popular TV show\nresponse_credits = requests.get(credits_url, headers=headers)\ncredits = response_credits.json()\n\n# Get the profile path of the lead actor of the most popular TV show\nlead_actor_profile_path = credits['cast'][0]['profile_path']\n\n# Print the full image url of the lead actor\nif lead_actor_profile_path:\n    image_url = f\"https://image.tmdb.org/t/p/w500{lead_actor_profile_path}\"\n    print(\"The photo of the lead actor of the most popular TV show of this week:\")\n    print(image_url)\nelse:\n    print(\"Lead actor profile path not available.\")\n```",
        "usage": [
            307,
            8336,
            8643
        ],
        "executed": "The photo of the lead actor of the most popular TV show of this week:\nhttps://image.tmdb.org/t/p/w500/yYjGRTKpBW2XHaBfoA8ilJtmXDq.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "results": "```python\nimport requests\n\n# Http header for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Cate Blanchett's latest TV show\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Cate Blanchett\",\n}\nresponse = requests.get(person_search_url, headers=headers, params=params)\nperson_id = response.json()['results'][0]['id']\n\n# Get the TV show credits for Cate Blanchett\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\nlatest_tv_show_id = response.json()['cast'][0]['id']\n\n# Get the reviews for Cate Blanchett's latest TV show\ntv_reviews_url = f\"https://api.themoviedb.org/3/tv/{latest_tv_show_id}/reviews\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(tv_reviews_url, headers=headers, params=params)\nreviews = response.json()['results']\n\nprint(reviews)\n```",
        "usage": [
            393,
            9605,
            9998
        ],
        "executed": "[]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for David Schwimmer\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\nresults = response.json()\n\n# Get David Schwimmer's ID\nperson_id = results['results'][0]['id']\n\n# Get the TV show credits for David Schwimmer\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(url, headers=headers)\ntv_credits = response.json()\n\n# Find the most popular TV show\nmax_popularity = 0.0\nmost_popular_tv_show = \"\"\nfor credit in tv_credits['cast']:\n    if credit['popularity'] > max_popularity:\n        max_popularity = credit['popularity']\n        most_popular_tv_show = credit['name']\n\nprint(most_popular_tv_show)\n```",
        "usage": [
            384,
            11778,
            12162
        ],
        "executed": "The Daily Show\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/42009/season/2\"\n\n# Define the parameters\nparams = {\n    \"api_key\": \"YOUR_API_KEY\" # Don't forget to replace YOUR_API_KEY with your actual API key\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the crew information for the third episode of the second season\n    for episode in data[\"episodes\"]:\n        if episode[\"episode_number\"] == 3:\n            for crew_member in episode[\"crew\"]:\n                if crew_member[\"job\"] == \"Director\":\n                    director_name = crew_member[\"name\"]\n                    print(f\"The director of the third episode of the second season of Black Mirror is: {director_name}\")\n                    break\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            229,
            11034,
            11263
        ],
        "executed": "The director of the third episode of the second season of Black Mirror is: Bryn Higgins\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "results": "```python\nimport requests\n\n# The API url to search for a person\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Parameters for the query\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\n\n# Adding the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Getting the results\nresults = response.json()\n\n# Extracting known_for movies of Christopher Nolan\nknown_for_movies = results['results'][0]['known_for']\n\n# Printing the known_for movies\nfor movie in known_for_movies:\n    print(movie['original_title'])\n```",
        "usage": [
            309,
            8942,
            9251
        ],
        "executed": "Inception\nInterstellar\nThe Dark Knight\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Function to get movie details by title\ndef get_movie_details(title):\n    url = \"https://api.themoviedb.org/3/search/movie\"\n    params = {\n        \"query\": title\n    }\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n    return data\n\n# Get movie details for Avatar\navatar_data = get_movie_details(\"Avatar\")\n\n# Get movie details for Avatar: The Way of Water\navatar_water_data = get_movie_details(\"Avatar: The Way of Water\")\n\n# Check which movie has a higher rating\nif avatar_data[\"results\"][0][\"vote_average\"] > avatar_water_data[\"results\"][0][\"vote_average\"]:\n    print(\"Avatar has a higher rating.\")\nelse:\n    print(\"Avatar: The Way of Water has a higher rating.\")\n```",
        "usage": [
            220,
            8830,
            9050
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"YOUR_API_KEY\"\n\n# Set the headers with the authorization token\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Set the base url for the discover movie API\nbase_url = \"https://api.themoviedb.org/3/discover/movie\"\n\n# Set the parameters for the API request\nparams = {\n    \"api_key\": api_key,\n    \"language\": \"en-US\",\n    \"sort_by\": \"vote_average.desc\",\n    \"vote_average.gte\": 7.0,\n    \"primary_release_date.gte\": \"2021-01-01\",\n    \"with_original_language\": \"en\",\n    \"page\": 1\n}\n\n# Make the API request\nresponse = requests.get(base_url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting relevant information from the response\nmovies = data[\"results\"]\n\nfor movie in movies:\n    title = movie[\"title\"]\n    release_date = movie[\"release_date\"]\n    rating = movie[\"vote_average\"]\n    print(f\"Title: {title}, Release Date: {release_date}, Rating: {rating}\")\n```",
        "usage": [
            247,
            11354,
            11601
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Lord of the Rings\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\"query\": \"Lord of the Rings\"}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the genre of the first movie in the search results\nfirst_movie_id = data_search_movie['results'][0]['id']\nurl_get_movie_details = f\"https://api.themoviedb.org/3/movie/{first_movie_id}\"\nparams_get_movie_details = {}\nresponse_get_movie_details = requests.get(url_get_movie_details, headers=headers, params=params_get_movie_details)\ndata_get_movie_details = response_get_movie_details.json()\n\n# Extract the genre of the movie\ngenre_ids = data_get_movie_details['genres']\ngenres = [genre['name'] for genre in genre_ids]\n\nprint(genres)\n```",
        "usage": [
            372,
            8538,
            8910
        ],
        "executed": "['Adventure', 'Fantasy', 'Action']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Sending the GET request\nresponse = requests.get(url, headers=headers)\n\n# Parsing the response and extracting the birthday of the most popular person\nif response.status_code == 200:\n    data = response.json()\n    most_popular_person = data['results'][0]  # The most popular person is the first entry in the 'results' list\n    birthday = most_popular_person['birthday']\n    print(\"The birthday of the most popular person right now is:\", birthday)\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            316,
            10568,
            10884
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "results": "```python\nimport requests\n\n# Define the headers containing the Bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Big Bang Theory\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Big Bang Theory\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show ID for \"Big Bang Theory\"\ntv_id = data_search_tv[\"results\"][0][\"id\"]\n\n# Get the images for the second season of \"Big Bang Theory\"\nurl_season_images = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/images\"\nresponse_season_images = requests.get(url_season_images, headers=headers)\ndata_season_images = response_season_images.json()\n\n# Extract the poster for the second season\nposter_path = data_season_images[\"posters\"][0][\"file_path\"]\nprint(poster_path)\n```",
        "usage": [
            375,
            8205,
            8580
        ],
        "executed": "/2NBwUBZ4clwj6qO9fBinfxiB0dR.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2/episode/3\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    third_episode_name = data[\"name\"]\n    print(\"Name of the third episode of the second season of Mandalorian:\", third_episode_name)\nelse:\n    print(\"Unable to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            303,
            11065,
            11368
        ],
        "executed": "Name of the third episode of the second season of Mandalorian: Chapter 11: The Heiress\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "results": "```python\nimport requests\n\n# Define the headers with the token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the movie The Shawshank Redemption to get the movie ID\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\nmovie_id = \"\"\nif response.status_code == 200:\n    result = response.json()\n    if result[\"total_results\"] > 0:\n        movie_id = result[\"results\"][0][\"id\"]\n\n# Step 2: Get the credits for the movie to find the lead actor\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\nlead_actor_birthday = \"\"\nif response.status_code == 200:\n    credits = response.json()\n    lead_actor_id = credits[\"cast\"][0][\"id\"]  # Assuming the first cast member is the lead actor\n\n    # Step 3: Get the details of the lead actor to retrieve birthday\n    person_details_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n    response = requests.get(person_details_url, headers=headers)\n    if response.status_code == 200:\n        person_details = response.json()\n        lead_actor_birthday = person_details[\"birthday\"]\n\nprint(\"Birthday of the lead actor of The Shawshank Redemption is:\", lead_actor_birthday)\n```",
        "usage": [
            486,
            9117,
            9603
        ],
        "executed": "Birthday of the lead actor of The Shawshank Redemption is: 1958-10-16\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# The Shawshank Redemption movie id\nmovie_id = 278\n\n# Call the movie details API to get the director information\nmovie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nparams = {\"append_to_response\": \"credits\"}\nresponse = requests.get(movie_details_url, headers=headers, params=params)\n\nif response.status_code == 200:\n    movie_details = response.json()\n    # Get the director's id from the credits section\n    credits = movie_details.get(\"credits\", {})\n    crew = credits.get(\"crew\", [])\n    director_id = None\n    for member in crew:\n        if member[\"job\"] == \"Director\":\n            director_id = member[\"id\"]\n            break\n    \n    if director_id:\n        # Call the person details API to get the birthday of the director\n        person_details_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n        response = requests.get(person_details_url, headers=headers)\n        \n        if response.status_code == 200:\n            director_details = response.json()\n            director_name = director_details.get(\"name\", \"\")\n            director_birthday = director_details.get(\"birthday\", \"\")\n            print(f\"The birthday of the director of The Shawshank Redemption ({director_name}) is on {director_birthday}.\")\n        else:\n            print(\"Failed to get director details.\")\n    else:\n        print(\"Director not found for the movie.\")\nelse:\n    print(\"Failed to get movie details.\")\n```",
        "usage": [
            314,
            8983,
            9297
        ],
        "executed": "The birthday of the director of The Shawshank Redemption (Frank Darabont) is on 1959-01-28.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# Set the API url for searching movies\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the query parameters to search for 'The Shawshank Redemption'\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\",\n    \"year\": 1994,\n    \"primary_release_year\": 1994\n}\n\n# Make the API request to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the company ID that created 'The Shawshank Redemption'\ncompany_id = data_search_movie['results'][0]['id']\n\n# Set the API url to get details of the company by ID\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\n\n# Make the API request to get details of the company\nresponse_company = requests.get(url_company, headers=headers)\ndata_company = response_company.json()\n\n# Get the headquarter location of the company\nheadquarter_location = data_company['headquarters']\n\nprint(headquarter_location)\n```",
        "usage": [
            261,
            9735,
            9996
        ],
        "executed": "\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "results": "```python\nimport requests\n\n# Define the API url for searching the collection\nurl = \"https://api.themoviedb.org/3/search/collection\"\n# Set the query parameter to search for the collection Star Wars\nparams = {\n    \"query\": \"Star Wars\"\n}\n# Make the GET request to search for the collection\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the company_id of the company that created the Star Wars collection\ncompany_id = None\nif data[\"total_results\"] > 0:\n    company_id = data[\"results\"][0][\"id\"]\n\n# If company_id is found, get the company details to find the headquarters\nheadquarters = None\nif company_id:\n    # Define the API url to get the company details by id\n    company_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    # Make the GET request to get the company details\n    company_response = requests.get(company_url, headers=headers)\n    company_data = company_response.json()\n    \n    # Extract the headquarters of the company\n    headquarters = company_data.get(\"headquarters\")\n\nprint(headquarters)\n```",
        "usage": [
            246,
            10809,
            11055
        ],
        "executed": "\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for 'The Double Life of Veronique'\nsearch_params_veronique = {\n    \"query\": \"The Double Life of Veronique\",\n    \"include_adult\": False\n}\nresponse_veronique = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=search_params_veronique)\nveronique_results = response_veronique.json()[\"results\"]\nveronique_release_date = veronique_results[0][\"release_date\"]\n\n# Search for 'Mulholland Drive'\nsearch_params_mulholland = {\n    \"query\": \"Mulholland Drive\",\n    \"include_adult\": False\n}\nresponse_mulholland = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=search_params_mulholland)\nmulholland_results = response_mulholland.json()[\"results\"]\nmulholland_release_date = mulholland_results[0][\"release_date\"]\n\n# Comparing release dates\nif veronique_release_date < mulholland_release_date:\n    print(\"The Double Life of Veronique has an earlier release date than Mulholland Drive.\")\nelse:\n    print(\"Mulholland Drive has an earlier release date than The Double Life of Veronique.\")\n```",
        "usage": [
            440,
            10625,
            11065
        ],
        "executed": "The Double Life of Veronique has an earlier release date than Mulholland Drive.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get credits (cast and crew) for TV show by id\ndef get_credits_for_tv_show(tv_id):\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    response = requests.get(url, headers=headers)\n    data = response.json()\n    return data\n\n# Function to get the director for a specific TV show\ndef get_director(tv_credits):\n    for crew_member in tv_credits['crew']:\n        if crew_member['job'] == 'Director':\n            return crew_member['name']\n    return None\n\n# Get the credits for Twin Peaks Season 1\ntwin_peaks_season_1_id = 82  # Twin Peaks Season 1 TV id\ntwin_peaks_season_1_credits = get_credits_for_tv_show(twin_peaks_season_1_id)\ndirector_twin_peaks_season_1 = get_director(twin_peaks_season_1_credits)\n\n# Get the credits for Mulholland Drive\nmulholland_drive_id = 321  # Mulholland Drive TV id\nmulholland_drive_credits = get_credits_for_tv_show(mulholland_drive_id)\ndirector_mulholland_drive = get_director(mulholland_drive_credits)\n\n# Check if the directors are the same\nif director_twin_peaks_season_1 is not None and director_mulholland_drive is not None:\n    if director_twin_peaks_season_1 == director_mulholland_drive:\n        print(f\"The director of Twin Peaks Season 1 and Mulholland Drive is the same person: {director_twin_peaks_season_1}\")\n    else:\n        print(\"The directors are different.\")\nelse:\n    print(\"Director information not found for one or both TV shows.\")\n```",
        "usage": [
            550,
            9129,
            9679
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie Mulholland Drive\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Mulholland Drive\"\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\nmovie_id = response_search_movie.json()[\"results\"][0][\"id\"]\n\n# Get the primary information about the movie Mulholland Drive\nurl_movie_info = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nparams_movie_info = {}\nresponse_movie_info = requests.get(url_movie_info, headers=headers, params=params_movie_info)\ndirector_id = response_movie_info.json()[\"belongs_to_collection\"][\"id\"]\n\n# Get the primary person details for the director of Mulholland Drive\nurl_director_info = f\"https://api.themoviedb.org/3/person/{director_id}\"\nparams_director_info = {}\nresponse_director_info = requests.get(url_director_info, headers=headers, params=params_director_info)\ndirector_birthplace = response_director_info.json()[\"place_of_birth\"]\n\nprint(\"The director of Mulholland Drive was born in:\", director_birthplace)\n```",
        "usage": [
            423,
            9254,
            9677
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "results": "```python\nimport requests\n\n# API url to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Parameters for the API call\nparams = {\n    \"page\": 1\n}\n\n# Headers needed for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    # Extract the list of movies from the response\n    movie_list = response.json()[\"results\"]\n    \n    # Check if Mulholland Drive is in the top-10 rated list\n    mulholland_drive_in_top_10 = False\n    for i, movie in enumerate(movie_list):\n        if movie[\"title\"] == \"Mulholland Drive\":\n            print(\"Mulholland Drive is in the top rated list at position:\", i+1)\n            mulholland_drive_in_top_10 = True\n            break\n    if not mulholland_drive_in_top_10:\n        print(\"Mulholland Drive is not in the top-10 rated list.\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            417,
            8399,
            8816
        ],
        "executed": "Mulholland Drive is not in the top-10 rated list.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"YOUR_API_KEY\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Define the API urls to get the credits for the directors' movies\nakira_kurosawa_url = \"https://api.themoviedb.org/3/search/person\"\nspielberg_url = \"https://api.themoviedb.org/3/search/person\"\n\n# Search for Akira Kurosawa\nakira_params = {\n    \"query\": \"Akira Kurosawa\",\n    \"include_adult\": \"false\"\n}\nakira_response = requests.get(akira_kurosawa_url, headers=headers, params=akira_params)\nakira_data = akira_response.json()\n\n# Search for Spielberg\nspielberg_params = {\n    \"query\": \"Steven Spielberg\",\n    \"include_adult\": \"false\"\n}\nspielberg_response = requests.get(spielberg_url, headers=headers, params=spielberg_params)\nspielberg_data = spielberg_response.json()\n\n# Count the total number of movies directed by each director\nakira_movie_count = 0\nspielberg_movie_count = 0\n\nif akira_response.status_code == 200:\n    # Check the results for Akira Kurosawa\n    for person in akira_data[\"results\"]:\n        if person[\"name\"] == \"Akira Kurosawa\":\n            akira_id = person[\"id\"]\n            akira_movie_credits_url = f\"https://api.themoviedb.org/3/person/{akira_id}/movie_credits\"\n            akira_credits_response = requests.get(akira_movie_credits_url, headers=headers)\n            if akira_credits_response.status_code == 200:\n                akira_movie_count = len(akira_credits_response.json()[\"crew\"])\n            break\n\nif spielberg_response.status_code == 200:\n    # Check the results for Spielberg\n    for person in spielberg_data[\"results\"]:\n        if person[\"name\"] == \"Steven Spielberg\":\n            spielberg_id = person[\"id\"]\n            spielberg_movie_credits_url = f\"https://api.themoviedb.org/3/person/{spielberg_id}/movie_credits\"\n            spielberg_credits_response = requests.get(spielberg_movie_credits_url, headers=headers)\n            if spielberg_credits_response.status_code == 200:\n                spielberg_movie_count = len(spielberg_credits_response.json()[\"crew\"])\n            break\n\n# Compare the movie counts for Akira Kurosawa and Spielberg\nif akira_movie_count > spielberg_movie_count:\n    print(\"Akira Kurosawa directed more movies.\")\nelif spielberg_movie_count > akira_movie_count:\n    print(\"Steven Spielberg directed more movies.\")\nelse:\n    print(\"Both Akira Kurosawa and Steven Spielberg directed the same number of movies.\")\n```",
        "usage": [
            591,
            11116,
            11707
        ],
        "executed": "Both Akira Kurosawa and Steven Spielberg directed the same number of movies.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "results": "```python\nimport requests\n\n# Define the headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the director of Mulholland Drive (David Lynch)\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params={\"query\": \"David Lynch\"})\ndirector_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the TV show credits for the director\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{director_id}/tv_credits\", headers=headers)\ntv_credits = response.json()[\"cast\"]\n\n# Find the TV shows directed by the director\ntv_series_directed = []\nfor credit in tv_credits:\n    if credit[\"job\"] == \"Director\":\n        tv_series_directed.append(credit[\"name\"])\n\nprint(tv_series_directed)\n```",
        "usage": [
            336,
            11104,
            11440
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "results": "```python\nimport requests\n\n# API url to get person details by id\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Parameters for the query\nparams = {\n    \"query\": \"Scarlett Johansson\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Adding the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parsing the JSON response\ndata = response.json()\n\n# Getting the id of Scarlett Johansson from the response\nperson_id = data['results'][0]['id']\n\n# API url to get person details by id\nurl = f\"https://api.themoviedb.org/3/person/{person_id}\"\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Parsing the JSON response\ndata = response.json()\n\n# Getting the birthday of Scarlett Johansson\nbirthday = data['birthday']\nprint(\"Scarlett Johansson's birthday is:\", birthday)\n```",
        "usage": [
            381,
            8625,
            9006
        ],
        "executed": "Scarlett Johansson's birthday is: 1984-11-22\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the TV show Sword Art Online\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Sword Art Online\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_tv_url, headers=headers, params=params)\nsearch_results = response.json()\n\n# Step 2: Get the details of Sword Art Online TV show\nif search_results['total_results'] > 0:\n    tv_id = search_results['results'][0]['id']\n    \n    # Call API to get TV show details\n    tv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    params = {}\n    response = requests.get(tv_details_url, headers=headers, params=params)\n    tv_details = response.json()\n    \n    # Get the number of seasons\n    num_seasons = tv_details['number_of_seasons']\n    print(f\"The number of seasons of Sword Art Online is: {num_seasons}\")\nelse:\n    print(\"Sword Art Online TV show not found.\")\n```",
        "usage": [
            404,
            9081,
            9485
        ],
        "executed": "The number of seasons of Sword Art Online is: 4\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "results": "```python\nimport requests\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Yui Aragaki movies\nparams_yui = {\n    \"query\": \"Yui Aragaki\",\n    \"include_adult\": False\n}\nresponse_yui = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params_yui)\ndata_yui = response_yui.json()\nyui_id = data_yui[\"results\"][0][\"id\"]\n\n# Search for Gen Hoshino movies\nparams_gen = {\n    \"query\": \"Gen Hoshino\",\n    \"include_adult\": False\n}\nresponse_gen = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params_gen)\ndata_gen = response_gen.json()\ngen_id = data_gen[\"results\"][0][\"id\"]\n\n# Search for the TV show \"We Married as Job\" to check if both Yui Aragaki and Gen Hoshino are in the cast\nparams_show = {\n    \"query\": \"We Married as Job\",\n    \"include_adult\": False\n}\nresponse_show = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params_show)\ndata_show = response_show.json()\nshow_id = data_show[\"results\"][0][\"id\"]\n\n# Get the credits for the TV show to check if both Yui Aragaki and Gen Hoshino are in the cast\nresponse_credits = requests.get(f\"https://api.themoviedb.org/3/tv/{show_id}/credits\", headers=headers)\ndata_credits = response_credits.json()\n\n# Check if both Yui Aragaki and Gen Hoshino are in the cast\nyui_in_cast = any(actor[\"id\"] == yui_id for actor in data_credits[\"cast\"])\ngen_in_cast = any(actor[\"id\"] == gen_id for actor in data_credits[\"cast\"])\n\nif yui_in_cast and gen_in_cast:\n    print(\"Yui Aragaki and Gen Hoshino are co-starring in 'We Married as Job'.\")\nelse:\n    print(\"Yui Aragaki and Gen Hoshino are not co-starring in 'We Married as Job'.\")\n```",
        "usage": [
            641,
            9343,
            9984
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ]
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "results": "```python\nimport requests\n\n# Define headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get person details by id\ndef get_person_details(person_id):\n    url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        data = response.json()\n        return data\n    return None\n\n# Get the details of the director of the film \"Barbie\"\nbarbie_movie_director_id = 123  # Add the correct movie director id for Barbie movie\nbarbie_director_details = get_person_details(barbie_movie_director_id)\n\n# Get the details of the lead actor of the television show \"DEATH NOTE\"\ndeath_note_tv_lead_actor_id = 456  # Add the correct lead actor id for Death Note TV show\ndeath_note_lead_actor_details = get_person_details(death_note_tv_lead_actor_id)\n\n# Calculate the age difference in years\nif barbie_director_details and death_note_lead_actor_details:\n    barbie_birth_year = int(barbie_director_details['birthday'][:4])\n    death_note_birth_year = int(death_note_lead_actor_details['birthday'][:4])\n    \n    age_difference = abs(barbie_birth_year - death_note_birth_year)\n    \n    print(f\"The director of Barbie is older than the lead actor of DEATH NOTE by {age_difference} years.\")\n```",
        "usage": [
            459,
            10925,
            11384
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "results": "```python\nimport requests\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Katherine LaNasa\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\"query\": \"Katherine LaNasa\", \"include_adult\": False}  # Specify the query and exclude adult content\nresponse = requests.get(search_person_url, headers=headers, params=params)\nresults = response.json()\nperson_id = results['results'][0]['id']  # Get the person id of Katherine LaNasa\n\n# Get Katherine LaNasa's movie credits\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovie_credits = response.json()\n\n# Get details of the latest movie appearance\nlatest_movie = movie_credits['cast'][0]\nprint(\"Katherine LaNasa's latest movie appearance:\")\nprint(f\"Movie: {latest_movie['title']}\")\nprint(f\"Character: {latest_movie['character']}\")\nprint(f\"Release Date: {latest_movie['release_date']}\")\n```",
        "usage": [
            404,
            9353,
            9757
        ],
        "executed": "Katherine LaNasa's latest movie appearance:\nMovie: Black Karen\nCharacter: Therapist\nRelease Date: 2022-01-23\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Oppenheimer\"\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Oppenheimer\"\n}\nsearch_response = requests.get(search_movie_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the cover image of the first movie in the search results\nif search_results[\"total_results\"] > 0:\n    first_movie_id = search_results[\"results\"][0][\"id\"]\n    images_url = f\"https://api.themoviedb.org/3/movie/{first_movie_id}/images\"\n    images_response = requests.get(images_url, headers=headers)\n    images_data = images_response.json()\n\n    # Display the first cover image if available\n    if images_data[\"posters\"]:\n        first_poster_path = images_data[\"posters\"][0][\"file_path\"]\n        full_url = f\"https://image.tmdb.org/t/p/original{first_poster_path}\"\n        print(full_url)\n    else:\n        print(\"No cover image found for the movie Oppenheimer.\")\nelse:\n    print(\"No results found for the movie Oppenheimer.\")\n```",
        "usage": [
            420,
            9303,
            9723
        ],
        "executed": "https://image.tmdb.org/t/p/original/8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    }
]