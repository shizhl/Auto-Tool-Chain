[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person ID of Sofia Coppola\nparams = {\n    \"query\": \"Sofia Coppola\",\n    \"page\": 1,\n    \"include_adult\": \"false\"\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\ndata = response.json()\n\n# Extract the person ID for Sofia Coppola\nperson_id = None\nif data[\"total_results\"] > 0:\n    person_id = data[\"results\"][0][\"id\"]\n\n# Get the movie credits for Sofia Coppola\nnum_movies_directed = 0\nif person_id:\n    response = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\", headers=headers)\n    data = response.json()\n    \n    # Count the number of movies directed\n    for credit in data[\"crew\"]:\n        if credit[\"job\"] == \"Director\":\n            num_movies_directed += 1\n\nprint(num_movies_directed)\n```",
        "usage": [
            388,
            10662,
            11050
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie 'The Dark Knight'\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Dark Knight\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nmovie_id = response.json()[\"results\"][0][\"id\"]  # Get the movie_id of 'The Dark Knight'\n\n# Get the cast and crew for the movie using the movie_id\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncast = response.json()[\"cast\"]\n\n# Find the lead actor in the cast\nlead_actor = None\nfor member in cast:\n    if member[\"order\"] == 0:  # 'order' 0 typically refers to the lead actor\n        lead_actor = member[\"name\"]\n        break\n\nprint(f\"The lead actor in the movie 'The Dark Knight' was: {lead_actor}\")\n```  ",
        "usage": [
            386,
            8718,
            9104
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "results": "```python\nimport requests\n\n# Define the API url to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the parameters for the API request\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the director of the top-1 rated movie\nif 'results' in data and len(data['results']) > 0:\n    top_movie_id = data['results'][0]['id']\n    movie_credits_url = f\"https://api.themoviedb.org/3/movie/{top_movie_id}/credits\"\n    credits_response = requests.get(movie_credits_url, headers=headers)\n    credits_data = credits_response.json()\n    director = None\n    if 'crew' in credits_data:\n        for crew_member in credits_data['crew']:\n            if crew_member['job'] == 'Director':\n                director = crew_member['name']\n                break\n    if director:\n        print(f\"The director of the top-1 rated movie is: {director}\")\n    else:\n        print(\"Director information not found.\")\nelse:\n    print(\"No top rated movies found.\")\n```",
        "usage": [
            443,
            11271,
            11714
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "give me a image for the collection Star Wars",
        "results": "```python\nimport requests\n\n# Define the API url and parameters for searching the collection\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Star Wars\"\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to search for the collection\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Extract the image path for the collection \"Star Wars\"\n    result = response.json()\n    if len(result['results']) > 0:\n        collection_id = result['results'][0]['id']\n        \n        # Define the API url to get images for the specific collection\n        images_url = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\n        \n        # Make a GET request to get images for the collection\n        images_response = requests.get(images_url, headers=headers)\n        \n        # Check if the images response is successful\n        if images_response.status_code == 200:\n            images_result = images_response.json()\n            if 'backdrops' in images_result:\n                # Print the backdrop image path of the collection \"Star Wars\"\n                if len(images_result['backdrops']) > 0:\n                    print(\"Backdrop Image Path for Star Wars Collection:\")\n                    print(images_result['backdrops'][0]['file_path'])\n                else:\n                    print(\"No backdrop image found for the Star Wars collection\")\n            else:\n                print(\"No backdrop images found for the Star Wars collection\")\n        else:\n            print(\"Failed to get images for the collection - Status Code:\", images_response.status_code)\n    else:\n        print(\"No collection found for the query\")\nelse:\n    print(\"Failed to search for the collection - Status Code:\", response.status_code)\n```",
        "usage": [
            546,
            9392,
            9938
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for companies\nurl = \"https://api.themoviedb.org/3/search/company\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the parameters for the search query\nparams = {\n    \"query\": \"Walt Disney\"\n}\n\n# Make the HTTP GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Check if there are any results\n    if data[\"total_results\"] > 0:\n        # Extract the logo path of the first result\n        logo_path = data[\"results\"][0][\"logo_path\"]\n        print(f\"The logo path of Walt Disney is: {logo_path}\")\n    else:\n        print(\"No results found for the query.\")\nelse:\n    print(\"Error in fetching data.\")\n```",
        "usage": [
            354,
            10863,
            11217
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "results": "```python\nimport requests\n\n# API url to search for the movie \"Titanic\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Check if the movie \"Titanic\" was found\nif data_search_movie['total_results'] > 0:\n    # Get the movie ID of the first result\n    movie_id = data_search_movie['results'][0]['id']\n\n    # API url to get the credits for the movie with the obtained movie_id\n    url_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response_movie_credits = requests.get(url_movie_credits, headers=headers)\n    data_movie_credits = response_movie_credits.json()\n\n    # Get the lead actor information\n    lead_actor = data_movie_credits['cast'][0]\n    lead_actor_name = lead_actor['name']\n    lead_actor_profile_path = lead_actor['profile_path']\n    \n    if lead_actor_profile_path:\n        # Get the image of the lead actor (if available)\n        image_base_url = \"https://image.tmdb.org/t/p/w500\"\n        lead_actor_image_url = image_base_url + lead_actor_profile_path\n        print(f\"The lead actor of Titanic, {lead_actor_name}, looks like:\")\n        print(lead_actor_image_url)\n    else:\n        print(f\"The lead actor of Titanic, {lead_actor_name}, does not have an available profile image.\")\nelse:\n    print(\"The movie Titanic was not found.\")\n```",
        "usage": [
            364,
            10136,
            10500
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "results": "```python\nimport requests\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movies similar to Titanic\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1\n}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie id of the first similar movie to Titanic\nmovie_id = data['results'][0]['id']\n\n# Get reviews of the first movie similar to Titanic\nreviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(reviews_url, headers=headers, params=params)\nreviews_data = response.json()\n\n# Print the reviews\nfor review in reviews_data['results']:\n    print(f\"Author: {review['author']}\")\n    print(f\"Content: {review['content']}\")\n    print(\"------------------------------\")\n```",
        "usage": [
            379,
            9566,
            9945
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "results": "```python\nimport requests\n\n# Define the API endpoint to get recommendations for a movie\nurl = \"https://api.themoviedb.org/3/movie/597/recommendations\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Define the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie recommendations from the response\n    recommendations = response.json().get(\"results\", [])\n    \n    # Print the list of recommended movies\n    for movie in recommendations:\n        print(movie[\"title\"])\nelse:\n    print(\"Failed to get recommendations. Status code:\", response.status_code)\n```",
        "usage": [
            327,
            10204,
            10531
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "results": "```python\nimport requests\n\n# Set the API URL for searching movies\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Parameters for searching Christopher Nolan\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()[\"results\"]\n    \n    if results:\n        # Get the person id for Christopher Nolan\n        person_id = results[0][\"id\"]\n        \n        # Set the API URL for getting movie credits of the director\n        movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n        \n        # Make the API request to get movie credits\n        movie_credits_response = requests.get(movie_credits_url, headers=headers)\n        \n        # Check if the request was successful\n        if movie_credits_response.status_code == 200:\n            # Get the movie credits\n            movie_credits = movie_credits_response.json()\n            \n            # Get the latest movie directed by Christopher Nolan\n            latest_movie = movie_credits[\"crew\"][0][\"title\"]\n            \n            print(f\"The latest movie directed by Christopher Nolan is: {latest_movie}\")\n        else:\n            print(\"Error in getting movie credits data\")\n    else:\n        print(\"No results found for Christopher Nolan\")\nelse:\n    print(\"Error in searching for Christopher Nolan\")\n```",
        "usage": [
            324,
            8597,
            8921
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "results": "```python\nimport requests\n\n# Define the HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Get the list of movies directed by Martin Scorsese\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\"query\": \"Martin Scorsese\", \"include_adult\": False}\nresponse = requests.get(url, headers=headers, params=params)\nscorsese_id = response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get the movie credits for Martin Scorsese\nurl = f\"https://api.themoviedb.org/3/person/{scorsese_id}/movie_credits\"\nresponse = requests.get(url, headers=headers)\nmovie_credits = response.json()[\"cast\"]\n\n# Step 3: Find the highest rated movie directed by Martin Scorsese\nhighest_rated_movie = None\nhighest_rating = 0\nfor movie in movie_credits:\n    if movie[\"vote_average\"] > highest_rating:\n        highest_rating = movie[\"vote_average\"]\n        highest_rated_movie = movie\n\n# Step 4: Get the details of the highest rated movie\nurl = f\"https://api.themoviedb.org/3/movie/{highest_rated_movie['id']}\"\nparams = {\"append_to_response\": \"credits\"}\nresponse = requests.get(url, headers=headers, params=params)\nhighest_rated_movie_details = response.json()\n\nprint(highest_rated_movie_details[\"title\"])  # Output the title of the highest rated movie\n```",
        "usage": [
            472,
            12151,
            12623
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Leonardo DiCaprio's latest movie\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Leonardo DiCaprio\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person ID of Leonardo DiCaprio\nperson_id = data['results'][0]['id']\n\n# Get the movie credits of Leonardo DiCaprio\nperson_movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(person_movie_credits_url, headers=headers)\ndata = response.json()\n\n# Get the latest movie of Leonardo DiCaprio\nlatest_movie = data['cast'][0]\n\n# Get the movie details to find the director\nmovie_id = latest_movie['id']\nmovie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nresponse = requests.get(movie_details_url, headers=headers)\ndata = response.json()\n\n# Extract the director of the movie\nfor crew_member in data['credits']['crew']:\n    if crew_member['job'] == 'Director':\n        director = crew_member['name']\n        break\n\n# Output the director of Leonardo DiCaprio's latest movie\nprint(f\"The director of Leonardo DiCaprio's latest movie is: {director}\")\n```",
        "usage": [
            475,
            9647,
            10122
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people with the name 'Catherine Hardwicke'\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nperson_params = {\n    \"query\": \"Catherine Hardwicke\",\n    \"include_adult\": False\n}\nresponse = requests.get(person_search_url, headers=headers, params=person_params)\nperson_results = response.json()\n\n# Check if the person was found\nif person_results['total_results'] > 0:\n    person_id = person_results['results'][0]['id']\n\n    # Get the list of TV show credits for the person\n    tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n    response = requests.get(tv_credits_url, headers=headers)\n    tv_credits = response.json()\n\n    # Find a recent TV show directed by Catherine Hardwicke\n    for credit in tv_credits['crew']:\n        if credit['job'] == \"Director\":\n            print(f\"Recently directed TV show by Catherine Hardwicke: {credit['name']}\")\n            break\nelse:\n    print(\"Person not found\")\n```",
        "usage": [
            426,
            9949,
            10375
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Breaking Bad\" using the search/tv API\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Breaking Bad\"  # Define the query as \"Breaking Bad\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\nbreaking_bad_id = response_search_tv.json()['results'][0]['id']  # Get the ID of Breaking Bad\n\n# Get TV show recommendations for Breaking Bad using the tv/{tv_id}/recommendations API\nurl_recommendations = f\"https://api.themoviedb.org/3/tv/{breaking_bad_id}/recommendations\"\nparams_recommendations = {\n    \"page\": 1  # Specify the page as 1\n}\nresponse_recommendations = requests.get(url_recommendations, headers=headers, params=params_recommendations)\nrecommended_shows = response_recommendations.json()['results']\n\n# Output the recommended TV shows\nfor show in recommended_shows:\n    print(show['name'])\n```",
        "usage": [
            398,
            11048,
            11446
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "results": "```python\nimport requests\n\n# Define the API url to get today's most trending movie\nurl = \"https://api.themoviedb.org/3/trending/movie/day\"\n# Define the API parameters (none required for this endpoint)\nparams = {}\n\n# Set the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie data from the API response\n    movie_data = response.json()[\"results\"][0]  # Taking the first movie from the list (assumes it is the most trending)\n    \n    # Get the movie id to fetch the credits\n    movie_id = movie_data[\"id\"]\n    \n    # Define the API url to get the credits of the most trending movie\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    \n    # Make the API request to get the credits\n    credits_response = requests.get(credits_url, headers=headers)\n    \n    # Check if the credits request was successful\n    if credits_response.status_code == 200:\n        # Get the crew data from the credits API response\n        crew_data = credits_response.json()[\"crew\"]\n        \n        # Find the director from the crew data\n        director = [member[\"name\"] for member in crew_data if member[\"job\"] == \"Director\"]\n        \n        # Print the director of the most trending movie\n        if director:\n            print(f\"The director of today's most trending movie is: {director[0]}\")\n        else:\n            print(\"Director information not available.\")\n    else:\n        print(\"Error fetching credits for trending movie.\")\nelse:\n    print(\"Error fetching trending movies.\")\n\n```",
        "usage": [
            533,
            10135,
            10668
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "results": "```python\nimport requests\n\n# Define the headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Twilight\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\"query\": \"Twilight\"}\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie_id of \"Twilight\"\nmovie_id = data['results'][0]['id']\n\n# Get the credits for the movie \"Twilight\" to find the director\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits_data = response.json()\n\n# Extract the director from the credits\ncrew = credits_data['crew']\ndirector = None\nfor member in crew:\n    if member['job'] == 'Director':\n        director = member['name']\n        break\n\nprint(f\"The director of the movie 'Twilight' is: {director}\")\n```",
        "usage": [
            373,
            9162,
            9535
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "results": "```python\nimport requests\n\n# Http header to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the tv show \"The Witcher\"\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_tv_params = {\n    \"query\": \"The Witcher\",\n    \"page\": 1\n}\nsearch_tv_response = requests.get(search_tv_url, headers=headers, params=search_tv_params).json()\n\n# Get the TV show id of \"The Witcher\"\ntv_id = search_tv_response[\"results\"][0][\"id\"]\n\n# Get the images that belong to the first season of The Witcher\nseason_episode_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1/episode/2/images\"\nseason_episode_response = requests.get(season_episode_url, headers=headers).json()\n\n# Extract the photo file path of the second episode of the first season of The Witcher\nepisode_photo = season_episode_response[\"stills\"][0][\"file_path\"]\n\nprint(\"Photo URL:\", episode_photo)\n```",
        "usage": [
            385,
            8466,
            8851
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "What is top-1 rated movie?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the parameters for the request\nparams = {\n    \"page\": 1,  # We are interested in the first page\n}\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Get the top-1 movie from the results\n    top_rated_movie = data[\"results\"][0][\"title\"]\n    print(\"Top-1 rated movie is:\", top_rated_movie)\nelse:\n    print(\"Failed to retrieve data\")",
        "usage": [
            335,
            11359,
            11694
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Matrix\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\"query\": \"The Matrix\"}\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie ID of \"The Matrix\"\nmovie_id = data[\"results\"][0][\"id\"]\n\n# Get the release dates for the movie by movie ID\nrelease_date_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\nresponse = requests.get(release_date_url, headers=headers)\nrelease_dates = response.json()\n\n# Extract the release date of the movie \"The Matrix\"\nfor result in release_dates[\"results\"]:\n    if result[\"iso_3166_1\"] == \"US\":\n        release_date = result[\"release_dates\"][0][\"release_date\"]\n        break\n\nprint(\"The release date of the movie 'The Matrix' is:\", release_date)\n```",
        "usage": [
            378,
            9825,
            10203
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "Who is the most popular person?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()\n    # Check if there are any results\n    if results[\"total_results\"] > 0:\n        # Get the most popular person\n        most_popular_person = results[\"results\"][0][\"name\"]\n        print(f\"The most popular person is: {most_popular_person}\")\n    else:\n        print(\"No popular person found\")\nelse:\n    # Print an error message if the request was not successful\n    print(f\"Error: {response.status_code}\")\n```",
        "usage": [
            360,
            9338,
            9698
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people to get the ID of Christopher Nolan\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the movie credits for Christopher Nolan\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovies = response.json()[\"cast\"]\n\n# Get the cover images for the movies directed by Christopher Nolan\ncover_images = []\nfor movie in movies:\n    if \"poster_path\" in movie:\n        cover_images.append(movie[\"poster_path\"])\n\nprint(cover_images)\n```",
        "usage": [
            349,
            12563,
            12912
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\" to get its id\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the keywords associated with the movie \"Titanic\"\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\nresponse = requests.get(keywords_url, headers=headers)\nkeywords = response.json()[\"keywords\"]\n\n# Extract the keyword names\nkeyword_names = [keyword[\"name\"] for keyword in keywords]\nprint(keyword_names)\n```",
        "usage": [
            340,
            8638,
            8978
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "Give me a show that is currently on the air",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Define the parameters\nparams = {\n    \"page\": 1  # You can change the page number if needed\n}\n\n# Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Print the response\nprint(response.json())\n```",
        "usage": [
            258,
            7227,
            7485
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "results": "```python\nimport requests\n\n# Headers containing authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Search for Clint Eastwood\nquery = \"Clint Eastwood\"\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\"query\": query}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nresults = response.json()[\"results\"]\n\n# Get Clint Eastwood's latest movie release date\nif len(results) > 0:\n    clint_eastwood_id = results[0][\"id\"]\n    # 2. Get Clint Eastwood's movie credits\n    get_movie_credits_url = f\"https://api.themoviedb.org/3/person/{clint_eastwood_id}/movie_credits\"\n    response = requests.get(get_movie_credits_url, headers=headers)\n    movie_credits = response.json()\n    \n    # Take the latest movie by Clint Eastwood for release date\n    latest_movie_release_date = None\n    if \"cast\" in movie_credits:\n        movie_credits = movie_credits[\"cast\"]\n        if len(movie_credits) > 0:\n            latest_movie_release_date = movie_credits[0][\"release_date\"]\n    \n    print(\"Clint Eastwood's latest movie is scheduled to be released on:\", latest_movie_release_date)\nelse:\n    print(\"Could not find information for Clint Eastwood\")\n```",
        "usage": [
            453,
            11258,
            11711
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Prepare the headers with the provided authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the query parameter for searching movies\nparams = {\n    \"query\": \"The Dark Knight\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the movie results\n    movie_results = response.json()[\"results\"]\n    \n    # Check if there are movie results\n    if movie_results:\n        # Get the movie id for The Dark Knight movie\n        movie_id = movie_results[0][\"id\"]\n        \n        # Define the API url to get reviews for the movie\n        reviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n        \n        # Make the API request to get reviews for the movie\n        reviews_response = requests.get(reviews_url, headers=headers)\n        \n        # Check if the reviews response is successful\n        if reviews_response.status_code == 200:\n            # Get the reviews for The Dark Knight movie\n            movie_reviews = reviews_response.json()[\"results\"]\n            print(movie_reviews)\n        else:\n            print(\"Failed to get movie reviews.\")\n    else:\n        print(\"No movie found for the query.\")\nelse:\n    print(\"Failed to search for movies.\")\n```",
        "usage": [
            465,
            11358,
            11823
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for a person\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the parameters to search for Francis Ford Coppola\nparams = {\n    \"query\": \"Francis Ford Coppola\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Make the API request to search for Francis Ford Coppola\nresponse = requests.get(person_search_url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the person_id of Francis Ford Coppola\n    person_results = response.json()[\"results\"]\n    if person_results:\n        person_id = person_results[0][\"id\"]\n        \n        # Define the API endpoint to get movie credits for the person\n        movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n        # Make the API request to get movie credits\n        movie_credits_response = requests.get(movie_credits_url, headers=headers)\n\n        # Check if the movie credits response is successful\n        if movie_credits_response.status_code == 200:\n            # Get a movie directed by Francis Ford Coppola\n            movies_directed_by_coppola = movie_credits_response.json()[\"crew\"]\n            coppola_movie_id = None\n            for movie in movies_directed_by_coppola:\n                if movie[\"job\"] == \"Director\":\n                    coppola_movie_id = movie[\"id\"]\n                    break\n            \n            # If we found a movie directed by Francis Ford Coppola, get a list of similar movies\n            if coppola_movie_id:\n                similar_movies_url = f\"https://api.themoviedb.org/3/movie/{coppola_movie_id}/similar\"\n                params = {\"page\": 1}\n                similar_movies_response = requests.get(similar_movies_url, headers=headers, params=params)\n\n                # Check if the similar movies response is successful\n                if similar_movies_response.status_code == 200:\n                    # Get the list of similar movies\n                    similar_movies = similar_movies_response.json()[\"results\"]\n                    print(similar_movies)\n                else:\n                    print(\"Failed to get similar movies\")\n            else:\n                print(\"No movie directed by Francis Ford Coppola found\")\n        else:\n            print(\"Failed to get movie credits\")\n    else:\n        print(\"No person found for Francis Ford Coppola\")\nelse:\n    print(\"Failed to search for person\")  \n```",
        "usage": [
            527,
            8862,
            9389
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "results": "```python\nimport requests\n\n# Define the API url to get the latest released movie\nurl = \"https://api.themoviedb.org/3/movie/latest\"\n\n# Define the headers with the Authorization key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Get the lead actor from the response\n    lead_actor = data['cast'][0]['name'] if data['cast'] else \"Lead actor information not available\"\n    print(f\"The lead actor in the latest released movie is: {lead_actor}\")\nelse:\n    print(\"Error in fetching data from the API\")\n```",
        "usage": [
            325,
            11690,
            12015
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "results": "```python\nimport requests\n\n# API url for getting a list of movies currently in theaters\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Define the parameters for the request\nparams = {\n    \"page\": 1  # Specify the page to query\n}\n\n# Define the header with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call with GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    # Get the URL of the first movie poster (image-path)\n    poster_path = response.json()[\"results\"][0][\"poster_path\"]\n    image_url = f\"https://image.tmdb.org/t/p/original{poster_path}\"  # Construct the full image URL\n    print(image_url)  # Print the image URL\nelse:\n    print(\"Failed to retrieve the image\")\n```",
        "usage": [
            357,
            11030,
            11387
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "results": "```python\nimport requests\n\n# API url to get the list of current popular movies\nurl_popular_movies = \"https://api.themoviedb.org/3/movie/popular\"\nparams = {\n    \"page\": 1,  # Specify the first page\n    \"region\": \"US\"  # Specify the region, for example, US\n}\n\n# Requesting the list of popular movies\nresponse_popular = requests.get(url_popular_movies, headers=headers, params=params)\ndata_popular = response_popular.json()\n\n# Getting the most popular movie details\nmost_popular_movie = data_popular[\"results\"][0]\nmovie_id = most_popular_movie[\"id\"]\n\n# API url to get the keywords for the most popular movie\nurl_movie_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n\n# Requesting the keywords for the most popular movie\nresponse_keywords = requests.get(url_movie_keywords, headers=headers)\nkeywords_data = response_keywords.json()\n\n# Printing the most popular movie details and its keywords\nprint(\"Most Popular Movie Details:\")\nprint(\"Title:\", most_popular_movie[\"title\"])\nprint(\"Overview:\", most_popular_movie[\"overview\"])\nprint(\"Release Date:\", most_popular_movie[\"release_date\"])\nprint(\"Popularity:\", most_popular_movie[\"popularity\"])\nprint(\"Vote Average:\", most_popular_movie[\"vote_average\"])\nprint(\"\\nKeywords:\")\nfor keyword in keywords_data[\"keywords\"]:\n    print(keyword[\"name\"])\n```",
        "usage": [
            306,
            10705,
            11011
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/movie/popular\"\nparams = {\n    \"api_key\": \"YOUR_API_KEY_HERE\" # replace with your actual API key\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie ID of the most popular movie\n    movie_id = response.json()[\"results\"][0][\"id\"]\n\n    # Call the API to get the keywords of the most popular movie\n    keywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n    keywords_response = requests.get(keywords_url, headers=headers)\n    \n    # Get the keywords from the response\n    keywords = keywords_response.json()[\"keywords\"]\n    \n    # Print the keywords\n    print(\"Keywords of the most popular movie right now:\")\n    for keyword in keywords:\n        print(keyword[\"name\"])\nelse:\n    print(\"Error: Unable to retrieve data\")\n```",
        "usage": [
            401,
            8418,
            8819
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "results": "```python\nimport requests\n\n# API url to search for the movie \"Titanic\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Parameters for searching the movie \"Titanic\"\nparams_search_movie = {\n    \"query\": \"Titanic\",  # Search query for the movie \"Titanic\"\n    \"include_adult\": False,  # Exclude adult content\n    \"page\": 1  # Specify the page to query\n}\n\n# Call the API to search for the movie \"Titanic\"\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Retrieve the movie_id of the movie \"Titanic\" from the search results\nmovie_id = data_search_movie[\"results\"][0][\"id\"]\n\n# API url to get the credits (cast and crew) for the movie with movie_id\nurl_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Call the API to get the credits for the movie \"Titanic\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Extract the cast information from the credits\ncast_info = data_credits[\"cast\"]\n\n# Get the names of the actors who starred in the movie \"Titanic\"\nactors = [actor[\"name\"] for actor in cast_info]\n\n# Print the list of actors who starred in the movie \"Titanic\"\nprint(\"Actors who starred in the movie Titanic:\")\nfor actor in actors:\n    print(actor)\n```",
        "usage": [
            332,
            11334,
            11666
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "results": "```python\nimport requests\n\n# Define the API url for getting the company details by ID\nurl = \"https://api.themoviedb.org/3/company/4\"  # ID 4 corresponds to Paramount Pictures\n\n# Define the headers for the API call\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the logo path for Paramount Pictures\n    company_details = response.json()\n    logo_path = company_details.get(\"logo_path\", \"No logo available\")\n    \n    if logo_path != \"No logo available\":\n        # Print the URL to access the logo image\n        print(f\"The logo URL for Paramount Pictures: https://www.themoviedb.org/t/p/original{logo_path}\")\n    else:\n        print(\"Logo not available for Paramount Pictures\")\nelse:\n    print(\"Error in API call\")\n```",
        "usage": [
            360,
            10558,
            10918
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the company \"Universal Pictures\"\nurl = \"https://api.themoviedb.org/3/search/company\"\nparams = {\n    \"query\": \"Universal Pictures\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the headquarters location if the company is found\nif data['total_results'] > 0:\n    company_id = data['results'][0]['id']\n    url_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    response_company = requests.get(url_company, headers=headers)\n    data_company = response_company.json()\n    headquarters = data_company['headquarters']\n    print(f\"The company 'Universal Pictures' was founded in: {headquarters}\")\nelse:\n    print(\"Company 'Universal Pictures' not found.\")\n```",
        "usage": [
            348,
            11079,
            11427
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the release date of the first movie in the search results\nif data[\"total_results\"] > 0:\n    movie_id = data[\"results\"][0][\"id\"]\n    release_date_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    response = requests.get(release_date_url, headers=headers)\n    release_data = response.json()\n    release_date = release_data[\"release_date\"]\n    print(f\"The movie 'Titanic' was released on: {release_date}\")\nelse:\n    print(\"Movie 'Titanic' not found.\")\n```",
        "usage": [
            355,
            10203,
            10558
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the Star Wars collection to get its id\nurl_search_collections = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collections = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\nresponse_search_collections = requests.get(url_search_collections, headers=headers, params=params_search_collections)\ncollection_id = response_search_collections.json()['results'][0]['id']\n\n# Get the details of the first movie in the Star Wars collection\nurl_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse_collection_details = requests.get(url_collection_details, headers=headers)\nmovie_id = response_collection_details.json()['parts'][0]['id']\n\n# Get the credits for the first movie in the Star Wars collection\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\n\n# Extract the names of the actors who starred in the first movie of the Star Wars collection\nactors = []\nfor actor in response_movie_credits.json()['cast']:\n    actors.append(actor['name'])\n\nprint(actors)\n```",
        "usage": [
            429,
            10494,
            10923
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "results": "```python\nimport requests\n\n# Define the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections with the query \"Harry Potter\"\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Harry Potter\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ncollections = response.json()[\"results\"]\n\n# Get the poster path of the first movie in the Harry Potter collection\nif collections:\n    first_collection_id = collections[0][\"id\"]\n    url = f\"https://api.themoviedb.org/3/collection/{first_collection_id}\"\n    response = requests.get(url, headers=headers)\n    collection_details = response.json()\n\n    if collection_details.get(\"parts\"):\n        first_movie_poster_path = collection_details[\"parts\"][0].get(\"poster_path\")\n        if first_movie_poster_path:\n            print(f\"Poster Path of a movie from the Harry Potter Collection: https://image.tmdb.org/t/p/w500/{first_movie_poster_path}\")\n        else:\n            print(\"No movie poster path found for the Harry Potter Collection.\")\n    else:\n        print(\"No movie parts found in the Harry Potter Collection.\")\nelse:\n    print(\"No collections found for the query 'Harry Potter'.\")\n```",
        "usage": [
            429,
            7803,
            8232
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "results": "```python\nimport requests\n\n# Define the API url to get the collection with name \"The Hunger Games\"\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"The Hunger Games\",\n    \"page\": 1\n}\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the collection id for The Hunger Games\ncollection_id = data['results'][0]['id']\n\n# Using the collection_id to get the keywords for a movie in that collection\nurl_keywords = f\"https://api.themoviedb.org/3/movie/{collection_id}/keywords\"\nresponse_keywords = requests.get(url_keywords, headers=headers)\nkeywords_data = response_keywords.json()\n\n# Extracting the keywords\nkeywords = [keyword['name'] for keyword in keywords_data['keywords']]\n\nprint(keywords)\n```",
        "usage": [
            357,
            9816,
            10173
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection with the name \"The Hobbit\"\ncollection_search_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"The Hobbit\"\n}\nresponse = requests.get(collection_search_url, headers=headers, params=params)\ncollection_data = response.json()\n\n# Get the collection id of \"The Hobbit\"\ncollection_id = collection_data[\"results\"][0][\"id\"]\n\n# Get the details of the collection by id to access the parts\ncollection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse = requests.get(collection_details_url, headers=headers)\ncollection_details = response.json()\n\n# Get the release dates of the movies in the collection \"The Hobbit\"\nrelease_dates = []\nfor part in collection_details[\"parts\"]:\n    movie_id = part[\"id\"]\n    movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    params = {\n        \"append_to_response\": \"release_dates\"\n    }\n    response = requests.get(movie_details_url, headers=headers, params=params)\n    movie_data = response.json()\n    if \"release_dates\" in movie_data:\n        for release_date in movie_data[\"release_dates\"][\"results\"]:\n            if release_date[\"iso_3166_1\"] == \"US\":  # Assuming we are interested in the release date in the US\n                release_dates.append({\n                    \"title\": movie_data[\"title\"],\n                    \"release_date\": release_date[\"release_date\"]\n                })\n\n# Output the release dates of the movies in the collection \"The Hobbit\"\nfor data in release_dates:\n    print(f\"{data['title']}: {data['release_date']}\")\n```",
        "usage": [
            540,
            11294,
            11834
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for The Fast and the Furious collection\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\nresponse = requests.get(url, headers=headers, params=params)\nresults = response.json()\n\n# Step 2: Get collection details for The Fast and the Furious\ncollection_id = results['results'][0]['id']\nurl = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse = requests.get(url, headers=headers)\ndetails = response.json()\n\n# Step 3: List movies from The Fast and the Furious collection\nmovies = details['parts']\nfor movie in movies:\n    print(movie['title'])\n```",
        "usage": [
            331,
            10451,
            10782
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ]
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "results": "```python\nimport requests\n\n# Assign the API key to a variable\napi_key = \"0dbab590c7eaca07ebelak herebyads92\"\n\n# Prepare the headers with the API key\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the collection with the name \"The Fast and the Furious\"\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"The Fast and the Furious\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\nif search_results[\"total_results\"] > 0:\n    collection_id = search_results[\"results\"][0][\"id\"]  # Get the id of the collection found\n\n    # Get the list of movies in the collection to get the first movie id\n    collection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    collection_details_response = requests.get(collection_details_url, headers=headers)\n    collection_details = collection_details_response.json()\n\n    if \"parts\" in collection_details:\n        # Get the id of the first movie from the collection\n        movie_id = collection_details[\"parts\"][0][\"id\"]\n\n        # Get the reviews for the movie\n        reviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n        reviews_params = {\n            \"page\": 1\n        }\n        reviews_response = requests.get(reviews_url, headers=headers, params=reviews_params)\n        reviews = reviews_response.json()\n\n        if reviews[\"total_results\"] > 0:\n            review = reviews[\"results\"][0][\"content\"]  # Get the content of the first review\n            print(review)\n        else:\n            print(\"No reviews found for the movie.\")\n    else:\n        print(\"No movie parts found for the collection.\")\nelse:\n    print(\"Collection not found.\")\n```",
        "usage": [
            407,
            9930,
            10337
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ]
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection using the query 'Lord of the Rings'\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Extract the collection id for 'Lord of the Rings'\nif search_results['total_results'] > 0:\n    collection_id = search_results['results'][0]['id']\n    \n    # Get the collection details using the collection id\n    collection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    collection_details_response = requests.get(collection_details_url, headers=headers)\n    collection_details = collection_details_response.json()\n    \n    # Get the first movie details from the parts array\n    first_movie = collection_details['parts'][0]\n    \n    # Get the release date of the first movie\n    release_date = first_movie['release_date']\n    \n    print(\"The first movie of the collection Lord of the Rings was released on:\", release_date)\nelse:\n    print(\"No collection found for Lord of the Rings\")\n```",
        "usage": [
            431,
            7930,
            8361
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"House of Cards\" to get the TV id\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_id = response_search_tv.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the first season of \"House of Cards\" to find the directors\nurl_tv_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1/credits\"\nresponse_tv_credits = requests.get(url_tv_credits, headers=headers)\n\n# Extracting the directors from the response\ndirectors = []\nfor crew_member in response_tv_credits.json()[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        directors.append(crew_member[\"name\"])\n\nprint(directors)\n```",
        "usage": [
            384,
            10415,
            10799
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"House of Cards\"\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(search_tv_url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the TV show id for House of Cards\ntv_id = data['results'][0]['id']\n\n# Get the list of similar TV shows for House of Cards\nsimilar_tv_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/similar\"\nparams = {\n    \"page\": 1\n}\n\nresponse = requests.get(similar_tv_url, headers=headers, params=params)\nsimilar_tv_shows = response.json()['results']\n\nprint(similar_tv_shows)\n```",
        "usage": [
            352,
            11659,
            12011
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of currently popular TV shows\nresponse = requests.get(\"https://api.themoviedb.org/3/tv/popular\", headers=headers)\ndata = response.json()\n\n# Get the details of the most popular TV show currently on the air\ntv_show_id = data['results'][0]['id']  # Get the ID of the most popular TV show\ntv_show_response = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_show_id}\", headers=headers)\ntv_show_data = tv_show_response.json()\n\n# Get the start date of the most popular TV show currently on the air\nstart_date = tv_show_data['first_air_date']\nprint(\"The most popular TV show currently on the air started on:\", start_date)\n```",
        "usage": [
            338,
            7746,
            8084
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "results": "```python\nimport requests\n\n# Define the headers as provided\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the director of Django Unchained\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\"query\": \"Django Unchained\"}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndirector_id = response_search_movie.json()[\"results\"][0][\"id\"]\n\n# Get the director's details\nurl_movie_credits = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\nworks_director = response_movie_credits.json()[\"crew\"]\n\n# Extract a few more works directed by the director of Django Unchained\nadditional_works = []\nfor work in works_director:\n    if work[\"job\"] == \"Director\":\n        additional_works.append(work[\"original_title\"])\n\nprint(additional_works)\n```",
        "usage": [
            372,
            9341,
            9713
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the cast from the response\n    tv_show_cast = response.json()[\"results\"][0][\"cast\"]\n    \n    # Display the cast\n    for actor in tv_show_cast:\n        print(actor[\"name\"])\nelse:\n    print(\"Error in fetching data\")\n```",
        "usage": [
            310,
            8724,
            9034
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "I need a review for Breaking Bad",
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"0dbab590c7eaca07ebf23974a37ad92\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show Breaking Bad\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Breaking Bad\"\n}\nresponse = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_results = response.json()\n\n# Get the TV show id for Breaking Bad\ntv_id = tv_results[\"results\"][0][\"id\"]\n\n# Get the reviews for Breaking Bad\nurl_reviews = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\nresponse = requests.get(url_reviews, headers=headers)\nreviews = response.json()\n\n# Print the reviews for Breaking Bad\nfor review in reviews[\"results\"]:\n    print(\"Author:\", review[\"author\"])\n    print(\"Content:\", review[\"content\"])\n    print(\"URL:\", review[\"url\"])\n    print(\"--------------\")\n```",
        "usage": [
            385,
            8835,
            9220
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for 'The Last Of Us' TV show\nparams_search_tv = {\n    \"query\": \"The Last Of Us\",\n    \"page\": 1\n}\nresponse_search_tv = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params_search_tv)\ntv_show_results = response_search_tv.json()[\"results\"]\nif len(tv_show_results) == 0:\n    print(\"The TV show 'The Last Of Us' was not found.\")\nelse:\n    tv_id = tv_show_results[0][\"id\"]\n\n    # Get recommendations for the TV show\n    params_recommendations = {\n        \"page\": 1\n    }\n    response_recommendations = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\", headers=headers, params=params_recommendations)\n    recommended_tv_shows = response_recommendations.json()[\"results\"]\n    for show in recommended_tv_shows:\n        print(show[\"name\"])\n```",
        "usage": [
            383,
            9559,
            9942
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# Provided headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show The Last Of Us\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_search_params = {\n    \"query\": \"The Last Of Us\"\n}\ntv_search_response = requests.get(tv_search_url, headers=headers, params=tv_search_params)\ntv_search_result = tv_search_response.json()\n\n# Extracting the TV show ID for recommendations\ntv_id = tv_search_result['results'][0]['id']\n\n# Get recommendations for the TV show\ntv_recommendations_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\ntv_recommendations_params = {}\ntv_recommendations_response = requests.get(tv_recommendations_url, headers=headers, params=tv_recommendations_params)\ntv_recommendations_result = tv_recommendations_response.json()\n\n# Print the recommendations\nfor tv_show in tv_recommendations_result['results']:\n    print(tv_show['name'])\n```",
        "usage": [
            375,
            10460,
            10835
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "results": "```python\nimport requests\n\n# Define the base API url\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Friends\"\nurl_search_tv = f\"{base_url}/search/tv\"\nparams_search_tv = {\n    \"query\": \"Friends\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_id = response_search_tv.json()['results'][0]['id']\n\n# Get the credits for season 3, episode 24 of Friends\nurl_credits = f\"{base_url}/tv/{tv_id}/season/3/episode/24/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\n\n# Extract the guest stars\nguest_stars = response_credits.json()[\"guest_stars\"]\nguest_star_names = [guest_star[\"name\"] for guest_star in guest_stars]\n\nprint(guest_star_names)\n```",
        "usage": [
            367,
            9456,
            9823
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get a list of current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the ID of the most popular TV show\ntv_show_id = data[\"results\"][0][\"id\"]\n\n# Call the API to get the credits of the most popular TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the name of the lead actor in the most popular TV show\nlead_actor = data_credits[\"cast\"][0][\"name\"]\nlead_actor_character = data_credits[\"cast\"][0][\"character\"]\n\nprint(f\"The lead actor in the most popular TV show is {lead_actor} who plays the character {lead_actor_character}.\")\n```",
        "usage": [
            391,
            8752,
            9143
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/tv/top_rated\"\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    result = response.json()\n    \n    # Get the top-1 rated TV show title\n    if result.get(\"results\"):\n        top_tv_show = result[\"results\"][0]\n        top_tv_show_title = top_tv_show.get(\"name\")\n        \n        # Print the top-1 rated TV show title\n        print(\"Keyword of the top-1 rated TV show:\", top_tv_show_title)\n    else:\n        print(\"No results found\")\nelse:\n    print(\"Failed to retrieve data, status code:\", response.status_code)\n```",
        "usage": [
            369,
            9985,
            10354
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ]
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "results": "```python\nimport requests\n\n# Define the headers including the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"2 Broke Girls\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"2 Broke Girls\",\n    \"include_adult\": False\n}\n\n# Make the API call to search for TV show\nresponse = requests.get(url_search_tv, headers=headers, params=params_search_tv)\nsearch_results = response.json()\n\n# Get the poster path for the first result (assuming it is 2 Broke Girls)\nif 'results' in search_results and len(search_results['results']) > 0:\n    poster_path = search_results['results'][0]['poster_path']\n    print(f\"Poster path for 2 Broke Girls: {poster_path}\")\nelse:\n    print(\"No results found for 2 Broke Girls\")\n```",
        "usage": [
            356,
            10447,
            10803
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/tv/34524\"\nparams = {\n    \"append_to_response\": \"season/1,season/2\"\n}\n\n# Call the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    data = response.json()\n\n    # Calculate the total number of episodes\n    total_episodes = 0\n    for season in data[\"seasons\"]:\n        total_episodes += season[\"episode_count\"]\n\n    print(\"Total episodes of 2 Broke Girls:\", total_episodes)\n\nelse:\n    print(\"Failed to fetch data\")\n```",
        "usage": [
            152,
            9631,
            9783
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"The Big Bang Theory\" to get the production company id\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"The Big Bang Theory\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\ntv_show_id = data_search_tv[\"results\"][0][\"id\"]\n\n# Get the primary TV show details by id to get the production company id\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\nparams_tv_details = {}\n\nresponse_tv_details = requests.get(url_tv_details, headers=headers, params=params_tv_details)\ndata_tv_details = response_tv_details.json()\nproduction_company_id = data_tv_details[\"production_companies\"][0][\"id\"]\n\n# Get the company details by id to find out when it was founded\nurl_company = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\nparams_company = {}\n\nresponse_company = requests.get(url_company, headers=headers, params=params_company)\ndata_company = response_company.json()\n\nfounded_date = data_company[\"description\"]  # Assuming the \"description\" field contains the founded date\n\nprint(f\"When was the company that produced The Big Bang Theory founded? {founded_date}\")\n```",
        "usage": [
            480,
            10028,
            10508
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "results": "```python\nimport requests\n\n# Specify the TV show name for which we want to know the creation date\ntv_show_name = \"The Big Bang Theory\"\n\n# Search for the TV show\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": tv_show_name,\n    \"include_adult\": False\n}\nresponse = requests.get(search_tv_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show id\ntv_show_id = data[\"results\"][0][\"id\"]\n\n# Get the primary TV show details by id\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\nresponse = requests.get(tv_details_url, headers=headers)\ndata = response.json()\n\n# Extract the first air date of the TV show\ncreation_date = data[\"first_air_date\"]\nprint(f\"The TV show '{tv_show_name}' was created on: {creation_date}\")\n```",
        "usage": [
            205,
            9185,
            9390
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "results": "```python\nimport requests\n\n# Set the API URL\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the parameters for the request\nparams = {\n    \"page\": 1\n}\n\n# Set the HTTP headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the keyword of the most popular TV show\nif response.status_code == 200:\n    data = response.json()\n    if data[\"results\"]:\n        tv_show_id = data[\"results\"][0][\"id\"]\n        # Now we can get the keywords for this TV show\n        url_keywords = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/keywords\"\n        response_keywords = requests.get(url_keywords, headers=headers)\n        if response_keywords.status_code == 200:\n            data_keywords = response_keywords.json()\n            keywords = [keyword[\"name\"] for keyword in data_keywords[\"results\"]]\n            print(keywords)\n        else:\n            print(\"Failed to get keywords for the most popular TV show\")\n    else:\n        print(\"No results found for popular TV shows\")\nelse:\n    print(\"Failed to get popular TV shows\")\n\n```",
        "usage": [
            423,
            7611,
            8034
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "results": "```python\nimport requests\n\n# Define the API url for getting the details of the third episode of the second season of Westworld\nurl = \"https://api.themoviedb.org/3/tv/63247/season/2/episode/3\"\n\n# Set the API key in the header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the information about the third episode of the second season of Westworld\n    episode_details = response.json()\n    episode_name = episode_details.get(\"name\")\n    episode_overview = episode_details.get(\"overview\")\n    print(\"The third episode of the second season of Westworld is titled:\", episode_name)\n    print(\"Overview:\", episode_overview)\nelse:\n    print(\"Error in retrieving data. Status code:\", response.status_code)\n```",
        "usage": [
            354,
            11625,
            11979
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show Game of Thrones\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Game of Thrones\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\ngame_of_thrones_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get the details of the second season of Game of Thrones\nseason_url = f\"https://api.themoviedb.org/3/tv/{game_of_thrones_id}/season/2\"\nseason_response = requests.get(season_url, headers=headers)\nair_date = season_response.json()[\"air_date\"]\n\nair_date\n```",
        "usage": [
            315,
            10705,
            11020
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details of Band of Brothers\nurl = \"https://api.themoviedb.org/3/search/tv\"\n# Define the parameters to search for the TV show Band of Brothers\nparams = {\n    \"query\": \"Band of Brothers\",\n    \"include_adult\": False\n}\n# Make a GET request to search for the TV show Band of Brothers\nresponse = requests.get(url, headers=headers, params=params)\n# Parse the response to get the TV show id of Band of Brothers\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Define the API url to get the details of the third episode of Band of Brothers\nurl = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/1/episode/3\"\n# Make a GET request to get the details of the third episode of Band of Brothers\nresponse = requests.get(url, headers=headers)\n\n# Get the poster path of the third episode of Band of Brothers\nposter_path = response.json()[\"still_path\"]\nprint(poster_path)\n```",
        "usage": [
            233,
            8223,
            8456
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "results": "```python\nimport requests\n\n# API url to search for TV show Game of Thrones\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Game of Thrones\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Extracting the TV show id for Game of Thrones\nif data_search_tv.get(\"results\"):\n    game_of_thrones_id = data_search_tv[\"results\"][0][\"id\"]\nelse:\n    print(\"Game of Thrones not found\")\n    game_of_thrones_id = None\n\nif game_of_thrones_id:\n    # API url to get details about Game of Thrones\n    url_tv_details = f\"https://api.themoviedb.org/3/tv/{game_of_thrones_id}\"\n    response_tv_details = requests.get(url_tv_details, headers=headers)\n    data_tv_details = response_tv_details.json()\n\n    if data_tv_details.get(\"networks\"):\n        # Extracting the network id of the first network that produced Game of Thrones\n        network_id = data_tv_details[\"networks\"][0][\"id\"]\n        \n        # API url to get the logo of the network by network id\n        url_network_logo = f\"https://api.themoviedb.org/3/network/{network_id}/images\"\n        response_network_logo = requests.get(url_network_logo, headers=headers)\n        data_network_logo = response_network_logo.json()\n\n        if data_network_logo.get(\"logos\"):\n            # Extracting the logo path of the network\n            network_logo_path = data_network_logo[\"logos\"][0][\"file_path\"]\n            print(f\"The logo of the network that produced Game of Thrones: {network_logo_path}\")\n        else:\n            print(\"Network logo not found.\")\n    else:\n        print(\"Network details not found for Game of Thrones.\")\nelse:\n    print(\"No network details found for Game of Thrones.\")\n```",
        "usage": [
            410,
            8908,
            9318
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "results": "```python\nimport requests\n\n# Define the API url for searching the TV show Game of Thrones\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for searching the TV show Game of Thrones\nparams_search_tv = {\n    \"query\": \"Game of Thrones\",\n    \"include_adult\": False,\n}\n\n# Make the API call to search for the TV show Game of Thrones\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\n\n# Extract the network id of the TV show Game of Thrones\nnetwork_id = response_search_tv.json()[\"results\"][0][\"networks\"][0][\"id\"]\n\n# Define the API url for getting the details of the network by id\nurl_network_details = f\"https://api.themoviedb.org/3/network/{network_id}\"\n\n# Make the API call to get the details of the network\nresponse_network_details = requests.get(url_network_details, headers=headers)\n\n# Extract the homepage of the network\nnetwork_homepage = response_network_details.json()[\"homepage\"]\n\nprint(network_homepage)\n```",
        "usage": [
            226,
            10860,
            11086
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the params for the API\nparams = {\n    \"page\": 1  # Get the first page of results\n}\n\n# Set the authorization headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the keyword of the most popular TV show\n    tv_shows = response.json()[\"results\"]\n    if len(tv_shows) > 0:\n        most_popular_tv_show = tv_shows[0]  # Get the first TV show\n        tv_id = most_popular_tv_show[\"id\"]\n\n        # Make a request to get keywords of the most popular TV show\n        keywords_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n        keywords_response = requests.get(keywords_url, headers=headers)\n\n        # Check if the keyword request was successful\n        if keywords_response.status_code == 200:\n            keyword_results = keywords_response.json()[\"results\"]\n            if len(keyword_results) > 0:\n                keyword = keyword_results[0][\"name\"]\n                print(f\"The keyword of the most popular TV show currently is: {keyword}\")\n            else:\n                print(\"No keywords found for the most popular TV show.\")\n        else:\n            print(\"Failed to get keywords for the most popular TV show.\")\n    else:\n        print(\"No popular TV shows found.\")\nelse:\n    print(\"Failed to retrieve popular TV shows.\")\n```",
        "usage": [
            509,
            9187,
            9696
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of current popular TV shows\nurl_tv_popular = \"https://api.themoviedb.org/3/tv/popular\"\nparams_tv_popular = {\"page\": 1}\nresponse_tv_popular = requests.get(url_tv_popular, headers=headers, params=params_tv_popular)\ndata_tv_popular = response_tv_popular.json()\n# Get the company id of the production company of the most popular TV show\ncompany_id = data_tv_popular[\"results\"][0][\"production_companies\"][0][\"id\"]\n\n# Get the details of the company by id\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse_company = requests.get(url_company, headers=headers)\ndata_company = response_company.json()\n\n# Extract the headquarter information of the company\nheadquarter_location = data_company[\"headquarters\"]\nprint(\"Headquarter Location of the Company:\", headquarter_location)\n```",
        "usage": [
            376,
            11046,
            11422
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Mandalorian TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Mandalorian\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Get the TV show details by id\ntv_id = search_data['results'][0]['id']\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\ntv_details_response = requests.get(tv_details_url, headers=headers)\ntv_details_data = tv_details_response.json()\n\n# Get the genres of The Mandalorian\ngenres = []\nfor genre in tv_details_data['genres']:\n    genres.append(genre['name'])\n\nprint(\"Genre of The Mandalorian:\", genres)\n```",
        "usage": [
            347,
            9355,
            9702
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "results": "```python\nimport requests\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\ntrending_tv_data = response_trending_tv.json()\n\n# Get the TV show ID of the most trending TV show\nmost_trending_tv_id = trending_tv_data[\"results\"][0][\"id\"]\n\n# Get the credits of the most trending TV show to find the lead actor\nurl_tv_credits = f\"https://api.themoviedb.org/3/tv/{most_trending_tv_id}/credits\"\nresponse_tv_credits = requests.get(url_tv_credits, headers=headers)\ntv_credits_data = response_tv_credits.json()\n\n# Find the lead actor (first cast member in the data)\nlead_actor_id = tv_credits_data[\"cast\"][0][\"id\"]\n\n# Get the lead actor's details to find the birthday\nurl_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse_person = requests.get(url_person, headers=headers)\nperson_data = response_person.json()\n\n# Extract and print the birthday of the lead actor\nlead_actor_birthday = person_data[\"birthday\"]\nprint(\"Birthday of the lead actor of today's most trending TV show:\", lead_actor_birthday)\n```",
        "usage": [
            459,
            8735,
            9194
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the daily trending TV show API\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the network id of the most trending TV show\nif data.get('results'):\n    most_trending_show = data['results'][0]\n    network_id = most_trending_show.get('network_id')\n\n    if network_id:\n        # Call the network details API\n        network_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\n        network_response = requests.get(network_url, headers=headers)\n        network_data = network_response.json()\n\n        homepage = network_data.get('homepage')\n        if homepage:\n            print(f\"The homepage of the network that produced today's most trending TV show is: {homepage}\")\n        else:\n            print(\"Homepage not found for the network.\")\n    else:\n        print(\"Network ID not found for the most trending TV show.\")\nelse:\n    print(\"No results found for the daily trending TV shows.\")\n```",
        "usage": [
            399,
            9865,
            10264
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "give me a review of today's most trending TV show",
        "results": "```python\nimport requests\n\n# Define the base URL for the TMDB API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the endpoint to get the daily trending TV shows\nendpoint = \"/trending/tv/day\"\n\n# Prepare the complete URL\nurl = f\"{base_url}{endpoint}\"\n\n# Set the API key in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the HTTP GET request to fetch the trending TV shows\nresponse = requests.get(url, headers=headers)\n\n# Extract the TV show ID of the most trending TV show\nif response.status_code == 200:\n    data = response.json()\n    if len(data['results']) > 0:\n        tv_show_id = data['results'][0]['id']\n        \n        # Call the reviews API with the TV show ID\n        reviews_endpoint = f\"/tv/{tv_show_id}/reviews\"\n        reviews_url = f\"{base_url}{reviews_endpoint}\"\n        reviews_response = requests.get(reviews_url, headers=headers)\n        \n        if reviews_response.status_code == 200:\n            reviews_data = reviews_response.json()\n            reviews = reviews_data['results']\n            print(\"Reviews of today's most trending TV show:\")\n            for review in reviews:\n                author = review['author']\n                content = review['content']\n                print(f\"Author: {author}\")\n                print(f\"Review: {content}\")\n                print(\"-\" * 50)\n        else:\n            print(\"Error fetching reviews API\")\n    else:\n        print(\"No trending TV shows found\")\nelse:\n    print(\"Error fetching trending TV shows API\")\n```",
        "usage": [
            492,
            10533,
            11025
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "results": "```python\n# Import the requests library\nimport requests\n\n# Define the base URL for the TMDB API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the URL for getting the trending TV shows today\ntrending_url = f\"{base_url}/trending/tv/day\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to get the trending TV shows today\nresponse = requests.get(trending_url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the TV show details of the first trending TV show\n    trending_tv_show_id = response.json()['results'][0]['id']\n\n    # Define the URL for getting the list of similar TV shows\n    similar_tv_url = f\"{base_url}/tv/{trending_tv_show_id}/similar\"\n\n    # Make a GET request to get the list of similar TV shows\n    similar_tv_response = requests.get(similar_tv_url, headers=headers)\n\n    # Check if the request was successful\n    if similar_tv_response.status_code == 200:\n        # Extract and print the list of similar TV shows\n        similar_tv_shows = similar_tv_response.json()['results']\n        print(similar_tv_shows)\n    else:\n        print(\"Error in getting similar TV shows\")\nelse:\n    print(\"Error in getting trending TV shows\")\n```",
        "usage": [
            455,
            12749,
            13204
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the API url to get the trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Send a GET request to the API url\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the JSON data from the response\n    data = response.json()\n\n    # Access the poster path of the first trending TV show\n    if len(data['results']) > 0:\n        poster_path = data['results'][0]['poster_path']\n        print(\"Poster path of today's most trending TV show:\", poster_path)\n    else:\n        print(\"No trending TV shows found.\")\nelse:\n    print(\"Failed to retrieve trending TV shows. Status code:\", response.status_code)\n```",
        "usage": [
            346,
            9357,
            9703
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the person with the name \"Jeremy Clarkson\"\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_person_params = {\n    \"query\": \"Jeremy Clarkson\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=search_person_params)\nresults = response.json()[\"results\"]\nif len(results) == 0:\n    print(\"Jeremy Clarkson not found\")\n    exit()\n\n# Step 2: Get the TV show credits for Jeremy Clarkson's most popular TV show\n# We will assume the most popular TV show is the first one in the known_for list\nperson_id = results[0][\"id\"]\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\ntv_credits = response.json()[\"cast\"]\n\n# Extract the most popular TV show\nif len(tv_credits) == 0:\n    print(\"No TV show credits found for Jeremy Clarkson\")\n    exit()\n\nmost_popular_show = tv_credits[0][\"name\"]\nprint(f\"Jeremy Clarkson's most popular show: {most_popular_show}\")\n\n# Step 3: Get the credits for the TV show\nfor tv_credit in tv_credits:\n    if tv_credit[\"name\"] == most_popular_show:\n        tv_id = tv_credit[\"id\"]\n        season_number = 1  # Assuming we are interested in the first season\n        episode_number = 1  # Assuming we are interested in the first episode\n        credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits\"\n        response = requests.get(credits_url, headers=headers)\n        credits = response.json()\n        print(f\"Cast and crew for {most_popular_show}:\")\n        for cast in credits[\"cast\"]:\n            print(f\"Character: {cast['character']}, Name: {cast['name']}\")\n        break\n```",
        "usage": [
            601,
            9689,
            10290
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ]
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "results": "```python\nimport requests\n\n# Prepare the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a request to get the details of the first episode of the second season of Black Mirror\nresponse = requests.get(\"https://api.themoviedb.org/3/tv/42009/season/2/episode/1\", headers=headers)\ndata = response.json()\n\n# Extract the lead actor details from the response\nlead_actor_name = data[\"crew\"][0][\"name\"]\nlead_actor_character = data[\"crew\"][0][\"job\"]\nlead_actor_profile_path = data[\"crew\"][0][\"profile_path\"]\n\n# Print out the lead actor details\nprint(\"Lead Actor Name:\", lead_actor_name)\nprint(\"Character:\", lead_actor_character)\nprint(\"Profile Path:\", lead_actor_profile_path)\n```",
        "usage": [
            322,
            9047,
            9369
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "results": "```python\nimport requests\n\n# Define the API url to search for TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters to search for the TV show \"The Mandalorian\"\nparams_search_tv = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": \"false\"\n}\n\n# Make the API call to search for the TV show \"The Mandalorian\"\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show ID of \"The Mandalorian\"\ntv_id = data_search_tv['results'][0]['id']\n\n# Define the API url to get the credits (cast) of a TV show\nurl_tv_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n\n# Make the API call to get the cast of \"The Mandalorian\"\nresponse_tv_credits = requests.get(url_tv_credits, headers=headers)\ndata_tv_credits = response_tv_credits.json()\n\n# Get the lead actor's ID\nlead_actor_id = data_tv_credits['cast'][0]['id']\n\n# Define the API url to get the details of a person\nurl_person_details = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n\n# Make the API call to get the details of the lead actor\nresponse_person_details = requests.get(url_person_details, headers=headers)\ndata_person_details = response_person_details.json()\n\n# Get the birthdate of the lead actor of \"The Mandalorian\"\nlead_actor_birthdate = data_person_details['birthday']\n\nlead_actor_birthdate\n```",
        "usage": [
            353,
            10064,
            10417
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get a list of the current popular TV shows on TMDb\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}  # Query page 1\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the lead actor of the most popular TV show\nif data[\"results\"]:\n    most_popular_tv_show_id = data[\"results\"][0][\"id\"]\n    url_credits = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_show_id}/credits\"\n    response_credits = requests.get(url_credits, headers=headers)\n    data_credits = response_credits.json()\n\n    if data_credits[\"cast\"]:\n        # Assuming the lead actor is the first person in the cast\n        lead_actor = data_credits[\"cast\"][0][\"name\"]\n        print(f\"The lead actor of today's most popular TV show is: {lead_actor}\")\n    else:\n        print(\"Lead actor information is not available for this show.\")\nelse:\n    print(\"No popular TV shows were found.\")\n```",
        "usage": [
            416,
            12474,
            12890
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "results": "```python\nimport requests\n\n# Define the URL for getting the list of current popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the parameters to get the list of popular TV shows\nparams = {\n    \"page\": 1  # We are interested in the first page\n}\n\n# Make a GET request to retrieve the list of popular TV shows\nresponse_popular_tv = requests.get(url_popular_tv, headers=headers, params=params)\n\n# Check if the request was successful\nif response_popular_tv.status_code == 200:\n    # Extract the TV show ID of the most popular TV show of this week\n    popular_tv_data = response_popular_tv.json()\n    if len(popular_tv_data[\"results\"]) > 0:\n        most_popular_tv_id = popular_tv_data[\"results\"][0][\"id\"]\n\n        # Define the URL for getting the credits of the most popular TV show\n        url_tv_credits = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_id}/credits\"\n\n        # Make a GET request to retrieve the credits of the most popular TV show\n        response_tv_credits = requests.get(url_tv_credits, headers=headers)\n        if response_tv_credits.status_code == 200:\n            # Extract the lead actor's profile path if available\n            tv_credits_data = response_tv_credits.json()\n            cast = tv_credits_data[\"cast\"]\n            if len(cast) > 0:\n                lead_actor_profile_path = cast[0].get(\"profile_path\")\n                print(lead_actor_profile_path)\n            else:\n                print(\"Lead actor not found in credits\")\n        else:\n            print(\"Error getting TV show credits\")\n    else:\n        print(\"No popular TV shows found\")\nelse:\n    print(\"Error getting popular TV shows\")\n```",
        "usage": [
            391,
            9096,
            9487
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "results": "```python\nimport requests\n\n# Header with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Cate Blanchett\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nperson_params = {\n    \"query\": \"Cate Blanchett\",\n    \"include_adult\": False\n}\nperson_response = requests.get(person_search_url, headers=headers, params=person_params)\nperson_data = person_response.json()\n\n# Get the latest TV show for Cate Blanchett\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_data['results'][0]['id']}/tv_credits\"\ntv_credits_response = requests.get(tv_credits_url, headers=headers)\ntv_credits_data = tv_credits_response.json()\n\n# Get the TV show id and name\nlatest_tv_show_id = tv_credits_data[\"cast\"][0][\"id\"]\nlatest_tv_show_name = tv_credits_data[\"cast\"][0][\"original_name\"]\n\n# Get reviews for the latest TV show\nreviews_url = f\"https://api.themoviedb.org/3/tv/{latest_tv_show_id}/reviews\"\nreviews_params = {\n    \"page\": 1\n}\nreviews_response = requests.get(reviews_url, headers=headers, params=reviews_params)\nreviews_data = reviews_response.json()\n\n# Print some reviews of Cate Blanchett's latest TV show\nprint(f\"Reviews for the TV show '{latest_tv_show_name}':\")\nfor review in reviews_data[\"results\"]:\n    author = review[\"author\"]\n    content = review[\"content\"]\n    print(f\"Author: {author}\")\n    print(f\"Review: {content}\")\n    print(\"---\")\n```",
        "usage": [
            512,
            10512,
            11024
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the parameters for the API\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Set the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the most popular TV show of David Schwimmer\nif data[\"total_results\"] > 0:\n    results = data[\"results\"]\n    for person in results:\n        if person[\"name\"] == \"David Schwimmer\":\n            tv_credits_url = f\"https://api.themoviedb.org/3/person/{person['id']}/tv_credits\"\n            tv_credits_response = requests.get(tv_credits_url, headers=headers)\n            tv_credits_data = tv_credits_response.json()\n            popular_tv_show = max(tv_credits_data[\"cast\"], key=lambda x: x[\"popularity\"])\n            print(f\"The most popular TV show of David Schwimmer is '{popular_tv_show['name']}'\")\n            break\nelse:\n    print(\"No results found for David Schwimmer.\")\n```",
        "usage": [
            433,
            10952,
            11385
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Black Mirror\"\ntv_show_search_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_show_params = {\n    \"query\": \"Black Mirror\",\n    \"include_adult\": False\n}\ntv_show_response = requests.get(tv_show_search_url, headers=headers, params=tv_show_params)\ntv_show_data = tv_show_response.json()\ntv_id = tv_show_data[\"results\"][0][\"id\"]\n\n# Get details of the second season of Black Mirror\nseason_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2\"\nseason_response = requests.get(season_details_url, headers=headers)\nseason_data = season_response.json()\n\n# Get the credits for the third episode of the second season\nepisode_credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/episode/3/credits\"\nepisode_credits_response = requests.get(episode_credits_url, headers=headers)\nepisode_credits_data = episode_credits_response.json()\n\n# Find the director of the third episode of the second season of Black Mirror\nfor crew_member in episode_credits_data[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director = crew_member[\"name\"]\n        break\n\nprint(f\"The director of the third episode of the second season of Black Mirror is: {director}\")\n```",
        "usage": [
            473,
            9590,
            10063
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for person (Christopher Nolan)\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_person_params = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\n\n# Getting results for Christopher Nolan\nresponse_person = requests.get(search_person_url, headers=headers, params=search_person_params)\ndata_person = response_person.json()\n\n# Getting the known for movie list for Christopher Nolan\nknown_for_movies = []\nif \"results\" in data_person and data_person[\"results\"]:\n    known_for_movies = data_person[\"results\"][0][\"known_for\"]\n\n# Extracting movie titles from known for list\nknown_for_movie_titles = [movie[\"original_title\"] for movie in known_for_movies]\n\nprint(known_for_movie_titles)\n```",
        "usage": [
            340,
            9008,
            9348
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Avatar\"\nurl_avatar = \"https://api.themoviedb.org/3/search/movie\"\nparams_avatar = {\n    \"query\": \"Avatar\",\n    \"include_adult\": False\n}\nresponse_avatar = requests.get(url_avatar, headers=headers, params=params_avatar)\ndata_avatar = response_avatar.json()\n\nif data_avatar[\"total_results\"] > 0:\n    avatar_id = data_avatar[\"results\"][0][\"id\"]\n\n    # Get the movie details for \"Avatar\"\n    url_avatar_details = f\"https://api.themoviedb.org/3/movie/{avatar_id}\"\n    params_avatar_details = {}\n    response_avatar_details = requests.get(url_avatar_details, headers=headers, params=params_avatar_details)\n    data_avatar_details = response_avatar_details.json()\n\n    rating_avatar = data_avatar_details[\"vote_average\"]\n    print(\"Rating for Avatar:\", rating_avatar)\n\n# Search for the movie \"Avatar: The Way of Water\"\nurl_avatar_water = \"https://api.themoviedb.org/3/search/movie\"\nparams_avatar_water = {\n    \"query\": \"Avatar: The Way of Water\",\n    \"include_adult\": False\n}\nresponse_avatar_water = requests.get(url_avatar_water, headers=headers, params=params_avatar_water)\ndata_avatar_water = response_avatar_water.json()\n\nif data_avatar_water[\"total_results\"] > 0:\n    avatar_water_id = data_avatar_water[\"results\"][0][\"id\"]\n\n    # Get the movie details for \"Avatar: The Way of Water\"\n    url_avatar_water_details = f\"https://api.themoviedb.org/3/movie/{avatar_water_id}\"\n    params_avatar_water_details = {}\n    response_avatar_water_details = requests.get(url_avatar_water_details, headers=headers, params=params_avatar_water_details)\n    data_avatar_water_details = response_avatar_water_details.json()\n\n    rating_avatar_water = data_avatar_water_details[\"vote_average\"]\n    print(\"Rating for Avatar: The Way of Water:\", rating_avatar_water)\n\n# Compare the ratings\nif data_avatar[\"total_results\"] > 0 and data_avatar_water[\"total_results\"] > 0:\n    if rating_avatar > rating_avatar_water:\n        print(\"Avatar has a higher rating than Avatar: The Way of Water\")\n    elif rating_avatar < rating_avatar_water:\n        print(\"Avatar: The Way of Water has a higher rating than Avatar\")\n    else:\n        print(\"Both movies have the same rating\")\nelse:\n    print(\"One or both movies could not be found.\")\n```",
        "usage": [
            680,
            10541,
            11221
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n\n# Set the parameters\nparams = {\n    \"api_key\": \"Your_API_Key_Here\",\n    \"language\": \"en-US\",\n    \"sort_by\": \"vote_average.desc\",\n    \"vote_average.gte\": 7.0,\n    \"primary_release_date.gte\": \"2021-01-01\"\n}\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    movies = response.json()[\"results\"]\n    for movie in movies:\n        print(movie[\"title\"])\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            341,
            11215,
            11556
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie 'Lord of the Rings'\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse = requests.get(url_search_movie, headers=headers, params=params)\ndata = response.json()\n\n# Get the genre of the first result\nif data.get(\"results\"):\n    movie_id = data[\"results\"][0][\"id\"]\n    \n    # Get the movie genre by movie_id\n    url_movie_details = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    response_movie_details = requests.get(url_movie_details, headers=headers)\n    movie_details = response_movie_details.json()\n    \n    genre_ids = movie_details.get(\"genres\", [])\n    if genre_ids:\n        genres = [genre[\"name\"] for genre in genre_ids]\n        print(genres)\n    else:\n        print(\"Genre not found for the movie\")\nelse:\n    print(\"No results found for the movie search\")\n```",
        "usage": [
            409,
            9634,
            10043
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "results": "```python\nimport requests\n\n# Set the API url for getting the list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Set the parameters to get the first page of popular people\nparams = {\"page\": 1}\n\n# Set the headers with the Bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request to get the list of popular people\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    popular_people = response.json()\n    if popular_people['results']:\n        # Get the most popular person details\n        most_popular_person = popular_people['results'][0]\n        # Get the birthday of the most popular person\n        birthday = most_popular_person['birthday']\n        print(\"Birthday of the most popular person right now is:\", birthday)\n    else:\n        print(\"No popular people data found\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            379,
            9716,
            10095
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details\nurl = \"https://api.themoviedb.org/3/search/tv\"\n# Parameters for the query\nparams = {\n    \"query\": \"Big Bang Theory\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the TV show ID for the Big Bang Theory\n    tv_id = response.json()[\"results\"][0][\"id\"]\n\n    # Define the API url to get the images for the second season of Big Bang Theory\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/images\"\n    # Make the API request\n    response = requests.get(url, headers=headers)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        # Get the poster path for the second season of Big Bang Theory\n        poster_path = response.json()[\"posters\"][0][\"file_path\"]\n        print(f\"Poster path for the second season of Big Bang Theory: {poster_path}\")\n    else:\n        print(\"Failed to retrieve images for the second season of Big Bang Theory\")\nelse:\n    print(\"Failed to retrieve TV show details for Big Bang Theory\")\n```",
        "usage": [
            295,
            9439,
            9734
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2/episode/3\"\n\n# Define the headers containing the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Extract the name of the third episode of the second season of Mandalorian\n    episode_name = data[\"name\"]\n    print(\"The name of the third episode of the second season of Mandalorian is:\", episode_name)\nelse:\n    print(\"Error in retrieving data. Status code:\", response.status_code)\n```",
        "usage": [
            327,
            9932,
            10259
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Get the movie details for \"The Shawshank Redemption\"\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\nmovie_results = response.json()['results']\n\nif len(movie_results) > 0:\n    shawshank_movie_id = movie_results[0]['id']\n\n    # Step 2: Get the credits for the movie to find the lead actor\n    credits_url = f\"https://api.themoviedb.org/3/movie/{shawshank_movie_id}/credits\"\n    response = requests.get(credits_url, headers=headers)\n    credits = response.json()\n\n    # Find the lead actor from the cast\n    for cast_member in credits['cast']:\n        if cast_member['order'] == 0:  # Assuming lead actor is the first one in the list\n            lead_actor_id = cast_member['id']\n            break\n\n    # Step 3: Get the details of the lead actor\n    person_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n    response = requests.get(person_url, headers=headers)\n    person_details = response.json()\n\n    birthday = person_details['birthday']\n    print(f\"The birthday of the lead actor of the movie 'The Shawshank Redemption' is: {birthday}\")\n\nelse:\n    print(\"Movie not found\")\n```",
        "usage": [
            500,
            9830,
            10330
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# Set the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Shawshank Redemption\" to get the movie_id\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Shawshank Redemption\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nmovie_id = None\nif response.status_code == 200:\n    data = response.json()\n    if data[\"results\"]:\n        movie_id = data[\"results\"][0][\"id\"]\n\nif movie_id:\n    # Get the movie details to find the director/person id\n    movie_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    params = {}\n    response = requests.get(movie_url, headers=headers, params=params)\n    if response.status_code == 200:\n        data = response.json()\n        crew = data.get(\"credits\", {}).get(\"crew\", [])\n        # Find the director in the crew list\n        director_id = None\n        for person in crew:\n            if person[\"job\"] == \"Director\":\n                director_id = person[\"id\"]\n                break\n\n    if director_id:\n        # Get the details of the director to find the birthday\n        person_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n        params = {}\n        response = requests.get(person_url, headers=headers, params=params)\n        if response.status_code == 200:\n            data = response.json()\n            director_birthday = data.get(\"birthday\")\n            print(f\"The birthday of the director of the movie 'The Shawshank Redemption' is: {director_birthday}\")\n        else:\n            print(\"Failed to get director details\")\n    else:\n        print(\"Director not found for the movie\")\nelse:\n    print(\"Movie not found\")\n```",
        "usage": [
            555,
            12210,
            12765
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the movie details by title\nurl_movie_search = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the API endpoint to get the company details by id\nurl_company = \"https://api.themoviedb.org/3/company/{company_id}\"\n\n# Define the movie title to search for\nmovie_title = \"The Shawshank Redemption\"\n\n# Set the query parameter for the movie search\nparams_movie_search = {\n    \"query\": movie_title,\n    \"page\": 1,\n    \"include_adult\": False,\n}\n\n# Make the API call to search for the movie\nresponse_movie_search = requests.get(url_movie_search, headers=headers, params=params_movie_search)\ndata_movie_search = response_movie_search.json()\n\nif \"results\" in data_movie_search and len(data_movie_search[\"results\"]) > 0:\n    # Get the production company id from the first result\n    company_id = data_movie_search[\"results\"][0][\"production_companies\"][0][\"id\"]\n    \n    # Set the path parameter for the company endpoint\n    url_company = url_company.format(company_id=company_id)\n    \n    # Make the API call to get the company details\n    response_company = requests.get(url_company, headers=headers)\n    data_company = response_company.json()\n    \n    if \"headquarters\" in data_company:\n        company_headquarters = data_company[\"headquarters\"]\n        print(f\"The headquarters of the company that created the movie '{movie_title}' is: {company_headquarters}\")\n    else:\n        print(\"Company headquarters information is not available\")\nelse:\n    print(\"Movie search results not found\")\n```",
        "usage": [
            346,
            11897,
            12243
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# First, we need to search for the collection id of Star Wars\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Star Wars\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Assuming the first collection in the search results is the Star Wars collection\nstar_wars_collection_id = search_data[\"results\"][0][\"id\"]\n\n# Get the details of the collection to find out the creator company\ncollection_url = f\"https://api.themoviedb.org/3/collection/{star_wars_collection_id}\"\ncollection_response = requests.get(collection_url, headers=headers)\ncollection_data = collection_response.json()\n\n# Get the company id from the creator company details\ncompany_id = collection_data[\"creator_company\"][\"id\"]\n\n# Get the details of the company to find out the headquarters\ncompany_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\ncompany_response = requests.get(company_url, headers=headers)\ncompany_data = company_response.json()\n\nheadquarters = company_data[\"headquarters\"]\nprint(headquarters)\n```",
        "usage": [
            416,
            9106,
            9522
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Double Life of Veronique\nurl_veronique = \"https://api.themoviedb.org/3/search/movie\"\nparams_veronique = {\n    \"query\": \"The Double Life of Veronique\",\n}\nresponse_veronique = requests.get(url_veronique, headers=headers, params=params_veronique)\nveronique_data = response_veronique.json()\nveronique_release_date = veronique_data['results'][0]['release_date']\n\n# Search for Mulholland Drive\nurl_mulholland = \"https://api.themoviedb.org/3/search/movie\"\nparams_mulholland = {\n    \"query\": \"Mulholland Drive\",\n}\nresponse_mulholland = requests.get(url_mulholland, headers=headers, params=params_mulholland)\nmulholland_data = response_mulholland.json()\nmulholland_release_date = mulholland_data['results'][0]['release_date']\n\nif veronique_release_date < mulholland_release_date:\n    print(\"The Double Life of Veronique has an earlier release date\")\nelse:\n    print(\"Mulholland Drive has an earlier release date\")\n```",
        "usage": [
            419,
            9035,
            9454
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "results": "```python\nimport requests\n\n# Define the API endpoint URLs\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\ntv_credits_url = \"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits\"\nmovie_credits_url = \"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the director of a show\ndef get_director_credits(show_id, season_number):\n    # Make a GET request to the TV credits API\n    tv_credits_response = requests.get(tv_credits_url.format(tv_id=show_id, season_number=season_number), headers=headers)\n    tv_credits_data = tv_credits_response.json()\n    \n    # Extract the director from the crew\n    for crew_member in tv_credits_data['crew']:\n        if crew_member['job'] == 'Director':\n            return crew_member['name']\n\n    return None\n\n# Search for Twin Peaks and get its director\nparams = {\n    \"query\": \"Twin Peaks\",\n    \"page\": 1\n}\ntv_search_response = requests.get(tv_search_url, headers=headers, params=params)\ntwin_peaks_id = tv_search_response.json()['results'][0]['id']\ntwin_peaks_director = get_director_credits(twin_peaks_id, 1)\n\n# Search for Mulholland Drive and get its director\nparams = {\n    \"query\": \"Mulholland Drive\",\n    \"page\": 1\n}\nmovie_search_response = requests.get(movie_search_url, headers=headers, params=params)\nmulholland_drive_id = movie_search_response.json()['results'][0]['id']\nmulholland_drive_director = get_director_credits(mulholland_drive_id, 1)\n\n# Check if the directors are the same\nif twin_peaks_director == mulholland_drive_director:\n    print(\"Yes, the director of Twin Peaks Season 1 and Mulholland Drive is the same person.\")\nelse:\n    print(\"No, the director of Twin Peaks Season 1 and Mulholland Drive is not the same person.\")\n```",
        "usage": [
            646,
            10601,
            11247
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameters to search for the movie \"Mulholland Drive\"\nparams = {\n    \"query\": \"Mulholland Drive\"\n}\n\n# Make a GET request to search for the movie\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the director data from the response\n    director = response.json()['results'][0]['director']\n    \n    # Use the director's ID to get more details about the person\n    person_url = f\"https://api.themoviedb.org/3/person/{director}\"\n    person_response = requests.get(person_url, headers=headers)\n    \n    # Check if the person request was successful\n    if person_response.status_code == 200:\n        # Extract the birthplace of the director\n        birthplace = person_response.json()['place_of_birth']\n        print(f\"The director of Mulholland Drive was born in {birthplace}\")\n    else:\n        print(\"Error in retrieving director information\")\nelse:\n    print(\"Error in retrieving movie information\")\n```",
        "usage": [
            429,
            10968,
            11397
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for top-rated movies\ntop_rated_url = \"https://api.themoviedb.org/3/movie/top_rated\"\nparams = {\n    \"page\": 1,\n}\ntop_rated_response = requests.get(top_rated_url, headers=headers, params=params)\n\n# Check if Mulholland Drive is in the top-10 rated list\nmulholland_drive_id = None\nif top_rated_response.status_code == 200:\n    top_rated_movies = top_rated_response.json()[\"results\"]\n    for movie in top_rated_movies:\n        if movie[\"title\"] == \"Mulholland Drive\":\n            mulholland_drive_id = movie[\"id\"]\n            break\n\nif mulholland_drive_id:\n    print(\"Mulholland Drive is in the Top-10 rated list.\")\nelse:\n    print(\"Mulholland Drive is not in the Top-10 rated list.\")\n```",
        "usage": [
            364,
            9250,
            9614
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "results": "```python\nimport requests\n\n# Set the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the person ID for Akira Kurosawa\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Akira Kurosawa\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\nakira_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the person ID for Spielberg\nparams[\"query\"] = \"Spielberg\"\nresponse = requests.get(url, headers=headers, params=params)\nspielberg_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the movie credits for Akira Kurosawa\nurl = f\"https://api.themoviedb.org/3/person/{akira_id}/movie_credits\"\nparams = {}\nresponse = requests.get(url, headers=headers, params=params)\nakira_movie_count = len(response.json()[\"cast\"]) + len(response.json()[\"crew\"])\n\n# Get the movie credits for Spielberg\nurl = f\"https://api.themoviedb.org/3/person/{spielberg_id}/movie_credits\"\nresponse = requests.get(url, headers=headers, params=params)\nspielberg_movie_count = len(response.json()[\"cast\"]) + len(response.json()[\"crew\"])\n\n# Compare the movie counts and print the result\nif akira_movie_count > spielberg_movie_count:\n    print(\"Akira Kurosawa directed more movies.\")\nelif akira_movie_count < spielberg_movie_count:\n    print(\"Spielberg directed more movies.\")\nelse:\n    print(\"Akira Kurosawa and Spielberg directed the same number of movies.\")\n```",
        "usage": [
            505,
            10716,
            11221
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person with the name of the director of Mulholland Drive (David Lynch)\nurl_person_search = \"https://api.themoviedb.org/3/search/person\"\nparams_person_search = {\n    \"query\": \"David Lynch\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse_person_search = requests.get(url_person_search, headers=headers, params=params_person_search)\ndata_person_search = response_person_search.json()\n\n# Get the person_id of David Lynch\nperson_id = data_person_search['results'][0]['id']\n\n# Get the TV show credits for David Lynch\nurl_tv_credits = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse_tv_credits = requests.get(url_tv_credits, headers=headers)\ndata_tv_credits = response_tv_credits.json()\n\n# Extract the TV series directed by David Lynch\ntv_series_directed = []\nfor credit in data_tv_credits['crew']:\n    if credit['job'] == 'Director':\n        tv_series_directed.append(credit['name'])\n\n# Print the TV series directed by David Lynch\nprint(tv_series_directed)\n```",
        "usage": [
            421,
            12078,
            12499
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ]
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "results": "```python\nimport requests\n\n# API url for getting the primary person details by id\nurl = \"https://api.themoviedb.org/3/person/1584\"\nparams = {}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Extract and print Scarlett Johansson's birthday\n    if 'birthday' in data:\n        print(f\"Scarlett Johansson's birthday is: {data['birthday']}\")\n    else:\n        print(\"Birthday information not found.\")\nelse:\n    print(\"Failed to retrieve information. Error:\", response.status_code)\n```",
        "usage": [
            155,
            11010,
            11165
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Sword Art Online\"\nsearch_params = {\n    \"query\": \"Sword Art Online\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=search_params)\nsearch_results = search_response.json()\n\nif search_results[\"total_results\"] > 0:\n    tv_id = search_results[\"results\"][0][\"id\"]\n    # Get the details of the TV show \"Sword Art Online\"\n    tv_details_response = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_id}\", headers=headers)\n    tv_details = tv_details_response.json()\n    \n    total_seasons = tv_details[\"number_of_seasons\"]\n    print(f\"The number of seasons of Sword Art Online are: {total_seasons}\")\nelse:\n    print(\"Sword Art Online was not found.\")\n```",
        "usage": [
            366,
            10811,
            11177
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "results": "```python\n# Import the requests library\nimport requests\n\n# Define the base URL for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Set the API key (Please replace 'YOUR_API_KEY' with your actual API key)\napi_key = \"YOUR_API_KEY\"\n\n# Set the headers for the API request\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Step 1: Search for the TV show \"We Married as Job\"\n# Define the parameters for searching the TV show\ntv_show_params = {\n    \"query\": \"We Married as Job\",\n    \"page\": 1  # Assuming the TV show is on the first page of results\n}\n\n# Make the API call to search for the TV show\ntv_search_url = f\"{base_url}/search/tv\"\ntv_search_response = requests.get(tv_search_url, headers=headers, params=tv_show_params)\ntv_search_results = tv_search_response.json()\n\n# Extract the TV show ID if it exists in the search results\ntv_show_id = None\nif \"results\" in tv_search_results and len(tv_search_results[\"results\"]) > 0:\n    tv_show_id = tv_search_results[\"results\"][0][\"id\"]\n\n# Step 2: Get the credits for the TV show\n# Define the URL to get the credits for the TV show\ncredits_url = f\"{base_url}/tv/{tv_show_id}/credits\"\n\n# Make the API call to get the credits for the TV show\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\n\n# Check if Yui Aragaki and Gen Hoshino are co-starring in the TV show\nyui_found = False\ngen_found = False\n\n# Iterate through the cast data to check if Yui Aragaki and Gen Hoshino are in the cast\nfor cast_member in credits_data[\"cast\"]:\n    if cast_member[\"name\"] == \"Yui Aragaki\":\n        yui_found = True\n    elif cast_member[\"name\"] == \"Gen Hoshino\":\n        gen_found = True\n\n# Output the result based on the findings\nif yui_found and gen_found:\n    print(\"Yui Aragaki and Gen Hoshino are co-starring in We Married as Job.\")\nelse:\n    print(\"Yui Aragaki and Gen Hoshino are not co-starring in We Married as Job.\")\n```",
        "usage": [
            508,
            10787,
            11295
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ]
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "results": "```python\nimport requests\n\n# Define the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Get the movie 'Barbie' details\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Barbie\"\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\nbarbie_movie_id = response.json()[\"results\"][0][\"id\"]\n\nmovie_credits_url = f\"https://api.themoviedb.org/3/movie/{barbie_movie_id}/credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nbarbie_director_id = response.json()[\"crew\"][0][\"id\"]\n\n# Step 2: Get the TV show 'DEATH NOTE' details\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"DEATH NOTE\"\n}\nresponse = requests.get(tv_search_url, headers=headers, params=params)\ndeath_note_tv_id = response.json()[\"results\"][0][\"id\"]\n\ntv_credits_url = f\"https://api.themoviedb.org/3/tv/{death_note_tv_id}/credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\ndeath_note_lead_actor_id = response.json()[\"cast\"][0][\"id\"]\n\n# Step 3: Get the birth year of the director and lead actor\nperson_details_url = \"https://api.themoviedb.org/3/person/{}\"\nresponse = requests.get(person_details_url.format(barbie_director_id), headers=headers)\nbarbie_director_birth_year = int(response.json()[\"birthday\"][:4])\n\nresponse = requests.get(person_details_url.format(death_note_lead_actor_id), headers=headers)\ndeath_note_lead_actor_birth_year = int(response.json()[\"birthday\"][:4])\n\n# Step 4: Calculate age difference\nage_difference = abs(barbie_director_birth_year - death_note_lead_actor_birth_year)\n\n# Output the result\nprint(f\"The director of movie 'Barbie' is older than the lead actor of TV show 'DEATH NOTE' by {age_difference} years.\")\n```",
        "usage": [
            604,
            8864,
            9468
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for Katherine LaNasa\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Katherine LaNasa\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nresult = response.json()\n\n# Step 2: Get Katherine LaNasa's latest movie credits\nif result['total_results'] > 0:\n    person_id = result['results'][0]['id']\n    movie_credit_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(movie_credit_url, headers=headers)\n    movie_credits = response.json()\n\n    # Find the latest movie appearance\n    latest_movie = None\n    latest_release_date = \"\"\n    for movie in movie_credits['cast']:\n        release_date = movie['release_date']\n        if release_date > latest_release_date:\n            latest_movie = movie\n            latest_release_date = release_date\n\n    if latest_movie:\n        print(f\"Katherine LaNasa's latest movie appearance is in the movie: {latest_movie['title']}, released on {latest_movie['release_date']}\")\n    else:\n        print(\"No movie credits found for Katherine LaNasa\")\nelse:\n    print(\"Katherine LaNasa not found in the database\")\n```",
        "usage": [
            455,
            10968,
            11423
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "results": "```python\nimport requests\n\n# Define the API url to get the movie details by title\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Parameters for the query\nparams = {\n    \"query\": \"Oppenheimer\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Adding the authorization token to the header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the first movie from the results\n    movie_result = response.json()[\"results\"][0]\n    \n    # Get the cover image (poster_path) if available\n    cover_image_url = movie_result[\"poster_path\"]\n\n    if cover_image_url:\n        print(\"Cover image URL for the movie 'Oppenheimer': https://image.tmdb.org/t/p/original\" + cover_image_url)\n    else:\n        print(\"Cover image not available for the movie 'Oppenheimer'\")\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            394,
            10895,
            11289
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    }
]