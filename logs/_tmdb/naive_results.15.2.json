[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "results": "```python\nimport requests\n\n# Set the API URL to get the list of people with the specified name\nurl = \"https://api.themoviedb.org/3/search/person\"\n# Set the parameters for the API request\nparams = {\n    \"query\": \"Sofia Coppola\",\n    \"include_adult\": False, # Do not include adult content\n    \"region\": \"US\", # Specify the region to filter release dates\n}\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Extract the id for the person Sofia Coppola\n    person_id = data['results'][0]['id']\n\n    # Set the API URL to get the movie credits for the person\n    url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    # Make the API request to get the movie credits for the person\n    response = requests.get(url, headers=headers)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        data = response.json()\n        # Count the number of movies directed by Sofia Coppola\n        directed_movies = [movie for movie in data['crew'] if movie['job'] == 'Director']\n        num_directed_movies = len(directed_movies)\n        print(\"Number of movies directed by Sofia Coppola:\", num_directed_movies)\n    else:\n        print(\"Failed to get movie credits for the person.\")\nelse:\n    print(\"Failed to get person details for Sofia Coppola.\")\n```",
        "usage": [
            340,
            8835,
            9175
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "results": "```python\nimport requests\n\n# Define the API URL to search for the movie \"The Dark Knight\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Dark Knight\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\",\n    \"year\": None,\n    \"primary_release_year\": None\n}\n\n# Make the API request to search for the movie\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the movie ID of \"The Dark Knight\"\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Define the API URL to get the cast and crew for the movie by ID\ncast_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make the API request to get the cast and crew of the movie\ncast_response = requests.get(cast_url, headers=headers)\n\n# Extract the lead actor from the response\nlead_actor = cast_response.json()[\"cast\"][0][\"name\"]\n\n# Output the result\nprint(f\"The lead actor in the movie The Dark Knight was: {lead_actor}\")\n```",
        "usage": [
            244,
            7904,
            8148
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "results": "```python\nimport requests\n\n# Headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\nparams = {\"page\": 1}  # Get the first page of results\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    top_rated_movies = response.json()\n    # Extracting the director of the top-1 rated movie\n    if len(top_rated_movies[\"results\"]) > 0:\n        movie_id = top_rated_movies[\"results\"][0][\"id\"]  # Get the ID of the top-1 rated movie\n\n        # Call the API to get the credits for the top-1 rated movie\n        url_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n        response_credits = requests.get(url_credits, headers=headers)\n\n        if response_credits.status_code == 200:\n            credits = response_credits.json()\n            # Finding the director in the crew for the top-1 rated movie\n            for crew_member in credits[\"crew\"]:\n                if crew_member[\"job\"] == \"Director\":\n                    director = crew_member[\"name\"]\n                    print(f\"The director of the top-1 rated movie is: {director}\")\n                    break\n        else:\n            print(\"Failed to get movie credits information\")\n    else:\n        print(\"No results found for top rated movies\")\nelse:\n    print(\"Failed to get top rated movies information\")\n\n```",
        "usage": [
            491,
            8837,
            9328
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "give me a image for the collection Star Wars",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/collection\"\nquery = \"Star Wars\"\nparams = {\n    \"query\": query,\n    \"page\": 1\n}\n\n# Define the API token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting and showing the image path for the collection Star Wars\nif response.status_code == 200:\n    data = response.json()\n    if 'results' in data and len(data['results']) > 0:\n        for result in data['results']:\n            print(\"Collection Name:\", result['name'])\n            if 'poster_path' in result:\n                print(\"Poster Path:\", result['poster_path'])\n    else:\n        print(\"No collection found for the query:\", query)\nelse:\n    print(\"Failed to retrieve data, status code:\", response.status_code)\n```",
        "usage": [
            361,
            9336,
            9697
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/company\"\n\n# Define the query parameters\nparams = {\n    \"query\": \"Walt Disney\"\n}\n\n# Add the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the logo path of Walt Disney\n    company_results = response.json()[\"results\"]\n    for result in company_results:\n        if result[\"name\"] == \"Walt Disney\":\n            logo_path = result[\"logo_path\"]\n            print(f\"The logo path of Walt Disney is: {logo_path}\")\nelse:\n    print(\"Unable to retrieve the logo of Walt Disney.\")\n```",
        "usage": [
            333,
            7741,
            8074
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/movie/597/credits\"  # Replace 597 with the movie_id of Titanic\nparams = {}\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    # Extract the cast information\n    cast_data = response.json()[\"cast\"]\n\n    # Find the lead actor in the cast\n    for actor in cast_data:\n        if actor[\"order\"] == 1:  # The lead actor usually has an order of 1\n            lead_actor = actor\n            break\n\n    # Print the lead actor's information\n    print(f\"Lead Actor of Titanic - {lead_actor['name']}\")\n    print(f\"Character in Titanic - {lead_actor['character']}\")\n    print(f\"Profile Image Path - {lead_actor['profile_path']}\")\nelse:\n    print(\"Error occurred while fetching data.\")\n```",
        "usage": [
            385,
            6636,
            7021
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "results": "```python\nimport requests\n\n# Define the headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movies similar to Titanic\nbase_url = \"https://api.themoviedb.org/3\"\nsearch_movie_url = f\"{base_url}/search/movie\"\nparams = {\n    'query': 'Titanic',\n    'include_adult': False,\n    'page': 1\n}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the first movie id from the search results\nfirst_movie_id = data['results'][0]['id']\n\n# Get reviews of the first movie that is similar to Titanic\nsimilar_movie_reviews_url = f\"{base_url}/movie/{first_movie_id}/reviews\"\nresponse = requests.get(similar_movie_reviews_url, headers=headers)\nreviews_data = response.json()\n\n# Print the reviews\nreviews = reviews_data['results']\nfor review in reviews:\n    print(f\"Author: {review['author']}\")\n    print(f\"Content: {review['content']}\")\n    print(\"\")\n\n```",
        "usage": [
            383,
            7338,
            7721
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Titanic movie\nquery_params = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n}\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nresponse = requests.get(search_url, headers=headers, params=query_params)\ntitanic_movie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get movie recommendations for Titanic\nrecommendations_url = f\"https://api.themoviedb.org/3/movie/{titanic_movie_id}/recommendations\"\nrecommendations_params = {\n    \"page\": 1\n}\nresponse = requests.get(recommendations_url, headers=headers, params=recommendations_params)\nrecommendations = response.json()[\"results\"]\n\n# Display movie recommendations\nfor recommendation in recommendations:\n    print(recommendation[\"title\"])\n```",
        "usage": [
            343,
            7963,
            8306
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "results": "```python\nimport requests\n\n# Define the headers containing the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the person 'Christopher Nolan'\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\nparams_search_person = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": \"false\"\n}\n\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\ndata_search_person = response_search_person.json()\n\n# Extract the person_id of Christopher Nolan\nperson_id = data_search_person['results'][0]['id']\n\n# Step 2: Get the movie credits for Christopher Nolan\nurl_person_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\nresponse_person_movie_credits = requests.get(url_person_movie_credits, headers=headers)\ndata_person_movie_credits = response_person_movie_credits.json()\n\n# Extract the latest movie directed by Christopher Nolan\nmovies_directed_by_nolan = data_person_movie_credits['crew']\nmovies_directed_by_nolan.sort(key=lambda x: x['release_date'], reverse=True)  # Sort based on release date\n\nlatest_movie = movies_directed_by_nolan[0]['title']\n\nprint(\"The latest movie directed by Christopher Nolan is:\", latest_movie)\n```",
        "usage": [
            438,
            7794,
            8232
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "results": "```python\nimport requests\n\n# Define the headers for API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the director Martin Scorsese\nsearch_params = {\n    \"query\": \"Martin Scorsese\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=search_params)\nperson_id = search_response.json()['results'][0]['id']\n\n# Get the movie credits for Martin Scorsese\ncredits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\ncredits_response = requests.get(credits_url, headers=headers)\nmovies_directed_by_martin = credits_response.json()['crew']\n\n# Find the highest rated movie directed by Martin Scorsese\nhighest_rated_movie = max(movies_directed_by_martin, key=lambda x: x['vote_average'])\nhighest_rated_movie_title = highest_rated_movie['title']\nhighest_rated_movie_rating = highest_rated_movie['vote_average']\n\nprint(f\"The highest rated movie directed by Martin Scorsese is '{highest_rated_movie_title}' with a rating of {highest_rated_movie_rating}\")\n```",
        "usage": [
            410,
            7691,
            8101
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "results": "```python\nimport requests\n\n# Define the API key\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Define the headers including the authorization key\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for Leonardo DiCaprio\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Leonardo DiCaprio\"\n}\nresponse = requests.get(person_search_url, headers=headers, params=params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the movie credits for Leonardo DiCaprio\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nlatest_movie = response.json()[\"cast\"][0]\n\n# Get the crew for the latest movie to find the director\nmovie_id = latest_movie[\"id\"]\nmovie_credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\ncrew = response.json()[\"crew\"]\n\n# Find the director in the crew\ndirector = None\nfor person in crew:\n    if person[\"job\"] == \"Director\":\n        director = person[\"name\"]\n        break\n\nprint(f\"The director of Leonardo DiCaprio's latest movie is: {director}\")\n```",
        "usage": [
            304,
            9050,
            9354
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people\nparams = {\n    \"query\": \"Catherine Hardwicke\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\nperson_results = response.json()[\"results\"]\n\n# Finding the person's id if it exists\nif person_results:\n    person_id = person_results[0][\"id\"]\n\n    # Get the TV show credits for a person\n    response = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\", headers=headers)\n    tv_credits = response.json()[\"cast\"]\n\n    # Finding the most recent TV show directed by Catherine Hardwicke\n    recent_directed_show = None\n    for credit in tv_credits:\n        if credit[\"job\"] == \"Director\":\n            recent_directed_show = credit\n            break\n\n    if recent_directed_show:\n        print(f\"The most recently directed TV show by Catherine Hardwicke is '{recent_directed_show['original_name']}'\")\n    else:\n        print(\"Catherine Hardwicke has not recently directed a TV show.\")\nelse:\n    print(\"No results found for Catherine Hardwicke.\")\n```",
        "usage": [
            437,
            8562,
            8999
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "results": "```python\nimport requests\n\n# API key for authentication\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Http headers\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for TV show Breaking Bad\nquery = \"Breaking Bad\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": query,\n    \"include_adult\": False\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\nbreaking_bad_id = response_search_tv.json()[\"results\"][0][\"id\"]\n\n# Get TV show recommendations for Breaking Bad\nurl_recommendations = f\"https://api.themoviedb.org/3/tv/{breaking_bad_id}/recommendations\"\nparams_recommendations = {}\nresponse_recommendations = requests.get(url_recommendations, headers=headers, params=params_recommendations)\nrecommendations = response_recommendations.json()[\"results\"]\n\n# Display the recommendations\nfor recommendation in recommendations:\n    print(recommendation[\"name\"])\n```",
        "usage": [
            227,
            6246,
            6473
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "results": "```python\nimport requests\n\n# Define the base url\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the endpoint for getting today's trending movies\nendpoint = \"/trending/movie/day\"\n\n# Define the full url\nurl = base_url + endpoint\n\n# Define the HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the HTTP request to get today's trending movies\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie ID of the most trending movie\n    trending_movie_id = response.json()[\"results\"][0][\"id\"]\n    \n    # Define the endpoint to get credits of a movie\n    credits_endpoint = f\"/movie/{trending_movie_id}/credits\"\n    \n    # Define the full url for credits\n    credits_url = base_url + credits_endpoint\n    \n    # Make the HTTP request to get the credits of the most trending movie\n    credits_response = requests.get(credits_url, headers=headers)\n    \n    # Check if the request was successful\n    if credits_response.status_code == 200:\n        # Get the crew of the movie\n        crew = credits_response.json()[\"crew\"]\n        \n        # Find the director from the crew\n        director = [member[\"name\"] for member in crew if member[\"job\"] == \"Director\"]\n        \n        if director:\n            print(f\"The director of today's most trending movie is: {director[0]}\")\n        else:\n            print(\"Director information not found.\")\n    else:\n        print(\"Error in getting credits.\")\nelse:\n    print(\"Error in getting trending movies.\")\n```",
        "usage": [
            501,
            6810,
            7311
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Twilight\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Twilight\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie id of \"Twilight\"\nif data_search_movie['total_results'] > 0:\n    movie_id_twilight = data_search_movie['results'][0]['id']\n\n    # Get the details of the movie to find the director\n    url_movie_details = f\"https://api.themoviedb.org/3/movie/{movie_id_twilight}\"\n    params_movie_details = {\n        \"append_to_response\": \"credits\"\n    }\n\n    response_movie_details = requests.get(url_movie_details, headers=headers, params=params_movie_details)\n    data_movie_details = response_movie_details.json()\n\n    # Find the director information from the crew\n    director = \"\"\n    for member in data_movie_details['credits']['Crew']:\n        if member['job'] == \"Director\":\n            director = member['name']\n            break\n\n    print(f\"The director of the movie 'Twilight' is: {director}\")\nelse:\n    print(\"Movie 'Twilight' not found.\")\n```",
        "usage": [
            457,
            6738,
            7195
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "results": "```python\nimport requests\n\n# Set the API url for getting images for a TV episode\nurl = \"https://api.themoviedb.org/3/tv/143052/season/1/episode/2/images\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the response data in JSON format\n    data = response.json()\n    \n    # Extract the file path of the first still (photo)\n    photo_path = data['stills'][0]['file_path']\n    \n    print(\"The photo path is:\", photo_path)\n\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            326,
            7518,
            7844
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "What is top-1 rated movie?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the query parameters\nparams = {\n    \"page\": 1,  # Get the first page\n    \"region\": \"US\"  # Filter by region (optional)\n}\n\n# Define the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie list from the API response\n    movie_list = response.json()[\"results\"]\n    \n    # Check if there are movies in the list\n    if len(movie_list) > 0:\n        # Get the top-rated movie\n        top_rated_movie = movie_list[0]\n        print(\"Top-1 rated movie title:\", top_rated_movie[\"title\"])\n    else:\n        print(\"No movies found.\")\nelse:\n    print(\"Error occurred with status code:\", response.status_code)\n```",
        "usage": [
            382,
            6501,
            6883
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "results": "```python\nimport requests\n\n# Define the API key\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Define the headers\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the movie \"The Matrix\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Matrix\"\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\nif data[\"total_results\"] > 0:\n    # Get the movie id of \"The Matrix\"\n    movie_id = data[\"results\"][0][\"id\"]\n    \n    # Get the release date of the movie using the movie_id\n    release_date_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n    release_date_response = requests.get(release_date_url, headers=headers)\n    release_date_data = release_date_response.json()\n    \n    # Extract the release date\n    if \"results\" in release_date_data:\n        for result in release_date_data[\"results\"]:\n            if result[\"iso_3166_1\"] == \"US\":  # Assuming we want the US release date\n                release_date = result[\"release_dates\"][0][\"release_date\"]\n                print(f\"The release date of the movie 'The Matrix' is: {release_date}\")\n                break\nelse:\n    print(\"Movie not found.\")\n```",
        "usage": [
            306,
            6548,
            6854
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "Who is the most popular person?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Set the header with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the response JSON data\n    data = response.json()\n    \n    # Retrieve the most popular person from the results\n    most_popular_person = data[\"results\"][0][\"name\"]\n    \n    print(\"The most popular person is:\", most_popular_person)\nelse:\n    print(\"Error accessing the API\")\n```",
        "usage": [
            304,
            6496,
            6800
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "results": "```python\nimport requests\n\n# Set the API URL to get the list of movies directed by Christopher Nolan\nurl = \"https://api.themoviedb.org/3/search/person\"\n# Set the parameters to search for Christopher Nolan\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the person id of Christopher Nolan\n    person_id = data[\"results\"][0][\"id\"]\n\n    # Set the API URL to get the movie credits of Christopher Nolan\n    url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    # No extra parameters needed, just replace the `{variable}` in the url path with actual value\n\n    # Make the API call\n    response = requests.get(url, headers=headers)\n    movie_credits = response.json()\n\n    # Get the list of movie ids directed by Christopher Nolan\n    movie_ids = [movie[\"id\"] for movie in movie_credits[\"crew\"] if movie[\"job\"] == \"Director\"]\n\n    # List to store the cover image URLs of movies directed by Christopher Nolan\n    cover_images = []\n    \n    # Set the API URL to get the images for a movie\n    for movie_id in movie_ids:\n        image_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n        # No extra parameters needed, just replace the `{variable}` in the url path with actual value\n\n        response = requests.get(image_url, headers=headers)\n        images_data = response.json()\n\n        if \"posters\" in images_data:\n            # Retrieve the first poster image URL of the movie (if available)\n            if len(images_data[\"posters\"]) > 0:\n                poster_url = f\"https://image.tmdb.org/t/p/w500/{images_data['posters'][0]['file_path']}\"\n                cover_images.append(poster_url)\n\n    print(cover_images)\n\nelse:\n    print(\"Error with API request\")  # Print error message if API request was unsuccessful\n```",
        "usage": [
            463,
            8395,
            8858
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "results": "```python\nimport requests\n\n# Set the API url for getting the movie id of \"Titanic\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\n\n# Make a GET request to search for the movie \"Titanic\"\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the movie id of \"Titanic\"\ntitanic_id = data['results'][0]['id']\n\n# Set the API url for getting keywords associated with the movie\nurl_keywords = f\"https://api.themoviedb.org/3/movie/{titanic_id}/keywords\"\n\n# Make a GET request to get the keywords associated with the movie \"Titanic\"\nresponse_keywords = requests.get(url_keywords, headers=headers)\nkeywords_data = response_keywords.json()\n\n# Extract and print the keywords associated with the movie \"Titanic\"\nkeywords = [keyword['name'] for keyword in keywords_data['keywords']]\nprint(keywords)\n```",
        "usage": [
            218,
            6579,
            6797
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "Give me a show that is currently on the air",
        "results": "```python\nimport requests\n\n# Set the API URL\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Set the parameters\nparams = {\n    \"page\": 1  # Set the page number to query\n}\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    tv_shows = response.json()[\"results\"]\n    # Print the first show on the list\n    if tv_shows:\n        print(\"Show currently on the air:\")\n        print(tv_shows[0])\n    else:\n        print(\"No shows currently on the air.\")\nelse:\n    print(\"Error accessing API:\", response.status_code)\n```",
        "usage": [
            333,
            8990,
            9323
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Clint Eastwood\nparams = {\n    \"query\": \"Clint Eastwood\",\n    \"include_adult\": False\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\nclint_eastwood_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the latest movie of Clint Eastwood\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{clint_eastwood_id}/movie_credits\", headers=headers)\nlatest_movie_release_date = response.json()[\"cast\"][0][\"release_date\"]\n\nprint(f\"The latest movie of Clint Eastwood is scheduled to be released on: {latest_movie_release_date}\")\n```",
        "usage": [
            328,
            7794,
            8122
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie ID of \"The Dark Knight\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Dark Knight\",\n    \"include_adult\": False,\n    \"page\": 1\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nmovie_id = response.json()['results'][0]['id']\n\n# Get the reviews for the movie\nreviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(reviews_url, headers=headers, params=params)\nreviews = response.json()['results']\n\n# Print the reviews\nfor review in reviews:\n    print(review['author'] + \": \" + review['content'])\n```",
        "usage": [
            344,
            7986,
            8330
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "results": "```python\nimport requests\n\n# API url to search for movies directed by Francis Ford Coppola\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nperson_params = {\n    \"query\": \"Francis Ford Coppola\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(search_person_url, headers=headers, params=person_params)\nresults = response.json()\n\n# Check if any results are found for Francis Ford Coppola\nif results['total_results'] > 0:\n    # Get the person_id of Francis Ford Coppola\n    person_id = results['results'][0]['id']\n    \n    # Get the movie credits for Francis Ford Coppola\n    person_movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(person_movie_credits_url, headers=headers)\n    movie_credits = response.json()\n    \n    # Get the movie_id of a movie directed by Francis Ford Coppola\n    if movie_credits['cast']:\n        movie_id = movie_credits['cast'][0]['id']\n        \n        # Get a list of similar movies to the selected movie\n        similar_movies_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\n        response = requests.get(similar_movies_url, headers=headers)\n        similar_movies = response.json()\n        \n        # Output the list of similar movies\n        print(similar_movies['results'])\n    else:\n        print(\"No movie directed by Francis Ford Coppola found.\")\nelse:\n    print(\"Francis Ford Coppola not found.\")\n```",
        "usage": [
            339,
            8323,
            8662
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the details of the latest movie\nurl_latest_movie = \"https://api.themoviedb.org/3/movie/latest\"\nresponse_latest_movie = requests.get(url_latest_movie, headers=headers)\nlatest_movie_data = response_latest_movie.json()\n\n# Get the lead actor from the cast\nif \"id\" in latest_movie_data:\n    movie_id = latest_movie_data[\"id\"]\n    url_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response_credits = requests.get(url_credits, headers=headers)\n    credits_data = response_credits.json()\n\n    if \"cast\" in credits_data:\n        # Assuming the lead actor is the first one in the cast list\n        lead_actor = credits_data[\"cast\"][0][\"name\"]\n        print(f\"The lead actor in the latest released movie is: {lead_actor}\")\n    else:\n        print(\"Could not find the cast information for the latest movie.\")\nelse:\n    print(\"Could not retrieve the latest movie data.\") \n```",
        "usage": [
            393,
            7067,
            7460
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "results": "```python\nimport requests\n\n# API url for getting list of movies in theaters\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Parameters for the API request (optional)\nparams = {\n    \"page\": 1, # Specify the page number\n    \"region\": \"US\" # Specify the region (ISO 3166-1 code)\n}\n\n# HTTP headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie list result\n    results = response.json()[\"results\"]\n    if len(results) > 0:\n        # Get the image path of the first movie in the list\n        image_path = results[0][\"poster_path\"]\n        print(\"Image path of the movie currently showing in theaters:\", image_path)\n    else:\n        print(\"No movies found in theaters.\")\nelse:\n    print(\"Failed to retrieve movie list. Status code:\", response.status_code)\n```",
        "usage": [
            391,
            7030,
            7421
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "results": "```python\nimport requests\n\n# API url to get the list of popular movies\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Set the required parameters\nparams = {\n    \"page\": 1,  # Get the first page\n    \"region\": \"US\"  # Filter by region (ISO 3166-1 code for USA)\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the data from the response\n    data = response.json()\n    \n    # Get the most popular movie from the results\n    most_popular_movie = data['results'][0]\n    \n    # Get the details of the most popular movie\n    movie_id = most_popular_movie['id']\n    \n    # API url to get keywords of a movie by its id\n    keywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n    \n    # Make the GET request to get the keywords of the movie\n    keywords_response = requests.get(keywords_url, headers=headers)\n    \n    # Check if the request was successful\n    if keywords_response.status_code == 200:\n        # Get the keywords data from the response\n        keywords_data = keywords_response.json()\n        \n        # Print the details of the most popular movie and its keywords\n        print(\"Most Popular Movie:\")\n        print(\"Title:\", most_popular_movie['title'])\n        print(\"Overview:\", most_popular_movie['overview'])\n        print(\"Release Date:\", most_popular_movie['release_date'])\n        print(\"Popularity:\", most_popular_movie['popularity'])\n        print(\"\\nKeywords:\")\n        for keyword in keywords_data['keywords']:\n            print(\"-\", keyword['name'])\n        \n    else:\n        print(\"Failed to get keywords data. Status code:\", keywords_response.status_code)\n\nelse:\n    print(\"Failed to get popular movies data. Status code:\", response.status_code)\n```",
        "usage": [
            422,
            9153,
            9575
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "results": "```python\nimport requests\n\n# Define the API url and necessary headers\nurl = \"https://api.themoviedb.org/3/movie/latest\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to get the latest movie information\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Extract the movie id of the latest movie\nlatest_movie_id = data['id']\n\n# Define the API url to get keywords of the latest movie\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{latest_movie_id}/keywords\"\n\n# Send a GET request to get the keywords of the latest movie\nkeywords_response = requests.get(keywords_url, headers=headers)\nkeywords_data = keywords_response.json()\n\n# Extract and print the keywords of the latest movie\nkeywords = [keyword['name'] for keyword in keywords_data['keywords']]\nprint(\"Keywords of the most popular movie right now:\")\nfor keyword in keywords:\n    print(keyword)\n```",
        "usage": [
            360,
            7472,
            7832
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "results": "```python\nimport requests\n\n# Define the API url and parameters to search for the movie \"Titanic\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Assign the provided headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to search for the movie \"Titanic\"\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful and print out the results\nif response.status_code == 200:\n    movie_results = response.json()[\"results\"]\n    for result in movie_results:\n        if result[\"title\"] == \"Titanic\":\n            movie_id = result[\"id\"]\n            break\n\n    # Call API to get the cast and crew for the movie with the obtained movie_id\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n\n    if credits_response.status_code == 200:\n        cast = credits_response.json()[\"cast\"]\n        crew = credits_response.json()[\"crew\"]\n\n        # Get the names of the actors who starred in the movie\n        actors = [actor[\"name\"] for actor in cast]\n\n        print(f\"The following actors starred in the movie Titanic: {', '.join(actors)}\")\n    else:\n        print(\"Error in obtaining the cast and crew details of the movie Titanic\")\nelse:\n    print(\"Error in searching for the movie Titanic\")\n```",
        "usage": [
            490,
            7930,
            8420
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the details of the company with company_id 4 (Paramount Pictures)\nurl = \"https://api.themoviedb.org/3/company/4\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Extract the logo path of Paramount Pictures\n    logo_path = data[\"logo_path\"]\n    print(\"Logo Path:\", logo_path)\n    \n    # If needed, you can have further code to download the logo image or display it\nelse:\n    print(\"Failed to fetch data. Status Code:\", response.status_code)\n```",
        "usage": [
            317,
            7771,
            8088
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the company \"Universal Pictures\"\nurl_search_company = \"https://api.themoviedb.org/3/search/company\"\nparams_search_company = {\n    \"query\": \"Universal Pictures\"\n}\nresponse_search_company = requests.get(url_search_company, headers=headers, params=params_search_company)\nif response_search_company.status_code == 200:\n    data_search_company = response_search_company.json()\n    \n    # Get the company id for \"Universal Pictures\"\n    company_id = data_search_company[\"results\"][0][\"id\"]\n    \n    # Get the company details by id\n    url_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    response_company = requests.get(url_company, headers=headers)\n    if response_company.status_code == 200:\n        data_company = response_company.json()\n        \n        # Print the headquarters of \"Universal Pictures\"\n        print(f\"Universal Pictures was founded in: {data_company['headquarters']}\")\n    else:\n        print(\"Error in fetching company details\")\nelse:\n    print(\"Error in searching for the company\")\n```",
        "usage": [
            399,
            6782,
            7181
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "results": "```python\nimport requests\n\n# Header containing authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\"\n}\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        # Assuming the first result is the movie \"Titanic\"\n        movie_id = data[\"results\"][0][\"id\"]\n        \n        # Get the release dates for the movie\n        url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n        response_dates = requests.get(url, headers=headers)\n        \n        if response_dates.status_code == 200:\n            release_data = response_dates.json()\n            print(f\"The movie 'Titanic' was released on {release_data['results'][0]['release_dates'][0]['release_date']}\")\n        else:\n            print(\"Error getting release dates data\")\n    else:\n        print(\"Movie 'Titanic' not found\")\nelse:\n    print(\"Error searching for movie 'Titanic'\")\n```",
        "usage": [
            413,
            7979,
            8392
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "results": "```python\nimport requests\n\n# Define the API url and the headers\nurl = \"https://api.themoviedb.org/3/search/collection\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the query parameters\nparams = {\n    \"query\": \"Star Wars\", \n    \"page\": 1\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the response to get the collection id of the first Star Wars collection\ncollection_id = response.json()[\"results\"][0][\"id\"]\n\n# Use the collection id to get the details of the first Star Wars collection\nurl = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse = requests.get(url, headers=headers)\n\n# Extract the information about the parts of the collection\nparts = response.json()[\"parts\"]\n\n# Extract the cast of the first movie in the collection\nfirst_movie_cast = parts[0][\"cast\"]\n\n# Get the names of the actors who starred in the first movie of the Star Wars collection\nstarred_names = [actor[\"name\"] for actor in first_movie_cast]\n\nprint(starred_names)\n```",
        "usage": [
            400,
            7035,
            7435
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection with the name \"Harry Potter\"\ncollection_url = \"https://api.themoviedb.org/3/search/collection\"\ncollection_params = {\n    \"query\": \"Harry Potter\"\n}\ncollection_response = requests.get(collection_url, headers=headers, params=collection_params)\ncollection_data = collection_response.json()\n\n# Get the poster path of the first movie in the search results\nif collection_data[\"total_results\"] > 0:\n    first_collection_id = collection_data[\"results\"][0][\"id\"]\n    collection_details_url = f\"https://api.themoviedb.org/3/collection/{first_collection_id}\"\n    collection_details_response = requests.get(collection_details_url, headers=headers)\n    collection_details_data = collection_details_response.json()\n\n    # Check if the collection has any parts (movies)\n    if \"parts\" in collection_details_data:\n        # Get the poster path of the first part (movie) in the collection\n        if len(collection_details_data[\"parts\"]) > 0:\n            movie_poster_path = collection_details_data[\"parts\"][0][\"poster_path\"]\n            print(f\"Movie poster path of a movie from the Harry Potter collection: {movie_poster_path}\")\n        else:\n            print(\"No movies found in the Harry Potter collection\")\n    else:\n        print(\"No movie details found in the Harry Potter collection\")\nelse:\n    print(\"No collection found with the name 'Harry Potter'\")\n```",
        "usage": [
            470,
            6411,
            6881
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "results": "```python\nimport requests\n\n# API endpoint to search for collections\nurl = \"https://api.themoviedb.org/3/search/collection\"\n# Parameters for searching for The Hunger Games collection\nparams = {\n    \"query\": \"The Hunger Games\"\n}\n# Send GET request to API\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the collection id for The Hunger Games\ncollection_id = data[\"results\"][0][\"id\"]\n\n# API endpoint to get keywords for a movie of the collection The Hunger Games\nurl_keywords = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n# Send GET request to API to get keywords\nresponse_keywords = requests.get(url_keywords, headers=headers)\ndata_keywords = response_keywords.json()\n\n# Extract and print the keywords for a movie of The Hunger Games collection\nkeywords = data_keywords[\"keywords\"]\nfor keyword in keywords:\n    print(keyword[\"name\"])\n```",
        "usage": [
            199,
            6229,
            6428
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ]
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "results": "```python\nimport requests\n\n# Define the API url to search for a collection by query\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the query parameter to search for the collection \"The Hobbit\"\nparams = {\n    \"query\": \"The Hobbit\",\n    \"page\": 1\n}\n\n# Make a GET request to search for the collection\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params)\n\n# Check if the request was successful\nif response_search_collection.status_code == 200:\n    # Extract the collection id for \"The Hobbit\" from the search results\n    collection_id = response_search_collection.json()[\"results\"][0][\"id\"]\n\n    # Define the API url to get collection details by id\n    url_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n    # Make a GET request to get the collection details\n    response_collection_details = requests.get(url_collection_details, headers=headers)\n\n    # Check if the request was successful\n    if response_collection_details.status_code == 200:\n        # Extract the list of movies in the collection \"The Hobbit\"\n        movies = response_collection_details.json()[\"parts\"]\n\n        # Extract and print the release dates for the movies of the collection \"The Hobbit\"\n        for movie in movies:\n            print(f\"Movie: {movie['title']} - Release Date: {movie['release_date']}\")\n    else:\n        print(\"Error fetching collection details\")\nelse:\n    print(\"Error searching for collection\")\n```",
        "usage": [
            327,
            7019,
            7346
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the query parameters\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()[\"results\"]\n    \n    # Extract movie details\n    movies = []\n    for result in results:\n        movies.append({\n            \"id\": result[\"id\"],\n            \"name\": result[\"name\"]\n        })\n    \n    # Print the list of movies\n    print(movies)\n\nelse:\n    print(\"Error: Unable to retrieve movie list.\")\n```",
        "usage": [
            340,
            7634,
            7974
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections\nsearch_collection_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_collection_params = {\n    \"query\": \"The Fast and the Furious\"\n}\n# Call the search collection API\nresponse = requests.get(search_collection_url, headers=headers, params=search_collection_params)\nsearch_results = response.json()\ncollection_id = search_results[\"results\"][0][\"id\"]\n\n# Get reviews for a movie in the collection\nreviews_url = f\"https://api.themoviedb.org/3/movie/{collection_id}/reviews\"\nreviews_params = {\n    \"page\": 1\n}\n# Call the reviews API\nresponse = requests.get(reviews_url, headers=headers, params=reviews_params)\nreviews_data = response.json()\n\n# Extract and display the reviews\nfor review in reviews_data[\"results\"]:\n    print(f\"Author: {review['author']}\")\n    print(f\"Content: {review['content']}\")\n    print(f\"URL: {review['url']}\")\n    print(\"\\n\")\n```",
        "usage": [
            390,
            7294,
            7684
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "results": "```python\nimport requests\n\n# Assign the provided authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection with the name 'Lord of the Rings'\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Lord of the Rings\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Extract the collection_id of 'Lord of the Rings' if it exists\nif 'results' in search_results and len(search_results['results']) > 0:\n    collection_id = search_results['results'][0]['id']\n\n    # Get the details of the collection by collection_id\n    collection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    collection_response = requests.get(collection_url, headers=headers)\n    collection_details = collection_response.json()\n\n    # Extract the id of the first movie in the collection\n    if 'parts' in collection_details and len(collection_details['parts']) > 0:\n        first_movie_id = collection_details['parts'][0]['id']\n\n        # Get the release date of the first movie in the collection\n        movie_url = f\"https://api.themoviedb.org/3/movie/{first_movie_id}\"\n        movie_response = requests.get(movie_url, headers=headers)\n        movie_details = movie_response.json()\n\n        release_date = movie_details['release_date']\n        print(f\"The first movie of the collection Lord of the Rings was released on: {release_date}\")\n\n    else:\n        print(\"No movie found in the collection Lord of the Rings.\")\nelse:\n    print(\"Collection 'Lord of the Rings' not found.\")\n```",
        "usage": [
            518,
            7335,
            7853
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"House of Cards\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"House of Cards\"\n}\n\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_results = response_search_tv.json()[\"results\"]\n\nif len(tv_results) > 0:\n    tv_id = tv_results[0][\"id\"]\n\n    # Get the first season credits of House of Cards\n    url_season_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1/credits\"\n    \n    response_season_credits = requests.get(url_season_credits, headers=headers)\n    season_credits = response_season_credits.json()\n\n    # Extract the directors from the crew\n    directors = [member[\"name\"] for member in season_credits[\"crew\"] if member[\"job\"] == \"Director\"]\n    \n    print(directors)\n\nelse:\n    print(\"TV show 'House of Cards' not found.\")\n```",
        "usage": [
            400,
            7688,
            8088
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the API endpoint for getting similar TV shows\nurl_similar_tv = \"https://api.themoviedb.org/3/tv/{tv_id}/similar\"\n\n# Define the API endpoint for getting TV show details\nurl_tv_details = \"https://api.themoviedb.org/3/tv/{}\"\n\n# Define the API endpoint for getting TV credits\nurl_tv_credits = \"https://api.themoviedb.org/3/tv/{}/credits\"\n\n# Define the API endpoint for getting images of a TV show\nurl_tv_images = \"https://api.themoviedb.org/3/tv/{}/images\"\n\n# Define the API endpoint for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the API endpoint for getting similar TV shows\nurl_similar_tv = \"https://api.themoviedb.org/3/tv/{tv_id}/similar\"\n\n# Define the API endpoint for getting TV show details\nurl_tv_details = \"https://api.themoviedb.org/3/tv/{}\"\n\n# Set the API key and headers\napi_key = \"YOUR_API_KEY\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show with the query \"House of Cards\"\nparams_search_tv = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\nsearch_results = response_search_tv.json()\n\nif 'results' in search_results and len(search_results['results']) > 0:\n    # Get the ID of the first search result TV show\n    tv_id = search_results['results'][0]['id']\n    \n    # Get similar TV shows to the TV show with the obtained ID\n    response_similar_tv = requests.get(url_similar_tv.format(tv_id=tv_id), headers=headers)\n    similar_tv_results = response_similar_tv.json()\n    \n    similar_tv_titles = [tv['name'] for tv in similar_tv_results['results']]\n    \n    print(\"TV shows similar to House of Cards:\")\n    for title in similar_tv_titles:\n        print(title)\nelse:\n    print(\"No TV show found with the query 'House of Cards'\")\n```",
        "usage": [
            669,
            7229,
            7898
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "results": "```python\nimport requests\n\n# Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the API URL\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Parse the JSON response\ndata = response.json()\n\n# Find the most popular TV show currently on the air\nmost_popular_show = max(data['results'], key=lambda x: x['popularity'])\n\n# Get the start date of the most popular TV show\nstart_date = most_popular_show['first_air_date']\n\nprint(\"The most popular TV show currently on the air started on:\", start_date)\n```",
        "usage": [
            305,
            7689,
            7994
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "results": "```python\nimport requests\n\n# Provided headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the director of Django Unchained\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Django Unchained\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n\nresponse = requests.get(search_movie_url, headers=headers, params=search_params)\ndirector_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits of the director\ncredit_url = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\ncredit_params = {}\n\nresponse = requests.get(credit_url, headers=headers, params=credit_params)\nmovies_list = response.json()[\"crew\"]\n\n# Extract a few more works directed by the director of Django Unchained\nfew_works = []\nfor movie in movies_list:\n    if movie[\"job\"] == \"Director\" and movie[\"id\"] != director_id:\n        few_works.append(movie[\"original_title\"])\n\nprint(few_works)\n```",
        "usage": [
            391,
            9106,
            9497
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "results": "```python\nimport requests\n\n# API url for getting TV shows on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Parameter for specifying page number\nparams = {\"page\": 1}\n\n# Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting cast information from the response\nif response.status_code == 200:\n    tv_shows = response.json()[\"results\"]\n    for show in tv_shows:\n        show_id = show[\"id\"]\n        show_name = show[\"name\"]\n        # API url for getting credits of a TV show by id\n        credits_url = f\"https://api.themoviedb.org/3/tv/{show_id}/credits\"\n        \n        # Make the API call to get credits\n        credits_response = requests.get(credits_url, headers=headers)\n        \n        if credits_response.status_code == 200:\n            cast = credits_response.json()[\"cast\"]\n            print(f\"Cast of the TV show '{show_name}':\")\n            for actor in cast:\n                print(actor[\"name\"])\n            print(\"----------------------------\")\n        \nelse:\n    print(\"Failed to retrieve TV shows on the air.\")\n```\nThis code will retrieve the list of TV shows currently on the air and then for each show, it will retrieve and display the cast members.",
        "usage": [
            452,
            7835,
            8287
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "I need a review for Breaking Bad",
        "results": "```python\nimport requests\n\n# Define the headers with the provided authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the search query for Breaking Bad TV show\nparams = {\n    \"query\": \"Breaking Bad\"\n}\n\n# Send a GET request to search for the TV show\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params)\ndata = response.json()\n\n# Extracting the id of Breaking Bad TV show\ntv_id = data[\"results\"][0][\"id\"]\n\n# Send a GET request to get the reviews of Breaking Bad TV show\nresponse_reviews = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\", headers=headers)\nreviews_data = response_reviews.json()\n\n# Print out the reviews of Breaking Bad TV show\nprint(reviews_data[\"results\"])\n```",
        "usage": [
            341,
            6664,
            7005
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for searching TV shows\nparams_search_tv = {\n    \"query\": \"The Last Of Us\",  # TV show to search\n    \"include_adult\": False  # Exclude adult content\n}\n\n# Sending GET request to search for TV show\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Getting the TV show ID for The Last Of Us\ntv_id = data_search_tv[\"results\"][0][\"id\"]\n\n# API url for getting recommendations for a TV show\nurl_recommendations = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\n\n# Sending GET request to get TV show recommendations\nresponse_recommendations = requests.get(url_recommendations, headers=headers)\ndata_recommendations = response_recommendations.json()\n\n# Getting the list of recommended TV shows\nrecommendations = data_recommendations[\"results\"]\n\n# Displaying the recommendations\nfor show in recommendations:\n    print(show[\"name\"])\n```",
        "usage": [
            243,
            6733,
            6976
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# Replace the API key with your own\nAPI_KEY = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\"\n}\n\n# Search for the TV show The Last Of Us\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"The Last Of Us\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show id for The Last Of Us\ntv_id = data_search_tv[\"results\"][0][\"id\"]\n\n# Get recommendations for the TV show\nurl_recommendations = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\nparams_recommendations = {\n    \"page\": 1\n}\nresponse_recommendations = requests.get(url_recommendations, headers=headers, params=params_recommendations)\nrecommendations = response_recommendations.json()\n\nrecommendations\n```",
        "usage": [
            227,
            8098,
            8325
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "results": "```python\nimport requests\n\n# Headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the credits for season 3, episode 24 of Friends\nurl = \"https://api.themoviedb.org/3/tv/1668/season/3/episode/24/credits\"\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the guest stars information\n    guest_stars = response.json()[\"guest_stars\"]\n    \n    # Extracting the names of the guest stars\n    guest_star_names = [star[\"name\"] for star in guest_stars]\n    print(guest_star_names)\nelse:\n    print(\"Error in API request\")\n```",
        "usage": [
            317,
            9252,
            9569
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ]
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "results": "```python\nimport requests\n\n# Set the API url to get the list of popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}  # Optional parameter, can be adjusted based on the page number\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    tv_shows = response.json()[\"results\"]\n    \n    # Get the lead actor in the most popular TV show\n    most_popular_show = max(tv_shows, key=lambda x: x[\"popularity\"])\n    tv_id = most_popular_show[\"id\"]\n    \n    # Set the API url to get the credits for the most popular TV show\n    credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    \n    # Send the GET request to the credits API\n    credits_response = requests.get(credits_url, headers=headers)\n    \n    # Check if the request was successful\n    if credits_response.status_code == 200:\n        # Parse the JSON response\n        credits = credits_response.json()\n        \n        # Get the lead actor in the cast\n        cast = credits[\"cast\"]\n        lead_actor = next((actor[\"name\"] for actor in cast if actor[\"order\"] == 0), None)\n        print(\"Lead actor in the most popular TV show is:\", lead_actor)\n    else:\n        print(\"Error while fetching credits\")\nelse:\n    print(\"Error while fetching TV shows\")\n\n```",
        "usage": [
            520,
            7467,
            7987
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/top_rated\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Add the authentication headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the top-1 rated TV show keyword\nif response.status_code == 200:\n    data = response.json()\n    if data[\"results\"]:\n        top_show_keywords = data[\"results\"][0][\"keywords\"]\n        if top_show_keywords:\n            keyword = top_show_keywords[0][\"name\"]\n            print(keyword)\n        else:\n            print(\"Keyword not found.\")\n    else:\n        print(\"No top-rated TV shows found.\")\nelse:\n    print(\"Error fetching data.\")\n```",
        "usage": [
            338,
            8363,
            8701
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ]
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "results": "```python\nimport requests\n\n# Headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show \"2 Broke Girls\"\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\",\n}\nresponse = requests.get(tv_search_url, headers=headers, params=params)\ndata = response.json()\n\n# Extract poster_path for the first result\nif data.get(\"results\"):\n    first_result = data[\"results\"][0]\n    poster_path = first_result.get(\"poster_path\")\n    if poster_path:\n        print(f\"The poster for '2 Broke Girls': https://image.tmdb.org/t/p/w500/{poster_path}\")\n    else:\n        print(\"Poster not available for '2 Broke Girls'\")\nelse:\n    print(\"No results found for '2 Broke Girls'\")\n```",
        "usage": [
            340,
            8934,
            9274
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "results": "```python\nimport requests\n\n# Provided API key for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the TV show ID for 2 Broke Girls\ntv_id = 5207\n\n# API endpoint to get the TV show details\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\nparams = {}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the response JSON data\n    data = response.json()\n    # Get the number of episodes\n    total_episodes = data[\"number_of_episodes\"]\n    print(f\"Total number of episodes in 2 Broke Girls: {total_episodes}\")\nelse:\n    # Print error message if request was not successful\n    print(\"Error occurred while fetching data\")\n```",
        "usage": [
            336,
            9485,
            9821
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV Show \"The Big Bang Theory\" to get the production company id\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_tv_params = {\n    \"query\": \"The Big Bang Theory\"\n}\nsearch_tv_response = requests.get(search_tv_url, headers=headers, params=search_tv_params)\ntv_show_id = search_tv_response.json()[\"results\"][0][\"id\"]\n\n# Get the details of the TV Show including the production company id\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\ntv_details_response = requests.get(tv_details_url, headers=headers)\nproduction_company_id = tv_details_response.json()[\"production_companies\"][0][\"id\"]\n\n# Get the details of the production company\ncompany_details_url = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\ncompany_details_response = requests.get(company_details_url, headers=headers)\nfounding_year = company_details_response.json()[\"description\"]\n\nfounding_year",
        "usage": [
            392,
            9330,
            9722
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show by name\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Big Bang Theory\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the first_air_date of the TV show\nif data[\"total_results\"] > 0:\n    first_air_date = data[\"results\"][0][\"first_air_date\"]\n    print(\"The TV show 'The Big Bang Theory' was created on:\", first_air_date)\nelse:\n    print(\"TV show 'The Big Bang Theory' not found.\")\n```",
        "usage": [
            309,
            6918,
            7227
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get a list of the current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the TV show id of the most popular show\nmost_popular_tv_show_id = data[\"results\"][0][\"id\"]\n\n# Call the API to get the keywords of the most popular TV show\nkeyword_url = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_show_id}/keywords\"\nkeyword_response = requests.get(keyword_url, headers=headers)\nkeyword_data = keyword_response.json()\n\n# Get the keyword of the most popular TV show\nkeyword = keyword_data[\"results\"][0][\"name\"]\n\nprint(keyword)\n```",
        "usage": [
            339,
            6890,
            7229
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the TV show id for Westworld\n# Assuming the TV show id for Westworld is 63247\ntv_show_id = 63247\n\n# Get the details of the third episode of the second season of Westworld\nurl = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/2/episode/3\"\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    episode_details = response.json()\n    \n    # Get the overview of the third episode of the second season of Westworld\n    third_episode_overview = episode_details[\"overview\"]\n    \n    print(\"The third episode of the second season of Westworld talked about:\")\n    print(third_episode_overview)\nelse:\n    print(\"Failed to retrieve data for the episode.\")\n```",
        "usage": [
            355,
            6908,
            7263
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "results": "```python\nimport requests\n\n# Define the API url for searching TV shows\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the parameters for searching the TV show \"Game of Thrones\"\nparams = {\n    \"query\": \"Game of Thrones\",\n    \"include_adult\": False\n}\n\n# Make a GET request to search for the TV show \"Game of Thrones\"\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the TV show ID of \"Game of Thrones\"\n    tv_show_id = response.json()[\"results\"][0][\"id\"]\n\n    # Define the API url for getting the details of the second season of the TV show\n    url_season = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/2\"\n\n    # Make a GET request to get the details of the second season of the TV show\n    response_season = requests.get(url_season, headers=headers)\n\n    # Check if the request was successful\n    if response_season.status_code == 200:\n        # Get the air date of the second season of the TV show \"Game of Thrones\"\n        air_date = response_season.json()[\"air_date\"]\n        print(f\"The air date of the second season of Game of Thrones is: {air_date}\")\n    else:\n        print(\"Error in fetching season details\")\nelse:\n    print(\"Error in searching for the TV show Game of Thrones\")\n```",
        "usage": [
            315,
            7715,
            8030
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "results": "```python\nimport requests\n\n# Set the API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/671/images\"  # Assuming 671 is the TV show id for Band of Brothers\n# Set the headers with the provided authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Access the poster path of the third episode\n    if \"posters\" in data:\n        posters = data[\"posters\"]\n        if len(posters) >= 3:  # Assuming the third episode is at index 2 in the list\n            poster_path = posters[2][\"file_path\"]\n            print(\"Poster of the third episode of Band of Brothers:\", poster_path)\n        else:\n            print(\"Band of Brothers does not have at least 3 episodes.\")\n    else:\n        print(\"No posters found for Band of Brothers.\")\nelse:\n    print(\"Error fetching data. Status code:\", response.status_code)\n```",
        "usage": [
            402,
            9006,
            9408
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "results": "```python\nimport requests\n\n# Define the API url to get the details of a TV show by id\nurl = \"https://api.themoviedb.org/3/tv/1399\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call to get the details of the TV show\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the network's id that produced Game of Thrones\nnetwork_id = data['networks'][0]['id']\n\n# Define the API url to get the details of a network by id\nnetwork_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\n\n# Make the API call to get the details of the network\nnetwork_response = requests.get(network_url, headers=headers)\nnetwork_data = network_response.json()\n\n# Extract and print the logo of the network\nnetwork_logo = network_data['logo_path']\nprint(network_logo)\n```",
        "usage": [
            361,
            8607,
            8968
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "results": "```python\nimport requests\n\n# Define the API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for searching Game of Thrones\nparams_search_tv = {\n    \"query\": \"Game of Thrones\"\n}\n\n# Requesting the search API to get the TV show details\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the network id of the TV show from the search results\nnetwork_id = data_search_tv['results'][0]['networks'][0]['id']\n\n# Define the API url for getting network details\nurl_network = f\"https://api.themoviedb.org/3/network/{network_id}\"\n\n# Requesting the network API to get the network details\nresponse_network = requests.get(url_network, headers=headers)\ndata_network = response_network.json()\n\n# Getting the homepage of the network that produced Game of Thrones\nnetwork_homepage = data_network['homepage']\n\nprint(network_homepage)\n```",
        "usage": [
            219,
            8917,
            9136
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API to get a list of the current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the TV ID of the most popular TV show\nif response.status_code == 200:\n    tv_shows = response.json()[\"results\"]\n    most_popular_show = tv_shows[0]  # Assumption: The first TV show is the most popular\n    tv_id = most_popular_show[\"id\"]\n\n    # API to get keywords of the most popular TV show\n    keyword_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    keyword_response = requests.get(keyword_url, headers=headers)\n\n    if keyword_response.status_code == 200:\n        keyword = keyword_response.json()[\"results\"][0][\"name\"]\n        print(f\"The keyword of the most popular TV show currently is: {keyword}\")\n    else:\n        print(\"Failed to retrieve keyword information.\")\nelse:\n    print(\"Failed to retrieve TV show information.\")\n```",
        "usage": [
            411,
            8048,
            8459
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "results": "```python\nimport requests\n\n# Set the API url to get the list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request to get the list of popular TV shows\nresponse = requests.get(url=url_popular_tv, headers=headers)\ntv_data = response.json()\n\n# Get the id of the TV show produced by the company\ntv_show_id = tv_data['results'][0]['id']\n\n# Set the API url to get the TV show details\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\n\n# Make the API request to get the details of the TV show\nresponse_tv_details = requests.get(url=url_tv_details, headers=headers)\ntv_details = response_tv_details.json()\n\n# Get the production company id\nproduction_company_id = tv_details['production_companies'][0]['id']\n\n# Set the API url to get the company details\nurl_company_details = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\n\n# Make the API request to get the details of the production company\nresponse_company_details = requests.get(url=url_company_details, headers=headers)\ncompany_details = response_company_details.json()\n\n# Get the headquarters of the production company\nheadquarters = company_details['headquarters']\n\nprint(headquarters)\n```",
        "usage": [
            461,
            7592,
            8053
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/82856\"\n\n# Define the parameters (if any)\nparams = {}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Extract the genre names\n    genres = [genre[\"name\"] for genre in data[\"genres\"]]\n    \n    print(\"Genre of The Mandalorian:\", genres)\nelse:\n    print(\"Error in retrieving data:\", response.status_code)\n```",
        "usage": [
            151,
            9954,
            10105
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "results": "```python\nimport requests\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the trending TV show\ntrending_tv_url = \"https://api.themoviedb.org/3/trending/tv/day\"\ntrending_tv_response = requests.get(trending_tv_url, headers=headers)\ntrending_tv_data = trending_tv_response.json()\n\n# Get the lead actor's birthday of the most trending TV show\nlead_actor_id = trending_tv_data['results'][0]['credits']['cast'][0]['id']\nperson_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nperson_response = requests.get(person_url, headers=headers)\nperson_data = person_response.json()\n\n# Extract the birthday of the lead actor\nlead_actor_birthday = person_data['birthday']\n\nprint(\"Birthday of the lead actor of today's most trending TV show:\", lead_actor_birthday)\n```",
        "usage": [
            351,
            6910,
            7261
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the trending TV shows API to get today's most trending TV show\ntrending_tv_url = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(trending_tv_url, headers=headers)\ntrending_tv_data = response.json()\n\n# Get the network id of the most trending TV show\nmost_trending_tv_id = trending_tv_data[\"results\"][0][\"id\"]\n\n# Call the TV show details API to get the network id\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{most_trending_tv_id}\"\nresponse = requests.get(tv_details_url, headers=headers)\ntv_details_data = response.json()\n\n# Get the network id of the TV show\nnetwork_id = tv_details_data[\"networks\"][0][\"id\"]\n\n# Call the network details API to get the homepage of the network\nnetwork_details_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\nresponse = requests.get(network_details_url, headers=headers)\nnetwork_data = response.json()\n\n# Get the homepage of the network\nnetwork_homepage = network_data[\"homepage\"]\nprint(network_homepage)\n```",
        "usage": [
            421,
            7066,
            7487
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "give me a review of today's most trending TV show",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the daily trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(url_trending_tv, headers=headers)\ntrending_tv_data = response.json()\n\n# Extract the TV show ID of the most trending TV show\nmost_trending_tv_id = trending_tv_data['results'][0]['id']\n\n# Get the reviews for the most trending TV show\nurl_reviews = f\"https://api.themoviedb.org/3/tv/{most_trending_tv_id}/reviews\"\nresponse = requests.get(url_reviews, headers=headers)\nreviews_data = response.json()\n\n# Output the review data\nprint(reviews_data)\n```",
        "usage": [
            323,
            6126,
            6449
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "results": "```python\nimport requests\n\n# Initialize the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the daily trending TV shows\nurl_trending = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending = requests.get(url_trending, headers=headers)\n\n# Check if the request was successful\nif response_trending.status_code == 200:\n    # Get the TV show ID of the most trending TV show\n    trending_tv_id = response_trending.json()[\"results\"][0][\"id\"]\n    \n    # Get a list of similar TV shows for the most trending TV show\n    url_similar = f\"https://api.themoviedb.org/3/tv/{trending_tv_id}/similar\"\n    response_similar = requests.get(url_similar, headers=headers)\n    \n    # Check if the request for similar TV shows was successful\n    if response_similar.status_code == 200:\n        similar_tv_shows = response_similar.json()[\"results\"]\n        print(similar_tv_shows)  # Output the list of similar TV shows\n    else:\n        print(\"Failed to get similar TV shows\")\nelse:\n    print(\"Failed to get daily trending TV shows\")\n```",
        "usage": [
            416,
            7303,
            7719
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\nparams = {}\n\n# Define the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the poster path of the most trending TV show\nif response.status_code == 200:\n    data = response.json()\n    if \"results\" in data and len(data[\"results\"]) > 0:\n        trending_tv_show = data[\"results\"][0]\n        poster_path = trending_tv_show.get(\"poster_path\")\n        if poster_path:\n            print(f\"Poster path of today's most trending TV show: {poster_path}\")\n        else:\n            print(\"No poster path available for the most trending TV show.\")\n    else:\n        print(\"No trending TV shows found.\")\nelse:\n    print(\"Failed to fetch data from the API.\")\n```",
        "usage": [
            362,
            8970,
            9332
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the headers required to access the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Jeremy Clarkson to get his person id\nparams = {\n    \"query\": \"Jeremy Clarkson\",\n    \"include_adult\": False\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\ndata = response.json()\nperson_id = data[\"results\"][0][\"id\"]\n\n# Get the TV show credits for Jeremy Clarkson\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\", headers=headers)\ndata = response.json()\ntv_credits = data[\"cast\"]\n\n# Find the most popular TV show\nmost_popular_show_id = None\nmax_popularity = 0\nfor show in tv_credits:\n    if show[\"popularity\"] > max_popularity:\n        max_popularity = show[\"popularity\"]\n        most_popular_show_id = show[\"id\"]\n\n# Get the credits for the most popular TV show\nresponse = requests.get(f\"https://api.themoviedb.org/3/tv/{most_popular_show_id}/credits\", headers=headers)\ndata = response.json()\ncast = data[\"cast\"]\n\n# Find the person who has worked with Jeremy Clarkson in the most popular TV show\nfor person in cast:\n    if person[\"name\"] != \"Jeremy Clarkson\":\n        print(f\"{person['name']} has worked with Jeremy Clarkson in his most popular TV show.\")\n        break\n```\nThis code first searches for Jeremy Clarkson's person id, then retrieves his TV show credits and finds his most popular TV show. Finally, it looks for a person who has worked with Jeremy Clarkson in the most popular TV show.",
        "usage": [
            525,
            9766,
            10291
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "results": "```python\nimport requests\n\n# API url to get the details of the TV show \"Black Mirror\"\ntv_show_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_show_params = {\n    \"query\": \"Black Mirror\",\n    \"include_adult\": False\n}\n\ntv_show_response = requests.get(tv_show_url, headers=headers, params=tv_show_params)\ntv_show_id = tv_show_response.json()[\"results\"][0][\"id\"]\n\n# API url to get the details of the second season of \"Black Mirror\"\nseason_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/2\"\nseason_response = requests.get(season_url, headers=headers)\nepisode_id = season_response.json()[\"episodes\"][0][\"id\"]\n\n# API url to get the details of the first episode of the second season of \"Black Mirror\"\nepisode_url = f\"https://api.themoviedb.org/3/episode/{episode_id}\"\nepisode_response = requests.get(episode_url, headers=headers)\nlead_actor = episode_response.json()[\"crew\"][0][\"name\"]\n\n# Querying images for the lead actor\nperson_url = \"https://api.themoviedb.org/3/search/person\"\nperson_params = {\n    \"query\": lead_actor,\n    \"include_adult\": False\n}\n\nperson_response = requests.get(person_url, headers=headers, params=person_params)\nperson_id = person_response.json()[\"results\"][0][\"id\"]\n\n# API url to get the image of the lead actor\nperson_image_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\nperson_image_response = requests.get(person_image_url, headers=headers)\nlead_actor_image = person_image_response.json()[\"profile_path\"]\n\nprint(f\"The lead actor of the first episode of the second season of Black Mirror is: {lead_actor}\")\nprint(f\"Image of the lead actor: https://image.tmdb.org/t/p/w500/{lead_actor_image}\")\n```",
        "usage": [
            412,
            9430,
            9842
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show The Mandalorian\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\nshow_data = response_search_tv.json()\n\n# Get the lead actor's information\nlead_actor_data = None\nif response_search_tv.ok and show_data[\"total_results\"] > 0:\n    tv_id = show_data[\"results\"][0][\"id\"]\n    url_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    response_credits = requests.get(url_credits, headers=headers)\n    credits_data = response_credits.json()\n\n    for actor in credits_data[\"cast\"]:\n        if \"The Mandalorian\" in actor[\"character\"]:\n            lead_actor_data = actor\n            break\n\n# Get the birthdate of the lead actor of The Mandalorian\nbirth_date = None\nif lead_actor_data:\n    actor_id = lead_actor_data[\"id\"]\n    url_person = f\"https://api.themoviedb.org/3/person/{actor_id}\"\n    response_person = requests.get(url_person, headers=headers)\n    person_data = response_person.json()\n    if response_person.ok:\n        birth_date = person_data.get(\"birthday\")\n\nprint(birth_date)\n```",
        "usage": [
            476,
            7051,
            7527
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ]
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "results": "```python\nimport requests\n\n# Http headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a request to get the list of the current popular TV shows\npopular_url = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}  # Only querying the first page\npopular_response = requests.get(popular_url, headers=headers, params=params)\npopular_tv_shows = popular_response.json()[\"results\"]\n\n# Get the ID of the most popular TV show\nmost_popular_show_id = popular_tv_shows[0][\"id\"]\n\n# Make a request to get the credits of the most popular TV show\ncredits_url = f\"https://api.themoviedb.org/3/tv/{most_popular_show_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_info = credits_response.json()\n\n# Find the lead actor of the most popular show\nlead_actor = None\nfor actor in credits_info[\"cast\"]:\n    lead_actor = actor[\"name\"]\n    break  # Break after finding the first cast member\n\nprint(f\"The lead actor of today's most popular TV show is: {lead_actor}\")\n```",
        "usage": [
            407,
            8557,
            8964
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "results": "```python\nimport requests\n\n# HttpHeaders\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of popular TV shows\npopular_url = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}\nresponse = requests.get(popular_url, headers=headers, params=params)\n\nif response.status_code == 200:\n    # Get the TV show id of the most popular TV show\n    popular_tv_show_id = response.json()[\"results\"][0][\"id\"]\n    \n    # Get the credits of the most popular TV show\n    credits_url = f\"https://api.themoviedb.org/3/tv/{popular_tv_show_id}/credits\"\n    response_credits = requests.get(credits_url, headers=headers)\n    \n    if response_credits.status_code == 200:\n        # Get the profile path of the lead actor\n        lead_actor_profile_path = response_credits.json()[\"cast\"][0][\"profile_path\"]\n        \n        if lead_actor_profile_path:\n            print(f\"Image URL of the lead actor of the most popular TV show: https://image.tmdb.org/t/p/original{lead_actor_profile_path}\")\n        else:\n            print(\"Lead actor's profile image not available\")\n    else:\n        print(\"Error fetching credits data\")\nelse:\n    print(\"Error fetching popular TV shows data\")\n```",
        "usage": [
            437,
            8933,
            9370
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "results": "```python\nimport requests\n\n# API headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search Cate Blanchett\n# Using search for people API\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\nparams_search_person = {\n    \"query\": \"Cate Blanchett\",\n    \"include_adult\": False\n}\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\nresults_search_person = response_search_person.json()\nperson_id = results_search_person[\"results\"][0][\"id\"]\n\n# Step 2: Get Cate Blanchett's latest TV show\n# Using person tv credits API\nurl_person_tv_credits = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse_person_tv_credits = requests.get(url_person_tv_credits, headers=headers)\nresults_person_tv_credits = response_person_tv_credits.json()\nlatest_tv_show_id = results_person_tv_credits[\"cast\"][0][\"id\"]\n\n# Step 3: Get reviews for Cate Blanchett's latest TV show\n# Using TV reviews API\nurl_tv_reviews = f\"https://api.themoviedb.org/3/tv/{latest_tv_show_id}/reviews\"\nparams_tv_reviews = {\n    \"page\": 1\n}\nresponse_tv_reviews = requests.get(url_tv_reviews, headers=headers, params=params_tv_reviews)\nresults_tv_reviews = response_tv_reviews.json()\nreviews = results_tv_reviews[\"results\"]\n\n# Output the reviews\nfor review in reviews:\n    print(\"Author:\", review[\"author\"])\n    print(\"Content:\", review[\"content\"])\n    print(\"URL:\", review[\"url\"])\n    print()\n```",
        "usage": [
            513,
            7148,
            7661
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for a person (David Schwimmer)\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Parameters for searching for David Schwimmer\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"include_adult\": False\n}\n\n# Send a GET request to search for David Schwimmer\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person ID for David Schwimmer\nperson_id = data[\"results\"][0][\"id\"]\n\n# Define the API endpoint to get TV show credits for David Schwimmer\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n\n# Send a GET request to get TV show credits for David Schwimmer\ntv_credits_response = requests.get(tv_credits_url, headers=headers)\ntv_credits_data = tv_credits_response.json()\n\n# Get the most popular TV show of David Schwimmer\nmost_popular_tv_show = max(tv_credits_data[\"cast\"], key=lambda x: x[\"popularity\"])\n\n# Print the most popular TV show name\nprint(\"David Schwimmer's most popular TV show is:\", most_popular_tv_show[\"name\"])\n```",
        "usage": [
            265,
            9722,
            9987
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Black Mirror\"\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Black Mirror\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the second season of \"Black Mirror\"\nurl = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/2/credits\"\nresponse = requests.get(url, headers=headers)\ncrew = response.json()[\"crew\"]\n\n# Find the director of the third episode\nfor member in crew:\n    if member[\"job\"] == \"Director\" and member[\"episode_count\"] == 3:\n        director_name = member[\"name\"]\n        print(f\"The director of the third episode of the second season of Black Mirror is: {director_name}\")\n        break\n```",
        "usage": [
            376,
            7319,
            7695
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "results": "```python\nimport requests\n\n# API url for searching popular people\nurl = \"https://api.themoviedb.org/3/search/person\"\n# Define the query parameters\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False,  # Exclude adult content\n    \"page\": 1,  # First page of results\n    \"region\": \"US\"  # Filter by region (United States)\n}\n\n# Make the HTTP GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the list of known movies for Christopher Nolan\n    results = response.json()[\"results\"][0][\"known_for\"]\n    \n    # Extract movie titles\n    known_movies = [movie[\"original_title\"] for movie in results if movie[\"media_type\"] == \"movie\"]\n    \n    print(known_movies)\n\nelse:\n    print(\"Error: Unable to fetch data\")\n```",
        "usage": [
            204,
            9464,
            9668
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Avatar\"\nquery_params_avatar = {\n    'query': 'Avatar',\n    'page': 1,\n    'include_adult': False\n}\nresponse_avatar = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=query_params_avatar)\nresults_avatar = response_avatar.json()['results']\navatar_rating = results_avatar[0]['vote_average']\n\n# Search for the movie \"Avatar: The Way of Water\"\nquery_params_avatar_water = {\n    'query': 'Avatar: The Way of Water',\n    'page': 1,\n    'include_adult': False\n}\nresponse_avatar_water = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=query_params_avatar_water)\nresults_avatar_water = response_avatar_water.json()['results']\navatar_water_rating = results_avatar_water[0]['vote_average']\n\nif avatar_rating > avatar_water_rating:\n    print(\"Avatar has a higher rating\")\nelse:\n    print(\"Avatar: The Way of Water has a higher rating\")\n```",
        "usage": [
            393,
            7101,
            7494
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Parameters for the API call\nparams = {\n    \"certification_country\": \"US\",\n    \"certification\": \"G\",\n    \"vote_average.gte\": 7.0,\n    \"primary_release_date.gte\": \"2021-01-01\",\n    \"with_original_language\": \"en\",\n    \"page\": 1\n}\n\n# API url\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    # Extracting the movie results\n    movies = data['results']\n    for movie in movies:\n        print(movie['title'])\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            344,
            9659,
            10003
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Lord of the Rings\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\"query\": \"Lord of the Rings\"}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Check if the search was successful and retrieve the first movie's genre\nif response_search_movie.status_code == 200 and data_search_movie[\"total_results\"] > 0:\n    movie_id = data_search_movie[\"results\"][0][\"id\"]\n\n    # Get the details of the movie by its ID to find the genre\n    url_movie_details = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    response_movie_details = requests.get(url_movie_details, headers=headers)\n    data_movie_details = response_movie_details.json()\n\n    # Retrieve the genre of the movie\n    genre_ids = data_movie_details[\"genres\"]\n    genres = [genre[\"name\"] for genre in genre_ids]\n    print(\"Genre of the movie 'Lord of the Rings':\", genres)\nelse:\n    print(\"Movie 'Lord of the Rings' not found.\")\n```",
        "usage": [
            426,
            6381,
            6807
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Set the page parameter to 1\nparams = {\"page\": 1}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the data from the response\ndata = response.json()\n\n# Get the most popular person (first person in the results)\nmost_popular_person = data['results'][0]\n\n# Get the person's id\nperson_id = most_popular_person['id']\n\n# Set the API url to get the person's details\nperson_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n\n# Call the API to get the person's details\nperson_response = requests.get(person_url, headers=headers)\n\n# Get the birthday of the most popular person\nbirthday = person_response.json()['birthday']\n\nprint(\"Birthday of the most popular person:\", birthday)\n```",
        "usage": [
            376,
            8999,
            9375
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ]
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters\nparams = {\n    \"query\": \"Big Bang Theory\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"first_air_date_year\": None\n}\n\n# Make the HTTP request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the TV show id for Big Bang Theory\n    data = response.json()\n    tv_id = data['results'][0]['id']\n\n    # Get the poster of the second season\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/images\"\n    response = requests.get(url, headers=headers)\n    \n    if response.status_code == 200:\n        # Get the poster path for the second season\n        data = response.json()\n        posters = data['posters']\n        for poster in posters:\n            print(poster['file_path'])\n    else:\n        print(\"Error in getting season images\")\nelse:\n    print(\"Error in searching for TV show\")\n```",
        "usage": [
            256,
            7363,
            7619
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "results": "```python\nimport requests\n\n# Define the API url for getting the TV episode details\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2/episode/3\"\n\n# Set the API token in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Extracting the name of the third episode of the second season of Mandalorian\n    episode_name = data['name']\n    print(\"The name of the third episode of the second season of Mandalorian is:\", episode_name)\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            324,
            8316,
            8640
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "results": "```python\nimport requests\n\n# API url to search for the movie \"The Shawshank Redemption\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Parameters for searching the movie\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Making the API call to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\n\n# Parsing the response to get the movie ID of \"The Shawshank Redemption\"\nif response_search_movie.status_code == 200:\n    movie_result = response_search_movie.json()[\"results\"][0]\n    movie_id = movie_result[\"id\"]\n\n    # API url to get the credits of the movie by its ID\n    url_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n    # Making the API call to get the credits of the movie\n    response_movie_credits = requests.get(url_movie_credits, headers=headers)\n\n    # Parsing the response to get the lead actor's ID\n    if response_movie_credits.status_code == 200:\n        cast = response_movie_credits.json()[\"cast\"]\n        lead_actor_id = cast[0][\"id\"]\n\n        # API url to get the details of the actor by their ID\n        url_person_details = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n\n        # Making the API call to get the details of the actor\n        response_person_details = requests.get(url_person_details, headers=headers)\n\n        # Parsing the response to get the birthday of the lead actor\n        if response_person_details.status_code == 200:\n            lead_actor_birthday = response_person_details.json()[\"birthday\"]\n\n            print(f\"The birthday of the lead actor of 'The Shawshank Redemption' is: {lead_actor_birthday}\")\n        else:\n            print(\"Error fetching actor details\")\n    else:\n        print(\"Error fetching movie credits\")\nelse:\n    print(\"Error searching for the movie\")\n```",
        "usage": [
            437,
            5976,
            6413
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer <your_api_key>\"\n}\n\n# Search for the movie 'The Shawshank Redemption'\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"include_adult\": False\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the director's details including birthday\nif response_search_movie.ok and data_search_movie[\"total_results\"] > 0:\n    movie_id = data_search_movie[\"results\"][0][\"id\"]\n    url_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response_movie_credits = requests.get(url_movie_credits, headers=headers)\n    data_movie_credits = response_movie_credits.json()\n\n    # Find the director's id\n    director_id = None\n    for crew_member in data_movie_credits[\"crew\"]:\n        if crew_member[\"job\"] == \"Director\":\n            director_id = crew_member[\"id\"]\n            break\n\n    if director_id:\n        url_person_details = f\"https://api.themoviedb.org/3/person/{director_id}\"\n        response_person_details = requests.get(url_person_details, headers=headers)\n        data_person_details = response_person_details.json()\n\n        if response_person_details.ok:\n            director_birthday = data_person_details[\"birthday\"]\n            print(f\"The birthday of the director of 'The Shawshank Redemption' is: {director_birthday}\")\n        else:\n            print(\"Director details not found.\")\n    else:\n        print(\"Director not found.\")\nelse:\n    print(\"Movie not found.\")\n```  ",
        "usage": [
            374,
            8463,
            8837
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# Set the API url for searching the movie ID for \"The Shawshank Redemption\"\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\n# Set the parameters for searching the movie\nsearch_movie_params = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n# Make a GET request to search for the movie\nsearch_movie_response = requests.get(search_movie_url, headers=headers, params=search_movie_params)\nsearch_movie_data = search_movie_response.json()\n\n# Extract the movie ID for \"The Shawshank Redemption\"\nif search_movie_data[\"results\"]:\n    movie_id = search_movie_data[\"results\"][0][\"id\"]\n\n    # Set the API url for getting the movie details using the movie ID\n    movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    # Make a GET request to get the movie details\n    movie_details_response = requests.get(movie_details_url, headers=headers)\n    movie_details_data = movie_details_response.json()\n\n    # Check if the movie belongs to a production company\n    if movie_details_data[\"production_companies\"]:\n        # Get the first production company ID\n        company_id = movie_details_data[\"production_companies\"][0][\"id\"]\n\n        # Set the API url for getting the company details using the company ID\n        company_details_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n        # Make a GET request to get the company details\n        company_details_response = requests.get(company_details_url, headers=headers)\n        company_details_data = company_details_response.json()\n\n        # Extract the headquarters location of the company\n        headquarters_location = company_details_data[\"headquarters\"]\n        print(\"The headquarters of the company that created The Shawshank Redemption is:\", headquarters_location)\n    else:\n        print(\"No production company details found for the movie.\")\nelse:\n    print(\"Movie 'The Shawshank Redemption' not found.\")\n```",
        "usage": [
            431,
            7817,
            8248
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Make an API call to search for the collection named Star Wars\nsearch_collection_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Star Wars\"\n}\nresponse = requests.get(search_collection_url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the collection id for Star Wars\nif data[\"total_results\"] > 0:\n    collection_id = data[\"results\"][0][\"id\"]\n  \n    # Make an API call to get the details of the company that created the collection\n    collection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    response = requests.get(collection_details_url, headers=headers)\n    data = response.json()\n\n    # Extract the headquarters of the company\n    if \"parts\" in data:\n        for part in data[\"parts\"]:\n            company_id = part[\"id\"]\n            company_details_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n            response = requests.get(company_details_url, headers=headers)\n            company_data = response.json()\n            \n            headquarters = company_data[\"headquarters\"]\n            print(\"The headquarters of the company that created the collection Star Wars is:\", headquarters)\n            break  # Assuming the first part is the main creator\nelse:\n    print(\"No results found for the collection Star Wars\")\n```",
        "usage": [
            460,
            6647,
            7107
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Double Life of Veronique\nsearch_url1 = \"https://api.themoviedb.org/3/search/movie\"\nparams1 = {\n    \"query\": \"The Double Life of Veronique\"\n}\nresponse1 = requests.get(search_url1, headers=headers, params=params1)\ndata1 = response1.json()\n# Get the release date of The Double Life of Veronique\nveronique_release_date = data1['results'][0]['release_date']\n\n# Search for Mulholland Drive\nsearch_url2 = \"https://api.themoviedb.org/3/search/movie\"\nparams2 = {\n    \"query\": \"Mulholland Drive\"\n}\nresponse2 = requests.get(search_url2, headers=headers, params=params2)\ndata2 = response2.json()\n# Get the release date of Mulholland Drive\nmulholland_drive_release_date = data2['results'][0]['release_date']\n\nif veronique_release_date < mulholland_drive_release_date:\n    print(\"The Double Life of Veronique has an earlier release date.\")\nelse:\n    print(\"Mulholland Drive has an earlier release date.\")\n```",
        "usage": [
            418,
            7331,
            7749
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ]
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Find the director of Twin Peaks Season 1\nurl_twin_peaks = \"https://api.themoviedb.org/3/tv/1920/season/1\"\nparams_twin_peaks = {}\nresponse_twin_peaks = requests.get(url_twin_peaks, headers=headers, params=params_twin_peaks)\ndata_twin_peaks = response_twin_peaks.json()\n\ntwin_peaks_director = None\n# Extract director from response\nif \"crew\" in data_twin_peaks:\n    for person in data_twin_peaks[\"crew\"]:\n        if person[\"job\"] == \"Director\":\n            twin_peaks_director = person[\"name\"]\n            break\n\n# Find the director of Mulholland Drive\nurl_mulholland_drive = \"https://api.themoviedb.org/3/movie/101/more\"\nparams_mulholland_drive = {}\nresponse_mulholland_drive = requests.get(url_mulholland_drive, headers=headers, params=params_mulholland_drive)\ndata_mulholland_drive = response_mulholland_drive.json()\n\nmulholland_drive_director = None\n# Extract director from response\nif \"crew\" in data_mulholland_drive:\n    for person in data_mulholland_drive[\"crew\"]:\n        if person[\"job\"] == \"Director\":\n            mulholland_drive_director = person[\"name\"]\n            break\n\n# Check if the directors are the same\nif twin_peaks_director is not None and mulholland_drive_director is not None:\n    if twin_peaks_director == mulholland_drive_director:\n        print(\"Yes, the director of Twin Peaks Season 1 and Mulholland Drive is the same person.\")\n    else:\n        print(\"No, the director of Twin Peaks Season 1 and Mulholland Drive is not the same person.\")\nelse:\n    print(\"Unable to determine directors for comparison.\")\n```",
        "usage": [
            571,
            9455,
            10026
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Mulholland Drive\" to get the movie ID\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Mulholland Drive\"\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\nmovie_id = response_search_movie.json()[\"results\"][0][\"id\"]\n\n# Get the primary information about the movie with the movie ID\nurl_movie_info = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nparams_movie_info = {}\nresponse_movie_info = requests.get(url_movie_info, headers=headers, params=params_movie_info)\ndirector_id = response_movie_info.json()[\"belongs_to_collection\"][\"id\"]\n\n# Get the person details for the director\nurl_person_info = f\"https://api.themoviedb.org/3/person/{director_id}\"\nparams_person_info = {}\nresponse_person_info = requests.get(url_person_info, headers=headers, params=params_person_info)\ndirector_birthplace = response_person_info.json()[\"place_of_birth\"]\n\nprint(\"The director of Mulholland Drive was born in:\", director_birthplace)\n```",
        "usage": [
            419,
            6955,
            7374
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "results": "```python\nimport requests\n\n# Define the API URL for getting the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Set the parameters\nparams = {\n    \"page\": 1,  # Specify which page to query\n    \"region\": \"US\"  # Specify the region to filter release dates\n}\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    # Get the list of top rated movies\n    top_rated_movies = response.json()[\"results\"]\n    \n    # Check if the movie \"Mulholland Drive\" is in the top 10 rated movies\n    is_top_10 = False\n    for index, movie in enumerate(top_rated_movies[:10]):\n        if movie[\"title\"] == \"Mulholland Drive\":\n            is_top_10 = True\n            print(\"The movie 'Mulholland Drive' is in the Top-10 rated list.\")\n            break\n    \n    if not is_top_10:\n        print(\"The movie 'Mulholland Drive' is not in the Top-10 rated list.\")\nelse:\n    print(\"Failed to retrieve data from the API.\")\n```",
        "usage": [
            442,
            8531,
            8973
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "results": "```python\nimport requests\n\n# Setting the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"   \n}\n\n# Define the function to get the movie credits of a person\ndef get_movie_credits(person_name):\n    url = \"https://api.themoviedb.org/3/search/person\"\n    params = {\n        \"query\": person_name\n    }\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n    return data\n\n# Get movie credits for Akira Kurosawa\nakira_results = get_movie_credits(\"Akira Kurosawa\")\n\n# Get movie credits for Spielberg\nspielberg_results = get_movie_credits(\"Spielberg\")\n\n# Compare the number of movies directed\nakira_movie_count = akira_results['results'][0]['known_for'][0]['title'] if akira_results['results'][0]['known_for'][0]['media_type'] == 'movie' else 0\nspielberg_movie_count = spielberg_results['results'][0]['known_for'][0]['title'] if spielberg_results['results'][0]['known_for'][0]['media_type'] == 'movie' else 0\n\nif akira_movie_count > spielberg_movie_count:\n    print(\"Akira Kurosawa directed more movies.\")\nelif spielberg_movie_count > akira_movie_count:\n    print(\"Spielberg directed more movies.\")\nelse:\n    print(\"Akira Kurosawa and Spielberg directed the same number of movies.\")\n```",
        "usage": [
            464,
            9036,
            9500
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "results": "```python\nimport requests\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Get the ID of director David Lynch\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params={\"query\": \"David Lynch\"})\ndata = response.json()\ndirector_id = data['results'][0]['id']\n\n# 2. Get the movie credits for David Lynch\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\", headers=headers)\ndata = response.json()\n\n# 3. Find the TV series directed by David Lynch\ntv_series_directed = []\nfor credit in data['crew']:\n    if credit['job'] == 'Director' and credit['media_type'] == 'tv':\n        tv_series_directed.append(credit['original_title'])\n\nprint(tv_series_directed)\n```",
        "usage": [
            348,
            6836,
            7184
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ]
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "results": "```python\nimport requests\n\n# API endpoint to search for person\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Parameters to search for Scarlett Johansson\nparams = {\n    \"query\": \"Scarlett Johansson\",\n    \"include_adult\": False\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the person details\n    data = response.json()\n    # Get the person id of Scarlett Johansson\n    person_id = data[\"results\"][0][\"id\"]\n    \n    # Now, we use the person_id to get the primary person details\n    url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n    response = requests.get(url, headers=headers)\n    \n    if response.status_code == 200:\n        # Get the birthday of Scarlett Johansson\n        person_data = response.json()\n        birthday = person_data[\"birthday\"]\n        print(\"Scarlett Johansson's birthday:\", birthday)\n    else:\n        print(\"Failed to retrieve data from the API\")\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            254,
            7318,
            7572
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "results": "```python\nimport requests\n\n# Define the API URL\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters for the query\nparams = {\n    \"query\": \"Sword Art Online\",\n    \"include_adult\": False\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the TV show ID for Sword Art Online\ntv_shows = response.json()['results']\nsword_art_online_id = None\nfor show in tv_shows:\n    if show['name'] == 'Sword Art Online':\n        sword_art_online_id = show['id']\n        break\n\n# Now we have the TV show ID, we can get more details about Sword Art Online\nif sword_art_online_id:\n    url = f\"https://api.themoviedb.org/3/tv/{sword_art_online_id}\"\n    response = requests.get(url, headers=headers)\n    show_details = response.json()\n\n    # Get the number of seasons\n    num_seasons = show_details['number_of_seasons']\n    print(num_seasons)\n```  ",
        "usage": [
            406,
            7650,
            8056
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Yui Aragaki\naragaki_response = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params={\"query\": \"Yui Aragaki\"})\naragaki_data = aragaki_response.json()\naragaki_id = aragaki_data['results'][0]['id'] if aragaki_data['results'] else None\n\n# Search for Gen Hoshino\nhoshino_response = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params={\"query\": \"Gen Hoshino\"})\nhoshino_data = hoshino_response.json()\nhoshino_id = hoshino_data['results'][0]['id'] if hoshino_data['results'] else None\n\n# Check if both actors are in the same movie\nif aragaki_id is not None and hoshino_id is not None:\n    # Search for movies where both actors are credited\n    movie_response = requests.get(f\"https://api.themoviedb.org/3/person/{aragaki_id}/movie_credits\", headers=headers)\n    movie_data = movie_response.json()\n    \n    movies_aragaki = [movie['id'] for movie in movie_data['cast']] + [movie['id'] for movie in movie_data['crew']]\n    \n    movie_response = requests.get(f\"https://api.themoviedb.org/3/person/{hoshino_id}/movie_credits\", headers=headers)\n    movie_data = movie_response.json()\n    \n    movies_hoshino = [movie['id'] for movie in movie_data['cast']] + [movie['id'] for movie in movie_data['crew']]\n    \n    common_movies = set(movies_aragaki).intersection(movies_hoshino)\n    \n    print(\"Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?\")\n    print(any(movie_id == 509467 for movie_id in common_movies))\n\nelse:\n    print(\"Yui Aragaki and/or Gen Hoshino not found.\")\n```",
        "usage": [
            614,
            7223,
            7837
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "results": "```python\nimport requests\n\n# API key for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n\n}\n\n# Search for the movie \"Barbie\"\nurl_movie_search = \"https://api.themoviedb.org/3/search/movie\"\nparams_movie_search = {\n    \"query\": \"Barbie\",\n    \"include_adult\": False\n}\nresponse_movie_search = requests.get(url_movie_search, headers=headers, params=params_movie_search)\nmovie_results = response_movie_search.json()[\"results\"]\nif len(movie_results) > 0:\n    director_id = movie_results[0][\"id\"]\nelse:\n    print(\"No movie found with the title 'Barbie'\")\n\n# Get the credits for the movie \"Barbie\" to find the director\nif director_id:\n    url_movie_credits = f\"https://api.themoviedb.org/3/movie/{director_id}/credits\"\n    response_movie_credits = requests.get(url_movie_credits, headers=headers)\n    movie_credits = response_movie_credits.json()\n    crew = movie_credits[\"crew\"]\n    director = next((member for member in crew if member[\"job\"] == \"Director\"), None)\n    if director:\n        director_id = director[\"id\"]\n    else:\n        print(\"No director found for the movie 'Barbie'\")\n\n# Search for the TV show \"DEATH NOTE\"\nurl_tv_search = \"https://api.themoviedb.org/3/search/tv\"\nparams_tv_search = {\n    \"query\": \"DEATH NOTE\",\n    \"include_adult\": False\n}\nresponse_tv_search = requests.get(url_tv_search, headers=headers, params=params_tv_search)\ntv_results = response_tv_search.json()[\"results\"]\nif len(tv_results) > 0:\n    lead_actor_id = tv_results[0][\"id\"]\nelse:\n    print(\"No TV show found with the title 'DEATH NOTE'\")\n\n# Get the credits for the TV show \"DEATH NOTE\" to find the lead actor\nif lead_actor_id:\n    url_tv_credits = f\"https://api.themoviedb.org/3/tv/{lead_actor_id}/credits\"\n    response_tv_credits = requests.get(url_tv_credits, headers=headers)\n    tv_credits = response_tv_credits.json()\n    cast = tv_credits[\"cast\"]\n    lead_actor = cast[0]  # Assuming the lead actor is the first one in the cast list\n    lead_actor_id = lead_actor[\"id\"]\n\n# Get the birthdates of the director and lead actor to calculate age difference\nif director_id and lead_actor_id:\n    url_person_director = f\"https://api.themoviedb.org/3/person/{director_id}\"\n    response_person_director = requests.get(url_person_director, headers=headers)\n    director_details = response_person_director.json()\n    director_birthdate = director_details[\"birthday\"]\n\n    url_person_lead_actor = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n    response_person_lead_actor = requests.get(url_person_lead_actor, headers=headers)\n    lead_actor_details = response_person_lead_actor.json()\n    lead_actor_birthdate = lead_actor_details[\"birthday\"]\n\n    # Parse birthdates to calculate age difference\n    director_birth_year = int(director_birthdate.split(\"-\")[0])\n    lead_actor_birth_year = int(lead_actor_birthdate.split(\"-\")[0])\n    age_difference = abs(director_birth_year - lead_actor_birth_year)\n    \n    print(f\"The director of the movie 'Barbie' is: {director_details['name']}\")\n    print(f\"The lead actor of TV show 'DEATH NOTE' is: {lead_actor_details['name']}\")\n    print(f\"The person who is older is: {director_details['name']} (Director of Barbie)\")\n    print(f\"They are older by: {age_difference} years\")\nelse:\n    print(\"Unable to retrieve all necessary information to compare birthdays\")\n```",
        "usage": [
            966,
            7569,
            8535
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "results": "```python\nimport requests\n\n# Define the API url for searching people\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the parameters for the search query\nparams_search_person = {\n    \"query\": \"Katherine LaNasa\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Make a GET request to search for Katherine LaNasa\nresponse_person_search = requests.get(url_search_person, headers=headers, params=params_search_person)\nperson_data = response_person_search.json()\n\n# Extract the person_id of Katherine LaNasa\nif person_data[\"total_results\"] > 0:\n    person_id = person_data[\"results\"][0][\"id\"]\n\n    # Define the API url for getting the movie credits of Katherine LaNasa\n    url_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n    # Make a GET request to get the movie credits of Katherine LaNasa\n    response_movie_credits = requests.get(url_movie_credits, headers=headers)\n    movie_credits_data = response_movie_credits.json()\n\n    # Extract the latest movie appearance of Katherine LaNasa\n    if len(movie_credits_data[\"cast\"]) > 0:\n        latest_movie = movie_credits_data[\"cast\"][0]\n\n        print(\"Katherine LaNasa's latest movie appearance:\")\n        print(\"Title:\", latest_movie[\"title\"])\n        print(\"Character:\", latest_movie[\"character\"])\n        print(\"Release Date:\", latest_movie[\"release_date\"])\n    else:\n        print(\"No movie credits found for Katherine LaNasa.\")\nelse:\n    print(\"No information found for Katherine LaNasa.\")\n```",
        "usage": [
            361,
            8698,
            9059
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "results": "```python\nimport requests\n\n# API endpoint to search for a movie\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Parameters for the query\nparams = {\n    \"query\": \"Oppenheimer\",\n    \"page\": 1\n}\n\n# Headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the GET request to search for the movie\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parsing the JSON response\ndata = response.json()\n\n# Getting the cover image of the first movie in the search results\nif data[\"total_results\"] > 0:\n    first_movie = data[\"results\"][0]\n    cover_image = first_movie[\"poster_path\"]\n    print(cover_image)\nelse:\n    print(\"No results found for the movie 'Oppenheimer'\")\n```",
        "usage": [
            334,
            8602,
            8936
        ],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    }
]