[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for person with name Sofia Coppola\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Sofia Coppola\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\n\n# Get person id of Sofia Coppola\nperson_id = response.json()['results'][0]['id']\n\n# Get the movie credits for Sofia Coppola\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\n\n# Count the number of movies directed by Sofia Coppola\nmovies_directed_by_sofia_coppola = 0\nfor credit in response.json()['crew']:\n    if credit['job'] == 'Director':\n        movies_directed_by_sofia_coppola += 1\n\nprint(movies_directed_by_sofia_coppola)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "results": "```python\nimport requests\n\n# Assign the API key to a variable\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Set the base URL for the API endpoints\nbase_url = \"https://api.themoviedb.org/3/\"\n\n# Set the headers with the API key\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the movie \"The Dark Knight\" to get its movie_id\nsearch_movie_url = base_url + \"search/movie\"\nparams = {\n    \"query\": \"The Dark Knight\"\n}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the cast and crew for the movie using the movie_id\nmovie_credits_url = base_url + f\"movie/{movie_id}/credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\n\n# Find the lead actor in the cast list\ncast_list = response.json()[\"cast\"]\nlead_actor = None\nfor cast in cast_list:\n    if cast[\"order\"] == 0:  # Lead actor typically has order 0\n        lead_actor = cast[\"name\"]\n        break\n\nprint(f\"The lead actor in the movie 'The Dark Knight' was: {lead_actor}\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Set the required headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameters\nparams = {\n    \"page\": 1\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()[\"results\"]\n    \n    # Check if results are not empty\n    if results:\n        # Get the director of the top-1 rated movie (index 0)\n        top_movie_id = results[0][\"id\"]\n        \n        # Define the API url to get movie details by id\n        movie_details_url = f\"https://api.themoviedb.org/3/movie/{top_movie_id}\"\n        \n        # Send GET request to get movie details\n        movie_details_response = requests.get(movie_details_url, headers=headers)\n        \n        # Check if the response is successful\n        if movie_details_response.status_code == 200:\n            # Get the movie details\n            movie_details = movie_details_response.json()\n            \n            # Get the list of directors\n            crew = movie_details.get(\"credits\", {}).get(\"crew\", [])\n            directors = [member[\"name\"] for member in crew if member[\"job\"] == \"Director\"]\n            \n            if directors:\n                print(f\"The director of the top-1 rated movie is: {directors[0]}\")\n            else:\n                print(\"No director information available for the top-1 rated movie.\")\n        else:\n            print(f\"Failed to get movie details. Status code: {movie_details_response.status_code}\")\n    else:\n        print(\"No results found for top-rated movies.\")\nelse:\n    print(f\"Failed to get top-rated movies. Status code: {response.status_code}\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "give me a image for the collection Star Wars",
        "results": "```python\nimport requests\n\n# API url to search for a collection\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Parameters for the query for Star Wars collection\nparams = {\n    \"query\": \"Star Wars\"\n}\n\n# Headers containing authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Get the image path for the Star Wars collection\n    if data[\"results\"]:\n        image_path = data[\"results\"][0][\"poster_path\"]\n        print(f\"Image path for Star Wars collection: {image_path}\")\n    else:\n        print(\"No results found for Star Wars collection\")\nelse:\n    print(\"Error in API request\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "results": "```python\nimport requests\n\n# Define the API url for searching company\nurl_search_company = \"https://api.themoviedb.org/3/search/company\"\n\n# Define the parameters for the query\nparams = {\n    \"query\": \"Walt Disney\",\n    \"page\": 1\n}\n\n# Define the headers including the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call to search for the company\nresponse = requests.get(url_search_company, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Extract the logo path of Walt Disney from the response\n    walt_disney_logo_path = None\n    data = response.json()\n    results = data.get('results', [])\n    for result in results:\n        if result.get('name') == \"Walt Disney\":\n            walt_disney_logo_path = result.get('logo_path')\n\n    print(\"Logo path of Walt Disney:\", walt_disney_logo_path)\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "results": "```python\nimport requests\n\n# Define the API url to get the movie details of Titanic\nmovie_id = 597\nurl = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers)\nif response.status_code == 200:\n    data = response.json()\n    \n    # Extract the lead actor id\n    cast = data.get('credits', {}).get('cast', [])\n    lead_actor_id = None\n    for actor in cast:\n        if actor.get('character', '') == 'Jack Dawson':\n            lead_actor_id = actor.get('id')\n            break\n    \n    if lead_actor_id is not None:\n        # Get the lead actor details\n        actor_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n        response_actor = requests.get(actor_url, headers=headers)\n        if response_actor.status_code == 200:\n            actor_data = response_actor.json()\n            print(f\"The lead actor of Titanic is: {actor_data.get('name')}\")\n            print(f\"Here is the profile picture of the lead actor:\")\n            print(f\"https://image.tmdb.org/t/p/w500{actor_data.get('profile_path')}\")\n        else:\n            print(\"Unable to fetch the lead actor details\")\n    else:\n        print(\"Lead actor not found in credits\")\nelse:\n    print(\"Unable to fetch movie details\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for movies similar to Titanic\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False,\n    \"page\": 1\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Step 2: Get reviews for the first similar movie\nif 'results' in search_results and len(search_results['results']) > 0:\n    first_similar_movie_id = search_results['results'][0]['id']\n    reviews_url = f\"https://api.themoviedb.org/3/movie/{first_similar_movie_id}/reviews\"\n    reviews_params = {\n        \"page\": 1\n    }\n    reviews_response = requests.get(reviews_url, headers=headers, params=reviews_params)\n    reviews_results = reviews_response.json()\n\n    if 'results' in reviews_results:\n        reviews = reviews_results['results']\n        print(reviews)\n    else:\n        print(\"No reviews found for the first similar movie.\")\nelse:\n    print(\"No similar movies found for Titanic.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "results": "```python\nimport requests\n\n# Define the API url for getting recommendations for a movie\nurl = \"https://api.themoviedb.org/3/movie/597/recommendations\"\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Define the authorization headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the recommendation results\n    recommendations = response.json()\n    \n    # Print the recommendations\n    for recommendation in recommendations['results']:\n        print(recommendation['title'])\nelse:\n    print(\"Failed to get movie recommendations\")\n\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "results": "```python\nimport requests\n\n# API url to get the latest movie\nurl = \"https://api.themoviedb.org/3/discover/movie\"\nparams = {\n    \"with_people\": \"525\",\n    \"sort_by\": \"primary_release_date.desc\"\n}\n\n# Make the request to get the latest movie\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    # Get the details of the latest movie\n    latest_movie = data['results'][0]['title']\n    print(f\"The latest movie directed by Christopher Nolan is: {latest_movie}\")\nelse:\n    print(\"Error in fetching data\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "results": "```python\nimport requests\n\n# Define the API key\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n# Define the base url for the TMDB API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Step 1: Search for the person corresponding to Martin Scorsese\nsearch_person_url = f\"{base_url}/search/person\"\nparams = {\n    \"query\": \"Martin Scorsese\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_id = response.json()['results'][0]['id']\n\n# Step 2: Get the list of movies directed by Martin Scorsese\nmovie_credits_url = f\"{base_url}/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovies_directed_by_scorsese = response.json()['crew']\n\n# Step 3: Find the highest rated movie directed by Martin Scorsese\nhighest_rated_movie = max(movies_directed_by_scorsese, key=lambda x: x['vote_average'])\n\n# Print the highest rated movie directed by Martin Scorsese\nprint(highest_rated_movie['title'])\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for Leonardo DiCaprio\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Leonardo DiCaprio\",\n    \"include_adult\": False\n}\n\n# Call the API to search for Leonardo DiCaprio\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\nif search_data['total_results'] > 0:\n    # Get the person_id of Leonardo DiCaprio\n    person_id = search_data['results'][0]['id']\n\n    # Define the API endpoint to get movie credits for a person\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n    # Call the API to get the movie credits for Leonardo DiCaprio\n    movie_credits_response = requests.get(movie_credits_url, headers=headers)\n    movie_credits_data = movie_credits_response.json()\n\n    # Get the latest movie Leonardo DiCaprio acted in\n    latest_movie = movie_credits_data['cast'][0]\n\n    # Get the movie id of the latest movie\n    movie_id = latest_movie['id']\n\n    # Define the API endpoint to get the details of a movie\n    movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n\n    # Call the API to get the details of the latest movie\n    movie_details_response = requests.get(movie_details_url, headers=headers)\n    movie_details_data = movie_details_response.json()\n\n    # Get the director of the latest movie\n    for crew_member in movie_details_data['credits']['crew']:\n        if crew_member['job'] == \"Director\":\n            director = crew_member['name']\n            break\n\n    print(f\"The director of Leonardo DiCaprio's latest movie is: {director}\")\n\nelse:\n    print(\"No results found for Leonardo DiCaprio.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "results": "```python\nimport requests\n\n# API url to search for people\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n# API url to get TV show credits for a person\nurl_person_tv_credits = \"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n\n# Http headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for director Catherine Hardwicke\nparams_person = {\"query\": \"Catherine Hardwicke\", \"include_adult\": \"false\"}\nresponse_person = requests.get(url_search_person, headers=headers, params=params_person)\nperson_data = response_person.json()\n\nif \"results\" in person_data and len(person_data[\"results\"]) > 0:\n    person_id = person_data[\"results\"][0][\"id\"]\n\n    # Get the TV show credits for the director\n    url_person_tv_credits = url_person_tv_credits.replace(\"{person_id}\", str(person_id))\n    response_tv_credits = requests.get(url_person_tv_credits, headers=headers)\n    tv_credits_data = response_tv_credits.json()\n\n    # Find the most recent TV show\n    recent_tv_show = None\n    most_recent_date = \"\"\n    for credit in tv_credits_data[\"cast\"]:\n        if \"first_air_date\" in credit:\n            if credit[\"first_air_date\"] > most_recent_date:\n                recent_tv_show = credit\n                most_recent_date = credit[\"first_air_date\"]\n\n    # Print the most recent TV show directed by Catherine Hardwicke\n    if recent_tv_show:\n        print(f\"The most recent TV show directed by Catherine Hardwicke is: {recent_tv_show['name']} aired on {recent_tv_show['first_air_date']}\")\n    else:\n        print(\"No TV show directed by Catherine Hardwicke found\")\nelse:\n    print(\"Director Catherine Hardwicke not found in the database\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "results": "```python\nimport requests\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show Breaking Bad\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Breaking Bad\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\nbreaking_bad_id = search_results['results'][0]['id']\n\n# Get recommendations for the TV show with id breaking_bad_id\nrecommend_url = f\"https://api.themoviedb.org/3/tv/{breaking_bad_id}/recommendations\"\nrecommend_params = {}\nrecommend_response = requests.get(recommend_url, headers=headers, params=recommend_params)\nrecommend_results = recommend_response.json()\n\n# Print the list of recommended TV shows\nfor result in recommend_results['results']:\n    print(result['name'])\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "results": "```python\nimport requests\n\n# Define the API url and replace the variables with actual values for trending movies for today\nurl = \"https://api.themoviedb.org/3/trending/movie/day\"\nparams = {}\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie details from the response\n    movie_data = response.json()[\"results\"][0]\n\n    # Get the movie ID\n    movie_id = movie_data[\"id\"]\n\n    # Define the API url for getting the credits for the movie\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n    # Make a GET request to the credits API\n    credits_response = requests.get(credits_url, headers=headers)\n\n    # Check if the credits request was successful\n    if credits_response.status_code == 200:\n        # Get the cast and crew data from the response\n        movie_credits = credits_response.json()\n\n        # Find the director from the crew\n        director = next((member[\"name\"] for member in movie_credits[\"crew\"] if member[\"job\"] == \"Director\"), None)\n\n        print(f\"The director of today's most trending movie is: {director}\")\n    else:\n        print(\"Error: Unable to fetch movie credits\")\nelse:\n    print(\"Error: Unable to fetch trending movies\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the query parameters\nparams = {\n    \"query\": \"Twilight\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\",\n}\n\n# Add the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the search results\nresults = response.json()[\"results\"]\n\n# Get the movie id for \"Twilight\"\nmovie_id = results[0][\"id\"]\n\n# Call the API to get the details of the movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ndirector = credits_response.json()[\"crew\"][0][\"name\"]\n\nprint(f\"The director of the movie Twilight is: {director}\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "results": "```python\nimport requests\n\n# Define the header with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show \"The Witcher\"\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Witcher\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\ntv_show_results = response.json()[\"results\"]\n\nif tv_show_results:\n    # Get the tv_id of \"The Witcher\"\n    tv_id = tv_show_results[0][\"id\"]\n    \n    # Get the details of the first season of \"The Witcher\"\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1\"\n    response = requests.get(url, headers=headers)\n    season_details = response.json()\n    \n    # Get the stills (photos) of the second episode of the first season\n    second_episode_stills = season_details[\"episodes\"][1][\"still_path\"]\n    print(second_episode_stills)\nelse:\n    print(\"No TV show found with the name 'The Witcher'.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "What is top-1 rated movie?",
        "results": "```python\nimport requests\n\n# Set the API url to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Set the parameters to get the first page of results\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()[\"results\"]\n    \n    # Get the top rated movie (first movie in the list)\n    top_rated_movie = results[0][\"title\"]\n    \n    print(f\"The top rated movie is: {top_rated_movie}\")\nelse:\n    print(\"Error in retrieving data\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "results": "```python\nimport requests\n\n# Define the API endpoint and parameters\nurl = \"https://api.themoviedb.org/3/search/movie\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nparams = {\n    \"query\": \"The Matrix\",\n    \"include_adult\": False\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the movie ID for \"The Matrix\"\nmovie_id = data['results'][0]['id']\n\n# Use the movie ID to get the release date\nrelease_date_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\nrelease_date_response = requests.get(release_date_url, headers=headers)\nrelease_date_data = release_date_response.json()\n\n# Get the release date from the response\nrelease_dates = release_date_data['results'][0]['release_dates']\nfor release in release_dates:\n    if release['type'] == 3:  # Theatrical release type\n        release_date = release['release_date']\n        break\n\nprint(\"The release date of the movie 'The Matrix' is:\", release_date)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "Who is the most popular person?",
        "results": "```python\nimport requests\n\n# Http headers to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get a list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Making a GET request to fetch popular people list\nresponse = requests.get(url, headers=headers)\n\n# Getting the JSON response\ndata = response.json()\n\n# Extracting the most popular person's name\nmost_popular_person = data['results'][0]['name']\nprint(\"The most popular person on TMDB is:\", most_popular_person)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ]
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for Christopher Nolan\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams_search_person = {\n    \"query\": \"Christopher Nolan\",\n}\nresponse_search_person = requests.get(search_person_url, headers=headers, params=params_search_person)\ndata_search_person = response_search_person.json()\n\n# Extract the person_id for Christopher Nolan\nperson_id = data_search_person['results'][0]['id']\n\n# Step 2: Get the movie credits for Christopher Nolan\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse_movie_credits = requests.get(movie_credits_url, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Extract the movie_ids for movies directed by Christopher Nolan\nmovie_ids = [movie['id'] for movie in data_movie_credits['crew'] if movie['job'] == \"Director\"]\n\n# Step 3: Get the cover images for each movie\ncover_images = []\nfor movie_id in movie_ids:\n    images_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n    response_images = requests.get(images_url, headers=headers)\n    data_images = response_images.json()\n    cover_images.extend(data_images['posters'])\n\nprint(cover_images)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie Titanic\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie id of Titanic\nmovie_id = data[\"results\"][0][\"id\"]\n\n# Get the keywords associated with the movie Titanic\nurl_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\nresponse_keywords = requests.get(url_keywords, headers=headers)\ndata_keywords = response_keywords.json()\n\n# Extract the common keywords associated with the movie Titanic\nkeywords = [keyword[\"name\"] for keyword in data_keywords[\"keywords\"]]\nprint(keywords)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "Give me a show that is currently on the air",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Set the parameters\nparams = {\n    \"page\": 1\n}\n\n# Set the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    results = response.json()[\"results\"]\n    for show in results:\n        print(show[\"name\"])\nelse:\n    print(\"Failed to fetch data\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "results": "```python\nimport requests\n\n# Define the API url to search for Clint Eastwood\nurl = \"https://api.themoviedb.org/3/search/person\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nparams = {\n    \"query\": \"Clint Eastwood\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the person id for Clint Eastwood\nperson_id = data[\"results\"][0][\"id\"]\n\n# Get the movie credits for Clint Eastwood\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Find the latest movie release date\nlatest_movie_release_date = max([movie[\"release_date\"] for movie in data[\"cast\"]])\n\nprint(\"Clint Eastwood's latest movie is scheduled to be released on:\", latest_movie_release_date)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "results": "```python\nimport requests\n\n# Define the API url to search for movie reviews\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the headers with authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameters to search for the movie \"The Dark Knight\"\nparams = {\n    \"query\": \"The Dark Knight\",\n    \"include_adult\": False\n}\n\n# Make a GET request to search for the movie reviews\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    movie_results = response.json().get('results', [])\n    for result in movie_results:\n        movie_id = result.get('id')\n        \n        # Make a request to get the reviews for the movie\n        reviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n        reviews_params = {\n            \"page\": 1\n        }\n        reviews_response = requests.get(reviews_url, headers=headers, params=reviews_params)\n        \n        if reviews_response.status_code == 200:\n            reviews = reviews_response.json().get('results', [])\n            for review in reviews:\n                print(review.get('content'))\n        else:\n            print(\"Failed to get movie reviews\")\nelse:\n    print(\"Failed to search for the movie\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ]
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for movies directed by Francis Ford Coppola\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Francis Ford Coppola\",\n    \"include_adult\": False\n}\n\n# Make a request to search for the person\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nperson_results = search_response.json()[\"results\"]\n\n# Get the person id of Francis Ford Coppola\nperson_id = None\nfor person in person_results:\n    if person[\"name\"] == \"Francis Ford Coppola\":\n        person_id = person[\"id\"]\n        break\n\n# If person id is found, get the movie credits for that person\nif person_id:\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    movie_credits_response = requests.get(movie_credits_url, headers=headers)\n    movie_credits = movie_credits_response.json()[\"cast\"]\n\n    # Get the first movie directed by Francis Ford Coppola\n    for movie in movie_credits:\n        if \"director\" in movie[\"job\"].lower():  # Assuming the job title for director is \"Director\"\n            movie_id = movie[\"id\"]\n            break\n\n    # If a movie directed by Francis Ford Coppola is found, get similar movies\n    if movie_id:\n        similar_movies_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\n        similar_movies_params = {\"page\": 1}\n        similar_movies_response = requests.get(similar_movies_url, headers=headers, params=similar_movies_params)\n        similar_movies = similar_movies_response.json()[\"results\"]\n\n        # Print the list of similar movies\n        for movie in similar_movies:\n            print(movie[\"title\"])\n\n    else:\n        print(\"No movie directed by Francis Ford Coppola found.\")\nelse:\n    print(\"Person 'Francis Ford Coppola' not found.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API call to get the latest movie details\nurl_latest_movie = \"https://api.themoviedb.org/3/movie/latest\"\nresponse_latest_movie = requests.get(url_latest_movie, headers=headers)\nlatest_movie_data = response_latest_movie.json()\n\n# Get the lead actor (first cast member) in the latest released movie\nlead_actor = latest_movie_data['cast'][0]['name']\nprint(\"Lead actor in the latest released movie is:\", lead_actor)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "results": "```python\nimport requests\n\n# API url for getting list of movies currently in theaters\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1,  # Specify page 1\n    \"region\": \"US\"  # Specify the region as US\n}\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the image path of the first movie in the results\nif response.status_code == 200:\n    data = response.json()\n    if data['total_results'] > 0:\n        first_movie = data['results'][0]\n        poster_path = first_movie['poster_path']\n        image_url = f\"https://image.tmdb.org/t/p/original{poster_path}\"\n        print(image_url)\n    else:\n        print(\"No movies found in theaters\")\nelse:\n    print(\"Failed to retrieve movie data\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of popular movies\nurl = \"https://api.themoviedb.org/3/movie/popular\"\nparams = {\n    \"page\": 1,  # Get the first page\n    \"region\": \"US\"  # Specify the region as US\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\nif response.status_code == 200:\n    # Get the details of the most popular movie\n    most_popular_movie = data['results'][0]\n    movie_id = most_popular_movie['id']\n\n    # Get the keywords for the most popular movie\n    url_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n    response_keywords = requests.get(url_keywords, headers=headers)\n    keywords_data = response_keywords.json()\n\n    if response_keywords.status_code == 200:\n        keywords = [keyword['name'] for keyword in keywords_data['keywords']]\n        print(\"Most Popular Movie:\", most_popular_movie['title'])\n        print(\"Keywords:\", keywords)\n    else:\n        print(\"Failed to fetch movie keywords.\")\nelse:\n    print(\"Failed to fetch popular movies data.\") \n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Define the parameters\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    movie_list = response.json()[\"results\"]\n    \n    # Get the movie_id of the most popular movie\n    most_popular_movie_id = movie_list[0][\"id\"]\n    \n    # Define the API url for getting keywords\n    url_keywords = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\n    \n    # Make the GET request to the API\n    response_keywords = requests.get(url_keywords, headers=headers)\n    \n    # Check if the request was successful\n    if response_keywords.status_code == 200:\n        # Get the keywords of the most popular movie\n        keywords = response_keywords.json()[\"keywords\"]\n        \n        # Extract the names of the keywords\n        keyword_names = [keyword[\"name\"] for keyword in keywords]\n        \n        # Print the keywords\n        print(\"Keywords of the most popular movie right now:\")\n        for keyword in keyword_names:\n            print(keyword)\n    else:\n        print(\"Error in getting keywords. Status code:\", response_keywords.status_code)\nelse:\n    print(\"Error in getting popular movies. Status code:\", response.status_code)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "results": "```python\nimport requests\n\n# Define the API url to search for the movie \"Titanic\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for the search query\nparams_search_movie = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\n\n# Make a GET request to search for the movie \"Titanic\"\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\n\n# Extract the movie ID of the first search result for \"Titanic\"\nif response_search_movie.status_code == 200:\n    movie_id = response_search_movie.json()[\"results\"][0][\"id\"]\n\n    # Define the API url to get the credits for the movie \"Titanic\"\n    url_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n    # Make a GET request to get the credits for the movie \"Titanic\"\n    response_movie_credits = requests.get(url_movie_credits, headers=headers)\n\n    # Extract the cast information from the response\n    cast = response_movie_credits.json()[\"cast\"]\n\n    # Get the names of the actors who starred in the movie \"Titanic\"\n    starring_actors = [actor[\"name\"] for actor in cast]\n\n    print(\"Actors who starred in the movie Titanic:\")\n    for actor in starring_actors:\n        print(actor)\n\nelse:\n    print(\"Error in searching for the movie Titanic\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "results": "```python\nimport requests\n\n# Define the API url to get the company details by id\nurl = \"https://api.themoviedb.org/3/company/4\"\n\n# Define the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Extracting the URL for Paramount Pictures logo\n    logo_url = \"https://image.tmdb.org/t/p/original\" + data['logo_path']\n    print(\"Paramount Pictures logo URL:\", logo_url)\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for companies to get the company id of Universal Pictures\nsearch_url = \"https://api.themoviedb.org/3/search/company\"\nsearch_params = {\n    \"query\": \"universal pictures\",\n    \"page\": 1\n}\n\nresponse = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = response.json()\n\nif search_results[\"total_results\"] > 0:\n    company_id = search_results[\"results\"][0][\"id\"]\n\n    # Get the details of the company using the company id\n    company_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    company_params = {}\n\n    response = requests.get(company_url, headers=headers, params=company_params)\n    company_details = response.json()\n\n    headquarters = company_details[\"headquarters\"]\n    print(\"Universal Pictures Headquarters:\", headquarters)\nelse:\n    print(\"Company 'Universal Pictures' not found.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "results": "```python\nimport requests\n\n# Define the API url for searching the movie Titanic\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set up the parameters for searching the movie Titanic\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Specify the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to search for the movie Titanic\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the information about the movie Titanic\n    results = response.json()[\"results\"]\n    if results:\n        # Get the movie id for the movie Titanic\n        movie_id = results[0][\"id\"]\n        \n        # Define the API url for getting the release dates of the movie Titanic\n        release_dates_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n        \n        # Make a GET request to get the release dates of the movie Titanic\n        release_dates_response = requests.get(release_dates_url, headers=headers)\n        \n        # Check if the request was successful\n        if release_dates_response.status_code == 200:\n            # Get the release dates information\n            release_dates = release_dates_response.json()[\"results\"]\n            for release_date_info in release_dates:\n                if release_date_info[\"release_dates\"]:\n                    # Print the release date of the movie Titanic\n                    print(\"The movie Titanic was released on:\", release_date_info[\"release_dates\"][0][\"release_date\"])\n                else:\n                    print(\"Release date information not found.\")\n        else:\n            print(\"Failed to get release dates information.\")\n    else:\n        print(\"Movie Titanic not found.\")\nelse:\n    print(\"Failed to search for the movie Titanic.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ]
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "results": "```python\nimport requests\n\n# Define the API url to search for collections\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the query parameter to search for \"Star Wars\" collections\nparams = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\n\n# Make the GET request to search for collections\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results from the response\n    results = response.json()[\"results\"]\n    \n    # Check if there are any results\n    if results:\n        # Get the collection id of the first result\n        collection_id = results[0][\"id\"]\n        \n        # Define the API url to get collection details by id\n        collection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n        \n        # Make the GET request to get collection details\n        collection_details_response = requests.get(collection_details_url, headers=headers)\n        \n        # Check if the request was successful\n        if collection_details_response.status_code == 200:\n            # Get the parts of the collection (movies)\n            parts = collection_details_response.json()[\"parts\"]\n            \n            # Get the first part/movies in the collection\n            first_movie = parts[0]\n            \n            # Get the title of the first movie\n            movie_title = first_movie[\"title\"]\n            \n            # Define the API url to get the cast and crew for a movie by movie id\n            credits_url = f\"https://api.themoviedb.org/3/movie/{first_movie['id']}/credits\"\n            \n            # Make the GET request to get the cast and crew for the movie\n            credits_response = requests.get(credits_url, headers=headers)\n            \n            # Check if the request was successful\n            if credits_response.status_code == 200:\n                # Get the cast for the movie\n                cast = credits_response.json()[\"cast\"]\n                \n                # Get the names of the cast members\n                cast_names = [member[\"name\"] for member in cast]\n                \n                # Print the output\n                print(f\"The first movie of Star Wars collection is: {movie_title}\")\n                print(\"The cast members are:\")\n                for name in cast_names:\n                    print(name)\n            else:\n                print(\"Failed to retrieve cast and crew details.\")\n        else:\n            print(\"Failed to retrieve collection details.\")\n    else:\n        print(\"No collections found for the query 'Star Wars'.\")\nelse:\n    print(\"Failed to search for collections.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to search for collections\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Harry Potter\"\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\ncollections = response.json()[\"results\"]\n\n# Find the cover image of a movie from the Harry Potter collection\nif collections:\n    collection_id = collections[0][\"id\"]\n    collection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    response = requests.get(collection_details_url, headers=headers)\n    cover_image = response.json()[\"poster_path\"]\n    print(f\"The cover image path for the Harry Potter collection: {cover_image}\")\nelse:\n    print(\"No collections found for the search query 'Harry Potter'\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "results": "```python\nimport requests\n\n# Headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections to get the collection id for 'The Hunger Games'\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\"query\": \"The Hunger Games\", \"page\": 1}\n\nresponse = requests.get(search_url, headers=headers, params=search_params)\ncollection_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the keywords for a movie of the collection 'The Hunger Games'\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{collection_id}/keywords\"\n\nresponse = requests.get(keywords_url, headers=headers)\nkeywords = response.json()[\"keywords\"]\n\n# Extract the keyword names\nkeyword_names = [keyword[\"name\"] for keyword in keywords]\nprint(keyword_names)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection The Hobbit\nquery = \"The Hobbit\"\nsearch_collections_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {'query': query}\nresponse = requests.get(search_collections_url, headers=headers, params=params)\ncollection_results = response.json()[\"results\"]\n\nif collection_results:\n    # Get the collection id for The Hobbit\n    collection_id = collection_results[0][\"id\"]\n\n    # Get the details of the collection by id\n    collection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    response = requests.get(collection_details_url, headers=headers)\n    collection_details = response.json()\n\n    # Extract the release dates for the movies in the collection\n    movies_release_dates = []\n    for part in collection_details[\"parts\"]:\n        movies_release_dates.append({\n            \"title\": part[\"title\"],\n            \"release_date\": part[\"release_date\"]\n        })\n\n    print(movies_release_dates)\nelse:\n    print(\"The collection 'The Hobbit' was not found.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "results": "```python\nimport requests\n\n# Headers to be added to the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Querying the collection id by searching for The Fast and the Furious collection\ncollection_search_url = \"https://api.themoviedb.org/3/search/collection\"\ncollection_search_params = {\n    \"query\": \"The Fast and the Furious\"\n}\ncollection_search_response = requests.get(collection_search_url, headers=headers, params=collection_search_params)\ncollection_id = collection_search_response.json()[\"results\"][0][\"id\"]\n\n# Retrieving the list of movies from the collection using the collection id\ncollection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\ncollection_details_response = requests.get(collection_details_url, headers=headers)\n\n# Extracting the list of movies from the collection details response\nmovies = collection_details_response.json()[\"parts\"]\n\n# Printing the list of movies\nfor movie in movies:\n    print(movie[\"title\"])\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "results": "```python\nimport requests\n\n# API headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collection id of \"The Fast and the Furious\"\ncollection_url = \"https://api.themoviedb.org/3/search/collection\"\ncollection_params = {\n    \"query\": \"The Fast and the Furious\"\n}\ncollection_response = requests.get(collection_url, headers=headers, params=collection_params)\ncollection_id = collection_response.json()[\"results\"][0][\"id\"]\n\n# Get a review of a movie from the collection\nreview_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nreview_response = requests.get(review_url, headers=headers)\n\n# Print the review details\nprint(review_response.json())\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collection by \"Lord of the Rings\"\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Check if any collection is found\nif search_data[\"total_results\"] > 0:\n    # Get the collection id\n    collection_id = search_data[\"results\"][0][\"id\"]\n    \n    # Get the details of the collection\n    collection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    collection_response = requests.get(collection_url, headers=headers)\n    collection_data = collection_response.json()\n    \n    # Get the parts of the collection (movies in the collection)\n    parts = collection_data[\"parts\"]\n    \n    # Get the details of the first movie in the collection\n    first_movie_id = parts[0][\"id\"]\n    movie_url = f\"https://api.themoviedb.org/3/movie/{first_movie_id}\"\n    movie_response = requests.get(movie_url, headers=headers)\n    movie_data = movie_response.json()\n    \n    # Get the release date of the first movie in the collection\n    release_date = movie_data[\"release_date\"]\n    print(\"The first movie of the collection Lord of the Rings was released on:\", release_date)\n\nelse:\n    print(\"No collection found for Lord of the Rings\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Query for House of Cards TV show\nquery = \"House of Cards\"\nparams = {\n    \"query\": query,\n    \"include_adult\": False\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show id\ntv_id = data[\"results\"][0][\"id\"]\n\n# Query for the credits of the first season of House of Cards\nseason_number = 1\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Extracting directors\ndirectors = [crew[\"name\"] for crew in data[\"crew\"] if crew[\"job\"] == \"Director\"]\n\nprint(directors)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show \"House of Cards\"\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_search_params = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\ntv_search_response = requests.get(tv_search_url, headers=headers, params=tv_search_params)\ntv_search_results = tv_search_response.json()\n\n# Get the id of the TV show \"House of Cards\"\nif tv_search_results[\"total_results\"] > 0:\n    house_of_cards_id = tv_search_results[\"results\"][0][\"id\"]\n\n    # Get a list of similar TV shows\n    similar_tv_url = f\"https://api.themoviedb.org/3/tv/{house_of_cards_id}/similar\"\n    similar_tv_params = {\n        \"page\": 1\n    }\n    similar_tv_response = requests.get(similar_tv_url, headers=headers, params=similar_tv_params)\n    similar_tv_results = similar_tv_response.json()\n\n    # Print the list of similar TV shows\n    print(similar_tv_results[\"results\"])\nelse:\n    print(\"TV show 'House of Cards' not found.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# URL for getting the list of currently popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1  # Assuming we are looking at the first page\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the JSON data\n    data = response.json()\n    \n    # Extract the first show from the results (assuming it is the most popular)\n    first_show = data['results'][0]\n    \n    # Get the start date of the first show\n    start_date = first_show['first_air_date']\n    \n    print(\"The most popular TV show currently on the air started on:\", start_date)\n\nelse:\n    print(\"Failed to fetch data. Status code:\", response.status_code)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Get the movie ID of Django Unchained\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Django Unchained\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ndjango_movie_id = response.json()[\"results\"][0][\"id\"]\n\n# 2. Get the credits for the director of Django Unchained\nurl = f\"https://api.themoviedb.org/3/movie/{django_movie_id}/credits\"\nparams = {}\nresponse = requests.get(url, headers=headers, params=params)\ndirector_name = None\n\nfor crew_member in response.json()[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director_name = crew_member[\"name\"]\n        break\n\n# 3. Get the movie credits for the director\nif director_name:\n    url = \"https://api.themoviedb.org/3/search/person\"\n    params = {\"query\": director_name}\n    response = requests.get(url, headers=headers, params=params)\n    director_id = response.json()[\"results\"][0][\"id\"]\n\n    url = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\n    params = {}\n    response = requests.get(url, headers=headers, params=params)\n\n    # Retrieve a few more works directed by the director of Django Unchained\n    director_works = []\n    for work in response.json()[\"crew\"]:\n        if work[\"job\"] == \"Director\" and work[\"id\"] != django_movie_id:\n            director_works.append(work[\"title\"])\n\n    print(director_works)\nelse:\n    print(\"Director not found\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get the TV shows on air\ntv_on_air_url = \"https://api.themoviedb.org/3/tv/on_the_air\"\n# Calling the API to get the TV shows on air\nresponse_tv_on_air = requests.get(tv_on_air_url, headers=headers)\ntv_on_air_data = response_tv_on_air.json()\n\n# Getting the TV show id of the first show on air\ntv_show_id = tv_on_air_data['results'][0]['id']\n\n# API url to get the credits of a TV show by id\ntv_credits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n# Calling the API to get the credits of the TV show\nresponse_credits = requests.get(tv_credits_url, headers=headers)\ncredits_data = response_credits.json()\n\n# Getting the cast of the TV show\ncast = credits_data['cast']\n\n# Printing the cast of the TV show\nfor actor in cast:\n    print(actor['name'])\n\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "I need a review for Breaking Bad",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for a TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the query parameters\nparams = {\n    \"query\": \"Breaking Bad\",\n    \"include_adult\": False,\n}\n\n# Make the GET request to search for a TV show\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extracting the TV show ID for Breaking Bad\n    tv_show_id = response.json()[\"results\"][0][\"id\"]\n\n    # Define the API endpoint to get the reviews for the TV show by ID\n    reviews_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/reviews\"\n\n    # Make the GET request to get reviews for Breaking Bad\n    reviews_response = requests.get(reviews_url, headers=headers)\n\n    # Display the reviews for Breaking Bad\n    print(reviews_response.json())\nelse:\n    print(\"Error occurred while searching for Breaking Bad\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# Define the API url and TV show id for \"The Last Of Us\"\ntv_show_id = 169290\napi_url_recommendations = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/recommendations\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Add the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(api_url_recommendations, headers=headers, params=params)\n\n# Get the response in JSON format\nrecommendations = response.json()\n\n# Print the recommendations\nprint(recommendations)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters\nparams = {\n    \"query\": \"The Last Of Us\",\n    \"page\": 1,\n    \"include_adult\": False,\n}\n\n# Define the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the call was successful\nif response.status_code == 200:\n    json_response = response.json()\n    \n    # Extract the recommendations\n    recommendations = []\n    for result in json_response['results']:\n        recommendations.append(result['name'])\n    \n    print(recommendations)\nelse:\n    print(\"Failed to retrieve recommendations\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the specific TV show Friends\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Friends\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\ntv_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get the credits for season 3, episode 24 of Friends\nepisode_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/3/episode/24/credits\"\nepisode_response = requests.get(episode_url, headers=headers)\n\n# Extract the guest stars\nguest_stars = episode_response.json()[\"guest_stars\"]\nfor guest_star in guest_stars:\n    print(guest_star[\"name\"])\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the headers containing the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Get the list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\nparams_popular_tv = {\"page\": 1}  # We will just get the first page\nresponse_popular_tv = requests.get(url_popular_tv, headers=headers, params=params_popular_tv)\ndata_popular_tv = response_popular_tv.json()\n\n# Step 2: Get the credits (cast and crew) of the most popular TV show\nmost_popular_tv_id = data_popular_tv[\"results\"][0][\"id\"]  # Get the id of the most popular TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_id}/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the lead actor from the cast list\nlead_actor = data_credits[\"cast\"][0][\"name\"]\n\nprint(f\"The lead actor in the most popular TV show is: {lead_actor}\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/tv/top_rated\"\n\n# Set the parameters\nparams = {\n    \"page\": 1\n}\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the top-rated TV shows\n    tv_shows = response.json()[\"results\"]\n    \n    # Get the top-1 rated TV show\n    top_rated_show = tv_shows[0]\n    \n    # Get the TV show id\n    show_id = top_rated_show[\"id\"]\n    \n    # Set the API url to get keywords of the top-1 rated TV show\n    keyword_url = f\"https://api.themoviedb.org/3/tv/{show_id}/keywords\"\n    \n    # Make the API call to get the keywords\n    keyword_response = requests.get(keyword_url, headers=headers)\n    \n    # Check if the request was successful\n    if keyword_response.status_code == 200:\n        # Get the keywords for the top-1 rated TV show\n        keywords = keyword_response.json()[\"results\"]\n        \n        # Get the keyword of the top-1 rated TV show\n        top_keyword = keywords[0][\"name\"]\n        \n        print(\"Keyword of the top-1 rated TV show:\", top_keyword)\n    else:\n        print(\"Failed to get keywords for the top-1 rated TV show\")\nelse:\n    print(\"Failed to get top-rated TV shows\")\n\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters for the query\nparams = {\n    \"query\": \"2 Broke Girls\",  # Text query to search\n    \"include_adult\": False,  # Exclude adult content\n    \"page\": 1,  # Specify page number\n    \"first_air_date_year\": None  # Optional parameter for first air date year\n}\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    tv_shows = response.json()[\"results\"]\n    \n    # Find 2 Broke Girls TV show\n    for show in tv_shows:\n        if show[\"name\"] == \"2 Broke Girls\":\n            poster_path = show[\"poster_path\"]\n            break\n            \n    if poster_path:\n        print(f\"Poster path for 2 Broke Girls: {poster_path}\")\n    else:\n        print(\"Poster not found for 2 Broke Girls\")\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "results": "```python\nimport requests\n\n# Headers required to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the TV show id for \"2 Broke Girls\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\"\n}\nresponse = requests.get(url_search_tv, headers=headers, params=params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the TV show details to find total number of seasons\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\nresponse = requests.get(url_tv_details, headers=headers)\ntotal_seasons = response.json()[\"number_of_seasons\"]\n\n# Calculate total number of episodes\ntotal_episodes = 0\nfor season_number in range(1, total_seasons + 1):\n    url_season_details = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/{season_number}\"\n    response = requests.get(url_season_details, headers=headers)\n    total_episodes += len(response.json()[\"episodes\"])\n\nprint(total_episodes)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ]
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "results": "```python\nimport requests\n\n# Define the API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the parameters for searching for \"The Big Bang Theory\"\nparams = {\n    \"query\": \"The Big Bang Theory\",\n    \"page\": 1\n}\n\n# Make the API request to search for TV shows\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params)\n\n# Check if the request was successful\nif response_search_tv.status_code == 200:\n    # Extract the company_id of the production company of \"The Big Bang Theory\"\n    company_id = response_search_tv.json()[\"results\"][0][\"production_companies\"][0][\"id\"]\n    \n    # Define the API url for getting company details\n    url_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\n\n    # Make the API request to get company details\n    response_company = requests.get(url_company, headers=headers)\n\n    # Check if the request was successful\n    if response_company.status_code == 200:\n        # Extract the founded date of the company\n        founded_date = response_company.json()[\"description\"]\n\n        print(f\"The company that produced The Big Bang Theory was founded on: {founded_date}\")\n    else:\n        print(\"Error in retrieving company details\")\nelse:\n    print(\"Error in searching for TV show\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ]
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters for the API call\nparams = {\n    \"query\": \"The Big Bang Theory\",\n}\n\n# Add the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the response JSON\n    data = response.json()\n    # Extract the first TV show from the search results\n    if data[\"total_results\"] > 0:\n        show_id = data[\"results\"][0][\"id\"]\n        # Make a request to get the details of the TV show by id\n        tv_show_url = f\"https://api.themoviedb.org/3/tv/{show_id}\"\n        tv_show_response = requests.get(tv_show_url, headers=headers)\n        # Check if the request was successful\n        if tv_show_response.status_code == 200:\n            tv_show_data = tv_show_response.json()\n            creation_date = tv_show_data[\"first_air_date\"]\n            print(f\"The TV show 'The Big Bang Theory' was created on: {creation_date}\")\n        else:\n            print(\"Error in getting TV show details\")\n    else:\n        print(\"TV show not found\")\nelse:\n    print(\"Error in search API call\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Prepare the parameters\nparams = {\n    \"page\": 1  # We are looking at the first page of popular TV shows\n}\n\n# Include the authorization headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    # Get the data from the response\n    tv_shows_data = response.json()\n    \n    # Get the first TV show from the results\n    if len(tv_shows_data[\"results\"]) > 0:\n        tv_show = tv_shows_data[\"results\"][0]\n        \n        # Get the ID of the TV show to retrieve keywords\n        tv_id = tv_show[\"id\"]\n        \n        # Make a request to get keywords for the TV show\n        keywords_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n        keywords_response = requests.get(keywords_url, headers=headers)\n        \n        if keywords_response.status_code == 200:\n            keywords_data = keywords_response.json()\n            \n            # Get the keyword of the most popular TV show\n            if len(keywords_data[\"results\"]) > 0:\n                keyword = keywords_data[\"results\"][0][\"name\"]\n                print(f\"Keyword of the most popular TV show: {keyword}\")\n            else:\n                print(\"No keywords found for the TV show\")\n        else:\n            print(\"Failed to retrieve keywords for the TV show\")\n    else:\n        print(\"No results found for popular TV shows\")\nelse:\n    print(\"Failed to retrieve popular TV shows\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "results": "```python\nimport requests\n\n# API url to get the TV show ID for Westworld\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Westworld\",\n    \"include_adult\": False\n}\n\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show ID for Westworld\ntv_id = data_search_tv[\"results\"][0][\"id\"]\n\n# API url to get the details of the third episode of the second season of Westworld\nurl_episode = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/episode/3\"\n\nresponse_episode = requests.get(url_episode, headers=headers)\ndata_episode = response_episode.json()\n\n# Extract the overview of the third episode of the second season of Westworld\nepisode_overview = data_episode[\"overview\"]\n\nprint(episode_overview)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Game of Thrones\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Game of Thrones\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show id for \"Game of Thrones\"\ntv_id = data_search_tv[\"results\"][0][\"id\"]\n\n# Get the details of the second season of Game of Thrones\nurl_season = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2\"\nresponse_season = requests.get(url_season, headers=headers)\ndata_season = response_season.json()\n\n# Print the air date of the second season of Game of Thrones\nair_date = data_season[\"air_date\"]\nprint(\"The air date of the second season of Game of Thrones is:\", air_date)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "results": "```python\nimport requests\n\n# Define the base API url and the specific TV show we are interested in\nbase_url = \"https://api.themoviedb.org/3\"\ntv_show = \"Band of Brothers\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the TV show \"Band of Brothers\" to get the TV show id\nsearch_tv_url = f\"{base_url}/search/tv\"\nparams = {\"query\": tv_show}\nresponse = requests.get(search_tv_url, headers=headers, params=params)\ntv_show_id = response.json()['results'][0]['id']\n\n# Step 2: Get the details of the TV show to get the season and episode information\ntv_show_details_url = f\"{base_url}/tv/{tv_show_id}\"\nresponse = requests.get(tv_show_details_url, headers=headers)\n# Assuming we want to get the third season, first episode details\nseason_number = 1\nepisode_number = 3\nseason_details_url = f\"{base_url}/tv/{tv_show_id}/season/{season_number}/episode/{episode_number}/images\"\nresponse = requests.get(season_details_url, headers=headers)\nposter_path = response.json()['stills'][0]['file_path']\n\nprint(poster_path)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Game of Thrones\"\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the network id of Game of Thrones\nnetwork_id = data['results'][0]['networks'][0]['id']\n\n# Use the network id to get the logo of the network\nlogo_url = f\"https://api.themoviedb.org/3/network/{network_id}/images\"\nresponse = requests.get(logo_url, headers=headers)\nlogo_data = response.json()\n\n# Extract and print the logo file path\nnetwork_logo = logo_data['logos'][0]['file_path']\nprint(network_logo)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for a TV show (Game of Thrones)\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_search_params = {\n    \"query\": \"Game of Thrones\"\n}\ntv_search_response = requests.get(tv_search_url, headers=headers, params=tv_search_params)\ntv_search_data = tv_search_response.json()\n\n# Get the network details for the first result (assuming it is Game of Thrones)\nnetwork_id = tv_search_data['results'][0]['networks'][0]['id']\n\n# Get the details of the network using the network id\nnetwork_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\nnetwork_response = requests.get(network_url, headers=headers)\nnetwork_data = network_response.json()\n\n# Extract the homepage of the network\nnetwork_homepage = network_data['homepage']\n\nprint(\"Homepage of the network that produced Game of Thrones:\", network_homepage)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "results": "```python\nimport requests\n\n# Define the URL for the API to get the list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the API request headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url_popular_tv, headers=headers)\ndata = response.json()\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the first TV show result\n    tv_show = data[\"results\"][0]\n    \n    # Get the TV show id\n    tv_id = tv_show[\"id\"]\n    \n    # Use the TV show id to call the API to get keywords\n    url_keywords = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    response_keywords = requests.get(url_keywords, headers=headers)\n    data_keywords = response_keywords.json()\n    \n    # Extract and print the keyword of the most popular TV show currently\n    if len(data_keywords[\"results\"]) > 0:\n        keyword = data_keywords[\"results\"][0][\"name\"]\n        print(\"Keyword of the most popular TV show currently:\", keyword)\n    else:\n        print(\"No keywords found for the most popular TV show currently.\")\nelse:\n    print(\"Error accessing the API:\", data[\"status_message\"])\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ]
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "results": "```python\nimport requests\n\n# API url to get the list of the current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}\nresponse = requests.get(url, headers=headers, params=params)\npopular_tv_shows = response.json()\n\n# Get the id of the TV show with the highest popularity\nmost_popular_tv_show_id = popular_tv_shows['results'][0]['id']\n\n# API url to get details of the TV show by id\nurl_tv_show = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_show_id}\"\nresponse_tv_show = requests.get(url_tv_show, headers=headers)\ntv_show_details = response_tv_show.json()\n\n# Get the production company id of the TV show\nproduction_company_id = tv_show_details['production_companies'][0]['id']\n\n# API url to get details of the production company\nurl_company = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\nresponse_company = requests.get(url_company, headers=headers)\ncompany_details = response_company.json()\n\n# Get the name of the country where the company is headquartered\nheadquarter_country = company_details['origin_country']\n\nprint(headquarter_country)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "results": "```python\nimport requests\n\nurl = \"https://api.themoviedb.org/3/search/tv\"\nquery = \"The Mandalorian\"\nparams = {\n    \"query\": query,\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the genre ids of The Mandalorian\ngenre_ids = data['results'][0]['genre_ids']\n\n# Since the genre IDs are not descriptive, we need to call another API to get the genre names\ngenre_names = []\nfor genre_id in genre_ids:\n    genre_url = f\"https://api.themoviedb.org/3/genre/tv/list\"\n    genre_params = {\n        \"language\": \"en-US\"\n    }\n    genre_response = requests.get(genre_url, headers=headers, params=genre_params)\n    genre_data = genre_response.json()\n    \n    for genre in genre_data['genres']:\n        if genre['id'] == genre_id:\n            genre_names.append(genre['name'])\n\nprint(genre_names)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "results": "```python\nimport requests\n\n# Set the headers for the API call\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get today's trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\n\nif response_trending_tv.status_code == 200:\n    trending_tv_data = response_trending_tv.json()\n    \n    if \"results\" in trending_tv_data:\n        # Get the TV show ID of the most trending TV show\n        top_trending_tv_show_id = trending_tv_data[\"results\"][0][\"id\"]\n        \n        # Call the API to get the credits of the most trending TV show\n        url_tv_credits = f\"https://api.themoviedb.org/3/tv/{top_trending_tv_show_id}/credits\"\n        response_tv_credits = requests.get(url_tv_credits, headers=headers)\n        \n        if response_tv_credits.status_code == 200:\n            tv_credits_data = response_tv_credits.json()\n            \n            if \"cast\" in tv_credits_data and len(tv_credits_data[\"cast\"]) > 0:\n                # Get the lead actor's ID\n                lead_actor_id = tv_credits_data[\"cast\"][0][\"id\"]\n                \n                # Call the API to get the details of the lead actor\n                url_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n                response_person = requests.get(url_person, headers=headers)\n                \n                if response_person.status_code == 200:\n                    person_data = response_person.json()\n                    \n                    if \"birthday\" in person_data:\n                        birthday = person_data[\"birthday\"]\n                        print(f\"The lead actor's birthday of today's most trending TV show is on: {birthday}\")\n                    else:\n                        print(\"Lead actor's birthday information not found.\")\n                else:\n                    print(\"Error fetching person details.\")\n            else:\n                print(\"Lead actor information not found.\")\n        else:\n            print(\"Error fetching TV show credits.\")\n    else:\n        print(\"Trending TV show data not found.\")\nelse:\n    print(\"Error fetching trending TV shows.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ]
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "results": "```python\nimport requests\n\n# Provided headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the daily trending TV show API\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    # Extract the network id of the most trending TV show\n    trending_tv_show = response.json()[\"results\"][0]\n    tv_id = trending_tv_show[\"id\"]\n\n    # Call the API to get the TV show details by id\n    tv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    tv_details_response = requests.get(tv_details_url, headers=headers)\n\n    if tv_details_response.status_code == 200:\n        network_id = tv_details_response.json()[\"networks\"][0][\"id\"]\n\n        # Call the API to get the network details by id\n        network_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\n        network_response = requests.get(network_url, headers=headers)\n\n        if network_response.status_code == 200:\n            homepage = network_response.json()[\"homepage\"]\n            print(\"Homepage of the network that produced today's most trending TV show:\", homepage)\n        else:\n            print(\"Error in fetching network details\")\n    else:\n        print(\"Error in fetching TV show details\")\nelse:\n    print(\"Error in fetching trending TV shows\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "give me a review of today's most trending TV show",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the daily trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\n\nif response_trending_tv.status_code == 200:\n    trending_tv_data = response_trending_tv.json()\n    if 'results' in trending_tv_data and len(trending_tv_data['results']) > 0:\n        tv_id = trending_tv_data['results'][0]['id']  # Get the ID of the most trending TV show\n\n        # Get the reviews for the most trending TV show\n        url_tv_reviews = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\n        response_tv_reviews = requests.get(url_tv_reviews, headers=headers)\n\n        if response_tv_reviews.status_code == 200:\n            tv_reviews_data = response_tv_reviews.json()\n            if 'results' in tv_reviews_data and len(tv_reviews_data['results']) > 0:\n                print(\"Review of today's most trending TV show:\")\n                print(f\"Author: {tv_reviews_data['results'][0]['author']}\")\n                print(f\"Content: {tv_reviews_data['results'][0]['content']}\")\n            else:\n                print(\"No reviews found for the most trending TV show.\")\n        else:\n            print(\"Error fetching TV show reviews.\")\n    else:\n        print(\"No trending TV shows found for today.\")\nelse:\n    print(\"Error fetching trending TV shows.\")\n\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "results": "```python\nimport requests\n\n# API url to get today's trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1\n}\n\n# HTTP headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get today's trending TV shows\nresponse = requests.get(url_trending_tv, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the list of trending TV shows\n    trending_tv_shows = response.json()[\"results\"]\n    \n    if len(trending_tv_shows) > 0:\n        # Select the most popular TV show from the trending list\n        most_popular_tv_show = max(trending_tv_shows, key=lambda x: x[\"popularity\"])\n        \n        # Get the TV show id of the most popular TV show\n        tv_id = most_popular_tv_show[\"id\"]\n        \n        # API url to get similar TV shows\n        url_similar_tv = f\"https://api.themoviedb.org/3/tv/{tv_id}/similar\"\n        \n        # Call the API to get the list of similar TV shows\n        response_similar = requests.get(url_similar_tv, headers=headers, params=params)\n        \n        if response_similar.status_code == 200:\n            similar_tv_shows = response_similar.json()[\"results\"]\n            \n            print(\"TV show similar to today's most trending TV show:\")\n            for show in similar_tv_shows:\n                print(show[\"name\"])\n        else:\n            print(\"Failed to retrieve similar TV shows\")\n    else:\n        print(\"No trending TV shows found\")\nelse:\n    print(\"Failed to retrieve trending TV shows\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "results": "```python\nimport requests\n\n# API url\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers)\n\n# Get the poster path of the most trending TV show\nif response.status_code == 200:\n    data = response.json()\n    if 'results' in data and len(data['results']) > 0:\n        trending_tv_show = data['results'][0]\n        if 'poster_path' in trending_tv_show:\n            poster_path = trending_tv_show['poster_path']\n            print(\"Poster path of today's most trending TV show:\", poster_path)\n        else:\n            print(\"No poster path available for today's most trending TV show.\")\n    else:\n        print(\"No trending TV shows found for today.\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the base url for TMDB API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the headers containing the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Jeremy Clarkson in the person API\nparams_person_search = {\n    \"query\": \"Jeremy Clarkson\",\n    \"include_adult\": False\n}\nresponse_person_search = requests.get(f\"{base_url}/search/person\", headers=headers, params=params_person_search)\nperson_results = response_person_search.json()[\"results\"]\n\nif len(person_results) > 0:\n    jeremy_clarkson_id = person_results[0][\"id\"]\n    \n    # Get the TV show credits for Jeremy Clarkson\n    response_tv_credits = requests.get(f\"{base_url}/person/{jeremy_clarkson_id}/tv_credits\", headers=headers)\n    tv_credits = response_tv_credits.json()\n    \n    # Find the most popular TV show\n    most_popular_show_id = None\n    max_popularity = 0\n    for credit in tv_credits[\"cast\"]:\n        if credit[\"popularity\"] > max_popularity:\n            most_popular_show_id = credit[\"id\"]\n            max_popularity = credit[\"popularity\"]\n    \n    if most_popular_show_id:\n        # Get the credits for the most popular TV show\n        response_credits = requests.get(f\"{base_url}/tv/{most_popular_show_id}/credits\", headers=headers)\n        show_credits = response_credits.json()\n        \n        # Find out who has worked with Jeremy Clarkson in this show\n        coworkers = set()\n        for cast_member in show_credits[\"cast\"]:\n            if cast_member[\"id\"] != jeremy_clarkson_id:\n                coworkers.add(cast_member[\"name\"])\n        \n        print(\"People who have worked with Jeremy Clarkson in his most popular TV show:\")\n        for coworker in coworkers:\n            print(coworker)\n    else:\n        print(\"Could not find the most popular TV show for Jeremy Clarkson.\")\nelse:\n    print(\"Jeremy Clarkson not found in the database.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "results": "```python\n# Required imports\nimport requests\n\n# API key to access the TMDB API\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Headers to be used for API request\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Base URL for the TMDB API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Step 1: Get the TV show ID for Black Mirror\n# Search for the TV show Black Mirror\nsearch_url = f\"{base_url}/search/tv\"\nparams = {\n    \"api_key\": api_key,\n    \"query\": \"Black Mirror\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get the credits for the second season of Black Mirror\nseason_number = 2\ncredits_url = f\"{base_url}/tv/{tv_show_id}/season/{season_number}\"\nparams = {\n    \"api_key\": api_key\n}\nresponse = requests.get(credits_url, headers=headers, params=params)\nlead_actor = response.json()[\"episodes\"][0][\"crew\"][0][\"name\"]\n\n# Step 3: Get the image of the lead actor\nperson_search_url = f\"{base_url}/search/person\"\nparams = {\n    \"api_key\": api_key,\n    \"query\": lead_actor\n}\nresponse = requests.get(person_search_url, headers=headers, params=params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Step 4: Get the images of the lead actor\nimages_url = f\"{base_url}/person/{person_id}/images\"\nparams = {\n    \"api_key\": api_key\n}\nresponse = requests.get(images_url, headers=headers, params=params)\nimage_path = response.json()[\"profiles\"][0][\"file_path\"]\n\n# Output the image path of the lead actor\nprint(\"The lead actor of the first episode of the second season of Black Mirror looks like:\")\nprint(f\"https://image.tmdb.org/t/p/original{image_path}\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "results": "```python\nimport requests\n\n# Http headers to be used for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for The Mandalorian TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\ntv_show_id = response.json()['results'][0]['id']\n\n# Step 2: Get the credits for The Mandalorian TV show\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncast = response.json()['cast']\n\nlead_actor_id = None\n# Find the lead actor ID from the credits\nfor actor in cast:\n    if actor['order'] == 0:  # Assuming the lead actor has order 0\n        lead_actor_id = actor['id']\n        break\n\n# Step 3: Get the details of the lead actor\nperson_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse = requests.get(person_url, headers=headers)\nlead_actor_birthdate = response.json()['birthday']\n\nprint(\"The lead actor of The Mandalorian was born on:\", lead_actor_birthdate)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "results": "```python\nimport requests\n\n# Set the API URL for getting the list of popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the parameters for the request\nparams = {\"page\": 1}\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request to get the list of popular TV shows\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the details of the most popular TV show\n    most_popular_show = data[\"results\"][0]\n    show_id = most_popular_show[\"id\"]\n    \n    # Get the credits (cast and crew) for the most popular TV show\n    credits_url = f\"https://api.themoviedb.org/3/tv/{show_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    \n    if credits_response.status_code == 200:\n        credits_data = credits_response.json()\n        # Get the details of the lead actor\n        lead_actor = credits_data[\"cast\"][0][\"name\"]\n        print(f\"The lead actor of today's most popular TV show is: {lead_actor}\")\n    else:\n        print(\"Error in fetching credits data\")\nelse:\n    print(\"Error in fetching popular TV shows data\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "results": "```python\nimport requests\n\n# Define the API url to get the list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Parameters for the API call\nparams = {\n    \"page\": 1\n}\n\n# Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call to get the list of popular TV shows\nresponse = requests.get(url_popular_tv, headers=headers, params=params)\ndata = response.json()\n\n# Get the first TV show in the list (most popular)\ntv_show = data[\"results\"][0]\n\n# Get the TV show id\ntv_id = tv_show[\"id\"]\n\n# Define the API url to get the credits for the TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n\n# Make the API call to get the credits for the TV show\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the first actor from the cast (lead actor)\nlead_actor = data_credits[\"cast\"][0]\n\n# Get the profile path of the lead actor\nprofile_path = lead_actor[\"profile_path\"]\n\n# Print the URL of the photo of the lead actor of the most popular TV show\nif profile_path:\n    photo_url = f\"https://image.tmdb.org/t/p/original{profile_path}\"\n    print(photo_url)\nelse:\n    print(\"Lead actor's photo not available\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "results": "```python\nimport requests\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for Cate Blanchett\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    'query': \"Cate Blanchett\",\n    'include_adult': 'false'\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nsearch_results = response.json()\n\n# Step 2: Get the latest TV show credits for Cate Blanchett\nif 'results' in search_results and len(search_results['results']) > 0:\n    person_id = search_results['results'][0]['id']\n    tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n    response = requests.get(tv_credits_url, headers=headers)\n    tv_credits = response.json()\n    \n    # Step 3: Get the TV show reviews for the latest TV show by Cate Blanchett\n    if 'cast' in tv_credits and len(tv_credits['cast']) > 0:\n        latest_show_id = tv_credits['cast'][0]['id']\n        reviews_url = f\"https://api.themoviedb.org/3/tv/{latest_show_id}/reviews\"\n        response = requests.get(reviews_url, headers=headers)\n        reviews = response.json()\n        \n        print(reviews)\n    else:\n        print(\"No TV show credits found for Cate Blanchett\")\nelse:\n    print(\"Cate Blanchett not found in search results\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for David Schwimmer\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"include_adult\": False\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\ndata = response.json()\n\n# Get David Schwimmer's person id\nperson_id = data['results'][0]['id']\n\n# Get David Schwimmer's TV credits\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\", headers=headers)\ndata = response.json()\n\n# Find the most popular TV show\npopular_tv_show = max(data['cast'], key=lambda x: x['popularity'])\n\nprint(f\"The most popular TV show of David Schwimmer is: {popular_tv_show['original_name']}\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ]
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "results": "```python\nimport requests\n\n# Define the API url to get the credits for the third episode of the second season of Black Mirror\nurl = \"https://api.themoviedb.org/3/tv/42009/season/2/episode/3/credits\"\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    # Get the crew list\n    crew_list = data[\"crew\"]\n    \n    # Iterate over the crew list to find the director of the episode\n    director = None\n    for crew_member in crew_list:\n        if crew_member[\"job\"] == \"Director\":\n            director = crew_member[\"name\"]\n            break\n    \n    if director:\n        print(f\"The director of the third episode of the second season of Black Mirror is: {director}\")\n    else:\n        print(\"Director info not found.\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for person by name (Christopher Nolan)\n# Query for person details\nperson_url = \"https://api.themoviedb.org/3/search/person\"\nperson_params = {\n    \"query\": \"Christopher Nolan\",\n    \"page\": 1,\n    \"include_adult\": False,\n    # You can add region parameter if needed\n    # \"region\": \"US\"\n}\nperson_response = requests.get(person_url, headers=headers, params=person_params)\nperson_data = person_response.json()\n\n# Extract the person's ID for Christopher Nolan\nperson_id = person_data['results'][0]['id']\n\n# Get the known movies for Christopher Nolan\n# Query for movie credits for the person\ncredit_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\ncredit_params = {}\ncredit_response = requests.get(credit_url, headers=headers, params=credit_params)\ncredit_data = credit_response.json()\n\n# Extract the list of movies Christopher Nolan is known for\nmovies_known_for = []\nfor movie in credit_data['cast']:\n    movies_known_for.append(movie['title'])\n\n# Print the list of movies Christopher Nolan is known for\nprint(movies_known_for)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Avatar\" by title\navatar_params = {\n    \"query\": \"Avatar\",\n    \"include_adult\": False\n}\nresponse_avatar = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=avatar_params)\navatar_data = response_avatar.json()\n\n# Search for the movie \"Avatar: The Way of Water\" by title\navatar_water_params = {\n    \"query\": \"Avatar: The Way of Water\",\n    \"include_adult\": False\n}\nresponse_avatar_water = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=avatar_water_params)\navatar_water_data = response_avatar_water.json()\n\n# Extracting average ratings for each movie\navatar_rating = avatar_data['results'][0]['vote_average'] if avatar_data['total_results'] > 0 else None\navatar_water_rating = avatar_water_data['results'][0]['vote_average'] if avatar_water_data['total_results'] > 0 else None\n\n# Determine which movie has a higher rating\nif avatar_rating is not None and avatar_water_rating is not None:\n    if avatar_rating > avatar_water_rating:\n        print(\"Avatar has a higher rating than Avatar: The Way of Water\")\n    elif avatar_rating < avatar_water_rating:\n        print(\"Avatar: The Way of Water has a higher rating than Avatar\")\n    else:\n        print(\"Both Avatar and Avatar: The Way of Water have the same rating\")\nelse:\n    print(\"One or both movies were not found in the search results\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n\n# Set the request parameters\nparams = {\n    \"api_key\": \"YOUR_API_KEY\",\n    \"language\": \"en-US\",\n    \"sort_by\": \"vote_average.desc\",\n    \"vote_average.gte\": 7.0,\n    \"primary_release_date.gte\": \"2021-01-01\",\n    \"with_original_language\": \"en\",\n    \"page\": 1\n}\n\n# Add the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    results = response.json()\n    # Extract and print the list of movies\n    movies = results[\"results\"]\n    for movie in movies:\n        print(f\"Title: {movie['title']}, Rating: {movie['vote_average']}, Release Date: {movie['release_date']}\")\nelse:\n    print(\"Request was not successful.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the movie \"Lord of the Rings\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the API request to search for the movie\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie id of \"Lord of the Rings\"\nmovie_id = data['results'][0]['id']\n\n# Get the details of the movie using the movie id\nmovie_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nparams = {}\nresponse = requests.get(movie_url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the genre of the movie\nmovie_genre = data['genres'][0]['name']\nprint(f\"The genre of the movie 'Lord of the Rings' is: {movie_genre}\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "results": "```python\nimport requests\n\n# API url for getting the list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Parameters for the API request\nparams = {\n    \"page\": 1\n}\n\n# Http header for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Getting the JSON response\npopular_people = response.json()\n\n# Extracting the birthday of the most popular person\nmost_popular_person = popular_people['results'][0]\nmost_popular_person_birthday = most_popular_person['birthday']\n\nprint(\"The birthday of the most popular person right now is:\", most_popular_person_birthday)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "results": "```python\nimport requests\n\n# store the base url\nbase_url = \"https://api.themoviedb.org/3\"\n\n# specify the TV show id for Big Bang Theory\ntv_id = 1418\n\n# specify the season number\nseason_number = 2\n\n# API url for getting the images of a TV season\nurl = f\"{base_url}/tv/{tv_id}/season/{season_number}/images\"\n\n# set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# make the API request\nresponse = requests.get(url, headers=headers)\n\n# handle the response\nif response.status_code == 200:\n    data = response.json()\n    # extract the posters\n    posters = data.get(\"posters\", [])\n    # check if there are posters available\n    if len(posters) > 0:\n        # get the URL of the poster for the second season\n        poster_path = posters[1].get(\"file_path\")\n        if poster_path:\n            full_poster_url = f\"https://image.tmdb.org/t/p/original{poster_path}\"\n            print(full_poster_url)\n        else:\n            print(\"No poster path available for the second season of Big Bang Theory\")\n    else:\n        print(\"No posters available for the second season of Big Bang Theory\")\nelse:\n    print(\"Failed to retrieve data from the API\")\n\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the details of the third episode of the second season of Mandalorian\nurl = \"https://api.themoviedb.org/3/tv/67198/season/2/episode/3\"\n# Include the required API key in the header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the JSON response data\n    data = response.json()\n    # Extract the name of the third episode of the second season of Mandalorian\n    episode_name = data.get('name')\n    print(\"The name of the third episode of the second season of Mandalorian is:\", episode_name)\nelse:\n    print(\"Error occurred with status code:\", response.status_code)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie 'The Shawshank Redemption'\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nmovie_params = {\n    \"query\": \"The Shawshank Redemption\",\n}\nresponse = requests.get(movie_search_url, headers=headers, params=movie_params)\nmovie_results = response.json()[\"results\"]\n\nif len(movie_results) > 0:\n    # Get the lead actor details by querying for the cast and crew of the movie\n    movie_id = movie_results[0][\"id\"]\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response = requests.get(credits_url, headers=headers)\n    cast_crew = response.json()\n    \n    # Find the lead actor's id\n    lead_actor_id = None\n    for cast in cast_crew[\"cast\"]:\n        if cast[\"order\"] == 0:  # 0 typically refers to the lead actor\n            lead_actor_id = cast[\"id\"]\n            break\n    \n    if lead_actor_id:\n        # Get the birthday of the lead actor\n        person_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n        response = requests.get(person_url, headers=headers)\n        lead_actor_info = response.json()\n        \n        lead_actor_birthday = lead_actor_info[\"birthday\"]\n        print(f\"The lead actor's birthday of 'The Shawshank Redemption' is: {lead_actor_birthday}\")\n    else:\n        print(\"Lead actor not found for the movie 'The Shawshank Redemption'\")\nelse:\n    print(\"Movie 'The Shawshank Redemption' not found.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# API endpoint to search for the movie \"The Shawshank Redemption\"\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n    \"include_adult\": \"false\"\n}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie id of \"The Shawshank Redemption\" from the search results\nmovie_id = data['results'][0]['id']\n\n# API endpoint to get the credits for the movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse_credits = requests.get(credits_url, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the director id from the movie credits\ndirector_id = None\nfor crew_member in data_credits['crew']:\n    if crew_member['job'] == 'Director':\n        director_id = crew_member['id']\n        break\n\n# API endpoint to get the details of the director\nperson_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\nresponse_person = requests.get(person_url, headers=headers)\ndata_person = response_person.json()\n\n# Get the birthday of the director\ndirector_birthday = data_person['birthday']\nprint(\"The birthday of the director of the movie 'The Shawshank Redemption' is:\", director_birthday)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# API url to search for a movie\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Params to search for the movie \"The Shawshank Redemption\"\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False,\n}\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the company id that created the movie\nif \"results\" in data_search_movie and len(data_search_movie[\"results\"]) > 0:\n    movie_company_id = data_search_movie[\"results\"][0].get(\"id\")\n\n    # API url to get details about the movie by movie id\n    url_movie_details = f\"https://api.themoviedb.org/3/movie/{movie_company_id}\"\n    \n    # Send a GET request to get details about the movie\n    response_movie_details = requests.get(url_movie_details, headers=headers)\n    data_movie_details = response_movie_details.json()\n\n    # Get the company id that created the movie\n    if \"production_companies\" in data_movie_details and len(data_movie_details[\"production_companies\"]) > 0:\n        company_id = data_movie_details[\"production_companies\"][0][\"id\"]\n        \n        # API url to get details about the company by company id\n        url_company_details = f\"https://api.themoviedb.org/3/company/{company_id}\"\n        \n        # Send a GET request to get details about the company\n        response_company_details = requests.get(url_company_details, headers=headers)\n        data_company_details = response_company_details.json()\n        \n        # Get the headquarters location of the company\n        headquarters_location = data_company_details.get(\"headquarters\", \"Not Available\")\n        print(\"The headquarters of the company that created the movie 'The Shawshank Redemption' is:\", headquarters_location)\n    else:\n        print(\"Company details not found for the movie.\")\nelse:\n    print(\"Movie 'The Shawshank Redemption' not found.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the parameters for the search query\nparams = {\n    \"query\": \"Star Wars\"\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url_search_collection, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the response data\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        # Get the collection id of Star Wars\n        star_wars_collection_id = data[\"results\"][0][\"id\"]\n\n        # Define the API endpoint to get details of the collection by id\n        url_collection = f\"https://api.themoviedb.org/3/collection/{star_wars_collection_id}\"\n        \n        # Make the API call to get collection details\n        response_collection = requests.get(url_collection, headers=headers)\n        \n        # Check if the request was successful\n        if response.status_code == 200:\n            # Get the company details from the collection\n            company_id = response_collection.json()[\"production_companies\"][0][\"id\"]\n            \n            # Define the API endpoint to get details of the company by id\n            url_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\n            \n            # Make the API call to get company details\n            response_company = requests.get(url_company, headers=headers)\n\n            # Check if the request was successful\n            if response_company.status_code == 200:\n                # Get the headquarters of the company\n                headquarters = response_company.json()[\"headquarters\"]\n                print(\"Headquarters of the company that created the collection Star Wars:\", headquarters)\n            else:\n                print(\"Error fetching company details\")\n        else:\n            print(\"Error fetching collection details\")\n    else:\n        print(\"No results found for the collection Star Wars\")\nelse:\n    print(\"Error in API request\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Double Life of Veronique movie\nparams_veronique = {\n    \"query\": \"The Double Life of Veronique\",\n    \"include_adult\": False\n}\nresponse_veronique = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=params_veronique)\nveronique_results = response_veronique.json()[\"results\"]\nveronique_release_date = veronique_results[0][\"release_date\"]\n\n# Search for Mulholland Drive movie\nparams_drive = {\n    \"query\": \"Mulholland Drive\",\n    \"include_adult\": False\n}\nresponse_drive = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=params_drive)\ndrive_results = response_drive.json()[\"results\"]\ndrive_release_date = drive_results[0][\"release_date\"]\n\n# Compare the release dates and determine the order\nif veronique_release_date < drive_release_date:\n    print(\"The Double Life of Veronique was released earlier than Mulholland Drive.\")\nelse:\n    print(\"Mulholland Drive was released earlier than The Double Life of Veronique.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "results": "```python\nimport requests\n\n# Set the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the credits for a TV season\ndef get_season_credits(tv_id, season_number):\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits\"\n    response = requests.get(url, headers=headers)\n    return response.json()\n\n# Function to get the director from the credits\ndef get_director(credits):\n    for crew_member in credits[\"crew\"]:\n        if crew_member[\"job\"] == \"Director\":\n            return crew_member[\"name\"]\n    return None\n\n# Get the credits for Twin Peaks Season 1\ntwin_peaks_credits = get_season_credits(tv_id=1920, season_number=1)\ntwin_peaks_director = get_director(twin_peaks_credits)\n\n# Get the credits for Mulholland Drive\nmulholland_drive_credits = get_season_credits(tv_id=431, season_number=1)\nmulholland_drive_director = get_director(mulholland_drive_credits)\n\n# Check if the directors are the same\nif twin_peaks_director is not None and mulholland_drive_director is not None:\n    if twin_peaks_director == mulholland_drive_director:\n        print(\"The director of Twin Peaks Season 1 and Mulholland Drive is the same person.\")\n    else:\n        print(\"The director of Twin Peaks Season 1 and Mulholland Drive is different.\")\nelse:\n    print(\"Director information not found for one or more entries.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "results": "```python\nimport requests\n\n# Set the API url to get the primary information about the movie \"Mulholland Drive\"\nmovie_id = 101\nurl = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n# Set the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Extract the director's id from the response\n    director_id = None\n    for crew_member in data['credits']['crew']:\n        if crew_member['job'] == 'Director':\n            director_id = crew_member['id']\n            break\n    \n    if director_id is not None:\n        # Get the details of the director by their id\n        url_person = f\"https://api.themoviedb.org/3/person/{director_id}\"\n        response_person = requests.get(url_person, headers=headers)\n        person_data = response_person.json()\n\n        # Extract the birthplace of the director\n        birthplace = person_data['place_of_birth']\n        print(f\"The director of Mulholland Drive was born in: {birthplace}\")\n    else:\n        print(\"Director information not found.\")\nelse:\n    print(\"Error occurred with status code:\", response.status_code)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get the list of top-rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"  # Specify a region code if needed\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if Mulholland Drive is in the top-rated list\nis_in_top_10 = False\nfor movie in data['results']:\n    if movie['title'] == 'Mulholland Drive':\n        is_in_top_10 = True\n\nprint(is_in_top_10)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\ndef get_director_movie_count(director_name):\n    url = \"https://api.themoviedb.org/3/search/person\"\n    params = {\n        \"query\": director_name,\n        \"include_adult\": False\n    }\n    response = requests.get(url, headers=headers, params=params)\n\n    if response.status_code == 200:\n        data = response.json()\n        if data['total_results'] > 0:\n            person_id = data['results'][0]['id']\n            movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n            movie_credits_response = requests.get(movie_credits_url, headers=headers)\n            if movie_credits_response.status_code == 200:\n                movie_credits_data = movie_credits_response.json()\n                return len(movie_credits_data['cast']) + len(movie_credits_data['crew'])\n            else:\n                print(\"Error fetching movie credits data.\")\n                return -1\n        else:\n            print(\"Director not found.\")\n            return -1\n    else:\n        print(\"Error fetching director data.\")\n        return -1\n\n# Get the count of movies directed by Akira Kurosawa\nakira_movie_count = get_director_movie_count(\"Akira Kurosawa\")\n\n# Get the count of movies directed by Spielberg\nspielberg_movie_count = get_director_movie_count(\"Steven Spielberg\")\n\n# Determine who directed more movies\nif akira_movie_count > spielberg_movie_count:\n    print(\"Akira Kurosawa directed more movies.\")\nelif spielberg_movie_count > akira_movie_count:\n    print(\"Steven Spielberg directed more movies.\")\nelse:\n    print(\"Both directors directed the same number of movies.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "results": "```python\nimport requests\n\n# Define the necessary headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Get the details of David Lynch (director of Mulholland Drive)\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params={\"query\": \"David Lynch\"})\ndavid_lynch_id = response.json()[\"results\"][0][\"id\"]\n\n# 2. Get the TV show credits for David Lynch\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{david_lynch_id}/tv_credits\", headers=headers)\ntv_credits = response.json()\n\n# 3. Extract the TV shows directed by David Lynch\ndirected_tv_series = []\nfor crew in tv_credits[\"crew\"]:\n    if crew[\"job\"] == \"Director\":\n        directed_tv_series.append(crew[\"name\"])\n\nprint(directed_tv_series)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "results": "```python\nimport requests\n\n# Define the API url for searching person\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n\n# Specify the parameters for searching actor Scarlett Johansson\nparams = {\n    \"query\": \"Scarlett Johansson\",\n    \"include_adult\": \"false\",\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Make a GET request to search for Scarlett Johansson\nresponse = requests.get(url_search_person, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the person_id for Scarlett Johansson\n    if data[\"total_results\"] > 0:\n        person_id = data[\"results\"][0][\"id\"]\n        \n        # Define the API url for getting the person details by id\n        url_person_details = f\"https://api.themoviedb.org/3/person/{person_id}\"\n        \n        # Make a GET request to get the person details for Scarlett Johansson\n        response_person = requests.get(url_person_details, headers=headers)\n        \n        # Check if the request was successful\n        if response_person.status_code == 200:\n            # Parse the JSON response\n            data_person = response_person.json()\n            \n            # Get the birthday of Scarlett Johansson\n            birthday = data_person.get(\"birthday\", \"Birthday not found\")\n            print(\"Scarlett Johansson's birthday is:\", birthday)\n        else:\n            print(\"Failed to retrieve Scarlett Johansson's details\")\n    else:\n        print(\"Scarlett Johansson not found\")\nelse:\n    print(\"Failed to search for Scarlett Johansson\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "results": "```python\nimport requests\n\n# Set the API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/11757\"\n\n# Set the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Find the number of seasons\n    num_seasons = len(data[\"seasons\"])\n    print(f\"The number of seasons of Sword Art Online is: {num_seasons}\")\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Yui Aragaki\nparams_aragaki = {\n    \"query\": \"Yui Aragaki\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nurl_aragaki = \"https://api.themoviedb.org/3/search/person\"\nresponse_aragaki = requests.get(url_aragaki, headers=headers, params=params_aragaki)\naragaki_id = response_aragaki.json()[\"results\"][0][\"id\"]\n\n# Search for Gen Hoshino\nparams_hoshino = {\n    \"query\": \"Gen Hoshino\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nurl_hoshino = \"https://api.themoviedb.org/3/search/person\"\nresponse_hoshino = requests.get(url_hoshino, headers=headers, params=params_hoshino)\nhoshino_id = response_hoshino.json()[\"results\"][0][\"id\"]\n\n# Check if they are co-starring in \"We Married as Job\"\nparams_movie = {\n    \"query\": \"We Married as Job\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nurl_movie = \"https://api.themoviedb.org/3/search/movie\"\nresponse_movie = requests.get(url_movie, headers=headers, params=params_movie)\nmovie_id = response_movie.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the movie\nurl_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ncredits = response_credits.json()\n\n# Check if Yui Aragaki and Gen Hoshino are in the cast of the movie\naragaki_in_cast = False\nhoshino_in_cast = False\n\nfor cast_member in credits[\"cast\"]:\n    if cast_member[\"id\"] == aragaki_id:\n        aragaki_in_cast = True\n    if cast_member[\"id\"] == hoshino_id:\n        hoshino_in_cast = True\n\nif aragaki_in_cast and hoshino_in_cast:\n    print(\"Yui Aragaki and Gen Hoshino are co-starring in We Married as Job.\")\nelse:\n    print(\"Yui Aragaki and Gen Hoshino are not co-starring in We Married as Job.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie with title \"Barbie\"\nparams_movie_search = {\n    \"query\": \"Barbie\"\n}\nresponse_movie_search = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=params_movie_search).json()\nbarbie_director_id = response_movie_search[\"results\"][0][\"id\"]\n\n# Get the credits (cast and crew) for the movie Barbie\nresponse_credits_movie = requests.get(f\"https://api.themoviedb.org/3/movie/{barbie_director_id}/credits\", headers=headers).json()\ndirector_id = response_credits_movie[\"crew\"][0][\"id\"]\n\n# Get the details of the director of the movie Barbie\nresponse_director_details = requests.get(f\"https://api.themoviedb.org/3/person/{director_id}\", headers=headers).json()\nbarbie_director_birth_year = int(response_director_details[\"birthday\"].split(\"-\")[0])\n\n# Search for the TV show with title \"Death Note\"\nparams_tv_search = {\n    \"query\": \"Death Note\"\n}\nresponse_tv_search = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params_tv_search).json()\ndeath_note_lead_actor_id = response_tv_search[\"results\"][0][\"id\"]\n\n# Get the credits (cast and crew) for the TV show Death Note\nresponse_credits_tv = requests.get(f\"https://api.themoviedb.org/3/tv/{death_note_lead_actor_id}/credits\", headers=headers).json()\nlead_actor_id = response_credits_tv[\"cast\"][0][\"id\"]\n\n# Get the details of the lead actor of the TV show Death Note\nresponse_actor_details = requests.get(f\"https://api.themoviedb.org/3/person/{lead_actor_id}\", headers=headers).json()\ndeath_note_lead_actor_birth_year = int(response_actor_details[\"birthday\"].split(\"-\")[0])\n\n# Calculate the age difference\nage_difference = abs(barbie_director_birth_year - death_note_lead_actor_birth_year)\n\nprint(f\"The director of the film Barbie is older than the lead actor of the television show Death Note by {age_difference} years.\")\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "results": "```python\nimport requests\n\n# Provided API url for getting details of a person by id\nurl = \"https://api.themoviedb.org/3/person/{person_id}\"\n# Replace {person_id} with Katherine LaNasa's person id (You need to find this id)\nparams = {\n    \"append_to_response\": \"movie_credits\"\n}\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    # Extracting the latest movie appearance of Katherine LaNasa\n    latest_movie = data.get(\"movie_credits\", {}).get(\"cast\", [{}])[0]\n    if latest_movie:\n        print(\"Katherine LaNasa's latest movie appearance:\")\n        print(\"Movie Title:\", latest_movie.get(\"title\"))\n        print(\"Character:\", latest_movie.get(\"character\"))\n        print(\"Release Date:\", latest_movie.get(\"release_date\"))\n        print(\"Overview:\", latest_movie.get(\"overview\"))\n    else:\n        print(\"No movie appearance found for Katherine LaNasa\")\nelse:\n    print(\"Failed to fetch data. Status code:\", response.status_code)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Specify the query for the movie \"Oppenheimer\"\nparams = {\n    \"query\": \"Oppenheimer\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Define the headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the cover image of the movie Oppenheimer\n    result = response.json()\n    if result[\"total_results\"] > 0:\n        poster_path = result[\"results\"][0][\"poster_path\"]\n        cover_image_url = f\"https://image.tmdb.org/t/p/original{poster_path}\"\n        print(cover_image_url)\n    else:\n        print(\"No cover image found for the movie Oppenheimer\")\nelse:\n    print(\"Failed to retrieve data. Error:\", response.status_code)\n```",
        "usage": [],
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    }
]