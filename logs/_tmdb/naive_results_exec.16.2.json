[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "results": "```python\nimport requests\n\n# Define the API url to search for a person\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the parameters to search for Sofia Coppola\nparams = {\n    \"query\": \"Sofia Coppola\",\n    \"include_adult\": False\n}\n\n# Make the request to search for the person\nresponse = requests.get(url_search_person, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()[\"results\"]\n    \n    # Search for Sofia Coppola's id\n    person_id = None\n    for result in results:\n        if result[\"name\"] == \"Sofia Coppola\":\n            person_id = result[\"id\"]\n            break\n    \n    if person_id:\n        # Define the API url to get movie credits for the director\n        url_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n        # Make the request to get the movie credits for Sofia Coppola\n        response_credits = requests.get(url_movie_credits, headers=headers)\n\n        # Check if the request was successful\n        if response_credits.status_code == 200:\n            # Get the movie credits\n            movie_credits = response_credits.json()[\"cast\"]\n\n            # Count the number of movies\n            num_movies = len(movie_credits)\n            print(f\"Number of movies directed by Sofia Coppola: {num_movies}\")\n\n        else:\n            print(\"Error in getting movie credits\")\n    else:\n        print(\"Sofia Coppola not found in search results\")\nelse:\n    print(\"Error in searching for person\")\n```",
        "usage": [
            539,
            7599,
            8138
        ],
        "executed": "Number of movies directed by Sofia Coppola: 44\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "results": "```python\nimport requests\n\n# Define the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie The Dark Knight\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\"query\": \"The Dark Knight\"}\nresponse = requests.get(url_search_movie, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie_id of The Dark Knight\nmovie_id = data['results'][0]['id']\n\n# Get the cast and crew of The Dark Knight\nurl_cast_crew = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse_cast_crew = requests.get(url_cast_crew, headers=headers)\ndata_cast_crew = response_cast_crew.json()\n\n# Find the lead actor in the cast\nlead_actor = \"\"\nfor actor in data_cast_crew['cast']:\n    if actor['order'] == 0:  # Assuming lead actor has order 0\n        lead_actor = actor['name']\n        break\n\nprint(f\"The lead actor in the movie The Dark Knight was: {lead_actor}\")\n```",
        "usage": [
            391,
            8976,
            9367
        ],
        "executed": "The lead actor in the movie The Dark Knight was: Christian Bale\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "results": "```python\nimport requests\n\n# API url to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Adding the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parsing the response JSON\ndata = response.json()\n\n# Getting the director of the top-1 rated movie\nmovie_id = data[\"results\"][0][\"id\"]\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse_credits = requests.get(credits_url, headers=headers)\ndata_credits = response_credits.json()\n\ndirector = None\nfor crew_member in data_credits[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director = crew_member[\"name\"]\n        break\n\nprint(\"Director of the top-1 rated movie:\", director)\n```",
        "usage": [
            379,
            11413,
            11792
        ],
        "executed": "Director of the top-1 rated movie: Frank Darabont\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "give me a image for the collection Star Wars",
        "results": "```python\nimport requests\n\n# Provided headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n\n}\n\n# API url to search for collections\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Parameters for the query\nparams = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Checking if the request was successful\nif response.status_code == 200:\n    # Getting the response data\n    data = response.json()\n    \n    # Checking if any results were returned\n    if data['total_results'] > 0:\n        # Getting the image path for the collection\n        backdrop_path = data['results'][0]['backdrop_path']\n        print(\"Image path for the collection 'Star Wars':\", backdrop_path)\n    else:\n        print(\"No results found for the collection 'Star Wars'\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            375,
            7377,
            7752
        ],
        "executed": "Image path for the collection 'Star Wars': /d8duYyyC9J5T825Hg7grmaabfxQ.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "results": "```python\nimport requests\n\n# Define the API url for searching companies\nurl = \"https://api.themoviedb.org/3/search/company\"\n\n# Define the query parameters\nparams = {\n    \"query\": \"Walt Disney\",\n    \"page\": 1\n}\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to search for the company\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()[\"results\"]\n    \n    # Find the company with the name \"Walt Disney\" and get its logo\n    for result in results:\n        if result[\"name\"] == \"Walt Disney\":\n            company_id = result[\"id\"]\n            logo_url = f\"https://api.themoviedb.org/3/company/{company_id}/images\"\n            logo_response = requests.get(logo_url, headers=headers)\n            logo_data = logo_response.json()\n            logo_path = logo_data[\"logos\"][0][\"file_path\"]  # Get the path of the logo image\n            print(f\"The logo of Walt Disney is: https://image.tmdb.org/t/p/original{logo_path}\")\n            break\nelse:\n    print(\"Error occurred while fetching data\")\n```",
        "usage": [
            440,
            7129,
            7569
        ],
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "results": "```python\nimport requests\n\n# Headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie Titanic to get the movie_id\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\"query\": \"Titanic\", \"page\": 1}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the movie Titanic to find the lead actor\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\nlead_actor_name = response.json()[\"cast\"][0][\"name\"]\n\n# Get the images for the lead actor\nsearch_person_url = f\"https://api.themoviedb.org/3/search/person\"\nparams = {\"query\": lead_actor_name, \"page\": 1}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the images for the lead actor\nperson_images_url = f\"https://api.themoviedb.org/3/person/{person_id}/images\"\nresponse = requests.get(person_images_url, headers=headers)\nactor_images = response.json()[\"profiles\"]\n\n# Print the images for the lead actor of Titanic\nprint(actor_images)\n```",
        "usage": [
            448,
            7111,
            7559
        ],
        "executed": "[{'aspect_ratio': 0.667, 'height': 1563, 'iso_639_1': None, 'file_path': '/wo2hJpn04vbtmh0B9utCFdsQhxM.jpg', 'vote_average': 5.386, 'vote_count': 53, 'width': 1042}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': None, 'file_path': '/5Brc5dLifH3UInk3wUaCuGXpCqy.jpg', 'vote_average': 5.348, 'vote_count': 19, 'width': 600}, {'aspect_ratio': 0.667, 'height': 2190, 'iso_639_1': None, 'file_path': '/aLUFp0zWpLVyIOgY0scIpuuKZLE.jpg', 'vote_average': 5.322, 'vote_count': 34, 'width': 1460}, {'aspect_ratio': 0.667, 'height': 1599, 'iso_639_1': None, 'file_path': '/rQXtbTp21ZWuFxcrkuPMytyTrip.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1066}, {'aspect_ratio': 0.666, 'height': 1640, 'iso_639_1': None, 'file_path': '/jqbqNrOIB3alGMX6Gh2MbOKMXZO.jpg', 'vote_average': 5.206, 'vote_count': 26, 'width': 1093}, {'aspect_ratio': 0.668, 'height': 1266, 'iso_639_1': None, 'file_path': '/h5JnhncKehZuzRXOdGKYTH6zVWX.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 846}, {'aspect_ratio': 0.666, 'height': 1481, 'iso_639_1': None, 'file_path': '/jMOipiHOPkVdx9phhKamwlVKEZT.jpg', 'vote_average': 5.178, 'vote_count': 33, 'width': 987}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': None, 'file_path': '/nb7e6caBO5BxZ8lyIp9Hzv69oNB.jpg', 'vote_average': 5.146, 'vote_count': 10, 'width': 500}, {'aspect_ratio': 0.667, 'height': 775, 'iso_639_1': None, 'file_path': '/2cMjPA5MnzWvy9FaMTFCTZ39Uau.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 517}, {'aspect_ratio': 0.667, 'height': 1866, 'iso_639_1': None, 'file_path': '/dIUG8zUX5WJmnL0F2PVpfaenCrt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1244}, {'aspect_ratio': 0.667, 'height': 1501, 'iso_639_1': None, 'file_path': '/iGYNP8yCh2p23M3SL5LVQD276jB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1001}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "results": "```python\nimport requests\n\n# API Key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movies similar to Titanic\nurl_search = \"https://api.themoviedb.org/3/search/movie\"\nparams_search = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse_search = requests.get(url_search, headers=headers, params=params_search)\nsearch_results = response_search.json()\n\nif search_results[\"total_results\"] > 0:\n    # Get the movie id of the first movie similar to Titanic\n    movie_id = search_results[\"results\"][0][\"id\"]\n\n    # Get reviews for the first movie similar to Titanic\n    url_reviews = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n    params_reviews = {\n        \"page\": 1\n    }\n    response_reviews = requests.get(url_reviews, headers=headers, params=params_reviews)\n    reviews_data = response_reviews.json()\n\n    # Extract the reviews\n    reviews = reviews_data[\"results\"]\n    print(reviews)\n\nelse:\n    print(\"No movies similar to Titanic found.\")\n```",
        "usage": [
            397,
            7592,
            7989
        ],
        "executed": "[{'author': 'John Chard', 'author_details': {'name': '', 'username': 'John Chard', 'avatar_path': '/utEXl2EDiXBK6f41wCLsvprvMg4.jpg', 'rating': 9.0}, 'content': \"Beautiful Romance - Tragedy Unbound.\\r\\n\\r\\nIt has kind of become the popular thing to kick Titanic, the film and its achievements. It's like the love it garnered on release and the colossal waves it made in the history of cinema, never happened, or as some want you to believe, doesn't matter. I can tell you now that many of my macho fuelled friends will privately, under the influence of liquid refreshments, admit to having affection for the film, but socially in a circle environment? Not a bit of it! I have no such problems admitting my love for the film, I love it as much now as I approach 50, as I did when I sat there in awe at the cinema in 1997.\\r\\n\\r\\nYou jump - I jump.\\r\\n\\r\\nTitanic is far from flawless, where even now with the advancements in technology the effects over 15 years later look a touch creaky. While it's true as well that away from Rose and Jack the characterisations are thin on the ground. But this is Rose and Jack's story, fully fleshed out for an hour and half and then framed by the terrible tragedy that unfolds for the next hour and half. The tie-in to the present day is superbly constructed by James Cameron - the search for the diamond - the real life filming of the Titanic wreckage - and the flashback telling of the story by a delightful Gloria Stuart as old Rose, and the sinking of the ship and its aftermath is stunning and heart breaking in equal measure.\\r\\n\\r\\nNever let go.\\r\\n\\r\\nSo may scenes and dialogue exchanges stay in the memory for ever. The band playing on, the captain awaiting his fate, the mother ushering her children to sleep before the sea comes to take them, the old boy drinking his brandy as the water rushes in, or just Jack and Rose, polar opposites in society's class structure, making love, making art or just professing that neither will ever let go. It's what makes Titanic the wonderful piece of cinema it is, where beauty and tragedy merge to create something forever memorable. A film that deserved all the accolades and cash till ringing that it once did have. 9/10\", 'created_at': '2014-09-25T23:52:44.706Z', 'id': '5424aaccc3a36808760043df', 'updated_at': '2021-06-23T15:57:28.766Z', 'url': 'https://www.themoviedb.org/review/5424aaccc3a36808760043df'}, {'author': 'CinemaSerf', 'author_details': {'name': 'CinemaSerf', 'username': 'Geronimo1967', 'avatar_path': '/1kks3YnVkpyQxzw36CObFPvhL5f.jpg', 'rating': 7.0}, 'content': 'Set around the ill-fated maiden voyage of the RMS \"Titanic\", this is essentially a film in two parts. The first, weaker, element features a young \"Dawson\" (Leonardo DiCaprio) who wins a third class ticket to New York on the soon to depart liner. Meantime, the wealthy but unhappy \"Rose\" (Kate Winslet) is up in the posh cabins with her cold and unfeeling fianc\u00e9e \"Hockley\" (Billy Zane) and her equally unpleasant, venally ambitious mother \"Ruth\" (Frances Fisher). Desperately unhappy, \"Rose\" considers jumping off the prow of the boat, but luckily the charming young \"Dawson\" is on hand to talk her down, and so begins their friendship that causes much chagrin amongst her socially elite companions. That friendship culminates in him making a rather provocative drawing of her, the final straw for her boyfriend and his enforcer \"Lovejoy\" (David Warner). It all looks ominous for both until - part two begins. The ship, speeding along nicely under the command of Bernard Hill\\'s Captain Smith clips the underwater part of an iceberg and now history takes over. James Cameron offers us a purely speculative account of what might have happened as the initially incredulous crew start to realise that maybe it is not just Molly Brown (an excellent Kathy Bates) that\\'s unsinkable! What now ensues are a series of well staged scenarios depicting panic, fear, a fair degree of selfishness and some proper stiff upper lips as the ship has be evacuated and the segregation of the passengers and competencies of the crew start to become life threatening. The visual effects have dated, the smoke from the ship\\'s funnels blows in an strangely symmetrical fashion and the later scenes struggle to convince - but this is really a rather tragic love story with a strong chemistry between the engaging two characters at the top of the bill, and an effective performance from the older \"Rose\" (Gloria Stewart) who takes on the role of narrator 80 years after the disaster. I still find it uncomfortable to watch the actuality of the wreck, which features occasionally throughout the film - I feel like I am quite literally walking through someone\\'s grave; but it does lend a potent hook upon which this lengthy, but well thought out and constructed drama is presented. Criticisms have been made of it\\'s factual inaccuracies, and it may well play a bit fast and loose with some of the real characterisations - but it\\'s a drama, and to be enjoyed has to be appreciated in that sphere. Big screen is a must, it really does lose a great deal on a television.', 'created_at': '2022-06-08T11:59:42.608Z', 'id': '62a08f2e12197e565ea45214', 'updated_at': '2022-06-08T11:59:42.608Z', 'url': 'https://www.themoviedb.org/review/62a08f2e12197e565ea45214'}, {'author': 'Antoine53', 'author_details': {'name': '', 'username': 'Antoine53', 'avatar_path': None, 'rating': None}, 'content': 'Awesome', 'created_at': '2023-01-17T14:01:51.580Z', 'id': '63c6aa4f66ae4d0085cb704a', 'updated_at': '2023-01-17T15:17:41.173Z', 'url': 'https://www.themoviedb.org/review/63c6aa4f66ae4d0085cb704a'}, {'author': 'Nathan', 'author_details': {'name': 'Nathan', 'username': 'TitanGusang', 'avatar_path': '/yHGV91jVzmqpFOtRSHF0avBZmPm.jpg', 'rating': 10.0}, 'content': \"Titanic is simply a masterpiece. This movie has it all. A tremendous score, deep emotion emphasized by fantastic performances, and incredibly gripping and high-stakes action. There is really something for everyone here.\\r\\n\\r\\nBefore I continue my praise of the film, I think it has one glaring weakness: the present-day plot. For me, this just did not work all that well. I understand that it was implemented for the main story to have a more emotional impact, but it was not needed. It added almost thirty minutes to the runtime, which could have been used for more character development in the story or to have a more streamlined plot. Not to mention, the acting in this section was lackluster. That might be a hot take, but it was something that I noticed during my watch.\\r\\n\\r\\nBack to the positives. The score is magnificent here. The minute I finished the film, I had an urge to put on this score to be transported back to the Titanic. That does not happen very often to me.\\r\\n\\r\\nThe performances are great all around. Leonardo DiCaprio and Kate Winslet's chemistry was perfect. They played off each other so well and really sold this emphatic and rapid love the two shared. The movie spends a lot of time building their relationship and the payoff at the end is worth every second. Billy Zane was an over-the-top asshole, and even though it was cheesy at times, it worked for me. The other ancillary cast members did well, including Kathy Bates, Frances Fisher and Bill Paxton.\\r\\n\\r\\nThis film is really two movies put into one and both of them work excellently. The first half is a charming and cute love story that spends a lot of time on character development, laying the background for motivations and personalities. While this half may have been my favorite, it is slightly outdone by the second half, which is a gripping and suspenseful survival action story. This section is brutal, showing large scale panic and hysteria while also having some incredibly horrific deaths. The chaos was infectious and very scary to watch. Both halves create a great sense of emotion in the audience and complement each other very well.\\r\\n\\r\\nOverall, this movie had twenty-five years of hype and critical acclaim to live up to, and I am happy to say it passed expectations. Since leaving the theater, I cannot stop thinking about it.\\r\\n\\r\\nScore: 96% |\\r\\nVerdict: Masterpiece\\r\\n\\r\\nOn a side note: I did see this movie in 3D during the twenty-five-anniversary re-release. While it was great to see it remastered in 4K, I do think the 3D was poor and unneeded. This did not affect my grade however, since it was not originally designed as a 3D experience, and they 3D did not really take away for my enjoyment.\", 'created_at': '2023-02-17T14:01:29.311Z', 'id': '63ef88b95cc11d0086123924', 'updated_at': '2023-02-17T14:01:29.411Z', 'url': 'https://www.themoviedb.org/review/63ef88b95cc11d0086123924'}, {'author': 'Prodank', 'author_details': {'name': '', 'username': 'Prodank', 'avatar_path': '/d8FdQJGfhs5zAQC95GvxvpkVv5p.jpg', 'rating': 7.0}, 'content': \"Titanic was enjoyable initially, but the constant TV reruns got old fast. I don't even own a TV anymore, and I'm in no hurry to watch it again. Still, it's a good movie, deserving of a 7/10 rating.\", 'created_at': '2023-09-17T05:09:03.291Z', 'id': '650689effa27f4010c4a62ad', 'updated_at': '2023-09-18T15:40:43.196Z', 'url': 'https://www.themoviedb.org/review/650689effa27f4010c4a62ad'}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "results": "```python\nimport requests\n\n# API url for getting recommendations for a movie\nurl = \"https://api.themoviedb.org/3/movie/597/recommendations\"  # Assuming Titanic movie_id is 597\n\n# Parameters for the API request\nparams = {\n    \"page\": 1\n}\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting and printing the recommendations from the response\nrecommendations = response.json()\nprint(recommendations)\n```",
        "usage": [
            280,
            10119,
            10399
        ],
        "executed": "{'page': 1, 'results': [{'adult': False, 'backdrop_path': '/hziiv14OpD73u9gAak4XDDfBKa2.jpg', 'id': 671, 'title': \"Harry Potter and the Philosopher's Stone\", 'original_language': 'en', 'original_title': \"Harry Potter and the Philosopher's Stone\", 'overview': \"Harry Potter has lived under the stairs at his aunt and uncle's house his whole life. But on his 11th birthday, he learns he's a powerful wizard\u2014with a place waiting for him at the Hogwarts School of Witchcraft and Wizardry. As he learns to harness his newfound powers with the help of the school's kindly headmaster, Harry uncovers the truth about his parents' deaths\u2014and about the villain who's to blame.\", 'poster_path': '/wuMc08IPKEatf9rnMNXvIDxqP4W.jpg', 'media_type': 'movie', 'genre_ids': [12, 14], 'popularity': 161.952, 'release_date': '2001-11-16', 'video': False, 'vote_average': 7.915, 'vote_count': 26214}, {'adult': False, 'backdrop_path': '/2P0toWq3feNvFAzf28j7vNc1IuZ.jpg', 'id': 106646, 'title': 'The Wolf of Wall Street', 'original_language': 'en', 'original_title': 'The Wolf of Wall Street', 'overview': \"A New York stockbroker refuses to cooperate in a large securities fraud case involving corruption on Wall Street, corporate banking world and mob infiltration. Based on Jordan Belfort's autobiography.\", 'poster_path': '/34m2tygAYBGqA9MXKhRDtzYd4MR.jpg', 'media_type': 'movie', 'genre_ids': [80, 18, 35], 'popularity': 91.349, 'release_date': '2013-12-25', 'video': False, 'vote_average': 8.035, 'vote_count': 22979}, {'adult': False, 'backdrop_path': '/8XyX5Us7uzwQdXtAdnhCB9Gquek.jpg', 'id': 297761, 'title': 'Suicide Squad', 'original_language': 'en', 'original_title': 'Suicide Squad', 'overview': 'From DC Comics comes the Suicide Squad, an antihero team of incarcerated supervillains who act as deniable assets for the United States government, undertaking high-risk black ops missions in exchange for commuted prison sentences.', 'poster_path': '/xFw9RXKZDvevAGocgBK0zteto4U.jpg', 'media_type': 'movie', 'genre_ids': [28, 12, 14], 'popularity': 45.581, 'release_date': '2016-08-03', 'video': False, 'vote_average': 5.912, 'vote_count': 20495}, {'adult': False, 'backdrop_path': '/ecvy2kMxsJ60ej52beZ0F8EOGkL.jpg', 'id': 11324, 'title': 'Shutter Island', 'original_language': 'en', 'original_title': 'Shutter Island', 'overview': 'World War II soldier-turned-U.S. Marshal Teddy Daniels investigates the disappearance of a patient from a hospital for the criminally insane, but his efforts are compromised by troubling visions and a mysterious doctor.', 'poster_path': '/4GDy0PHYX3VRXUtwK5ysFbg3kEx.jpg', 'media_type': 'movie', 'genre_ids': [18, 53, 9648], 'popularity': 79.974, 'release_date': '2010-02-14', 'video': False, 'vote_average': 8.202, 'vote_count': 23035}, {'adult': False, 'backdrop_path': '/vL5LR6WdxWPjLPFRLe133jXWsh5.jpg', 'id': 19995, 'title': 'Avatar', 'original_language': 'en', 'original_title': 'Avatar', 'overview': 'In the 22nd century, a paraplegic Marine is dispatched to the moon Pandora on a unique mission, but becomes torn between following orders and protecting an alien civilization.', 'poster_path': '/kyeqWdyUXW608qlYkRqosgbbJyK.jpg', 'media_type': 'movie', 'genre_ids': [28, 12, 14, 878], 'popularity': 113.078, 'release_date': '2009-12-15', 'video': False, 'vote_average': 7.58, 'vote_count': 30572}, {'adult': False, 'backdrop_path': '/m0miV65ZZIp13TNHJSRUF6vmCos.jpg', 'id': 454, 'title': 'Romeo + Juliet', 'original_language': 'en', 'original_title': 'Romeo + Juliet', 'overview': \"In director Baz Luhrmann's contemporary take on William Shakespeare's classic tragedy, the Montagues and Capulets have moved their ongoing feud to the sweltering suburb of Verona Beach, where Romeo and Juliet fall in love and secretly wed. Though the film is visually modern, the bard's dialogue remains.\", 'poster_path': '/eLf4jclPijOqfEp6bDAmezRFxk5.jpg', 'media_type': 'movie', 'genre_ids': [18, 10749], 'popularity': 28.839, 'release_date': '1996-11-01', 'video': False, 'vote_average': 6.793, 'vote_count': 4795}, {'adult': False, 'backdrop_path': '/qdIMHd4sEfJSckfVJfKQvisL02a.jpg', 'id': 13, 'title': 'Forrest Gump', 'original_language': 'en', 'original_title': 'Forrest Gump', 'overview': 'A man with a low IQ has accomplished great things in his life and been present during significant historic events\u2014in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him.', 'poster_path': '/arw2vcBveWOVZr6pxd9XTd1TdQa.jpg', 'media_type': 'movie', 'genre_ids': [35, 18, 10749], 'popularity': 89.774, 'release_date': '1994-06-23', 'video': False, 'vote_average': 8.5, 'vote_count': 26276}, {'adult': False, 'backdrop_path': '/6G73mNyooWAEQTpckPSnFxFoNmc.jpg', 'id': 121, 'title': 'The Lord of the Rings: The Two Towers', 'original_language': 'en', 'original_title': 'The Lord of the Rings: The Two Towers', 'overview': 'Frodo and Sam are trekking to Mordor to destroy the One Ring of Power while Gimli, Legolas and Aragorn search for the orc-captured Merry and Pippin. All along, nefarious wizard Saruman awaits the Fellowship members at the Orthanc Tower in Isengard.', 'poster_path': '/5VTN0pR8gcqV3EPUHHfMGnJYN9L.jpg', 'media_type': 'movie', 'genre_ids': [12, 14, 28], 'popularity': 86.962, 'release_date': '2002-12-18', 'video': False, 'vote_average': 8.392, 'vote_count': 20909}, {'adult': False, 'backdrop_path': '/lxD5ak7BOoinRNehOCA85CQ8ubr.jpg', 'id': 862, 'title': 'Toy Story', 'original_language': 'en', 'original_title': 'Toy Story', 'overview': \"Led by Woody, Andy's toys live happily in his room until Andy's birthday brings Buzz Lightyear onto the scene. Afraid of losing his place in Andy's heart, Woody plots against Buzz. But when circumstances separate Buzz and Woody from their owner, the duo eventually learns to put aside their differences.\", 'poster_path': '/uXDfjJbdP4ijW5hWSBrPrlKpxab.jpg', 'media_type': 'movie', 'genre_ids': [16, 12, 10751, 35], 'popularity': 100.2, 'release_date': '1995-10-30', 'video': False, 'vote_average': 7.972, 'vote_count': 17668}, {'adult': False, 'backdrop_path': '/lh5lbisD4oDbEKgUxoRaZU8HVrk.jpg', 'id': 272, 'title': 'Batman Begins', 'original_language': 'en', 'original_title': 'Batman Begins', 'overview': 'Driven by tragedy, billionaire Bruce Wayne dedicates his life to uncovering and defeating the corruption that plagues his home, Gotham City.  Unable to work within the system, he instead creates a new identity, a symbol of fear for the criminal underworld - The Batman.', 'poster_path': '/4MpN4kIEqUjW8OPtOQJXlTdHiJV.jpg', 'media_type': 'movie', 'genre_ids': [28, 80, 18], 'popularity': 62.431, 'release_date': '2005-06-10', 'video': False, 'vote_average': 7.704, 'vote_count': 20134}, {'adult': False, 'backdrop_path': '/wW7Wt5bXzPy4VOEE4LTIUDyDgBo.jpg', 'id': 22, 'title': 'Pirates of the Caribbean: The Curse of the Black Pearl', 'original_language': 'en', 'original_title': 'Pirates of the Caribbean: The Curse of the Black Pearl', 'overview': \"Jack Sparrow, a freewheeling 18th-century pirate, quarrels with a rival pirate bent on pillaging Port Royal. When the governor's daughter is kidnapped, Sparrow decides to help the girl's love save her.\", 'poster_path': '/z8onk7LV9Mmw6zKz4hT6pzzvmvl.jpg', 'media_type': 'movie', 'genre_ids': [12, 14, 28], 'popularity': 130.933, 'release_date': '2003-07-09', 'video': False, 'vote_average': 7.798, 'vote_count': 19769}, {'adult': False, 'backdrop_path': '/mFreKKBNnB2v678aDq0IZ2jaD8K.jpg', 'id': 281957, 'title': 'The Revenant', 'original_language': 'en', 'original_title': 'The Revenant', 'overview': 'In the 1820s, a frontiersman, Hugh Glass, sets out on a path of vengeance against those who left him for dead after a bear mauling.', 'poster_path': '/wkA03WX3IdHYMX2gIxaCwqowQX.jpg', 'media_type': 'movie', 'genre_ids': [37, 18, 12], 'popularity': 53.441, 'release_date': '2015-12-25', 'video': False, 'vote_average': 7.53, 'vote_count': 17514}, {'adult': False, 'backdrop_path': '/qHhuTmhRCYvj9ls4STFGnaeAPhR.jpg', 'id': 23483, 'title': 'Kick-Ass', 'original_language': 'en', 'original_title': 'Kick-Ass', 'overview': 'Dave Lizewski is an unnoticed high school student and comic book fan who one day decides to become a super-hero, even though he has no powers, training or meaningful reason to do so.', 'poster_path': '/8citjdBmjddZjlPsAHEyCKwGVvD.jpg', 'media_type': 'movie', 'genre_ids': [28, 80], 'popularity': 46.491, 'release_date': '2010-03-22', 'video': False, 'vote_average': 7.1, 'vote_count': 11224}, {'adult': False, 'backdrop_path': '/1GJvBE7UWU1WOVi0XREl4JQc7f8.jpg', 'id': 607, 'title': 'Men in Black', 'original_language': 'en', 'original_title': 'Men in Black', 'overview': 'After a police chase with an otherworldly being, a New York City cop is recruited as an agent in a top-secret organization established to monitor and police alien activity on Earth: the Men in Black. Agent Kay and new recruit Agent Jay find themselves in the middle of a deadly plot by an intergalactic terrorist who has arrived on Earth to assassinate two ambassadors from opposing galaxies.', 'poster_path': '/uLOmOF5IzWoyrgIF5MfUnh5pa1X.jpg', 'media_type': 'movie', 'genre_ids': [28, 12, 35, 878], 'popularity': 51.461, 'release_date': '1997-07-02', 'video': False, 'vote_average': 7.19, 'vote_count': 13187}, {'adult': False, 'backdrop_path': '/mfFhgR9ILPWbYtvbdyAGUo6fbpT.jpg', 'id': 8966, 'title': 'Twilight', 'original_language': 'en', 'original_title': 'Twilight', 'overview': \"When Bella Swan moves to a small town in the Pacific Northwest, she falls in love with Edward Cullen, a mysterious classmate who reveals himself to be a 108-year-old vampire. Despite Edward's repeated cautions, Bella can't stay away from him, a fatal move that endangers her own life.\", 'poster_path': '/3Gkb6jm6962ADUPaCBqzz9CTbn9.jpg', 'media_type': 'movie', 'genre_ids': [14, 18, 10749], 'popularity': 97.684, 'release_date': '2008-11-20', 'video': False, 'vote_average': 6.3, 'vote_count': 12977}, {'adult': False, 'backdrop_path': '/Ag6qhzsJd3k1NKuNrG9RmhZDMh7.jpg', 'id': 640, 'title': 'Catch Me If You Can', 'original_language': 'en', 'original_title': 'Catch Me If You Can', 'overview': 'A true story about Frank Abagnale Jr. who, before his 19th birthday, successfully conned millions of dollars worth of checks as a Pan Am pilot, doctor, and legal prosecutor. An FBI agent makes it his mission to put him behind bars. But Frank not only eludes capture, he revels in the pursuit.', 'poster_path': '/ctjEj2xM32OvBXCq8zAdK3ZrsAj.jpg', 'media_type': 'movie', 'genre_ids': [18, 80], 'popularity': 58.878, 'release_date': '2002-12-16', 'video': False, 'vote_average': 7.977, 'vote_count': 14918}, {'adult': False, 'backdrop_path': '/8ZTVqvKDQ8emSGUEMjsS4yHAwrp.jpg', 'id': 27205, 'title': 'Inception', 'original_language': 'en', 'original_title': 'Inception', 'overview': 'Cobb, a skilled thief who commits corporate espionage by infiltrating the subconscious of his targets is offered a chance to regain his old life as payment for a task considered to be impossible: \"inception\", the implantation of another person\\'s idea into a target\\'s subconscious.', 'poster_path': '/oYuLEt3zVCKq57qu2F8dT7NIa6f.jpg', 'media_type': 'movie', 'genre_ids': [28, 878, 12], 'popularity': 86.506, 'release_date': '2010-07-15', 'video': False, 'vote_average': 8.367, 'vote_count': 35360}, {'adult': False, 'backdrop_path': '/kXfqcdQKsToO0OUXHcrrNCHDBzO.jpg', 'id': 278, 'title': 'The Shawshank Redemption', 'original_language': 'en', 'original_title': 'The Shawshank Redemption', 'overview': 'Framed in the 1940s for the double murder of his wife and her lover, upstanding banker Andy Dufresne begins a new life at the Shawshank prison, where he puts his accounting skills to work for an amoral warden. During his long stretch in prison, Dufresne comes to be admired by the other inmates -- including an older prisoner named Red -- for his integrity and unquenchable sense of hope.', 'poster_path': '/9cqNxx0GxF0bflZmeSMuL5tnGzr.jpg', 'media_type': 'movie', 'genre_ids': [18, 80], 'popularity': 114.769, 'release_date': '1994-09-23', 'video': False, 'vote_average': 8.704, 'vote_count': 25735}, {'adult': False, 'backdrop_path': '/cDJ61O1STtbWNBwefuqVrRe3d7l.jpg', 'id': 10195, 'title': 'Thor', 'original_language': 'en', 'original_title': 'Thor', 'overview': \"Against his father Odin's will, The Mighty Thor - a powerful but arrogant warrior god - recklessly reignites an ancient war. Thor is cast down to Earth and forced to live among humans as punishment. Once here, Thor learns what it takes to be a true hero when the most dangerous villain of his world sends the darkest forces of Asgard to invade Earth.\", 'poster_path': '/prSfAi1xGrhLQNxVSUFh61xQ4Qy.jpg', 'media_type': 'movie', 'genre_ids': [12, 14, 28], 'popularity': 65.411, 'release_date': '2011-04-21', 'video': False, 'vote_average': 6.8, 'vote_count': 20450}, {'adult': False, 'backdrop_path': '/eCynaAOgYYiw5yN5lBwz3IxqvaW.jpg', 'id': 12, 'title': 'Finding Nemo', 'original_language': 'en', 'original_title': 'Finding Nemo', 'overview': \"Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, surfer dude turtles, hypnotic jellyfish, hungry seagulls, and more along the way.\", 'poster_path': '/eHuGQ10FUzK1mdOY69wF5pGgEf5.jpg', 'media_type': 'movie', 'genre_ids': [16, 10751], 'popularity': 89.401, 'release_date': '2003-05-30', 'video': False, 'vote_average': 7.824, 'vote_count': 18526}, {'adult': False, 'backdrop_path': '/x2RS3uTcsJJ9IfjNPcgDmukoEcQ.jpg', 'id': 120, 'title': 'The Lord of the Rings: The Fellowship of the Ring', 'original_language': 'en', 'original_title': 'The Lord of the Rings: The Fellowship of the Ring', 'overview': 'Young hobbit Frodo Baggins, after inheriting a mysterious ring from his uncle Bilbo, must leave his home in order to keep it from falling into the hands of its evil creator. Along the way, a fellowship is formed to protect the ringbearer and make sure that the ring arrives at its final destination: Mt. Doom, the only place where it can be destroyed.', 'poster_path': '/6oom5QYQ2yQTMJIbnvbkBL9cHo6.jpg', 'media_type': 'movie', 'genre_ids': [12, 14, 28], 'popularity': 120.19, 'release_date': '2001-12-18', 'video': False, 'vote_average': 8.409, 'vote_count': 24059}], 'total_pages': 2, 'total_results': 40}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/person/5256/movie_credits\"\n\n# Define the parameters\nparams = {\n    \"api_key\": \"<your_api_key_here>\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie list for Christopher Nolan\n    movies = response.json()[\"cast\"]\n    \n    # Sort the movies by release date in descending order\n    sorted_movies = sorted(movies, key=lambda x: x[\"release_date\"], reverse=True)\n    \n    # Get the latest movie directed by Christopher Nolan\n    latest_movie = next(movie for movie in sorted_movies if \"director\" in movie[\"job\"])\n    \n    # Print the title of the latest movie directed by Christopher Nolan\n    print(\"The latest movie directed by Christopher Nolan is:\", latest_movie[\"title\"])\nelse:\n    # Print an error message if the request was not successful\n    print(\"Error: Failed to fetch movie credits for Christopher Nolan\")\n```",
        "usage": [
            233,
            8257,
            8490
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the director - Martin Scorsese\nsearch_director_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Martin Scorsese\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_director_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the director's id\ndirector_id = data['results'][0]['id']\n\n# Get the movie credits for the director\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\ndata = response.json()\n\n# Find the highest rated movie directed by Martin Scorsese\nhighest_rated_movie = None\nhighest_rating = 0\nfor movie in data['cast']:\n    if movie['vote_average'] > highest_rating:\n        highest_rating = movie['vote_average']\n        highest_rated_movie = movie\n\nprint(highest_rated_movie['title'], highest_rated_movie['vote_average'])\n```",
        "usage": [
            401,
            7518,
            7919
        ],
        "executed": "Raging Bull: Before the Fight 10.0\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Leonardo DiCaprio\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Leonardo DiCaprio\"\n}\n\nresponse = requests.get(person_search_url, headers=headers, params=params)\nperson_data = response.json()\n\nif len(person_data[\"results\"]) > 0:\n    # Get the ID of the first result (assuming it's Leonardo DiCaprio)\n    person_id = person_data[\"results\"][0][\"id\"]\n    \n    # Get the movie credits for Leonardo DiCaprio\n    credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(credits_url, headers=headers)\n    credits_data = response.json()\n    \n    if len(credits_data[\"cast\"]) > 0:\n        # Get the latest movie data (first item in the cast array)\n        latest_movie = credits_data[\"cast\"][0]\n        \n        # Get the movie details\n        movie_id = latest_movie[\"id\"]\n        movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n        params = {\n            \"append_to_response\": \"credits\"\n        }\n        response = requests.get(movie_details_url, headers=headers, params=params)\n        movie_details = response.json()\n        \n        # Get the director of the movie\n        if \"credits\" in movie_details:\n            crew = movie_details[\"credits\"][\"crew\"]\n            for member in crew:\n                if member[\"job\"] == \"Director\":\n                    director = member[\"name\"]\n                    print(director)\n                    break\n```\n\nThis code snippet will search for Leonardo DiCaprio, retrieve his latest movie credits, and then find the director of his latest movie. The result will be printed out.",
        "usage": [
            552,
            8022,
            8574
        ],
        "executed": "Baz Luhrmann\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ]
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person with the name Catherine Hardwicke\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Catherine Hardwicke\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\ncatherine_hardwicke_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the movie credits for Catherine Hardwicke\nperson_movie_credits_url = f\"https://api.themoviedb.org/3/person/{catherine_hardwicke_id}/movie_credits\"\nresponse = requests.get(person_movie_credits_url, headers=headers)\nmovie_credits = response.json()[\"cast\"]\n\n# Find the most recent TV show directed by Catherine Hardwicke\nrecent_tv_show = None\nfor credit in movie_credits:\n    if \"job\" in credit and credit[\"job\"] == \"Director\" and credit[\"media_type\"] == \"tv\":\n        recent_tv_show = credit\n        break\n\nprint(recent_tv_show)\n```",
        "usage": [
            400,
            9457,
            9857
        ],
        "executed": "None\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "results": "```python\nimport requests\n\n# Define the API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for the search query\nparams = {\n    \"query\": \"Breaking Bad\",\n    \"include_adult\": False\n}\n\n# Make a GET request to search for TV shows similar to Breaking Bad\nresponse_search = requests.get(url_search_tv, headers=headers, params=params)\n\n# Check if the request was successful\nif response_search.status_code == 200:\n    # Extracting the TV show id for Breaking Bad\n    breaking_bad_id = response_search.json()[\"results\"][0][\"id\"]\n\n    # Define the API url for getting similar TV shows\n    url_similar_tv = f\"https://api.themoviedb.org/3/tv/{breaking_bad_id}/similar\"\n\n    # Parameters for getting similar TV shows\n    params_similar = {\n        \"page\": 1\n    }\n\n    # Make a GET request to get similar TV shows\n    response_similar = requests.get(url_similar_tv, headers=headers, params=params_similar)\n\n    # Check if the request for similar TV shows was successful\n    if response_similar.status_code == 200:\n        similar_tv_shows = response_similar.json()[\"results\"]\n        # Print out the similar TV shows\n        for show in similar_tv_shows:\n            print(show[\"name\"])\n    else:\n        print(\"Error: Unable to fetch similar TV shows\")\nelse:\n    print(\"Error: Unable to search for TV show 'Breaking Bad'\")\n```",
        "usage": [
            326,
            8057,
            8383
        ],
        "executed": "Flower of Evil\nHardcastle and McCormick\nThe Sopranos\nDeadwood\nSons of Anarchy\nThe Shield\nMea culpa\nEl d\u00eda menos pensado\nThe Wright Verdicts\nLove, Now\nSenior High\nShameless\nThe Twilight Zone\nHeist\nThe Best Times\nAlpha Beta\nMatlock\nDanger of Her\nJenny\nThe Ancient Magus' Bride\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "results": "```python\nimport requests\n\n# Define the API url to get the trending movies for today\nurl = \"https://api.themoviedb.org/3/trending/movie/day\"\n\n# Set the header with the provided authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to get the trending movies\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Extract the movie id of the most trending movie\n    trending_movie_id = response.json()[\"results\"][0][\"id\"]\n    \n    # Define the API url to get the credits of the movie\n    credits_url = f\"https://api.themoviedb.org/3/movie/{trending_movie_id}/credits\"\n    \n    # Make the GET request to get the credits of the movie\n    credits_response = requests.get(credits_url, headers=headers)\n    \n    # Check if the credits response is successful\n    if credits_response.status_code == 200:\n        # Extract the crew information from the credits response\n        crew = credits_response.json()[\"crew\"]\n        \n        # Iterate over the crew members to find the director\n        for member in crew:\n            if member[\"job\"] == \"Director\":\n                director = member[\"name\"]\n                print(f\"The director of today's most trending movie is: {director}\")\n                break\n    else:\n        print(\"Error fetching credits data.\")\nelse:\n    print(\"Error fetching trending movies data.\")\n```",
        "usage": [
            464,
            7324,
            7788
        ],
        "executed": "The director of today's most trending movie is: Juan Carlos Fresnadillo\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "results": "```python\nimport requests\n\n# Define the API url for searching movie with the query \"Twilight\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Specify the query with the movie name \"Twilight\"\nparams = {\n    \"query\": \"Twilight\"\n}\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the movie id of the first result\nmovie_id = response.json()['results'][0]['id']\n\n# Define the API url for getting the credits of the movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make the API call to get the credits of the movie\nresponse = requests.get(credits_url, headers=headers)\n\n# Get the crew list for the movie\ncrew_list = response.json()['crew']\n\n# Find the director from the crew list\ndirector = None\nfor crew in crew_list:\n    if crew['job'] == 'Director':\n        director = crew['name']\n        break\n\n# Output the director of the movie \"Twilight\"\nif director:\n    print(f\"The director of the movie Twilight is: {director}\")\nelse:\n    print(\"Director information not found for the movie Twilight\")\n```",
        "usage": [
            428,
            8400,
            8828
        ],
        "executed": "The director of the movie Twilight is: Catherine Hardwicke\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "results": "```python\nimport requests\n\n# Given API url\nurl = \"https://api.themoviedb.org/3/tv/65621/season/1/episode/2/images\"\n# Provided authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Sending request to the API\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Extracting the stills photos data\nstills = data.get(\"stills\", [])\nfor image in stills:\n    file_path = image.get(\"file_path\")\n    print(\"Image path:\", file_path)\n```",
        "usage": [
            279,
            6949,
            7228
        ],
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "What is top-1 rated movie?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Set the required parameters\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    \n    # Get the top-1 rated movie\n    top_rated_movie = data['results'][0]['title']\n    print(\"Top-1 rated movie:\", top_rated_movie)\nelse:\n    print(\"Failed to fetch data\")\n```",
        "usage": [
            319,
            7198,
            7517
        ],
        "executed": "Top-1 rated movie: The Shawshank Redemption\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "results": "```python\nimport requests\n\n# HTTP headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Matrix\"\nurl_search = \"https://api.themoviedb.org/3/search/movie\"\nparams_search = {\n    \"query\": \"The Matrix\",\n    \"include_adult\": False\n}\nresponse_search = requests.get(url_search, headers=headers, params=params_search)\nmovie_id = response_search.json()[\"results\"][0][\"id\"]  # Get the movie id\n\n# Get the release dates for the movie\nurl_release_dates = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\nresponse_release_dates = requests.get(url_release_dates, headers=headers)\n\n# Extract the release date\nrelease_dates = response_release_dates.json()[\"results\"]\nfor release_info in release_dates:\n    for release_date in release_info[\"release_dates\"]:\n        if release_date[\"type\"] == 3:  # Theatrical release type\n            print(f\"The release date of 'The Matrix' is: {release_date['release_date']}\")\n            break\n```",
        "usage": [
            388,
            7353,
            7741
        ],
        "executed": "The release date of 'The Matrix' is: 1999-06-10T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-04-08T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-07-07T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-09-03T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-05-21T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-03-31T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-06-18T00:00:00.000Z\nThe release date of 'The Matrix' is: 2000-01-14T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-05-21T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-08-05T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-06-17T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-05-07T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-07-16T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-06-25T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-07-09T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-06-23T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-06-11T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-08-20T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-05-20T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-08-26T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-08-05T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-07-03T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-06-11T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-06-24T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-06-25T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-05-07T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-09-11T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-05-15T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-06-09T00:00:00.000Z\nThe release date of 'The Matrix' is: 2021-12-09T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-05-21T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-05-06T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-06-17T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-07-09T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-04-08T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-05-26T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-08-13T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-06-25T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-09-10T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-10-14T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-07-14T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-04-22T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-08-19T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-08-05T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-05-21T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-09-03T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-06-04T00:00:00.000Z\nThe release date of 'The Matrix' is: 2019-07-25T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-03-31T00:00:00.000Z\nThe release date of 'The Matrix' is: 1999-07-30T00:00:00.000Z\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "Who is the most popular person?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the parameters (page)\nparams = {\n    \"page\": 1\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    most_popular_person = data['results'][0]['name']\n    print(f\"The most popular person is: {most_popular_person}\")\nelse:\n    print(\"Failed to get data. Status code:\", response.status_code)\n```",
        "usage": [
            312,
            6833,
            7145
        ],
        "executed": "The most popular person is: Jason Statham\n",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movies directed by Christopher Nolan\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False,\n    \"page\": 1,\n    \"region\": \"US\"  # Example region code, can be changed\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the person ID for Christopher Nolan\nperson_id = search_results[\"results\"][0][\"id\"]\n\n# Get the movie credits for Christopher Nolan\ncredits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_results = credits_response.json()\n\n# Extract the cover images of movies directed by Christopher Nolan\ncover_images = []\nfor movie in credits_results[\"cast\"]:\n    if \"poster_path\" in movie:\n        cover_images.append(movie[\"poster_path\"])\n\nprint(cover_images)\n```",
        "usage": [
            393,
            9383,
            9776
        ],
        "executed": "['/lAAwYAEnDXJoYt1V0DUBkLJK8sh.jpg', '/vemBplPKQhVe5cRWL7kxtgp15Vq.jpg', '/mwj189nph5bM0lc4fsjbEjI8V5M.jpg', '/pW9rYNpkrtlLL7rkiI6Dj7b2erE.jpg', '/e15wNHmLX7PJUo8lqzQRhwbX7PL.jpg', '/tlAYMNTvga69AUXMIY0HeeoblHT.jpg', '/f2Pih9muBJMhqFCNmw1b64mMFVd.jpg', '/eqFhruWEIRwjkvqgJN48VPuR50Q.jpg', None, '/vD5WKISzeYtdVlSJUU7c9xpAYO1.jpg', '/xwkYWcs8aypUtk3xDRUh0ndo4GA.jpg', '/ijz2HzG87GdkRuPK51FYfdG4naR.jpg', '/pUvbuOTHKQWrLuGY1x2pHd1evPL.jpg', '/e6eFWrSjkzXSDTliRonCX7P504K.jpg', '/k1Q1ayXdOb6H1emGtnGGwy63uPU.jpg', '/jafF7jcl116rzohZydL1VfK1y2e.jpg', '/y78UlBU4Y2HnEuvSW4V0A5DzP3C.jpg', None, '/i4PpBcuLvdcJwIf3hkcV9QDR1iH.jpg', None, '/jiby8Ilxlmbhv6elIf0qRMuaDdd.jpg', '/djInrUsSdM1ZDRS9WsE4MgKwEqT.jpg', '/qeeQ7rfTAXNYh4EqqdolFLkNwKM.jpg', '/2ntILBHp9SIa8nXMwPmswD0H3M4.jpg', '/iY1FDQM6taKwO7bG6YH09nE8NSs.jpg', '/x1eJojaMe9N0y0qg5yRRWEjYJxa.jpg', '/2j9gMIbtftm26CbH78nIwiImoN0.jpg', '/ord8gdBUFitBHccX1S5RpatulA7.jpg', '/am5Sst8LFmU0bhPrzU3km4RRy3J.jpg', '/bi4k7EE8JFuTHKWhiWEgdIlp40Z.jpg']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "results": "```python\nimport requests\n\n# Headers provided for authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Query the movie_id of the movie \"Titanic\"\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\"\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the keywords associated with the movie \"Titanic\"\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\nresponse = requests.get(keywords_url, headers=headers)\nkeywords = response.json()[\"keywords\"]\n\n# Extract common keywords\ncommon_keywords = [keyword[\"name\"] for keyword in keywords]\nprint(common_keywords)\n```",
        "usage": [
            324,
            8719,
            9043
        ],
        "executed": "['epic', 'ship', 'drowning', 'panic', 'shipwreck', 'evacuation', 'iceberg', 'titanic', 'forbidden love', 'ocean liner', 'based on true story', 'rich woman poor man', 'love', 'tragedy', 'tragic love', 'disaster', 'historical fiction', 'class differences', 'love affair', 'historical event', 'lifeboat', 'star crossed lovers', 'sinking ship', 'steerage', 'rich snob', 'disaster movie', '1910s', 'sunken ship']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "Give me a show that is currently on the air",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\nparams = {\"page\": 1}\n\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    if data.get(\"results\"):\n        first_show = data.get(\"results\")[0]\n        print(first_show)\n    else:\n        print(\"No shows currently on the air.\")\nelse:\n    print(\"Failed to retrieve show information.\")\n```",
        "usage": [
            276,
            8432,
            8708
        ],
        "executed": "{'adult': False, 'backdrop_path': '/h0y3OzHzG4yNvn8u3Za6ByH8lrQ.jpg', 'genre_ids': [18, 10766], 'id': 45789, 'origin_country': ['DE'], 'original_language': 'de', 'original_name': 'Sturm der Liebe', 'overview': 'These are the stories of relationships taking place in the fictional five-star hotel F\u00fcrstenhof, located in Feldkirchen-Westerham near Rosenheim with the plot revolving around members of the family room area, the hotel owners, and employees.', 'popularity': 4153.22, 'poster_path': '/9oZjOh3Va3FsiLGouhSogFsBX9G.jpg', 'first_air_date': '2005-09-26', 'name': 'Sturm der Liebe', 'vote_average': 7.25, 'vote_count': 14}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Clint Eastwood\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Clint Eastwood\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse = requests.get(url, headers=headers, params=params)\nclint_eastwood_id = response.json()[\"results\"][0][\"id\"]\n\n# Get Clint Eastwood's movie credits\nurl = f\"https://api.themoviedb.org/3/person/{clint_eastwood_id}/movie_credits\"\nresponse = requests.get(url.format(person_id=clint_eastwood_id), headers=headers)\nmovie_credits = response.json()[\"cast\"]\n\n# Filter out the release dates of Clint Eastwood's movies\nrelease_dates = []\nfor movie in movie_credits:\n    if movie[\"release_date\"]:\n        release_dates.append(movie[\"release_date\"])\n\n# Find the latest release date\nlatest_release_date = max(release_dates)\n\nprint(f\"The latest movie of Clint Eastwood is scheduled to be released on: {latest_release_date}\")\n```",
        "usage": [
            408,
            8378,
            8786
        ],
        "executed": "The latest movie of Clint Eastwood is scheduled to be released on: 2023-09-05\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie id of \"The Dark Knight\"\nurl_search = \"https://api.themoviedb.org/3/search/movie\"\nparams_search = {\n    \"query\": \"The Dark Knight\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse_search = requests.get(url_search, headers=headers, params=params_search)\nresults_search = response_search.json()\nmovie_id = results_search['results'][0]['id']  # Get the movie ID of The Dark Knight\n\n# Get reviews for the movie\nurl_reviews = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\nparams_reviews = {\n    \"page\": 1\n}\nresponse_reviews = requests.get(url_reviews, headers=headers, params=params_reviews)\nreviews = response_reviews.json()\n\n# Output the reviews\nprint(reviews)\n```",
        "usage": [
            354,
            9399,
            9753
        ],
        "executed": "{'id': 155, 'page': 1, 'results': [{'author': 'tricksy', 'author_details': {'name': '', 'username': 'tricksy', 'avatar_path': None, 'rating': None}, 'content': 'Excellent movie. Best of the trilogy. Lovely music. Nolan is a genius. So is Heath Ledger.', 'created_at': '2015-06-09T07:21:30.464Z', 'id': '557693fac3a368569a003fab', 'updated_at': '2021-06-23T15:57:35.053Z', 'url': 'https://www.themoviedb.org/review/557693fac3a368569a003fab'}, {'author': 'talisencrw', 'author_details': {'name': '', 'username': 'talisencrw', 'avatar_path': None, 'rating': 10.0}, 'content': \"This has no competition. It is the very finest comic-book character movie ever made. Knowing the Burton, Donner and Nolan filmic adaptations of Batman and Superman exist helps me to sleep at night. They are Exhibit A of 'How to Make a Comic-Book Movie'. Nothing else has ever come even remotely close. These seven films (I include 'Superman II' because it was mostly Donner's work)--and Nolan's trilogy especially--are what I imagine a great director like Kubrick, Hitchcock or Kurosawa would have come up with, if they had ever been asked to make a Superman or Batman movie. They are the easiest for an audience to identify with because in these the scripts most approximate human emotions and the typical conundrums of the human experience--in short, are the closest, in a good way, they come to the complexities of the human condition. Peerless.\", 'created_at': '2016-05-25T23:49:13.042Z', 'id': '574639f9c3a36806b00002c1', 'updated_at': '2021-06-23T15:57:47.911Z', 'url': 'https://www.themoviedb.org/review/574639f9c3a36806b00002c1'}, {'author': 'erickprieto', 'author_details': {'name': '', 'username': 'erickprieto', 'avatar_path': '/clCvYPqM4EgLo9msno2xSPSGNJ6.jpg', 'rating': None}, 'content': 'Perhaps the best Batman movie of all times. I think that this Batman trilogy presents the well-known superhero history in an unexpected way with the capable to maintain on the edge of the chair all time.\\r\\n**Heath Ledger** present an excellent impersonification of a psychopath.\\r\\nAll support roles are magnificent.\\r\\nAnd Bruce Wayne role played by Christian Bale, shows a human being behind of the mask.', 'created_at': '2018-11-06T09:42:05.673Z', 'id': '5be161edc3a3680a00009915', 'updated_at': '2021-06-23T15:58:14.241Z', 'url': 'https://www.themoviedb.org/review/5be161edc3a3680a00009915'}, {'author': 'moubledian', 'author_details': {'name': '', 'username': 'moubledian', 'avatar_path': None, 'rating': None}, 'content': 'I used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\\r\\n\\r\\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it\\'s definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\\r\\n\\r\\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\\r\\n\\r\\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson\\'s portrayal is true unpredictability. It\\'s obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn\\'t easy. How exactly does one take him down when he\\'s woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\\r\\n\\r\\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\\r\\n\\r\\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can\\'t represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we\\'ve seen just the prelude to the Dark Knight\\'s upcoming legendary battles with the worst of Gotham City\\'s dark underside.\\r\\n\\r\\n\"The Dark Knight\" gets a solid 10 of 10 stars.\\r\\n\\r\\nI used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\\r\\n\\r\\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it\\'s definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\\r\\n\\r\\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\\r\\n\\r\\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson\\'s portrayal is true unpredictability. It\\'s obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn\\'t easy. How exactly does one take him down when he\\'s woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\\r\\n\\r\\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\\r\\n\\r\\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can\\'t represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we\\'ve seen just the prelude to the Dark Knight\\'s upcoming legendary battles with the worst of Gotham City\\'s dark underside.\\r\\n\\r\\n\"The Dark Knight\" gets a solid 10 of 10 stars.\\r\\n\\r\\nI used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\\r\\n\\r\\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it\\'s definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\\r\\n\\r\\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\\r\\n\\r\\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson\\'s portrayal is true unpredictability. It\\'s obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn\\'t easy. How exactly does one take him down when he\\'s woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\\r\\n\\r\\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\\r\\n\\r\\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can\\'t represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we\\'ve seen just the prelude to the Dark Knight\\'s upcoming legendary battles with the worst of Gotham City\\'s dark underside.\\r\\n\\r\\n\"The Dark Knight\" gets a solid 10 of 10 stars.', 'created_at': '2019-03-23T06:05:56.233Z', 'id': '5c95ccc40e0a2645f151d76d', 'updated_at': '2021-06-23T15:58:19.727Z', 'url': 'https://www.themoviedb.org/review/5c95ccc40e0a2645f151d76d'}, {'author': 'tmdb22590444', 'author_details': {'name': '', 'username': 'tmdb22590444', 'avatar_path': None, 'rating': 10.0}, 'content': 'One of the best movies of all time. Christopher Nolan has brought us the Batman trilogy that it made it feel it could happen today. Christian Bale returns as Batman, was able to perform as wonderfully as he did in Batman Begins. The one person that ultimately stole the show had to be the late Heath Ledger who played as the Joker. His performance as a psychotic clown terrorizing Gotham City was one of the best performance as a superhero villain. One of the best parts of the Joker was when he was telling his victims on how \u201che got his scars?\u201d. Another great part was when he kidnapped a police officer and he was recording it while scaring the man and also giving a warning to Batman. The supporting actor and actresses did a good job of delivering the story. I was disappointed that Katie Holmes did not return as Rachael Dawes but the actress how played as her Maggie Gyllenhaal did a really good job. One of the best parts of Christopher Nolan is that in every movie of his, the cinematography would look amazing and this movie is no exception.', 'created_at': '2019-05-03T05:43:10.850Z', 'id': '5ccbd4ee0e0a262fcd009b52', 'updated_at': '2021-06-23T15:58:21.563Z', 'url': 'https://www.themoviedb.org/review/5ccbd4ee0e0a262fcd009b52'}, {'author': 'tmdb79614358', 'author_details': {'name': '', 'username': 'tmdb79614358', 'avatar_path': None, 'rating': 10.0}, 'content': 'A Masterpiece!!! I Love how The Dark Knight shows to me the \"Dark & Gritty Tone\". Overall, Nolan give us the Game changing, best superhero film OF ALL TIME. For me it\\'s 10/10', 'created_at': '2020-11-30T14:22:09.262Z', 'id': '5fc50011420228003dc3d744', 'updated_at': '2021-06-23T15:58:48.204Z', 'url': 'https://www.themoviedb.org/review/5fc50011420228003dc3d744'}, {'author': 'EDSR', 'author_details': {'name': '', 'username': 'EDSR', 'avatar_path': None, 'rating': 3.0}, 'content': 'A sickening, borderline fascist film that is simultaneously dull and harmful. The editing represents that of an anti-pirate commercial and the politics are beyond reprehensible. The film ends with a monologue about how violent law-enforcement and brutality is what the country needs, but does not deserve. Nolan clearly did not intend for any subtext, yet that is not an excuse, if anything, that makes it worse. He includes these scenes to make the film more dark and edgy, yet there are people, from suppressed countries, who have to live through the hardships of violence from law-enforcers and dictatorship every day, and in his obliviousness, Nolan thinks that using this in a superhero film is a good excuse for self-importance. He is a war profiteer, and exploiter, and this is nothing short of disgusting.', 'created_at': '2021-09-13T10:03:55.272Z', 'id': '613f220ba6ddcb002c698ab8', 'updated_at': '2021-09-20T16:28:41.430Z', 'url': 'https://www.themoviedb.org/review/613f220ba6ddcb002c698ab8'}, {'author': 'AstroNoud', 'author_details': {'name': '', 'username': 'AstroNoud', 'avatar_path': '/6zLnrhVdSDzTjhwjKxE5xQdk2Wu.jpg', 'rating': 10.0}, 'content': 'Unforgettable crime film with good dialogue, thrilling action and chase scenes and once again a magnificent cast (most notably a terrifically terrifying Ledger) and superb score.\\r\\n\\r\\n10/10', 'created_at': '2022-02-26T21:06:50.918Z', 'id': '621a966ad7a70a00430d4c21', 'updated_at': '2022-02-26T21:06:50.918Z', 'url': 'https://www.themoviedb.org/review/621a966ad7a70a00430d4c21'}, {'author': 'CinemaSerf', 'author_details': {'name': 'CinemaSerf', 'username': 'Geronimo1967', 'avatar_path': '/1kks3YnVkpyQxzw36CObFPvhL5f.jpg', 'rating': 7.0}, 'content': 'Heath Ledger is outstanding in this follow up to the 2006 \"Batman Begins\" outing for the caped crusader. His portrayal of the malevolent \"Joker\\' is confident and highly entertaining, treading a fine line between supreme intellect and total insanity with considerable aplomb. He comes back to terrorise \"Gotham\" after \"Batman\" (Christian Bale), \"Gordon\" (Gary Oldman) - now Commissioner in charge of the police force, and newly installed District Attorney \"Dent\" (Aaron Eckhart) had made progress getting the criminals off the street. The \"Joker\", meantime, decides that the best strategy is to rob the mob - and pitching them all against each other, and with the help of the duplicitous \"Lau\" (Chin Han) manages to secure enough of their funds to initiate a campaign of lawlessness that is ruthless, manipulative and good fun to watch. Not only has the man in black his new, potent, nemesis to deal with - but he also begins to realise that his childhood sweetheart \"Rachel\" (this time Maggie Gyllenhaal) is drifting into the arms of the new DA. it is also pretty clear that they are both now proving to be an useful additional weapon in the armoury of his enemy who knows, increasingly, which buttons to press to cause maximum anxiety among those who would bring him down. It\\'s over 2\u00bd hours long, but really does fly by as the quickly paced action really does kick in right from the start. The story is dark and gritty but the pace isn\\'t ponderous and moody - Ledger exudes a sense of peril throughout the whole thing, but that has an edge to it - a sophistication that plays well against the flawed superhero who is increasingly having to identify and cope with his own demons. Sir Michael Caine pops up now and again as his shrewd butler \"Alfred\", always striving to keep his boss on the right side of sanity, and Morgan Freeman continues to feature (sparingly) and his quartermaster. On that latter front, there are loads of new gadgets that still have that element of plausibility to them (no super-powers!). On balance I think I still preferred the first film, but as sequels go - this takes, and will take, some beating. On a big screen in a packed cinema, it\\'s just a great experience.', 'created_at': '2022-07-14T06:48:17.528Z', 'id': '62cfbc31394a8704ae5c02a3', 'updated_at': '2022-07-14T06:48:17.528Z', 'url': 'https://www.themoviedb.org/review/62cfbc31394a8704ae5c02a3'}, {'author': 'The Movie Mob', 'author_details': {'name': 'The Movie Mob', 'username': 'mooney240', 'avatar_path': '/blEC280vq31MVaDcsWBXuGOsYnB.jpg', 'rating': 10.0}, 'content': \"**Overall : A cinematic marvel and once-in-a-decade masterpiece.**\\r\\n\\r\\nThis isn't simply a superhero movie or a Christopher Nolan film. The Dark Knight is a masterpiece. A perfect film. An epic scale with magnificent action pieces, oscar-winning performances, incredible writing, excellent pacing, dazzling special effects, and the list goes on and on, including the set design, costumes, and more. But, Christopher Nolan did more than make the greatest superhero movie of all time. He made one of the greatest movies of all time! All this is elevated further by Heath Ledger's once-in-a-lifetime portrayal of the Joker. Ledger was born for this role with a performance in league with Anthony Hopkins' Hannibal Lecter or Val Kilmer's Doc Holliday.\", 'created_at': '2022-08-19T23:15:37.597Z', 'id': '63001999097c49007f5fced9', 'updated_at': '2022-09-03T15:17:20.030Z', 'url': 'https://www.themoviedb.org/review/63001999097c49007f5fced9'}, {'author': 'drystyx', 'author_details': {'name': '', 'username': 'drystyx', 'avatar_path': '/hLLsAvAnVT0cFU7JuuaaItTWXv8.jpg', 'rating': 1.0}, 'content': 'Even worse than Tim Burton\\'s Batman, although obviously copying the neo Nazi ideology of \"kill all the brunettes you can in a movie\".\\r\\nThis is so predictable and so poorly written that it boggles the mind. Yet there is a fan base of what can only be described as neo Nazis. I guess those fans were poor cuckolds who got jilted by too many brunettes at a young age, and they couldn\\'t get over it.\\r\\nThat\\'s about the entire story here. Oh, the Joker kills anything he sees. Whoopee. And he\\'s invulnerable. And he\\'s a demigod who can only be beaten by another demigod.\\r\\nSo, we\\'ve got traditional mundane Greek heroes and villains here, just like most Hollywood movies.\\r\\nUnfortunately, the fans of these traditional Hollywood movies are the loudest people on Earth, and the biggest control freaks. It\\'s ridiculous to believe there are actually this big a percentage of fans for this kind of depressing Hollywood formula movie making, but if you look at Imdb\\'s top 250, you see such movies make up over half of the top 250. Are they voted up because control freaks vote more than non control freaks? Or are they voted up because control freaks use many fake user names? Probably both, which explains why over half of the top 250 are nothing more than Greek traditional idolizations of control freaks.\\r\\nOh, and Batman turns totally gay, which would be okay if he\\'d admit it, but he\\'s given the choice of saving a man from death or a hot woman from death, and he chooses to save the man. This isn\\'t any real Batman. It\\'s just another contrived story line for the Nolan Nazi merit badge. They are not even subtle. They bang you over the head with their worship of Adolf and Eva. \\r\\nGod help the world if this garbage still has a fan base fifty years from now. But it could happen. We may have drug addicts and meth heads around for even longer than that, praising the hate and feeding the hate. It would be nice if someone made a real Batman movie with a real story line involving some degree of motivation.', 'created_at': '2023-04-18T19:52:54.996Z', 'id': '643ef51668b7660524ee929b', 'updated_at': '2023-04-18T19:52:55.078Z', 'url': 'https://www.themoviedb.org/review/643ef51668b7660524ee929b'}, {'author': 'Andre Gonzales', 'author_details': {'name': 'Andre Gonzales', 'username': 'SoSmooth1982', 'avatar_path': '/ast1oGYDI7Li9daLuOV4UxGiXj.jpg', 'rating': 7.0}, 'content': 'I enjoyed watching the Dark Knight. They were at least able to keep the same batman from the the last one made too.', 'created_at': '2023-04-25T20:12:25.938Z', 'id': '64483429b76cbb0492a3bf0f', 'updated_at': '2023-04-25T20:12:26.017Z', 'url': 'https://www.themoviedb.org/review/64483429b76cbb0492a3bf0f'}, {'author': 'JN2012', 'author_details': {'name': '', 'username': 'JN2012', 'avatar_path': '/6EFUKllgSm0UzLibTMHF1piWHZd.jpg', 'rating': 8.0}, 'content': 'If I can hold my pee for a whole two and a half hours rewatching a film I\u2019ve already seen then I love it.', 'created_at': '2023-10-14T16:31:32.429Z', 'id': '652ac2641511aa013886872f', 'updated_at': '2023-10-19T02:26:50.433Z', 'url': 'https://www.themoviedb.org/review/652ac2641511aa013886872f'}], 'total_pages': 1, 'total_results': 13}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the person with name Francis Ford Coppola\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nperson_params = {\n    \"query\": \"Francis Ford Coppola\"\n}\nresponse = requests.get(person_search_url, headers=headers, params=person_params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get the movie credits for the person\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovie_titles = [movie[\"title\"] for movie in response.json()[\"cast\"]]\n\n# Step 3: Find similar movies for one of the movies Francis Ford Coppola directed\nsimilar_movie_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\nsimilar_movie_params = {\n    \"page\": 1\n}\nresponse = requests.get(similar_movie_url, headers=headers, params=similar_movie_params)\nsimilar_movies = response.json()[\"results\"]\n\n# Output the similar movies\nfor movie in similar_movies:\n    print(movie[\"title\"])\n```",
        "usage": [
            425,
            8246,
            8671
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/latest\"\n\n# Set the required headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the lead actor from the response\n    response_json = response.json()\n    if 'cast' in response_json:\n        cast = response_json['cast']\n        if len(cast) > 0:\n            lead_actor = cast[0]['name']\n            print(f\"The lead actor in the latest released movie is: {lead_actor}\")\n        else:\n            print(\"No cast information available.\")\n    else:\n        print(\"Cast information not found in the response.\")\nelse:\n    print(\"Error occurred while fetching data. Status code:\", response.status_code)\n```",
        "usage": [
            349,
            9143,
            9492
        ],
        "executed": "Cast information not found in the response.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of movies currently in theaters\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"  # Example region parameter as US for United States\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the poster path of the first movie in the list\nposter_path = data['results'][0]['poster_path']\n\n# Construct the full image url\nimage_url = f\"https://image.tmdb.org/t/p/original{poster_path}\"\nprint(image_url)\n```",
        "usage": [
            307,
            5959,
            6266
        ],
        "executed": "https://image.tmdb.org/t/p/original/hu40Uxp9WtpL34jv3zyWLb5zEVY.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "results": "```python\nimport requests\n\n# API url to get the list of current popular movies\nurl_popular_movies = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1,  # Get the first page of results\n    \"region\": \"US\"  # Specify the region to filter release dates\n}\n\n# Make the HTTP request to get the list of popular movies\nresponse = requests.get(url_popular_movies, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie id of the most popular movie\n    popular_movies = response.json()\n    if popular_movies[\"results\"]:\n        most_popular_movie_id = popular_movies[\"results\"][0][\"id\"]\n\n        # API url to get the keywords of the movie\n        url_movie_keywords = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\n\n        # Make the HTTP request to get the keywords of the most popular movie\n        response_keywords = requests.get(url_movie_keywords, headers=headers)\n\n        # Check if the request was successful\n        if response_keywords.status_code == 200:\n            # Get the keywords of the most popular movie\n            movie_keywords = response_keywords.json()[\"keywords\"]\n\n            print(movie_keywords)\n        else:\n            print(\"Failed to get movie keywords.\")\n    else:\n        print(\"No popular movies found.\")\nelse:\n    print(\"Failed to get list of popular movies.\")\n```",
        "usage": [
            318,
            8076,
            8394
        ],
        "executed": "[{'id': 270, 'name': 'ocean'}, {'id': 3088, 'name': 'bodyguard'}, {'id': 11107, 'name': 'rescue mission'}, {'id': 5707, 'name': 'childhood trauma'}, {'id': 15097, 'name': 'shark'}, {'id': 167040, 'name': 'airplane trip'}, {'id': 275172, 'name': 'sharks'}, {'id': 282692, 'name': 'air crash'}, {'id': 298724, 'name': 'survivor'}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "results": "```python\nimport requests\n\n# Define the API endpoint for getting the list of popular movies\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Parameters for the API request\nparams = {\n    \"page\": 1,  # We only want the first page of results\n    \"region\": \"US\"  # Filter by region (for example, US)\n}\n\n# Headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API endpoint\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the movie ID of the most popular movie\n    popular_movie_id = response.json()['results'][0]['id']\n\n    # Define the API endpoint for getting the keywords of the movie\n    keyword_url = f\"https://api.themoviedb.org/3/movie/{popular_movie_id}/keywords\"\n    \n    # Send a GET request to get the keywords of the most popular movie\n    keyword_response = requests.get(keyword_url, headers=headers)\n\n    # Check if the request for keywords was successful\n    if keyword_response.status_code == 200:\n        # Extract and print the keywords of the most popular movie\n        keywords = keyword_response.json()[\"keywords\"]\n        print(keywords)\n    else:\n        print(\"Failed to fetch keywords\")\nelse:\n    print(\"Failed to fetch popular movies\")\n```",
        "usage": [
            461,
            7008,
            7469
        ],
        "executed": "[{'id': 270, 'name': 'ocean'}, {'id': 3088, 'name': 'bodyguard'}, {'id': 11107, 'name': 'rescue mission'}, {'id': 5707, 'name': 'childhood trauma'}, {'id': 15097, 'name': 'shark'}, {'id': 167040, 'name': 'airplane trip'}, {'id': 275172, 'name': 'sharks'}, {'id': 282692, 'name': 'air crash'}, {'id': 298724, 'name': 'survivor'}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "results": "```python\nimport requests\n\n# Define the API url for searching the movie\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameters for searching the movie \"Titanic\"\nparams = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\n\n# Send a GET request to search for the movie\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the movie id of the first result\n    movie_id = response.json()['results'][0]['id']\n\n    # Define the API url for getting the cast and crew of the movie by movie_id\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n    # Send a GET request to retrieve the cast and crew of the movie\n    credits_response = requests.get(credits_url, headers=headers)\n\n    # Check if the credits response is successful\n    if credits_response.status_code == 200:\n        # Extract the cast information from the response\n        cast_list = credits_response.json()['cast']\n\n        # Get the names of the actors who starred in the movie \"Titanic\"\n        actors_list = [actor['name'] for actor in cast_list]\n\n        # Print the list of actors who starred in the movie \"Titanic\"\n        print(\"Actors who starred in the movie Titanic:\")\n        for actor in actors_list:\n            print(actor)\n\n    else:\n        print(\"Failed to retrieve cast and crew details for the movie\")\nelse:\n    print(\"Failed to search for the movie Titanic\")\n```",
        "usage": [
            519,
            7498,
            8017
        ],
        "executed": "Actors who starred in the movie Titanic:\nLeonardo DiCaprio\nKate Winslet\nBilly Zane\nKathy Bates\nFrances Fisher\nGloria Stuart\nVictor Garber\nBill Paxton\nBernard Hill\nDavid Warner\nJonathan Hyde\nLewis Abernathy\nSuzy Amis\nNicholas Cascone\nDanny Nucci\nJason Barry\nLew Palter\nEric Braeden\nEwan Stewart\nBernard Fox\nIoan Gruffudd\nJonny Phillips\nEdward Fletcher\nScott G. Anderson\nMartin East\nGregory Cooke\nAlexandrea Owens\nSeth Adkins\nMichael Ensign\nAnatoly M. Sagalevitch\nMartin Hub\nMark Lindsay Chapman\nRichard Graham\nPaul Brightwell\nCraig Kelly\nRon Donachie\nCharlotte Chatton\nFannie Brett\nJenette Goldstein\nCamilla Overbye Roos\nLinda Kerns\nAmy Gaipa\nMartin Jarvis\nRosalind Ayres\nRochelle Rose\nJonathan Evans-Jones\nRocky Taylor\nLiam Tuohy\nSimon Crane\nJames Lancaster\nElsa Raven\nReece P. Thompson III\nLaramie Landis\nMark Rafael Truitt\nJohn Walcutt\nTerry Forrestal\nDerek Lea\nRichard Ashton\nSean Nepita\nBrendan Connolly\nDavid Cronnelly\nGarth Wilton\nRichard Fox\nNick Meaney\nKevin Owers\nMark Capri\nMarc Cass\nPaul Herbert\nEmmett James\nChris Byrne\nOliver Page\nJames Garrett\nErik Holland\nJari Kinnunen\nAnders Falk\nBarry Dennen\nVern Urich\nRebecca Klingler\nTricia O'Neil\nKathleen S. Dunn\nRomeo Francis\nMandana Marino\nVan Ling\nBj\u00f8rn Olsen\nDan Pettersson\nShay Duffin\nGreg Ellis\nDiana Morgan\nKris Andersson\nBobbie Bates\nAaron James Cash\nAnne Fletcher\nEdmond Alan Forsyth\nAndie Hicks\nScott Hislop\nStan Mazin\nLisa Ratzin\nJulene Renee\nBrian Walsh\nAlexandra Boyd\nJames Cameron\nMike Butters\nBruno Campolo\nKevin De La Noy\nTony Kenny\nSean Lawlor\nDon Lynch\nJohnny Martin\nRyan McClurkin\nMeghan McLeod\nMike O'Neal\nPhil Parlapiano\nSteven Quale\nR. Gern Trowbridge\nOlivia Rosewood\nJohn Slade\nBrian McDermott\nBret Aaron Knower\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ]
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "results": "```python\n# Import the requests library\nimport requests\n\n# Define the API url with the company_id of Paramount Pictures\nurl = \"https://api.themoviedb.org/3/company/4/images\"\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to get the logo of Paramount Pictures\nresponse = requests.get(url, headers=headers)\n\n# Get the JSON response data\ndata = response.json()\n\n# Print the logo for Paramount Pictures\nif response.status_code == 200:\n    if data['logos']:\n        for logo in data['logos']:\n            print(\"Logo path:\", logo['file_path'])\n    else:\n        print(\"No logo images found for Paramount Pictures\")\nelse:\n    print(\"Failed to retrieve logo images for Paramount Pictures\")\n\n```",
        "usage": [
            325,
            7788,
            8113
        ],
        "executed": "Logo path: /gz66EfNoYPqHTYI4q9UEN4CbHRc.png\nLogo path: /fycMZt242LVjagMByZOLUGbCvv3.png\nLogo path: /zKQ6jLPmCGeB2AiTAwB3aeXAJOb.png\n",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the company \"universal pictures\" to get its id\nsearch_url = \"https://api.themoviedb.org/3/search/company\"\nsearch_params = {\n    \"query\": \"universal pictures\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\ncompany_id = search_data['results'][0]['id']\n\n# Get the details of the company by its id\ncompany_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\ncompany_response = requests.get(company_url, headers=headers)\ncompany_data = company_response.json()\nfounding_location = company_data['origin_country']\n\nprint(f\"The company 'Universal Pictures' was founded in: {founding_location}\")\n```",
        "usage": [
            334,
            6260,
            6594
        ],
        "executed": "The company 'Universal Pictures' was founded in: US\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "results": "```python\nimport requests\n\n# Define the HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if the movie \"Titanic\" is found\nif data[\"total_results\"] > 0:\n    movie_id = data[\"results\"][0][\"id\"]  # Get the ID of the movie \"Titanic\"\n\n    # Get the release dates for the movie with ID movie_id\n    url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n    response = requests.get(url, headers=headers)\n    data = response.json()\n\n    # Extract the release dates of the movie \"Titanic\"\n    release_dates = data[\"results\"]\n    for release_date in release_dates:\n        if release_date[\"iso_3166_1\"] == \"US\":  # Assuming we want the release date in the US\n            print(f'The movie \"Titanic\" is released on: {release_date[\"release_dates\"][0][\"release_date\"]}')\nelse:\n    print(\"Movie 'Titanic' not found.\")\n```",
        "usage": [
            440,
            8480,
            8920
        ],
        "executed": "The movie \"Titanic\" is released on: 1997-12-14T00:00:00.000Z\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"YOUR_API_KEY\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# 1. Search for the Star Wars collection\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the collection id for Star Wars\ncollection_id = search_results[\"results\"][0][\"id\"]\n\n# 2. Get the details of the Star Wars collection\ncollection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\ncollection_response = requests.get(collection_url, headers=headers)\ncollection_details = collection_response.json()\n\n# Get the first movie in the collection\nfirst_movie_id = collection_details[\"parts\"][0][\"id\"]\n\n# 3. Get the cast and crew for the first Star Wars movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{first_movie_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_details = credits_response.json()\n\n# Extract the cast details\ncast_list = credits_details[\"cast\"]\n\n# Get the names of the actors in the first Star Wars movie\nstar_actors = [actor[\"name\"] for actor in cast_list]\n\nprint(star_actors)\n```",
        "usage": [
            312,
            8769,
            9081
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "results": "```python\nimport requests\n\n# Define the API url and params for searching the collection\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\n    \"query\": \"Harry Potter\",\n    \"page\": 1\n}\n\n# Make a GET request to search for the collection\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ndata_search_collection = response_search_collection.json()\n\n# Get the collection id of Harry Potter\ncollection_id = data_search_collection[\"results\"][0][\"id\"]\n\n# Define the API url for getting collection details\nurl_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n# Make a GET request to get the collection details\nresponse_collection_details = requests.get(url_collection_details, headers=headers)\ndata_collection_details = response_collection_details.json()\n\n# Get the movie cover path from the collection details\nmovie_cover_path = data_collection_details[\"parts\"][0][\"poster_path\"]\n\nprint(movie_cover_path)\n```",
        "usage": [
            216,
            7493,
            7709
        ],
        "executed": "/wuMc08IPKEatf9rnMNXvIDxqP4W.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection id of \"The Hunger Games\"\ncollection_url = \"https://api.themoviedb.org/3/search/collection\"\ncollection_params = {\n    \"query\": \"The Hunger Games\"\n}\ncollection_response = requests.get(collection_url, headers=headers, params=collection_params)\ncollection_id = collection_response.json()[\"results\"][0][\"id\"]\n\n# Get the keywords for a movie in the collection\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{collection_id}/keywords\"\nkeywords_response = requests.get(keywords_url, headers=headers)\nkeywords = keywords_response.json()[\"keywords\"]\n\nprint(keywords)\n```",
        "usage": [
            310,
            8235,
            8545
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching collections\nurl_search_collections = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the headers with the Bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the query parameter for the collection name\nparams = {\n    \"query\": \"The Hobbit\"\n}\n\n# Make the API request to search for collections\nresponse_search_collections = requests.get(url_search_collections, headers=headers, params=params)\nsearch_collection_results = response_search_collections.json()\n\n# Extract the collection ID for The Hobbit\ncollection_id = search_collection_results['results'][0]['id']\n\n# Define the API endpoint for getting collection details by ID\nurl_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n# Make the API request to get collection details by ID\nresponse_collection_details = requests.get(url_collection_details, headers=headers)\ncollection_details = response_collection_details.json()\n\n# Extract the release dates for the movies in The Hobbit collection\nrelease_dates = []\nfor part in collection_details['parts']:\n    release_dates.append(part['release_date'])\n\n# Print the release dates for the movies in The Hobbit collection\nprint(release_dates)\n```",
        "usage": [
            416,
            7760,
            8176
        ],
        "executed": "['2012-12-12', '2013-12-11', '2014-12-10']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\n\nresponse = requests.get(search_url, headers=headers, params=params)\nresults = response.json()\n\n# Extracting collection IDs for The Fast and the Furious\ncollection_ids = [collection['id'] for collection in results['results']]\n\n# Get details of movies from each collection\nmovies = []\nfor collection_id in collection_ids:\n    collection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    response = requests.get(collection_details_url, headers=headers)\n    collection_details = response.json()\n    \n    parts = collection_details['parts']\n    for part in parts:\n        movie = {\n            'title': part['title'],\n            'release_date': part['release_date'],\n            'overview': part['overview']\n        }\n        movies.append(movie)\n\n# Displaying the list of movies\nfor i, movie in enumerate(movies, start=1):\n    print(f\"Movie {i}:\")\n    print(f\"Title: {movie['title']}\")\n    print(f\"Release Date: {movie['release_date']}\")\n    print(f\"Overview: {movie['overview']}\")\n    print(\"\\n\")\n```",
        "usage": [
            450,
            7334,
            7784
        ],
        "executed": "Movie 1:\nTitle: 2 Fast 2 Furious\nRelease Date: 2003-06-05\nOverview: It's a major double-cross when former police officer Brian O'Conner teams up with his ex-con buddy Roman Pearce to transport a shipment of \"dirty\" money for shady Miami-based import-export dealer Carter Verone. But the guys are actually working with undercover agent Monica Fuentes to bring Verone down.\n\n\nMovie 2:\nTitle: The Fast and the Furious: Tokyo Drift\nRelease Date: 2006-06-03\nOverview: In order to avoid a jail sentence, Sean Boswell heads to Tokyo to live with his military father. In a low-rent section of the city, Shaun gets caught up in the underground world of drift racing\n\n\nMovie 3:\nTitle: The Fast and the Furious\nRelease Date: 2001-06-22\nOverview: Dominic Toretto is a Los Angeles street racer suspected of masterminding a series of big-rig hijackings. When undercover cop Brian O'Conner infiltrates Toretto's iconoclastic crew, he falls for Toretto's sister and must choose a side: the gang or the LAPD.\n\n\nMovie 4:\nTitle: Fast Five\nRelease Date: 2011-04-20\nOverview: Former cop Brian O'Conner partners with ex-con Dom Toretto on the opposite side of the law. Since Brian and Mia Toretto broke Dom out of custody, they've blown across many borders to elude authorities. Now backed into a corner in Rio de Janeiro, they must pull one last job in order to gain their freedom.\n\n\nMovie 5:\nTitle: Fast & Furious 6\nRelease Date: 2013-05-21\nOverview: Hobbs has Dominic and Brian reassemble their crew to take down a team of mercenaries; Dominic unexpectedly gets sidetracked with facing his presumed deceased girlfriend, Letty.\n\n\nMovie 6:\nTitle: Furious 7\nRelease Date: 2015-04-01\nOverview: Deckard Shaw seeks revenge against Dominic Toretto and his family for his comatose brother.\n\n\nMovie 7:\nTitle: Fast & Furious\nRelease Date: 2009-04-02\nOverview: When a crime brings them back to L.A., fugitive ex-con Dom Toretto reignites his feud with agent Brian O'Conner. But as they are forced to confront a shared enemy, Dom and Brian must give in to an uncertain new trust if they hope to outmaneuver him. And the two men will find the best way to get revenge: push the limits of what's possible behind the wheel.\n\n\nMovie 8:\nTitle: The Fate of the Furious\nRelease Date: 2017-04-12\nOverview: When a mysterious woman seduces Dom into the world of crime and a betrayal of those closest to him, the crew face trials that will test them as never before.\n\n\nMovie 9:\nTitle: Fast X\nRelease Date: 2023-05-17\nOverview: Over many missions and against impossible odds, Dom Toretto and his family have outsmarted, out-nerved and outdriven every foe in their path. Now, they confront the most lethal opponent they've ever faced: A terrifying threat emerging from the shadows of the past who's fueled by blood revenge, and who is determined to shatter this family and destroy everything\u2014and everyone\u2014that Dom loves, forever.\n\n\nMovie 10:\nTitle: F9\nRelease Date: 2021-05-19\nOverview: Dominic Toretto and his crew battle the most skilled assassin and high-performance driver they've ever encountered: his forsaken brother.\n\n\nMovie 11:\nTitle: Fast X: Part 2\nRelease Date: 2025-04-03\nOverview: The eleventh installment in The Fast Saga.\n\n\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "results": "```python\nimport requests\n\n# Define the API url to search for collections\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the query parameter to search for The Fast and the Furious collection\nparams_search_collection = {\n    \"query\": \"The Fast and the Furious\"\n}\n\n# Make a GET request to search for the collection\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ndata_search_collection = response_search_collection.json()\n\n# Extract the collection id from the search results\ncollection_id = data_search_collection['results'][0]['id']\n\n# Define the API url to get reviews of movies from the specified collection\nurl_reviews = f\"https://api.themoviedb.org/3/collection/{collection_id}/reviews\"\n\n# Make a GET request to get the reviews\nresponse_reviews = requests.get(url_reviews, headers=headers)\ndata_reviews = response_reviews.json()\n\n# Extract and print the review(s) of a movie from the collection\nreviews = data_reviews['results']\nfor review in reviews:\n    print(review['content'])\n```",
        "usage": [
            229,
            8272,
            8501
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections to get Lord of the Rings collection id\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\"query\": \"Lord of the Rings\"}\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\n\nif response_search_collection.status_code == 200:\n    collection_id = response_search_collection.json()[\"results\"][0][\"id\"]\n\n    # Get details of the Lord of the Rings collection\n    url_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    response_collection_details = requests.get(url_collection_details, headers=headers)\n\n    if response_collection_details.status_code == 200:\n        first_movie_release_date = response_collection_details.json()[\"parts\"][0][\"release_date\"]\n        print(\"The first movie of the Lord of the Rings collection was released on:\", first_movie_release_date)\n    else:\n        print(\"Failed to fetch collection details\")\nelse:\n    print(\"Failed to search for the collection\")\n```",
        "usage": [
            394,
            7590,
            7984
        ],
        "executed": "The first movie of the Lord of the Rings collection was released on: 2002-04-01\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details of House of Cards\nurl = \"https://api.themoviedb.org/3/search/tv\"\n# Define the parameters for the search query\nparams = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\n# Make the API request to search for House of Cards TV show\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the TV show ID of House of Cards\ntv_id = data['results'][0]['id']\n\n# Define the API url to get the details of the first season of House of Cards\nurl_season = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1\"\n# Make the API request to get the details of the first season of House of Cards\nresponse_season = requests.get(url_season, headers=headers)\ndata_season = response_season.json()\n\n# Extracting the directors from the crew of the first season\ncrew = data_season['episodes'][0]['crew']\ndirectors = [member['name'] for member in crew if member['job'] == 'Director']\n\nprint(directors)\n```",
        "usage": [
            254,
            8030,
            8284
        ],
        "executed": "['David Fincher']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for House of Cards TV show\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"page\": 1,\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\nshow_id = data_search_tv[\"results\"][0][\"id\"]\n\n# Get similar TV shows to House of Cards\nurl_similar_tv = f\"https://api.themoviedb.org/3/tv/{show_id}/similar\"\nparams_similar_tv = {\n    \"page\": 1\n}\nresponse_similar_tv = requests.get(url_similar_tv, headers=headers, params=params_similar_tv)\nsimilar_tv_shows = response_similar_tv.json()[\"results\"]\n\nprint(similar_tv_shows)\n```",
        "usage": [
            368,
            9590,
            9958
        ],
        "executed": "[{'adult': False, 'backdrop_path': '/3XbtYZzgUHOhotpnP3BJg4VVc5s.jpg', 'genre_ids': [18], 'id': 73026, 'origin_country': ['CN'], 'original_language': 'zh', 'original_name': '\u82cd\u7a79\u4e4b\u6634', 'overview': 'Two young men looking for a better life enter the royal palace in the midst of a tumultuous political era of the late Qing Dynasty. Chun Er, a poor peasant boy, and Liang Wen Xiu, who grew up in a wealthy household, find their fates are tied together in unexpected ways. The two young men and Chun Er\u2019s younger sister, Ling Er, travel to the Forbidden City together to look for a better future. Based on the popular novel Sokyu no Subaru by Asada Jiro.', 'popularity': 38.63, 'poster_path': '/cUuS4LSpkjsQ67LYYV61eT411yQ.jpg', 'first_air_date': '2010-01-02', 'name': 'The Firmament of the Pleiades', 'vote_average': 8.0, 'vote_count': 4}, {'adult': False, 'backdrop_path': '/sE06WKjfPWrXgdG3osLpOSZE44a.jpg', 'genre_ids': [18, 10759, 80], 'id': 73182, 'origin_country': ['CN'], 'original_language': 'zh', 'original_name': '\u6a59\u7ea2\u5e74\u4ee3', 'overview': \"Liu Zi Guang has no memories of the past eight years of his life. When he returns to his hometown, Jiangbei, all he knows is that he wants to live life as an upstanding citizen. But those mysterious eight years are bound to catch up to him as he finds his father injured in the hospital upon his return. Hu Rong is a detective whose looks are as fiery as her personality. She's young, but her tough demeanor and unquestionable skills make her a seasoned officer. She cares intensely about her work, doing whatever it takes to protect the citizens of China. Nie Wanfeng is the leader of a criminal organization. He is a hugely tricky opponent for the police, with both his smarts and viciousness keeping him a free man. When Liu Zi Guang and Hu Rong meet, they initially struggle to get along. But their relationship grows as they both come up against Nie Wanfeng together. Things only complicate, however, as Hu Rong learns more about Liu Zi Guang's past, just as she finds herself falling for him.\", 'popularity': 63.033, 'poster_path': '/dXpnbN2HIJkNYKzS4kfMmtlcPGE.jpg', 'first_air_date': '2018-09-17', 'name': 'Age of Legends', 'vote_average': 8.571, 'vote_count': 7}, {'adult': False, 'backdrop_path': '/yEFlzKXJhwuacNlADgzrNfx3M2b.jpg', 'genre_ids': [18, 9648], 'id': 99463, 'origin_country': ['CN'], 'original_language': 'zh', 'original_name': '\u5c11\u4e3b\u4e14\u6162\u884c', 'overview': \"A story that follows the quirky female investigator Tian Sanqi as she searches for her long lost 'brother' and cracks many cases along the way.\\n\\nGrowing up, Tian Sanqi  had a strange liking for performing autopsies. She had an older 'brother' who would always be by her side and they spent many good years together. One day, he mysteriously disappears. Sanqi as a child promises to find her true love and vows never to marry unless it's him.\\n\\nIn her search, she comes across many potential candidates and forms new friendships. The gang accidentally becomes involved in several cases in the area one of which seems closely related to the disappearance of her 'brother' all those years ago. A shocking conspiracy that is 10 years in the making comes to light.\", 'popularity': 28.986, 'poster_path': '/7XrtuGuliBfB6yco1ypGPjRzwmU.jpg', 'first_air_date': '2020-02-14', 'name': \"I've Fallen For You\", 'vote_average': 7.0, 'vote_count': 3}, {'adult': False, 'backdrop_path': '/lUseDQFZoge6GR1F6dGtaARiF7M.jpg', 'genre_ids': [18, 9648], 'id': 99489, 'origin_country': ['KR'], 'original_language': 'ko', 'original_name': '\ud39c\ud2b8\ud558\uc6b0\uc2a4', 'overview': 'A woman puts everything on the line to achieve her goal of being able to move into a luxury penthouse in the Gangnam District. In the process, she gradually finds herself turning into a monster.', 'popularity': 139.557, 'poster_path': '/wybv1VgIOMhcHdU3ooikn2LuR1o.jpg', 'first_air_date': '2020-10-26', 'name': 'The Penthouse', 'vote_average': 8.4, 'vote_count': 215}, {'adult': False, 'backdrop_path': '/eenxjEAPwPbkjN6W5ZzTbfLA4GM.jpg', 'genre_ids': [18, 37], 'id': 99346, 'origin_country': ['GB'], 'original_language': 'en', 'original_name': 'The English', 'overview': 'An aristocratic Englishwoman, Lady Cornelia Locke, arrives into the new and wild landscape of the American West to wreak revenge on the man she sees as responsible for the death of her son.', 'popularity': 34.488, 'poster_path': '/aAFAwxj0VzBRyX5biAHUJM73qYG.jpg', 'first_air_date': '2022-11-10', 'name': 'The English', 'vote_average': 7.35, 'vote_count': 140}, {'adult': False, 'backdrop_path': '/be6mDIMv7cg8duWkcYVnTB8rphO.jpg', 'genre_ids': [10759, 18, 80], 'id': 1973, 'origin_country': ['US'], 'original_language': 'en', 'original_name': '24', 'overview': 'Counterterrorism agent Jack Bauer fights the bad guys of the world, a day at a time. With each week\\'s episode unfolding in real-time, \"24\" covers a single day in the life of Bauer each season.', 'popularity': 289.724, 'poster_path': '/iq6yrZ5LEDXf1ArCOYLq8PIUBpV.jpg', 'first_air_date': '2001-11-06', 'name': '24', 'vote_average': 7.789, 'vote_count': 1411}, {'adult': False, 'backdrop_path': '/ysaA0BInz4071p3LKqAQnWKZCsK.jpg', 'genre_ids': [10751, 35, 18], 'id': 2004, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Malcolm in the Middle', 'overview': 'A gifted young teen tries to survive life with his dimwitted, dysfunctional family.', 'popularity': 446.466, 'poster_path': '/ckLLIsNy3Z0Go1PYHA2PHzVymUA.jpg', 'first_air_date': '2000-01-09', 'name': 'Malcolm in the Middle', 'vote_average': 8.479, 'vote_count': 4073}, {'adult': False, 'backdrop_path': '/f8jrTem5NQnWAgQBBOg2vbh6gzm.jpg', 'genre_ids': [10759, 18], 'id': 2046, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Alias', 'overview': 'Sydney Bristow, an agent who has been tricked to believe she is working for the U.S. government, is actually working for a criminal organization named the Alliance of Twelve. Upon learning this, Sydney becomes a double agent for the real CIA.', 'popularity': 29.067, 'poster_path': '/Dl3KIxWlSEvnXogNHxdXA4pbAk.jpg', 'first_air_date': '2001-09-30', 'name': 'Alias', 'vote_average': 6.709, 'vote_count': 580}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18], 'id': 25599, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Waterfront', 'overview': 'Waterfront is a television drama set in Providence, Rhode Island that was originally scheduled to be a midseason replacement on CBS in 2007, but was shelved by the network in 2006 before any of its five completed episodes had aired. The series was produced by Warner Bros. Television.\\n\\nIt starred Joe Pantoliano and William Baldwin as the Mayor of Providence and Attorney General of Rhode Island, respectively.', 'popularity': 0.96, 'poster_path': None, 'first_air_date': '', 'name': 'Waterfront', 'vote_average': 0.0, 'vote_count': 0}, {'adult': False, 'backdrop_path': '/4yGoeN1nCw6pQYNMypfxuqatmFT.jpg', 'genre_ids': [18], 'id': 25806, 'origin_country': ['GB'], 'original_language': 'en', 'original_name': 'The Gravy Train Goes East', 'overview': 'A fictitious Balkan state adaps to life after Communism.', 'popularity': 5.281, 'poster_path': '/aLzo85if4un5YpOfDDXZQhRsN7G.jpg', 'first_air_date': '1991-10-28', 'name': 'The Gravy Train Goes East', 'vote_average': 7.0, 'vote_count': 1}, {'adult': False, 'backdrop_path': '/alvDWXzauG2mWyKtJQX0rNBlP2P.jpg', 'genre_ids': [18, 10766], 'id': 100717, 'origin_country': ['KR'], 'original_language': 'ko', 'original_name': '\uc704\ud5d8\ud55c \uc57d\uc18d', 'overview': 'A fierce revenge melodrama about a girl who is pushed to the edge of a cliff while fighting the unjust and a man who breaks his promise with her and starts a family of his own, reuniting 7 years later.', 'popularity': 82.417, 'poster_path': '/Am6YS7MocLBAJdi4H3Dotcv4iRz.jpg', 'first_air_date': '2020-03-30', 'name': 'Fatal Promise', 'vote_average': 5.0, 'vote_count': 4}, {'adult': False, 'backdrop_path': '/eyi5tMbK6fRtXNFffUTIhRiX0LT.jpg', 'genre_ids': [35, 18], 'id': 2359, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Spin City', 'overview': \"Workaholic Mike Flaherty is the Deputy Mayor of New York City, serving as Mayor Randall Winston's key strategist and much-needed handler. Mike runs the city with the help of his oddball staff: an anxious and insecure press secretary; a sexist, boorish chief of staff; an impeccably groomed gay activist running minority affairs; a sharp and efficient, man-crazy accountant; and an idealistic young speechwriter. Like Mike, they are all professionally capable but personally challenged.\", 'popularity': 252.436, 'poster_path': '/3Ksmbpg33PigXKWncD8rFMl24vF.jpg', 'first_air_date': '1996-09-17', 'name': 'Spin City', 'vote_average': 7.1, 'vote_count': 270}, {'adult': False, 'backdrop_path': '/gcX2I9u2Xcx1IGKsO3GXm538bGT.jpg', 'genre_ids': [18], 'id': 2364, 'origin_country': ['IN'], 'original_language': 'hi', 'original_name': 'Kkavyanjali', 'overview': 'Kkavyanjali is an Indian Television romantic drama series that aired on STAR Plus. Kkavyanjali is the tale two lovers that can never meet, the two soul mates who love each other deeply yet they are separated. The show has been ranked at No.7 on the list of the a Star Plus top 10 show of all time history.', 'popularity': 82.644, 'poster_path': '/98XV1gVAHLXkEY0Lm4yXN24e7Up.jpg', 'first_air_date': '2005-01-25', 'name': 'Kkavyanjali', 'vote_average': 7.0, 'vote_count': 2}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18, 9648], 'id': 2366, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Reunion', 'overview': 'Reunion is an American television series that aired on FOX in late 2005. The series was intended to chronicle 20 years in the lives of a group of six high school friends from Bedford, New York, with each episode following one year in the lives of the six, beginning with their high school graduation year 1986. Each episode also featured scenes in the present where Detective Marjorino is investigating the brutal murder of one of the group during the night of their 20-year class reunion in 2006. The identity of the murder victim was not revealed until the fifth episode, \"1990\".\\n\\nDue to low ratings, the series was canceled after only nine episodes, and the identity of the killer remained unrevealed in the aired episodes.', 'popularity': 19.925, 'poster_path': '/r9OjgcsK3JXmeCACj7hUfmAq5Pw.jpg', 'first_air_date': '2005-09-08', 'name': 'Reunion', 'vote_average': 6.667, 'vote_count': 6}, {'adult': False, 'backdrop_path': '/5EJ5QTGgNpjslzVVqe6yXwPU63F.jpg', 'genre_ids': [18], 'id': 99688, 'origin_country': ['IT'], 'original_language': 'it', 'original_name': '1993', 'overview': \"Rome, 30 April 1993. A crowd throws coins at Italian politician Bettino Craxi - as if the Civil War has begun. Be quick if you want a place in the new system. Now, it's every man for himself. 1993 is the last chance to set up the Second Republic. Everyone fights their own battles.\", 'popularity': 32.85, 'poster_path': '/w1hMZOQn4VdNuR5H1fkETn7xqM7.jpg', 'first_air_date': '2017-05-16', 'name': '1993', 'vote_average': 7.184, 'vote_count': 38}, {'adult': False, 'backdrop_path': '/n5FPNMJ0eRoiQrKGfUQQRAZeaxg.jpg', 'genre_ids': [18], 'id': 125988, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Silo', 'overview': 'In a ruined and toxic future, a community exists in a giant underground silo that plunges hundreds of stories deep. There, men and women live in a society full of regulations they believe are meant to protect them.', 'popularity': 166.092, 'poster_path': '/zBx1X06G1OlndbXTCZI13FECNz2.jpg', 'first_air_date': '2023-05-04', 'name': 'Silo', 'vote_average': 8.198, 'vote_count': 731}, {'adult': False, 'backdrop_path': '/fV740jZ1ZIwRcLwgBEsiEHrdjPG.jpg', 'genre_ids': [18], 'id': 1435, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Good Wife', 'overview': \"Alicia Florrick boldly assumes full responsibility for her family and re-enters the workforce after her husband's very public sex and political corruption scandal lands him in jail.\", 'popularity': 391.493, 'poster_path': '/lasNCd45fpPLirlA7QxkuopWro.jpg', 'first_air_date': '2009-09-22', 'name': 'The Good Wife', 'vote_average': 7.573, 'vote_count': 526}, {'adult': False, 'backdrop_path': '/layPSOJGckJv3PXZDIVluMq69mn.jpg', 'genre_ids': [80, 18], 'id': 1438, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Wire', 'overview': 'Told from the points of view of both the Baltimore homicide and narcotics detectives and their targets, the series captures a universe in which the national war on drugs has become a permanent, self-sustaining bureaucracy, and distinctions between good and evil are routinely obliterated.', 'popularity': 205.27, 'poster_path': '/4lbclFySvugI51fwsyxBTOm4DqK.jpg', 'first_air_date': '2002-06-02', 'name': 'The Wire', 'vote_average': 8.553, 'vote_count': 2023}, {'adult': False, 'backdrop_path': '/sp0GO5RGhIhtY1TZ3MlmrlCRopU.jpg', 'genre_ids': [10759, 18, 10765], 'id': 1727, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Tarzan: The Epic Adventures', 'overview': \"Tarzan: The Epic Adventures is a syndicated series that aired for one season. It focuses on the character of Tarzan in his early years, after his first exposure to civilization, but before his marriage to Jane. The series uses much of the mythology of Edgar Rice Burroughs' books as background material.\\n\\nThis version of Tarzan was filmed in the Sun City resort in South Africa, making it one of the few Tarzan productions to actually film on that continent.\\n\\nThe character of Nicholas Rokoff, and the fact that Tarzan is not yet married, set this series in-between the two halves of The Return of Tarzan.\\n\\nR. A. Salvatore wrote an authorized Tarzan novel based on pilot script which was published as a trade-paperback in 1996, and a mass-market paperback in 1997.\", 'popularity': 19.873, 'poster_path': '/drs2sLhaezvxYfnD5ICGZCWcYUr.jpg', 'first_air_date': '1996-08-28', 'name': 'Tarzan: The Epic Adventures', 'vote_average': 4.8, 'vote_count': 5}, {'adult': False, 'backdrop_path': '/prpUsOrLTngJDeMXMvPBrhE7vY8.jpg', 'genre_ids': [18, 9648], 'id': 201845, 'origin_country': ['TH'], 'original_language': 'th', 'original_name': '\u0e23\u0e15\u0e35\u0e25\u0e27\u0e07', 'overview': \"The sudden and mysterious demise of his father Phipop leads Pithai to discover that his girlfriend Kamolthip was in fact his father's lover, and therefore a prime suspect in his death. To escape she runs off with another man and Pithai begins to blame Chadathan, her younger sister who has always had a secret crush on him. She soon finds herself in a love trap with Pithai that binds them together, but will they ever be able to escape the cycle of love, revenge, and pain?\", 'popularity': 12.51, 'poster_path': '/88Cp789F54687raXa2SBPTn8md4.jpg', 'first_air_date': '2022-05-09', 'name': 'Love and Deception', 'vote_average': 3.0, 'vote_count': 1}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API endpoint to get the list of currently popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Extracting the first TV show from the response which is assumed as the most popular\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        most_popular_show_start_date = data[\"results\"][0][\"first_air_date\"]\n        print(\"The most popular TV show currently on the air started on: \", most_popular_show_start_date)\n    else:\n        print(\"No currently on-air TV show found.\")\nelse:\n    print(\"Failed to fetch data. Status code:\", response.status_code)\n```",
        "usage": [
            344,
            9608,
            9952
        ],
        "executed": "The most popular TV show currently on the air started on:  2005-09-26\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "results": "```python\nimport requests\n\n# Set the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/68718/credits\"\n\n# Set the headers containing the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the director's id from the credits\n    director_id = None\n    for crew in data[\"crew\"]:\n        if crew[\"job\"] == \"Director\":\n            director_id = crew[\"id\"]\n            break\n\n    if director_id is not None:\n        # Get the movie credits for the director\n        credits_url = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\n        credits_response = requests.get(credits_url, headers=headers)\n        credits_data = credits_response.json()\n\n        # Extract a few more works directed by the director\n        if credits_response.status_code == 200:\n            more_works = []\n            for movie in credits_data[\"crew\"]:\n                if movie[\"job\"] == \"Director\":\n                    more_works.append(movie[\"title\"])\n\n            print(more_works)\n        else:\n            print(\"Failed to fetch director's works\")\n    else:\n        print(\"Director not found in credits\")\nelse:\n    print(\"Failed to fetch credits for Django Unchained\")\n```",
        "usage": [
            462,
            9194,
            9656
        ],
        "executed": "['Four Rooms', 'Grindhouse', 'Reservoir Dogs', \"My Best Friend's Birthday\", 'Kill Bill: Vol. 1', 'Inglourious Basterds', 'Once Upon a Time\u2026 in Hollywood', 'Kill Bill: Vol. 2', 'Django Unchained', 'Death Proof', 'Jackie Brown', 'The Hateful Eight', 'Reservoir Dogs', 'Pulp Fiction', 'Kill Bill: The Whole Bloody Affair', 'Sin City', 'The Movie Critic']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the cast from the response\n    tv_cast = response.json()[\"results\"][0][\"id\"]\n    print(tv_cast)\nelse:\n    print(\"Failed to retrieve the TV show cast\")\n```",
        "usage": [
            296,
            9790,
            10086
        ],
        "executed": "45789\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "I need a review for Breaking Bad",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show using query parameter\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Breaking Bad\"\n}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the TV show ID for Breaking Bad\ntv_show_id = response.json()['results'][0]['id']\n\n# Get the reviews for the TV show Breaking Bad\nurl = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/reviews\"\nresponse = requests.get(url, headers=headers)\n\nreviews = response.json()['results']\nprint(reviews)\n```",
        "usage": [
            309,
            7515,
            7824
        ],
        "executed": "[{'author': 'slyone10001', 'author_details': {'name': '', 'username': 'slyone10001', 'avatar_path': None, 'rating': 10.0}, 'content': 'Wow....where to start. Not really into \"DRUG\" inspired shows. But this one had me from the start. The only bad about this show was the split seasons when it was a first run show. But now you can go right through to the next episode with out having to wait.....MUST WATCH ! !', 'created_at': '2018-04-10T15:44:38.134Z', 'id': '5accdbe6c3a3687e2702d058', 'updated_at': '2021-06-23T15:58:07.601Z', 'url': 'https://www.themoviedb.org/review/5accdbe6c3a3687e2702d058'}, {'author': 'Dean', 'author_details': {'name': 'Dean', 'username': 'Ditendra', 'avatar_path': None, 'rating': 10.0}, 'content': \"I'll be honest, at first when I started this TV show and finished first season, I didn't like it. It felt boring for me and I stopped watching, but after few years, I decided to give it a chance and continue. I'm so happy because of my decision, because after finishing this TV show, I can definitely tell that it was a masterpiece! 5th season is a bomb and 14th season was shocking! It left me with sad, euphoric shock feeling. It was mind blowing! I'm not gonna spoil you what happened, but if you started first season and you don't like it, for goodness sake, give it a chance and continue watching. I promise you won't regret.\\r\\n\\r\\nCharacters are very well developed. Acting is superb! Plot is very interesting. Whole TV show is tense, especially the last season. The only downside I can think about is camera. Sometimes it's shaking on some certain scenes. I don't know why they didn't pay attention to this, but this is nothing, just a very minor minus. Everything else is great about this TV show.\", 'created_at': '2019-09-30T09:02:26.890Z', 'id': '5d91c4a2172d7f001759ca0a', 'updated_at': '2021-06-23T15:58:27.439Z', 'url': 'https://www.themoviedb.org/review/5d91c4a2172d7f001759ca0a'}, {'author': 'l33t5p34k3r', 'author_details': {'name': '', 'username': 'l33t5p34k3r', 'avatar_path': None, 'rating': 9.0}, 'content': 'Started out really good, but dropped quality after the second to last season', 'created_at': '2020-06-10T07:29:33.686Z', 'id': '5ee08bdd90dde0001fa67192', 'updated_at': '2021-06-23T15:58:39.055Z', 'url': 'https://www.themoviedb.org/review/5ee08bdd90dde0001fa67192'}, {'author': 'drystyx', 'author_details': {'name': '', 'username': 'drystyx', 'avatar_path': '/hLLsAvAnVT0cFU7JuuaaItTWXv8.jpg', 'rating': 3.0}, 'content': 'This is the kind of TV show for the \"formula lovers\" who want to feel superior.\\r\\nThere is an air of the superiority complex of the \"drug knowledgeable\" crowd in this series about a \"smart guy\" breaking into the drug trade.\\r\\nHis \"talent\" makes him the important cog in the machine. He can call his shots.\\r\\nStill, the ruffians give him a rough way to go, because criminals really are stupid.\\r\\nOnce they learn that they are nothing without him, he gets his way.\\r\\nMuch like a Western town blacksmith, he\\'s the needed ingredient.\\r\\nHowever, things get very formula early on in the show. And there\\'s always this sense of a superiority complex from the sort of people who push shows like this onto their friends and acquaintances. The directing writing team tap into the control freak crowd very well.\\r\\nBut it is a dull show about dull people.', 'created_at': '2023-04-02T17:02:14.125Z', 'id': '6429b5168de0ae00978d836a', 'updated_at': '2023-04-03T16:45:23.650Z', 'url': 'https://www.themoviedb.org/review/6429b5168de0ae00978d836a'}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for \"The Last Of Us\" TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Last Of Us\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Get recommendations for the TV show\nrecommendations_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/recommendations\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(recommendations_url, headers=headers, params=params)\nrecommendations = response.json()[\"results\"]\n\n# Print the recommendations\nfor recommendation in recommendations:\n    print(recommendation[\"name\"])\n```",
        "usage": [
            340,
            8806,
            9146
        ],
        "executed": "The Mandalorian\nWednesday\nGame of Thrones\nChernobyl\nBreaking Bad\nStranger Things\nTulsa King\nHouse of the Dragon\nThe Walking Dead\nYou\nThe Boys\nRick and Morty\nSecret Invasion\nThe Night Agent\nBEEF\nThe Glory\nSeverance\nThe Lord of the Rings: The Rings of Power\nFrom\nVelma\nThe Queen's Gambit\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Last Of Us\",\n    \"include_adult\": False\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the TV show id of \"The Last Of Us\"\n    tv_show_id = response.json()[\"results\"][0][\"id\"]\n    \n    # Call the recommendations API with the TV show id\n    recommendations_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/recommendations\"\n    recommendations_params = {\n        \"page\": 1\n    }\n    \n    recommendations_response = requests.get(recommendations_url, headers=headers, params=recommendations_params)\n    \n    # Check if the recommendations API request was successful\n    if recommendations_response.status_code == 200:\n        recommendations = recommendations_response.json()[\"results\"]\n        # Print the recommendations\n        for recommendation in recommendations:\n            print(recommendation[\"name\"])\n    else:\n        print(\"Failed to retrieve recommendations\")\nelse:\n    print(\"Failed to retrieve TV show information\")    \n```",
        "usage": [
            266,
            8551,
            8817
        ],
        "executed": "The Mandalorian\nWednesday\nGame of Thrones\nChernobyl\nBreaking Bad\nStranger Things\nTulsa King\nHouse of the Dragon\nThe Walking Dead\nYou\nThe Boys\nRick and Morty\nSecret Invasion\nThe Night Agent\nBEEF\nThe Glory\nSeverance\nThe Lord of the Rings: The Rings of Power\nFrom\nVelma\nThe Queen's Gambit\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "results": "```python\nimport requests\n\n# Set the API url to get the credits for a TV episode\nurl = \"https://api.themoviedb.org/3/tv/1668/season/3/episode/24/credits\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Get the JSON response\ndata = response.json()\n\n# Extract the guest stars information\nguest_stars = data['guest_stars']\n\n# Print the list of guest stars\nfor star in guest_stars:\n    print(star['name'])\n```",
        "usage": [
            293,
            8921,
            9214
        ],
        "executed": "Christine Taylor\nJames Hong\nJon Favreau\nSteve Park\nJoe O'Connor\nRobin Williams\nBilly Crystal\nBruce Buffer\nJohn McCarthy\nSam McMurray\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the headers with API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the popular TV show API to get the list of current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {'page': 1} # Setting page as 1\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the id of the most popular TV show\ntv_id = data['results'][0]['id']\n\n# Call the credits API for the most popular TV show to get the cast\ncast_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\ncast_response = requests.get(cast_url, headers=headers)\ncast_data = cast_response.json()\n\n# Get the lead actor (first cast member)\nlead_actor = cast_data['cast'][0]['name']\n\nprint(f\"The lead actor in the most popular TV show is: {lead_actor}\")\n```",
        "usage": [
            370,
            6079,
            6449
        ],
        "executed": "The lead actor in the most popular TV show is: Dirk Galuba\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ]
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the top rated TV shows\nresponse_tv_top_rated = requests.get(\"https://api.themoviedb.org/3/tv/top_rated\", headers=headers, params={\"page\": 1})\ndata_tv_top_rated = response_tv_top_rated.json()\n\n# Get the TV show id of the top-1 rated TV show\ntv_id = data_tv_top_rated['results'][0]['id']\n\n# Call the API to get the keywords of the top-1 rated TV show\nresponse_keywords = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\", headers=headers)\ndata_keywords = response_keywords.json()\n\n# Get the first keyword\nfirst_keyword = data_keywords['results'][0]['name']\n\nprint(first_keyword)\n```",
        "usage": [
            340,
            8702,
            9042
        ],
        "executed": "hotel\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show 2 Broke Girls\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the poster path of the first result\ndata = response.json()\nif data[\"total_results\"] > 0:\n    poster_path = data[\"results\"][0][\"poster_path\"]\n    print(\"Poster path for 2 Broke Girls:\", poster_path)\nelse:\n    print(\"2 Broke Girls not found.\")\n```",
        "usage": [
            313,
            6412,
            6725
        ],
        "executed": "Poster path for 2 Broke Girls: /qCa4ANpF1QOioqRUNHgk2B3KFMZ.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ]
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "results": "```python\nimport requests\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show 2 Broke Girls\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    'query': '2 Broke Girls',\n    'include_adult': 'false'\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params)\nsearch_results = response_search_tv.json()\ntv_id = search_results['results'][0]['id']\n\n# Get the details of 2 Broke Girls\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\nresponse_tv_details = requests.get(url_tv_details, headers=headers)\ntv_details = response_tv_details.json()\n\n# Calculate the total number of episodes\ntotal_episodes = 0\nfor season in tv_details['seasons']:\n    total_episodes += season['episode_count']\n\ntotal_episodes\n```",
        "usage": [
            364,
            9725,
            10089
        ],
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "results": "```python\nimport requests\n\n# API url to search for the TV show \"The Big Bang Theory\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n# Parameters for searching the TV show \"The Big Bang Theory\"\nparams_tv_search = {\n    \"query\": \"The Big Bang Theory\",\n    \"include_adult\": False,\n    \"first_air_date_year\": 2007\n}\n\n# Make a request to search for the TV show \"The Big Bang Theory\"\nresponse_tv_search = requests.get(url_search_tv, headers=headers, params=params_tv_search)\ndata_tv_search = response_tv_search.json()\n\n# Extract the production company id for \"The Big Bang Theory\"\nif data_tv_search['total_results'] > 0:\n    tv_show_data = data_tv_search['results'][0]\n    company_ids = tv_show_data['production_company_ids']\n\n    if company_ids:\n        # Get the details of the first production company that worked on \"The Big Bang Theory\"\n        production_company_id = company_ids[0]\n        \n        # API url to get the details of the production company\n        url_company_details = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\n        \n        # Make a request to get the details of the production company\n        response_company_details = requests.get(url_company_details, headers=headers)\n        company_details = response_company_details.json()\n        \n        print(f\"The company that produced The Big Bang Theory was founded in {company_details['origin_country']}\")\n    else:\n        print(\"No production company information found for The Big Bang Theory\")\nelse:\n    print(\"No information found for The Big Bang Theory\")\n```",
        "usage": [
            346,
            8265,
            8611
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"The Big Bang Theory\"\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Big Bang Theory\"\n}\nresponse = requests.get(tv_search_url, headers=headers, params=params)\n\n# Extract the creation date of The Big Bang Theory from the response\nif response.ok:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        first_air_date = data[\"results\"][0][\"first_air_date\"]\n        print(\"The Big Bang Theory was created on:\", first_air_date)\n    else:\n        print(\"No results found for The Big Bang Theory\")\nelse:\n    print(\"Error occurred during API call\")\n```  ",
        "usage": [
            331,
            8579,
            8910
        ],
        "executed": "The Big Bang Theory was created on: 2007-09-24\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API URL for getting popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Parameters for the API\nparams = {\n    \"page\": 1\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    \n    # Get the first TV show's id\n    tv_id = data['results'][0]['id']\n    \n    # API URL for getting keywords of a TV show\n    url_keywords = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    \n    # Send GET request to get keywords of the TV show\n    response_keywords = requests.get(url_keywords, headers=headers)\n    \n    if response_keywords.status_code == 200:\n        # Get the JSON response\n        data_keywords = response_keywords.json()\n        \n        # Get the keyword of the most popular TV show\n        keyword = data_keywords['results'][0]['name']\n        \n        print(\"Keyword of the most popular TV show:\", keyword)\n    else:\n        print(\"Failed to get keywords:\", response_keywords.status_code)\nelse:\n    print(\"Failed to get popular TV shows:\", response.status_code)\n```",
        "usage": [
            456,
            9127,
            9583
        ],
        "executed": "Keyword of the most popular TV show: germany\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n\n# Step 1: Get the TV show details for Westworld\ntv_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Westworld\"\n}\nresponse_tv = requests.get(tv_url, headers=headers, params=params)\ntv_data = response_tv.json()\nwestworld_id = tv_data['results'][0]['id']\n\n# Step 2: Get the details of the second season of Westworld\nseason_url = f\"https://api.themoviedb.org/3/tv/{westworld_id}/season/2\"\nresponse_season = requests.get(season_url, headers=headers)\nseason_data = response_season.json()\n\n# Step 3: Get the details of the third episode of the second season of Westworld\nepisode_url = f\"https://api.themoviedb.org/3/tv/{westworld_id}/season/2/episode/3\"\nresponse_episode = requests.get(episode_url, headers=headers)\nepisode_data = response_episode.json()\n\n# Output the overview of the third episode of the second season of Westworld\nprint(episode_data['overview'])\n```",
        "usage": [
            412,
            9513,
            9925
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show Game of Thrones\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Game of Thrones\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_show_id = response_search_tv.json()[\"results\"][0][\"id\"]\n\n# Get the details of the second season of Game of Thrones\nurl_season_details = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/2\"\nresponse_season_details = requests.get(url_season_details, headers=headers)\n\n# Extract the air date of the second season\nair_date_second_season = response_season_details.json()[\"air_date\"]\nprint(\"Air Date of the Second Season of Game of Thrones: \", air_date_second_season)\n```",
        "usage": [
            353,
            8553,
            8906
        ],
        "executed": "Air Date of the Second Season of Game of Thrones:  2012-03-31\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/858/season/1/episode/3/images\"\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Get the json data from the response\ndata = response.json()\n\n# Extract the poster path of the third episode\nposter_path = data[\"stills\"][2][\"file_path\"]\nprint(poster_path)\n```",
        "usage": [
            274,
            8166,
            8440
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "results": "```python\nimport requests\n\n# Provided API url to get the primary TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/1399\"\n\n# Parameters for the API call (no extra parameter needed, just replace the {tv_id})\nparams = {}\n\n# The provided authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the response to get the network logo\nif response.status_code == 200:\n    data = response.json()\n    networks = data.get(\"networks\")\n    if networks:\n        for network in networks:\n            # Check if the network name is \"HBO\" (The network that produced \"Game of Thrones\") and get its logo\n            if network.get(\"name\") == \"HBO\":\n                logo_path = network.get(\"logo_path\")\n                if logo_path:\n                    logo_url = f\"https://image.tmdb.org/t/p/original/{logo_path}\"\n                    print(\"Logo of the network that produced `Game of Thrones`:\", logo_url)\n                    break\n    else:\n        print(\"No networks found\")\nelse:\n    print(\"Error - Unable to fetch network details\")\n\n```",
        "usage": [
            414,
            8433,
            8847
        ],
        "executed": "Logo of the network that produced `Game of Thrones`: https://image.tmdb.org/t/p/original//tuomPhY2UtuPTqqFnKMVHvSb724.png\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"0dbab590c7eaca07ebf113a51974a37ad92\"\n# Set the headers\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for TV show 'Game of Thrones'\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Game of Thrones\"\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = response.json()\n\n# Get the network id of 'Game of Thrones'\nnetwork_id = search_results[\"results\"][0][\"networks\"][0][\"id\"]\n\n# Get the details of the network\nnetwork_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\nnetwork_response = requests.get(network_url, headers=headers)\nnetwork_details = network_response.json()\n\n# Get the homepage of the network\nnetwork_homepage = network_details[\"homepage\"]\nprint(network_homepage)\n```",
        "usage": [
            216,
            9351,
            9567
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the parameters\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the results in JSON format\ndata = response.json()\n\n# Extracting the first TV show result to get the keywords\nif data and data.get(\"results\"):\n    first_show = data[\"results\"][0]\n    tv_id = first_show[\"id\"]\n\n    # Calling the TV show keywords API\n    keywords_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    keywords_response = requests.get(keywords_url, headers=headers)\n    keywords_data = keywords_response.json()\n\n    # Extracting the first keyword\n    if keywords_data and keywords_data.get(\"results\"):\n        first_keyword = keywords_data[\"results\"][0][\"name\"]\n        print(f\"The keyword of the most popular TV show currently is: {first_keyword}\")\n    else:\n        print(\"No keywords found for the TV show.\")\n\nelse:\n    print(\"No TV show data found.\")\n```",
        "usage": [
            422,
            8545,
            8967
        ],
        "executed": "The keyword of the most popular TV show currently is: germany\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get a list of currently popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the id of the company that produced the most popular TV show\nmost_popular_show = data['results'][0]\ncompany_id = most_popular_show['production_companies'][0]['id']\n\n# Call the API to get details of the company by id\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse_company = requests.get(url_company, headers=headers)\ndata_company = response_company.json()\n\n# Extract the headquarter location of the company\nheadquarters_location = data_company['headquarters']\n\nprint(\"The headquarter of the company that produced currently the most popular TV show is:\", headquarters_location)\n```",
        "usage": [
            360,
            7496,
            7856
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "results": "```python\nimport requests\n\n# Define the API url for searching TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for searching TV show\nparams = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\n\n# Set the authorization token in the header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the genre of The Mandalorian if the API call is successful\nif response.status_code == 200:\n    results = response.json().get('results', [])\n    if results:\n        genre_ids = results[0].get('genre_ids', [])  # Get the genre IDs\n        print(genre_ids)\n    else:\n        print(\"The Mandalorian was not found in the search results.\")\nelse:\n    print(\"Failed to retrieve data from the API.\")\n```",
        "usage": [
            353,
            8006,
            8359
        ],
        "executed": "[10765, 10759, 18]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the trending API to get the most trending TV show\ntrending_url = \"https://api.themoviedb.org/3/trending/tv/day\"\ntrending_response = requests.get(trending_url, headers=headers)\ntrending_data = trending_response.json()\n\n# Extract the TV show id of the most trending show\ntv_id = trending_data['results'][0]['id']\n\n# Call the credits API for the TV show to get the cast details\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\n\n# Extract the lead actor's id for the TV show\nlead_actor_id = credits_data['cast'][0]['id']\n\n# Call the person API to get the lead actor's details\nperson_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nperson_response = requests.get(person_url, headers=headers)\nperson_data = person_response.json()\n\n# Extract the birthday of the lead actor\nlead_actor_birthday = person_data['birthday']\n\nprint(f\"The birthday of the lead actor of today's most trending TV show is: {lead_actor_birthday}\")\n```",
        "usage": [
            437,
            8709,
            9146
        ],
        "executed": "The birthday of the lead actor of today's most trending TV show is: 1984-12-16\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "results": "```python\nimport requests\n\n# Set the API key and base url\nbase_url = \"https://api.themoviedb.org/3\"\napi_key = \"<Your API Key>\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Get the trending TV shows for today\nurl = f\"{base_url}/trending/tv/day\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the network id of the most trending TV show\nnetwork_id = data[\"results\"][0][\"networks\"][0][\"id\"]\n\n# Get the details of the network by network id\nurl = f\"{base_url}/network/{network_id}\"\nresponse = requests.get(url, headers=headers)\nnetwork_data = response.json()\n\n# Print the homepage of the network\nhomepage = network_data[\"homepage\"]\nprint(\"Homepage of the network that produced today's most trending TV show:\", homepage)\n```",
        "usage": [
            189,
            9140,
            9329
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "give me a review of today's most trending TV show",
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the API key in headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the data from the response\n    data = response.json()\n\n    # Get the TV show id of the most trending TV show\n    trending_tv_id = data['results'][0]['id']\n\n    # Define the API endpoint to get the reviews of the most trending TV show\n    reviews_url = f\"https://api.themoviedb.org/3/tv/{trending_tv_id}/reviews\"\n\n    # Make the API request to get the reviews\n    reviews_response = requests.get(reviews_url, headers=headers)\n\n    if reviews_response.status_code == 200:\n        # Get the reviews data\n        reviews_data = reviews_response.json()\n\n        # Print the user reviews for the most trending TV show\n        for review in reviews_data['results']:\n            print(f\"Author: {review['author']}\")\n            print(f\"Review: {review['content']}\")\n            print(\"----------\")\n\n    else:\n        print(f\"Failed to retrieve reviews. Status code: {reviews_response.status_code}\")\nelse:\n    print(f\"Failed to retrieve trending TV shows. Status code: {response.status_code}\")\n```",
        "usage": [
            473,
            8895,
            9368
        ],
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get today's trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\n\n# Check if the request was successful with status code 200\nif response_trending_tv.status_code == 200:\n    # Extract the TV show id of the most trending TV show\n    trending_tv_id = response_trending_tv.json()[\"results\"][0][\"id\"]\n\n    # Get similar TV shows to the most trending TV show\n    url_similar_tv = f\"https://api.themoviedb.org/3/tv/{trending_tv_id}/similar\"\n    response_similar_tv = requests.get(url_similar_tv, headers=headers)\n\n    # Print the results\n    print(response_similar_tv.json())\nelse:\n    print(\"Failed to fetch trending TV shows data.\")\n```",
        "usage": [
            364,
            8341,
            8705
        ],
        "executed": "{'page': 1, 'results': [{'adult': False, 'backdrop_path': '/yYPFzdQdRzeidwl3llxFFOKyNwe.jpg', 'genre_ids': [18, 80], 'id': 127585, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'American Gigolo', 'overview': 'Julian Kaye has always been an object of desire, so much so that people are willing to destroy him in order to have him. Exonerated, after 15 years in prison for a murder he didn\u2019t commit, he now faces the challenge of picking up the pieces as the detective who put him behind bars tries to unravel the mystery that led to his wrongful incarceration.', 'popularity': 37.733, 'poster_path': '/m0nRFOLYUju4XHG7v2jZZf3n6vs.jpg', 'first_air_date': '2022-09-11', 'name': 'American Gigolo', 'vote_average': 7.054, 'vote_count': 56}, {'adult': False, 'backdrop_path': '/lwcRxaeAYNox5dyoUYqEDS9NZYK.jpg', 'genre_ids': [35], 'id': 127620, 'origin_country': ['ES'], 'original_language': 'es', 'original_name': 'Se\u00f1or, dame paciencia', 'overview': '', 'popularity': 10.211, 'poster_path': '/9oIcKDhNXpi6wVdLhQQApdp9YLz.jpg', 'first_air_date': '2022-01-02', 'name': 'Lord, Give Me Patience', 'vote_average': 4.25, 'vote_count': 4}, {'adult': False, 'backdrop_path': '/jPyKuRjloYkjVWNPtXCrYxtg3Bu.jpg', 'genre_ids': [10759, 16, 35, 10765, 10762], 'id': 2745, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Aladdin', 'overview': 'Aladdin is an animated television series made by Walt Disney Television which aired from 1994 to 1995, based on the original 1992 feature. It was animated at the Slightly Offbeat Productions Studios in Penrose, Auckland, New Zealand. Coming on the heels of the direct-to-video sequel The Return of Jafar, the series picked up where that installment left off, with Aladdin now living in the palace, engaged to beautiful and spunky Princess Jasmine. \"Al\" and Jasmine went together into peril among sorcerers, monsters, thieves, and more. Monkey sidekick Abu, the animated Magic Carpet, and the fast-talking, shape-shifting Genie came along to help, as did sassy, complaining parrot Iago, formerly Jafar\u2019s pet but now an antihero. Jafar, having previously been destroyed in the second movie, returns in only one episode which also serves as a crossover with Hercules: The Animated Series.', 'popularity': 113.404, 'poster_path': '/nlaiczW81kY46GBdfIcTrBIqr8I.jpg', 'first_air_date': '1994-02-06', 'name': 'Aladdin', 'vote_average': 6.9, 'vote_count': 315}, {'adult': False, 'backdrop_path': '/mnntYG8SWVnnVfHohU5RyyDyYou.jpg', 'genre_ids': [35], 'id': 49929, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Bad Teacher', 'overview': 'An always inappropriate, fearless and unapologetic former trophy wife masquerades as a teacher in order to find a new man after her wealthy husband leaves her penniless.', 'popularity': 37.026, 'poster_path': '/uBHsOsDDxzGLFF05k0ebSZyawOh.jpg', 'first_air_date': '2014-04-24', 'name': 'Bad Teacher', 'vote_average': 5.828, 'vote_count': 29}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18], 'id': 1337, 'origin_country': ['CA'], 'original_language': 'en', 'original_name': 'FX: The Series', 'overview': 'Rollie Tyler, a special effects expert, helps his detective friend solve crimes by making criminals see what they want to see. But what is real and what is illusion?', 'popularity': 66.314, 'poster_path': '/kLdsiEqnLEdVde4mq32i15xgEBi.jpg', 'first_air_date': '1996-09-09', 'name': 'FX: The Series', 'vote_average': 6.133, 'vote_count': 15}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18, 35], 'id': 99410, 'origin_country': ['CL'], 'original_language': 'es', 'original_name': 'Las historias de Sussi', 'overview': \"Sussi, a beautiful young woman lives in Santiago with three other women.  Each episode tells different situations and jobs that Sussi have, knowing in each of those different men with whom she has some kind of  affair. Through these experiences, she learns about life and love.\\n\\nBased on Gonzalo Justiniano's movie Sussi.\", 'popularity': 21.853, 'poster_path': None, 'first_air_date': '1998-05-19', 'name': 'Las historias de Sussi', 'vote_average': 0.0, 'vote_count': 0}, {'adult': False, 'backdrop_path': '/vsTGVJhZ2x6DoNZa98LL1QuWfTp.jpg', 'genre_ids': [35, 10759, 10751], 'id': 1797, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Honey, I Shrunk the Kids: The TV Show', 'overview': \"Honey, I Shrunk the Kids: The TV Show is an American syndicated science fiction sitcom based on the 1989 film, Honey, I Shrunk the Kids. It expands upon the original film's concept of a shrinking experiment gone wrong to include a myriad of experiments gone awry. It debuted in first-run syndication on September 1, 1997 and ran for three consecutive seasons, concluding with the 66th episode on May 20, 2000.\\n\\nPeter Scolari took over the role as Wayne Szalinski, the wacky inventor in the original film, played by Rick Moranis. Each episode incorporates new technologies and digital effects to feature the family in various new adventures. The series was filmed in Calgary, Alberta, with its main studios located in Currie Barracks, a decommissioned Canadian Forces dormitory.\", 'popularity': 56.501, 'poster_path': '/g1NWIdQxYGlXC9SA8wkMSYvywJQ.jpg', 'first_air_date': '1997-09-27', 'name': 'Honey, I Shrunk the Kids: The TV Show', 'vote_average': 5.339, 'vote_count': 31}, {'adult': False, 'backdrop_path': '/nL4p0sJWOPQOkznQ7th5WKD6wce.jpg', 'genre_ids': [16, 10759, 10765], 'id': 1890, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Roughnecks: Starship Troopers Chronicles', 'overview': 'The exploits of the Mobile Infantry squad, \"Razak\\'s Roughnecks,\" during the SICON\u2013Bugs War between a newly united humanity and an extraterrestrial race, known as the \"Bugs,\" also sometimes referred to as Arachnids.', 'popularity': 47.492, 'poster_path': '/9nsL5HOXthBIesyPp6j07mtUK8d.jpg', 'first_air_date': '1999-08-30', 'name': 'Roughnecks: Starship Troopers Chronicles', 'vote_average': 6.833, 'vote_count': 18}, {'adult': False, 'backdrop_path': '/1LyPGN2D5MtMeCPzmfq5QC5zaXv.jpg', 'genre_ids': [35], 'id': 202213, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'History of the World: Part II', 'overview': 'Explore different periods of human history through a variety of sketches.', 'popularity': 31.569, 'poster_path': '/6PlHUsScubMx3VADGRh1kIylML2.jpg', 'first_air_date': '2023-03-06', 'name': 'History of the World: Part II', 'vote_average': 5.361, 'vote_count': 54}, {'adult': False, 'backdrop_path': '/lghMCJJ7u2fIHMVtsrsMCV9OTsI.jpg', 'genre_ids': [10759, 18, 10765], 'id': 202411, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Monarch: Legacy of Monsters', 'overview': \"After surviving Godzilla's attack on San Francisco, Cate is shaken yet again by a shocking secret. Amid monstrous threats, she embarks on a globetrotting adventure to learn the truth about her family\u2014and the mysterious organization known as Monarch.\", 'popularity': 250.611, 'poster_path': '/uwrQHMnXD2DA1rvaMZk4pavZ3CY.jpg', 'first_air_date': '2023-11-16', 'name': 'Monarch: Legacy of Monsters', 'vote_average': 8.016, 'vote_count': 610}, {'adult': False, 'backdrop_path': '/4yvQlzOaOWleR2kFW4zs1pllMYU.jpg', 'genre_ids': [35], 'id': 1462, 'origin_country': ['GB'], 'original_language': 'en', 'original_name': 'Let Them Eat Cake', 'overview': 'Let Them Eat Cake is a British sitcom starring Dawn French and Jennifer Saunders set in France, 1782, just seven years before the French Revolution. It is one of the few programmes in which French and Saunders have appeared which they did not create themselves.', 'popularity': 7.906, 'poster_path': '/x3qKj73qC65xMGBpwRsXlK2VLDZ.jpg', 'first_air_date': '1999-09-09', 'name': 'Let Them Eat Cake', 'vote_average': 6.8, 'vote_count': 5}, {'adult': False, 'backdrop_path': '/iXrseWaiQSmGQjePTj8pmd4pMCp.jpg', 'genre_ids': [18, 10765], 'id': 1475, 'origin_country': ['US', 'CA'], 'original_language': 'en', 'original_name': 'The Dead Zone', 'overview': 'Johnny Smith discovers he has developed psychic abilities after a coma.', 'popularity': 89.1, 'poster_path': '/j9l4svOscUWoVqGoATtGEDfTms.jpg', 'first_air_date': '2002-06-16', 'name': 'The Dead Zone', 'vote_average': 7.2, 'vote_count': 131}, {'adult': False, 'backdrop_path': '/sql1v8szmHZNPCRfNhSwNpMqOnn.jpg', 'genre_ids': [18], 'id': 73010, 'origin_country': ['BR'], 'original_language': 'pt', 'original_name': 'Sob Press\u00e3o', 'overview': 'Inside a chaotic emergency room in Rio de Janeiro, a team of doctors are torn between their internal personal conflicts, the difficulties of the profession and the surprising dramas behind each patient\u2018s history, in a heroic attempt to save lives...See more', 'popularity': 73.912, 'poster_path': '/nv9ay0scDNf92evgnyNejpnifZ6.jpg', 'first_air_date': '2017-07-25', 'name': 'Under Pressure', 'vote_average': 8.0, 'vote_count': 13}, {'adult': False, 'backdrop_path': '/cFyp7F8qiBSuSj1qhUnu8MDvubl.jpg', 'genre_ids': [35], 'id': 201834, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'ted', 'overview': \"It's 1993 and Ted the bear's moment of fame has passed, leaving him living with his best friend, 16-year-old John Bennett, who lives in a working-class Boston home with his parents and cousin. Ted may not be the best influence on John, but when it comes right down to it, he's willing to go out on a limb to help his friend and his family.\", 'popularity': 236.867, 'poster_path': '/cPn71YFDENH0JkWUezlsLyWmLfN.jpg', 'first_air_date': '2024-01-11', 'name': 'ted', 'vote_average': 8.152, 'vote_count': 277}, {'adult': False, 'backdrop_path': '/hGtx3dAB6x0ShXpDk4BBvt74Mtx.jpg', 'genre_ids': [18, 35, 10765], 'id': 99654, 'origin_country': ['KR'], 'original_language': 'ko', 'original_name': '18 \uc5b4\uac8c\uc778', 'overview': \"At a difficult place in his marriage and career, a middle-aged man gets a shot at a do-over when he's transformed back into his 18-year-old body.\", 'popularity': 97.606, 'poster_path': '/AwoC5PiNdi1RZTZTgOGGdHqCzrC.jpg', 'first_air_date': '2020-09-21', 'name': '18 Again', 'vote_average': 8.348, 'vote_count': 201}, {'adult': False, 'backdrop_path': '/9L7YV0V2LfKeBZoOVSM55JoDgJr.jpg', 'genre_ids': [18, 10759], 'id': 228186, 'origin_country': ['BR'], 'original_language': 'pt', 'original_name': 'Aldo: Mais Forte que o Mundo', 'overview': '', 'popularity': 3.802, 'poster_path': '/wlj3QrXPGHCsKN6JzVVDIWq5Ovy.jpg', 'first_air_date': '2017-01-03', 'name': 'Aldo: Mais Forte que o Mundo', 'vote_average': 0.0, 'vote_count': 0}, {'adult': False, 'backdrop_path': '/e3F1DhLs90kk1hWZhoTUanrxjMu.jpg', 'genre_ids': [16, 10751, 35, 10759, 10765, 10762], 'id': 2355, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Lilo & Stitch: The Series', 'overview': 'This animated series chronicles the further adventures of renegade scientist Dr. Jumba Jookiba\\'s beloved Experiment 626, who is now living happily as Lilo\\'s alien buddy Stitch. Jumba\u2019s remaining experiments have landed all over Hawaii in the form of dehydrated pods. Lilo and Stitch\u2019s mission is to catch Stitch\u2019s \"cousins\" before they fall into the clutches of the evil Dr. Jacques von Hamsterviel!', 'popularity': 154.763, 'poster_path': '/997mXFpYV2zdXK4EOctN3hgciaT.jpg', 'first_air_date': '2003-09-20', 'name': 'Lilo & Stitch: The Series', 'vote_average': 7.353, 'vote_count': 523}, {'adult': False, 'backdrop_path': '/mgvMMxKz4eDLeompM9oJRDufNdW.jpg', 'genre_ids': [10759, 16, 35, 9648], 'id': 2286, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Real Ghostbusters', 'overview': 'The continuing adventures of paranormal investigators Dr. Peter Venkman, Dr. Egon Spengler, Dr. Ray Stantz, Winston Zeddemore, their secretary Janine Melnitz and their mascot ghost Slimer.', 'popularity': 125.84, 'poster_path': '/j1xlBYeyOQcH51xQc4gEFJK6o13.jpg', 'first_air_date': '1986-09-13', 'name': 'The Real Ghostbusters', 'vote_average': 7.498, 'vote_count': 226}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18], 'id': 228528, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Cruel Intentions', 'overview': \"At an elite Washington, D.C., college, two ruthless step-siblings will do anything to stay on top of the cutthroat social hierarchy. After a brutal hazing incident threatens the entire Panhellenic system at their school, they'll do whatever is necessary to preserve their power and reputation, even if that means seducing the daughter of the vice president of the United States.\", 'popularity': 5.917, 'poster_path': None, 'first_air_date': '', 'name': 'Cruel Intentions', 'vote_average': 0.0, 'vote_count': 0}, {'adult': False, 'backdrop_path': '/cElydeQSNZmX8NRFPEB0FTTYigo.jpg', 'genre_ids': [18], 'id': 74169, 'origin_country': ['IT'], 'original_language': 'it', 'original_name': 'Anna Karenina', 'overview': 'Anna and Kitty. Two lives. One of desperate passion that ends in tragedy, the other, an existence made real through love. Two destinies that interweave, giving rise to two, so very different stories, yet lived in pursuit of the same desire- to find a love that lets them fully be themselves, to live without having to conform to society\u2019s pretenses.', 'popularity': 19.062, 'poster_path': '/b6seDdJl7B1bRcy32qgAqZAMNNY.jpg', 'first_air_date': '2013-12-02', 'name': 'Anna Karenina', 'vote_average': 7.286, 'vote_count': 14}], 'total_pages': 2983, 'total_results': 59655}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "results": "```python\nimport requests\n\n# Setting the API url\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Setting the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API call\nresponse = requests.get(url, headers=headers)\n\n# Extracting the poster path of the most trending TV show\nif response.status_code == 200:\n    results = response.json()\n    if 'results' in results and len(results['results']) > 0:\n        most_trending_tvshow = results['results'][0]\n        if 'poster_path' in most_trending_tvshow:\n            poster_path = most_trending_tvshow['poster_path']\n            print(\"Poster path of today's most trending TV show:\", poster_path)\n        else:\n            print(\"Poster path not available for the most trending TV show.\")\n    else:\n        print(\"No results found for trending TV shows.\")\nelse:\n    print(\"Failed to fetch data. Status code:\", response.status_code)\n```",
        "usage": [
            368,
            8435,
            8803
        ],
        "executed": "Poster path of today's most trending TV show: /e5hw7bThIs8u6WBHjYHhwTIRsL2.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Create a function to get a person's primary TV show details by id\ndef get_tv_show_details(tv_id):\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    response = requests.get(url, headers=headers)\n    return response.json()\n\n# Search for popular people to find Jeremy Clarkson\nparams = {\n    \"page\": 1\n}\npopular_people_response = requests.get(\"https://api.themoviedb.org/3/person/popular\", headers=headers, params=params)\npopular_people_data = popular_people_response.json()\njeremy_clarkson_id = None\n\nfor person in popular_people_data['results']:\n    if person['name'] == 'Jeremy Clarkson':\n        jeremy_clarkson_id = person['id']\n        break\n\nif jeremy_clarkson_id:\n    # Get Jeremy Clarkson's details\n    jeremy_clarkson_details = get_tv_show_details(jeremy_clarkson_id)\n    if jeremy_clarkson_details:\n        # Get the name of Jeremy Clarkson's most popular TV show\n        most_popular_tv_show = jeremy_clarkson_details['name']\n        \n        # Get the credits for Jeremy Clarkson's most popular TV show\n        credits_url = f\"https://api.themoviedb.org/3/tv/{jeremy_clarkson_id}/season/1/credits\"\n        credits_response = requests.get(credits_url, headers=headers)\n        credits_data = credits_response.json()\n\n        # Check for cast members who have worked with Jeremy Clarkson\n        worked_with_jeremy = []\n        for cast_member in credits_data['cast']:\n            if cast_member['name'] != 'Jeremy Clarkson':  # Exclude Jeremy Clarkson from the results\n                worked_with_jeremy.append(cast_member['name'])\n\n        print(f\"People who worked with Jeremy Clarkson in his most popular TV show '{most_popular_tv_show}':\")\n        for person in worked_with_jeremy:\n            print(person)\n    else:\n        print(\"Error: Unable to retrieve Jeremy Clarkson's details.\")\nelse:\n    print(\"Jeremy Clarkson not found in popular people.\")\n```",
        "usage": [
            618,
            9360,
            9978
        ],
        "executed": "Jeremy Clarkson not found in popular people.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "results": "```python\nimport requests\n\n# API url to search for the TV show Black Mirror\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_tv_params = {\n    \"query\": \"Black Mirror\",\n    \"include_adult\": False\n}\nsearch_tv_response = requests.get(search_tv_url, headers=headers, params=search_tv_params)\nsearch_tv_result = search_tv_response.json()\n\n# Extracting the TV show ID for Black Mirror\ntv_id = search_tv_result[\"results\"][0][\"id\"]\n\n# API url to get the details of the second season of Black Mirror\nseason_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2\"\nseason_response = requests.get(season_url, headers=headers)\nseason_result = season_response.json()\n\n# Extracting the ID of the first episode of the second season of Black Mirror\nepisode_id = season_result[\"episodes\"][0][\"id\"]\n\n# API url to get the images of the first episode of the second season of Black Mirror\nepisode_images_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/episode/1/images\"\nepisode_images_response = requests.get(episode_images_url, headers=headers)\nepisode_images_result = episode_images_response.json()\n\n# Printing the image path of the lead actor of the first episode of the second season of Black Mirror\nlead_actor_image_path = episode_images_result[\"stills\"][0][\"file_path\"]\nprint(lead_actor_image_path)\n```",
        "usage": [
            319,
            8823,
            9142
        ],
        "executed": "/ltgvZMI9y73GOlBqoOFiXlot87V.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "results": "```python\nimport requests\n\n# Define the API url for searching TV show\nurl_tv_search = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for searching TV show (query parameter will be \"The Mandalorian\")\nparams_tv_search = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\n\n# Call the API to search for TV show\nresponse_tv_search = requests.get(url_tv_search, headers=headers, params=params_tv_search)\ndata_tv_search = response_tv_search.json()\n\n# Get the TV show id of The Mandalorian\ntv_id = data_tv_search['results'][0]['id']\n\n# Define the API url for getting cast and crew of a TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n\n# Call the API to get cast and crew of The Mandalorian\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Find the lead actor in the cast\nlead_actor = None\nfor cast_member in data_credits['cast']:\n    if cast_member['order'] == 0:  # Assuming order 0 represents the lead actor\n        lead_actor = cast_member\n        break\n\nif lead_actor:\n    lead_actor_id = lead_actor['id']\n\n    # Define the API url for getting the person details\n    url_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n\n    # Call the API to get details of the lead actor\n    response_person = requests.get(url_person, headers=headers)\n    data_person = response_person.json()\n\n    # Extract the birthday of the lead actor\n    lead_actor_birthday = data_person['birthday']\n\n    print(\"The lead actor of The Mandalorian is born on:\", lead_actor_birthday)\nelse:\n    print(\"Lead actor not found for The Mandalorian.\")\n```",
        "usage": [
            403,
            7422,
            7825
        ],
        "executed": "The lead actor of The Mandalorian is born on: 1975-04-02\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the API url for fetching the most popular TV shows airing today\nurl = \"https://api.themoviedb.org/3/tv/airing_today\"\n# Define the parameters for the API request\nparams = {\n    'page': 1\n}\n\n# Set the authorization token in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the JSON response\ndata = response.json()\n\n# Get the most popular TV show\nif data['results']:\n    tv_show_id = data['results'][0]['id']\n    \n    # Call API to get the credits for the TV show to find lead actor\n    credits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    credits_data = credits_response.json()\n    \n    # Get the lead actor from the cast\n    lead_actor = credits_data['cast'][0]['name']\n    print(f\"The lead actor of today's most popular TV show is: {lead_actor}\")\nelse:\n    print(\"No TV shows airing today.\")\n```",
        "usage": [
            413,
            7444,
            7857
        ],
        "executed": "The lead actor of today's most popular TV show is: Dirk Galuba\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "results": "```python\nimport requests\n\n# define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# get the list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\nparams_popular_tv = {\"page\": 1}  # We will retrieve the first page\nresponse = requests.get(url_popular_tv, headers=headers, params=params_popular_tv)\npopular_tv_shows = response.json()\n\n# get the TV show id of the most popular TV show\nmost_popular_tv_show_id = popular_tv_shows[\"results\"][0][\"id\"]\n\n# get the credits of the TV show to find the lead actor\nurl_credits = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_show_id}/credits\"\nresponse = requests.get(url_credits, headers=headers)\ncredits = response.json()\n\n# get the profile path of the lead actor\nlead_actor_profile_path = credits[\"cast\"][0][\"profile_path\"]\n\n# now we have the image path of the lead actor of the most popular TV show\nprint(f\"The photo of the lead actor of the most popular TV show: {lead_actor_profile_path}\")\n```",
        "usage": [
            413,
            9098,
            9511
        ],
        "executed": "The photo of the lead actor of the most popular TV show: /yYjGRTKpBW2XHaBfoA8ilJtmXDq.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "results": "```python\nimport requests\n\n# Set the API url for searching a person\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Set the query parameter to search for Cate Blanchett\nparams = {\n    \"query\": \"Cate Blanchett\",\n    \"include_adult\": False\n}\n\n# Make a GET request to search for Cate Blanchett\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Extract the person id for Cate Blanchett\n    person_id = response.json()['results'][0]['id']\n    \n    # Set the API url for getting TV show credits for Cate Blanchett\n    tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n    \n    # Make a GET request to get TV show credits for Cate Blanchett\n    tv_credits_response = requests.get(tv_credits_url, headers=headers)\n    \n    # Check if the TV credits response is successful\n    if tv_credits_response.status_code == 200:\n        # Get the latest TV show id from Cate Blanchett's credits\n        latest_tv_show_id = tv_credits_response.json()['cast'][0]['id']\n        \n        # Set the API url for getting reviews of the latest TV show\n        reviews_url = f\"https://api.themoviedb.org/3/tv/{latest_tv_show_id}/reviews\"\n        \n        # Make a GET request to get reviews of the latest TV show\n        reviews_response = requests.get(reviews_url, headers=headers)\n        \n        # Check if the reviews response is successful\n        if reviews_response.status_code == 200:\n            # Extract and display the reviews of Cate Blanchett's latest TV show\n            reviews = reviews_response.json()['results']\n            for review in reviews:\n                print(\"Author:\", review['author'])\n                print(\"Content:\", review['content'])\n                print(\"URL:\", review['url'])\n                print()\n        else:\n            print(\"Failed to retrieve reviews of the latest TV show\")\n    else:\n        print(\"Failed to retrieve TV show credits for Cate Blanchett\")\nelse:\n    print(\"Failed to search for Cate Blanchett\")\n```",
        "usage": [
            474,
            10884,
            11358
        ],
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "results": "```python\nimport requests\n\n# Define the base url and endpoint for finding a person by name\nbase_url = \"https://api.themoviedb.org/3/search/person\"\nperson_name = \"David Schwimmer\"\n\n# Set the parameters for the API request\nparams = {\n    \"query\": person_name,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Make the API call to search for the person\nresponse = requests.get(base_url, headers=headers, params=params)\ndata = response.json()\n\n# Check if the API call was successful and if there are any results\nif response.status_code == 200 and data.get(\"results\"):\n    person_id = data[\"results\"][0][\"id\"]\n\n    # Define the base url and endpoint for getting TV credits of the person\n    tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n\n    # Make the API call to get the TV credits of the person\n    tv_credits_response = requests.get(tv_credits_url, headers=headers)\n    tv_credits_data = tv_credits_response.json()\n\n    # Check if the API call was successful and if there are any results\n    if tv_credits_response.status_code == 200 and tv_credits_data.get(\"cast\"):\n        # Sort the TV shows by popularity\n        tv_shows = tv_credits_data[\"cast\"]\n        tv_shows.sort(key=lambda x: x[\"popularity\"], reverse=True)\n\n        # Get the most popular TV show\n        most_popular_tv_show = {\n            \"name\": tv_shows[0][\"name\"],\n            \"popularity\": tv_shows[0][\"popularity\"]\n        }\n\n        print(f\"The most popular TV show of David Schwimmer is '{most_popular_tv_show['name']}' with a popularity score of {most_popular_tv_show['popularity']}\")\n    else:\n        print(\"No TV show credits found for David Schwimmer.\")\nelse:\n    print(\"No person found for the given name.\")\n```",
        "usage": [
            423,
            9484,
            9907
        ],
        "executed": "The most popular TV show of David Schwimmer is 'The Daily Show' with a popularity score of 3058.961\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show Black Mirror\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_tv_params = {\n    \"query\": \"Black Mirror\",\n    \"include_adult\": False\n}\nsearch_tv_response = requests.get(search_tv_url, headers=headers, params=search_tv_params)\nsearch_tv_result = search_tv_response.json()\nblack_mirror_id = search_tv_result[\"results\"][0][\"id\"]\n\n# Get the credits for the second season of Black Mirror\nseason_credits_url = f\"https://api.themoviedb.org/3/tv/{black_mirror_id}/season/2/credits\"\nseason_credits_response = requests.get(season_credits_url, headers=headers)\nseason_credits_result = season_credits_response.json()\n\n# Find the director of the third episode (episode number 3)\ndirector = None\nfor crew_member in season_credits_result[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\" and crew_member[\"episode_count\"] == 3:\n        director = crew_member[\"name\"]\n        break\n\nprint(f\"The director of the third episode of the second season of Black Mirror is: {director}\")\n```",
        "usage": [
            422,
            9862,
            10284
        ],
        "executed": "The director of the third episode of the second season of Black Mirror is: None\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "results": "```python\nimport requests\n\n# Define the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people with the name \"Christopher Nolan\"\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": \"false\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the ID of Christopher Nolan\nperson_id = data['results'][0]['id']\n\n# Get the known for movies of Christopher Nolan\nknown_for_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\nresponse = requests.get(known_for_url, headers=headers)\nknown_for_data = response.json()\n\n# Extract the known for movies\nknown_for_movies = []\nfor item in known_for_data['known_for']:\n    if item['media_type'] == \"movie\":\n        known_for_movies.append(item['original_title'])\n\nprint(known_for_movies)\n```",
        "usage": [
            373,
            9128,
            9501
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "results": "```python\nimport requests\n\n# Define the API url for searching movies\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the query for 'Avatar'\nparams_avatar = {\n    \"query\": \"Avatar\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Define the query for 'Avatar: The Way of Water'\nparams_avatar_water = {\n    \"query\": \"Avatar: The Way of Water\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make API calls to search for movies\nresponse_avatar = requests.get(url_search_movie, headers=headers, params=params_avatar).json()\nresponse_avatar_water = requests.get(url_search_movie, headers=headers, params=params_avatar_water).json()\n\n# Get the average rating for 'Avatar'\naverage_rating_avatar = sum([movie[\"vote_average\"] for movie in response_avatar[\"results\"]]) / len(response_avatar[\"results\"])\n\n# Get the average rating for 'Avatar: The Way of Water'\naverage_rating_avatar_water = sum([movie[\"vote_average\"] for movie in response_avatar_water[\"results\"]]) / len(response_avatar_water[\"results\"])\n\n# Compare the ratings\nif average_rating_avatar > average_rating_avatar_water:\n    print(\"Avatar has a higher rating.\")\nelif average_rating_avatar < average_rating_avatar_water:\n    print(\"Avatar: The Way of Water has a higher rating.\")\nelse:\n    print(\"Both Avatar and Avatar: The Way of Water have the same rating.\")\n```",
        "usage": [
            310,
            9122,
            9432
        ],
        "executed": "Avatar: The Way of Water has a higher rating.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n\nparams = {\n    \"primary_release_date.gte\": \"2021-01-01\",\n    \"vote_average.gte\": 7.0,\n    \"with_original_language\": \"en\",\n    \"page\": 1\n}\n\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    movies = data[\"results\"]\n    for movie in movies:\n        print(movie[\"title\"])\nelse:\n    print(\"Unable to fetch data\")\n```",
        "usage": [
            296,
            10011,
            10307
        ],
        "executed": "Dune: Part Two\nPoor Things\nMigration\nKung Fu Panda 4\nDune\nRed Right Hand\nWonka\nThe Beekeeper\nThe Family Plan\nOppenheimer\nBarbie\nFast X\nTransformers: Rise of the Beasts\nThe Super Mario Bros. Movie\nAvatar: The Way of Water\nThe Hunger Games: The Ballad of Songbirds & Snakes\nKillers of the Flower Moon\nJohn Wick: Chapter 4\nThe Tiger's Apprentice\nElemental\n",
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "results": "```python\nimport requests\n\n# HTTP headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to search for the movie Lord of the Rings\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Lord of the Rings\",  # Searching for the movie\n    \"include_adult\": \"false\"  # Excluding adult content\n}\n\n# Making the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the genre ids of the movie\ngenre_ids = data['results'][0]['genre_ids']\n\n# API url to get the list of official genres for movies\ngenre_url = \"https://api.themoviedb.org/3/genre/movie/list\"\ngenre_params = {}\ngenre_response = requests.get(genre_url, headers=headers, params=genre_params)\ngenre_data = genre_response.json()\n\n# Finding the genre name based on genre id\ngenre_name = None\nfor genre in genre_data['genres']:\n    if genre['id'] in genre_ids:\n        genre_name = genre['name']\n        break\n\nprint(genre_name)\n```",
        "usage": [
            405,
            9714,
            10119
        ],
        "executed": "Action\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the person with the highest popularity\npopular_people = response.json()[\"results\"]\nmost_popular_person = max(popular_people, key=lambda x: x[\"popularity\"])\n\n# Get the details of the most popular person\nurl = f\"https://api.themoviedb.org/3/person/{most_popular_person['id']}\"\nresponse = requests.get(url, headers=headers)\n\n# Extract the birthday of the most popular person\nbirthday = response.json()[\"birthday\"]\nprint(birthday)\n```",
        "usage": [
            333,
            7004,
            7337
        ],
        "executed": "1967-07-26\n",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Big Bang Theory TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Big Bang Theory\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\ndata = response.json()\n\n# Get the TV show ID\ntv_show_id = data[\"results\"][0][\"id\"]\n\n# Get the images of the second season of The Big Bang Theory\nimage_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/2/images\"\nresponse = requests.get(image_url, headers=headers)\nimages_data = response.json()\n\n# Retrieve the poster of the second season\nposter_path = images_data[\"posters\"][0][\"file_path\"]\n\n# Display the poster path\nprint(poster_path)\n```",
        "usage": [
            360,
            9160,
            9520
        ],
        "executed": "/2NBwUBZ4clwj6qO9fBinfxiB0dR.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "results": "```python\nimport requests\n\n# API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2/episode/3\"\n# Params dict (none needed as all information is in the url)\nparams = {}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    # Extract the name of the third episode of the second season of Mandalorian\n    episode_name = data['name']\n    print(\"The name of the third episode of the second season of Mandalorian is:\", episode_name)\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            173,
            9267,
            9440
        ],
        "executed": "The name of the third episode of the second season of Mandalorian is: Chapter 11: The Heiress\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ]
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching for the movie \"The Shawshank Redemption\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n# Set the query parameter for the movie \"The Shawshank Redemption\"\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the API call to search for the movie \"The Shawshank Redemption\"\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie id of \"The Shawshank Redemption\"\nmovie_id = data_search_movie['results'][0]['id']\n\n# Define the API endpoint for getting credits of the movie\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make the API call to get the credits of the movie\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Get the lead actor id (assuming the lead actor is the first in the cast list)\nlead_actor_id = data_movie_credits['cast'][0]['id']\n\n# Define the API endpoint for getting the details of the lead actor\nurl_person_details = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n\n# Make the API call to get the details of the lead actor\nresponse_person_details = requests.get(url_person_details, headers=headers)\ndata_person_details = response_person_details.json()\n\n# Extract the birthday of the lead actor of \"The Shawshank Redemption\"\nlead_actor_birthday = data_person_details['birthday']\n\nprint(f\"The birthday of the lead actor of the movie 'The Shawshank Redemption' is: {lead_actor_birthday}\")\n```",
        "usage": [
            394,
            7549,
            7943
        ],
        "executed": "The birthday of the lead actor of the movie 'The Shawshank Redemption' is: 1958-10-16\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# Define the API key and headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Shawshank Redemption\"\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nmovie_params = {\n    \"query\": \"The Shawshank Redemption\"\n}\nmovie_response = requests.get(movie_search_url, headers=headers, params=movie_params)\nmovie_data = movie_response.json()\nmovie_id = movie_data['results'][0]['id']\n\n# Get the credits for the movie to find the director\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\ncrew = credits_data['crew']\n\n# Find the director in the crew list\ndirector = next((member for member in crew if member['job'] == 'Director'), None)\n\nif director:\n    director_id = director['id']\n    \n    # Get the details of the director\n    person_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n    person_response = requests.get(person_url, headers=headers)\n    person_data = person_response.json()\n    \n    director_birthday = person_data['birthday']\n    \n    print(f\"The birthday of the director of 'The Shawshank Redemption' is: {director_birthday}\")\nelse:\n    print(\"Director information not found for 'The Shawshank Redemption'\")\n```",
        "usage": [
            469,
            7107,
            7576
        ],
        "executed": "The birthday of the director of 'The Shawshank Redemption' is: 1959-01-28\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# Define the API url for searching the movie\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for searching the movie \"The Shawshank Redemption\"\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"api_key\": \"0dbab590c7eaca07ebe625974a37ad92\"\n}\n\n# Call the API to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\n\n# Get the company id that created the movie\ncompany_id = response_search_movie.json()[\"results\"][0][\"production_companies\"][0][\"id\"]\n\n# Define the API url for getting company details\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\n\n# Call the API to get the company details\nresponse_company = requests.get(url_company, headers=headers)\n\n# Get the headquarter location of the company\nheadquarter_location = response_company.json()[\"headquarters\"]\n\nprint(headquarter_location)\n```",
        "usage": [
            227,
            8434,
            8661
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "results": "```python\nimport requests\n\n# Define the necessary API endpoints\ncollection_search_url = \"https://api.themoviedb.org/3/search/collection\"\ncompany_details_url = \"https://api.themoviedb.org/3/company/\"\n\n# Set the API key\napi_key = \"YOUR_API_KEY\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the Star Wars collection\nparams = {\n    \"query\": \"Star Wars\"\n}\nresponse = requests.get(collection_search_url, headers=headers, params=params)\nstar_wars_collection_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the company details for the Star Wars collection\ncompany_id = response.json()[\"results\"][0][\"id\"]\ncompany_response = requests.get(company_details_url + str(company_id), headers=headers)\ncompany_headquarters = company_response.json()[\"headquarters\"]\nprint(\"The headquarters of the company that created the Star Wars collection is:\", company_headquarters)\n```",
        "usage": [
            200,
            6824,
            7024
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get movie details for The Double Life of Veronique\nresponse_veronique = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params={\"query\": \"The Double Life of Veronique\"})\nveronique_results = response_veronique.json()[\"results\"]\nveronique_release_date = veronique_results[0][\"release_date\"]\n\n# Get movie details for Mulholland Drive\nresponse_mulholland = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params={\"query\": \"Mulholland Drive\"})\nmulholland_results = response_mulholland.json()[\"results\"]\nmulholland_release_date = mulholland_results[0][\"release_date\"]\n\n# Compare release dates\nif veronique_release_date < mulholland_release_date:\n    print(\"The Double Life of Veronique was released earlier.\")\nelse:\n    print(\"Mulholland Drive was released earlier.\")\n```",
        "usage": [
            378,
            9888,
            10266
        ],
        "executed": "The Double Life of Veronique was released earlier.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get credits for Twin Peaks Season 1\ntv_id = 1920  # Twin Peaks tv show id\nseason_number = 1\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits\"\nresponse = requests.get(url, headers=headers)\ntwin_peaks_season1_credits = response.json()\n\n# Get credits for Mulholland Drive\nmovie_id = 101  # Mulholland Drive movie id\nurl = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(url, headers=headers)\nmulholland_drive_credits = response.json()\n\n# Extract director names\ntwin_peaks_director = None\nmulholland_drive_director = None\n\nfor crew_member in twin_peaks_season1_credits['crew']:\n    if crew_member['job'] == 'Director':\n        twin_peaks_director = crew_member['name']\n        break\n\nfor crew_member in mulholland_drive_credits['crew']:\n    if crew_member['job'] == 'Director':\n        mulholland_drive_director = crew_member['name']\n        break\n\n# Check if the director of Twin Peaks Season 1 is the same as Mulholland Drive\nif twin_peaks_director is not None and mulholland_drive_director is not None:\n    if twin_peaks_director == mulholland_drive_director:\n        print(f\"The director of Twin Peaks Season 1 and Mulholland Drive is the same person: {twin_peaks_director}\")\n    else:\n        print(\"The director of Twin Peaks Season 1 and Mulholland Drive is different.\")\nelse:\n    print(\"Could not find the director of at least one of the titles.\")\n```",
        "usage": [
            548,
            8415,
            8963
        ],
        "executed": "Could not find the director of at least one of the titles.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ]
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# First, we need to search for the movie id of \"Mulholland Drive\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Mulholland Drive\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Get the movie id from the search results\nmovie_id = search_data[\"results\"][0][\"id\"]\n\n# Next, we get the credits for the movie to find the director\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\n\n# Find the director in the crew list\ndirector_name = \"\"\nfor crew_member in credits_data[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director_name = crew_member[\"name\"]\n        break\n\n# Finally, get the person details to find out where the director was born\nif director_name:\n    person_search_url = \"https://api.themoviedb.org/3/search/person\"\n    person_search_params = {\n        \"query\": director_name\n    }\n    person_search_response = requests.get(person_search_url, headers=headers, params=person_search_params)\n    person_search_data = person_search_response.json()\n\n    # Get the person id from the search results\n    person_id = person_search_data[\"results\"][0][\"id\"]\n\n    # Get the details of the person\n    person_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n    person_response = requests.get(person_url, headers=headers)\n    person_data = person_response.json()\n\n    # Print the birth place of the director\n    print(f\"The director of Mulholland Drive, {director_name}, was born in {person_data['place_of_birth']}\")\nelse:\n    print(\"Director information not found.\")\n```",
        "usage": [
            582,
            7302,
            7884
        ],
        "executed": "The director of Mulholland Drive, David Lynch, was born in Missoula, Montana, USA\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "results": "```python\nimport requests\n\n# Define the headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Mulholland Drive\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Mulholland Drive\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Check if \"Mulholland Drive\" is in the top-rated list\ntop_rated_url = \"https://api.themoviedb.org/3/movie/top_rated\"\ntop_rated_params = {}\ntop_rated_response = requests.get(top_rated_url, headers=headers, params=top_rated_params)\ntop_rated_results = top_rated_response.json()\n\n# Search for \"Mulholland Drive\" in the top-rated list\nis_in_top_10 = False\nfor movie in top_rated_results[\"results\"][:10]:  # Check top 10 movies\n    if \"Mulholland Drive\" in movie[\"title\"]:\n        is_in_top_10 = True\n        break\n\nprint(is_in_top_10)\n```",
        "usage": [
            402,
            8362,
            8764
        ],
        "executed": "False\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Akira Kurosawa\nparams_akira = {\n    \"query\": \"Akira Kurosawa\",\n    \"include_adult\": False\n}\nresponse_akira = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params_akira)\njson_akira = response_akira.json()\n\n# Search for Spielberg\nparams_spielberg = {\n    \"query\": \"Steven Spielberg\",\n    \"include_adult\": False\n}\nresponse_spielberg = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params_spielberg)\njson_spielberg = response_spielberg.json()\n\n# Get movie credits for Akira Kurosawa\nif json_akira[\"total_results\"] > 0:\n    akira_id = json_akira[\"results\"][0][\"id\"]\n    response_akira_credits = requests.get(f\"https://api.themoviedb.org/3/person/{akira_id}/movie_credits\", headers=headers)\n    json_akira_credits = response_akira_credits.json()\n    num_akira_movies = len(json_akira_credits[\"cast\"])\n\n# Get movie credits for Spielberg\nif json_spielberg[\"total_results\"] > 0:\n    spielberg_id = json_spielberg[\"results\"][0][\"id\"]\n    response_spielberg_credits = requests.get(f\"https://api.themoviedb.org/3/person/{spielberg_id}/movie_credits\", headers=headers)\n    json_spielberg_credits = response_spielberg_credits.json()\n    num_spielberg_movies = len(json_spielberg_credits[\"cast\"])\n\n# Compare who directed more movies\nif num_akira_movies > num_spielberg_movies:\n    print(\"Akira Kurosawa directed more movies.\")\nelif num_spielberg_movies > num_akira_movies:\n    print(\"Spielberg directed more movies.\")\nelse:\n    print(\"Both Akira Kurosawa and Spielberg directed the same number of movies.\")\n```",
        "usage": [
            599,
            8677,
            9276
        ],
        "executed": "Spielberg directed more movies.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"0dbab590c7eaca07ebf6fa3a7ad92\"\n# Set the headers\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Step 1: Get the director id for \"Mulholland Drive\" movie\nmovie_title = \"Mulholland Drive\"\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": movie_title\n}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\ndirector_id = None\n\nif response.status_code == 200:\n    movie_data = response.json()\n    if \"results\" in movie_data and len(movie_data[\"results\"]) > 0:\n        first_result = movie_data[\"results\"][0]\n        if \"id\" in first_result:\n            movie_id = first_result[\"id\"]\n            credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n            \n            # Step 2: Get the credits for \"Mulholland Drive\" movie to find the director id\n            response = requests.get(credits_url, headers=headers)\n            if response.status_code == 200:\n                credits_data = response.json()\n                if \"crew\" in credits_data:\n                    for crew_member in credits_data[\"crew\"]:\n                        if crew_member[\"job\"] == \"Director\":\n                            director_id = crew_member[\"id\"]\n                            break\n\n# Step 3: Get the TV shows directed by the director\nif director_id:\n    director_tv_credits_url = f\"https://api.themoviedb.org/3/person/{director_id}/tv_credits\"\n    response = requests.get(director_tv_credits_url, headers=headers)\n    if response.status_code == 200:\n        tv_credits_data = response.json()\n        tv_series_directed = []\n\n        if \"crew\" in tv_credits_data:\n            for credit in tv_credits_data[\"crew\"]:\n                tv_series_directed.append(credit[\"name\"])\n\n        print(tv_series_directed)\n    else:\n        print(\"Failed to fetch TV series data for the director.\")\nelse:\n    print(\"Director ID not found.\")\n\n```",
        "usage": [
            464,
            8489,
            8953
        ],
        "executed": "Director ID not found.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "results": "```python\nimport requests\n\n# Define the API url for getting person details\nurl = \"https://api.themoviedb.org/3/search/person\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the parameters for the query to search for Scarlett Johansson\nparams = {\n    'query': 'Scarlett Johansson',\n    'page': 1,\n    'include_adult': 'false',\n    'region': 'US'\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the person id of Scarlett Johansson\nperson_id = data['results'][0]['id']\n\n# Now we have the person id, we can make another API call to get specific details\nperson_details_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\nperson_params = {}\nperson_response = requests.get(person_details_url, headers=headers, params=person_params)\nperson_data = person_response.json()\n\n# Get the birthday of Scarlett Johansson\nscarlett_birthday = person_data['birthday']\nprint(scarlett_birthday)\n```",
        "usage": [
            392,
            7554,
            7946
        ],
        "executed": "1984-11-22\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ]
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "results": "```python\nimport requests\n\n# Define the API url to get details of a TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n# Define the query parameters to search for \"Sword Art Online\"\nparams = {\n    'query': 'Sword Art Online',\n    'include_adult': False\n}\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results from the response\n    results = response.json()['results']\n\n    # Iterate through the results to find the TV show \"Sword Art Online\"\n    for result in results:\n        if result['name'] == 'Sword Art Online':\n            tv_id = result['id']\n            break\n\n    # If the TV show \"Sword Art Online\" was found, get the details to find the number of seasons\n    if 'tv_id' in locals():\n        url_season = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n        response_season = requests.get(url_season, headers=headers)\n\n        if response_season.status_code == 200:\n            # Get the number of seasons from the response\n            num_seasons = response_season.json()['number_of_seasons']\n            print(f\"The total number of seasons of Sword Art Online is: {num_seasons}\")\n        else:\n            print(\"Error fetching data for the TV show\")\n    else:\n        print(\"Sword Art Online TV show not found in the search results\")\nelse:\n    print(\"Error searching for TV show\")\n\n```",
        "usage": [
            338,
            7432,
            7770
        ],
        "executed": "The total number of seasons of Sword Art Online is: 4\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "results": "```python\nimport requests\n\n# Define the API url for searching the movie \"We Married as Job\" to get its movie_id\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"We Married as Job\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = response.json()\n\n# Extract the movie_id of \"We Married as Job\" to use in credits API\nmovie_id = search_results['results'][0]['id']\n\n# API url to get credits for the movie with the specified movie_id\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits_info = response.json()\n\n# Check if Yui Aragaki and Gen Hoshino are co-starring in \"We Married as Job\"\nyui_aragaki_in_cast = False\ngen_hoshino_in_cast = False\n\nfor cast_member in credits_info['cast']:\n    if cast_member['name'] == 'Yui Aragaki':\n        yui_aragaki_in_cast = True\n    if cast_member['name'] == 'Gen Hoshino':\n        gen_hoshino_in_cast = True\n\n# Print the result\nif yui_aragaki_in_cast and gen_hoshino_in_cast:\n    print(\"Yui Aragaki and Gen Hoshino are co-starring in 'We Married as Job'.\")\nelse:\n    print(\"Yui Aragaki and Gen Hoshino are not co-starring in 'We Married as Job'.\")\n```",
        "usage": [
            349,
            5941,
            6290
        ],
        "executed": "Yui Aragaki and Gen Hoshino are co-starring in 'We Married as Job'.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "results": "```python\nimport requests\n\n# Set the API key\nAPI_KEY = \"0dba059c7eaca07ebe625974a37ad92\"\n# Set the headers\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\"\n}\n\n# Function to get the director of the movie \"Barbie\"\ndef get_barbie_director():\n    url = \"https://api.themoviedb.org/3/search/movie\"\n    params = {\n        \"query\": \"Barbie\",\n        \"include_adult\": False\n    }\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n    director = None\n    if \"results\" in data and data[\"results\"]:\n        movie_id = data[\"results\"][0][\"id\"]\n        credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n        response = requests.get(credits_url, headers=headers)\n        credits_data = response.json()\n        for crew_member in credits_data[\"crew\"]:\n            if crew_member[\"job\"] == \"Director\":\n                director = crew_member[\"name\"]\n                break\n    return director\n\n# Function to get the lead actor of the TV show \"DEATH NOTE\"\ndef get_death_note_lead_actor():\n    url = \"https://api.themoviedb.org/3/search/tv\"\n    params = {\n        \"query\": \"DEATH NOTE\",\n        \"include_adult\": False\n    }\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n    lead_actor = None\n    if \"results\" in data and data[\"results\"]:\n        tv_id = data[\"results\"][0][\"id\"]\n        credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n        response = requests.get(credits_url, headers=headers)\n        credits_data = response.json()\n        for cast_member in credits_data[\"cast\"]:\n            if cast_member[\"order\"] == 0:  # Assuming lead actor is the first one in the cast list\n                lead_actor = cast_member[\"name\"]\n                break\n    return lead_actor\n\n# Get the director of the movie \"Barbie\"\nbarbie_director = get_barbie_director()\n\n# Get the lead actor of the TV show \"DEATH NOTE\"\ndeath_note_lead_actor = get_death_note_lead_actor()\n\n# Calculate the age difference\n# Assuming the director of the film \"Barbie\" is x years old and the lead actor of the TV show \"DEATH NOTE\" is y years old\n# Assuming age difference = |x - y|\n# We do not have actual birthdates to calculate exact difference\n\nprint(barbie_director, death_note_lead_actor)\n```",
        "usage": [
            569,
            7581,
            8150
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person with the name 'Katherine LaNasa'\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\nparams_search_person = {\n    \"query\": \"Katherine LaNasa\"\n}\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\ndata_search_person = response_search_person.json()\n\n# Get the person id for Katherine LaNasa\nif data_search_person.get('results'):\n    person_id = data_search_person['results'][0]['id']\n\n    # Get the movie credits for Katherine LaNasa\n    url_person_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response_person_movie_credits = requests.get(url_person_movie_credits, headers=headers)\n    data_person_movie_credits = response_person_movie_credits.json()\n\n    # Get the latest movie appearance\n    latest_movie = data_person_movie_credits['cast'][0]\n\n    print(\"Katherine LaNasa's latest movie appearance:\")\n    print(\"Title:\", latest_movie.get('title'))\n    print(\"Character:\", latest_movie.get('character'))\n    print(\"Release Date:\", latest_movie.get('release_date'))\nelse:\n    print(\"No results found for Katherine LaNasa.\")\n```",
        "usage": [
            446,
            8844,
            9290
        ],
        "executed": "Katherine LaNasa's latest movie appearance:\nTitle: Black Karen\nCharacter: Therapist\nRelease Date: 2022-01-23\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "results": "```python\nimport requests\n\n# API key for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movies with the query 'Oppenheimer'\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Oppenheimer\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the poster path of the first movie in the search results\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        movie = data[\"results\"][0]\n        poster_path = movie[\"poster_path\"]\n        if poster_path:\n            # Construct the full image path URL\n            image_url = f\"https://image.tmdb.org/t/p/original{poster_path}\"\n            print(image_url)\n        else:\n            print(\"No cover image found for the movie 'Oppenheimer'.\")\n    else:\n        print(\"No movie found with the title 'Oppenheimer'.\")\nelse:\n    print(\"Error: Failed to retrieve data from the API.\")\n```",
        "usage": [
            396,
            6493,
            6889
        ],
        "executed": "https://image.tmdb.org/t/p/original/8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    }
]