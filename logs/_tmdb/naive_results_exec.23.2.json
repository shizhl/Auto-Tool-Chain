[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url to search for a person\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the parameters for the search query\nparams = {\n    \"query\": \"Sofia Coppola\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Make the GET request to search for a person\nresponse_person = requests.get(url_search_person, headers=headers, params=params)\n\n# Extracting the person_id for Sofia Coppola\nperson_id = None\nif response_person.status_code == 200:\n    data = response_person.json()\n    if data[\"total_results\"] > 0:\n        person_id = data[\"results\"][0][\"id\"]\n\n# If person_id is found, proceed to get movie credits\nif person_id:\n    # Define the API url to get movie credits for a person\n    url_person_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    \n    # Make the GET request to get movie credits for Sofia Coppola\n    response_movie_credits = requests.get(url_person_movie_credits, headers=headers)\n\n    # Count the number of movies directed by Sofia Coppola\n    num_movies_directed = 0\n    if response_movie_credits.status_code == 200:\n        data_movie_credits = response_movie_credits.json()\n        for credit in data_movie_credits[\"crew\"]:\n            if credit[\"job\"] == \"Director\":\n                num_movies_directed += 1\n\n    print(\"Number of movies directed by Sofia Coppola:\", num_movies_directed)\nelse:\n    print(\"Sofia Coppola not found.\")\n```",
        "usage": [
            362,
            10987,
            11349
        ],
        "executed": "Number of movies directed by Sofia Coppola: 14\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie The Dark Knight\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Dark Knight\"\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie id of The Dark Knight\nmovie_id = data[\"results\"][0][\"id\"]\n\n# Get the credits for the movie The Dark Knight\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits_data = response.json()\n\n# Find the lead actor in the cast\nlead_actor = \"\"\nfor actor in credits_data[\"cast\"]:\n    if actor[\"order\"] == 0:  # Assuming lead actor is the first in the list\n        lead_actor = actor[\"name\"]\n        break\n\nprint(f\"The lead actor in the movie The Dark Knight was: {lead_actor}\")\n```",
        "usage": [
            382,
            12175,
            12557
        ],
        "executed": "The lead actor in the movie The Dark Knight was: Christian Bale\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the API key in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the director of the top-1 rated movie\n    top_rated_movie_director = data['results'][0]['credits']['crew'][0]['name']\n    \n    print(f\"The director of the top-1 rated movie is: {top_rated_movie_director}\")\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            334,
            11962,
            12296
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "give me a image for the collection Star Wars",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the query parameters\nparams = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse and print the response\nif response.status_code == 200:\n    data = response.json()\n    if 'results' in data and len(data['results']) > 0:\n        collection_id = data['results'][0]['id']\n        \n        # Now, use the collection ID to get images for the collection Star Wars\n        images_url = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\n        images_response = requests.get(images_url, headers=headers)\n        \n        if images_response.status_code == 200:\n            images_data = images_response.json()\n            print(images_data)\n        else:\n            print(\"Error getting images data for the collection Star Wars\")\n    else:\n        print(\"No collection found for Star Wars\")\nelse:\n    print(\"Error getting collection data for Star Wars\")\n```",
        "usage": [
            418,
            14325,
            14743
        ],
        "executed": "{'id': 10, 'backdrops': [{'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/d8duYyyC9J5T825Hg7grmaabfxQ.jpg', 'vote_average': 5.464, 'vote_count': 32, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 720, 'iso_639_1': None, 'file_path': '/zZDkgOmFMVYpGAkR9Tkxw0CRnxX.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 1280}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/itH1Wlzwf6yTNa7fVkYMVUwXlhR.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/vusuae67ukSLazTnR5Ab8uUZ0dj.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 2160, 'iso_639_1': None, 'file_path': '/jci0IkGpJRwpTx62jDxIFXAt2Sr.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 3840}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/trf3Hi3tPOJARsCBoVMDBlpjPC4.jpg', 'vote_average': 5.376, 'vote_count': 6, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 2160, 'iso_639_1': None, 'file_path': '/iY2ujEY2m68OTTlPFTiHub9joHS.jpg', 'vote_average': 5.33, 'vote_count': 9, 'width': 3840}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/h3JDR9iruHqwGC4Dm8UbYkY9paK.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/benqmUIQGqU7iMYrDl8aUxhXWC.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/sGxcMvC6mfCzEir0c1tldsPhZEF.jpg', 'vote_average': 5.304, 'vote_count': 23, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/noKFlPn2GjuUounuxtmPnkRlZpa.jpg', 'vote_average': 5.266, 'vote_count': 6, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/e9mh9iqVxhon2Y7pkLZ7zItUWHX.jpg', 'vote_average': 5.266, 'vote_count': 5, 'width': 1920}, {'aspect_ratio': 1.779, 'height': 2021, 'iso_639_1': None, 'file_path': '/4z9ijhgEthfRHShoOvMaBlpciXS.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 3596}, {'aspect_ratio': 1.778, 'height': 2160, 'iso_639_1': None, 'file_path': '/eO3PyZbDe7UlkyypMgfHWdeo9VZ.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 3840}, {'aspect_ratio': 1.778, 'height': 720, 'iso_639_1': None, 'file_path': '/qCECROwx3TRUEgoZv2Mz2D723QC.jpg', 'vote_average': 5.252, 'vote_count': 9, 'width': 1280}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/n9NcXAZIurCo9RHvMahOCT244rF.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 2160, 'iso_639_1': None, 'file_path': '/5PqKzRkcPZOsKy1sqAC8IrYkeyc.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 3840}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/9RykAYGe1wbygBAmqNhhtCj99ss.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/bMPfIfBZOUv7c357J8HliYJfpca.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/e2XZ6rbBFYqWB5n5na4GCjljfDM.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 720, 'iso_639_1': None, 'file_path': '/3XwvVWP33yWOqwVlJCSZWC1Uy58.jpg', 'vote_average': 5.244, 'vote_count': 9, 'width': 1280}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/qVPChlozQ1BP3svfHjiAdNneMGA.jpg', 'vote_average': 5.244, 'vote_count': 9, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/gTwXUbylwCBNedCSNrOVKZzLTT8.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/osBSTziJWBaXbK0eTpNnPb5eIi4.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/rgjAb1oUCzJk1U2WhtQt7gGu84U.jpg', 'vote_average': 5.14, 'vote_count': 10, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/uyFHjhN8McyCy9EPaO1MsS3CydT.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/oGf9FeB8coLGYVp3SMHjAR809Lv.jpg', 'vote_average': 4.962, 'vote_count': 11, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': 'it', 'file_path': '/ojMAbHNL0VBXiV2oQpROJ6Xx827.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': 'pt', 'file_path': '/ezt8TqHdwbs1iJhp3PTURDZ3hkh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 2160, 'iso_639_1': 'en', 'file_path': '/kIL3Me1fuwPqYvE26N47bQuLz4a.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 3840}, {'aspect_ratio': 1.778, 'height': 2160, 'iso_639_1': 'de', 'file_path': '/wRrpzewue8QqBYcaIDCHcOFgyGT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 3840}, {'aspect_ratio': 1.778, 'height': 1440, 'iso_639_1': None, 'file_path': '/5T9HNK6EZc0OlFmr6MWfFRse4l8.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2560}, {'aspect_ratio': 1.781, 'height': 842, 'iso_639_1': 'en', 'file_path': '/6hMN4oospeDItQlACbAWkjI7nC9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': 'zh', 'file_path': '/8ojRcy7XVNLI3bR6remPkk2xDJp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 720, 'iso_639_1': 'en', 'file_path': '/k3cZ5ked9bV1xHsmEdOYEZEIRu5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1280}], 'posters': [{'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/gfHJ2GJm44ZY2CO2MaBFYZEjmhy.jpg', 'vote_average': 5.652, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/r8Ph5MYXL04Qzu4QBbq2KjqwtkQ.jpg', 'vote_average': 5.626, 'vote_count': 18, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gq5Wi7i4SF3lo4HHkJasDV95xI9.jpg', 'vote_average': 5.494, 'vote_count': 28, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/22dj38IckjzEEUZwN1tPU5VJ1qq.jpg', 'vote_average': 5.456, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iTQHKziZy9pAAY4hHEDCGPaOvFC.jpg', 'vote_average': 5.406, 'vote_count': 22, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bYbHqvRANCpuRTs0RAu10LhmVKU.jpg', 'vote_average': 5.392, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/6mHkagjziBPth2Mx0VpEercocm4.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/t2sABFPr9ft0bJ6XYdhCPsfooCd.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/suaJuFprbgdZaTE0mOt0xWIGFyQ.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/tdQzRSk4PXX6hzjLcQWHafYtZTI.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/gbaFVZMVL0nUhZLmX3TWNZj8ydE.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/7s98is4MxeDVCxIVrAsfrr50dMm.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/btVpLbQCNE8mDTRrb6Llk5B5pGr.jpg', 'vote_average': 5.334, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2529, 'iso_639_1': 'en', 'file_path': '/pWVLFh4OuejTpUaDQbB1C4zoS2p.jpg', 'vote_average': 5.33, 'vote_count': 9, 'width': 1686}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aSrMJYmQX8kpF26LijkCsYhBMvm.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/8X3WoKnDw9r7SIvM5vx0mpnb2yZ.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 950}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8Li4KawpEa5i2gm5gFSBKmEFtvy.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/y6kKwGLCCy3MMbBdUnxB3afIfsd.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2529, 'iso_639_1': 'en', 'file_path': '/xFnzs2hjiWBgv46XnCdBUToBKED.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1686}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/4QfUvGMaSMoItapTeg51Knf1PiF.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rG8P8pPUDSm02VW3cKtivca4rqE.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jGNtfNeFRmJBIwL1exFteZhedOr.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'sk', 'file_path': '/ojQvEl8rFqJWYIATlDCUtxa1TeV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/fByDz2DSFKR8jugyApmHFUQF1pq.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oFgwvpoPi2Ixcg3YLxQpYhoH1Jm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9cSsr4dqTSqSlUOsbufco2YRrZQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/l9cWYWFwRZNdw0r2gesdDyXTbGx.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/sqYlJCjwdbhxlhbOVK9iMLYUZIF.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/qhEimz49g0r2sQ06Xfb8Hxmfk3T.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/hU6FebQXRKu0bd0VMNa8mTal8Eh.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1999}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cEHz2gnXYZuqNGc8hAy35VgIvbT.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/drr5Td2aWuUR23ckuSOP6DhXBGL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.71, 'height': 2818, 'iso_639_1': None, 'file_path': '/1U4s6OoPoVScNh2xFNfzLMGDu59.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vKeB6QYgi0b7VHHmeJ8JZzC99K8.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/mWU0DuJtl2bOno6kwXs3HZ3abwC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/mLRwi2OQZWT58tOH83ysZWMnhUN.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hf10Oz89bIyrtjKraH849ZCQliM.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/10rGm5WQpXclsqr2T8SFLYWMI0Q.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 2437, 'iso_639_1': 'en', 'file_path': '/knhIHcaUdLExfdksyvcIEssbJzT.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1624}, {'aspect_ratio': 0.666, 'height': 2437, 'iso_639_1': 'en', 'file_path': '/nH3TpzQOPtnqauB8kntTnljBIns.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1624}, {'aspect_ratio': 0.666, 'height': 2437, 'iso_639_1': 'en', 'file_path': '/4b3V0P5hpUHTM8ggfQQFFqKe5lc.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1624}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/kX5kXDAemzVv7yHezufeHDDGHkl.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'da', 'file_path': '/gP2aT6rwtjzGI8HapE4mNehaoZL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/nMqQzmePEvjVcQZxKC38nS9Dqvh.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/b8FzGmDRm8E1revfJGLbJb33BkO.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/6yAb4kFTkm3R2qRk5uvSF2Hr7Nf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/mEpQbsUSekbQRdffXMeQWjeHb34.jpg', 'vote_average': 5.31, 'vote_count': 24, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/aLDdG5e3c2qNMcWzlxAnW15okOr.jpg', 'vote_average': 5.29, 'vote_count': 11, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bLPTI0236VjeBhcycu2wUwNSXGv.jpg', 'vote_average': 5.276, 'vote_count': 12, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/z37SuzzQZawvdBmtYcQWxriQmCK.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/fYWbvEBCLHWPHo0QZt6o7dKBSLP.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/drJ1vvVlwr5bmH9ssOl1m37q3Lc.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ww4rH6EQ3610fBNuZBdIL9hSYkE.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/fI9R8fkW21fv0HDrwNnM3PZhgN.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/lYFNh6yeYWTPgg0qvnZMKKA8RS1.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/v3e56rck9tv8zeMuNldJdtpgFeQ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/dcVdgUBO8lpuKpH7GzeyeqjSO0l.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/wRBGET9QNCOQJY55yAA1ZyF6cCb.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1000, 'iso_639_1': 'es', 'file_path': '/qJNGWrKB3Bnshc1iuedpxXbVQMe.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 666}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'es', 'file_path': '/tGKRoZprIpJXFNvOtWu93KfWYIk.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'fr', 'file_path': '/ufEdffeQOl8oTDHrBh34cDZtuZl.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'fr', 'file_path': '/ikiFMVGhCePycr7MQQd8FufPh1F.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/46oFAcjORMltwPxR6uU6hM4mN7F.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/5gmlZYd76FPrc8zLNVDEDVQL9fh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/wCRLEnMHmMLiQ6ixs8lbggLeNq4.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.75, 'height': 1200, 'iso_639_1': 'fr', 'file_path': '/mWAfAZVaw9mOOFEpaPwJHRENPza.jpg', 'vote_average': 5.206, 'vote_count': 11, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/7TOaabZ4TFqtn8cD1Jw1G7ycgSs.jpg', 'vote_average': 5.202, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/zwFQlQZYf6Zh6FncP76okjFZZfh.jpg', 'vote_average': 5.202, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/kVstTGhkSsILxxIUYIEGmlaYTFe.jpg', 'vote_average': 5.182, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/k6SPwdWi1m3p2JhoYn2KhRgZgEx.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 997, 'iso_639_1': 'uk', 'file_path': '/juoqZnVARJhZn5UjRodl6rVHXHY.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 664}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/58CAUPUgoTTA1LuesMrM5CbpcuW.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/defdE4jKZSBJ4DxdmOtYnLz8Qj7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/lBdOIyD5rOJA34qiDi3yrZqdbg7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/pKLFj7UNEcsRJxV69xmq6BB2i9s.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/t06usnuvImXwTa92SHoAkMEn8v2.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/y8T6UdWBPSG878n2sZiddx9vWER.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/aWxzsGF7PaZKR77F7SXkTc6npP1.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.681, 'height': 1240, 'iso_639_1': 'fr', 'file_path': '/jVTIJ33eGKja0SfI40ntASPBmnw.jpg', 'vote_average': 5.162, 'vote_count': 5, 'width': 844}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/xAwL3ySFqWHYjpqXlQQXcbWCoII.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.715, 'height': 1437, 'iso_639_1': 'ru', 'file_path': '/me843ySolO7vwJqQcJ6OUbcRM3H.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1027}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'fr', 'file_path': '/4B4OwAiu0xhOLI0p1AWBifG3qPE.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4gsn3sBxH3Owx1Id7lTYkW52524.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/xwsYa1wA9EB9ibW1stJZpqHznKY.jpg', 'vote_average': 5.058, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/dLBoWkfIbEQRAYiXdB2uMXAqFoT.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/y6oGacKFP025f0PVwG94X60jjQS.jpg', 'vote_average': 5.054, 'vote_count': 15, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/klv4rvIxnyJcZAI3DFvW5gHTSpM.jpg', 'vote_average': 5.004, 'vote_count': 10, 'width': 1000}, {'aspect_ratio': 0.71, 'height': 2818, 'iso_639_1': 'zh', 'file_path': '/mttbNMFuyXvZJpSAdGqoolk69uk.jpg', 'vote_average': 4.866, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/qgnOC2T0kmxWOS32SKGsbtxSvN6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.664, 'height': 1084, 'iso_639_1': 'en', 'file_path': '/gZPLydtYmniGwP4zoxTnP47yWnu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/6EvyuI0XpL7JopXTE72FsgM5d47.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/3JacSFXvk9AbCjz0nTdHMkDwTTH.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/18ticQ3bpUUGZGCR3pGglrz7ly0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/hCxhxuc5or4ZKtiwQDmWBUN7Xbr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/vGkiaAWM6B0bFyz2aW3fSRSM8cH.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/oG2xkP2Kwkrn3C8dyqyRXMOEx50.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/pYOArjBUvtPBsuWTIE58lQTrDwn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/ajd1f8pX1JcYZBrxbAVm3l53TJ7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1481, 'iso_639_1': 'en', 'file_path': '/lGM4SPc5MtQDUTz6M18aVTEjy7Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2400, 'iso_639_1': 'en', 'file_path': '/q2FanXsFtdrOsrGplVtOg7oFrc3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1600}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8EjZLn7SZ9fG6l2anOJwB8u6prb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/27d091mfAQ7PJ0TrZaglWPzm0va.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/v4dUG5ujNR63UbEDfSDZ3KaINlh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/nf3N6GphVFJCTUdlb4nQyxgFk7T.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/yvQdymDQiTYHLsE7qv41liZ7auy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/zVEJCIguJkxSFaQZSSFMq6l2Vq3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/sJ0zFbzrTAG3riisqLuhF8WcM45.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9m4sVAYCZcxdJR3D4xAbLZE7PuE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/y2SNPwLT9zdZjJQRVX7T5u8mko7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/z9QaA7oszDSY0jLgv0mDkYF7u8M.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/hpwpPOuuAuSadR2BNSKKAz9aD9O.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1762, 'iso_639_1': 'en', 'file_path': '/p8PPWEfm30i9pIcbu5fXQBcTi5L.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1174}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'en', 'file_path': '/bH5tGEuQexH0bt4ruobaquxv7U4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.711, 'height': 750, 'iso_639_1': 'el', 'file_path': '/j0m8uIWawPibEAzYdlf0t7GRzJs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 533}, {'aspect_ratio': 0.667, 'height': 1024, 'iso_639_1': 'en', 'file_path': '/6Rj64rPRrzoN0Dm7UQdW36YwuIi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 683}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'es', 'file_path': '/mUk8Byi4ZkT9Wt5NPkjCXwrV5FP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/fD8QxkMfIRtEBvpNMUCi3NYLbtc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/mwcBF8UlkRO7O3N4fPpQX98kxrN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/sYxKQMKQ4aX7LZW4mEv7V8bOp9e.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/uiUqpCjyZOEeb1DJHSjlyyCBkT0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.71, 'height': 2818, 'iso_639_1': 'cs', 'file_path': '/9fI5hioAJrj02h0J9879zLhUesh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cs', 'file_path': '/1wFBiObLTenV5F8ybngRYBP8OMi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2529, 'iso_639_1': 'bg', 'file_path': '/rltyPUOCL2xM5qB6KfD62qDdr73.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1686}]}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ]
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url to get the company ID for Walt Disney\nurl = \"https://api.themoviedb.org/3/search/company\"\nparams = {\n    \"query\": \"Walt Disney\"\n}\n# Make a GET request to search for the company\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the company ID for Walt Disney\n    company_id = response.json()[\"results\"][0][\"id\"]\n\n    # Set the API url to get the logo of the company using the company ID\n    url_logo = f\"https://api.themoviedb.org/3/company/{company_id}/images\"\n    # Make a GET request to get the logo of the company\n    response_logo = requests.get(url_logo, headers=headers)\n\n    # Check if the request for logo was successful\n    if response_logo.status_code == 200:\n        # Get the logo path of the company (Walt Disney)\n        logo_path = response_logo.json()[\"logos\"][0][\"file_path\"]\n        print(f\"The logo of Walt Disney: https://image.tmdb.org/t/p/original{logo_path}\")\n    else:\n        print(\"Failed to fetch logo data\")\nelse:\n    print(\"Failed to fetch company data\")\n```",
        "usage": [
            276,
            11036,
            11312
        ],
        "executed": "The logo of Walt Disney: https://image.tmdb.org/t/p/original/rRGi5UkwvdOPSfr5Xf42RZUsYgd.png\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie Titanic\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the cast and crew of Titanic\nif search_results.get(\"results\"):\n    movie_id = search_results[\"results\"][0][\"id\"]\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    cast_crew = credits_response.json()\n\n    # Extract the lead actor details\n    if cast_crew.get(\"cast\"):\n        for cast_member in cast_crew[\"cast\"]:\n            if cast_member[\"order\"] == 0:  # Assuming lead actor is the first in the cast list\n                lead_actor_name = cast_member[\"name\"]\n                lead_actor_profile_path = cast_member[\"profile_path\"]\n                print(\"Lead Actor of Titanic:\")\n                print(f\"Name: {lead_actor_name}\")\n                if lead_actor_profile_path:\n                    print(f\"Profile Image: https://image.tmdb.org/t/p/w200/{lead_actor_profile_path}\")\n                else:\n                    print(\"Profile Image: Not Available\")\n                break\n    else:\n        print(\"Lead Actor information not found.\")\nelse:\n    print(\"Movie Titanic not found.\")\n```",
        "usage": [
            488,
            11519,
            12007
        ],
        "executed": "Lead Actor of Titanic:\nName: Leonardo DiCaprio\nProfile Image: https://image.tmdb.org/t/p/w200//wo2hJpn04vbtmh0B9utCFdsQhxM.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movies similar to Titanic\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\nresult_search_movie = response_search_movie.json()\n\n# Get the first similar movie id\nif result_search_movie['total_results'] > 0:\n    similar_movie_id = result_search_movie['results'][0]['id']\n\n    # Get the reviews of the first similar movie\n    url_reviews = f\"https://api.themoviedb.org/3/movie/{similar_movie_id}/reviews\"\n    params_reviews = {\n        \"page\": 1\n    }\n    response_reviews = requests.get(url_reviews, headers=headers, params=params_reviews)\n    reviews = response_reviews.json()['results']\n\n    print(reviews)\nelse:\n    print(\"No similar movies found\")\n```",
        "usage": [
            391,
            10261,
            10652
        ],
        "executed": "[{'author': 'John Chard', 'author_details': {'name': '', 'username': 'John Chard', 'avatar_path': '/utEXl2EDiXBK6f41wCLsvprvMg4.jpg', 'rating': 9.0}, 'content': \"Beautiful Romance - Tragedy Unbound.\\r\\n\\r\\nIt has kind of become the popular thing to kick Titanic, the film and its achievements. It's like the love it garnered on release and the colossal waves it made in the history of cinema, never happened, or as some want you to believe, doesn't matter. I can tell you now that many of my macho fuelled friends will privately, under the influence of liquid refreshments, admit to having affection for the film, but socially in a circle environment? Not a bit of it! I have no such problems admitting my love for the film, I love it as much now as I approach 50, as I did when I sat there in awe at the cinema in 1997.\\r\\n\\r\\nYou jump - I jump.\\r\\n\\r\\nTitanic is far from flawless, where even now with the advancements in technology the effects over 15 years later look a touch creaky. While it's true as well that away from Rose and Jack the characterisations are thin on the ground. But this is Rose and Jack's story, fully fleshed out for an hour and half and then framed by the terrible tragedy that unfolds for the next hour and half. The tie-in to the present day is superbly constructed by James Cameron - the search for the diamond - the real life filming of the Titanic wreckage - and the flashback telling of the story by a delightful Gloria Stuart as old Rose, and the sinking of the ship and its aftermath is stunning and heart breaking in equal measure.\\r\\n\\r\\nNever let go.\\r\\n\\r\\nSo may scenes and dialogue exchanges stay in the memory for ever. The band playing on, the captain awaiting his fate, the mother ushering her children to sleep before the sea comes to take them, the old boy drinking his brandy as the water rushes in, or just Jack and Rose, polar opposites in society's class structure, making love, making art or just professing that neither will ever let go. It's what makes Titanic the wonderful piece of cinema it is, where beauty and tragedy merge to create something forever memorable. A film that deserved all the accolades and cash till ringing that it once did have. 9/10\", 'created_at': '2014-09-25T23:52:44.706Z', 'id': '5424aaccc3a36808760043df', 'updated_at': '2021-06-23T15:57:28.766Z', 'url': 'https://www.themoviedb.org/review/5424aaccc3a36808760043df'}, {'author': 'CinemaSerf', 'author_details': {'name': 'CinemaSerf', 'username': 'Geronimo1967', 'avatar_path': '/1kks3YnVkpyQxzw36CObFPvhL5f.jpg', 'rating': 7.0}, 'content': 'Set around the ill-fated maiden voyage of the RMS \"Titanic\", this is essentially a film in two parts. The first, weaker, element features a young \"Dawson\" (Leonardo DiCaprio) who wins a third class ticket to New York on the soon to depart liner. Meantime, the wealthy but unhappy \"Rose\" (Kate Winslet) is up in the posh cabins with her cold and unfeeling fianc\u00e9e \"Hockley\" (Billy Zane) and her equally unpleasant, venally ambitious mother \"Ruth\" (Frances Fisher). Desperately unhappy, \"Rose\" considers jumping off the prow of the boat, but luckily the charming young \"Dawson\" is on hand to talk her down, and so begins their friendship that causes much chagrin amongst her socially elite companions. That friendship culminates in him making a rather provocative drawing of her, the final straw for her boyfriend and his enforcer \"Lovejoy\" (David Warner). It all looks ominous for both until - part two begins. The ship, speeding along nicely under the command of Bernard Hill\\'s Captain Smith clips the underwater part of an iceberg and now history takes over. James Cameron offers us a purely speculative account of what might have happened as the initially incredulous crew start to realise that maybe it is not just Molly Brown (an excellent Kathy Bates) that\\'s unsinkable! What now ensues are a series of well staged scenarios depicting panic, fear, a fair degree of selfishness and some proper stiff upper lips as the ship has be evacuated and the segregation of the passengers and competencies of the crew start to become life threatening. The visual effects have dated, the smoke from the ship\\'s funnels blows in an strangely symmetrical fashion and the later scenes struggle to convince - but this is really a rather tragic love story with a strong chemistry between the engaging two characters at the top of the bill, and an effective performance from the older \"Rose\" (Gloria Stewart) who takes on the role of narrator 80 years after the disaster. I still find it uncomfortable to watch the actuality of the wreck, which features occasionally throughout the film - I feel like I am quite literally walking through someone\\'s grave; but it does lend a potent hook upon which this lengthy, but well thought out and constructed drama is presented. Criticisms have been made of it\\'s factual inaccuracies, and it may well play a bit fast and loose with some of the real characterisations - but it\\'s a drama, and to be enjoyed has to be appreciated in that sphere. Big screen is a must, it really does lose a great deal on a television.', 'created_at': '2022-06-08T11:59:42.608Z', 'id': '62a08f2e12197e565ea45214', 'updated_at': '2022-06-08T11:59:42.608Z', 'url': 'https://www.themoviedb.org/review/62a08f2e12197e565ea45214'}, {'author': 'Antoine53', 'author_details': {'name': '', 'username': 'Antoine53', 'avatar_path': None, 'rating': None}, 'content': 'Awesome', 'created_at': '2023-01-17T14:01:51.580Z', 'id': '63c6aa4f66ae4d0085cb704a', 'updated_at': '2023-01-17T15:17:41.173Z', 'url': 'https://www.themoviedb.org/review/63c6aa4f66ae4d0085cb704a'}, {'author': 'Nathan', 'author_details': {'name': 'Nathan', 'username': 'TitanGusang', 'avatar_path': '/yHGV91jVzmqpFOtRSHF0avBZmPm.jpg', 'rating': 10.0}, 'content': \"Titanic is simply a masterpiece. This movie has it all. A tremendous score, deep emotion emphasized by fantastic performances, and incredibly gripping and high-stakes action. There is really something for everyone here.\\r\\n\\r\\nBefore I continue my praise of the film, I think it has one glaring weakness: the present-day plot. For me, this just did not work all that well. I understand that it was implemented for the main story to have a more emotional impact, but it was not needed. It added almost thirty minutes to the runtime, which could have been used for more character development in the story or to have a more streamlined plot. Not to mention, the acting in this section was lackluster. That might be a hot take, but it was something that I noticed during my watch.\\r\\n\\r\\nBack to the positives. The score is magnificent here. The minute I finished the film, I had an urge to put on this score to be transported back to the Titanic. That does not happen very often to me.\\r\\n\\r\\nThe performances are great all around. Leonardo DiCaprio and Kate Winslet's chemistry was perfect. They played off each other so well and really sold this emphatic and rapid love the two shared. The movie spends a lot of time building their relationship and the payoff at the end is worth every second. Billy Zane was an over-the-top asshole, and even though it was cheesy at times, it worked for me. The other ancillary cast members did well, including Kathy Bates, Frances Fisher and Bill Paxton.\\r\\n\\r\\nThis film is really two movies put into one and both of them work excellently. The first half is a charming and cute love story that spends a lot of time on character development, laying the background for motivations and personalities. While this half may have been my favorite, it is slightly outdone by the second half, which is a gripping and suspenseful survival action story. This section is brutal, showing large scale panic and hysteria while also having some incredibly horrific deaths. The chaos was infectious and very scary to watch. Both halves create a great sense of emotion in the audience and complement each other very well.\\r\\n\\r\\nOverall, this movie had twenty-five years of hype and critical acclaim to live up to, and I am happy to say it passed expectations. Since leaving the theater, I cannot stop thinking about it.\\r\\n\\r\\nScore: 96% |\\r\\nVerdict: Masterpiece\\r\\n\\r\\nOn a side note: I did see this movie in 3D during the twenty-five-anniversary re-release. While it was great to see it remastered in 4K, I do think the 3D was poor and unneeded. This did not affect my grade however, since it was not originally designed as a 3D experience, and they 3D did not really take away for my enjoyment.\", 'created_at': '2023-02-17T14:01:29.311Z', 'id': '63ef88b95cc11d0086123924', 'updated_at': '2023-02-17T14:01:29.411Z', 'url': 'https://www.themoviedb.org/review/63ef88b95cc11d0086123924'}, {'author': 'Prodank', 'author_details': {'name': '', 'username': 'Prodank', 'avatar_path': '/d8FdQJGfhs5zAQC95GvxvpkVv5p.jpg', 'rating': 7.0}, 'content': \"Titanic was enjoyable initially, but the constant TV reruns got old fast. I don't even own a TV anymore, and I'm in no hurry to watch it again. Still, it's a good movie, deserving of a 7/10 rating.\", 'created_at': '2023-09-17T05:09:03.291Z', 'id': '650689effa27f4010c4a62ad', 'updated_at': '2023-09-18T15:40:43.196Z', 'url': 'https://www.themoviedb.org/review/650689effa27f4010c4a62ad'}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ]
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the API url for movie recommendations based on movie id\nurl = \"https://api.themoviedb.org/3/movie/597/recommendations\"  # Titanic movie id is 597\n\n# Define parameters for the API request\nparams = {\n    \"page\": 1\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the recommended movies from the response\n    recommended_movies = response.json()[\"results\"]\n    \n    # Extract the titles of recommended movies\n    recommended_titles = [movie[\"title\"] for movie in recommended_movies]\n    \n    print(recommended_titles)\n\nelse:\n    print(\"Failed to retrieve movie recommendations\")  # Print an error message if the request was not successful\n```",
        "usage": [
            356,
            10547,
            10903
        ],
        "executed": "[\"Harry Potter and the Philosopher's Stone\", 'The Wolf of Wall Street', 'Suicide Squad', 'Shutter Island', 'Avatar', 'Romeo + Juliet', 'Forrest Gump', 'The Lord of the Rings: The Two Towers', 'Toy Story', 'Batman Begins', 'Pirates of the Caribbean: The Curse of the Black Pearl', 'The Revenant', 'Kick-Ass', 'Men in Black', 'Twilight', 'Catch Me If You Can', 'Inception', 'The Shawshank Redemption', 'Thor', 'Finding Nemo', 'The Lord of the Rings: The Fellowship of the Ring']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the latest movie details\nresponse = requests.get(\"https://api.themoviedb.org/3/movie/latest\", headers=headers)\ndata = response.json()\n\n# Get the movie title and director\nlatest_movie_title = data.get('title', 'Unknown')\ndirector = None\nif data.get('production_companies'):\n    for company in data['production_companies']:\n        if company.get('name') == 'Christopher Nolan':\n            director = company.get('name')\n            break\n\n# Print the latest movie directed by Christopher Nolan\nprint(f\"The latest movie directed by Christopher Nolan is: {latest_movie_title} (Director: {director})\")\n```",
        "usage": [
            316,
            13450,
            13766
        ],
        "executed": "The latest movie directed by Christopher Nolan is: Overdue (Director: None)\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the highest rated movie directed by Martin Scorsese\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\"query\": \"Martin Scorsese\", \"include_adult\": \"false\", \"region\": \"US\"}\n\nresponse = requests.get(url, headers=headers, params=params)\nresult = response.json()\n\n# Get the person id for Martin Scorsese\nperson_id = result[\"results\"][0][\"id\"]\n\n# Get the movie credits for Martin Scorsese\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(url, headers=headers)\nmovie_credits = response.json()\n\n# Find the highest rated movie directed by Martin Scorsese\nhighest_rated_movie = None\nhighest_rating = 0.0\nfor movie in movie_credits[\"cast\"]:\n    if movie[\"vote_average\"] > highest_rating:\n        highest_rating = movie[\"vote_average\"]\n        highest_rated_movie = movie\n\n# Print the highest rated movie\nprint(\"The highest rated movie directed by Martin Scorsese is:\")\nprint(highest_rated_movie[\"title\"])\n```",
        "usage": [
            424,
            12221,
            12645
        ],
        "executed": "The highest rated movie directed by Martin Scorsese is:\nRaging Bull: Before the Fight\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Leonardo DiCaprio's latest movie\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nperson_params = {\n    \"query\": \"Leonardo DiCaprio\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse = requests.get(person_search_url, headers=headers, params=person_params)\nperson_data = response.json()\n\nif 'results' in person_data and len(person_data['results']) > 0:\n    # Get the latest movie of Leonardo DiCaprio\n    person_id = person_data['results'][0]['id']\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    movie_credits_params = {}\n    response = requests.get(movie_credits_url, headers=headers, params=movie_credits_params)\n    movie_credits_data = response.json()\n\n    if 'cast' in movie_credits_data:\n        # Assuming the latest movie is the first in the list\n        latest_movie = movie_credits_data['cast'][0]\n\n        # Getting the director of the latest movie\n        movie_id = latest_movie['id']\n        movie_credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n        response = requests.get(movie_credits_url, headers=headers)\n        movie_credits_data = response.json()\n\n        for crew_member in movie_credits_data.get('crew', []):\n            if crew_member.get('job') == 'Director':\n                director_name = crew_member.get('name')\n                print(f\"The director of Leonardo DiCaprio's latest movie is: {director_name}\")\n                break\n        else:\n            print(\"Director information not found.\")\n    else:\n        print(\"No movie credits found for Leonardo DiCaprio.\")\nelse:\n    print(\"No results found for Leonardo DiCaprio.\")\n```",
        "usage": [
            580,
            12462,
            13042
        ],
        "executed": "The director of Leonardo DiCaprio's latest movie is: Baz Luhrmann\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person named 'Catherine Hardwicke'\nparams = {\n    \"query\": \"Catherine Hardwicke\",\n    \"include_adult\": False\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\nperson_id = response.json()['results'][0]['id']\n\n# Get the TV show credits for the person\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\", headers=headers)\ntv_credits = response.json()['cast']\n\n# Iterate through the TV show credits to find the most recent one directed by Catherine Hardwicke\nrecent_show = None\nfor credit in tv_credits:\n    if 'director' in credit.values():\n        recent_show = credit\n        break\n\nprint(recent_show)\n```",
        "usage": [
            362,
            11648,
            12010
        ],
        "executed": "None\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for TV shows similar to Breaking Bad\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the query parameter to search for TV shows similar to Breaking Bad\nquery = \"Breaking Bad\"\n\n# Define the parameters for the API request\nparams = {\n    \"query\": query,\n    \"include_adult\": False,  # Exclude adult content\n    \"page\": 1,  # Get results from the first page\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    data = response.json()\n    results = data.get('results', [])\n    \n    # Extract the list of TV shows similar to Breaking Bad\n    similar_shows = []\n    for show in results:\n        similar_shows.append(show['name'])\n\n    print(similar_shows)\nelse:\n    print(\"Error occurred during API request\")\n```",
        "usage": [
            218,
            12686,
            12904
        ],
        "executed": "['Breaking Bad', 'Breaking Bad Fortune Teller']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url to get the daily trending movies\nurl = \"https://api.themoviedb.org/3/trending/movie/day\"\n\n# HTTP headers containing authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Get the response json data\ndata = response.json()\n\n# Get the movie id of the most trending movie\nmovie_id = data.get('results')[0].get('id')\n\n# Define the API url to get the movie details by id\nurl_movie = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n\n# Send the GET request to the movie details API\nresponse_movie = requests.get(url_movie, headers=headers)\n\n# Get the movie details json data\ndata_movie = response_movie.json()\n\n# Get the director of the movie\ncrew = data_movie.get('credits').get('crew')\ndirector = [member.get('name') for member in crew if member.get('job') == 'Director']\ndirector_name = director[0] if director else \"Director not found\"\n\nprint(f\"The director of today's most trending movie is: {director_name}\")\n```",
        "usage": [
            411,
            11313,
            11724
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the header with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Twilight\" to get its id\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Twilight\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ntwilight_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the movie details including the crew\nmovie_url = f\"https://api.themoviedb.org/3/movie/{twilight_id}\"\nresponse = requests.get(movie_url, headers=headers)\ncrew = response.json()[\"credits\"][\"crew\"]\n\n# Find the director in the crew list\ndirector = \"\"\nfor member in crew:\n    if member[\"job\"] == \"Director\":\n        director = member[\"name\"]\n        break\n\n# Output the director of the movie \"Twilight\"\nprint(director)\n```",
        "usage": [
            355,
            11965,
            12320
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/98147/season/1/episode/2/images\"\n\n# Add the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the image data from the response\n    image_data = response.json()\n    \n    # Print the image file path of the photo belonging to the second episode of the first season of the Witcher\n    print(\"Image file path:\", image_data['stills'][0]['file_path'])\nelse:\n    print(\"Error: Unable to fetch data from the API\")\n```",
        "usage": [
            328,
            11363,
            11691
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "What is top-1 rated movie?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Provide the API url for getting the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Set the parameters for the request\nparams = {\n    \"page\": 1,  # Specify the page to query\n    \"region\": \"US\"  # Specify the region to filter release dates\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the movie data from the response\n    movie_data = response.json()\n    \n    # Get the top-1 rated movie from the list of results\n    top_rated_movie = movie_data[\"results\"][0][\"title\"]\n    print(f\"The top-1 rated movie is: {top_rated_movie}\")\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            197,
            12094,
            12291
        ],
        "executed": "The top-1 rated movie is: The Shawshank Redemption\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the provided Authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Matrix\"\nquery = \"The Matrix\"\nparams = {'query': query}\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nresponse = requests.get(search_url, headers=headers, params=params)\nmovie_id = response.json()['results'][0]['id']\n\n# Get the release date for the movie\nrelease_date_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\nresponse = requests.get(release_date_url, headers=headers)\nrelease_dates = response.json()['results']\nfor release in release_dates:\n    if release['iso_3166_1'] == 'US': # Assuming we want the release date for the US\n        release_date = release['release_dates'][0]['release_date']\n        break\n\nprint(\"The release date of the movie 'The Matrix' is:\", release_date)\n```",
        "usage": [
            368,
            11897,
            12265
        ],
        "executed": "The release date of the movie 'The Matrix' is: 1999-03-24T00:00:00.000Z\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "Who is the most popular person?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API endpoint for getting the list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    # Finding the most popular person\n    popular_people = data['results']\n    most_popular_person = max(popular_people, key=lambda x: x['popularity'])\n    \n    # Getting the name of the most popular person\n    most_popular_person_name = most_popular_person['name']\n    print(\"The most popular person is:\", most_popular_person_name)\nelse:\n    print(\"Error occurred while fetching data\")\n```  ",
        "usage": [
            328,
            10474,
            10802
        ],
        "executed": "The most popular person is: Jason Statham\n",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Christopher Nolan\nsearch_params = {\n    \"query\": \"Christopher Nolan\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Call the API to search for people\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=search_params)\nsearch_results = response.json()\n\n# Get the person id of Christopher Nolan\nperson_id = search_results[\"results\"][0][\"id\"]\n\n# Get the movie credits of Christopher Nolan\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovie_credits = response.json()\n\n# Get the list of movie IDs directed by Christopher Nolan\nmovie_ids = [result[\"id\"] for result in movie_credits[\"crew\"] if result[\"job\"] == \"Director\"]\n\ncover_images = []\n\n# Get cover images of movies directed by Christopher Nolan\nfor movie_id in movie_ids:\n    images_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n    response = requests.get(images_url, headers=headers)\n    images = response.json()\n    if \"posters\" in images:\n        cover_images.extend(images[\"posters\"])\n\nprint(cover_images)\n```",
        "usage": [
            459,
            12225,
            12684
        ],
        "executed": "[{'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gEU2QniE6E77NI6lCU6MxlNBvIx.jpg', 'vote_average': 5.728, 'vote_count': 39, 'width': 2000}, {'aspect_ratio': 0.668, 'height': 1124, 'iso_639_1': 'en', 'file_path': '/mS4EvhsrT0SQZOlWrQEzWI5KiUa.jpg', 'vote_average': 6.026, 'vote_count': 33, 'width': 751}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/bzONet3OeCTz5q9WOkGjVpOHMSR.jpg', 'vote_average': 5.638, 'vote_count': 12, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/iawqQdFKI7yTUoSkDNP8gyV3J3r.jpg', 'vote_average': 5.634, 'vote_count': 14, 'width': 2000}, {'aspect_ratio': 0.707, 'height': 2829, 'iso_639_1': 'en', 'file_path': '/fX44bgxKQsS4P4ewb2iotHveEkn.jpg', 'vote_average': 5.588, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/nrSaXF39nDfAAeLKksRCyvSzI2a.jpg', 'vote_average': 5.586, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/1pnigkWWy8W032o9TKDneBa3eVK.jpg', 'vote_average': 5.522, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/9d1sCoMSGJZtghS2X9us1h9u8lW.jpg', 'vote_average': 5.522, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/nCbkOyOMTEwlEV0LtCOvCnwEONA.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cBuvBJMhdZl85v4wRKDmEZ7Qd9B.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4pWbfjzUkusGXAZQoduARaI0qu2.jpg', 'vote_average': 5.394, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'be', 'file_path': '/rPrqBqZLl8m6sUQmZCchqW7IEYo.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/iolc5VLP4PFU0XvjTVRiCb80mUR.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/xbiycuc84TrieEWwkkuH2hoEa9S.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.75, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/8ATtOkzbQ315u5muIlAxtCZESOf.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 750}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/yQvGrMoipbRoddT0ZR8tPoR7NfX.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7uCL4gbdmokTWyeYbJxwBo5pbVT.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/fb9VcK7aCI2z4kH5nXjBKkEUVEu.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/v7Iib57HHgSEI9B7XYRF6qrs11T.jpg', 'vote_average': 5.36, 'vote_count': 27, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/9PTvvflydmTnfvMWMAwMMkV7X2s.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2304, 'iso_639_1': 'en', 'file_path': '/vRJ1ScAJUDeTxuBv5cX45fDD0I0.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1536}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/6KiSSndIMLj1swkpPNq2lYppDVQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.692, 'height': 1228, 'iso_639_1': 'bg', 'file_path': '/omKeIQBr8oiW3MikuoGPQ6z55EG.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 850}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/tYaC23U62BOJRNVIlFGT6iowEwj.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ja', 'file_path': '/rgoNKrN5oEWIpfM6ZSPORbB2NYf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/zDNAeWU0PxKolEX1D8Vn1qWhGjH.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 734}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/jM4VN1IFD2R1ElpqT3T0bt08uJt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 734}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/2mRRFbnMPMSh4ZiRdiAK0q303Nm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 2963, 'iso_639_1': 'he', 'file_path': '/dyUA5G7hmMOlBfa7yzAl0Zolynr.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/uODkRJ68CQN2uiHksyGXNPTYVuN.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/q6KI8ChlkIYYZww8C053cVfPQRo.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'de', 'file_path': '/hHdhfkkzt0Mwec33Ux177Z7CO8w.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/s7r8IkdbFP42sYhHhyPRnySmqCD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/674XbyJKOO7z5ds6ddR6uAmoThU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 951}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/wM0PSFUYHcFLEguYNjn3RDOEKtt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2157, 'iso_639_1': 'en', 'file_path': '/yCKxTlmPNQBoAl5qlHfn0GHMLjV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1439}, {'aspect_ratio': 0.667, 'height': 1242, 'iso_639_1': 'en', 'file_path': '/nvA7SLPXtuI3kG1ViXb5r8v8581.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 828}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/wATQX43h29TojNIbcwLuPg7OPqi.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zrwNvkdYXrgFea41AxhJhIKopov.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2304, 'iso_639_1': 'en', 'file_path': '/jWmRKnYYoIXfsiNuQVr7iB1DE6h.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1536}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/7fEFzWmCy6rV2gDl0uhz9smCQDS.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/vReLRjDV9XPhiOSEW7QWow4DXwf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 790, 'iso_639_1': 'en', 'file_path': '/fZYl4hG1Xve39hqeEN7q6UJsWPF.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 527}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/6ricSDD83BClJsFdGB6x7cM0MFQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2829, 'iso_639_1': 'it', 'file_path': '/fD5OfSm5aMEKlFpYp9jbGP8IxuU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1886}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/mQNr5d0ypstgJ6X0umnaJWoPdH4.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/th5UkDLIa7yyma9UYDAWaIgDh6z.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1667}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/bMKiLh0mES4Uiococ240lbbTGXQ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/fbUwSqYIP0isCiJXey3staY3DNn.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'tr', 'file_path': '/y1TKElkgWOl90iFik3GHlgJdphm.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/9rSeLJx4k1TaIUlPa4gwZK6tBxl.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/mR2OK5aK5kMOdAQYfc5kkOg06Pn.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/pOQfDNjk22UhTrAGwwN8Nwz7cyj.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/h7zAAbQ0rtEteSEQf7HklyizBg5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/j5AiH1Ez0b0RCjI2MTMvSDgkyXP.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1012}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/7HEYmKkuWHya4WTGhkqCjSfokAv.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1013}, {'aspect_ratio': 0.704, 'height': 2840, 'iso_639_1': 'de', 'file_path': '/lckRcubpItGlnO1v60clysNirme.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/eloxVOLxwOCPSzv1MFO2SuJYtrH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/7v5cRygVR8hqiAUP1a9IXdV3NUB.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/3c95G7trDKHahCYKMekCXjeacdh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ka', 'file_path': '/18Whj5cKOeAH01da7PLHDvKC76S.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1104, 'iso_639_1': 'en', 'file_path': '/cA5TGzNpwxhLGeAELmWHB5klcvN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 736}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xrgBLpPMXWXKdyj5r36RVfmkRdb.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/990DWuNkoVgvzu8meLQO1WwTHHQ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/e1pkIN4dPjug8rk75BRVukyIXAn.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/p6wYy2mUsOwi4TalNAk46ft4sVJ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/5qhJeFztZ2N31T7TvG7j6M1sOtj.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1125, 'iso_639_1': 'zh', 'file_path': '/7z0QoRia9Tknxe1R1vz7jwkzUrm.jpg', 'vote_average': 5.18, 'vote_count': 18, 'width': 750}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/8YZZMKVoc05O8mWdwzKMGhtM4m.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 734}, {'aspect_ratio': 0.736, 'height': 1284, 'iso_639_1': 'fr', 'file_path': '/uWZrj6K6kwggb8qdlpko76SRSG7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 945}, {'aspect_ratio': 0.667, 'height': 1124, 'iso_639_1': 'en', 'file_path': '/1ZOWn2VSiRhGdfWW7PdreiUOYuR.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 750}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/sOXOGIAUdlsygIovTGh0YIGeREN.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/jpxJj9mVbDNyG08fbmTyGFvZFNC.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/qvxBKd8GrgPg1W5FDG5nmwpzbb7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/uz0owCMTNBmojwPQcDR6OpdCyL2.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/u6EAEtocvyBbc3vwmwHh569DOTs.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.664, 'height': 1204, 'iso_639_1': 'en', 'file_path': '/90NU5EtPAjs1toYOu2cp4emP1tk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/aQWo0r7dcqrW8OdZ5PjkKdemaXN.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'zh', 'file_path': '/c35Vwd9rmMQfaEJuUrJRF3LZWJX.jpg', 'vote_average': 5.164, 'vote_count': 14, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/cv3tj98DvCW8ba75a9XwDPdiYIt.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 1600, 'iso_639_1': 'es', 'file_path': '/d1QKiYtceF3GDtxvTFXFAqwwah9.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1120}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/zq8j3XRJDVqNhiRMensg2uTkYrd.jpg', 'vote_average': 5.12, 'vote_count': 17, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/2QzyxZlj2HxVWiCjgjORIvjAq8T.jpg', 'vote_average': 5.12, 'vote_count': 17, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'en', 'file_path': '/qDSDtonrb6LfVOJXBbpZJNLjr2L.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 600}, {'aspect_ratio': 0.697, 'height': 1438, 'iso_639_1': 'es', 'file_path': '/9kmFzQjRdEjSpjVQeGlvmHAzaPw.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1003}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/AtOL7JqNBGELgBA87gSHNcfzSD.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/sEgN6vtJTw1CW7hjQp4dMUCxUSh.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1050}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/ija1bykAdfthqxlSl0UHhOBI2YM.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/55JWKCqNTn54016voGvig52ikjb.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6LlCIoqKpyJbKB63cmD4pyByHXQ.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/kfP55zsGaq9xl4CfI1C6TFDmLkZ.jpg', 'vote_average': 5.1, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/3DKszh7Ng0EN0UoTkIT01rb0SYC.jpg', 'vote_average': 5.1, 'vote_count': 13, 'width': 672}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/eS79aflvTbW2f754gCO7NM1j7Ym.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 672}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/rUOaQxFj5aKIgQJnmJRF22qQXrH.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 672}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/cNr99Vx7jIa2VOnxRMAfatt1Ong.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/vm4avyFTQAYT4k3YCXasI2Q0BCz.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.674, 'height': 800, 'iso_639_1': 'zh', 'file_path': '/x0svdinUPWHwI14CtIdeB5KXfiy.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 539}, {'aspect_ratio': 0.674, 'height': 800, 'iso_639_1': 'zh', 'file_path': '/zLgW4iKqUXxuTBMk5DmOfhPf0zw.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 539}, {'aspect_ratio': 0.701, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/mBZgrHMZ1VQqpuhHZU8fsN03H8u.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 673}, {'aspect_ratio': 0.667, 'height': 1800, 'iso_639_1': 'zh', 'file_path': '/7I0sjfbWJ5r8e8M9jWf7WcN256j.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/zQsvYbHaMjBRfnPVxZdtbPyyFT8.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cn', 'file_path': '/ulLGFg2QUAhKvkgClIJp2uxuYiA.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.707, 'height': 1698, 'iso_639_1': 'ja', 'file_path': '/vA133yh9mW7Kt82x3f6dnirLd73.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'de', 'file_path': '/jb2lnJrWkRhDy7C3yb129YQIY6i.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/9W7qYnmi1W3648YXVJvpjk82MUf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/hbGNJb88HjoQurnRYYWg45YBFtz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1667}, {'aspect_ratio': 0.702, 'height': 1500, 'iso_639_1': 'ja', 'file_path': '/v6oNcydMvHwV8sxNIF8eivbw8tK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1053}, {'aspect_ratio': 0.71, 'height': 1408, 'iso_639_1': 'cn', 'file_path': '/eX4Al8LtAmuw5RRHRLuDxs2Kn22.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 2024, 'iso_639_1': 'ro', 'file_path': '/mgt3D3a51efPMqGOgwH7AaF5m67.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1417}, {'aspect_ratio': 0.699, 'height': 2841, 'iso_639_1': 'en', 'file_path': '/hDO9K7NLSUHTis7QDeEdH64KEJ2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1986}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xdAzr43DN4BNMUomn8kgMsGUc7Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/q4emCJmjNomEE2pVGgqr3nDEIzI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2286, 'iso_639_1': 'ko', 'file_path': '/evoEi8SBSvIIEveM3V6nCJ6vKj8.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1524}, {'aspect_ratio': 0.693, 'height': 1108, 'iso_639_1': 'el', 'file_path': '/o0xb7oUWC8K516QdYISRg57fFJv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 768}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'be', 'file_path': '/104v27KQPR4FWQJtu25WEVIKB9S.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/goxCjppjJpJhhAYgzPTTBrqbfHi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 2287, 'iso_639_1': 'ko', 'file_path': '/Ap70Jv6nsJ3RpNrK66CfcicBHTA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1602}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/1KTTpt22QCdYkPmW7qcMsrEOA1D.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 734}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/bfMkoXy8d5HGBWPxOvCPRjtRZMF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 734}, {'aspect_ratio': 0.75, 'height': 1600, 'iso_639_1': 'fr', 'file_path': '/yFWUnIdLuxEB00NXQDSjuzgH0fO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pGZpvsjeJ1F5DWBhTe5h2cjIjR9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/6qdusBmmCndnYs1jkf7BSUrIoBr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/7jOjfOlM9hsZS6B930Oj10X56ib.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/gTlZAMmuMjN2Ia0M4pxU2C0ZWxq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 1408, 'iso_639_1': 'cn', 'file_path': '/fkb2SwmbXhjTCfqU82XmpH9VRAr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cn', 'file_path': '/fPM9jZHZAIo0JI4iMLpm5pC4OLw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/zioKUjPlD1aAg0jSdlZY4LNuJgP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'hr', 'file_path': '/lGdLsK976sbGRppdSHbQ5PbAMnb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.699, 'height': 2048, 'iso_639_1': 'tr', 'file_path': '/1T0YWRHgxkRXLh78RgPBH7yGHqU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1432}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'tr', 'file_path': '/gdo6oKHUdUiNLscrXzx3LZ6QcWw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 648}, {'aspect_ratio': 0.676, 'height': 888, 'iso_639_1': 'th', 'file_path': '/gx36DX1RLixLu6sBWgmdiDr7Rbb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.676, 'height': 947, 'iso_639_1': 'th', 'file_path': '/aDJlk2mPEo0weBzJ1eikAqZeHwS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.676, 'height': 947, 'iso_639_1': 'th', 'file_path': '/6L8Eo6ZgBKz63ar5lB6esutDmCU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/rct7HdAfPyvSqbr4H86b6z10tCE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1622, 'iso_639_1': 'en', 'file_path': '/lpkCFuoPC2m1tIHzkpcx6tO2JSa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/WXwTgRstrSe83GDSJvJLhGsMia.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 667}, {'aspect_ratio': 0.704, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/jT6hhix5X8hFgFUrQBy91QwFSlE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1056}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/ogn2abMeIel1UlLm8APU2U69Ydt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/3CQX7KAtGFVfI4PiPRD93Uf3xzX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oS4PsbsKxSP16qYj3RTSYO46OtB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/75VHAQoz8oOFISA52Ojbvpkcml9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/15SGNP9JUGCdKzResOuK07rmOxn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2157, 'iso_639_1': 'en', 'file_path': '/rfgabI22dfjG30GwD87pZ3v1pJQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1439}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/u2PufavhWhs598P66oYfmGSj6A4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/78SsIp2vSCwsXWoOMTcIydMl0ur.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cheLvF0GpLQsmC56L52t2hD4TMO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/w09DcbYm6YWno1H3OgCxUuNp2QL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7FmbPtk8yYu93HeOYQuiqKg81GO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/wvvpXMNB1ocUF8ef5ENhOhcvvmc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/nfDwAaCRwj5BLnkCitv0mgfjZAr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2880, 'iso_639_1': None, 'file_path': '/8CQOK1RyhUAZGUfiea0aAw3nCub.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.717, 'height': 2788, 'iso_639_1': None, 'file_path': '/2khhc03aoTG8nHtGvehEqvcFTDQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2880, 'iso_639_1': None, 'file_path': '/9DydKQbpAgsksnG3BvuVlV28VIs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/fUlEUhtWOuaojBaYhBXdpgBG3VJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/v1M9zqBq3JAF1Et6ltN2d2i1ZS0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uluMeKfYFVvfZlmHgFBXqbnHXE2.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 906, 'iso_639_1': 'en', 'file_path': '/eyDMENQZYq0APm8AypQT0DNOrwa.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 612}, {'aspect_ratio': 0.711, 'height': 1688, 'iso_639_1': 'fr', 'file_path': '/fTWzRx8TKAxj8EaNs0wZ17kiqCW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/yuNs09hvpHVU1cBTCAk9zxsL2oW.jpg', 'vote_average': 5.576, 'vote_count': 13, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/nWtySDlffTfwAa0rSfq61o33ZXV.jpg', 'vote_average': 5.456, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/uprP8rtOgMYJQ2h3ldDFvGsaBgH.jpg', 'vote_average': 5.394, 'vote_count': 10, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/3jFQqn81xdYqNquQZtsu8PJBPiB.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/nzlv62aC0octS5AklAiWpXLX9Z0.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2234, 'iso_639_1': 'uk', 'file_path': '/j0W26SOwnorl6Kga9A90wCypjcr.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1490}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/adRNs1fR1ggpsUQejMvzRiyu7F2.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/rO9d5ES2v5h2xDDZzVWUfQwdZ42.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.707, 'height': 2000, 'iso_639_1': 'ko', 'file_path': '/vqxdADPdy0ZVJr8dMB3mh6C5Vsv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1414}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/tBS1gqYTGS31sM9vAGc5fKCAJTA.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/neHrQLVfT3KPqvv30pNPyRb6chQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/wqG9YXPBpDbC4NpV1Xc42BOm2hO.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/uSae85DR1D4uKknQIsHbuqO1RgN.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.671, 'height': 1414, 'iso_639_1': 'ko', 'file_path': '/pXLnKcUzbUZI8OwkznA8te5dOSt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 949}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/7leBWM27Q0TUnvmhw6WnFNgGn4G.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/fKTPH2WvH8nHTXeBYBVhawtRqtR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'ru', 'file_path': '/xILX5k6PvSeCQ0NFVjKQJKkiJr2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/iQmjFjtM4bf85KY3ToZTjJPNfx0.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.659, 'height': 1117, 'iso_639_1': 'en', 'file_path': '/exU1uUwNuF7EXy6G9nKVUJfGG4l.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 736}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/psE5eio91dVL1k5nTwPUNLp7Kuy.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2289, 'iso_639_1': 'uk', 'file_path': '/dH4wSoQx5Pn5Ig3lPediWEJvzzl.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1526}, {'aspect_ratio': 0.671, 'height': 1103, 'iso_639_1': 'ko', 'file_path': '/iWr4SwGJTF9Pamoeaan8tLgp0r5.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 740}, {'aspect_ratio': 0.671, 'height': 2828, 'iso_639_1': 'ko', 'file_path': '/ogpwO0trLk4Fc4eqgy5S4ShH3oJ.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1897}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/AoLzLn8Z5akd1zHfBcrIiF2MdPw.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1439, 'iso_639_1': 'uk', 'file_path': '/6BHA8tT4d4M5bpj45VCmehpaKyV.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 959}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/uCgVdMeAaGKNgXjkRoQEHuOOn6x.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1104, 'iso_639_1': 'es', 'file_path': '/5Pe6iiwZyExtIzeuk2Q5LNxLuHO.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 736}, {'aspect_ratio': 0.667, 'height': 1758, 'iso_639_1': 'uk', 'file_path': '/3PcEBIneICSp2Bct3eVDUztPkV6.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1172}, {'aspect_ratio': 0.708, 'height': 777, 'iso_639_1': 'ja', 'file_path': '/6ONkGH38ajR7uFvg5WX8SbkbfVP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'bg', 'file_path': '/d2dbk2s4Nnlw5FxJ4f0mues6kp3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/dCCsDcMeJFVOUN0mt9QYGHZDquq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oAvAkTk0cta7o1hB1WlmUYV8txT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/jEiaUHh062AlNNDdIIB6W7DMb1V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cNKT3GNCndTIHlzhEU8Ga6kMNEj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.703, 'height': 2268, 'iso_639_1': 'hu', 'file_path': '/orak5VWu5CPaty1XCzdYWnxtEEd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1594}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ytzQijCzGG8KDzHYri9nc0jyJdh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/nkmokS8g0GHjxdhmRNfYueYvUN5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/f3AKnpK3aFPwnjHTSRkviTkuobr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1800, 'iso_639_1': 'tr', 'file_path': '/31yNVJl968krAHy3f5nFB6kLl7i.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'de', 'file_path': '/qaXfDrZCdd3wix2XYor5HDDpFrT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'ru', 'file_path': '/tDDUPuvdCLjx4hwRYPHdZxt2uB4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'fr', 'file_path': '/2zjoduvmZzBWRPYti8pdBxr4tSt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/tLFV34gBCjuc55xFwFL7zyoCClK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pFj339q3hoXg0NYbo7BvnmdBRhK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.708, 'height': 2000, 'iso_639_1': 'uk', 'file_path': '/5ZbII3voM1KrQYgM76ZnnkBHXB4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1416}, {'aspect_ratio': 0.75, 'height': 1080, 'iso_639_1': 'fr', 'file_path': '/iJeqcL4vlz8u1emUeZzcBBdaLoy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 810}, {'aspect_ratio': 0.675, 'height': 1080, 'iso_639_1': 'ko', 'file_path': '/gaky2GoDZHmt1p3HwPYiiS7SOeC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 729}, {'aspect_ratio': 0.7, 'height': 750, 'iso_639_1': 'ko', 'file_path': '/60SUpn8uryJRorPOOwXYLfwNCDV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 525}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/bzu9nTQPO690uSYOOy7hXjK1vn5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ru', 'file_path': '/k34v0hBeMdVl41w47QKqZL3UH0Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/e8aNU97T9zggNstlyc922c1qOPA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oYuLEt3zVCKq57qu2F8dT7NIa6f.jpg', 'vote_average': 5.52, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/aBGVsKeDn5gtegkyajPGBHWev25.jpg', 'vote_average': 5.518, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'zh', 'file_path': '/mQw9lsrMGlWDHdigLoGvCqX4tz6.jpg', 'vote_average': 5.512, 'vote_count': 24, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/edv5CZvWj09upOsy2Y6IwDhK8bt.jpg', 'vote_average': 5.46, 'vote_count': 23, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/tXQvtRWfkUUnWJAn2tN3jERIUG.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ljsZTbVsrQSqZgWeep2B1QiDKuh.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lQEjWasu07JbQHdfFI5VnEUfId2.jpg', 'vote_average': 5.414, 'vote_count': 32, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/9e3Dz7aCANy5aRUQF745IlNloJ1.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': 'uk', 'file_path': '/r84x4x93LbZ2gozISTBYVeq0gLZ.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1067}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/xn0Kcg4e6p0mLxVS3nAWhNmW2Ni.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8IB2e4r4oVhHnANbnm7O3Tj6tF8.jpg', 'vote_average': 5.342, 'vote_count': 15, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xlaY2zyzMfkhk0HSC5VUwzoZPU1.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/5QHWgqaBxZI1eM5e3YhyKzY5o3z.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/w3tea0HZDYVwQVyjrWBoF5x0Ofs.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'de', 'file_path': '/t5WUY5ZSxwVIVExaMZmmIj88BKA.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cs', 'file_path': '/bgIt92V3IDysoAIcEfOo2ZK9PEv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'ja', 'file_path': '/qzb0slJerd5bQgJxteJ5oAmfp09.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.707, 'height': 1525, 'iso_639_1': 'bg', 'file_path': '/rxHM1Cyn0cpgF7l9DVA2m3SS5Zk.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1078}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'pl', 'file_path': '/aSY6QhgEeUYky0TMfAXjvRJj5bL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 720}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ta', 'file_path': '/paNKUnfHDVDWh4hifULoOdRVzP0.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1981, 'iso_639_1': 'he', 'file_path': '/2aQZWpZKHECecGkFKLcuWa0Cmus.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1321}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/84TynUqXvXJnYiQr8uYcdbTDDWY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/hEYPJruVOc3VBkVbEUbyVTZ2AXd.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/xMQpKxZzJog5DVMCjSTsD99AziI.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/ubj7fEmtNqxwtZtMk6wAIc0SCFJ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/frq4ygwcIMusECNv9rPBrvJwyxG.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2856, 'iso_639_1': 'ko', 'file_path': '/zTgjeblxSLSvomt6F6UYtpiD4n7.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1904}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/9Pfuay9ztGmoS3bt8LW2mfgGjHs.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/mJfTycNg8PxjvxzpnKnzAAG7RIP.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/2CkUNEqIRGAwOC5jiKcQgKFjw87.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9gk7adHYeDvHkCSEqAvQNLV5Uge.jpg', 'vote_average': 5.296, 'vote_count': 20, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2400, 'iso_639_1': 'fr', 'file_path': '/aej3LRUga5rhgkmRP6XMFw3ejbl.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 1600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gqgwNjwjSqGkOqkE2rppogenu4v.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/7SivRwOLuA6DR09zNJ9JIo14GyX.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/nPO8aNT4uGtDAY0bZZZACfP66Lo.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ja', 'file_path': '/jEsp30qRAFPAWMYFGWwK7f9ObST.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/4Kc9ij5DeAwexVwVoT0fGHWK5WM.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 1231, 'iso_639_1': 'ko', 'file_path': '/jSm8mzp7sucgL8NwINIoAmx4dS5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 826}, {'aspect_ratio': 0.671, 'height': 1749, 'iso_639_1': 'ko', 'file_path': '/anJ2PN3jfjv6nocW41Ikgqygcc6.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1173}, {'aspect_ratio': 0.671, 'height': 1231, 'iso_639_1': 'ko', 'file_path': '/dp7n2vb8bmhI2f3Fa0mkQnZnHyO.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 826}, {'aspect_ratio': 0.671, 'height': 2835, 'iso_639_1': 'ko', 'file_path': '/dVhP5LObWUYWwcHKufcdUabApII.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1902}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'hu', 'file_path': '/dUjeL2HBcOpQKATeu6gltO1CKVc.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 1971, 'iso_639_1': 'pt', 'file_path': '/ms1bJvwa4BJycBakQ7afcedGlwY.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1314}, {'aspect_ratio': 0.667, 'height': 1337, 'iso_639_1': 'pt', 'file_path': '/lFrnL8dxEOp6qVj54vyFLi0Qyw.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 892}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/vXyyn578tC5TonEUNmn49mwm4A0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/1G1DR6LxKVNKIAH1oPjp04EIsxr.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/bPYjum1fH24yU2f1exsq8nuHEG0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.698, 'height': 2835, 'iso_639_1': 'ko', 'file_path': '/4rHfaC6dthDRPO8SsrSTMgAgkdW.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1979}, {'aspect_ratio': 0.698, 'height': 2835, 'iso_639_1': 'ko', 'file_path': '/mKZVtEfdYqcCC8FnYnwO3rsgn2q.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1979}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'ru', 'file_path': '/b2jBc5P7vwnfBbLm8ZziNslFb9d.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/xgPGDEKkBrXhPaNmwIlf8e2RCMk.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/k3UoZhRHg6h2XYzwNAJJvGC2yev.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/lqkIBuRyD9mFF5tQ0gKZLfBY54a.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1000, 'iso_639_1': 'zh', 'file_path': '/agvve2rnVhH5Ybuovsqui2HkxC2.jpg', 'vote_average': 5.22, 'vote_count': 13, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/zt5kihG59UaOYyGcXnBz3HwQxXl.jpg', 'vote_average': 5.212, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/fL4CcbigFi4P0Gx1X76vbRjgg6c.jpg', 'vote_average': 5.198, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/1UgqxtiJNxRzPeqs9pztWBUJd7k.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eKkbXuGZ68YOkTs2sz8OYu7Y3hj.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/4VWZyyUTuOZGcamFWfdo9EccuQJ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/iViFPY2O3rSbK84zsw2kEUtmxVP.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/o1SB1gHCmEEURs8P6dfmSC9O3iu.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/67RLqAViz6v4ez5oTy01eVH57VC.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 2859, 'iso_639_1': 'de', 'file_path': '/eARwxzrwvayasGerlMgRH2rtILs.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/uvvH40CJ38pgqA97q2yurGVyycX.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.705, 'height': 780, 'iso_639_1': 'ja', 'file_path': '/llnw1ytJyplbttau3PWYo6P57Ma.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 550}, {'aspect_ratio': 0.67, 'height': 896, 'iso_639_1': 'th', 'file_path': '/uI1gJI93hpbP0L1OqjUQNwKHbq7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/ic8sEH971i01e9qs29795s9Sjr0.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 587}, {'aspect_ratio': 0.671, 'height': 1748, 'iso_639_1': 'ko', 'file_path': '/fB1AYIHXtZFp30khynZAx8pwCb2.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1173}, {'aspect_ratio': 0.667, 'height': 1875, 'iso_639_1': None, 'file_path': '/pMHZ5BPlB2FJWYVh8kpwPDMepUy.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1250}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/ida4t24BmQcVS3FUL4TY4uixoaU.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/A62DYEWb3dgRA2o4NNtuHciFJJi.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1748, 'iso_639_1': 'ko', 'file_path': '/d9ob4cNkH5vmyPppcrYIpIo6x8m.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1165}, {'aspect_ratio': 0.667, 'height': 2003, 'iso_639_1': 'es', 'file_path': '/iunQDLut0NRyEfsLeisnRDxzFEA.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1336}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'vi', 'file_path': '/eBtqGWtR5KUiNl6OXHLR3ri6nVm.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/efC6it8M158f76ym8BA7cHTlcBW.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'en', 'file_path': '/cHRXb7TUnfntX4XdGF63GNL3U4E.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iQUateaYbt0Zbjrl8gqaGlT56iG.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.672, 'height': 1041, 'iso_639_1': 'en', 'file_path': '/rq0UeJr9eoaAeEllw6WheF1HD9R.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 700}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/oiJOvzOcTi8g70d4bhaRVLEcQA8.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/g1z0zLD8tW94omZdM1NDg9Cb0L5.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/siwBgxiw39ox1eQ2GsTu49u7HNF.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1266, 'iso_639_1': 'uk', 'file_path': '/w7pIMKIKrkuzCAWCoUcV6H48krv.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 844}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/bmK3XsNFgAv1RfEV681KLLIKbbV.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/tLeqhlAKQicrzUoWqbTJH6Ac7Z0.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 675}, {'aspect_ratio': 0.707, 'height': 2481, 'iso_639_1': 'en', 'file_path': '/fJgkMpctcXdDo1aQz6LZ8mwuws8.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1754}, {'aspect_ratio': 0.664, 'height': 1247, 'iso_639_1': 'en', 'file_path': '/wGF3iLAkjDLvF2Ws1kcQI5VWGdv.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 828}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/kg03rABx8jwHNLnUhbTbhTGkoVH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/53rhALkaIDqkft2KRZO9ZaaRrB9.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1024, 'iso_639_1': 'en', 'file_path': '/4i1I0cvwYhUTVbU5Qe6HbD1audF.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 682}, {'aspect_ratio': 0.667, 'height': 2400, 'iso_639_1': 'en', 'file_path': '/3xxd3Ntf6dZfTQOG2edgUPx0CzD.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 1600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uoeYeDKCaxcjgZdal4r5UcQrSYD.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/pg4Q5CGD06jdkQQTi3Yz2TSzrU6.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/lCwO4czSKzL1LP4h85T4b8C0UWD.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'cn', 'file_path': '/w85Z9pG9qMtw6m9QuE6PvKygEh1.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1068, 'iso_639_1': 'en', 'file_path': '/jJKRz3f34UkncoZB7DdHJgNZFI0.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 712}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/tVmoPRtN7mMlTJLlhEZDOzqILpp.jpg', 'vote_average': 5.022, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/nJnRy3nywUceNwNZ3spYuIecIBG.jpg', 'vote_average': 5.022, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9egFcRMV4Z3ZdcaJAYoxmnbqZE7.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/nVTLDH8DCcCn4r4hixAYo6ESjyI.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hJmGoCN8DjH0yrw7XsLRFCL9VBJ.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xymM5aW6MDcH5AR9I3CamSegJd6.jpg', 'vote_average': 4.996, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/qZ0kJnOwX6Qo55vIYjicbtl8WlZ.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9nkrC15drTBc2ZWGg7T2x20MrEj.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/o8zlCwctVfRFHQYItVQgmf3mllz.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cfxBdqeRyuBnKa2axipmAFkQJPj.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/hyfpaJO6tSIHZNd9F9qoe9whJBA.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8S7couVqr7g4L48HQ7XD3jZkg5y.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/n9v7TUq3BrGlZRnGmdKVT5PDarg.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/klh1rwo3jpdvdRi2GVygmSoxWy1.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8bxMHkuEzRpIC1YeVhWJKBnj5qq.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bm1XEWLZfCZQEj77SlPcG3ZQaxd.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2963, 'iso_639_1': 'en', 'file_path': '/aC3kqu6Lqw8Rpg9c3spTTGvgOim.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/l9uiKYEmdd4cKFExymkDVeos1ED.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aQZOoAGDz7StBQVEA6hDiUGMMXA.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/p5NyT6SX3I6rjArOoxXl9U9fATf.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7futGyUOW7x0yGCHyLZvkciEeAB.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9Q7LAAkiLcgk5ohjlQPS0ocmWCe.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/d7nO6ezrtx9mkJIoaWN4QyFoloa.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/7l7GUXc4492LdNfusC3gSUKjSzk.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eM2Y0RN3mUwp40Nm9I22Slgzl4c.jpg', 'vote_average': 4.898, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oV5yEdlu1PodRNTyp8d2nvk2qOy.jpg', 'vote_average': 4.898, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1543, 'iso_639_1': 'zh', 'file_path': '/mVbiYFaGfi0YyYvQmUaObFzuvMj.jpg', 'vote_average': 4.714, 'vote_count': 16, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/jc45pxTMTuOlBilSItOejMAMH34.jpg', 'vote_average': 4.6, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1543, 'iso_639_1': 'zh', 'file_path': '/aGVZkgQVPFLAu2aVc5iwOywnskk.jpg', 'vote_average': 4.576, 'vote_count': 14, 'width': 1080}, {'aspect_ratio': 0.7, 'height': 1543, 'iso_639_1': 'zh', 'file_path': '/bseL9xvgcpp3KnYswS1rWmLPzJy.jpg', 'vote_average': 4.576, 'vote_count': 14, 'width': 1080}, {'aspect_ratio': 0.711, 'height': 1125, 'iso_639_1': 'zh', 'file_path': '/y242ckW8B10H24DrzpBAo5llXtp.jpg', 'vote_average': 4.552, 'vote_count': 12, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/jfnbkogB7iimhKYAcJDGsUHaW1b.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/3kB8ncO7iehDNQ2ERNcRnZCWiN3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/l46BsZPZ49J8oQZcOyP7pdlXkjs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/tHegx9JnXUHvIyViqZI2J9NJ2l9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/3VAhy6bMPqwaj13rzdonbDRQm5s.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/tokT0stOvqBigBpimusd4zmheI6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/9LohPHzsuILo2NUrf8nXudEiUcX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/2iTpJJlMgyPsprrovf9FTFjTa4g.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/6FE1uNqLmnjRX2W350nSO4drfuR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.706, 'height': 1000, 'iso_639_1': 'bg', 'file_path': '/dRNOQGwSZ35ByhRmKSkGMiW07Fd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 706}, {'aspect_ratio': 0.705, 'height': 1000, 'iso_639_1': 'bg', 'file_path': '/yJ2YdBfpwzrn0As12noouKt98BE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 705}, {'aspect_ratio': 0.693, 'height': 800, 'iso_639_1': 'el', 'file_path': '/ojCYOPJNUPGs9ZRrOkG08OXBQ9o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 554}, {'aspect_ratio': 0.711, 'height': 1125, 'iso_639_1': 'cn', 'file_path': '/eQmdFJJiTeFQCLMjf1gbi6euc3v.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.657, 'height': 1218, 'iso_639_1': 'cn', 'file_path': '/ssKmJjbt0JfXTFkSWcQ8t8o3GQL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.662, 'height': 1208, 'iso_639_1': 'cn', 'file_path': '/yw4pZVzVUKg5bjYUDHwXf5vHVvT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.66, 'height': 1212, 'iso_639_1': 'cn', 'file_path': '/bxccL5ak0yf26rBEdxGxKQQgQfs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.657, 'height': 1218, 'iso_639_1': 'cn', 'file_path': '/xvuafWsKv7QIzf9kqyQpnWEadZC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.697, 'height': 1200, 'iso_639_1': 'mo', 'file_path': '/RMG2IJAXRGYh1kT0r5tppM2v7P.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 836}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/wyMil0WQy0JhPVpWVfC6rRhKpTi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/qdqBcjf6hkimo5CvIToOVWweW5O.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1523, 'iso_639_1': None, 'file_path': '/8eWOfiFdhuW1Q4JiBA1qN9xa4DD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/z9iTcVx1SEAWjBFj36gSldWyGNz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/jkEx6jNxNjv0CFEJEyCpqfjXrOE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'hr', 'file_path': '/c28DpQIVrHX2py2RHM6S5pr6Wnd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'ru', 'file_path': '/qUcXimqo6p55r5D7gdYvKBeOMxB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/hzxHC3Q65MgpKsGxWKIT6I8wnxG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'pt', 'file_path': '/idHNmmHN7HRleTjwleWdMgU9IyC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/efvcvRgOAZgFC2hrPUa6YqrE1KG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.714, 'height': 1400, 'iso_639_1': 'pl', 'file_path': '/P4iP4Vgynjux22hH66oqDnrtWG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1868, 'iso_639_1': 'pl', 'file_path': '/rT8Qs7D4JLJYYy6gnD4hzZZLp3o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1260}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/gVhGjY9k7mUvsLn0ea2obchJXgk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/tKBvfN5zs7RDGEPvbLue6LZfcIy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': 'pt', 'file_path': '/b1DvgHXpVyuIEECJ5tM7cK1ydUK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/A2QSkPxjcMj4apEHO6Sz7aUCmUu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/ew7MmtIkLjhkYFKtN8dwKBBMzd0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/5MXQAlCa2npFrIbB7OjoquD4MG6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/jXE9uOtbE1BhnPgk5pioQ6aGEFy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/6DCq0lVZElOohBBYfUdLnc2wYmX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/tSHO3YQ6bdivbI5hLxuSgrPxbNR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/zxvAAPcJoNklMtM2XbgacvuGlel.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.665, 'height': 1245, 'iso_639_1': 'en', 'file_path': '/ny5ggIvfGixGZfn8nR4IzSROcGK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'fa', 'file_path': '/h7kgZg7Bk3fCmGkOD6vd9qoqdjC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/qJ2tW6WMUDux911r6m7haRef0WH.jpg', 'vote_average': 5.504, 'vote_count': 48, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/pyNXnq8QBWoK3b37RS6C3axwUOy.jpg', 'vote_average': 5.708, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/8aQ048h92EvpPME4HsgEN4oJIxu.jpg', 'vote_average': 5.652, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/8QDQExnfNFOtabLDKqfDQuHDsIg.jpg', 'vote_average': 5.456, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1863, 'iso_639_1': 'en', 'file_path': '/2Pf0Dtw6P9CWshK6GYVXmmq9NFS.jpg', 'vote_average': 5.408, 'vote_count': 24, 'width': 1242}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xQPgyZOBhaz1GdCQIPf5A5VeFzO.jpg', 'vote_average': 5.394, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/hAf98uHIXMFzqNN5LX1vnouCShr.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/tSIH3DTA4oFQDhPaJgHxxQZoqHh.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/iWXaUWpWLdB4tu0mlVElTKboPgD.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/6pQMQQrnRWm2zweL5vWyyMHvAa6.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1038}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cs', 'file_path': '/zGfUVhyIhnCb44VKiPiw7p7pdI4.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/31ASyBd8PV0GtxnhvyL4JEAB87v.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2841, 'iso_639_1': 'ja', 'file_path': '/nftQJb9550PtYFXhmTs7XiN0QhR.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1894}, {'aspect_ratio': 0.667, 'height': 1338, 'iso_639_1': 'pt', 'file_path': '/iGZX91hIqM9Uu0KGhd4MUaJ0Rtm.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 892}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ja', 'file_path': '/j2aDrirI121LOg82NlmkjQk8a04.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/3KAtr9OX8Bq2FAvZtrjYcdUuBYp.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/wzJZ6tLRMwhStehrcjSyiVGnn3R.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.676, 'height': 1398, 'iso_639_1': 'uk', 'file_path': '/8W0SjK3gNHG4cD2pZhcL4Rvgkc8.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 945}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/7IPCEr7ifdH5CtU97QG7XgAAtOp.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/lch0ILTsm9uFqowVwVmIeRsMcdL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.708, 'height': 1028, 'iso_639_1': 'bg', 'file_path': '/m3N6ejIhoD160vgsOfRpBMguADg.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 728}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'pt', 'file_path': '/4HkwsmXp3uzcrNIPlNEYo3hMbL8.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'pt', 'file_path': '/pGq8oYx466sSukN3LUv0httsxQa.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/fCVD6ZPR7XyxsXZPJWOIp2VgF32.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/1fCoidUsB2xGzbAJr502Hm7Y2Yg.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/eMaH8xS0vXae1jm1Ry0S3yRBEhM.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'it', 'file_path': '/qIhsgno1mjbzUbs4H6DaRjhskAR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1500}, {'aspect_ratio': 0.699, 'height': 2841, 'iso_639_1': 'fr', 'file_path': '/pdLAyRqMEnL6pzkVgYwMS0a3fEm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1986}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/dxWaYQtgpLbycqUpHzkqqYkT5I3.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'vi', 'file_path': '/7EfSqviKvXwbiGhUjHyUBGVdoiW.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gHc2zbaIdc8l2e3aGCiIThgOQiz.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/wsOr8j0xoUwDfcY7k815rEJXgr1.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bIqPWFTrB15fna9010pLGfTiPuL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/uOIdtyKs6Jk0kSnMRQsWpxBnGcC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'vi', 'file_path': '/AabbWDWAwtxHxTJV3v8C9e67E2p.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/9ICUbdveP56jRoMMVkXSOr3ceyV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eP5NL7ZlGoW9tE9qnCdHpOLH1Ke.jpg', 'vote_average': 5.286, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/1PEFfYM4PV80dDqqO7jkCBdjbZa.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/sqj3UE4Rahv2NYFaxXYvXzqUz5L.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/vGYJRor3pCyjbaCpJKC39MpJhIT.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'tr', 'file_path': '/ggax1nyhiGIwbq1Ynk0otH2sD6.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/j10MzKeRM0LrfVgD6tHiO3OVOqU.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/uruzphNWfIo0MxygPDQ5dvlgEQh.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'en', 'file_path': '/5GTnnwpF1aj2kc91IogJHSn229K.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 960}, {'aspect_ratio': 0.675, 'height': 1333, 'iso_639_1': 'en', 'file_path': '/rqoWYzCuNdQewVfKw6H8dFfg4dd.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 900}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/5JSt5BraClSv0XgvDeTYM1FsFjG.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1300, 'iso_639_1': 'en', 'file_path': '/dxabgTYgwysyXP25lgc6L70IJJj.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 867}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/f6dNinWX8rBM79JXKcShkfSh2oA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1077}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/vLFCrzI3V4kbze877tP1H7TqppL.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/A6LnuOLkxOsi9xicfzNege4fjWA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/i9D9jRDaPKM9GpmJdy0a2yDO0B3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/shTcPSqtnQqddboWe5Mw7WAYxQh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 951}, {'aspect_ratio': 0.667, 'height': 1443, 'iso_639_1': 'en', 'file_path': '/d031gvt75HMZq9LxcMG381Hy9ko.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 962}, {'aspect_ratio': 0.666, 'height': 1001, 'iso_639_1': 'en', 'file_path': '/xynOH3rrt2X4hSe1YQgYAkBXfy.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 667}, {'aspect_ratio': 0.668, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/25cE7rTmSWVoRbBWTqIHAcvCtlK.jpg', 'vote_average': 5.244, 'vote_count': 21, 'width': 750}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/r9BQs8VaMziqG2pVD7mcS3ORCWd.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/pKKvCaL1TPTVtbI6EeliyND3api.jpg', 'vote_average': 5.206, 'vote_count': 26, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/z4XwvnDZSm40PCdg9vFJmo0W9ri.jpg', 'vote_average': 5.198, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/30bVZPX7ZRkoOhh7hCXAoDomDgQ.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1400, 'iso_639_1': 'hu', 'file_path': '/yfY6QdlQ6QQczjUaazFdKTVrxDr.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 933}, {'aspect_ratio': 0.7, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/bqFQKVRAs4rVRBiiHDUHWJIbzTk.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1038}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cFfhGHjxv7sWjXS4uABHJi9mvzW.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1013}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/c94GEWkz12pYfg9fO1weiN1ibU4.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/1QF5OFkYCOMmCCMSr7vC5A6DE5s.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/f4KUne3zM29fIq2Nnyn4e0j34mt.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/yjwJM3VcItwvkEDW6GklMrQNBhU.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.68, 'height': 1000, 'iso_639_1': 'he', 'file_path': '/csraeJmUm7GSXEoalvb83AFFq6W.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 680}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7MQT7G87WK7Y6ZeDB7c6mGRrzK9.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.715, 'height': 1181, 'iso_639_1': 'it', 'file_path': '/paIt2d08ZhrwltpmhkQYZiJXYCP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 844}, {'aspect_ratio': 0.704, 'height': 1450, 'iso_639_1': 'it', 'file_path': '/z9Otej9dIEYuPH6teXXu2I8Oh6V.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1021}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/2Ka2nOtSlwuFlsHtrtfHKMIjldC.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/kMq65QVRSL6YWpN5WQwLbaQjV3P.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'it', 'file_path': '/Ak8vHeUtTuBhLLB48iC1o8JjRnc.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/6IOvN7okabMadYJOznljdYq3cGV.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1383}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/z2E98ETb6PZ99VMqIC7PUEAeYDA.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 859, 'iso_639_1': 'en', 'file_path': '/bRZRXgW3UTUV1a19qGpGhm6W5uE.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 580}, {'aspect_ratio': 0.675, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/oOv23H19CiK1F2MTzyx76q7dGwk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 787}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/gN4qbFbuneR9CUXleYGQzomGUjW.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/axyvLjcRhH2IqFrPSdudJL5ohmh.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2932, 'iso_639_1': 'hu', 'file_path': '/wltraa6BO2g7OowPmUKuTUvIjHk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1955}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jsvX5vNggD0ObzHDXp2uUwC2Chs.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/8t7ceMgYm6dX0FA71yJ6UO0rNO.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/txSJ30aWZY9rDg9OuE2QpDJ7WwZ.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.742, 'height': 2096, 'iso_639_1': 'en', 'file_path': '/aArYQMWP5R6PwlFpSSawLLpYEvy.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1555}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/r05GcDOai2tlc5hASixe6BB4zpj.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/h2Q0Bjzb4rOulc0ekz6mH1FFaoI.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.706, 'height': 779, 'iso_639_1': 'ja', 'file_path': '/fh0VioO7JZfM6p1mOEsA0YA2xXC.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/lvNjH1zyN1w3FYkO8ZZJsICKpgN.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/tAgldVsdvZQ9GZuFMifjtl7kMTn.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.742, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/k6hExQBHOLPiGe0K5CBWrVaM3XK.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1187}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'zh', 'file_path': '/rKyMQvIGjBe80zyytNLXvGomWlZ.jpg', 'vote_average': 4.866, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.677, 'height': 1478, 'iso_639_1': 'ko', 'file_path': '/e1nMtpUTtaJGXbeZZ2ajaIOyTgU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.686, 'height': 1457, 'iso_639_1': 'ko', 'file_path': '/8E6MS99JaEZ9mNYZUupTe2nTeKY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.686, 'height': 1457, 'iso_639_1': 'ko', 'file_path': '/pV8U6MAtQBKcjcbq8zesh4Uhe6q.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.721, 'height': 950, 'iso_639_1': 'bg', 'file_path': '/qW85opMaI2Ln5Ea3KxBpeg6qjLG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 685}, {'aspect_ratio': 0.667, 'height': 1337, 'iso_639_1': 'pt', 'file_path': '/plGiCQxuksbGT3ClQDMLlUufo9K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 892}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/gKMDmGde8aAD8M6dvm6j7wciSbJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.715, 'height': 1119, 'iso_639_1': 'cn', 'file_path': '/6ZQsIxobvm7Z0yrtS9NSeRMxuFv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'cn', 'file_path': '/4s74Ob1e11tLDVL5FbCmfcKHm64.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/An3B1Vh3vEHJN1LZh8GwkbRmRn9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/9lPoG7vJOk3GRDIRC4rZyDVOGWE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/jDxcL8SYCgLHh1a1kiT1kA8y4A5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/zq8epazaprZpsI1HsqsBAHWHOBm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1193, 'iso_639_1': 'es', 'file_path': '/noYJ2sbKQE5384I9kB4h0k2YTlG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 795}, {'aspect_ratio': 0.75, 'height': 1654, 'iso_639_1': 'fr', 'file_path': '/utDBwHoh6lqBgNEwDlm5i40COYQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1240}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/3Z5y3P6CLweBgXazo5V2iebq28H.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fi', 'file_path': '/pacP7NdLG0F3EbOYd4CTvu1DB9x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/ghxS6itn1mGzejZb0SYiTo2SOMR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.697, 'height': 760, 'iso_639_1': 'ko', 'file_path': '/qxBQaS8bxhARdZu0feQO7dZPUIw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 530}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/dQ7saTbB4h7hPpAMPkCj7lPaSAQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1077}, {'aspect_ratio': 0.697, 'height': 1062, 'iso_639_1': 'ko', 'file_path': '/aabgm6CLRVUZ3EgnDYIBDD9RjH0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 740}, {'aspect_ratio': 0.75, 'height': 2560, 'iso_639_1': 'es', 'file_path': '/nZfPDfwBX4cLulKTIitPLsjobXd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/suA9dX1bvn528mDAiSHVzMgXpVr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'es', 'file_path': '/o8i8EDSWiwzTIiaMgyPnESKYIVd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/hZUSv4mCne1DP05ihoVDoh8Dg0W.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'pt', 'file_path': '/tnM9lt8QD8PseK7ED65Yt0fIZMd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1066}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/cswulqzPjSEaFF58pzOmiYpUfjq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1077}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/eWbIUAJchJjhkfncbKrmtUPCUrO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1077}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/zAQJ08Tw4DhYcpFCHoJ2wmVt6lA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/9pwp1Maj4c1lRl4QkyXEaktA22g.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 800, 'iso_639_1': 'el', 'file_path': '/bTOmCkefIK8YNhQNe3IOSueYGNZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 556}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/4Vv2UznWz86TY64m7KWO7yhVT5A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1296, 'iso_639_1': 'it', 'file_path': '/taZARyNlDUDw2qhDVqz2LpE8sy7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 864}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/zKw1XjlUrg6SThnelftIV4g0wUF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/u8InfsF7vwXyoSH8rgfDZYQzv3n.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cCCZ5lhbfvRvseWZHX8yOuSpRDJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'vi', 'file_path': '/pJAKIBOvsCc9dBhDDgIRGQGULRR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/a1UL3FTJDgQikYIebnMDhTPFVfm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'en', 'file_path': '/967Swdyk4pvSz3n4CpGBJiGVQFr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/m393i9D8M70Wu8Pc2bLOEILfIcn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1800}, {'aspect_ratio': 0.666, 'height': 1419, 'iso_639_1': 'uk', 'file_path': '/8eJ1cTMyQHk9FOYk1TAyJLR4eDF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 945}, {'aspect_ratio': 0.709, 'height': 2820, 'iso_639_1': 'uk', 'file_path': '/la1BpzspX6ZejdGFa4MRMhUAz2x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 2048, 'iso_639_1': 'cn', 'file_path': '/sjv42EQebn1nbKGx7vOquhfi5KO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1455}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/11Zx6SodSThTbMEVoQtxt11lckL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/t63vUEzIPnZXa5JYFFIK499O6Mr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bwQPehOhS14ePNRF4EBmN1GqSB1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/jQEN95EYetUtDGvpF4F78TVsRPF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.7, 'height': 900, 'iso_639_1': 'de', 'file_path': '/z1DfRQf2CgnROyhVZ6ch8FbWt71.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 630}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/8X41aAuDesg3ZUbxwoiYEIlkFUI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.724, 'height': 1382, 'iso_639_1': 'de', 'file_path': '/1M1Y77HhjJ5SgTc4IOdrkszi0nz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.722, 'height': 1385, 'iso_639_1': 'de', 'file_path': '/kaNc6kCjNMZx7kH7j7uXn4WQN8b.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.709, 'height': 1410, 'iso_639_1': 'de', 'file_path': '/vV2SS4fSc5qlvqHAB43t3A0mzOw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/2QeXdLNwrD5SufAWhszm4VzpwV6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/j0NNGfcbrYRKO8szyrJj4E2h03y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.672, 'height': 2197, 'iso_639_1': 'ro', 'file_path': '/bl3k5MKSmayH4bDAOWhESa9lFfi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1476}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ix8teqIt5kn6vJQQF5PukRaJGj4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gloStgr5JUbEYHX4tMJrvTfkGUq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cqjHJ7jQ0RDJCNZglISv1HDcpEr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1621, 'iso_639_1': 'en', 'file_path': '/l2Nxri5wXgaVQgpOiztMHWHxIsR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/kBMA1HLVQYG9RpcCH7FmtDOE78y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hr', 'file_path': '/xsWMuavHCm08R0NxmTff1g5Q9OU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gdhjkyfc85dIm9KYc7tzsFewJsB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/btIXVwMUHTlSq1XiEafPn1LSw6p.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.665, 'height': 1622, 'iso_639_1': 'en', 'file_path': '/kX7H27dYIHXt5UhPys64oEC0q5u.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1078}, {'aspect_ratio': 0.667, 'height': 1607, 'iso_639_1': 'en', 'file_path': '/nJO79lEYO9Ldz2Zjq0OJ1IGP941.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1072}, {'aspect_ratio': 0.667, 'height': 1607, 'iso_639_1': 'en', 'file_path': '/8zdR3dg39eU01sTnmoTO7aT4ZYa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1072}, {'aspect_ratio': 0.667, 'height': 2325, 'iso_639_1': 'zh', 'file_path': '/aw5qvRlY31AixBLr5op0CIqCMdS.jpg', 'vote_average': 5.576, 'vote_count': 13, 'width': 1550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/tRNlZbgNCNOpLpbPEz5L8G8A0JN.jpg', 'vote_average': 5.516, 'vote_count': 14, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bdN3gXuIZYaJP7ftKK2sU0nPtEA.jpg', 'vote_average': 5.51, 'vote_count': 26, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gcphM7ZLxS5HPeCZgjZobfz907x.jpg', 'vote_average': 5.462, 'vote_count': 39, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/Ag2B2KHKQPukjH7WutmgnnSNurZ.jpg', 'vote_average': 5.406, 'vote_count': 22, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/37Fr7lY4QBHsuxlLJIfTNxW6nGW.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/a03qYIZM0zkEutN5JRZddTBmQqY.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/utdVHiRHQHKIMd11VHx1KOFdxFC.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/ti7W0gh3WyHnQGiBzZDMH7TpYtD.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'tr', 'file_path': '/wiSuje8hdVuwM0pvhtSFirCHmJF.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/bQNVJKVuSoyoa5iLvkesxRa8DH0.jpg', 'vote_average': 5.348, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/v5aGIxVprgv85Qa1XDbxYN2xpt6.jpg', 'vote_average': 5.342, 'vote_count': 15, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/pvSESD7ujxWZwtYDb9l57qE0ywq.jpg', 'vote_average': 5.33, 'vote_count': 9, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/9QxqZI7ssVzyKEBwdUvOt3AUWzA.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/lIl2CrnWohGrZSO9eyKRptxZ7Hs.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/nQP63IbCJ5B9O348h5FAAmGWanG.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1976}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/2ZOzyhoW08neG27DVySMCcq2emd.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/9yOIPXWQ9ttsZfzHvmcS7XiV8To.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'hu', 'file_path': '/rOa94QOq3wbqKBHjSqL0WtPPJm1.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1500}, {'aspect_ratio': 0.7, 'height': 1286, 'iso_639_1': 'ko', 'file_path': '/rwEc7SgXu7b5Yo8Co4CvSinF91v.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'ru', 'file_path': '/9jMvxh1Ib6BPnE0pprRcaNibKDO.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/6NHAZLR4AJhBAVU4qFzkucfyhVl.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 969, 'iso_639_1': 'sk', 'file_path': '/76lhZonZ0Fa2T8dq5tBtsV9yDCK.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 646}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/agcgaJ1ieNc972XWGBvsJkDxo08.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/qKnagY6ksIlZsbsUunXQCvbMk7K.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': None, 'file_path': '/8bLzqR9BuEUmVxficFYakJIQUan.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1067}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pvW6UoBZOp9IrMqpT5ha29snsDR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.703, 'height': 2185, 'iso_639_1': 'zh', 'file_path': '/3noVrrRbPU0iEcVhRRLGa7hnqY.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 1537}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/AdT50fOv8Sn7wnRMU4IUsLwy4CQ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'tr', 'file_path': '/29bgk0clNyU7xS6DkcgVFYos7yG.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'es', 'file_path': '/cibtd0x7yrEnbl2by7OnNY61bEM.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/9pJJXtw7j0nSs1TvBGPKYwQuId0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/syor3JlLzuzPkeheD2QHSYaJEQN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/rN2eGbRpbJw8ZFVDiQfDxsknirP.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/wx6gj3KKbnOsrGnwA6CyfXRrVF0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.75, 'height': 800, 'iso_639_1': 'fr', 'file_path': '/uuxtLLbfMVzWL4ythAgX87JinR3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/rHQWJ745h6vk9IzMN4NKBkxpYcR.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/4oanOpX1VAK62iU77RvOq3WcrzA.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 999, 'iso_639_1': 'ru', 'file_path': '/7bw2iBAdTu3fZoAKvZobbuMojMz.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 666}, {'aspect_ratio': 0.667, 'height': 1880, 'iso_639_1': 'pt', 'file_path': '/8wkZx4FbABuNyOFIb94DFDC3CcZ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1254}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/dKoKG8SyvDjOW3ZC4OO6mSza8xZ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 800}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'pt', 'file_path': '/9DQtfm51BsRQFVe5lOPNMY2w23O.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1880, 'iso_639_1': 'pt', 'file_path': '/qosQop2cGWG4WCtf1tbx98xXcDj.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1254}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/punmWKefqHUGo2f3dO3lpfRbOB2.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 869, 'iso_639_1': 'pt', 'file_path': '/89BhTcxt9s7daMsx44HLrH1yoYm.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 604}, {'aspect_ratio': 0.697, 'height': 750, 'iso_639_1': 'cs', 'file_path': '/j6bxCWwMpM44nwpbcosrE2fFNSr.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 523}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/xKsiJimxRa44FArhlfGHnylrT0i.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'hu', 'file_path': '/9cH4zoed31NY6xxgeMTzlzEvXaN.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/wtjVc3Yja1cTITPfgsXLgGy79MF.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 806, 'iso_639_1': 'en', 'file_path': '/rqLdxsUoGDWst28yXAmMIN1uVv6.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 564}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/A0eycgzccYk6VlpWF89L7ia2hNO.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/qTOHCFcgQH1NJZ0VI8KKuZxpd2s.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.668, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/bv15haKwQdMyGoVdnmP02MYE2bg.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 750}, {'aspect_ratio': 0.698, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/fAjOgo4NMGzqSfgvOzCBrU51hbb.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 838}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/tuLCSrXvRSXVlumY4e1TGb9zAc2.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.681, 'height': 1157, 'iso_639_1': 'zh', 'file_path': '/2SZAFZw6ITYtgRio3y5QDy2lvs0.jpg', 'vote_average': 4.774, 'vote_count': 10, 'width': 788}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ro', 'file_path': '/cNpg2TjWtsut8QUBqezkbHXQFgb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.716, 'height': 1051, 'iso_639_1': 'pt', 'file_path': '/7GyVI1QpkycimTgFPlrpUq3jqiT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 752}, {'aspect_ratio': 0.713, 'height': 800, 'iso_639_1': 'bg', 'file_path': '/h4SgwOskf3CIBlsEiZwVFDkB7Gy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 570}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/m624LrPxlbXkMZVyM9tyDkI8g0M.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/atJR8vClEvAU7MtB5hy4oxuf4RK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/zOwP4sWiVUffsbzQva742GL3ZXA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'ko', 'file_path': '/aE4PR92KPazsbZKEha06roRoXgv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.706, 'height': 779, 'iso_639_1': 'zh', 'file_path': '/dOdURWFzv6UGYK1tBzXsn9mY7oD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/ujX6Liubmg9cBdqZIm7MxYm6DvZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/jb4GtFklHbxTJ9u3zMgUvJ5dkeE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8zoy0oZ0CiCXleCsnQaPWVogAir.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/t72QYzBgFNVECrvln688z3Xf2aG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.678, 'height': 755, 'iso_639_1': 'en', 'file_path': '/u5sQzZtxe3VnWNZh8ExijDQG9yZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 512}, {'aspect_ratio': 0.684, 'height': 1280, 'iso_639_1': 'ru', 'file_path': '/yVyVqv7D6l2LpggHbwBkut7wHdw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 875}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'ru', 'file_path': '/jKFVa9Dq2lSc7VePdMs8ApZbGX4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'ru', 'file_path': '/tPAAA4p8NqKbkhIAxPz3MaAkjMA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/fqTQIMWqjHoHVQouignErrOy3Co.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': None, 'file_path': '/wsUt98RThQsNXbTY3OT5Fl2zYFa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': None, 'file_path': '/hGGmC4a3F9JYYQUM2ePz6lw4rj6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/dyXgxnqRdHPzoGXqwYKNnsJ7bgl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/yfUZxBmAdXF6DNQnBWSJqekOOJc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/mrwOUto3pCzo7EygRTjgZOJ60nk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 2585, 'iso_639_1': 'zh', 'file_path': '/mrf31ezhckXfkIUd0p8LHqksvbG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1836}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'en', 'file_path': '/cq5RVLOYxYWGkGI3FWGmoTYWheV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/3bX6VVSMf0dvzk5pMT4ALG5A92d.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1605, 'iso_639_1': 'it', 'file_path': '/fmls6kOMCfKWrJaq43PLCWVr6ve.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1070}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/odvmwLXNfkE1JmvfVBraaMGbtQQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/r1pjXIXCwlFhtrEvPXxhw2wwqry.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/g5svlJvwpUpo8NeNzIGeBoctgTX.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8Ta8uxDusA18OsIb3ksLOH4qTxv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8uWjDveJ8bkhcolpwoMMDNDOkFL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/lK9LE5D67HNyPlhJcjKAgnRh0OO.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ob9dYT7cuEcVrjkQXajnIgQsXHt.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'en', 'file_path': '/eaIXDmrHIwYSXjSK0N6hcXM0gGx.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'en', 'file_path': '/5giub1nKK3sFRvZxmebe31scQOo.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 700}, {'aspect_ratio': 0.667, 'height': 1800, 'iso_639_1': 'en', 'file_path': '/ctqienHJX0uuQCIv7Qr0WvXshld.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 1605, 'iso_639_1': 'it', 'file_path': '/cfNxgChrQI4rQqcDtWx0XbUHIP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1070}, {'aspect_ratio': 0.667, 'height': 1575, 'iso_639_1': 'it', 'file_path': '/a3TkBxEd4gS4l9JAqMOnkChguv3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1050}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'ru', 'file_path': '/oiouMT6o8ss9Iro2Y1wS6As0IS0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'es', 'file_path': '/7EpzeTKziFdjMYMtcqtu9QYmSLu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9xKxkCc3aotmu7r8iQT5jvgMRMp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 2168, 'iso_639_1': 'hu', 'file_path': '/l7EEYEjW9je0VYqQKpWe5GQqKxO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1520}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pCti3dACGQQpvD0gQnG7pacZwAD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/iLYLgzHXAf6sJUjWBTF7gkFgvYZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'pt', 'file_path': '/g4PdSeyLwpspxd47miKPFBnv7yK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'uk', 'file_path': '/hSgNpJ92Vi4SmW915qb7wzSH8aP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.665, 'height': 1926, 'iso_639_1': 'en', 'file_path': '/aN4HPRZvaNawxmDs92HrEwV7LPl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'zh', 'file_path': '/rXHdIfyJ5ojQYsN2wPrmf9aIIyN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 1241, 'iso_639_1': 'en', 'file_path': '/rzgaiEqMSvSQJWwgk5phFQnlTIa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.667, 'height': 1065, 'iso_639_1': 'en', 'file_path': '/qrB8po1jncE4tK8t3UXV040NTVb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 710}, {'aspect_ratio': 0.672, 'height': 1282, 'iso_639_1': 'en', 'file_path': '/cXDFFv6yZNW3vUHOKKUPJNnL0So.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 861}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/mJGIjkALIOmj1TGv48l3qGvJQuy.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 500}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'en', 'file_path': '/7kSYGg6zrsXBsLvZnaNwoteiruv.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 600}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4MpN4kIEqUjW8OPtOQJXlTdHiJV.jpg', 'vote_average': 5.638, 'vote_count': 12, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/6yMWU1vWkOBbNRIwOxhetd2aHhO.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'cn', 'file_path': '/olxE3239oOQGaSShbWLJs1NQXBe.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 1500}, {'aspect_ratio': 0.671, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/1P3ZyEq02wcTMd3iE4ebtLvncvH.jpg', 'vote_average': 5.396, 'vote_count': 12, 'width': 754}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/lXRSRP5QMfrr9cSiupvcGDJW1Sa.jpg', 'vote_average': 5.392, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'uk', 'file_path': '/77NraO0uqhXOG0xqLz0nIuockDf.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/j8F9HJBcrRD3xevxf4NMF2IhQE2.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/s4I1JYIacFbi6amQYqRKB7ifrHx.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'tr', 'file_path': '/q7OK13aqXAwppQAF6yT6wZeKtc6.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'hu', 'file_path': '/2DkutTDxhB7173ItFi9cVDMFqUK.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/pqB8Xlu0QdwsONakoiKtortANdn.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/h8Qi8uIYAGh4lZ357ua6NNJ8Pui.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2000, 'iso_639_1': 'en', 'file_path': '/ezD8iZcSj9zQkIbBNpDZvdMxr8P.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1333}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b1V6Qp0xcNoxrpXu9tKhJ2PoYEW.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/3F2Rbu2DCC8Q7WGWqlsWI26Bw5P.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/54Jxp5zy190oQXqxcwBUPCVngTU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/e5F9ACInAM2802QxsBmmixyaXrU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/9nBRExEia2xF2nDzCZNtQUknZGD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/f1pQPzFmBXyFaScnrqeSm8lvCH9.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/AanMvzySJHlfIiScoU6edjNvIFH.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/fIfmG3EaIy3eqebyq7hXjl1ymQW.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gDpMT5nrgsuSAgX3NfRg2ZOsr0d.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/zBVNawbcB9z3cQw3uOvQ6dTLBS2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/sPX89Td70IDDjVr85jdSBb4rWGr.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.669, 'height': 1600, 'iso_639_1': None, 'file_path': '/8grKo5VUbtnnJWX5iQBhmKOQxHY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1070}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/vGKHM0WKkjt5KYKYr6dmX7RZfJZ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8pF4KoiRlXEf1MJCKTfZ5cyJz5l.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/A92FwaxylVAEC1g88ncRjPNupJE.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2184, 'iso_639_1': 'ja', 'file_path': '/mpdTFukLMNAALO2j0yfViyoI2TF.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1456}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/e8MB1d69fmzyonT6mz9iQs3rhw7.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oyjEePAoGmeyAkpLgloOfCB2ijG.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1545, 'iso_639_1': 'en', 'file_path': '/qLrkL9RUirxJkDW7KTTfrkNsL64.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1030}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8RW2runSEc34IwKN2D1aPcJd2UL.jpg', 'vote_average': 5.286, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rdXILMlfINsio98WbUFoXTXPz5S.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/h4QzFwldlUaEvJgVwumGTPOBA59.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/uheYLZ7KxfGolGOJr6nnKiNuQKh.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jrYbYRMRwCO7vNtTdoqNcgALwAi.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/taKcn26BMWnsUcMFSlr5RfGDtFB.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/3oOBjD1LZCjfrLPPL49xP9fFgeR.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1625, 'iso_639_1': 'es', 'file_path': '/xWufUAYvji3mgltweOd41kh3MRK.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1083}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/AdhhQHrgb9eWTcmBh7pThBzU0Ra.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/5Ml3AHO8D5Kil22e5FnDg8sgBn0.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/pQFtEAJC8QSs97rIYiKCmbxJseL.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 950}, {'aspect_ratio': 0.73, 'height': 1200, 'iso_639_1': 'ja', 'file_path': '/mx5zvtwTTWBwlNzBZCKvbcjJFIH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 876}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/48sBwODorRIoJjHFeDHttVU3XAF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/udMtQ5TQ0q856XqRyqQxE2F2wTB.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/oih8KKRAhnRtyU5kzKoSMaaLhQM.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/jHX4YIJtWFIteg7jIy5lZITP40C.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 1945, 'iso_639_1': 'ko', 'file_path': '/sb3V2fPhNDRRUvHJW4pQaeHbDxm.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1305}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/zKgfW9KhKmIQyjL6b2nVFOsyeZh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aBVr0YMCeAYVrtmEtt54DrtLZeq.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.683, 'height': 1464, 'iso_639_1': 'en', 'file_path': '/7hys0bs5xfxR9tu3G5InB0xDhat.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/gsKwOfUesyN0pZtag0ulh7bpxJX.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': 'ja', 'file_path': '/tqeP1OW2welQt6cVM9YwKOTU3z8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1068}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/8G6WFTx91CAQeVopRQtVCZDYpb1.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.669, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/8D2CZEClyq9H5zY0BaD9F2miS25.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1370}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/ziFjqY3ABYTJZ2kHMzjr3eeyMQZ.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iTFxTcAZtxvSrPV87IEnmnvyQGw.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/z9iIvDrc4A6WqBg3qzmfQmRFLwe.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'en', 'file_path': '/kb9pouNQIuXhBjPzt1VWawIrEFM.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 600}, {'aspect_ratio': 0.7, 'height': 1128, 'iso_639_1': 'pt', 'file_path': '/e22BN2rABXSkDS8RChni1E9VSvP.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 790}, {'aspect_ratio': 0.704, 'height': 1080, 'iso_639_1': 'bg', 'file_path': '/A5zTY0UJg0UcuzuXE51Lc21OhUI.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 760}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'fr', 'file_path': '/voA7jH8LIkPMlmtdYAp83z7bKiS.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.686, 'height': 1000, 'iso_639_1': 'ko', 'file_path': '/ur3wsVMVubcr9wiKP6oyEHJMF75.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 686}, {'aspect_ratio': 0.686, 'height': 1166, 'iso_639_1': 'ko', 'file_path': '/jCgGjUHt9Ut7nGibLS71ePCBnV.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.742, 'height': 2096, 'iso_639_1': 'en', 'file_path': '/1CvxVIiBT9XWN2WQZCm1bqIKchw.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1555}, {'aspect_ratio': 0.652, 'height': 781, 'iso_639_1': 'el', 'file_path': '/zQSuZTwBI81CiXUxxUKExcafnO9.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 509}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/oGby1unkAP5qH9I7AavC7QWtTNt.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9ghkbUgt5lAYzkL4DuehL2DHn4X.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1228, 'iso_639_1': 'es', 'file_path': '/2mRyNFKpRT37vAcZdHzBrCpmH51.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 818}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/k5Pq6DFqKZ6k6Q1kX5MarcugysV.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2886, 'iso_639_1': 'hu', 'file_path': '/vrwZ91I7j5QIrSm3TQEbadvA0sP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1924}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aGdng8Ic4ONpcepU3bVXPSLmNd3.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1223, 'iso_639_1': 'zh', 'file_path': '/VwksWozHDudb7i1XBQBYeEfxiP.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 815}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/uGGUIOwp1F3iSMB0ZyFZJ1Uorvy.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.742, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/3TAzUgbseHTVopZYIrPPeuRtxi1.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1187}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bY1SD4t8to0OJh3NBTan4kpMM7M.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'zh', 'file_path': '/jULqFuAvuikqjp870awMKXcfiXK.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'tr', 'file_path': '/d5CPMykx24J2FZ77Coun40mkRS.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 640}, {'aspect_ratio': 0.718, 'height': 1254, 'iso_639_1': 'zh', 'file_path': '/oarR8scEjqKmgbFAYHfUdpOP8Oz.jpg', 'vote_average': 4.882, 'vote_count': 8, 'width': 900}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/peVchL19Z1JJobkGOoWBfdGyUNP.jpg', 'vote_average': 4.81, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1950, 'iso_639_1': 'en', 'file_path': '/52xooeUA0yHufOpwzeEEuQA61LW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1300}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pl', 'file_path': '/cub46jQ4bLQYYbpbSL9Q24wofS2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 800, 'iso_639_1': 'en', 'file_path': '/ocEnq79nVKZbhKAllMVpxnbAQQ5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 534}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/66BlmYvDr92ZOJXWOLMfs55p5pD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 667}, {'aspect_ratio': 0.666, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/mrkFKMgjs1TWAXHVujASiBv0PTi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 666}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/v0ANxUnWwyfkf053ijLfu1nxi0K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1350, 'iso_639_1': 'hu', 'file_path': '/1Cfe1HTWMXUeaxLi3xF072Jkf0o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/1wVhoU0bBGhJYaiu5K8DrSCqDDY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.677, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/5v9MVHgHWjA1c6Rx2BlA2ty6SU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1083}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/rSZXvInOa94udX9F4hXSruyKm3u.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jZdal8sHUCJ9mMN9qQOniaxajFF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/eKdPunkhnw2y7KL5XRKqbhoowOd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/53lvq1hrL8NcFW1VXEhfXH0UmWt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.75, 'height': 2400, 'iso_639_1': 'en', 'file_path': '/ksFkFAevvjpyj6UYl7OZ8TKJ5FS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1800}, {'aspect_ratio': 0.704, 'height': 2162, 'iso_639_1': 'hu', 'file_path': '/6VtoPn1CBUEjugkkXZzD3R31PWG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1523}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/3HT2Dd9H97qF7f0MwTLpYlIVNi2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/njDm6YxpTM6eGWemXTXEIAl1QTg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'cn', 'file_path': '/eIxXgEJoPlnZKDXTVhZqayooGFe.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 825, 'iso_639_1': 'cn', 'file_path': '/heHTe9kEUtExNnLhlU1JdXjRdov.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/miHituxAvyTN1EiVd3ivHATPMuH.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/8BKhFMoI4nLdRcNsGa0917WpFcv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/uwUJyAVJecME2Za05MO3Os5NgMN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/1tmW4YcZbbnVXsdhOF5l1Vw4hrn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bqGfUxcgh0h2G0piN14kcUp1jtX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/8hQ30FJB9OSLeF3qDDS8dEuXavd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/bhbM9ubZ1ntgG6Nb7W2aSMMHUg2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.75, 'height': 800, 'iso_639_1': 'fr', 'file_path': '/dj3gMEPXmisUr0sAfQEqguL5CcG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'es', 'file_path': '/wn6M8RUu4aXAkm5CDYi925TjF5x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/o7RGTaHBMKbcoaBmVhalbxF9iyr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/kuq4rOo5xaeE4O9UrbmYePsnGk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 815, 'iso_639_1': 'en', 'file_path': '/lvH8MQw49D2y6YfdReuVimJ2M56.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.681, 'height': 999, 'iso_639_1': 'en', 'file_path': '/ilsnLZHdsfu3BBBxDNpTtD6AcUF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 680}, {'aspect_ratio': 0.711, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/mg3pPorXcQMxwKTCGyGgUlD3AGr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 533}, {'aspect_ratio': 0.661, 'height': 1180, 'iso_639_1': 'pl', 'file_path': '/r10xlLTZACGRPk3DdUFsMbKXC6S.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 780}, {'aspect_ratio': 0.676, 'height': 1332, 'iso_639_1': 'en', 'file_path': '/67rpL2zu7XbpfnUck4EDq5dJ0oq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.763, 'height': 1179, 'iso_639_1': 'pl', 'file_path': '/fVaJ6lIPG01GbRf6CiZVWLqdRWP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/aLcqG3KYjn7UcaP9RkwoDCCVtDM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/fqCX3kCbnIoo7e0WzoYnCJpjaiA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rcvFrSxNHleYiECFK5C9UTRo6pt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/5U3zBsuLdMobHmgsImRcz9v4zJo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/151LQXEVZNcEUnHrJ6zrmC4IrJY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/lZERCEFV7eEz4HhKEc8oAV3mILn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1610, 'iso_639_1': 'en', 'file_path': '/kF1LegAFVXVLpBuncjtA2vWU4te.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1073}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b8PrXkCXucjcpMDF6wTack7XLox.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/n4wda3f2nN5ZydGFyxgVDtpGZ1s.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1667, 'iso_639_1': 'uk', 'file_path': '/AkTECnZFMA9eiHhAGTFknHRCEru.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1111}, {'aspect_ratio': 0.71, 'height': 2048, 'iso_639_1': 'cn', 'file_path': '/gC0NNBDPMv9hCE3lFDlXpxRXutJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1455}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/jfZk3qhdEHpbhOgoe6LWiWQH1vw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b7Fu087b4lbgvD2Zkh9uuUzGvGW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/qJULvvrFj2jcQSW5CpBurl5F0GH.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'hu', 'file_path': '/2iLknZbwsuo2DU2XMwFustMv1Wc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1433}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/unbyPHlYp98fZXIycBs69iIqG7X.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/1wTXK636CyqDhvJ3AHcbTQdbqzA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'en', 'file_path': '/vpl0SgFYGJASU4X5otf4bXfN3CQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.669, 'height': 1238, 'iso_639_1': 'en', 'file_path': '/eVmnHzShdLNGN6WNIEwD9lAW0XL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.666, 'height': 1400, 'iso_639_1': 'de', 'file_path': '/b3UIToGx8JIpRqUTGkaoyaNLuU3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 933}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'de', 'file_path': '/bCS4nLmIb1Trem2XD1Gmv7QVCkq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.666, 'height': 1621, 'iso_639_1': 'en', 'file_path': '/roZDhuv0u5LOAbybq2lgQpSVOGY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7oj5A9xCVwSgocb9eQfoTEFQs0L.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ijKpiStjMetB43uxOAXpE8RAQR7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/f8dHlNWaxXLod6NQ5cSJmzwxvzp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oSAVoPnVgQmYnEN3e39aXjGicnd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6mp9FB58YtnvvluKr2uYntlOUA6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4wrnEENDwfqQqWw3iibW4TO7uz2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4vj4UFn2neMtq37tdiPNKizl3yZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.676, 'height': 1480, 'iso_639_1': 'en', 'file_path': '/oZ6USHIpL6A7r6JWDxodgguYVmb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/mao3SD11TSZW40HbM2Hbc3q6Cg8.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/riVXh3EimGO0y5dgQxEWPRy5Itg.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/t3oYtCqDue393e7uhDn5f8NBQRx.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/6Vwc5vgioIXUhLQGAqmp3uDDKJJ.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/eJ49J6QXrTJryC61p43NTAULms.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/74Tw91IVP3Q8AjfeNSqgfZ0FGWK.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/u8qp8FKo6sU7SUOER8guCd8LVsv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 771, 'iso_639_1': 'pl', 'file_path': '/dVppgIoMNu3NvK3GThHdXjqOHYD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 514}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'pt', 'file_path': '/7IKbG5NpqnT8UKP6bigmeQmmR2k.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 960}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/tptisxjbdI4LInxdjrU95DYCXnT.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gjHergpHMkxtgpSr8fTbasVmXDS.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/cwB0t4OHX1Pw1Umzc9jPgzalUpS.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eJ7Rg29Gf9OMBRJTx7S1MWkoIDy.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/6O3eA55DO3fHicwlAE3DaSrA5Uv.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gAP5xELKJrIdLjc20W7QUSD2q9Z.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.689, 'height': 1000, 'iso_639_1': 'ru', 'file_path': '/o9KCIyB81bxUIysFYa32tRmDLLa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 689}, {'aspect_ratio': 0.698, 'height': 1128, 'iso_639_1': 'ko', 'file_path': '/iUVqFNAsczEZDKMZ0WUwmijFXXi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 787}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'pl', 'file_path': '/xr5vqYTGDDNp1czYWS3FXDgTLgS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/6NyOWQ32k1uh6DOtwJQkc3Gsq0V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/yfvof5mHWcHI51d985ty8Md5Unz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'hu', 'file_path': '/xKbkg7hXd2sxjC4yog7wRsa0Htf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'de', 'file_path': '/eQ0fpkk2DSlMGWp3E4BzEqAxxD5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iwU4g5UynQRp5PSMR6gLIW84FdE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'fr', 'file_path': '/lHZXeG4sTkWREgkP7iJCWGJkPmp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/7pfpRJMkk7iy4pby2gnIX8dmPQc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1014, 'iso_639_1': 'uk', 'file_path': '/yWXumElnl9Ma5upfZ0lVXzJoSIZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 676}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/hpUFOvUg4QEBaYf17ptfBgftF1A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/wz3tHxlBIlVXrwdcxi4V6RgBDLQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/2QsdTyaPOEeH3Hs9IZ7wP4Q47KI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/zeZ2KBilr4i1weqDgaJMXwfszfB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2809, 'iso_639_1': 'en', 'file_path': '/iHFgXmnl8kI5Mj7M2FIgVNidh1K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1873}, {'aspect_ratio': 0.67, 'height': 1245, 'iso_639_1': None, 'file_path': '/lVEKzRlME0PzVhhsYIjSozUzOjG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 834}, {'aspect_ratio': 0.67, 'height': 1245, 'iso_639_1': 'en', 'file_path': '/meHgOaJw1qG4ghyOQpgcAEnGiYL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 834}, {'aspect_ratio': 0.755, 'height': 2415, 'iso_639_1': 'en', 'file_path': '/lgikX0J6y1HQwd2olhpAO6uFaRM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1824}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ydO1cCU9rNkSCMwYRAj0uAXh2jc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6r0kwSACT5ByguAtPOD2jEBX4Bk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8ex63HADjW4Aq0Yyi7I206fPD4w.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/poUximKxGghA1MgjN0DNUYTb8aK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'hu', 'file_path': '/sWBfP7vfft2EcmDet9wMVS1RgZt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/grgvwGEAUNurWDsIyTLeGSQkc5r.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/8y9yQAwWlWYVzLxz0spQRoKWh3T.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/z2im6qUwtDIn2KMiWoRg0dRIXIC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'fr', 'file_path': '/5mGl3dFFCzeTCG3otMmsjY71Bdm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/l95SOzLzZ9x9qY0EdBPYa6mnFDL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bctwBm75A0hCMIkRAv9hudqJgxU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/q9rKjv1XucoqDg6046hqvfuQInA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/pMs8nZuoLPrzL20dcS7cZM11ba9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2uTHwj5aHXiDlw8V99wzRrmTljD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b4Oe15CGLL61Ped0RAS9JpqdmCt.jpg', 'vote_average': 5.708, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/y8nvZPcNzuAIjWjplDiPeS4WZ6c.jpg', 'vote_average': 5.696, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/1VOKlC35yrwVKlfBSN52NY4zoF2.jpg', 'vote_average': 5.652, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2353, 'iso_639_1': 'zh', 'file_path': '/79mvAsULqtLpQvg5zYxgkK1Yohu.jpg', 'vote_average': 5.634, 'vote_count': 14, 'width': 1569}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'pt', 'file_path': '/kO6ewhlh7OIGRRbHwylDafEM1QG.jpg', 'vote_average': 5.522, 'vote_count': 6, 'width': 960}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ebSnODDg9lbsMIaWg2uAbjn7TO5.jpg', 'vote_average': 5.508, 'vote_count': 32, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zx87sFGLXZdrSF4B9WPhwjaKuQP.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'pt', 'file_path': '/8TbAQlEpRG2EQsjMNR76IYGNuki.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/e6yYRoEz4WoHIwcCaRTcQrAmaKG.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2040, 'iso_639_1': 'it', 'file_path': '/sInkpq76Q9L3JOEXEOVEQeJTjGl.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1360}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/cCH4jLoZCklH3rgqnvatjR7Q1AL.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/pEuitXhT6LEMOZuEvB6ecAaVa1m.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/m3xR365ajZrTN5vm2xf91L1zplv.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/3ldmcbmoQ6A9dUwphrwWxXIYQZM.jpg', 'vote_average': 5.33, 'vote_count': 9, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/maCv5pCoqp8mwWIxZmejzH5aCS4.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'he', 'file_path': '/ppqNQckAPwjVisCg5VPpdUBHxxb.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/l7sMTjCVqchwVAz6Kupm1bC62eP.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/iWzrUYxUfnpmLbm0rwyGKuFwpTO.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'sk', 'file_path': '/lsJ6fO8rXfTr5tcJHmJomru9SS5.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/iz7bV07QjC7Ero4msP5c9usJ3Az.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/t1LPjG9KNQQSX156XtXPxn8vIm2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.693, 'height': 2884, 'iso_639_1': 'el', 'file_path': '/ruayowvFykAbSJr5cVNRb14KXZt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sk', 'file_path': '/k6zHXaXXBSHyExTWxk6N2dtkh4a.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/QKPYFn2IS1t2neqv6hkFfAhQCc.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1667}, {'aspect_ratio': 0.7, 'height': 1372, 'iso_639_1': 'ko', 'file_path': '/r8GRroYelxUID8dOxcyeNKKol6W.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 961}, {'aspect_ratio': 0.667, 'height': 1155, 'iso_639_1': 'pl', 'file_path': '/zPRomhANBqtY8XSb9y4f2o5nHzp.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 770}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/za5q8ZKtUj3lGazCnPEDbhcp7Q4.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.705, 'height': 2838, 'iso_639_1': 'de', 'file_path': '/jSwp3rByt0iG3LwZbrMlw40wvZP.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'es', 'file_path': '/3lc06ptVbouEaZyjdHfCzmIm6v7.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1066, 'iso_639_1': 'th', 'file_path': '/sC8ci4k90aeUw7Yfd3HBlQIWBMw.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zHqzQyu6AyAZ0JCVaYmLQGfGduQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/iwvcIamoONxy9yB2td7yjRcbTQ2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.699, 'height': 1400, 'iso_639_1': 'he', 'file_path': '/cvyJDi3hP4G8knqNSmodfnJW4Wk.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 979}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/uHBAkhW91dSHjmvm3NaVGszDGwM.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/aWPRZvXOo5MmdzXwVNqnPf4uOxm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.706, 'height': 1529, 'iso_639_1': 'cs', 'file_path': '/vvabU7mZkohtB2yeEcVV6PcE71C.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'en', 'file_path': '/ggx11MEouBJgReHeWKhVOebSCno.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/zzHmycY21doYxLt2bDnhFr8xLo6.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'ja', 'file_path': '/wMGrlJ8TGuB77jcLISUWiVlG1vY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 667}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cUqEgoP6kj8ykfNjJx3Tl5zHCcN.jpg', 'vote_average': 5.306, 'vote_count': 78, 'width': 1012}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/jkFghrF0sHmL2aPwS8fpUINOzo6.jpg', 'vote_average': 5.282, 'vote_count': 14, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/53qrLADLqLsGoLVGaAkpe6The0K.jpg', 'vote_average': 5.282, 'vote_count': 14, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'fr', 'file_path': '/a0FWEv2NXw8zCgdCYAcI3x1M2iB.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 2792, 'iso_639_1': 'es', 'file_path': '/wHK0yX54svEWqlLNVMjoHcXXijq.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1861}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/pcVC6wvEVodaUxkTsUkXlgVrXHF.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/ii5CQ1ajuyvZlC60Q2rLFJT13UV.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.67, 'height': 1689, 'iso_639_1': 'ja', 'file_path': '/8z17OrgHGepjgyKvxIX9w5i1cBm.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1132}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/1zvQOnISwPx0jACHEqUa93WP1yF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/b5i4fvzOBc9mTu2J29RDsqmdvaC.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jX2GDUad2rHelr5la31MmwiL06T.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ltbTYAXBohdIHqC72RxthWWMR8S.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2974, 'iso_639_1': 'uk', 'file_path': '/4Nw3VyTcZGgk58cJxf5BJGdBU7.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1983}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/Y9KbriUET6fnsofAOvwDnXonI9.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/bP7sTFJSRKdO1PqRXBkdr7QJG5c.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/mtXqM8rjL9rwAs4V0LxKpkZ1ca1.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 954, 'iso_639_1': 'hu', 'file_path': '/qqe7SdnqKdyuZ4txNo7UzszU8RR.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 644}, {'aspect_ratio': 0.707, 'height': 1123, 'iso_639_1': 'sk', 'file_path': '/AkEkRv6yGDKxtPaO5cta6svr8em.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 794}, {'aspect_ratio': 0.69, 'height': 1015, 'iso_639_1': 'hu', 'file_path': '/7G1swFcaEE5IOC1c9vhmsNwAnBn.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 700}, {'aspect_ratio': 0.699, 'height': 1064, 'iso_639_1': 'lt', 'file_path': '/tCrBCNzwvFpbOzpakrIzE7urv1h.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 744}, {'aspect_ratio': 0.705, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/bcukXXsDE6E1uwN9uT2a7o0IkJ3.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1057}, {'aspect_ratio': 0.666, 'height': 800, 'iso_639_1': 'tr', 'file_path': '/820AaUpKmLqc7KJePkPUf0xWmZT.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 533}, {'aspect_ratio': 0.675, 'height': 1733, 'iso_639_1': 'en', 'file_path': '/yAznDPQlypuw3xuPzB8mwZ7thOF.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1170}, {'aspect_ratio': 0.666, 'height': 1912, 'iso_639_1': 'en', 'file_path': '/eHpGqOrkKcxOsjqTVU9XiRA9lBu.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1274}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/zsR6BLC3bqBpXnOVO8GAcltK5v5.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 2878, 'iso_639_1': 'ru', 'file_path': '/koF819pZLTVJDKnXTbAjsCWByCj.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'da', 'file_path': '/b8nDCzjLwOOK84QQ8IOBSXKVYmH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1080}, {'aspect_ratio': 0.686, 'height': 2334, 'iso_639_1': 'ko', 'file_path': '/jBMxV0Ufzn5zhhavrwmcwUPTQo1.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1602}, {'aspect_ratio': 0.693, 'height': 2885, 'iso_639_1': 'el', 'file_path': '/emdQj6jFZ5KmoVR6z3GzPlUEAPR.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.749, 'height': 2669, 'iso_639_1': 'fr', 'file_path': '/kO2XxxuY0zHv9Xzi75tbb0tH0qq.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'cn', 'file_path': '/irV3zgU4sxBLiZsRaJkUsFTIWiu.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 2852, 'iso_639_1': 'zh', 'file_path': '/z8yFLxSTrKsVl0LnKkRp7m5jHGW.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/nGtEd7mQ12lJyeSvj6rQSzy8sG5.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.75, 'height': 1073, 'iso_639_1': 'fr', 'file_path': '/2FaEoBZkjkmeocMpRrsB4C36JZ9.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 805}, {'aspect_ratio': 0.707, 'height': 1199, 'iso_639_1': 'fr', 'file_path': '/6vbOiVLl6yzDrcmX5tziUY337O.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 848}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/4oBdVk1ndVAyU9vieLMQDjTR0Ja.jpg', 'vote_average': 4.996, 'vote_count': 6, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1104, 'iso_639_1': 'en', 'file_path': '/qgISWc2owsFwQs65h45FyTpecfr.jpg', 'vote_average': 4.982, 'vote_count': 13, 'width': 736}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/xWeehULdRScOlKQjvGHacs3T9F9.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1012}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'es', 'file_path': '/li2TmtEDnl9YiKu0EabKZ3UN2OD.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 648}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/4nk6rKWPFafh8XEOsWEL1iuqeBR.jpg', 'vote_average': 4.968, 'vote_count': 20, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'en', 'file_path': '/vBw02gViFMiuhmQBDXALhxDCoDs.jpg', 'vote_average': 4.956, 'vote_count': 18, 'width': 648}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'es', 'file_path': '/rirlZ4Glx1IdtCnwGmax6t65KmE.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 648}, {'aspect_ratio': 0.666, 'height': 1183, 'iso_639_1': 'en', 'file_path': '/6OXM4vZiHI38tdzNl0eZBcnJ6Py.jpg', 'vote_average': 4.914, 'vote_count': 12, 'width': 788}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/hfPZSSOL9Lx8B5iSDob9ZzrWKmG.jpg', 'vote_average': 4.81, 'vote_count': 7, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/5YRk65QJV3oWTO0pzvMhUwHM3H8.jpg', 'vote_average': 4.744, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/wgbLSRE4hx2E2u4KC05dLejglvZ.jpg', 'vote_average': 4.744, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/uvp9JwfkHAfY98IKCVyW3wn50R5.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/rkydrPu5ozwuubWUxyGM0wBd7Zf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/adGWCFQtxYrzJDbVfsXqJd6An1f.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1801, 'iso_639_1': 'bg', 'file_path': '/iVLaWEt8lVm8DaWb2yFX0gZzhT1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'de', 'file_path': '/70n4Y3GW6BbwZf8TMspkw2S3E9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'pt', 'file_path': '/a45twTYksQoA7FQxHdrPbhmdymS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'pt', 'file_path': '/vOYYPbQwmNiFtuCZxepC5jSedK2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'pt', 'file_path': '/ozZUzjUrkTHm1DsXmxq5Szr33uI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 667}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/oV1orpEEyAG6qpYvx0eXLiMDOB5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.675, 'height': 1499, 'iso_639_1': 'vi', 'file_path': '/qRtqlnvcoWIL0Uma3HA15Ll84I6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1012}, {'aspect_ratio': 0.685, 'height': 934, 'iso_639_1': 'en', 'file_path': '/ibsAJmQFKIGD5045jHCtUjZoG5V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/xqpBQsx1pLgmCZmvlm4gs7Xkd6L.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.705, 'height': 2480, 'iso_639_1': 'en', 'file_path': '/71bgUB7aDOX2c0KdItL7nHS5V7Z.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1748}, {'aspect_ratio': 0.706, 'height': 1192, 'iso_639_1': 'cs', 'file_path': '/m85YWSaKOQTGd4P2iDPrdx9MWle.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 842}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cn69SQZ7JU5jGXespkOuTT4dWcN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uWp1gGlzks1Qbn4CRD53bwd1cYP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/m72FNxY3or8guz8fQeR6k8rhqIm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/477Y0JBPosetXaAq3F4JKS5cJOT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.712, 'height': 750, 'iso_639_1': 'en', 'file_path': '/xYsBhycaMctERkAryDnxzbhvLNd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 534}, {'aspect_ratio': 0.703, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/6UOBMm3SPyQwhjXg3JAuimhKH1A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 527}, {'aspect_ratio': 0.675, 'height': 750, 'iso_639_1': 'en', 'file_path': '/bUVnHhgs623J25hQKdXj5HB4TV5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 506}, {'aspect_ratio': 0.675, 'height': 1897, 'iso_639_1': 'en', 'file_path': '/bJjDuoXQwoKwf8Ikqw5fG93SccC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 1024, 'iso_639_1': 'th', 'file_path': '/sOV8Gs14hn3tItR9iRsT0zVXaN0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 683}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6mmR4jIx4lbcAlMq5jUwoxQBUNl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hJfvoSRul0vA8buvGEf8Y0nSMLj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/izwq3XnagOtZG2tjTikKmWD72Gr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ylIWpIzgtj8Kgu2LAttG91SAOEj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1562, 'iso_639_1': 'ro', 'file_path': '/jxeyKW2r6UJy18dJOsWnNcaO9ug.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1095}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/dEpzOsUsVOthJO50EeUV6c4OzOo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/6DNV7P1dELhmXMTovH5nmX1chcx.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/47Nt9FTKaibRT59Jt1C6kFrIUul.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'en', 'file_path': '/eD87eLlEBnu7YVq1mml7Ta6vraI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rbIaxCfEXhKcs81cDoRciWeZbWu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/cqUG42ME8SPfrCIBftZCTy0dIvx.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2501, 'iso_639_1': 'en', 'file_path': '/fC17drcQkvLoSfFssEtu0nEH3Cs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1667}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/3ZEJQbwgwr1FTEMm7gWMkTgwsZe.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ae18mE3HWOnuiCtT0Bu1REsm2wl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/sv1AZIcH1tLV6bcHsyouNVM3VNy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/jJ1H0mjM9qQTv5V52RdlKvOIWMF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/4VFkZEUnqwYYiWIoweufYEH67lE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/5dfGY1MiYj93BC9FKMe1K1sOJAh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/6LPkJO0phMVbuNld3jzLgoQcaYI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/yuTd4oGNt0jlT623ElJTOCZIzoK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 976, 'iso_639_1': 'en', 'file_path': '/iUw4Qp5EwnLRihy5V7vGBohdwo3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 651}, {'aspect_ratio': 0.666, 'height': 968, 'iso_639_1': 'en', 'file_path': '/4IJjdiRxMdnYXojJCNeUzwwXkUK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 645}, {'aspect_ratio': 0.664, 'height': 2118, 'iso_639_1': 'en', 'file_path': '/fbRhW1nrxIE3nwb5ByfIIQkgUni.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1407}, {'aspect_ratio': 0.667, 'height': 993, 'iso_639_1': None, 'file_path': '/8kK5FHLTrKHRT9UJvRnMlvEhvvk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 662}, {'aspect_ratio': 0.667, 'height': 1242, 'iso_639_1': 'en', 'file_path': '/dhSlbHJU9qGruyPmupchkDV41kc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/mJgVk2lvmvZtwQwfq7H71fs1xVQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/dQ7pAZt4vpYA04dHpOOqYfhADuS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vYPgI0pGfiJOI41JX4lN9c70MCL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/pvAYIDWwaQglnKjJGIGwDq02vzA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gqvkZN4yJwaWXLdawiY6SByPNgp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/bVsNuqh2hPEiX17xmUEhA6726FF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2814, 'iso_639_1': 'en', 'file_path': '/8TjRK4ltj94BIq6d5N3aUPJSnrB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1876}, {'aspect_ratio': 0.667, 'height': 1684, 'iso_639_1': 'en', 'file_path': '/obQY1Ey2M5txxmJZfYSFBzPyMXX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1124}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/spqqZhj0r8VM62hLrv3DwHyyG8E.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': None, 'file_path': '/jmtTd2RLeIK1JXYhZ9EW2Byj8i9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/iXQUHNghW2FsOxWifI1wWx87XOQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/7wSj4SRrmiuB54VGXKNB2X0RzQt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.666, 'height': 1121, 'iso_639_1': 'en', 'file_path': '/jkTXanEbEreyPBfmJXabl4vErOz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 747}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/8rTv325KOZLFjlvYW8r2wVFjHIh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/1au2MtEbzmr9WKRnv1w5ZzX0Zbg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1667}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/8fVpaUhCszes7r9EPtQLIvhBJfw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/6nVrUvOygBS8hS4RWClRKYhkN0a.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/oDdYBp1ekTO2ELJwb6SNQoC9Cua.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/p3HyZzJYgw35OJj06OnojkAIjdg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/5Pwoe5rZwYcLEmo3CyeWMND12Sp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'fr', 'file_path': '/7gmYun3b26zyDRDS11Lef8FkAgA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/j21lDOxiJBOoW8ApfVvilSow0GY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.749, 'height': 2669, 'iso_639_1': 'fr', 'file_path': '/zKJYwNZ38BmitETM9ttkG8rvjSF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/tASJpacWyivVyRnUahaxT2cJg5L.jpg', 'vote_average': 5.708, 'vote_count': 9, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/3VijrH8284v86IO3AjG24Ri2jZ1.jpg', 'vote_average': 5.642, 'vote_count': 10, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/72SOtZnFhCumLRZhoXlX8g2IkgF.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/k68nPLbIST6NP96JmTxmZijEvCA.jpg', 'vote_average': 5.388, 'vote_count': 57, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/bHUmjIqaAAjrQ0p8RqagHgCmG7N.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'el', 'file_path': '/AdkXPG1dBkd8VnuzQIyzh6B2o0X.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 978, 'iso_639_1': 'pl', 'file_path': '/IveefzhRc6Zdd5gzQw3VFjitZP.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 652}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/iKXqUiLFDgeIGozRR6JYRvFmD5A.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.72, 'height': 1000, 'iso_639_1': 'cs', 'file_path': '/hzvQVjmagnpOd1haaJq6IPJI3es.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 720}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/2olsZGB9vcazEoQUI1eoD7NaBXI.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/aCIFMriQh8rvhxpN1IWGgvH0Tlg.jpg', 'vote_average': 5.364, 'vote_count': 31, 'width': 1365}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'zh', 'file_path': '/qs13cxcA7tVTBq0WcgJ9GGplXnK.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/1jU80STrosbPsiNe3oPpwyS5cXg.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 2918, 'iso_639_1': 'ko', 'file_path': '/ylQRi3edixhzUiubw7LQP1YhI6W.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1958}, {'aspect_ratio': 0.671, 'height': 2917, 'iso_639_1': 'ko', 'file_path': '/4ISu3R5OQQ39aWCzWWYrB9reSQD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1958}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/ApP2sz8pMkPC5xRlFa3l6MjQINB.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'hr', 'file_path': '/naWwLNGj1cQ0nVz5Ap6CC3cl0RU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/buSr2RIxzJ5Zh6dLaLBsqAdvz3I.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/3nNhvoImY5xos82ZLMhv1jGucGM.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/hsGsdJnjvdXdqXOJyLiJHVecAt5.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.676, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/oEPLD99jMDtX1HabXB4JbHhkGWS.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 676}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/VBEruSTMZfwj1VFqMqGXBqLOro.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/kjMSOw223FtsdMzEOCUvTnyDPFY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/cRDUa63MeEpOWdqZeXqReDz7KTx.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'fr', 'file_path': '/m2Lb6a38TJbjP9py0Wjml6JtIdm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/qG5B4146EZHoCRlwYgybl2C060w.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2644, 'iso_639_1': 'sk', 'file_path': '/8Rat9OEsG5Ys9YxPoLpFSwUT3Ct.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1763}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/Ae0pbv4E6YfqfN3UjKWIfQSzP9v.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 2852, 'iso_639_1': 'fr', 'file_path': '/r4aygO7YvOVIl5r9xg5NmI1M6bV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oRkLA2EkXaRLmK63BkvK74G8tC4.jpg', 'vote_average': 5.3, 'vote_count': 22, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/wRlgk7KLJNUd1Kgct5FimlGgviK.jpg', 'vote_average': 5.292, 'vote_count': 18, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/oh8XmxWlySHgGLlx8QOBmq9k72j.jpg', 'vote_average': 5.282, 'vote_count': 14, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7wHx4Vk0NExuzZuGk2KRuc8Ogw8.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/q8Py71q2dnjdZOoB6BGcUkgmy0d.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rrKH3VhHssGTCfPuaEQkxvEoElv.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1200, 'iso_639_1': 'es', 'file_path': '/jFAi1Uv3JjNPEgjKuneG5mBlAvA.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 810}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/jutsxphSGbnpxpGr23xzbf2ziQZ.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'en', 'file_path': '/igGF5CJwfsHBXO515sQbHmEwwKb.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8W7GrgHc9FdfFhExGLSD8woZaSd.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/pBtBqPcNocjYEzVqSOzW5HQlx0E.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/n0zcpLDR6cbmPgWrIWTleGeI24j.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2046, 'iso_639_1': 'en', 'file_path': '/zukO7q7I4kBQhEMZFSnDkVx6rm6.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 2880, 'iso_639_1': 'en', 'file_path': '/20OxuK7i84dlrYLZkWXCYD595bZ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1920}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/w93KBwtAyLRHSwPApC9ojVbblz3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/hTAIqYYXDHqe8xPFV5cH4ElxCqb.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/iGkkhRzdtzg56zbCOpIi9XosVps.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 1280, 'iso_639_1': 'es', 'file_path': '/sJfBFmPBgBuE4bn6LeGzt3548wc.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 890}, {'aspect_ratio': 0.675, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/gXFO3yijIcE81ToS8fex5fckQs6.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1822}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bbsLQa2MFfjkKN1jiLJniuoVmnr.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/e17TGZsyJuV8SoSmjBpYyxpWDkF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/m96dj44zZJ8TxpaMZDJv63TldZh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'th', 'file_path': '/26UM1gxWL7siq8TdTWVoioirhiz.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 648}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'tr', 'file_path': '/dj6ji5YuvYK4TqfrI7N3EwoRstA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/fxWdGXi70vp3FmMwVUgaFOuz7p5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/t20YrhZQzVKTcUarWb8hvkuVdhR.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/953c71N8KDhL0FGfFjbHltwVmNj.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gr8rLs4QSu3c7sksYxUXqAvjTtL.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/uC2Us1kfVCbTfx0rvqwqgIIjDeu.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ba6WSxKmNzfeK1XnfrNDYfU3rJN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 750, 'iso_639_1': 'en', 'file_path': '/z1NOLVngacgijfaInk6NH9teHA8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 506}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/yrp3FwZnPk76nB4YTnVCRkLUWA8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 951}, {'aspect_ratio': 0.675, 'height': 2046, 'iso_639_1': 'en', 'file_path': '/n1It9EmM9R10Z3NGTQFiG1aodpl.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9hMMIbz0Aw9zO2jXoJZPOpBiCtT.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/deLRaMU1cYxp169iIqh0Pt6MbgN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/o4WvqfFGUKIqrGqCRPQQN4LfwPn.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/y0oS0FUbEeeDJ7zB2KneCeGBE0W.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.684, 'height': 1901, 'iso_639_1': 'en', 'file_path': '/51gY7geyCQ7RsFMsySUcBShd1jp.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1300}, {'aspect_ratio': 0.666, 'height': 1936, 'iso_639_1': 'en', 'file_path': '/qEFP7olEpveUjQoJBlVL7jYne5z.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1290}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/658wTC3V8AvrdZGiUKqLzFmbnHq.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1734, 'iso_639_1': 'en', 'file_path': '/zdV05nwIfPUkJaqjENtD1Bz6dqD.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1155}, {'aspect_ratio': 0.667, 'height': 1692, 'iso_639_1': 'en', 'file_path': '/yp8DRbAnJHunlXsrhTppHAezliH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1128}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4l7xavwBLzMO7XDuUSTIWS5xFbv.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gD60HrHf3E1muyaBTiEZVSsqq3Q.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 2250, 'iso_639_1': 'en', 'file_path': '/vHBk4t6Wf777uRxTlypF28RdLc8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1498}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/VarFilyykk24q2TM72DRGQY7Z9.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/6bBseBvhfnQwWVZUNdyKzDJ2ND7.jpg', 'vote_average': 5.206, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/3oNEdly8PgenWhQSHLZBBFXL5NZ.jpg', 'vote_average': 5.198, 'vote_count': 7, 'width': 800}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'zh', 'file_path': '/p0F78BfKkX9c3JnZILgZe0IFbjh.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1382}, {'aspect_ratio': 0.669, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/jvuXK03Tvq8Ttr4VbvjtbpNv8sV.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 954}, {'aspect_ratio': 0.7, 'height': 1000, 'iso_639_1': 'zh', 'file_path': '/68hZXVFkFGQ7KN3yjPBa5bcLyHf.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 700}, {'aspect_ratio': 0.669, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/dFjRYABWTsUmLdhnxEjWtiVGUQc.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 954}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/s5jxwhLPGI4Xow8GXwenzL1MkwF.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/5egQdoW86PIeMGbMQsaP17LTUGF.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/79n0cePpWjTt8Ge4BRQB87WL0lC.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1367, 'iso_639_1': 'en', 'file_path': '/AtBOlZVuzeIHmlLxBi6vKa7LxSX.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 911}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/ve6nayrO4nCSV7f4kJtyDnRDZXj.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/bnP8QQWIHAjz8lyNXyP1aIC9gQy.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/r3576fzKQ1N5mlwT8jZuCn5Arwb.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1423, 'iso_639_1': 'ru', 'file_path': '/vspWqZ3YR7MR1njlehqNChhsJbY.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 960}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'uk', 'file_path': '/aVIT5vpLhRRG0yfTWSqahSuUBy7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1382}, {'aspect_ratio': 0.709, 'height': 776, 'iso_639_1': 'uk', 'file_path': '/als8ezMfZQOU4qCPmWY4fE3dAYQ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 550}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/q3VwIHJifJqW1aB13z7ypYLjIR1.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/g50V0IpNnA9aO2KzUsWx1IOGbl7.jpg', 'vote_average': 5.146, 'vote_count': 10, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4QUBQUtHfGVOPA5FJr9ylj7qfk4.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/ufxaLyyrpjKTBf6s95xDMMBFhv8.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/2BcA6OuvAcZYGHYT9cGnz4OaG5w.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'fr', 'file_path': '/wi5c5ui75273L8Xy7utfQ338JVM.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1080}, {'aspect_ratio': 0.675, 'height': 1553, 'iso_639_1': 'zh', 'file_path': '/ikH6hPtVBAjDJrfEPWV0WsdZOou.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1049}, {'aspect_ratio': 0.707, 'height': 2808, 'iso_639_1': 'de', 'file_path': '/rvFPyynleFmssvkHkETR5dfA4wQ.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1985}, {'aspect_ratio': 0.707, 'height': 2694, 'iso_639_1': 'de', 'file_path': '/3ethyYcHylFB0MQaR9Re8XipD9Q.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1905}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/n43gtda4d9MpkQOJuDiZsghyuDF.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'it', 'file_path': '/zyhbCFImhQZGUpaR0YxQo9cS8ug.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 640}, {'aspect_ratio': 0.75, 'height': 2184, 'iso_639_1': 'fr', 'file_path': '/n3r7TJ4Jg7IMLfjox9DKf20INrM.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1638}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'fr', 'file_path': '/iFuUdZ8Sf3aUloLrwRkE9eZe9qn.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/lvGVvKUNjkYMsCiWRQvx0zmOSgf.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1080, 'iso_639_1': 'fr', 'file_path': '/wUFgurjdZ0CZLOpDddED61LsECp.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 729}, {'aspect_ratio': 0.675, 'height': 1080, 'iso_639_1': 'es', 'file_path': '/67p7XVP5SLup521iD9cAayMNt2U.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 729}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/xXnu79NXmxeBel3GN5Q35r5M9IH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/9SG06mt9sdAKPSV24ZwSC0BTJgP.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/gPHolElXk7RZIbtH5DZYy4x89KD.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/4yap6odXTCy4B5i4yj26CX0PP5u.jpg', 'vote_average': 5.046, 'vote_count': 14, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 1840, 'iso_639_1': 'en', 'file_path': '/fIkVbwSgIbtQoTXoPQFWQQYbTNo.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1227}, {'aspect_ratio': 0.667, 'height': 2025, 'iso_639_1': 'en', 'file_path': '/r3RN7MhELaLa1TswnruOguVpbti.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1350}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/4FcXo5SMDxx3xs6Gy4Hn8ghubjF.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/gtbcNREppG3EtlWPUSBgvQX3wLl.jpg', 'vote_average': 4.954, 'vote_count': 9, 'width': 1382}, {'aspect_ratio': 0.675, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/aqeFTqYgC8LkYUcCP9kPw1mVW38.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.679, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/wqgyAiTZwCJglokIViEwAMk6UXR.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 679}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/yj2fK2noJy7IeC7IF7Ck89rGYOI.jpg', 'vote_average': 4.908, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/miydFfLqKN52EG0cRqX3DNVxTEV.jpg', 'vote_average': 4.846, 'vote_count': 11, 'width': 1012}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lM9LUM7oJ9SekpzLxLGp64ACRBr.jpg', 'vote_average': 4.828, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/vTq8Sq4BJopStWGxDcAkmNThxdM.jpg', 'vote_average': 4.794, 'vote_count': 12, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'zh', 'file_path': '/fZDEaSzIez8VlPs0s0P3qKRshaE.jpg', 'vote_average': 4.774, 'vote_count': 10, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/lX9WdoJGHMr7pVyV7FNI6dA3M8j.jpg', 'vote_average': 4.756, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/k9HBfQwoXSTZgw4O6SeuVBYUgiY.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/hPWQxw5dQH2nKvC8m15aEJvIeJ3.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lRsEThuzrJuuvj6oCDDXDAxLOFF.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/9Nqx2tMrrksmq9aO5oSO0NzUEAf.jpg', 'vote_average': 4.674, 'vote_count': 12, 'width': 1400}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/rskwnqit2uNIGzdaRiK9xlDIcdK.jpg', 'vote_average': 4.576, 'vote_count': 14, 'width': 675}, {'aspect_ratio': 0.671, 'height': 1945, 'iso_639_1': 'ko', 'file_path': '/aHt13urK4fzrOr30yHVmGT6OsE6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1305}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/4xbiHTdPSlVKtYpTu4nABh9HfGH.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/jeHQIDSIa4vJBQPztVOHr39Z6ah.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/dFafJVFABS5A0rZ5gThMHO3lH8V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cs', 'file_path': '/lhauCTw99l7NLHNMnosVcM9AR4K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'uk', 'file_path': '/3axgBjjEgEm0BFWViSkfuyBQcab.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ar', 'file_path': '/iN8mhL0vSIxsTetkmE3XsJedvAv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ar', 'file_path': '/1haRSMcIshKnVUljJF6sxr0luH9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/eMTAAOl7t37LXSfmmwQgZUQjjna.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/qnoKl9QhIfQ9ooPAltuAQgO4PdQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/k2hAyRUMu2yMWImzwJ0be1EK4mA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 978, 'iso_639_1': 'pl', 'file_path': '/akyYzv6aF8EpIFp5Q7J5gBwOPys.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 652}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ja', 'file_path': '/azzqSt3XPpRRIYyh0WT6rs2BCe7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1200, 'iso_639_1': 'vi', 'file_path': '/nSaf4wrXgifAZZ52ncKuXBuR989.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 810}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'vi', 'file_path': '/6yEC8Vzeb8Jb2v92WDDlwE7o6Qp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/vrXFOYjBMXjsVgTZTNGvX5cwsVi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/8rmXY2DH0emfwwT1hsoGkh91bTR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'tr', 'file_path': '/n8gzKzi8tvpTZh0Ev8B5c5T6Lm2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'tr', 'file_path': '/incFPFFoGrnDR6xRtEACqkug4vN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/sdS5LoMq4ELi9oPJdqDkn3nY3Jz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/7iUA9SKVHzplTIxkXsVshlAYCtX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/rpfDaRMIbEXXHXN7EfNkfLqQe0b.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/bngxk1DYQD8rzkXeyDTf9afqQS2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jDO05iH7DkjEkTiZcLvT9MAID3k.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eQy2Dceeeg31cpLuLxyyGwHgq3N.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uG3LanNAPENQSVWzSCSBMzJ8vEI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/wdUzLcYKDuEk5hRQBy4GPWaWsU9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ywl38WqU29S8S9w6h1foR9jYyRR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/f6IjjhzR3tvPCKhWAybsyGgF0aj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/g1fDu3g7BsEScobygmBiZB6y7HU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.674, 'height': 2136, 'iso_639_1': 'ar', 'file_path': '/jlOxsDp0ehXpYjymkzza9NCrTe7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/ggFZHu542Iy3Uswh3iydOnrxQaP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/e8xHyx6xnvwOEJyFF7cyyJ8vBg2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/lrFsBGRdZtLNpMYPiQLu6iQFi0M.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/ggm8X8fgwoqUoIqE8QDcKxScLlW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gyMGax60ToZCkoKOKEkTDEzfUt1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/WukyEfsKP21vRahgU8oAPwFsj2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/GqAWQHdEHS0dzyTfGFGXJtIaq7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 750, 'iso_639_1': 'zh', 'file_path': '/tVe3xHC97imJoyfZ1KaE55AdngU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 506}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/epoids15egPuq933RvT0Y34L478.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/ovMjFDybSgGTkeboRl7NW1pxQwJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/2IRYjm9TPKOcAN05JQI7p83OYfc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 889, 'iso_639_1': 'ro', 'file_path': '/8hGCmXRQwg1oFRPSoELXb5Y2qMy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 592}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/zDktJ7HvvPmQfmODoQr82Vqixas.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/trcTyjkrPtJOs3VAhsKg4VXD4e3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/1Kp80UumFADxoujem4f9XUdorns.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/c2JahdNbxE3tnuqkHzc0PV5mmaf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.676, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/uC8TeYMb21Wbp7vBJxkdLSCVowF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 676}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/dXEz6T9l4beYMLFQCz8CaxGahrA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/45xZh9ckG0G1G1KDo3b3SMpCepI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.676, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/qA0AXOdnFdEqQ5QOkXpPNBJsSaC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 676}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/qJ6BS0pq5MmHt9eJRDIOpI6HQbr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/zpIqjUYkRHOECYjrNIT3Q5n8E3I.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/2y9JfYSDiFLuQE883SpHjsqg725.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/pnK4oL7yhFVAvcIDgTw2qvxmcQq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/qijkW9NBsX620z2oIO5rSIMgkZK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2jh51rEBFF4xd01mFeVaIuEB5Zs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/wY5ADCiNmcriq4ztk8vFdmLLPZa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1364}, {'aspect_ratio': 0.702, 'height': 997, 'iso_639_1': 'en', 'file_path': '/mlOQtpJ21PwrhJMWT82HTcR66f1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.667, 'height': 1049, 'iso_639_1': 'en', 'file_path': '/gqXcpvR0XbaAKdjUOFyhMnMYyCh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.675, 'height': 1353, 'iso_639_1': 'en', 'file_path': '/3p4m0xZDxEiJlMtfaBlJrDoRd94.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 913}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'en', 'file_path': '/ikprp0ljmuqwAKVF7loD0RYB1R3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.707, 'height': 990, 'iso_639_1': 'en', 'file_path': '/t6Ci35eRRUgjheNjwvDlnZasLAz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/vqPN7tSObfi2samod5YMWk3hd1T.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 2600, 'iso_639_1': 'hi', 'file_path': '/f9zhIg8M1X1tFpHFUEA3scA6OYb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1734}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/gfK480aiP5YP6LOLMcGwuCqUwod.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/4hyLO3l1QPnaL8nelSF9gcQP6Zu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'th', 'file_path': '/5ie13iRwU9fwpNlaSvy10NJQdob.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.666, 'height': 2000, 'iso_639_1': 'en', 'file_path': '/ofEnRAtapT6QDNQRgKRnEkGi9TJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1333}, {'aspect_ratio': 0.707, 'height': 1122, 'iso_639_1': 'no', 'file_path': '/w2PVxCxX9uXgji5XKBjTh6ZYV5k.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 793}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/biB1eiXO8Gtlm3f9V6qztEOipCw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.666, 'height': 1642, 'iso_639_1': 'en', 'file_path': '/c9o3YTki4jE2KBn2U2JypADzi3l.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1094}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'fa', 'file_path': '/k2az1QwAcRojG2DkMgq547cuUtm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1493, 'iso_639_1': 'en', 'file_path': '/rGMA2oKiBQJnCiyk1jTFripWnh6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 996}, {'aspect_ratio': 0.666, 'height': 2815, 'iso_639_1': 'en', 'file_path': '/osnMHdJcOtRn9Tt0UStGmjSW8a3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1876}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/e6rWRXmXNIAbhLTxxWyL47Gl83U.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/eS4JP1cUqDDxSCl0SZ7N8fi5DDi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9kw2rw8qDeNBsyfaPQ9X2AVyI0Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/fmMkJ2OK8Kil3RDOErXeFyfp3c9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/pHgdMEMLByURAvRExapzplW7zXV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/cUvsymH3xbOqaCsEp9UpLqxuyvF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/cIsad2oTEgIStgknjKR3uaQM16O.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/dPIhW8H3wcPuYSCkJddbeEcOYia.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/wgZH8JYBRL10gt6UjKzxPKWUl2w.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/2RvO5Q8i3Cv9ExSqPtRb64yBTPT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ja', 'file_path': '/6iQh1aekQjRYxS2U9rofwGocjfZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8vQuVYhXSbkrPajWxDlHPG7AdHS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/wxwlG0M23uNvXglZ2ScUZYb9z6W.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.665, 'height': 1994, 'iso_639_1': 'en', 'file_path': '/mGb10FlelkIYQe5OPidEKsNtZmt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1327}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/srfebAZOcvZJHy0gMtI8TCwigCS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 981, 'iso_639_1': 'sk', 'file_path': '/zbKHN5YeKCjdYE6JPrJFhkbdKQR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 654}, {'aspect_ratio': 0.674, 'height': 949, 'iso_639_1': 'en', 'file_path': '/8JnqTXhjaLnTFkvPOoSdvofzPn7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4BVUrRjMj5WiyjRnHURfmAWxWME.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1000, 'iso_639_1': None, 'file_path': '/rQ884232vYo3pbm0Ov1bCrMy6Zp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 666}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hr0L2aueqlP2BYUblTTjmtn0hw4.jpg', 'vote_average': 5.458, 'vote_count': 15, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/rcqIPCMhvYpreMHzMuHiezQqBK3.jpg', 'vote_average': 5.586, 'vote_count': 7, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/rrS7K8tXVFUBliIKWaRuSq65nWr.jpg', 'vote_average': 5.522, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/8JoNBc8AMLcTXbAURDJXXZpTo9j.jpg', 'vote_average': 5.522, 'vote_count': 6, 'width': 951}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/ApcGBERN0p9I0nDOIwJeEmpnLU5.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/8JCu1wi83pirpHEbVpmpfowDolX.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': 'ja', 'file_path': '/sJTxiMt4slbmTnQoV5UyA2HlYx4.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1068}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/85cWkCVftiVs0BVey6pxX8uNmLt.jpg', 'vote_average': 5.346, 'vote_count': 17, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2366, 'iso_639_1': 'en', 'file_path': '/bOizb8SnashwNbFCpwie5pmLi1m.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1577}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/ht5Jqka646AW8P3IsdrUPf8W8La.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ja', 'file_path': '/mQyK6KLWCwvrG8lBpfDWEWd6lK1.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/bfezKMcrzCIU4p72SljoZMjJUsW.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/9LfroB8zJD7HqP5hsxeDPHrzbw0.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/oWIhEWtHbSlvttp5qbBEutPOV7G.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/vvPsRFPzOMqnlzbFfxYR2EPqUeg.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/guMc9QD270iEVYLpEJiAndSyO7G.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/1Z07Kqke0JyOn3ODt2t3qd2CEpN.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/wUpqWb7YZW1Jz2oyF4UJgItYXDC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'el', 'file_path': '/mKq0xiEM0BoETIJ3Mrs4lc5Oamw.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/3viEo7Rt7swwh573wBCZffcM7eo.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/jtB2vPm7Drpw0AToSxKIcxjRcgC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 862, 'iso_639_1': 'tr', 'file_path': '/f1Lt6pJEb25LVEIodLxZDgIhTks.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 574}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/2NaeRiOuxkpWv8s0uBzSlp7SuCn.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gP3KJvuqZGwYEZ0BWXNadYAMFO3.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.75, 'height': 960, 'iso_639_1': None, 'file_path': '/jpoA8SXWQpCsEXDeXbK6xoKccWV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 720}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/c0GcUqVFuklMyuNJuag3NRpGZpu.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/eq5P71YHwwaacEYKaQ72Wxy6BlT.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rc1iRerRJIw3iStmlsdQIZUp49J.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/mBxOeqHQvdF5lxGtDUB6XVcJNi5.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/6XDLzDabcJpuURgilfSTX080lNZ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/ws4Hj54pdDsk2DdIEPDwZU8z5KT.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2366, 'iso_639_1': 'en', 'file_path': '/eTOmj92I7sLydsEXoHE4UPFjynG.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1577}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/tTiMHKsTeA30CXJS3byz2jG1MlR.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.686, 'height': 1311, 'iso_639_1': 'ko', 'file_path': '/stbZZs3WMPr9rvAT92Qd8gXCUfx.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 900}, {'aspect_ratio': 0.695, 'height': 1920, 'iso_639_1': 'ko', 'file_path': '/1EePZmyG7B1Gm9qubLWVtlICDiG.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1335}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/70fWwkCYjsHPhPRUF9OydhbEkVC.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/4Op2hWPNa5JygwbmLs1O1pDAm7L.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/fN0YkgaNUNR8Tf2d4MdpaHwREg8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/pi6mwFCtTDIAHOHWan4AQ36Tdh2.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oAletUf008Es7TQmWIZjjPTQw1R.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/3dboviWGRZdGHXVEKqCU6jq5BX3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 951}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/xwfcNOXVaaauEG6zX73ECq5Vj6k.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.667, 'height': 919, 'iso_639_1': 'en', 'file_path': '/j3U7vzNilUnu3E3zMgBaSSRhTqF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 613}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/ezAOlzdExzNXzmsTxQUTwo6F3gZ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/df17TKgMV104fbEIfPstCkAvBbe.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/s9oQj6ZzPDVeQctL8ZDVchtDquw.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/1u2GII8LtwIRWLyGTotC6AlIZL8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/u0HJjTs5ZQd7jL9QG4mVyUVYqQD.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/fp7cZ3ENxJmKBSA46XrkqGmSZdx.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/h9x3h93HG5iCjevWwUppofmkuwW.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/i6Wdrls4gsFXmwbC2MYmabHOWzn.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/wDnmRGxiA2lUgmxgoFtYdvvzYVN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/3eYugifQ739WRTuG6q5CumYpB6.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/tQnmavK2agVr1jz0CEnPa0hsYBp.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/8EF7hJ1lWRA7ngk1SR0TePbYD6n.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.667, 'height': 1515, 'iso_639_1': 'en', 'file_path': '/6Y3tH8PrZKr0Cv6KroaWlvMIlaU.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1010}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vzvKcPQ4o7TjWeGIn0aGC9FeVNu.jpg', 'vote_average': 5.206, 'vote_count': 9, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/hrJUZ5Jo2G3Czy391evhlxgbEdJ.jpg', 'vote_average': 5.206, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2215, 'iso_639_1': 'es', 'file_path': '/rOD0IgjAop4LA2vuimhNRLyGijf.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1477}, {'aspect_ratio': 0.667, 'height': 1074, 'iso_639_1': 'pt', 'file_path': '/zRwO5BPPgkTNo1PoomZPE7wkKvQ.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 716}, {'aspect_ratio': 0.668, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/irP27RDYv9JjF7fVPKYKUODhr0S.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 750}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'it', 'file_path': '/p2JzxFRAlbxS4EvWMo4yiYZXu1W.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'pt', 'file_path': '/d9EYFtoo4QJMCl5qWzS8zAblAlf.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/nIImGBHeBW90jAxCpp7RwGN2Mgk.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.659, 'height': 990, 'iso_639_1': 'en', 'file_path': '/v4FHdJCRg94cOKX9hwKU9aTad7k.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 652}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'it', 'file_path': '/tCQtssGTb74NQV198XaaTFOxywV.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/z5bRqRQv9UIieAuySQ82CTmtU6t.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/8AYfVmtQX0MgcaAMmowLkvQv47K.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/hg9rnax7IcerZOiOvi2oEshBt7f.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/mZrnY7zrfEqjJKJT8UFs03QlTpe.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'hu', 'file_path': '/tFB5SGE30So69tRz7mebiMSCFZ3.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1401}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/pU1DqL2OhZY8i1FLb74qYWMGASa.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1337, 'iso_639_1': 'pt', 'file_path': '/dqlxzH1DEIFTSYCv6HM0C1sxVB7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 892}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/nOI2Siljlsi0HbzVpcaP2zaI3qO.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.675, 'height': 1481, 'iso_639_1': 'en', 'file_path': '/lAFXWGCUAPSF6v671gaobbfz9mq.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/3opgrJowXttqeFgLRzIdHTLmdHI.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/jDheQYsH7fwtTon6354CWxLxnbc.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/gaivVSK2pOIOAWNGGKyMGpIAC2z.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hDni6zlvNgGW4Li3SIdzhsL54uI.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.684, 'height': 750, 'iso_639_1': 'en', 'file_path': '/A3omWIGbMcGTP43nbQBn75qHjei.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 513}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/6OApdDSChDhlNmi5L2NdL4fverK.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/211ixGjXqxXNe2yeYZTAG5sd4HU.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1434}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/iRpMKBjY1sXcRWL6monOQKBfzAJ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1434}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/je9RusBcFosNylhdRrweTkLkamx.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1433}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/a14jV8DjI5enrPMX3MIRxBoXoMP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1434}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/v1jB1xjTZpW5TYtLaHnagIErFsp.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1433}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/z4h5z2ultilQ4KaEhD2dSsYbqB.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.709, 'height': 2820, 'iso_639_1': 'uk', 'file_path': '/9gtc3GLDCeLZ9vhaq2e0PZQyGDo.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gegAwg4aVl3jpS3oi8sij7fpArL.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/lEeOaKZf16R1cZCuryP859SKgE7.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.742, 'height': 2096, 'iso_639_1': 'en', 'file_path': '/nYvQZLi9P7kmR3lmgkp5tujxiMP.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1555}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/uG4D95vfcZ3SQc7AMpvQCy2kfCT.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bZhj71lpvfAIkHUMdvgftD2h1bY.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.668, 'height': 1498, 'iso_639_1': 'en', 'file_path': '/kOKvBKLCiUx1yk8wVNvp3e1DBWt.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/s9ZLJz5haARLcLm8GGvAeTSslqc.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1999}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6Wkqvkg5EMaJMLuacz4sz8T9ijp.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/5xM2crlkyRwtbbfMQFb26A6NVmr.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/6YUrt0c9Q30UpUYskc0ppbO7DXH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/s6Kf3qHvRKjnZjyVj7YcbhTHrxi.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/zGoxNkACbex9VoAmJS6iAQvXoHs.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2366, 'iso_639_1': 'en', 'file_path': '/nQfJRcsHoEnPX0RY1oHJqQl2gI4.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1577}, {'aspect_ratio': 0.699, 'height': 1700, 'iso_639_1': 'it', 'file_path': '/h7go9xdRhf4fE7rkDzWe7eGUxR6.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1189}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oKXQPPmeAf4zMK5L9WzQuItTI9y.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vak0Hclk3ih11ljYdp6HPYZ1czh.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.676, 'height': 1183, 'iso_639_1': 'en', 'file_path': '/lNYltGAlgtyNmuGKHoX8iQAeit9.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/icpIopNi4fFtgxlcWeRDH5nZPG4.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'it', 'file_path': '/fA2hFBbo1Y8sSIUtUAkUn8UiICI.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 672}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/3gdTo4OmciK2nGFBtAazDpozP95.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4w4TQUzYmiz99Pg5OqjUt1TOEAe.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.655, 'height': 1648, 'iso_639_1': 'zh', 'file_path': '/bVnHnrojrIUMLnLDSSXi3krg4VJ.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1080}, {'aspect_ratio': 0.742, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/zInSl0P8Rk04mgAHz4E1xR1hmmH.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1187}, {'aspect_ratio': 0.692, 'height': 1228, 'iso_639_1': 'bg', 'file_path': '/vt3Jf9fzHKO2WYQNCQQTsXJcdCM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 850}, {'aspect_ratio': 0.693, 'height': 796, 'iso_639_1': 'he', 'file_path': '/y0I9F5u7yianHQuFYzy8xsR94q9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 552}, {'aspect_ratio': 0.667, 'height': 2011, 'iso_639_1': 'cs', 'file_path': '/guG09K0cxo9UJMBlbYRTwh2GylW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1341}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/poNBHaE54CXOtTjmAcnrb729pDQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/xbXzUM2cQoaHNUJrp6kOKFkf3LL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/8MhqFD41aixsEGKQAfycoH4RSR5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/osjIjyDc6le4lqqNZvq9d5qj0jC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/mhiwE3OIgeURZcAecAR1Ew6W2sQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/vXVked88FPWAqVJNX7qqFarBWMP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/i5BTtItJTaqGoZ0hEKlj5SzQOkh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.71, 'height': 1127, 'iso_639_1': 'cn', 'file_path': '/ghmlIwKMK1c0cQDmGH9fnIarQ0t.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'cn', 'file_path': '/zj7PZtHjCOOw1nZ5lARNL4CafaX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/rJFbUt5CVBxOzJkrmaEnGJtma5x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 2304, 'iso_639_1': 'ko', 'file_path': '/u3y3Ex9c69T4hRBZcIIPIrKUXsw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1602}, {'aspect_ratio': 0.75, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/7eNOyX67wrsmJpuFeVmjzVL9KWw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1125}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fi', 'file_path': '/aojNRY7yRJIQ51nkW2q0ApQ9vol.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/cKEM1ERV1lqVH83F95845FO8AW6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/rFiVxVt83lFU5e3UyUjePo8wKeR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.663, 'height': 754, 'iso_639_1': 'en', 'file_path': '/dAUwS3wmSrA9IH02xukDKxB6CQK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.705, 'height': 750, 'iso_639_1': 'en', 'file_path': '/4tkTHjYJ7UHRDLZc1gfQzmEj6Qo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 529}, {'aspect_ratio': 0.7, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/zzcwe9aqLY39rEwULxYmSfOlWuF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 525}, {'aspect_ratio': 0.705, 'height': 750, 'iso_639_1': 'en', 'file_path': '/taqB3T5bt7rgYPozK56GQfU3aBf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 529}, {'aspect_ratio': 0.675, 'height': 1280, 'iso_639_1': 'en', 'file_path': '/zhHWbDF0BdCSUoLmcQMHDqM8cBI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 864}, {'aspect_ratio': 0.724, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/mepdUhSur3MXxM8VCuMaJwLShFJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 543}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'it', 'file_path': '/pDc2SDH2ndElbg93aR2Id9eTgoJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/qVs4jjEngrT71XLclmmJKMr2h72.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/tTOiMCTNSZ1IbLF0GkhKsO5YUb6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/6doRIUrCTNjUEk2WzC3DU6QMG4U.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/bxdRr1isvADfem0j3W5ZwSG6fE6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xHzULcM3LKhw532adNt54SMfdmG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 2048, 'iso_639_1': 'cn', 'file_path': '/8murHJQyYQezDHm3CHn261Zw2zs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1455}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/vIZ4X0FTDNoxhlvGKwv17CEnpUo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iWsnznzdtlgMYBaftnLbu8i1wkg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/zlvv836AMk92uUUWIFY1DWeRUn4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.707, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bkbIkAPWoVsDFJK7ria2fOBFw1A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1061}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/eQ72Hdf6sKBOnzA1HWTx5jYeuzE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/1I0wbQjSg7M2sXj5M6rllkl8sET.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/uZ9i1ivL7rtqY6Z4FxgGkSnF4mZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'en', 'file_path': '/drfusGgi3MnZs7WQROzmWRdCIhf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.666, 'height': 1688, 'iso_639_1': 'en', 'file_path': '/8oKHBckmdhH4EVhH8CE0R2IxTrw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1125}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'en', 'file_path': '/5oZO16FhBzkZ1LcMKIlm92PQQsD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1280}, {'aspect_ratio': 0.666, 'height': 1920, 'iso_639_1': 'en', 'file_path': '/MaLLF6QmfoZvGy4RH3vQTu3eWD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1279}, {'aspect_ratio': 0.672, 'height': 2197, 'iso_639_1': 'ro', 'file_path': '/kGbx95vZRmJGv6yiwDs3GyvK5LF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1476}, {'aspect_ratio': 0.667, 'height': 2147, 'iso_639_1': 'ja', 'file_path': '/z6i9Qc7UMtiSX6TbK2BpfMrFWJN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1431}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'vi', 'file_path': '/1ua0jberyWnXlOQ9JXpVLTb9vjS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/d2ir64IkXExrdLgJXtbqNEduAhZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/1HQavodBAhgkLqr29PPt4Jy2ebF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/jg7vZUBlhF9I3JAGyOjLtPi8N7Q.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bhNfqgdaf8QuVvT75sLx26UzdpE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bcRK1ykUiB0PKGVIvjf0UTlamus.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vmwSCgBIkvJAKqmEPIByHqH4px0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zjlAlpz5HaUL9bZQGg4SYqH55Oo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/3AEGRu7g8U1dwvyvMQmpsQlzODD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hr', 'file_path': '/hPnKJDvliL2cOHFL8xPZ2BmcJ5a.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9wvNBOWpUpqAP4IquQWtNar77av.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1583, 'iso_639_1': 'en', 'file_path': '/eqFhruWEIRwjkvqgJN48VPuR50Q.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1055}, {'aspect_ratio': 0.667, 'height': 853, 'iso_639_1': None, 'file_path': '/geKOL5vnXoqTEH8D2qVoYGIkfys.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 569}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg', 'vote_average': 4.982, 'vote_count': 123, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ptpr0kGAckfQkJeJIt8st5dglvd.jpg', 'vote_average': 6.24, 'vote_count': 89, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/q2uyutja5fBQJ595oEAfticrcfU.jpg', 'vote_average': 5.88, 'vote_count': 124, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/e5H3wpl1t4EOzad9LpjJAhNPka4.jpg', 'vote_average': 5.79, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/boAUuJBeID7VNp4L7LNMQs8mfQS.jpg', 'vote_average': 5.586, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aqZ75oN6yd7UTShYIMNlpSdDbbH.jpg', 'vote_average': 5.568, 'vote_count': 70, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2y48XTa483LRFIb5fDKOwr8DHWz.jpg', 'vote_average': 5.5, 'vote_count': 68, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gC88YsrMe1sKCctzfnV955tcr6c.jpg', 'vote_average': 5.46, 'vote_count': 29, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/eHjIEiEKTnb9euehI7IbCxtGH5N.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/9AiHV08v8RyyuHcO5wuTaTXBxfe.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/4mHVnPcbOmycA5n3AKREsNho1tO.jpg', 'vote_average': 5.412, 'vote_count': 30, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1575, 'iso_639_1': 'zh', 'file_path': '/aGfEOxRPwp5lEeYfUU0cBpQ0k9K.jpg', 'vote_average': 5.412, 'vote_count': 30, 'width': 1050}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/55Mshyp5vXEyZYlGF9phGdR2gsG.jpg', 'vote_average': 5.398, 'vote_count': 14, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/a6v21Mgz2w6OQL7ezkQxGbGA92W.jpg', 'vote_average': 5.396, 'vote_count': 12, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/3yw39HIxi8bS3i0I75GygeOGVbL.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/ncKCQVXgk4BcQV6XbvesgZ2zLvZ.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/iAv3HAlrrIgjcf2yCFvedJzekXT.jpg', 'vote_average': 5.384, 'vote_count': 51, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/8OQzw8keE6sDNH25sOqPRTxhFTO.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/oPfQrmf2YgwSKKdaqDohtk0LciQ.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/c0DCmfC7Et2K3URnIJ4ahJpeXR2.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/rc2naqhwFHtl5xzut3KlUQKed9x.jpg', 'vote_average': 5.372, 'vote_count': 37, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aiFAq6HrEENrP2Hs9UCrjC9siVI.jpg', 'vote_average': 5.342, 'vote_count': 48, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1894, 'iso_639_1': 'es', 'file_path': '/8HCoPfguQ3u1QhiunBBJxHSy2K1.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 1263}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ar', 'file_path': '/fj4Sw2PihpjJkkeyhAWV5x933no.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2048, 'iso_639_1': 'tr', 'file_path': '/mmZi0tyPFfbcCqEsJIPxVldCPOL.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1364}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/oejIAXQupayIdy2H5FKXidNGj02.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'vi', 'file_path': '/ixLH2iM9at8BbuLr5wQWnCfwhJO.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ar', 'file_path': '/qsX1in0bR35lbtS0m9Sdaal02K4.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1284, 'iso_639_1': 'he', 'file_path': '/ywj717tJsdtMjD1iC4dCrSJAYTw.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 856}, {'aspect_ratio': 0.667, 'height': 1863, 'iso_639_1': 'ar', 'file_path': '/2AXxc5qrYsix01mD7uyy7PTMnQq.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1242}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/89fbqq5nnnzroLpD13T4TJ55Llf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2380, 'iso_639_1': 'cs', 'file_path': '/uwOo42nxRKeD5pyG2aREp0Dfu2a.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1587}, {'aspect_ratio': 0.667, 'height': 1941, 'iso_639_1': 'ar', 'file_path': '/95mVJrYVxxZX8y7IA9QJWw21Sxe.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1294}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'bg', 'file_path': '/ooOGz4YyBgp7EewnnpavQISCr25.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'kk', 'file_path': '/yyChRudT9X0C4234kvTSNsvXirf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2846, 'iso_639_1': 'ar', 'file_path': '/cEhBHpf1tyaYM4nMAd6PW9a3oZ3.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1896}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'el', 'file_path': '/efoCIdMmNgSdOlsNwovGxByjlOR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/3syYwwZbmk8xRhFKBYvbiY0B037.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/vkecMXHRfnQ2G3n3BBbRXlrsLbR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/joNffSkuJd4n4GlzDhmCJFwpDyC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/3sUflKm4wyhABAcgSxiB8zDJ3WJ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/5t05uhX5ULn8Um2f1ZuznVvIffU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/k1qmORaMZVfF5vQArYJD8PODapt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.708, 'height': 2542, 'iso_639_1': 'de', 'file_path': '/vrcpQICJZvIfhstaWhprHP2t1pJ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/fRtaxfyynWMJI6DhejyA6JOzVTB.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/jpD6z9fgNe7OqsHoDeAWQWoULde.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/8aL8aGfyKo3KsmLJXuuPZVCeQzB.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'pl', 'file_path': '/qefIXX7dwY8eKfMUcedn98HBMhb.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/dt9ODfEeCnHBZn0rRZMLwudeGAo.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/xtiPrwnOI7cMCXwWC32GQLiWRET.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/vTtUTK447f0OQWUYLEouDg8Yank.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/riSS1kglPxjrM4zxnMsCX6zDEqi.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/j4KO91h5R4jrXHu3yWw1xBnPmyG.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2976, 'iso_639_1': 'en', 'file_path': '/yg7B62JJbJrkBwiQrRf8vMDogLB.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1984}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/AvqMWPV1oyhlceU9Eq0LNRkSKe7.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1382}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'ko', 'file_path': '/kAYtsVpE7q6NhLz6vKYAxOM6LmN.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 947}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2j5oI4E5BRJkdU0UWaelNDo0iZZ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/649ruw8GkG4Ey5JDMXxJDLC6jfD.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bNoTicKwuf13iwqSmmGjjJAQac7.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/jvaI1gezzvhkKid00goKxz9fAso.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aEY57WJu84nUn0b9PknyVAPu3xX.jpg', 'vote_average': 5.248, 'vote_count': 82, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 3000, 'iso_639_1': None, 'file_path': '/47noGzgMSj01xFnpnVUhPeNMfb2.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1999}, {'aspect_ratio': 0.666, 'height': 2048, 'iso_639_1': 'tr', 'file_path': '/ga6K522LfGAlHoTaMbc0kESNn6O.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1364}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'ko', 'file_path': '/4ZLnVUfiCe3wX8Ut9eyujndpyvA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 947}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/ePpU7vi2awWZOzfiDGVRbdsKnde.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'fa', 'file_path': '/fjZv6ATsZxMGJDVC8KRATSnnoLH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1080}, {'aspect_ratio': 0.666, 'height': 1024, 'iso_639_1': 'ru', 'file_path': '/3ZsKFl9BX8bmOoGw2lVmVMHuqdh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 682}, {'aspect_ratio': 0.667, 'height': 2865, 'iso_639_1': 'ko', 'file_path': '/qxv1LPu17lzOZvOrhtQchU1foxy.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1910}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/aefB62fAcx2OxoaSWMEPt5ezvHQ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/wxcbunCEyKxbhuaTjZv91D4f0a5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/cZ7GfieJMbcDmb7HzXo32V8gBNT.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/PnXkWrMH4WHaqD3SjulfK9otmw.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/lrcuwcNiiZjoB68fzvSOPwu9JWv.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/dT00YQDn7wiH5OGO9DziqASAw4j.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/imYs1UAGvlXq0euT2Jee8PbmFWG.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/iCvn9DQkrD1gjizYR7UkOEO1QzQ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8ITnnLLlOB7XhZsj8WOhpICFX5i.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.679, 'height': 1236, 'iso_639_1': 'en', 'file_path': '/3iD4rpmdg82TajZ8fMvfykF7By0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 839}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'en', 'file_path': '/4tbvuLIzuEKfwsNFEhP3i3usCED.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/h2NqJnjixzVGaK0G8EVAtwO1Z8J.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/x2NrJAi1hqYnS5CSRtaqmldMfzW.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/8KBYRWm2EyHKli5quoIVDHCd6F8.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/9zwb8QIbAV2l8cSKHzFIAj1322A.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/7wYG2Rowz7TwOosomGBvuqLAfe5.jpg', 'vote_average': 5.186, 'vote_count': 20, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/5NyGSpXYgJ8ZG0At8URp4muckL0.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/9fZaYcdfuHLCWUYabdVzaZnLHFW.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/idq4eV7xRhEeI2JTOC2PmOjjhTk.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uXhV97FuB8OFt1pSEvIdf3Pnvgg.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ko', 'file_path': '/z3PjbQPksbnAwwzSfLnSph3ZJyA.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/barGT1G6ElVIdyFrOohQ0gtUp4F.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'es', 'file_path': '/lfPDe1GRL5sASJc3yf0YEPwiAmP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/j8zvODfD3ZKx1rizFN3Ai3kqX1O.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1350, 'iso_639_1': 'es', 'file_path': '/sCUySzcdrsHrGmvpkgsQ4bRMhvB.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1350, 'iso_639_1': 'es', 'file_path': '/5GbB0I4zSnc1HeLrErwSMcz31KP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 900}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'cs', 'file_path': '/xluNQVt0p3pXzLWLby0qH1NIeQu.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/jBthaXnKQzdpC2adZsN14KtFGdk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/xPtwGWt72dRDIRlpHgCMmriK1EG.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/umM0Bt8GOqpWhmVbdEY9fg0Op6K.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/5RfTJgNOA1UOysOHtVOXaJWvaCZ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/hjgOCeGIn56Y0syegaceC57k6gP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/25k4Bz7HaoLjOCnVZBz52IJDVQq.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.674, 'height': 1930, 'iso_639_1': 'fa', 'file_path': '/2UBFPLKt5YbYJMov4ToKAbX9dXQ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1300}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/vNcKXmUI4Hvn5VMvCpCWlnoQVz4.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/3bRQcScE7LhTrxAyETY4xHG76cb.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/pkxwlwcYfH1s66Ye2mO5ttOObOO.jpg', 'vote_average': 5.146, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.677, 'height': 2048, 'iso_639_1': 'zh', 'file_path': '/dvSCpCMcfBHqe5etXDDtFHe2Eld.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1387}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'zh', 'file_path': '/3PYDPnCq27g1juniyMvePYtfVSJ.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 947}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/wPYBGNV4KREkgZ4ELBZ2axd6NH6.jpg', 'vote_average': 5.114, 'vote_count': 41, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/eOOjas7U0O2QYvOh2vsN6krVWxX.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1999}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4qFBCufnzW1BubZjJoj1e5H4fhC.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/nu3oii71mRekR6beDNpiihd6GSL.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 799}, {'aspect_ratio': 0.666, 'height': 1178, 'iso_639_1': 'de', 'file_path': '/ePxV40QYOSZgrpBEZOmDtlQRR6g.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 785}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'de', 'file_path': '/9UYo2H6XTPUMpYiTxewsr4laxbz.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 640}, {'aspect_ratio': 0.75, 'height': 1350, 'iso_639_1': 'fr', 'file_path': '/3D9w3Vv1G1YxSdqwKnfiKDXuz1V.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 1012}, {'aspect_ratio': 0.666, 'height': 2560, 'iso_639_1': 'en', 'file_path': '/A5DGdsvMWIDgc75qXzDIX1ufLnh.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1706}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/mgjKNDzFINGvNFtHSqzfUZ4pk6Y.jpg', 'vote_average': 5.018, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ekfE5ChBWPGF5p3VWhrpKgLFYwa.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/t2GFUkjgEfynpmxqHf60cbIrj9Y.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gO6UfLfoOGnbmbrnbF3KMTNqfNC.jpg', 'vote_average': 5.006, 'vote_count': 17, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lTEyneX42noQDG8Cxc8DJvkUB6m.jpg', 'vote_average': 4.996, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/v6614PcDdocBAKYJMkfKaLSMVJA.jpg', 'vote_average': 4.992, 'vote_count': 24, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/3cKaEyoEUhxhnZG48dRG0iufPxs.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/4QCAm7J3nfjZygFQOuWace6ULPX.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7p4JCF9ptaE7Ptc9SLxTPv7QdfH.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/iJOJRVSdKGx3yYdbwfqCiAPHxfK.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2457, 'iso_639_1': 'zh', 'file_path': '/1eCxQQUEhMVS0nWOSD1SlVbGUWI.jpg', 'vote_average': 4.828, 'vote_count': 9, 'width': 1638}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/9Yg7DZE4ip2Yl0K2BUm6hAd8iRK.jpg', 'vote_average': 4.828, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.709, 'height': 2820, 'iso_639_1': 'uk', 'file_path': '/p81GFBwd9YaZnx6luJO5bJOqqHJ.jpg', 'vote_average': 4.81, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/wIAxpY365lKSlSXaM8BH7pB3y0M.jpg', 'vote_average': 4.6, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/mesnygQJfEJaWMA89rLk8VEZNj8.jpg', 'vote_average': 4.398, 'vote_count': 18, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/pyWvLGCaaI7N8U92BRLBNul2vuI.jpg', 'vote_average': 4.398, 'vote_count': 18, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/gF1XEP9gfE6og6s8MGvyFI4Muig.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/q7zrl3Kvu9E3t1ZCzm8w0lOaQW5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 2100, 'iso_639_1': 'th', 'file_path': '/xloEW5DQGqkR9i4EbJ0RXag3DIS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1399}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cn', 'file_path': '/or2wuvAbf2AG9MWylxPUisb85Ew.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'cs', 'file_path': '/uejpfeP1atdbdEea84cHFNKL24g.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 947}, {'aspect_ratio': 0.71, 'height': 1080, 'iso_639_1': 'cn', 'file_path': '/ObORCPqtaZgRhIvPnTTXGk5rAN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 767}, {'aspect_ratio': 0.666, 'height': 800, 'iso_639_1': 'th', 'file_path': '/ryW8AqLEt7viQZI40obvCVgKyEF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 533}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/guswIMwCLrDDrLfyiUBJJktmhBh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1351, 'iso_639_1': 'ar', 'file_path': '/y3I2XL5436scaaiQh5cfSXHEHnV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1587, 'iso_639_1': 'lt', 'file_path': '/tYFY9CkTy6yoaqTZTEu1IAtMBgT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1058}, {'aspect_ratio': 0.71, 'height': 1126, 'iso_639_1': 'cn', 'file_path': '/atkSaDwZEcINEaoL0JF25DDdcni.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aDIFDU7niNbIHUp5vdCsSxthpeW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1420, 'iso_639_1': 'ko', 'file_path': '/pb9giHGBgA4wbRREbbd8XL4XaN7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 947}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/akndvu1UcoMrEh4NQHXRLxGPTGg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/dW9C0FKB3HvwugUUtKXEXBFqcIL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2304, 'iso_639_1': 'en', 'file_path': '/t0uXoXeF9GMdviHgMW7UQzQ4eSG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1536}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/utCBEg4YNuZYaWSZaY13MXj1Z9G.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/m75xCRghGBAyXRKuiWbJvDPPGrS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2976, 'iso_639_1': 'en', 'file_path': '/eb6vkfY72J5gZhEnnRncsXSDftz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1984}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'nl', 'file_path': '/jtTHxuJhuZpFAnCI4vGjg1LGmpY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/qp595lmvI6UTWb1Gc8DD5SnLHnm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.739, 'height': 1623, 'iso_639_1': 'sk', 'file_path': '/gz0LUZClgzS6hCzurFk89e5G5d1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/aQxeSwWXB3NaRTiN1DRNHIxReAG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/1YX789imfZI5xaztsaqmtz6DVmX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/dRRjhIncQlg2Kak1oASyzGEtZ0t.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/kphZJTxd47ThurGYP01s67m8Dmt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1367, 'iso_639_1': 'en', 'file_path': '/6uq1c4QTytke0y2NWUsCpi0tISw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 911}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/bbYXxNaOAFtJjQnygqPKm13AC7a.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/hRJNOQBGkdU7K7DZTB9pGVYpfok.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.679, 'height': 1236, 'iso_639_1': 'en', 'file_path': '/j5GfnhEeBTl46SSc54CMDouRE7Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 839}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/kR32sxbb7wNK5pJLlwTido7RCAz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/x451yAdEA1OAnt5P2KVRgMoV5Ba.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 2702, 'iso_639_1': 'cn', 'file_path': '/cp7zu2Spi1hkkeI408Ebrhv4zc1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.701, 'height': 1152, 'iso_639_1': 'ru', 'file_path': '/lnxdR1XCdhV268bwOykdsRcUN1x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 808}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/hZcoR85iY5uDvzlSxAYTGvOLvV9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/mXOpcMOEruhz4BX3vXnIYe3rYDM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/udw0rc91ixvWneOwuEftXOfzF0x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cn', 'file_path': '/yef6p6pDg3YNk8I31wlQpotsaYa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/obAL7JCj46c7ogTt0PERbEYJlXn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/44ZIBFFkkVtBPtjdC2aPMH4YeYf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2842, 'iso_639_1': 'zh', 'file_path': '/5s3LUmU4G5ogVueGsWdbSTnMA0o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1895}, {'aspect_ratio': 0.675, 'height': 2963, 'iso_639_1': 'zh', 'file_path': '/6TgpVL16UT5ptzRrepVUaYjrg2Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/94UsD1QNU1f4tlkj8Ex3Jim4dj4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.707, 'height': 1527, 'iso_639_1': 'ja', 'file_path': '/1jLg9oKyMfQlcLtAUskZ5MDra5W.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/9cObSJoxDSVclz9OJzZiSUsYF4i.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1110, 'iso_639_1': None, 'file_path': '/iY1FDQM6taKwO7bG6YH09nE8NSs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 740}, {'aspect_ratio': 0.667, 'height': 2454, 'iso_639_1': None, 'file_path': '/7QjqXSW8pl2PCSaYSUHdO1qc0vh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1636}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/uL0iqPb4dtICVCCMKYem2yRPBRX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ]
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API URL\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for searching the movie \"Titanic\"\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False,  \n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the movie id of Titanic from the response\n    movie_id = response.json()[\"results\"][0][\"id\"]\n    \n    # Call the API to get keywords associated with the Titanic movie\n    keywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n    keywords_response = requests.get(keywords_url, headers=headers)\n    \n    # Extract and print the keywords associated with the Titanic movie\n    if keywords_response.status_code == 200:\n        keywords = keywords_response.json()[\"keywords\"]\n        common_keywords = [keyword[\"name\"] for keyword in keywords]\n        print(common_keywords)\n    else:\n        print(\"Failed to fetch keywords associated with the movie Titanic.\")\nelse:\n    print(\"Failed to fetch movie details for Titanic.\")\n```",
        "usage": [
            261,
            10298,
            10559
        ],
        "executed": "['epic', 'ship', 'drowning', 'panic', 'shipwreck', 'evacuation', 'iceberg', 'titanic', 'forbidden love', 'ocean liner', 'based on true story', 'rich woman poor man', 'love', 'tragedy', 'tragic love', 'disaster', 'historical fiction', 'class differences', 'love affair', 'historical event', 'lifeboat', 'star crossed lovers', 'sinking ship', 'steerage', 'rich snob', 'disaster movie', '1910s', 'sunken ship']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "Give me a show that is currently on the air",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url for getting a list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Parameters for the request, in this case we will just specify the page as 1\nparams = {\n    \"page\": 1\n}\n\n# Http headers for the API call\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n# Print the response\nprint(response.json())\n```",
        "usage": [
            276,
            11943,
            12219
        ],
        "executed": "{'page': 1, 'results': [{'adult': False, 'backdrop_path': '/h0y3OzHzG4yNvn8u3Za6ByH8lrQ.jpg', 'genre_ids': [18, 10766], 'id': 45789, 'origin_country': ['DE'], 'original_language': 'de', 'original_name': 'Sturm der Liebe', 'overview': 'These are the stories of relationships taking place in the fictional five-star hotel F\u00fcrstenhof, located in Feldkirchen-Westerham near Rosenheim with the plot revolving around members of the family room area, the hotel owners, and employees.', 'popularity': 4153.22, 'poster_path': '/9oZjOh3Va3FsiLGouhSogFsBX9G.jpg', 'first_air_date': '2005-09-26', 'name': 'Sturm der Liebe', 'vote_average': 7.25, 'vote_count': 14}, {'adult': False, 'backdrop_path': '/eWF3oRyL4QWaidN9F4uvM7cBJUV.jpg', 'genre_ids': [10766], 'id': 206559, 'origin_country': ['ZA'], 'original_language': 'af', 'original_name': 'Binnelanders', 'overview': 'A South African Afrikaans soap opera. It is set in and around the fictional private hospital, Binneland Kliniek, in Pretoria, and the storyline follows the trials, trauma and tribulations of the staff and patients of the hospital.', 'popularity': 3868.199, 'poster_path': '/v9nGSRx5lFz6KEgfmgHJMSgaARC.jpg', 'first_air_date': '2005-10-13', 'name': 'Binnelanders', 'vote_average': 6.063, 'vote_count': 40}, {'adult': False, 'backdrop_path': '/9TXcHOeCsM8W3ZKKIKjdYUsRSeq.jpg', 'genre_ids': [80, 18], 'id': 72879, 'origin_country': ['FR'], 'original_language': 'fr', 'original_name': 'Demain nous appartient', 'overview': 'The story revolves around the people of S\u00e8te, France. Their lives are punctuated by family rivalries, romance and scenes from daily life, but also by plots involving police investigations, secrets and betrayals.', 'popularity': 3448.184, 'poster_path': '/3uU5uJzOX7xe7mn7YKpBM9oiEZO.jpg', 'first_air_date': '2017-07-17', 'name': 'Tomorrow Is Ours', 'vote_average': 6.125, 'vote_count': 55}, {'adult': False, 'backdrop_path': '/mpcrV6RKlXxTsOCt7K70pJzNzNI.jpg', 'genre_ids': [10767], 'id': 204746, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Jennifer Hudson Show', 'overview': 'Talented entertainer and newly-minted EGOT Jennifer Hudson takes on the daytime talk show landscape.', 'popularity': 3326.458, 'poster_path': '/6VBNeo8XG90sNKWYQ0yTEmVBXHJ.jpg', 'first_air_date': '2022-09-12', 'name': 'The Jennifer Hudson Show', 'vote_average': 6.5, 'vote_count': 12}, {'adult': False, 'backdrop_path': '/lhdUwhInXu31qHm65jwBAlpTp8P.jpg', 'genre_ids': [10767], 'id': 82873, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Kelly Clarkson Show', 'overview': 'Kelly Clarkson presents the biggest newsmakers and names in film, television and music; as well as emerging new talent and everyday people who are beacons of hope in their communities.', 'popularity': 3325.982, 'poster_path': '/9Gg1oM8Us8gCS5aJA8e0ZRuIHnf.jpg', 'first_air_date': '2019-09-09', 'name': 'The Kelly Clarkson Show', 'vote_average': 6.243, 'vote_count': 35}, {'adult': False, 'backdrop_path': '/qZ7CdO7rkH0KyCxvZBoP4Mm2cQL.jpg', 'genre_ids': [10767, 99], 'id': 132544, 'origin_country': ['KR'], 'original_language': 'ko', 'original_name': '\uc704\ub300\ud55c \uc218\uc5c5, \uadf8\ub808\uc774\ud2b8 \ub9c8\uc778\uc988', 'overview': '', 'popularity': 3239.594, 'poster_path': '/lj46PSaBziqCqbGXlmnXN325biA.jpg', 'first_air_date': '2021-08-30', 'name': 'Great Minds', 'vote_average': 5.333, 'vote_count': 12}, {'adult': False, 'backdrop_path': '/kaiKuIEc8c0nhDVYcjWYJGD7eDC.jpg', 'genre_ids': [10764], 'id': 75685, 'origin_country': ['CZ'], 'original_language': 'cs', 'original_name': 'Prost\u0159eno!', 'overview': 'The knives (and forks) are out as a group of strangers compete for the title of ultimate dinner party host. And the money on the table adds spice to the proceedings...', 'popularity': 3138.372, 'poster_path': '/lh8GGzReYg4uoIjpveARaPgd4ZY.jpg', 'first_air_date': '2010-03-01', 'name': 'Prost\u0159eno!', 'vote_average': 6.2, 'vote_count': 5}, {'adult': False, 'backdrop_path': '/rj3jBAZwPiOgkwAy1205MAgLahj.jpg', 'genre_ids': [10766], 'id': 81329, 'origin_country': ['FR'], 'original_language': 'fr', 'original_name': 'Un si grand soleil', 'overview': 'Claire is surprised when she gets arrested for the murder of her childhood friend after she returns to Montpellier.', 'popularity': 3122.277, 'poster_path': '/t6jVlbPMtZOJoAOfeoR4yQmnjXM.jpg', 'first_air_date': '2018-08-27', 'name': 'Chronicles of the Sun', 'vote_average': 7.329, 'vote_count': 70}, {'adult': False, 'backdrop_path': '/y4w232QOzDD1McRocp2htMVmF3b.jpg', 'genre_ids': [10763, 35], 'id': 2224, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Daily Show', 'overview': \"The World's Fakest News Team tackle the biggest stories in news, politics and pop culture.\", 'popularity': 3058.961, 'poster_path': '/ixcfyK7it6FjRM36Te4OdblAq4X.jpg', 'first_air_date': '1996-07-22', 'name': 'The Daily Show', 'vote_average': 6.297, 'vote_count': 489}, {'adult': False, 'backdrop_path': '/gMMnf8VRg3Z98WaFmOLr9Jk8pIs.jpg', 'genre_ids': [35, 10767], 'id': 63770, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Late Show with Stephen Colbert', 'overview': 'Stephen Colbert brings his signature satire and comedy to The Late Show with Stephen Colbert, the #1 show in late night, where he talks with an eclectic mix of guests about what is new and relevant in the worlds of politics, entertainment, business, music, technology, and more. Featuring bandleader Jon Batiste with his band Stay Human, the Emmy Award-nominated show is broadcast from the historic Ed Sullivan Theater. Stephen Colbert, Chris Licht, Tom Purcell, and Jon Stewart are executive producers. Barry Julien and Denise Rehrig serve as co-executive producers.', 'popularity': 2984.402, 'poster_path': '/9jkThAGYj2yp8jsS6Nriy5mzKFT.jpg', 'first_air_date': '2015-09-08', 'name': 'The Late Show with Stephen Colbert', 'vote_average': 6.5, 'vote_count': 242}, {'adult': False, 'backdrop_path': '/4W2sH4CXzJ98ScuLGRij1KakzSv.jpg', 'genre_ids': [10751, 35], 'id': 230525, 'origin_country': ['KR'], 'original_language': 'ko', 'original_name': '\uc6b0\ub2f9\ud0d5\ud0d5 \ud328\ubc00\ub9ac', 'overview': 'A romantic family drama about a divorced couple who broke up 30 years ago out of hate, reuniting as in-laws through their children and overcoming long overdue conflicts and enmity.', 'popularity': 2928.411, 'poster_path': '/goMzJ6rxTndGki2pKpyAKuKNXHY.jpg', 'first_air_date': '2023-09-18', 'name': 'Unpredictable Family', 'vote_average': 6.667, 'vote_count': 6}, {'adult': False, 'backdrop_path': '/5AkPhazx8F0Ht74CUdJU03vNzBi.jpg', 'genre_ids': [10767, 35], 'id': 61818, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Late Night with Seth Meyers', 'overview': 'Seth Meyers, who is \"Saturday Night Live\u2019s\" longest serving anchor on the show\u2019s wildly popular \"Weekend Update,\" takes over as host of NBC\u2019s \"Late Night\" \u2014 home to A-list celebrity guests, memorable comedy and the best in musical talent. As the Emmy Award-winning head writer for \"SNL,\" Meyers has established a reputation for sharp wit and perfectly timed comedy, and has gained fame for his spot-on jokes and satire. Meyers takes his departure from \"SNL\" to his new post at \"Late Night,\" as Jimmy Fallon moves to \"The Tonight Show\".', 'popularity': 2883.773, 'poster_path': '/x5asOuPOjW21e0Ykkvkuzu1TGEl.jpg', 'first_air_date': '2014-02-25', 'name': 'Late Night with Seth Meyers', 'vote_average': 5.5, 'vote_count': 76}, {'adult': False, 'backdrop_path': '/butPVWgcbtAjL9Z7jU7Xj1KA8KD.jpg', 'genre_ids': [10767, 35], 'id': 22980, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Watch What Happens Live with Andy Cohen', 'overview': 'Bravo network executive Andy Cohen discusses pop culture topics with celebrities and reality show personalities.', 'popularity': 2860.193, 'poster_path': '/onSD9UXfJwrMXWhq7UY7hGF2S1h.jpg', 'first_air_date': '2009-07-16', 'name': 'Watch What Happens Live with Andy Cohen', 'vote_average': 5.25, 'vote_count': 38}, {'adult': False, 'backdrop_path': '/5S0SI4NjyMji05OPL0GOZ4BsiMh.jpg', 'genre_ids': [10764], 'id': 136166, 'origin_country': ['NL'], 'original_language': 'nl', 'original_name': 'Lang Leve de Liefde', 'overview': '', 'popularity': 2844.492, 'poster_path': '/9lpvvzEl5kViIc2vUJG4QKzj2ds.jpg', 'first_air_date': '2020-01-20', 'name': 'Lang Leve de Liefde', 'vote_average': 2.667, 'vote_count': 3}, {'adult': False, 'backdrop_path': '/yWVqYVOUcS6vu22v4BPXKJW10m5.jpg', 'genre_ids': [10764, 10751], 'id': 206679, 'origin_country': ['CZ'], 'original_language': 'cs', 'original_name': 'Na lovu', 'overview': 'Na Lovu is a Czech game-show, based on the license of the popular global format The Chase. A heart-racing quiz show where four competitors must pit their wits and face off against Lovec (the Chaser), a ruthless quiz genius determined to stop them from winning cash prizes.', 'popularity': 2774.066, 'poster_path': '/udJ1wVuOwFg1q6UBcQGwcpcdIYF.jpg', 'first_air_date': '2021-08-16', 'name': 'Na lovu', 'vote_average': 8.0, 'vote_count': 2}, {'adult': False, 'backdrop_path': '/i8iqYtAy9qcO5RSrA1f6fY1n6SN.jpg', 'genre_ids': [10766], 'id': 235484, 'origin_country': ['ZA'], 'original_language': 'af', 'original_name': 'Suidooster', 'overview': 'Suidooster is a South African television soap opera produced by Suidooster Films which revolves around a matriarch, her family, friends and the people of Suidooster, a small shopping and business centre in the fictional Cape Town suburb of Ruiterbosch.', 'popularity': 2747.235, 'poster_path': '/u4tPY6df9atOne5soyW7vUyRgvD.jpg', 'first_air_date': '2015-11-16', 'name': 'Suidooster', 'vote_average': 8.0, 'vote_count': 7}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18, 35], 'id': 36361, 'origin_country': ['CZ'], 'original_language': 'cs', 'original_name': 'Ulice', 'overview': 'Ulice is a Czech soap opera produced and broadcast by Nova. In the Czech language Ulice means street.\\n\\nThe show describes the lives of the Farsk\u00fd, Jord\u00e1n, Boh\u00e1\u010d, Nikl, and Li\u0161ka families and many other people that live in Prague. Their daily battle against real problems of living in a modern world like divorce, love, betrayal and illness or disease. Ulice often shows crime.', 'popularity': 2745.162, 'poster_path': '/3ayWL13P1HeRnyVL9lU9flOdZjq.jpg', 'first_air_date': '2005-09-05', 'name': 'Ulice', 'vote_average': 3.333, 'vote_count': 18}, {'adult': False, 'backdrop_path': '/uFDlUMdp3NoXhnveAfgSpty8vBy.jpg', 'genre_ids': [10767], 'id': 108188, 'origin_country': ['AT'], 'original_language': 'de', 'original_name': 'Barbara Karlich \u2013 Talk um 4', 'overview': 'A talk show produced by ORF since 1999 and broadcast on ORF 2.', 'popularity': 2691.44, 'poster_path': '/1NAVqNAKXbFbBzl9P52boCOUACJ.jpg', 'first_air_date': '1999-10-27', 'name': 'Barbara Karlich \u2013 Talk um 4', 'vote_average': 3.5, 'vote_count': 2}, {'adult': False, 'backdrop_path': '/vqlsnDsDb2izWcMNLXRyuU81CEm.jpg', 'genre_ids': [18], 'id': 233090, 'origin_country': ['KR'], 'original_language': 'ko', 'original_name': '\uc138 \ubc88\uc9f8 \uacb0\ud63c', 'overview': 'Love and marriage bloom in a game of truth with a woman who lives a fake life and a woman who tries to reveal it.', 'popularity': 2614.634, 'poster_path': '/mRP8Ehrfe1X2eoOBxK24ZGQv4gn.jpg', 'first_air_date': '2023-10-23', 'name': 'The Third Marriage', 'vote_average': 10.0, 'vote_count': 1}, {'adult': False, 'backdrop_path': '/zW0v2YT74C6tRafzqqBkfSqLAN0.jpg', 'genre_ids': [10759, 10765], 'id': 52814, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Halo', 'overview': 'Depicting an epic 26th-century conflict between humanity and an alien threat known as the Covenant, the series weaves deeply drawn personal stories with action, adventure and a richly imagined vision of the future.', 'popularity': 2598.129, 'poster_path': '/hmHA5jqxN3ESIAGx0jAwV7TJhTQ.jpg', 'first_air_date': '2022-03-24', 'name': 'Halo', 'vote_average': 8.327, 'vote_count': 2346}], 'total_pages': 66, 'total_results': 1303}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Clint Eastwood\nclint_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Clint Eastwood\",\n    \"include_adult\": False\n}\nresponse = requests.get(clint_search_url, headers=headers, params=params)\nclint_id = response.json()[\"results\"][0][\"id\"]\n\n# Get Clint Eastwood's movie credits\nclint_movie_credits_url = f\"https://api.themoviedb.org/3/person/{clint_id}/movie_credits\"\nresponse = requests.get(clint_movie_credits_url, headers=headers)\nlatest_movie_release_date = response.json()[\"cast\"][0][\"release_date\"]\n\nprint(\"Clint Eastwood's latest movie release date:\", latest_movie_release_date)\n```",
        "usage": [
            340,
            11990,
            12330
        ],
        "executed": "Clint Eastwood's latest movie release date: 1997-02-14\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Dark Knight\" to get its movie ID\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"The Dark Knight\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\nmovie_id = search_results['results'][0]['id']\n\n# Get the reviews for the movie with the retrieved movie ID\nreviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\nreviews_params = {\n    \"page\": 1\n}\nreviews_response = requests.get(reviews_url, headers=headers, params=reviews_params)\nreviews = reviews_response.json()['results']\n\n# Print the reviews\nfor review in reviews:\n    print(\"Author:\", review['author'])\n    print(\"Content:\", review['content'])\n    print(\"------\")\n```",
        "usage": [
            362,
            9273,
            9635
        ],
        "executed": "Author: tricksy\nContent: Excellent movie. Best of the trilogy. Lovely music. Nolan is a genius. So is Heath Ledger.\n------\nAuthor: talisencrw\nContent: This has no competition. It is the very finest comic-book character movie ever made. Knowing the Burton, Donner and Nolan filmic adaptations of Batman and Superman exist helps me to sleep at night. They are Exhibit A of 'How to Make a Comic-Book Movie'. Nothing else has ever come even remotely close. These seven films (I include 'Superman II' because it was mostly Donner's work)--and Nolan's trilogy especially--are what I imagine a great director like Kubrick, Hitchcock or Kurosawa would have come up with, if they had ever been asked to make a Superman or Batman movie. They are the easiest for an audience to identify with because in these the scripts most approximate human emotions and the typical conundrums of the human experience--in short, are the closest, in a good way, they come to the complexities of the human condition. Peerless.\n------\nAuthor: erickprieto\nContent: Perhaps the best Batman movie of all times. I think that this Batman trilogy presents the well-known superhero history in an unexpected way with the capable to maintain on the edge of the chair all time.\r\n**Heath Ledger** present an excellent impersonification of a psychopath.\r\nAll support roles are magnificent.\r\nAnd Bruce Wayne role played by Christian Bale, shows a human being behind of the mask.\n------\nAuthor: moubledian\nContent: I used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\r\n\r\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it's definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\r\n\r\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\r\n\r\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson's portrayal is true unpredictability. It's obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn't easy. How exactly does one take him down when he's woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\r\n\r\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\r\n\r\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can't represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we've seen just the prelude to the Dark Knight's upcoming legendary battles with the worst of Gotham City's dark underside.\r\n\r\n\"The Dark Knight\" gets a solid 10 of 10 stars.\r\n\r\nI used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\r\n\r\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it's definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\r\n\r\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\r\n\r\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson's portrayal is true unpredictability. It's obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn't easy. How exactly does one take him down when he's woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\r\n\r\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\r\n\r\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can't represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we've seen just the prelude to the Dark Knight's upcoming legendary battles with the worst of Gotham City's dark underside.\r\n\r\n\"The Dark Knight\" gets a solid 10 of 10 stars.\r\n\r\nI used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\r\n\r\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it's definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\r\n\r\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\r\n\r\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson's portrayal is true unpredictability. It's obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn't easy. How exactly does one take him down when he's woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\r\n\r\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\r\n\r\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can't represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we've seen just the prelude to the Dark Knight's upcoming legendary battles with the worst of Gotham City's dark underside.\r\n\r\n\"The Dark Knight\" gets a solid 10 of 10 stars.\n------\nAuthor: tmdb22590444\nContent: One of the best movies of all time. Christopher Nolan has brought us the Batman trilogy that it made it feel it could happen today. Christian Bale returns as Batman, was able to perform as wonderfully as he did in Batman Begins. The one person that ultimately stole the show had to be the late Heath Ledger who played as the Joker. His performance as a psychotic clown terrorizing Gotham City was one of the best performance as a superhero villain. One of the best parts of the Joker was when he was telling his victims on how \u201che got his scars?\u201d. Another great part was when he kidnapped a police officer and he was recording it while scaring the man and also giving a warning to Batman. The supporting actor and actresses did a good job of delivering the story. I was disappointed that Katie Holmes did not return as Rachael Dawes but the actress how played as her Maggie Gyllenhaal did a really good job. One of the best parts of Christopher Nolan is that in every movie of his, the cinematography would look amazing and this movie is no exception.\n------\nAuthor: tmdb79614358\nContent: A Masterpiece!!! I Love how The Dark Knight shows to me the \"Dark & Gritty Tone\". Overall, Nolan give us the Game changing, best superhero film OF ALL TIME. For me it's 10/10\n------\nAuthor: EDSR\nContent: A sickening, borderline fascist film that is simultaneously dull and harmful. The editing represents that of an anti-pirate commercial and the politics are beyond reprehensible. The film ends with a monologue about how violent law-enforcement and brutality is what the country needs, but does not deserve. Nolan clearly did not intend for any subtext, yet that is not an excuse, if anything, that makes it worse. He includes these scenes to make the film more dark and edgy, yet there are people, from suppressed countries, who have to live through the hardships of violence from law-enforcers and dictatorship every day, and in his obliviousness, Nolan thinks that using this in a superhero film is a good excuse for self-importance. He is a war profiteer, and exploiter, and this is nothing short of disgusting.\n------\nAuthor: AstroNoud\nContent: Unforgettable crime film with good dialogue, thrilling action and chase scenes and once again a magnificent cast (most notably a terrifically terrifying Ledger) and superb score.\r\n\r\n10/10\n------\nAuthor: CinemaSerf\nContent: Heath Ledger is outstanding in this follow up to the 2006 \"Batman Begins\" outing for the caped crusader. His portrayal of the malevolent \"Joker' is confident and highly entertaining, treading a fine line between supreme intellect and total insanity with considerable aplomb. He comes back to terrorise \"Gotham\" after \"Batman\" (Christian Bale), \"Gordon\" (Gary Oldman) - now Commissioner in charge of the police force, and newly installed District Attorney \"Dent\" (Aaron Eckhart) had made progress getting the criminals off the street. The \"Joker\", meantime, decides that the best strategy is to rob the mob - and pitching them all against each other, and with the help of the duplicitous \"Lau\" (Chin Han) manages to secure enough of their funds to initiate a campaign of lawlessness that is ruthless, manipulative and good fun to watch. Not only has the man in black his new, potent, nemesis to deal with - but he also begins to realise that his childhood sweetheart \"Rachel\" (this time Maggie Gyllenhaal) is drifting into the arms of the new DA. it is also pretty clear that they are both now proving to be an useful additional weapon in the armoury of his enemy who knows, increasingly, which buttons to press to cause maximum anxiety among those who would bring him down. It's over 2\u00bd hours long, but really does fly by as the quickly paced action really does kick in right from the start. The story is dark and gritty but the pace isn't ponderous and moody - Ledger exudes a sense of peril throughout the whole thing, but that has an edge to it - a sophistication that plays well against the flawed superhero who is increasingly having to identify and cope with his own demons. Sir Michael Caine pops up now and again as his shrewd butler \"Alfred\", always striving to keep his boss on the right side of sanity, and Morgan Freeman continues to feature (sparingly) and his quartermaster. On that latter front, there are loads of new gadgets that still have that element of plausibility to them (no super-powers!). On balance I think I still preferred the first film, but as sequels go - this takes, and will take, some beating. On a big screen in a packed cinema, it's just a great experience.\n------\nAuthor: The Movie Mob\nContent: **Overall : A cinematic marvel and once-in-a-decade masterpiece.**\r\n\r\nThis isn't simply a superhero movie or a Christopher Nolan film. The Dark Knight is a masterpiece. A perfect film. An epic scale with magnificent action pieces, oscar-winning performances, incredible writing, excellent pacing, dazzling special effects, and the list goes on and on, including the set design, costumes, and more. But, Christopher Nolan did more than make the greatest superhero movie of all time. He made one of the greatest movies of all time! All this is elevated further by Heath Ledger's once-in-a-lifetime portrayal of the Joker. Ledger was born for this role with a performance in league with Anthony Hopkins' Hannibal Lecter or Val Kilmer's Doc Holliday.\n------\nAuthor: drystyx\nContent: Even worse than Tim Burton's Batman, although obviously copying the neo Nazi ideology of \"kill all the brunettes you can in a movie\".\r\nThis is so predictable and so poorly written that it boggles the mind. Yet there is a fan base of what can only be described as neo Nazis. I guess those fans were poor cuckolds who got jilted by too many brunettes at a young age, and they couldn't get over it.\r\nThat's about the entire story here. Oh, the Joker kills anything he sees. Whoopee. And he's invulnerable. And he's a demigod who can only be beaten by another demigod.\r\nSo, we've got traditional mundane Greek heroes and villains here, just like most Hollywood movies.\r\nUnfortunately, the fans of these traditional Hollywood movies are the loudest people on Earth, and the biggest control freaks. It's ridiculous to believe there are actually this big a percentage of fans for this kind of depressing Hollywood formula movie making, but if you look at Imdb's top 250, you see such movies make up over half of the top 250. Are they voted up because control freaks vote more than non control freaks? Or are they voted up because control freaks use many fake user names? Probably both, which explains why over half of the top 250 are nothing more than Greek traditional idolizations of control freaks.\r\nOh, and Batman turns totally gay, which would be okay if he'd admit it, but he's given the choice of saving a man from death or a hot woman from death, and he chooses to save the man. This isn't any real Batman. It's just another contrived story line for the Nolan Nazi merit badge. They are not even subtle. They bang you over the head with their worship of Adolf and Eva. \r\nGod help the world if this garbage still has a fan base fifty years from now. But it could happen. We may have drug addicts and meth heads around for even longer than that, praising the hate and feeding the hate. It would be nice if someone made a real Batman movie with a real story line involving some degree of motivation.\n------\nAuthor: Andre Gonzales\nContent: I enjoyed watching the Dark Knight. They were at least able to keep the same batman from the the last one made too.\n------\nAuthor: JN2012\nContent: If I can hold my pee for a whole two and a half hours rewatching a film I\u2019ve already seen then I love it.\n------\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the base url for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the director id of Francis Ford Coppola\ndef get_director_id(name):\n    # Define the endpoint for searching a person\n    endpoint = \"/search/person\"\n    url = base_url + endpoint\n\n    # Define the parameters for the API call\n    params = {\n        \"query\": name,\n        \"page\": 1,\n        \"include_adult\": False\n    }\n\n    # Make the API call\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n\n    # Extract the director id\n    director_id = data['results'][0]['id']\n    return director_id\n\n# Get the director id for Francis Ford Coppola\ndirector_name = \"Francis Ford Coppola\"\ndirector_id = get_director_id(director_name)\n\n# Function to get the movies similar to the ones directed by Francis Ford Coppola\ndef get_similar_movies(director_id):\n    # Define the endpoint for similar movies\n    endpoint = f\"/person/{director_id}/movie_credits\"\n    url = base_url + endpoint\n\n    # Make the API call\n    response = requests.get(url, headers=headers)\n    data = response.json()\n\n    # Extract the similar movies\n    similar_movies = data['cast']\n    return similar_movies\n\n# Get the similar movies to the ones directed by Francis Ford Coppola\nsimilar_movies = get_similar_movies(director_id)\n\n# Extract relevant information from the output\noutput = []\nfor movie in similar_movies:\n    output.append({\n        \"title\": movie[\"title\"],\n        \"release_date\": movie[\"release_date\"],\n        \"overview\": movie[\"overview\"]\n    })\n\nprint(output)\n```",
        "usage": [
            549,
            11327,
            11876
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Use the API url to get the details of the most recently released movie\nurl = \"https://api.themoviedb.org/3/movie/latest\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful and get the lead actor's name\nif response.status_code == 200:\n    movie_data = response.json()\n    if 'credits' in movie_data:\n        credits_url = f\"https://api.themoviedb.org/3/movie/{movie_data['id']}/credits\"\n        credits_response = requests.get(credits_url, headers=headers)\n        if credits_response.status_code == 200:\n            cast_data = credits_response.json()\n            if 'cast' in cast_data and len(cast_data['cast']) > 0:\n                lead_actor = cast_data['cast'][0]['name']\n                print(f\"The lead actor in the latest released movie is: {lead_actor}\")\n            else:\n                print(\"Lead actor information not found.\")\n        else:\n            print(\"Error fetching cast details.\")\n    else:\n        print(\"Error: Credits information not found.\")\nelse:\n    print(\"Error fetching movie details.\")\n```",
        "usage": [
            409,
            11927,
            12336
        ],
        "executed": "Error: Credits information not found.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url for getting list of movies playing in theaters\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"  # Optional parameter to filter by region (United States)\n}\n\n# Headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting the image path of the first movie in the list\nif response.status_code == 200:\n    data = response.json()\n    if len(data[\"results\"]) > 0:\n        first_movie = data[\"results\"][0]\n        if \"poster_path\" in first_movie:\n            image_path = first_movie[\"poster_path\"]\n            print(\"Image URL:\", image_path)\n        else:\n            print(\"No image path available for the movie\")\n    else:\n        print(\"No movies found in theaters\")\nelse:\n    print(\"Failed to fetch movie list:\", response.status_code)\n```",
        "usage": [
            385,
            13851,
            14236
        ],
        "executed": "Image URL: /hu40Uxp9WtpL34jv3zyWLb5zEVY.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get a list of the current popular movies\nurl_popular_movies = \"https://api.themoviedb.org/3/movie/popular\"\nparams = {\n    \"page\": 1,  # Query the first page\n    \"region\": \"US\"  # Filter by US region\n}\nresponse_popular_movies = requests.get(url_popular_movies, headers=headers, params=params)\ndata_popular_movies = response_popular_movies.json()\n\n# Get the most popular movie id\nmost_popular_movie_id = data_popular_movies['results'][0]['id']\n\n# Call the API to get the keywords of the most popular movie\nurl_movie_keywords = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\nresponse_movie_keywords = requests.get(url_movie_keywords, headers=headers)\ndata_movie_keywords = response_movie_keywords.json()\n\n# Print the most popular movie title and its keywords\nmost_popular_movie_title = data_popular_movies['results'][0]['title']\nkeywords = [keyword['name'] for keyword in data_movie_keywords['keywords']]\nprint(\"The most popular movie right now is:\", most_popular_movie_title)\nprint(\"Keywords:\", keywords)\n```",
        "usage": [
            428,
            11619,
            12047
        ],
        "executed": "The most popular movie right now is: No Way Up\nKeywords: ['ocean', 'bodyguard', 'rescue mission', 'childhood trauma', 'shark', 'airplane trip', 'sharks', 'air crash', 'survivor']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API URL\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Define the parameters (in this case, we don't need any specific parameters for the popular movie endpoint)\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"  # You can specify a region code if needed\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    \n    # Get the movie ID of the most popular movie\n    movie_id = data['results'][0]['id']\n    \n    # Construct the URL for getting keywords of the movie\n    keywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n    \n    # Make the request to get the keywords\n    keywords_response = requests.get(keywords_url, headers=headers)\n    \n    # Check if the request for keywords was successful\n    if keywords_response.status_code == 200:\n        keywords_data = keywords_response.json()\n        \n        # Extract the keywords\n        keywords = [keyword['name'] for keyword in keywords_data['keywords']]\n        print(keywords)\n    else:\n        print(\"Failed to get keywords data\")\nelse:\n    print(\"Failed to get popular movies data\")\n```",
        "usage": [
            469,
            11099,
            11568
        ],
        "executed": "['ocean', 'bodyguard', 'rescue mission', 'childhood trauma', 'shark', 'airplane trip', 'sharks', 'air crash', 'survivor']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Set the base URL for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the movie \"Titanic\"\nsearch_params = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make a GET request to search for the movie\nsearch_response = requests.get(f\"{base_url}/search/movie\", headers=headers, params=search_params)\n\n# Get the movie id for \"Titanic\" from the search response\nmovie_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Use the movie id to retrieve the credits for the movie\ncredits_response = requests.get(f\"{base_url}/movie/{movie_id}/credits\", headers=headers)\n\n# Extract the cast members from the credits response\ncast = credits_response.json()[\"cast\"]\n\n# Get the names of the cast members\ncast_names = [actor[\"name\"] for actor in cast]\n\nprint(cast_names)\n```",
        "usage": [
            258,
            11830,
            12088
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Headers for authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url for getting details of Paramount Pictures\nurl = \"https://api.themoviedb.org/3/company/4\"\n\n# Making the GET request\nresponse = requests.get(url, headers=headers)\n\n# Checking if the request was successful\nif response.status_code == 200:\n    company_details = response.json()\n    logo_path = company_details['logo_path']\n    print(\"The logo path for Paramount Pictures is:\", logo_path)\n\n# If the request was not successful\nelse:\n    print(\"Failed to retrieve company details. Status code:\", response.status_code)\n```",
        "usage": [
            296,
            10755,
            11051
        ],
        "executed": "The logo path for Paramount Pictures is: /gz66EfNoYPqHTYI4q9UEN4CbHRc.png\n",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for the company\nurl_search_company = \"https://api.themoviedb.org/3/search/company\"\n\n# Define the query to search for Universal Pictures\nparams_search_company = {\n    \"query\": \"Universal Pictures\"\n}\n\n# Make the API request to search for the company\nresponse_search_company = requests.get(url_search_company, headers=headers, params=params_search_company)\n\n# Get the company_id for Universal Pictures\ncompany_results = response_search_company.json()[\"results\"]\nif len(company_results) > 0:\n    company_id = company_results[0][\"id\"]\nelse:\n    print(\"Universal Pictures not found.\")\n    exit()\n\n# Define the API endpoint to get details of the company by id\nurl_company_details = f\"https://api.themoviedb.org/3/company/{company_id}\"\n\n# Make the API request to get details of the company\nresponse_company_details = requests.get(url_company_details, headers=headers)\n\n# Get the headquarters location of Universal Pictures\ncompany_details = response_company_details.json()\nheadquarters = company_details[\"headquarters\"]\nprint(f\"The headquarters of Universal Pictures is located in: {headquarters}\")\n```",
        "usage": [
            243,
            10594,
            10837
        ],
        "executed": "The headquarters of Universal Pictures is located in: Universal City, California\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the movie \"Titanic\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n}\nsearch_response = requests.get(search_url, headers=headers, params=params)\nsearch_results = search_response.json()\nif search_results['total_results'] > 0:\n    movie_id = search_results['results'][0]['id']\n\n    # Step 2: Get the details of the movie including release date\n    movie_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    movie_response = requests.get(movie_url, headers=headers)\n    movie_details = movie_response.json()\n    \n    release_date = movie_details['release_date']\n    print(f\"The movie 'Titanic' was released on: {release_date}\")\nelse:\n    print(\"Movie 'Titanic' not found.\")\n```",
        "usage": [
            361,
            10496,
            10857
        ],
        "executed": "The movie 'Titanic' was released on: 1997-11-18\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the Star Wars collection\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\n    \"query\": \"Star Wars\"\n}\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ndata_search_collection = response_search_collection.json()\n\n# Get the collection id of Star Wars\ncollection_id = data_search_collection[\"results\"][0][\"id\"]\n\n# Get the details of the first movie in the Star Wars collection\nurl_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse_collection_details = requests.get(url_collection_details, headers=headers)\ndata_collection_details = response_collection_details.json()\n\n# Get the cast of the first movie in the Star Wars collection\nmovie_id = data_collection_details[\"parts\"][0][\"id\"]\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Extract the cast of the first movie in the Star Wars collection\ncast = data_movie_credits[\"cast\"]\n\n# Print the names of the cast members\nstarred_actors = [actor[\"name\"] for actor in cast]\nprint(starred_actors)\n```",
        "usage": [
            458,
            9652,
            10110
        ],
        "executed": "['Mark Hamill', 'Harrison Ford', 'Carrie Fisher', 'Peter Cushing', 'Alec Guinness', 'Anthony Daniels', 'Kenny Baker', 'Peter Mayhew', 'David Prowse', 'James Earl Jones', 'Phil Brown', 'Shelagh Fraser', 'Jack Purvis', 'Alex McCrindle', 'Eddie Byrne', 'Drewe Henley', 'Denis Lawson', 'Garrick Hagon', 'Jack Klaff', 'William Hootkins', 'Angus MacInnes', 'Jeremy Sinden', 'Graham Ashley', 'Don Henderson', 'Richard LeParmentier', 'Leslie Schofield', 'Michael Leader', 'David Ankrum', 'Scott Beach', 'Lightning Bear', 'Jon Berg', 'Doug Beswick', 'Paul Blake', 'Janice Burchette', 'Ted Burnett', 'John Chapman', 'Gilda Cohen', 'Tim Condren', 'Barry Copping', 'Alfie Curtis', 'Robert Davies', 'Maria De Aragon', 'Robert A. Denham', 'Frazer Diamond', 'Peter Diamond', 'Warwick Diamond', 'Sadie Eden', 'Kim Falkinburg', 'Harry Fielder', 'Ted Gagliano', 'Salo Gardner', 'Steve Gawley', 'Barry Gnome', 'Rusty Goffe', 'Isaac Grand', 'Reg Harding', 'Alan Harris', 'Frank Henson', 'Arthur Howell', 'Tommy Ilsley', 'Joe Johnston', 'Annette Jones', 'Linda Jones', 'Joe Kaye', 'Colin Michael Kitchens', 'Melissa Kurtz', 'Tiffany Hillkurtz', 'Al Lampert', 'Anthony Lang', 'Laine Liska', 'Derek Lyons', 'Mahjoub', 'Alf Mangan', 'Grant McCune', 'Geoffrey Moon', 'Mandy Morton', 'Lorne Peterson', 'Marcus Powell', 'Shane Rimmer', 'Pam Rose', 'George Roubicek', 'Erica Simmons', 'Angela Staines', 'George Stock', 'Roy Straite', 'Peter Sturgeon', 'Peter Sumner', 'John Sylla', 'Tom Sylla', 'Malcolm Tierney', 'Phil Tippett', 'Burnell Tucker', 'Morgan Upton', 'Jerry Walter', 'Hal Wamsley', 'Diana Sadley Way', 'Bill Weston', 'Fred Wood', 'Colin Higgins', 'Ron Tarr', 'Anthony Forrest', 'Frances Alfred Basil Tomlin', 'Larry Ward', 'John Cannon']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collection with the query \"Harry Potter\"\ncollection_search_url = \"https://api.themoviedb.org/3/search/collection\"\ncollection_search_params = {\n    \"query\": \"Harry Potter\"\n}\ncollection_search_response = requests.get(collection_search_url, headers=headers, params=collection_search_params)\ncollection_search_results = collection_search_response.json()[\"results\"]\n\n# Check if there are any results\nif len(collection_search_results) > 0:\n    # Get the first collection id\n    collection_id = collection_search_results[0][\"id\"]\n    \n    # Get collection details by id\n    collection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    collection_details_response = requests.get(collection_details_url, headers=headers)\n    collection_details = collection_details_response.json()\n    \n    # Get the poster path of the collection (movie cover)\n    movie_cover_url = collection_details[\"poster_path\"]\n    print(f\"The movie cover for the collection 'Harry Potter' is: {movie_cover_url}\")\nelse:\n    print(\"No collection found for the query 'Harry Potter'\")\n```",
        "usage": [
            412,
            12255,
            12667
        ],
        "executed": "The movie cover for the collection 'Harry Potter' is: /eVPs2Y0LyvTLZn6AP5Z6O2rtiGB.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/collection/1241\"\nparams = {\n    \"api_key\": \"0dbab590c7eaca07ebe625974a37ad92\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Extracting keywords from the response\n    keywords = data.get('keywords', [])\n    if keywords:\n        keyword_names = [keyword['name'] for keyword in keywords]\n        print(keyword_names)\n    else:\n        print(\"No keywords found for the movie collection.\")\nelse:\n    print(\"Error accessing the API. Status code:\", response.status_code)\n```",
        "usage": [
            175,
            11647,
            11822
        ],
        "executed": "No keywords found for the movie collection.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection with the name \"The Hobbit\"\nsearch_collection_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"The Hobbit\"\n}\nresponse = requests.get(search_collection_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the collection id of \"The Hobbit\" if found\ncollection_id = None\nif data[\"total_results\"] > 0:\n    collection_id = data[\"results\"][0][\"id\"]\n\n# If collection was found, get the release dates for the movies in the collection\nrelease_dates = []\nif collection_id:\n    get_collection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    response = requests.get(get_collection_url, headers=headers)\n    collection_data = response.json()\n\n    # Extract the release dates for each movie in the collection\n    for movie in collection_data[\"parts\"]:\n        release_dates.append({\n            \"title\": movie[\"title\"],\n            \"release_date\": movie[\"release_date\"]\n        })\n\nprint(release_dates)\n```",
        "usage": [
            409,
            12465,
            12874
        ],
        "executed": "[{'title': 'The Hobbit: An Unexpected Journey', 'release_date': '2012-12-12'}, {'title': 'The Hobbit: The Desolation of Smaug', 'release_date': '2013-12-11'}, {'title': 'The Hobbit: The Battle of the Five Armies', 'release_date': '2014-12-10'}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the Fast and the Furious collection\nurl_search = \"https://api.themoviedb.org/3/search/collection\"\nparams_search = {\n    \"query\": \"The Fast and the Furious\"\n}\nresponse_search = requests.get(url_search, headers=headers, params=params_search)\ndata_search = response_search.json()\n\n# Get the collection_id of The Fast and the Furious collection\ncollection_id = data_search['results'][0]['id']\n\n# Get the list of movies in the collection\nurl_collection = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse_collection = requests.get(url_collection, headers=headers)\ndata_collection = response_collection.json()\n\n# Extract and print the list of movies in the collection\nmovies = [movie['title'] for movie in data_collection['parts']]\nprint(movies)\n```",
        "usage": [
            353,
            12091,
            12444
        ],
        "executed": "['2 Fast 2 Furious', 'The Fast and the Furious: Tokyo Drift', 'The Fast and the Furious', 'Fast Five', 'Fast & Furious 6', 'Furious 7', 'Fast & Furious', 'The Fate of the Furious', 'Fast X', 'F9', 'Fast X: Part 2']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the collection ID of \"The Fast and the Furious\"\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\n    \"query\": \"The Fast and the Furious\"\n}\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ncollection_id = response_search_collection.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get the reviews for a movie in the collection\nurl_reviews = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\nresponse_reviews = requests.get(url_reviews, headers=headers)\n\n# Print the reviews data\nprint(response_reviews.json())\n```",
        "usage": [
            329,
            10650,
            10979
        ],
        "executed": "{'id': 9485, 'backdrops': [{'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/zn0MrQO7MoV0ITOPSzINAxRfkJq.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/56h4DCt0ogIRI7B71xD5iA5hES1.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 2160, 'iso_639_1': 'en', 'file_path': '/ntkdM1VGtWs26LJicF4sjrgeiTT.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 3840}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/pRxz33WtDEZm6KXNFNNa2amaVZY.jpg', 'vote_average': 5.308, 'vote_count': 6, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/3gp744RzKvFB0X5Nbc2UeHW3mX2.jpg', 'vote_average': 5.308, 'vote_count': 5, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/z5A5W3WYJc3UVEWljSGwdjDgQ0j.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 2160, 'iso_639_1': None, 'file_path': '/gC9BUFiROWtaMsluGYziZ6lR4OJ.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 3840}, {'aspect_ratio': 1.761, 'height': 1006, 'iso_639_1': None, 'file_path': '/1oLiaKWT3XbZ7LUTlmqRkCrww08.jpg', 'vote_average': 5.252, 'vote_count': 6, 'width': 1772}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/mZIFtg3qa1V3mufSrOhDDicNEB8.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/bA4sRmfCbD8hrXy2kmcue5TCXUq.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/nU2jYwbXNzWmjQkTjMpQyhdeBeP.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1920}, {'aspect_ratio': 1.778, 'height': 1080, 'iso_639_1': None, 'file_path': '/pDqpuX2TtPxtkP38pl8hpRzl0cd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}], 'posters': [{'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/eESOXM9yzQlpWbssxa82oN5JtRR.jpg', 'vote_average': 5.588, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/rKKSOVv6iU3nULrKQmd9uEx9gez.jpg', 'vote_average': 5.586, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/zQdytnqfsWKJlqazqfMBL2L7aql.jpg', 'vote_average': 5.58, 'vote_count': 11, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/mCkqJf4ijbNoBWvJ0RTWZJuhJUA.jpg', 'vote_average': 5.558, 'vote_count': 13, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/pCM9fXulC0fZ2sAqxOo9JlOxPmX.jpg', 'vote_average': 5.522, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/yvr1Ziehgps1VJyug8nnezTJRJW.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/uv63yAGg1zETAs1XQsOQpava87l.jpg', 'vote_average': 5.398, 'vote_count': 14, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/vEq10ZynOwHaSIIQ3mWohbHzvRb.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/oLOevFZn6shjcrwK8E5nk2wyCdd.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/xf6fZx3KbnCaNARtcIIwAiAtZQ4.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/nVMyxXziZVZXHP3yW26SRdAB9te.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/bj2y7PABBBzrI1POZFtqPwYJA4m.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/pbaRxkvGXtC0GFTYxMgEyFGw9RP.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/ayv7R5vSNs04JMBrjrr2iCMD8Id.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/r9Q3CZr5Z7s67OSaPdmAi3swk0B.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/lJagwV4EQXb75IIsioQX9kn82Ha.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/aibYB6OKlb36RaHjDLRjhlfHEdN.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/ztV6DHvsuBFPCspZThkUJ5qaLGx.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/x1GWXiZ5jgNUX2laLTDWeTee2Ph.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6SpYwOD2dNGIMwtp9B8Spfm1Wze.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4JkdZGEgRZ7BHQDX0reIMePgiYP.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/yBxdSc9noWHBdhSDlx8KsA1WYhi.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/96ejSzdO2kyfFINiWtRmsyLj8ne.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uEp6gvNa259Ucfo7zNMxGSs39us.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/iG3e6ihYgDglQmY1FPykWUJWRRi.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.706, 'height': 1244, 'iso_639_1': 'es', 'file_path': '/Aj7NOIoT4zP4uisSrilMIgkHKu8.jpg', 'vote_average': 5.224, 'vote_count': 3, 'width': 878}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/nprmMDhkAR0ty4KEU9CkVyFUclE.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/2kZ2pAiVmhTC7UQGNK0INrjnx6M.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/pxsrZMGyfBAH2xFQtdYUqvSdkkp.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/j4qGBWlb5SrusoKSupjkxaW5D5h.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pJc9gB6TnahMF2Kiwygwkxsbeoz.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/mCuYpQfqeCmd3oPRqbpCSOQBlLQ.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/vB9tCSmCkVfVO8AYZqiYHOt3LsU.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/nKHnc0eD2phar4p9GERIFJ3Lk9F.jpg', 'vote_average': 5.182, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zlKbKK7jC0BSo8R15pJeRtU0UIw.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8IWsIjBVhqtjo0dLDA8hSPzPNGm.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/wBzFu5iOsVUiMOLx2fYXNIbR5dL.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/x2F7PgvJN6GV0exH5ZJmTxvN7E5.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.739, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/tXGmHxu6LWx28hBvg9xLiSWwG8X.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1109}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/2xXF7YtZKV7ianRR8kLeVGk2RoH.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/yihQ0tTv8Ra7VYcLZG2KMD4sasG.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/eajDDNJlw8LglHJgpuaYf9rBJfG.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/bcY8NSHTQJYFTb6ZXKOdTADFjrq.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ghrrewjLFzad4P9e4Qum4jluaGF.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gPlWXAAKK5NcyUwsWkD5Qbp8MEt.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cn', 'file_path': '/jM8hy8lz7ww0yaCgMhMXFKTb42G.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.716, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/21rSeu9QtJcsWtocozMe3B87s8D.jpg', 'vote_average': 5.166, 'vote_count': 3, 'width': 1074}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ngreIz9G6c4mcDMFkhEoVm1fA24.jpg', 'vote_average': 5.166, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.719, 'height': 932, 'iso_639_1': 'en', 'file_path': '/zF0FyC5GWBl7CEn3MV8jvpCMMbn.jpg', 'vote_average': 5.156, 'vote_count': 12, 'width': 670}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ef794mtjKkBqjlkiybqBcidkxc6.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.699, 'height': 2175, 'iso_639_1': 'en', 'file_path': '/z49v7pB1IgExUHv1Nl46wm95PR6.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1521}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/1DAbpKhAgmHOxrHDigByH9bIJ85.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iIkvkkdKVvErt12Hpn1jeqNBAKq.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2880, 'iso_639_1': 'pt', 'file_path': '/mZ71ez0AGnnGY0fVKtNsP2bnsxy.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1920}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ej5A1oCslNQ8G44Vbp1bL4NQq7G.jpg', 'vote_average': 5.1, 'vote_count': 9, 'width': 1000}, {'aspect_ratio': 0.717, 'height': 1115, 'iso_639_1': 'en', 'file_path': '/pGfCiqrr0wwz2NpDXLSQXfgAwnY.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 800}, {'aspect_ratio': 0.705, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/tS6wC49axH2OKqvhVjLXexAedra.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1058}, {'aspect_ratio': 0.696, 'height': 2202, 'iso_639_1': 'en', 'file_path': '/lSbf3A8cHcqhJQSkbFP9dtR3Nve.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1532}, {'aspect_ratio': 0.707, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/7VFUqCkUqRSBcf6C7JYAJcPuRQ2.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1060}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/rLuXH8wZ693IcdyzTGASF3lTIkX.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.69, 'height': 1450, 'iso_639_1': 'en', 'file_path': '/hCZbA0puDW5PespEMVDmcbpilmk.jpg', 'vote_average': 4.93, 'vote_count': 5, 'width': 1001}, {'aspect_ratio': 0.731, 'height': 1300, 'iso_639_1': 'ru', 'file_path': '/3vcsqLa0F6BBY5c7LyUkfopxgkT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 950}, {'aspect_ratio': 0.702, 'height': 850, 'iso_639_1': 'da', 'file_path': '/9AEI78GDvHxQpbOlIh1Rs3X97dd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 597}, {'aspect_ratio': 0.706, 'height': 800, 'iso_639_1': 'th', 'file_path': '/3aAafnQ1q10hcOXj02VRu2EdFdE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 565}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pl', 'file_path': '/xpx7Rt9ofkwx5KVsvcaZqinijTQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'tr', 'file_path': '/yG1KYRxMoUUyXwMcgeL7ZYrEwUO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/dl4ttKdOGQqcEVNKMVcPTX2RQIA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/oZSIm8q3pXdoYr8t7P0akgq0T5F.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/iIRi44FpR5qk7wqj1Ae0t6SfJSv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/iexoGltCigLddSrWKvwOcE1ROoo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/lkPNgEoN98rYTbqhDJr8yatqlGQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/ljgeZSCK7zLHh2cdVIArtAbQetW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/8hqSqG6sstMhd1sUITzAYxybJMu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/1pTtotwn0HB9fGPReGq1rua2uCX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cn', 'file_path': '/b46OCwgD1lnEoG0BsEBtnOJrNJE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zOCnMPoUxgJK1RFPfN4PcnT16gr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': None, 'file_path': '/ox0kNggpPmcmntSEFbuK98yadeX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'es', 'file_path': '/f2GZmZZAsS7RbIK0NeaNNiZkB9P.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'es', 'file_path': '/1w0ZAvmyAfCWb6cxYeXa1b2WmAu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'es', 'file_path': '/sRUqIMJ44s2knWiPzUj2b6pplGA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gUj6G8teIsZvcos7ujpIcbRueuo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/sGFr1wG1XO90r3NqMHVT6Eohmck.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': None, 'file_path': '/2GesSQAa99TGEYVL7wXiTbB1FfL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}]}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url to search for the collection with query 'Lord of the Rings'\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1\n}\n\n# Make a GET request to search for the collection\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the response to get the collection id\n    collection_id = response.json()['results'][0]['id']\n    \n    # Define the API url to get the details of the collection by id\n    collection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    \n    # Make a GET request to get the details of the collection\n    collection_response = requests.get(collection_url, headers=headers)\n    \n    # Check if the request was successful\n    if collection_response.status_code == 200:\n        # Parse the response to get the details of the collection including parts\n        parts = collection_response.json()['parts']\n        \n        # Parse the first part of the collection (first movie)\n        first_movie = parts[0]\n        \n        # Get the release date of the first movie\n        first_movie_release_date = first_movie['release_date']\n        \n        print(\"The first movie of the collection 'Lord of the Rings' was released on:\", first_movie_release_date)\n    else:\n        print(\"Error in getting collection details by id:\", collection_response.status_code)\nelse:\n    print(\"Error in searching for collection:\", response.status_code)\n```",
        "usage": [
            342,
            12663,
            13005
        ],
        "executed": "The first movie of the collection 'Lord of the Rings' was released on: 2002-04-01\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/18347/season/1\"\n# Define the API parameters (if any)\nparams = {}\n# Include the necessary header for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the JSON response data\n    data = response.json()\n    \n    # Extract the crew information for each episode in the season\n    for episode in data['episodes']:\n        print(f\"Episode {episode['episode_number']}:\")\n        for crew_member in episode['crew']:\n            if crew_member['job'] == 'Director':\n                print(f\"Director: {crew_member['name']}\")\n        print(\"---------\")\nelse:\n    print(\"Failed to retrieve data\")\n\n```",
        "usage": [
            365,
            10779,
            11144
        ],
        "executed": "Episode 1:\nDirector: Joe Russo\nDirector: Anthony Russo\n---------\nEpisode 2:\nDirector: Joe Russo\n---------\nEpisode 3:\nDirector: Anthony Russo\n---------\nEpisode 4:\nDirector: Anthony Russo\n---------\nEpisode 5:\nDirector: Joe Russo\n---------\nEpisode 6:\nDirector: Joe Russo\n---------\nEpisode 7:\nDirector: Justin Lin\n---------\nEpisode 8:\nDirector: Anthony Russo\n---------\nEpisode 9:\nDirector: Joe Russo\n---------\nEpisode 10:\nDirector: Seth Gordon\n---------\nEpisode 11:\nDirector: Anthony Russo\n---------\nEpisode 12:\nDirector: Adam Davidson\n---------\nEpisode 13:\nDirector: Joe Russo\n---------\nEpisode 14:\nDirector: Justin Lin\n---------\nEpisode 15:\nDirector: Joe Russo\n---------\nEpisode 16:\nDirector: Adam Davidson\n---------\nEpisode 17:\nDirector: Anthony Russo\n---------\nEpisode 18:\nDirector: Ken Whittingham\n---------\nEpisode 19:\nDirector: Anthony Russo\n---------\nEpisode 20:\nDirector: Adam Davidson\n---------\nEpisode 21:\nDirector: Tristram Shapeero\n---------\nEpisode 22:\nDirector: Adam Davidson\n---------\nEpisode 23:\nDirector: Justin Lin\n---------\nEpisode 24:\nDirector: Gail Mancuso\n---------\nEpisode 25:\nDirector: Joe Russo\n---------\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Header for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show \"House of Cards\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"House of Cards\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ntv_show_id = response.json()['results'][0]['id']\n\n# Get a list of similar TV shows\nsimilar_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/similar\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(similar_url, headers=headers, params=params)\nsimilar_tv_shows = response.json()['results']\n\nprint(similar_tv_shows)\n```",
        "usage": [
            323,
            12931,
            13254
        ],
        "executed": "[{'adult': False, 'backdrop_path': '/3XbtYZzgUHOhotpnP3BJg4VVc5s.jpg', 'genre_ids': [18], 'id': 73026, 'origin_country': ['CN'], 'original_language': 'zh', 'original_name': '\u82cd\u7a79\u4e4b\u6634', 'overview': 'Two young men looking for a better life enter the royal palace in the midst of a tumultuous political era of the late Qing Dynasty. Chun Er, a poor peasant boy, and Liang Wen Xiu, who grew up in a wealthy household, find their fates are tied together in unexpected ways. The two young men and Chun Er\u2019s younger sister, Ling Er, travel to the Forbidden City together to look for a better future. Based on the popular novel Sokyu no Subaru by Asada Jiro.', 'popularity': 38.63, 'poster_path': '/cUuS4LSpkjsQ67LYYV61eT411yQ.jpg', 'first_air_date': '2010-01-02', 'name': 'The Firmament of the Pleiades', 'vote_average': 8.0, 'vote_count': 4}, {'adult': False, 'backdrop_path': '/sE06WKjfPWrXgdG3osLpOSZE44a.jpg', 'genre_ids': [18, 10759, 80], 'id': 73182, 'origin_country': ['CN'], 'original_language': 'zh', 'original_name': '\u6a59\u7ea2\u5e74\u4ee3', 'overview': \"Liu Zi Guang has no memories of the past eight years of his life. When he returns to his hometown, Jiangbei, all he knows is that he wants to live life as an upstanding citizen. But those mysterious eight years are bound to catch up to him as he finds his father injured in the hospital upon his return. Hu Rong is a detective whose looks are as fiery as her personality. She's young, but her tough demeanor and unquestionable skills make her a seasoned officer. She cares intensely about her work, doing whatever it takes to protect the citizens of China. Nie Wanfeng is the leader of a criminal organization. He is a hugely tricky opponent for the police, with both his smarts and viciousness keeping him a free man. When Liu Zi Guang and Hu Rong meet, they initially struggle to get along. But their relationship grows as they both come up against Nie Wanfeng together. Things only complicate, however, as Hu Rong learns more about Liu Zi Guang's past, just as she finds herself falling for him.\", 'popularity': 63.033, 'poster_path': '/dXpnbN2HIJkNYKzS4kfMmtlcPGE.jpg', 'first_air_date': '2018-09-17', 'name': 'Age of Legends', 'vote_average': 8.571, 'vote_count': 7}, {'adult': False, 'backdrop_path': '/yEFlzKXJhwuacNlADgzrNfx3M2b.jpg', 'genre_ids': [18, 9648], 'id': 99463, 'origin_country': ['CN'], 'original_language': 'zh', 'original_name': '\u5c11\u4e3b\u4e14\u6162\u884c', 'overview': \"A story that follows the quirky female investigator Tian Sanqi as she searches for her long lost 'brother' and cracks many cases along the way.\\n\\nGrowing up, Tian Sanqi  had a strange liking for performing autopsies. She had an older 'brother' who would always be by her side and they spent many good years together. One day, he mysteriously disappears. Sanqi as a child promises to find her true love and vows never to marry unless it's him.\\n\\nIn her search, she comes across many potential candidates and forms new friendships. The gang accidentally becomes involved in several cases in the area one of which seems closely related to the disappearance of her 'brother' all those years ago. A shocking conspiracy that is 10 years in the making comes to light.\", 'popularity': 28.986, 'poster_path': '/7XrtuGuliBfB6yco1ypGPjRzwmU.jpg', 'first_air_date': '2020-02-14', 'name': \"I've Fallen For You\", 'vote_average': 7.0, 'vote_count': 3}, {'adult': False, 'backdrop_path': '/lUseDQFZoge6GR1F6dGtaARiF7M.jpg', 'genre_ids': [18, 9648], 'id': 99489, 'origin_country': ['KR'], 'original_language': 'ko', 'original_name': '\ud39c\ud2b8\ud558\uc6b0\uc2a4', 'overview': 'A woman puts everything on the line to achieve her goal of being able to move into a luxury penthouse in the Gangnam District. In the process, she gradually finds herself turning into a monster.', 'popularity': 139.557, 'poster_path': '/wybv1VgIOMhcHdU3ooikn2LuR1o.jpg', 'first_air_date': '2020-10-26', 'name': 'The Penthouse', 'vote_average': 8.4, 'vote_count': 215}, {'adult': False, 'backdrop_path': '/eenxjEAPwPbkjN6W5ZzTbfLA4GM.jpg', 'genre_ids': [18, 37], 'id': 99346, 'origin_country': ['GB'], 'original_language': 'en', 'original_name': 'The English', 'overview': 'An aristocratic Englishwoman, Lady Cornelia Locke, arrives into the new and wild landscape of the American West to wreak revenge on the man she sees as responsible for the death of her son.', 'popularity': 34.488, 'poster_path': '/aAFAwxj0VzBRyX5biAHUJM73qYG.jpg', 'first_air_date': '2022-11-10', 'name': 'The English', 'vote_average': 7.35, 'vote_count': 140}, {'adult': False, 'backdrop_path': '/be6mDIMv7cg8duWkcYVnTB8rphO.jpg', 'genre_ids': [10759, 18, 80], 'id': 1973, 'origin_country': ['US'], 'original_language': 'en', 'original_name': '24', 'overview': 'Counterterrorism agent Jack Bauer fights the bad guys of the world, a day at a time. With each week\\'s episode unfolding in real-time, \"24\" covers a single day in the life of Bauer each season.', 'popularity': 289.724, 'poster_path': '/iq6yrZ5LEDXf1ArCOYLq8PIUBpV.jpg', 'first_air_date': '2001-11-06', 'name': '24', 'vote_average': 7.789, 'vote_count': 1411}, {'adult': False, 'backdrop_path': '/ysaA0BInz4071p3LKqAQnWKZCsK.jpg', 'genre_ids': [10751, 35, 18], 'id': 2004, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Malcolm in the Middle', 'overview': 'A gifted young teen tries to survive life with his dimwitted, dysfunctional family.', 'popularity': 446.466, 'poster_path': '/ckLLIsNy3Z0Go1PYHA2PHzVymUA.jpg', 'first_air_date': '2000-01-09', 'name': 'Malcolm in the Middle', 'vote_average': 8.479, 'vote_count': 4073}, {'adult': False, 'backdrop_path': '/f8jrTem5NQnWAgQBBOg2vbh6gzm.jpg', 'genre_ids': [10759, 18], 'id': 2046, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Alias', 'overview': 'Sydney Bristow, an agent who has been tricked to believe she is working for the U.S. government, is actually working for a criminal organization named the Alliance of Twelve. Upon learning this, Sydney becomes a double agent for the real CIA.', 'popularity': 29.067, 'poster_path': '/Dl3KIxWlSEvnXogNHxdXA4pbAk.jpg', 'first_air_date': '2001-09-30', 'name': 'Alias', 'vote_average': 6.709, 'vote_count': 580}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18], 'id': 25599, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Waterfront', 'overview': 'Waterfront is a television drama set in Providence, Rhode Island that was originally scheduled to be a midseason replacement on CBS in 2007, but was shelved by the network in 2006 before any of its five completed episodes had aired. The series was produced by Warner Bros. Television.\\n\\nIt starred Joe Pantoliano and William Baldwin as the Mayor of Providence and Attorney General of Rhode Island, respectively.', 'popularity': 0.96, 'poster_path': None, 'first_air_date': '', 'name': 'Waterfront', 'vote_average': 0.0, 'vote_count': 0}, {'adult': False, 'backdrop_path': '/4yGoeN1nCw6pQYNMypfxuqatmFT.jpg', 'genre_ids': [18], 'id': 25806, 'origin_country': ['GB'], 'original_language': 'en', 'original_name': 'The Gravy Train Goes East', 'overview': 'A fictitious Balkan state adaps to life after Communism.', 'popularity': 5.281, 'poster_path': '/aLzo85if4un5YpOfDDXZQhRsN7G.jpg', 'first_air_date': '1991-10-28', 'name': 'The Gravy Train Goes East', 'vote_average': 7.0, 'vote_count': 1}, {'adult': False, 'backdrop_path': '/alvDWXzauG2mWyKtJQX0rNBlP2P.jpg', 'genre_ids': [18, 10766], 'id': 100717, 'origin_country': ['KR'], 'original_language': 'ko', 'original_name': '\uc704\ud5d8\ud55c \uc57d\uc18d', 'overview': 'A fierce revenge melodrama about a girl who is pushed to the edge of a cliff while fighting the unjust and a man who breaks his promise with her and starts a family of his own, reuniting 7 years later.', 'popularity': 82.417, 'poster_path': '/Am6YS7MocLBAJdi4H3Dotcv4iRz.jpg', 'first_air_date': '2020-03-30', 'name': 'Fatal Promise', 'vote_average': 5.0, 'vote_count': 4}, {'adult': False, 'backdrop_path': '/eyi5tMbK6fRtXNFffUTIhRiX0LT.jpg', 'genre_ids': [35, 18], 'id': 2359, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Spin City', 'overview': \"Workaholic Mike Flaherty is the Deputy Mayor of New York City, serving as Mayor Randall Winston's key strategist and much-needed handler. Mike runs the city with the help of his oddball staff: an anxious and insecure press secretary; a sexist, boorish chief of staff; an impeccably groomed gay activist running minority affairs; a sharp and efficient, man-crazy accountant; and an idealistic young speechwriter. Like Mike, they are all professionally capable but personally challenged.\", 'popularity': 252.436, 'poster_path': '/3Ksmbpg33PigXKWncD8rFMl24vF.jpg', 'first_air_date': '1996-09-17', 'name': 'Spin City', 'vote_average': 7.1, 'vote_count': 270}, {'adult': False, 'backdrop_path': '/gcX2I9u2Xcx1IGKsO3GXm538bGT.jpg', 'genre_ids': [18], 'id': 2364, 'origin_country': ['IN'], 'original_language': 'hi', 'original_name': 'Kkavyanjali', 'overview': 'Kkavyanjali is an Indian Television romantic drama series that aired on STAR Plus. Kkavyanjali is the tale two lovers that can never meet, the two soul mates who love each other deeply yet they are separated. The show has been ranked at No.7 on the list of the a Star Plus top 10 show of all time history.', 'popularity': 82.644, 'poster_path': '/98XV1gVAHLXkEY0Lm4yXN24e7Up.jpg', 'first_air_date': '2005-01-25', 'name': 'Kkavyanjali', 'vote_average': 7.0, 'vote_count': 2}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18, 9648], 'id': 2366, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Reunion', 'overview': 'Reunion is an American television series that aired on FOX in late 2005. The series was intended to chronicle 20 years in the lives of a group of six high school friends from Bedford, New York, with each episode following one year in the lives of the six, beginning with their high school graduation year 1986. Each episode also featured scenes in the present where Detective Marjorino is investigating the brutal murder of one of the group during the night of their 20-year class reunion in 2006. The identity of the murder victim was not revealed until the fifth episode, \"1990\".\\n\\nDue to low ratings, the series was canceled after only nine episodes, and the identity of the killer remained unrevealed in the aired episodes.', 'popularity': 19.925, 'poster_path': '/r9OjgcsK3JXmeCACj7hUfmAq5Pw.jpg', 'first_air_date': '2005-09-08', 'name': 'Reunion', 'vote_average': 6.667, 'vote_count': 6}, {'adult': False, 'backdrop_path': '/5EJ5QTGgNpjslzVVqe6yXwPU63F.jpg', 'genre_ids': [18], 'id': 99688, 'origin_country': ['IT'], 'original_language': 'it', 'original_name': '1993', 'overview': \"Rome, 30 April 1993. A crowd throws coins at Italian politician Bettino Craxi - as if the Civil War has begun. Be quick if you want a place in the new system. Now, it's every man for himself. 1993 is the last chance to set up the Second Republic. Everyone fights their own battles.\", 'popularity': 32.85, 'poster_path': '/w1hMZOQn4VdNuR5H1fkETn7xqM7.jpg', 'first_air_date': '2017-05-16', 'name': '1993', 'vote_average': 7.184, 'vote_count': 38}, {'adult': False, 'backdrop_path': '/n5FPNMJ0eRoiQrKGfUQQRAZeaxg.jpg', 'genre_ids': [18], 'id': 125988, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Silo', 'overview': 'In a ruined and toxic future, a community exists in a giant underground silo that plunges hundreds of stories deep. There, men and women live in a society full of regulations they believe are meant to protect them.', 'popularity': 166.092, 'poster_path': '/zBx1X06G1OlndbXTCZI13FECNz2.jpg', 'first_air_date': '2023-05-04', 'name': 'Silo', 'vote_average': 8.198, 'vote_count': 731}, {'adult': False, 'backdrop_path': '/fV740jZ1ZIwRcLwgBEsiEHrdjPG.jpg', 'genre_ids': [18], 'id': 1435, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Good Wife', 'overview': \"Alicia Florrick boldly assumes full responsibility for her family and re-enters the workforce after her husband's very public sex and political corruption scandal lands him in jail.\", 'popularity': 391.493, 'poster_path': '/lasNCd45fpPLirlA7QxkuopWro.jpg', 'first_air_date': '2009-09-22', 'name': 'The Good Wife', 'vote_average': 7.573, 'vote_count': 526}, {'adult': False, 'backdrop_path': '/layPSOJGckJv3PXZDIVluMq69mn.jpg', 'genre_ids': [80, 18], 'id': 1438, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Wire', 'overview': 'Told from the points of view of both the Baltimore homicide and narcotics detectives and their targets, the series captures a universe in which the national war on drugs has become a permanent, self-sustaining bureaucracy, and distinctions between good and evil are routinely obliterated.', 'popularity': 205.27, 'poster_path': '/4lbclFySvugI51fwsyxBTOm4DqK.jpg', 'first_air_date': '2002-06-02', 'name': 'The Wire', 'vote_average': 8.553, 'vote_count': 2023}, {'adult': False, 'backdrop_path': '/sp0GO5RGhIhtY1TZ3MlmrlCRopU.jpg', 'genre_ids': [10759, 18, 10765], 'id': 1727, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Tarzan: The Epic Adventures', 'overview': \"Tarzan: The Epic Adventures is a syndicated series that aired for one season. It focuses on the character of Tarzan in his early years, after his first exposure to civilization, but before his marriage to Jane. The series uses much of the mythology of Edgar Rice Burroughs' books as background material.\\n\\nThis version of Tarzan was filmed in the Sun City resort in South Africa, making it one of the few Tarzan productions to actually film on that continent.\\n\\nThe character of Nicholas Rokoff, and the fact that Tarzan is not yet married, set this series in-between the two halves of The Return of Tarzan.\\n\\nR. A. Salvatore wrote an authorized Tarzan novel based on pilot script which was published as a trade-paperback in 1996, and a mass-market paperback in 1997.\", 'popularity': 19.873, 'poster_path': '/drs2sLhaezvxYfnD5ICGZCWcYUr.jpg', 'first_air_date': '1996-08-28', 'name': 'Tarzan: The Epic Adventures', 'vote_average': 4.8, 'vote_count': 5}, {'adult': False, 'backdrop_path': '/prpUsOrLTngJDeMXMvPBrhE7vY8.jpg', 'genre_ids': [18, 9648], 'id': 201845, 'origin_country': ['TH'], 'original_language': 'th', 'original_name': '\u0e23\u0e15\u0e35\u0e25\u0e27\u0e07', 'overview': \"The sudden and mysterious demise of his father Phipop leads Pithai to discover that his girlfriend Kamolthip was in fact his father's lover, and therefore a prime suspect in his death. To escape she runs off with another man and Pithai begins to blame Chadathan, her younger sister who has always had a secret crush on him. She soon finds herself in a love trap with Pithai that binds them together, but will they ever be able to escape the cycle of love, revenge, and pain?\", 'popularity': 12.51, 'poster_path': '/88Cp789F54687raXa2SBPTn8md4.jpg', 'first_air_date': '2022-05-09', 'name': 'Love and Deception', 'vote_average': 3.0, 'vote_count': 1}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get a list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the start date of the most popular TV show on the air\nif data['results']:\n    most_popular_show = max(data['results'], key=lambda x: x['popularity'])\n    start_date = most_popular_show['first_air_date']\n    print(\"The most popular TV show currently on the air started on:\", start_date)\nelse:\n    print(\"No TV shows currently on the air.\")\n\n```",
        "usage": [
            324,
            11924,
            12248
        ],
        "executed": "The most popular TV show currently on the air started on: 2005-09-26\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Get the director id of Django Unchained\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Django Unchained\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ndirector_id = None\nif response.status_code == 200:\n    results = response.json().get('results', [])\n    if results:\n        director_id = results[0].get('director_id')\n\n# Step 2: Get the movie credits of the director\nif director_id:\n    credit_url = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\n    response = requests.get(credit_url, headers=headers)\n    if response.status_code == 200:\n        movie_credits = response.json().get('cast', [])\n        for movie in movie_credits:\n            print(movie.get('title'))\n\n# Note: Make sure to replace placeholders like 'director_id' with actual values based on the API response\n```",
        "usage": [
            398,
            10920,
            11318
        ],
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Header with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API endpoint to get a list of TV shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Sending GET request to the API endpoint\nresponse = requests.get(url, headers=headers)\n\n# Checking if the response status code is 200 (successful)\nif response.status_code == 200:\n    # Parsing the JSON response\n    tv_data = response.json()\n    \n    # Extracting the first TV show's ID\n    tv_id = tv_data['results'][0]['id']\n    \n    # API endpoint to get the credits (cast and crew) for the TV show with the obtained ID\n    credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    \n    # Sending GET request to get the credits\n    credits_response = requests.get(credits_url, headers=headers)\n    \n    # Checking if the credits response status code is 200\n    if credits_response.status_code == 200:\n        # Parsing the credits JSON response\n        credits_data = credits_response.json()\n\n        # Getting the cast list\n        cast = credits_data['cast']\n\n        # Printing the cast of the TV show\n        for actor in cast:\n            print(f\"{actor['name']} as {actor['character']}\")\n\n    else:\n        print(\"Failed to fetch credits data\")\nelse:\n    print(\"Failed to fetch TV show data\")\n```",
        "usage": [
            477,
            8957,
            9434
        ],
        "executed": "Dirk Galuba as Werner Saalfeld\nSepp Schauer as Alfons Sonnbichler\nAntje Hagen as Hildegard Sonnbichler\nErich Altenkopf as Michael Niederb\u00fchl\nDieter Bach as Christoph Saalfeld\nSoluna-Delta Kokol as Ana Alves\nRobin Schick as Philipp Brandes\nMartin Walde as Vincent Ritter\nSven Waasner as Erik Vogt\nTanja Lan\u00e4us as Yvonne Klee\nSabine Werner as Helene Richter\nDaniela Kiefer as Alexandra Schwarzbach\nTimo Ben Sch\u00f6fer as Markus Schwarzbach\nChristopher Jan Busse as Noah Schwarzbach\nLaura Osswald as Greta Bergmann\nYeliz Simsek as Lale Ceylan\nTim Borys as Julian Specht\nDionne Wudu as Nicole Alves\nLukas Leibe as Theo Licht\nIsabell Stern as Katja Neubach\nMilan Marcus as Tom Dammann\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "I need a review for Breaking Bad",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the base url for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Search for the TV show \"Breaking Bad\" to get the TV show id\nsearch_url = f\"{base_url}/search/tv\"\nparams = {\n    \"query\": \"Breaking Bad\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\ntv_id = data[\"results\"][0][\"id\"]\n\n# Get the reviews for the TV show using its id\nreviews_url = f\"{base_url}/tv/{tv_id}/reviews\"\nparams = {\n    \"page\": 1\n}\n\nresponse = requests.get(reviews_url, headers=headers, params=params)\nreviews_data = response.json()\n\nprint(reviews_data)\n```",
        "usage": [
            350,
            11076,
            11426
        ],
        "executed": "{'id': 1396, 'page': 1, 'results': [{'author': 'slyone10001', 'author_details': {'name': '', 'username': 'slyone10001', 'avatar_path': None, 'rating': 10.0}, 'content': 'Wow....where to start. Not really into \"DRUG\" inspired shows. But this one had me from the start. The only bad about this show was the split seasons when it was a first run show. But now you can go right through to the next episode with out having to wait.....MUST WATCH ! !', 'created_at': '2018-04-10T15:44:38.134Z', 'id': '5accdbe6c3a3687e2702d058', 'updated_at': '2021-06-23T15:58:07.601Z', 'url': 'https://www.themoviedb.org/review/5accdbe6c3a3687e2702d058'}, {'author': 'Dean', 'author_details': {'name': 'Dean', 'username': 'Ditendra', 'avatar_path': None, 'rating': 10.0}, 'content': \"I'll be honest, at first when I started this TV show and finished first season, I didn't like it. It felt boring for me and I stopped watching, but after few years, I decided to give it a chance and continue. I'm so happy because of my decision, because after finishing this TV show, I can definitely tell that it was a masterpiece! 5th season is a bomb and 14th season was shocking! It left me with sad, euphoric shock feeling. It was mind blowing! I'm not gonna spoil you what happened, but if you started first season and you don't like it, for goodness sake, give it a chance and continue watching. I promise you won't regret.\\r\\n\\r\\nCharacters are very well developed. Acting is superb! Plot is very interesting. Whole TV show is tense, especially the last season. The only downside I can think about is camera. Sometimes it's shaking on some certain scenes. I don't know why they didn't pay attention to this, but this is nothing, just a very minor minus. Everything else is great about this TV show.\", 'created_at': '2019-09-30T09:02:26.890Z', 'id': '5d91c4a2172d7f001759ca0a', 'updated_at': '2021-06-23T15:58:27.439Z', 'url': 'https://www.themoviedb.org/review/5d91c4a2172d7f001759ca0a'}, {'author': 'l33t5p34k3r', 'author_details': {'name': '', 'username': 'l33t5p34k3r', 'avatar_path': None, 'rating': 9.0}, 'content': 'Started out really good, but dropped quality after the second to last season', 'created_at': '2020-06-10T07:29:33.686Z', 'id': '5ee08bdd90dde0001fa67192', 'updated_at': '2021-06-23T15:58:39.055Z', 'url': 'https://www.themoviedb.org/review/5ee08bdd90dde0001fa67192'}, {'author': 'drystyx', 'author_details': {'name': '', 'username': 'drystyx', 'avatar_path': '/hLLsAvAnVT0cFU7JuuaaItTWXv8.jpg', 'rating': 3.0}, 'content': 'This is the kind of TV show for the \"formula lovers\" who want to feel superior.\\r\\nThere is an air of the superiority complex of the \"drug knowledgeable\" crowd in this series about a \"smart guy\" breaking into the drug trade.\\r\\nHis \"talent\" makes him the important cog in the machine. He can call his shots.\\r\\nStill, the ruffians give him a rough way to go, because criminals really are stupid.\\r\\nOnce they learn that they are nothing without him, he gets his way.\\r\\nMuch like a Western town blacksmith, he\\'s the needed ingredient.\\r\\nHowever, things get very formula early on in the show. And there\\'s always this sense of a superiority complex from the sort of people who push shows like this onto their friends and acquaintances. The directing writing team tap into the control freak crowd very well.\\r\\nBut it is a dull show about dull people.', 'created_at': '2023-04-02T17:02:14.125Z', 'id': '6429b5168de0ae00978d836a', 'updated_at': '2023-04-03T16:45:23.650Z', 'url': 'https://www.themoviedb.org/review/6429b5168de0ae00978d836a'}], 'total_pages': 1, 'total_results': 4}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"0dbab590c7eaca07ebd9265974a37ad92\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show \"The Last of Us\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Last of Us\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\ndata = response.json()\n\n# Get the TV show id\ntv_id = data[\"results\"][0][\"id\"]\n\n# Get recommendations for the TV show\nrecommendations_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\nrecommendations_params = {\n    \"page\": 1\n}\nresponse = requests.get(recommendations_url, headers=headers, params=recommendations_params)\nrecommendations = response.json()\n\nprint(recommendations)\n```",
        "usage": [
            222,
            12391,
            12613
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the query to search for the TV show\nquery = \"The Last Of Us\"\n\n# Define the parameters including the query and page\nparams = {\n    \"query\": query,\n    \"page\": 1\n}\n\n# Make the API request to search for TV shows\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params)\n\n# Extract the TV show ID for \"The Last Of Us\" from the search results\ntv_show_id = response_search_tv.json()[\"results\"][0][\"id\"]\n\n# Define the API url for getting recommendations for a specific TV show\nurl_recommendations = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/recommendations\"\n\n# Define the parameters including the page\nparams_recommendations = {\n    \"page\": 1\n}\n\n# Make the API request to get recommendations for the TV show\nresponse_recommendations = requests.get(url_recommendations, headers=headers, params=params_recommendations)\n\n# Extract the list of recommended TV shows\nrecommended_shows = response_recommendations.json()[\"results\"]\n\n# Output the list of recommended TV shows\nprint(recommended_shows)\n```",
        "usage": [
            270,
            10746,
            11016
        ],
        "executed": "[{'adult': False, 'backdrop_path': '/9zcbqSxdsRMZWHYtyCd1nXPr2xq.jpg', 'id': 82856, 'name': 'The Mandalorian', 'original_language': 'en', 'original_name': 'The Mandalorian', 'overview': 'After the fall of the Galactic Empire, lawlessness has spread throughout the galaxy. A lone gunfighter makes his way through the outer reaches, earning his keep as a bounty hunter.', 'poster_path': '/eU1i6eHXlzMOlEq0ku1Rzq7Y4wA.jpg', 'media_type': 'tv', 'genre_ids': [10765, 10759, 18], 'popularity': 227.975, 'first_air_date': '2019-11-12', 'vote_average': 8.445, 'vote_count': 9657, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/iHSwvRVsRyxpX7FE7GbviaDvgGZ.jpg', 'id': 119051, 'name': 'Wednesday', 'original_language': 'en', 'original_name': 'Wednesday', 'overview': 'Wednesday Addams is sent to Nevermore Academy, a bizarre boarding school where she attempts to master her psychic powers, stop a monstrous killing spree of the town citizens, and solve the supernatural mystery that affected her family 25 years ago \u2014 all while navigating her new relationships.', 'poster_path': '/9PFonBhy4cQy7Jz20NpMygczOkv.jpg', 'media_type': 'tv', 'genre_ids': [10765, 9648, 35], 'popularity': 194.558, 'first_air_date': '2022-11-23', 'vote_average': 8.499, 'vote_count': 8032, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/rIe3PnM6S7IBUmvNwDkBMX0i9EZ.jpg', 'id': 1399, 'name': 'Game of Thrones', 'original_language': 'en', 'original_name': 'Game of Thrones', 'overview': \"Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond.\", 'poster_path': '/1XS1oqL89opfnbLl8WnZY1O1uJx.jpg', 'media_type': 'tv', 'genre_ids': [10765, 18, 10759], 'popularity': 994.002, 'first_air_date': '2011-04-17', 'vote_average': 8.446, 'vote_count': 22760, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/20eIP9o5ebArmu2HxJutaBjhLf4.jpg', 'id': 87108, 'name': 'Chernobyl', 'original_language': 'en', 'original_name': 'Chernobyl', 'overview': 'The true story of one of the worst man-made catastrophes in history: the catastrophic nuclear accident at Chernobyl. A tale of the brave men and women who sacrificed to save Europe from unimaginable disaster.', 'poster_path': '/hlLXt2tOPT6RRnjiUmoxyG1LTFi.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 124.986, 'first_air_date': '2019-05-06', 'vote_average': 8.66, 'vote_count': 5773, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/9faGSFi5jam6pDWGNd0p8JcJgXQ.jpg', 'id': 1396, 'name': 'Breaking Bad', 'original_language': 'en', 'original_name': 'Breaking Bad', 'overview': \"Walter White, a New Mexico chemistry teacher, is diagnosed with Stage III cancer and given a prognosis of only two years left to live. He becomes filled with a sense of fearlessness and an unrelenting desire to secure his family's financial future at any cost as he enters the dangerous world of drugs and crime.\", 'poster_path': '/ztkUQFLlC19CCMYHW9o1zWhJRNq.jpg', 'media_type': 'tv', 'genre_ids': [18, 80], 'popularity': 649.263, 'first_air_date': '2008-01-20', 'vote_average': 8.904, 'vote_count': 13220, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/56v2KjBlU4XaOv9rVYEQypROD7P.jpg', 'id': 66732, 'name': 'Stranger Things', 'original_language': 'en', 'original_name': 'Stranger Things', 'overview': 'When a young boy vanishes, a small town uncovers a mystery involving secret experiments, terrifying supernatural forces, and one strange little girl.', 'poster_path': '/49WJfeN0moxb9IPfGn8AIqMGskD.jpg', 'media_type': 'tv', 'genre_ids': [18, 10765, 9648], 'popularity': 338.647, 'first_air_date': '2016-07-15', 'vote_average': 8.6, 'vote_count': 16776, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/mNHRGO1gFpR2CYZdANe72kcKq7G.jpg', 'id': 153312, 'name': 'Tulsa King', 'original_language': 'en', 'original_name': 'Tulsa King', 'overview': 'Just after he is released from prison after 25 years, New York mafia capo Dwight \u201cThe General\u201d Manfredi is unceremoniously exiled by his boss to set up shop in Tulsa, Okla. Realizing that his mob family may not have his best interests in mind, Dwight slowly builds a \u201ccrew\u201d from a group of unlikely characters, to help him establish a new criminal empire in a place that to him might as well be another planet.', 'poster_path': '/fwTv3RPRAIy0maOMns5eYRRwnDk.jpg', 'media_type': 'tv', 'genre_ids': [80, 18], 'popularity': 118.295, 'first_air_date': '2022-11-13', 'vote_average': 8.4, 'vote_count': 1494, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/vXpeJJs1z8OKC88CNJX9O9QOhtr.jpg', 'id': 94997, 'name': 'House of the Dragon', 'original_language': 'en', 'original_name': 'House of the Dragon', 'overview': 'The Targaryen dynasty is at the absolute apex of its power, with more than 15 dragons under their yoke. Most empires crumble from such heights. In the case of the Targaryens, their slow fall begins when King Viserys breaks with a century of tradition by naming his daughter Rhaenyra heir to the Iron Throne. But when Viserys later fathers a son, the court is shocked when Rhaenyra retains her status as his heir, and seeds of division sow friction across the realm.', 'poster_path': '/m7ta0kNg2ONvnBFF76miVvbWK1V.jpg', 'media_type': 'tv', 'genre_ids': [10765, 18, 10759], 'popularity': 299.308, 'first_air_date': '2022-08-21', 'vote_average': 8.421, 'vote_count': 3731, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/x4salpjB11umlUOltfNvSSrjSXm.jpg', 'id': 1402, 'name': 'The Walking Dead', 'original_language': 'en', 'original_name': 'The Walking Dead', 'overview': \"Sheriff's deputy Rick Grimes awakens from a coma to find a post-apocalyptic world dominated by flesh-eating zombies. He sets out to find his family and encounters many other survivors along the way.\", 'poster_path': '/n7PVu0hSz2sAsVekpOIoCnkWlbn.jpg', 'media_type': 'tv', 'genre_ids': [10759, 18, 10765], 'popularity': 521.542, 'first_air_date': '2010-10-31', 'vote_average': 8.1, 'vote_count': 15872, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/2ZNFu0hkSVtAI6LRWGIlCPNd1Tj.jpg', 'id': 78191, 'name': 'You', 'original_language': 'en', 'original_name': 'You', 'overview': 'A dangerously charming, intensely obsessive young man goes to extreme measures to insert himself into the lives of those he is transfixed by.', 'poster_path': '/7bEYwjUvlJW7GerM8GYmqwl4oS3.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 187.278, 'first_air_date': '2018-09-09', 'vote_average': 8.066, 'vote_count': 2944, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/n6vVs6z8obNbExdD3QHTr4Utu1Z.jpg', 'id': 76479, 'name': 'The Boys', 'original_language': 'en', 'original_name': 'The Boys', 'overview': 'A group of vigilantes known informally as \u201cThe Boys\u201d set out to take down corrupt superheroes with no more than blue-collar grit and a willingness to fight dirty.', 'poster_path': '/7Ns6tO3aYjppI5bFhyYZurOYGBT.jpg', 'media_type': 'tv', 'genre_ids': [10765, 10759], 'popularity': 346.739, 'first_air_date': '2019-07-25', 'vote_average': 8.5, 'vote_count': 9228, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/rBF8wVQN8hTWHspVZBlI3h7HZJ.jpg', 'id': 60625, 'name': 'Rick and Morty', 'original_language': 'en', 'original_name': 'Rick and Morty', 'overview': \"Rick is a mentally-unbalanced but scientifically gifted old man who has recently reconnected with his family. He spends most of his time involving his young grandson Morty in dangerous, outlandish adventures throughout space and alternate universes. Compounded with Morty's already unstable family life, these events cause Morty much distress at home and school.\", 'poster_path': '/gdIrmf2DdY5mgN6ycVP0XlzKzbE.jpg', 'media_type': 'tv', 'genre_ids': [16, 35, 10765, 10759], 'popularity': 666.249, 'first_air_date': '2013-12-02', 'vote_average': 8.702, 'vote_count': 9218, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/57clBMPX25NNO6nmDw3TV3zQaQE.jpg', 'id': 114472, 'name': 'Secret Invasion', 'original_language': 'en', 'original_name': 'Secret Invasion', 'overview': 'Nick Fury and Talos discover a faction of shapeshifting Skrulls who have been infiltrating Earth for years.', 'poster_path': '/f5ZMzzCvt2IzVDxr54gHPv9jlC9.jpg', 'media_type': 'tv', 'genre_ids': [18, 10765, 10759], 'popularity': 126.163, 'first_air_date': '2023-06-21', 'vote_average': 6.859, 'vote_count': 928, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/vLN520GJvHJJQOFqqV7RjZNBwi7.jpg', 'id': 129552, 'name': 'The Night Agent', 'original_language': 'en', 'original_name': 'The Night Agent', 'overview': 'While monitoring an emergency line, a vigilant FBI agent answers a call that plunges him into a deadly conspiracy involving a mole at the White House.', 'poster_path': '/xjsx6rGEgHl2tUqkimo6Bz2KzVo.jpg', 'media_type': 'tv', 'genre_ids': [18, 9648, 10759], 'popularity': 90.464, 'first_air_date': '2023-03-23', 'vote_average': 7.874, 'vote_count': 573, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/u7OpeS4eckBSR1wFxFTuyy3FjHE.jpg', 'id': 154385, 'name': 'BEEF', 'original_language': 'en', 'original_name': 'BEEF', 'overview': 'A road rage incident between two strangers \u2014 a failing contractor and an unfulfilled entrepreneur \u2014 sparks a feud that brings out their darkest impulses.', 'poster_path': '/4b4v7RnPhNyPEaVGFarEuo74r8W.jpg', 'media_type': 'tv', 'genre_ids': [35, 18], 'popularity': 66.703, 'first_air_date': '2023-04-06', 'vote_average': 7.839, 'vote_count': 482, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/AjwoDj77HLlqcpwEGqsnvMXm5my.jpg', 'id': 136283, 'name': 'The Glory', 'original_language': 'ko', 'original_name': '\ub354 \uae00\ub85c\ub9ac', 'overview': 'After a childhood marked by pain and violence, a woman puts a carefully planned revenge scheme in motion.', 'poster_path': '/uUM4LVlPgIrww07OoEKrGWlS1Ej.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 111.593, 'first_air_date': '2022-12-30', 'vote_average': 8.555, 'vote_count': 568, 'origin_country': ['KR']}, {'adult': False, 'backdrop_path': '/npD65vPa4vvn1ZHpp3o05A5vdKT.jpg', 'id': 95396, 'name': 'Severance', 'original_language': 'en', 'original_name': 'Severance', 'overview': 'Mark leads a team of office workers whose memories have been surgically divided between their work and personal lives. When a mysterious colleague appears outside of work, it begins a journey to discover the truth about their jobs.', 'poster_path': '/lFf6LLrQjYldcZItzOkGmMMigP7.jpg', 'media_type': 'tv', 'genre_ids': [18, 9648, 10765], 'popularity': 117.625, 'first_air_date': '2022-02-17', 'vote_average': 8.403, 'vote_count': 1007, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/qBppESpY8e97WfPWVZiU0JdRXw.jpg', 'id': 84773, 'name': 'The Lord of the Rings: The Rings of Power', 'original_language': 'en', 'original_name': 'The Lord of the Rings: The Rings of Power', 'overview': 'Beginning in a time of relative peace, we follow an ensemble cast of characters as they confront the re-emergence of evil to Middle-earth. From the darkest depths of the Misty Mountains, to the majestic forests of Lindon, to the breathtaking island kingdom of N\u00famenor, to the furthest reaches of the map, these kingdoms and characters will carve out legacies that live on long after they are gone.', 'poster_path': '/mYLOqiStMxDK3fYZFirgrMt8z5d.jpg', 'media_type': 'tv', 'genre_ids': [10759, 10765, 18], 'popularity': 211.148, 'first_air_date': '2022-09-01', 'vote_average': 7.4, 'vote_count': 2396, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/hR2pFXMxVihldEk5WoSrV7Yq2ra.jpg', 'id': 124364, 'name': 'From', 'original_language': 'en', 'original_name': 'From', 'overview': 'Unravel the mystery of a nightmarish town in middle America that traps all those who enter. As the unwilling residents fight to keep a sense of normalcy and search for a way out, they must also survive the threats of the surrounding forest \u2013 including the terrifying creatures that come out when the sun goes down.', 'poster_path': '/pnrv8tfOcWxu4CrB8N7xK0jYJsR.jpg', 'media_type': 'tv', 'genre_ids': [9648, 18, 10765], 'popularity': 188.821, 'first_air_date': '2022-02-20', 'vote_average': 8.146, 'vote_count': 869, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/mYegNdFjJeCISA1RDDCKBhKB4Ao.jpg', 'id': 126725, 'name': 'Velma', 'original_language': 'en', 'original_name': 'Velma', 'overview': 'Jinkies! This raucous reimagining of the Scooby-Doo franchise unravels the mysterious origins of Mystery, Inc. \u2013 as seen through the eyes of the gang\u2019s beloved bespectacled detective Velma.', 'poster_path': '/zxkNhuPSHeDv3yA7sFu2RuEOGgR.jpg', 'media_type': 'tv', 'genre_ids': [16, 35], 'popularity': 39.651, 'first_air_date': '2023-01-12', 'vote_average': 3.464, 'vote_count': 248, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/34OGjFEbHj0E3lE2w0iTUVq0CBz.jpg', 'id': 87739, 'name': \"The Queen's Gambit\", 'original_language': 'en', 'original_name': \"The Queen's Gambit\", 'overview': 'In a 1950s orphanage, a young girl reveals an astonishing talent for chess and begins an unlikely journey to stardom while grappling with addiction.', 'poster_path': '/zU0htwkhNvBQdVSIKB9s6hgVeFK.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 113.416, 'first_air_date': '2020-10-23', 'vote_average': 8.503, 'vote_count': 4123, 'origin_country': ['US']}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url to get credits for a specific TV episode\nurl = \"https://api.themoviedb.org/3/tv/1668/season/3/episode/24/credits\"\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API request\nresponse = requests.get(url, headers=headers)\n\n# Parsing the JSON response\ndata = response.json()\n\n# Extracting the guest stars from the response\nguest_stars = data[\"guest_stars\"]\n\n# Extracting the names of guest stars\nguest_star_names = [star[\"name\"] for star in guest_stars]\n\nprint(guest_star_names)\n```",
        "usage": [
            298,
            10201,
            10499
        ],
        "executed": "['Christine Taylor', 'James Hong', 'Jon Favreau', 'Steve Park', \"Joe O'Connor\", 'Robin Williams', 'Billy Crystal', 'Bruce Buffer', 'John McCarthy', 'Sam McMurray']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {'page': 1}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show id of the most popular TV show\ntv_show_id = data['results'][0]['id']\n\n# Get the credits for the most popular TV show to find the lead actor\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Find the lead actor (first cast member) in the TV show\nlead_actor = data_credits['cast'][0]['name']\n\nprint(f\"The lead actor in the most popular TV show is: {lead_actor}\")\n```",
        "usage": [
            365,
            11634,
            11999
        ],
        "executed": "The lead actor in the most popular TV show is: Dirk Galuba\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/top_rated\"\n\n# Set the parameters for the API call\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Extract the top-1 rated TV show\n    top_rated_show = data['results'][0]\n    \n    # Get the TV show id\n    tv_id = top_rated_show['id']\n    \n    # Call the API to get the keywords for the top-1 rated TV show\n    keywords_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    keywords_response = requests.get(keywords_url, headers=headers)\n    \n    if keywords_response.status_code == 200:\n        # Extract the keyword of the top-1 rated TV show\n        keywords_data = keywords_response.json()\n        keyword = keywords_data['results'][0]['name']\n        print(\"Keyword of the top-1 rated TV show:\", keyword)\n    else:\n        print(\"Failed to retrieve keywords for the top-1 rated TV show\")\nelse:\n    print(\"Failed to retrieve top rated TV shows\") \n```",
        "usage": [
            467,
            11774,
            12241
        ],
        "executed": "Keyword of the top-1 rated TV show: hotel\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"2 Broke Girls\"\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Get the poster path of the first result (assuming there is a result)\n    if data[\"total_results\"] > 0:\n        poster_path = data[\"results\"][0][\"poster_path\"]\n        print(f\"Poster path for '2 Broke Girls': https://image.tmdb.org/t/p/original{poster_path}\")\n    else:\n        print(\"No results found for '2 Broke Girls'\")\nelse:\n    print(\"Error occurred while fetching data\")\n```",
        "usage": [
            371,
            11534,
            11905
        ],
        "executed": "Poster path for '2 Broke Girls': https://image.tmdb.org/t/p/original/qCa4ANpF1QOioqRUNHgk2B3KFMZ.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameters\nparams = {\n    \"query\": \"2 Broke Girls\",\n    \"include_adult\": False\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Parse the response JSON\n    data = response.json()\n    \n    # Get the total number of episodes from the first result\n    total_episodes = data['results'][0]['episode_run_time']\n\n    print(\"Total episodes of 2 Broke Girls:\", total_episodes)\nelse:\n    print(\"Error occurred: \", response.status_code)\n```",
        "usage": [
            335,
            12314,
            12649
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url to search for a TV show\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for searching The Big Bang Theory TV show\nparams = {\n    \"query\": \"The Big Bang Theory\",\n    \"include_adult\": False\n}\n\n# Making the API request\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params)\ndata_search_tv = response_search_tv.json()\n\n# Getting the production company id for The Big Bang Theory\nif data_search_tv[\"total_results\"] > 0:\n    tv_id = data_search_tv[\"results\"][0][\"id\"]\n    # API url to get the primary TV show details by id\n    url_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    \n    # Making the API request to get TV show details\n    response_tv_details = requests.get(url_tv_details, headers=headers)\n    data_tv_details = response_tv_details.json()\n    \n    # Getting the production company id\n    if \"production_companies\" in data_tv_details and len(data_tv_details[\"production_companies\"]) > 0:\n        company_id = data_tv_details[\"production_companies\"][0][\"id\"]\n        \n        # API url to get a companies details by id\n        url_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\n        \n        # Making the API request to get company details\n        response_company = requests.get(url_company, headers=headers)\n        data_company = response_company.json()\n        \n        # Getting the foundation date of the company\n        if \"foundation_date\" in data_company:\n            print(f\"The company that produced The Big Bang Theory was founded on {data_company['foundation_date']}\")\n        else:\n            print(\"Foundation date not available.\")\n    else:\n        print(\"Production company details not found.\")\nelse:\n    print(\"TV show not found.\")\n```",
        "usage": [
            405,
            12236,
            12641
        ],
        "executed": "Foundation date not available.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# headers provided for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for 'The Big Bang Theory' with a query\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"The Big Bang Theory\"\n}\nresponse = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata = response.json()\n\n# Get the ID of 'The Big Bang Theory' show\ntv_show_id = data['results'][0]['id']\n\n# Get the details of the TV show using the ID\nurl_tv_show_details = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\nparams_tv_show_details = {}\nresponse = requests.get(url_tv_show_details, headers=headers, params=params_tv_show_details)\ndata = response.json()\n\n# Extract the first air date from the response data\nfirst_air_date = data['first_air_date']\nprint(\"The TV show 'The Big Bang Theory' was created on:\", first_air_date)\n```",
        "usage": [
            381,
            9908,
            10289
        ],
        "executed": "The TV show 'The Big Bang Theory' was created on: 2007-09-24\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "dataset": "tmdb",
        "results": "```python\n# Call the API to get a list of the current popular TV shows\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {'page': 1}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the most popular TV show id\ntv_id = data['results'][0]['id']\n\n# Call the API to get the keywords for the most popular TV show\nurl_keywords = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\nresponse_keywords = requests.get(url_keywords, headers=headers)\ndata_keywords = response_keywords.json()\n\n# Extract and print a keyword of the most popular TV show\nif data_keywords['results']:\n    keyword = data_keywords['results'][0]['name']\n    print(f\"Keyword of the most popular TV show: {keyword}\")\nelse:\n    print(\"No keywords found for the most popular TV show.\")\n```",
        "usage": [
            371,
            11720,
            12091
        ],
        "executed": "Keyword of the most popular TV show: germany\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1c3BlcyI6WyJhcGlfcmVd.4ea6chOZzg4OTwLnoTEUnIOXCEWUD8wazJk2khtx\"\n}\n\n# Get the TV show details for Westworld\ntv_id = 63247\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\nparams = {}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Find the third episode of the second season of Westworld\nfor season in data[\"seasons\"]:\n    if season[\"season_number\"] == 2:\n        season_number = 2\n        episode_number = 3\n        break\n\n# Get the details of the third episode of the second season of Westworld\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}\"\nresponse = requests.get(url, headers=headers, params=params)\nepisode_details = response.json()\n\n# Print the overview of the episode\nprint(episode_details[\"overview\"])\n```",
        "usage": [
            311,
            12592,
            12903
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set up the API url\nurl = \"https://api.themoviedb.org/3/tv/82/season/2\"\nparams = {}\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, params=params, headers=headers)\n\n# Extract the air date of the second season of Game of Thrones from the response\nif response.status_code == 200:\n    result = response.json()\n    air_date = result['air_date']\n    print(\"The air date of the second season of Game of Thrones is:\", air_date)\nelse:\n    print(\"Error occurred while fetching data\")\n```",
        "usage": [
            296,
            12311,
            12607
        ],
        "executed": "The air date of the second season of Game of Thrones is: 1994-09-10\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Band of Brothers\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Band of Brothers\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_show_id = response_search_tv.json()[\"results\"][0][\"id\"]\n\n# Get the episode details for the third episode of Band of Brothers\nurl_episode = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/1/episode/3\"\nresponse_episode = requests.get(url_episode, headers=headers)\n\n# Get the poster path of the third episode\nposter_path = response_episode.json()[\"still_path\"]\n\nprint(poster_path)\n```",
        "usage": [
            342,
            10901,
            11243
        ],
        "executed": "/122cDgrjc5lFqUZ7cYi8vUVrcrn.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters for the query\nparams = {\n    \"query\": \"Game of Thrones\",\n    \"include_adult\": False\n}\n\n# Make the GET request to search for the TV show\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Check if any results were returned\n    if data['total_results'] > 0:\n        # Extract the network id for Game of Thrones\n        network_id = data['results'][0]['networks'][0]['id']\n        \n        # Define the API url to get the network logos\n        network_url = f\"https://api.themoviedb.org/3/network/{network_id}/images\"\n        \n        # Make the GET request to get the network logos\n        network_response = requests.get(network_url, headers=headers)\n        \n        # Check if the request was successful\n        if network_response.status_code == 200:\n            network_data = network_response.json()\n            # Get the logo path of the network that produced Game of Thrones\n            logo_path = network_data['logos'][0]['file_path']\n            print(f\"The logo for the network that produced Game of Thrones: https://image.tmdb.org/t/p/original{logo_path}\")\n        else:\n            print(\"Error in getting network logos.\")\n    else:\n        print(\"No TV show found matching the query.\")\nelse:\n    print(\"Error in searching for the TV show.\")\n```",
        "usage": [
            340,
            13655,
            13995
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/1399\"\n\n# Parameters\nparams = {\n    'append_to_response': 'networks'\n}\n\n# Header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Extract the homepage of the network that produced Game of Thrones\n    homepage = data['networks'][0]['homepage'] if 'networks' in data and len(data['networks']) > 0 else \"Homepage not found\"\n\n    print(\"Homepage of the network that produced Game of Thrones: \", homepage)\nelse:\n    print(\"Failed to fetch data\")\n```",
        "usage": [
            343,
            13054,
            13397
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url for getting the list of current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Parameters for the API call\nparams = {\n    \"page\": 1\n}\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Get the first TV show from the list\n    if len(data['results']) > 0:\n        first_show = data['results'][0]\n        # Get the keywords for the first TV show\n        tv_id = first_show['id']\n\n        # New API url for getting the keywords of a TV show\n        keywords_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n        keywords_response = requests.get(keywords_url, headers=headers)\n\n        if keywords_response.status_code == 200:\n            keywords_data = keywords_response.json()\n            # Get the first keyword from the list\n            if len(keywords_data['results']) > 0:\n                keyword = keywords_data['results'][0]['name']\n                print(\"Keyword of the most popular TV show currently:\", keyword)\n            else:\n                print(\"No keywords found for the most popular TV show.\")\n        else:\n            print(\"Failed to get keywords for the most popular TV show.\")\n    else:\n        print(\"No TV shows found in the list.\")\nelse:\n    print(\"Failed to get the list of current popular TV shows.\")\n```",
        "usage": [
            511,
            10130,
            10641
        ],
        "executed": "Keyword of the most popular TV show currently: germany\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of the current popular TV shows\nresponse = requests.get(\"https://api.themoviedb.org/3/tv/popular\", headers=headers)\ndata = response.json()\n\n# Get the production company id of the most popular TV show\ncompany_id = data[\"results\"][0][\"production_companies\"][0][\"id\"]\n\n# Get the details of the company by id\nresponse_company = requests.get(f\"https://api.themoviedb.org/3/company/{company_id}\", headers=headers)\ncompany_data = response_company.json()\n\n# Extract the headquarters of the company\nheadquarters = company_data[\"headquarters\"]\nprint(f\"The headquarter of the company that produced the currently most popular TV show is: {headquarters}\")\n```",
        "usage": [
            335,
            10966,
            11301
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/82856\"\n# Params for the API call\nparams = {\n    \"api_key\": \"YOUR_API_KEY\"  # Replace YOUR_API_KEY with your actual API key\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Get the genre_ids\n    genre_ids = data['genres']\n    # List to store genre names\n    genres = []\n    # API to get the list of official genres for TV shows\n    genres_url = \"https://api.themoviedb.org/3/genre/tv/list\"\n    genres_response = requests.get(genres_url, headers=headers, params=params)\n    \n    if genres_response.status_code == 200:\n        # Parse the JSON response\n        genres_data = genres_response.json()\n        # Create a dictionary of genre ids and names for easy lookup\n        genre_dict = {genre['id']: genre['name'] for genre in genres_data['genres']}\n        # Retrieve the genre names for the genre_ids of The Mandalorian\n        genres = [genre_dict[genre_id] for genre_id in genre_ids]\n\n    print(\"The genre of The Mandalorian is:\", genres)\nelse:\n    print(\"Failed to get the TV show details. Status code:\", response.status_code)\n```",
        "usage": [
            324,
            11386,
            11710
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url for getting the trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the trending TV show details from the response\n    trending_shows = response.json()['results']\n    \n    # Get the lead actor id of the most trending TV show\n    lead_actor_id = trending_shows[0]['credits']['cast'][0]['id']\n    \n    # Set the API url for getting the person details by id\n    person_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n    \n    # Send a GET request to the person details API\n    person_response = requests.get(person_url, headers=headers)\n    \n    # Check if the person details response is successful\n    if person_response.status_code == 200:\n        # Get the birthday of the lead actor\n        lead_actor_birthday = person_response.json()['birthday']\n        \n        print(\"Birthday of the lead actor of today's most trending TV show:\", lead_actor_birthday)\n    else:\n        print(\"Failed to get lead actor details\")\nelse:\n    print(\"Failed to get trending TV shows\")\n\n```",
        "usage": [
            459,
            10689,
            11148
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the trending TV shows for today\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\ntrending_tv_data = response_trending_tv.json()\n\n# Get the network id of the most trending TV show\nmost_trending_tv_id = trending_tv_data['results'][0]['id']\n\n# Get the details of the most trending TV show\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{most_trending_tv_id}\"\nresponse_tv_details = requests.get(url_tv_details, headers=headers)\ntv_details_data = response_tv_details.json()\n\n# Get the network id that produced the most trending TV show\nnetwork_id = tv_details_data['networks'][0]['id']\n\n# Get the homepage of the network\nurl_network = f\"https://api.themoviedb.org/3/network/{network_id}\"\nresponse_network = requests.get(url_network, headers=headers)\nnetwork_data = response_network.json()\n\n# Print the homepage of the network\nprint(\"Homepage of the network that produced today's most trending TV show:\", network_data['homepage'])\n```",
        "usage": [
            425,
            11793,
            12218
        ],
        "executed": "Homepage of the network that produced today's most trending TV show: http://www.netflix.com\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "give me a review of today's most trending TV show",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the base URL\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the headers with the provided API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Get the daily trending TV shows\ntrending_url = f\"{base_url}/trending/tv/day\"\nresponse = requests.get(trending_url, headers=headers)\ntrending_data = response.json()\n\n# Step 2: Get the reviews of the most trending TV show\nif \"results\" in trending_data and len(trending_data[\"results\"]) > 0:\n    # Extract the TV show id of the most trending show\n    tv_id = trending_data[\"results\"][0][\"id\"]\n    \n    # Get the reviews of the TV show\n    review_url = f\"{base_url}/tv/{tv_id}/reviews\"\n    response = requests.get(review_url, headers=headers)\n    review_data = response.json()\n    \n    # Display the review data\n    print(review_data)\nelse:\n    print(\"No trending TV shows found for today.\")\n```",
        "usage": [
            383,
            11930,
            12313
        ],
        "executed": "{'id': 236235, 'page': 1, 'results': [], 'total_pages': 0, 'total_results': 0}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get trending TV shows\ntrending_url = \"https://api.themoviedb.org/3/trending/tv/day\"\ntrending_response = requests.get(trending_url, headers=headers)\n\nif trending_response.status_code == 200:\n    trending_tv_id = trending_response.json()[\"results\"][0][\"id\"]\n    similar_tv_url = f\"https://api.themoviedb.org/3/tv/{trending_tv_id}/similar\"\n    similar_tv_response = requests.get(similar_tv_url, headers=headers)\n    \n    if similar_tv_response.status_code == 200:\n        similar_tv_shows = similar_tv_response.json()[\"results\"]\n        print(similar_tv_shows)\n    else:\n        print(\"Error in getting similar TV shows\")\nelse:\n    print(\"Error in getting trending TV shows\")\n```",
        "usage": [
            344,
            13160,
            13504
        ],
        "executed": "[{'adult': False, 'backdrop_path': '/yYPFzdQdRzeidwl3llxFFOKyNwe.jpg', 'genre_ids': [18, 80], 'id': 127585, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'American Gigolo', 'overview': 'Julian Kaye has always been an object of desire, so much so that people are willing to destroy him in order to have him. Exonerated, after 15 years in prison for a murder he didn\u2019t commit, he now faces the challenge of picking up the pieces as the detective who put him behind bars tries to unravel the mystery that led to his wrongful incarceration.', 'popularity': 37.733, 'poster_path': '/m0nRFOLYUju4XHG7v2jZZf3n6vs.jpg', 'first_air_date': '2022-09-11', 'name': 'American Gigolo', 'vote_average': 7.054, 'vote_count': 56}, {'adult': False, 'backdrop_path': '/lwcRxaeAYNox5dyoUYqEDS9NZYK.jpg', 'genre_ids': [35], 'id': 127620, 'origin_country': ['ES'], 'original_language': 'es', 'original_name': 'Se\u00f1or, dame paciencia', 'overview': '', 'popularity': 10.211, 'poster_path': '/9oIcKDhNXpi6wVdLhQQApdp9YLz.jpg', 'first_air_date': '2022-01-02', 'name': 'Lord, Give Me Patience', 'vote_average': 4.25, 'vote_count': 4}, {'adult': False, 'backdrop_path': '/jPyKuRjloYkjVWNPtXCrYxtg3Bu.jpg', 'genre_ids': [10759, 16, 35, 10765, 10762], 'id': 2745, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Aladdin', 'overview': 'Aladdin is an animated television series made by Walt Disney Television which aired from 1994 to 1995, based on the original 1992 feature. It was animated at the Slightly Offbeat Productions Studios in Penrose, Auckland, New Zealand. Coming on the heels of the direct-to-video sequel The Return of Jafar, the series picked up where that installment left off, with Aladdin now living in the palace, engaged to beautiful and spunky Princess Jasmine. \"Al\" and Jasmine went together into peril among sorcerers, monsters, thieves, and more. Monkey sidekick Abu, the animated Magic Carpet, and the fast-talking, shape-shifting Genie came along to help, as did sassy, complaining parrot Iago, formerly Jafar\u2019s pet but now an antihero. Jafar, having previously been destroyed in the second movie, returns in only one episode which also serves as a crossover with Hercules: The Animated Series.', 'popularity': 113.404, 'poster_path': '/nlaiczW81kY46GBdfIcTrBIqr8I.jpg', 'first_air_date': '1994-02-06', 'name': 'Aladdin', 'vote_average': 6.9, 'vote_count': 315}, {'adult': False, 'backdrop_path': '/mnntYG8SWVnnVfHohU5RyyDyYou.jpg', 'genre_ids': [35], 'id': 49929, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Bad Teacher', 'overview': 'An always inappropriate, fearless and unapologetic former trophy wife masquerades as a teacher in order to find a new man after her wealthy husband leaves her penniless.', 'popularity': 37.026, 'poster_path': '/uBHsOsDDxzGLFF05k0ebSZyawOh.jpg', 'first_air_date': '2014-04-24', 'name': 'Bad Teacher', 'vote_average': 5.828, 'vote_count': 29}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18], 'id': 1337, 'origin_country': ['CA'], 'original_language': 'en', 'original_name': 'FX: The Series', 'overview': 'Rollie Tyler, a special effects expert, helps his detective friend solve crimes by making criminals see what they want to see. But what is real and what is illusion?', 'popularity': 66.314, 'poster_path': '/kLdsiEqnLEdVde4mq32i15xgEBi.jpg', 'first_air_date': '1996-09-09', 'name': 'FX: The Series', 'vote_average': 6.133, 'vote_count': 15}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18, 35], 'id': 99410, 'origin_country': ['CL'], 'original_language': 'es', 'original_name': 'Las historias de Sussi', 'overview': \"Sussi, a beautiful young woman lives in Santiago with three other women.  Each episode tells different situations and jobs that Sussi have, knowing in each of those different men with whom she has some kind of  affair. Through these experiences, she learns about life and love.\\n\\nBased on Gonzalo Justiniano's movie Sussi.\", 'popularity': 21.853, 'poster_path': None, 'first_air_date': '1998-05-19', 'name': 'Las historias de Sussi', 'vote_average': 0.0, 'vote_count': 0}, {'adult': False, 'backdrop_path': '/vsTGVJhZ2x6DoNZa98LL1QuWfTp.jpg', 'genre_ids': [35, 10759, 10751], 'id': 1797, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Honey, I Shrunk the Kids: The TV Show', 'overview': \"Honey, I Shrunk the Kids: The TV Show is an American syndicated science fiction sitcom based on the 1989 film, Honey, I Shrunk the Kids. It expands upon the original film's concept of a shrinking experiment gone wrong to include a myriad of experiments gone awry. It debuted in first-run syndication on September 1, 1997 and ran for three consecutive seasons, concluding with the 66th episode on May 20, 2000.\\n\\nPeter Scolari took over the role as Wayne Szalinski, the wacky inventor in the original film, played by Rick Moranis. Each episode incorporates new technologies and digital effects to feature the family in various new adventures. The series was filmed in Calgary, Alberta, with its main studios located in Currie Barracks, a decommissioned Canadian Forces dormitory.\", 'popularity': 56.501, 'poster_path': '/g1NWIdQxYGlXC9SA8wkMSYvywJQ.jpg', 'first_air_date': '1997-09-27', 'name': 'Honey, I Shrunk the Kids: The TV Show', 'vote_average': 5.339, 'vote_count': 31}, {'adult': False, 'backdrop_path': '/nL4p0sJWOPQOkznQ7th5WKD6wce.jpg', 'genre_ids': [16, 10759, 10765], 'id': 1890, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Roughnecks: Starship Troopers Chronicles', 'overview': 'The exploits of the Mobile Infantry squad, \"Razak\\'s Roughnecks,\" during the SICON\u2013Bugs War between a newly united humanity and an extraterrestrial race, known as the \"Bugs,\" also sometimes referred to as Arachnids.', 'popularity': 47.492, 'poster_path': '/9nsL5HOXthBIesyPp6j07mtUK8d.jpg', 'first_air_date': '1999-08-30', 'name': 'Roughnecks: Starship Troopers Chronicles', 'vote_average': 6.833, 'vote_count': 18}, {'adult': False, 'backdrop_path': '/1LyPGN2D5MtMeCPzmfq5QC5zaXv.jpg', 'genre_ids': [35], 'id': 202213, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'History of the World: Part II', 'overview': 'Explore different periods of human history through a variety of sketches.', 'popularity': 31.569, 'poster_path': '/6PlHUsScubMx3VADGRh1kIylML2.jpg', 'first_air_date': '2023-03-06', 'name': 'History of the World: Part II', 'vote_average': 5.361, 'vote_count': 54}, {'adult': False, 'backdrop_path': '/lghMCJJ7u2fIHMVtsrsMCV9OTsI.jpg', 'genre_ids': [10759, 18, 10765], 'id': 202411, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Monarch: Legacy of Monsters', 'overview': \"After surviving Godzilla's attack on San Francisco, Cate is shaken yet again by a shocking secret. Amid monstrous threats, she embarks on a globetrotting adventure to learn the truth about her family\u2014and the mysterious organization known as Monarch.\", 'popularity': 250.611, 'poster_path': '/uwrQHMnXD2DA1rvaMZk4pavZ3CY.jpg', 'first_air_date': '2023-11-16', 'name': 'Monarch: Legacy of Monsters', 'vote_average': 8.016, 'vote_count': 610}, {'adult': False, 'backdrop_path': '/4yvQlzOaOWleR2kFW4zs1pllMYU.jpg', 'genre_ids': [35], 'id': 1462, 'origin_country': ['GB'], 'original_language': 'en', 'original_name': 'Let Them Eat Cake', 'overview': 'Let Them Eat Cake is a British sitcom starring Dawn French and Jennifer Saunders set in France, 1782, just seven years before the French Revolution. It is one of the few programmes in which French and Saunders have appeared which they did not create themselves.', 'popularity': 7.906, 'poster_path': '/x3qKj73qC65xMGBpwRsXlK2VLDZ.jpg', 'first_air_date': '1999-09-09', 'name': 'Let Them Eat Cake', 'vote_average': 6.8, 'vote_count': 5}, {'adult': False, 'backdrop_path': '/iXrseWaiQSmGQjePTj8pmd4pMCp.jpg', 'genre_ids': [18, 10765], 'id': 1475, 'origin_country': ['US', 'CA'], 'original_language': 'en', 'original_name': 'The Dead Zone', 'overview': 'Johnny Smith discovers he has developed psychic abilities after a coma.', 'popularity': 89.1, 'poster_path': '/j9l4svOscUWoVqGoATtGEDfTms.jpg', 'first_air_date': '2002-06-16', 'name': 'The Dead Zone', 'vote_average': 7.2, 'vote_count': 131}, {'adult': False, 'backdrop_path': '/sql1v8szmHZNPCRfNhSwNpMqOnn.jpg', 'genre_ids': [18], 'id': 73010, 'origin_country': ['BR'], 'original_language': 'pt', 'original_name': 'Sob Press\u00e3o', 'overview': 'Inside a chaotic emergency room in Rio de Janeiro, a team of doctors are torn between their internal personal conflicts, the difficulties of the profession and the surprising dramas behind each patient\u2018s history, in a heroic attempt to save lives...See more', 'popularity': 73.912, 'poster_path': '/nv9ay0scDNf92evgnyNejpnifZ6.jpg', 'first_air_date': '2017-07-25', 'name': 'Under Pressure', 'vote_average': 8.0, 'vote_count': 13}, {'adult': False, 'backdrop_path': '/cFyp7F8qiBSuSj1qhUnu8MDvubl.jpg', 'genre_ids': [35], 'id': 201834, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'ted', 'overview': \"It's 1993 and Ted the bear's moment of fame has passed, leaving him living with his best friend, 16-year-old John Bennett, who lives in a working-class Boston home with his parents and cousin. Ted may not be the best influence on John, but when it comes right down to it, he's willing to go out on a limb to help his friend and his family.\", 'popularity': 236.867, 'poster_path': '/cPn71YFDENH0JkWUezlsLyWmLfN.jpg', 'first_air_date': '2024-01-11', 'name': 'ted', 'vote_average': 8.152, 'vote_count': 277}, {'adult': False, 'backdrop_path': '/hGtx3dAB6x0ShXpDk4BBvt74Mtx.jpg', 'genre_ids': [18, 35, 10765], 'id': 99654, 'origin_country': ['KR'], 'original_language': 'ko', 'original_name': '18 \uc5b4\uac8c\uc778', 'overview': \"At a difficult place in his marriage and career, a middle-aged man gets a shot at a do-over when he's transformed back into his 18-year-old body.\", 'popularity': 97.606, 'poster_path': '/AwoC5PiNdi1RZTZTgOGGdHqCzrC.jpg', 'first_air_date': '2020-09-21', 'name': '18 Again', 'vote_average': 8.348, 'vote_count': 201}, {'adult': False, 'backdrop_path': '/9L7YV0V2LfKeBZoOVSM55JoDgJr.jpg', 'genre_ids': [18, 10759], 'id': 228186, 'origin_country': ['BR'], 'original_language': 'pt', 'original_name': 'Aldo: Mais Forte que o Mundo', 'overview': '', 'popularity': 3.802, 'poster_path': '/wlj3QrXPGHCsKN6JzVVDIWq5Ovy.jpg', 'first_air_date': '2017-01-03', 'name': 'Aldo: Mais Forte que o Mundo', 'vote_average': 0.0, 'vote_count': 0}, {'adult': False, 'backdrop_path': '/e3F1DhLs90kk1hWZhoTUanrxjMu.jpg', 'genre_ids': [16, 10751, 35, 10759, 10765, 10762], 'id': 2355, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Lilo & Stitch: The Series', 'overview': 'This animated series chronicles the further adventures of renegade scientist Dr. Jumba Jookiba\\'s beloved Experiment 626, who is now living happily as Lilo\\'s alien buddy Stitch. Jumba\u2019s remaining experiments have landed all over Hawaii in the form of dehydrated pods. Lilo and Stitch\u2019s mission is to catch Stitch\u2019s \"cousins\" before they fall into the clutches of the evil Dr. Jacques von Hamsterviel!', 'popularity': 154.763, 'poster_path': '/997mXFpYV2zdXK4EOctN3hgciaT.jpg', 'first_air_date': '2003-09-20', 'name': 'Lilo & Stitch: The Series', 'vote_average': 7.353, 'vote_count': 523}, {'adult': False, 'backdrop_path': '/mgvMMxKz4eDLeompM9oJRDufNdW.jpg', 'genre_ids': [10759, 16, 35, 9648], 'id': 2286, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Real Ghostbusters', 'overview': 'The continuing adventures of paranormal investigators Dr. Peter Venkman, Dr. Egon Spengler, Dr. Ray Stantz, Winston Zeddemore, their secretary Janine Melnitz and their mascot ghost Slimer.', 'popularity': 125.84, 'poster_path': '/j1xlBYeyOQcH51xQc4gEFJK6o13.jpg', 'first_air_date': '1986-09-13', 'name': 'The Real Ghostbusters', 'vote_average': 7.498, 'vote_count': 226}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18], 'id': 228528, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Cruel Intentions', 'overview': \"At an elite Washington, D.C., college, two ruthless step-siblings will do anything to stay on top of the cutthroat social hierarchy. After a brutal hazing incident threatens the entire Panhellenic system at their school, they'll do whatever is necessary to preserve their power and reputation, even if that means seducing the daughter of the vice president of the United States.\", 'popularity': 5.917, 'poster_path': None, 'first_air_date': '', 'name': 'Cruel Intentions', 'vote_average': 0.0, 'vote_count': 0}, {'adult': False, 'backdrop_path': '/cElydeQSNZmX8NRFPEB0FTTYigo.jpg', 'genre_ids': [18], 'id': 74169, 'origin_country': ['IT'], 'original_language': 'it', 'original_name': 'Anna Karenina', 'overview': 'Anna and Kitty. Two lives. One of desperate passion that ends in tragedy, the other, an existence made real through love. Two destinies that interweave, giving rise to two, so very different stories, yet lived in pursuit of the same desire- to find a love that lets them fully be themselves, to live without having to conform to society\u2019s pretenses.', 'popularity': 19.062, 'poster_path': '/b6seDdJl7B1bRcy32qgAqZAMNNY.jpg', 'first_air_date': '2013-12-02', 'name': 'Anna Karenina', 'vote_average': 7.286, 'vote_count': 14}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get the trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the data from the response\n    data = response.json()\n    # Extract the poster path of the most trending TV show\n    if data[\"results\"]:\n        # Get the poster path of the first trending TV show\n        poster_path = data[\"results\"][0][\"poster_path\"]\n        print(f\"The poster of the most trending TV show today: https://image.tmdb.org/t/p/original{poster_path}\")\n    else:\n        print(\"No trending TV shows found\")\nelse:\n    print(\"Failed to fetch data\")\n\n```",
        "usage": [
            351,
            13509,
            13860
        ],
        "executed": "The poster of the most trending TV show today: https://image.tmdb.org/t/p/original/e5hw7bThIs8u6WBHjYHhwTIRsL2.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for person with name 'Jeremy Clarkson'\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Jeremy Clarkson\",\n    \"include_adult\": False\n}\nresponse = requests.get(person_search_url, headers=headers, params=params)\nresult = response.json()\n\n# Get the person_id of Jeremy Clarkson\nperson_id = result['results'][0]['id']\n\n# Get the TV show credits for Jeremy Clarkson\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\ntv_credits = response.json()\n\n# Find the most popular TV show\nmost_popular_show = max(tv_credits['cast'], key=lambda x: x['popularity'])\n\n# Get the cast and crew for the most popular TV show\ntv_id = most_popular_show['id']\ntv_credits_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\nresponse = requests.get(tv_credits_details_url, headers=headers)\ntv_credits_details = response.json()\n\n# Find people who have worked with Jeremy Clarkson in his most popular TV show\npeople_collaborated = []\nfor cast_member in tv_credits_details['cast']:\n    if cast_member['name'] != 'Jeremy Clarkson':\n        people_collaborated.append(cast_member['name'])\n\npeople_collaborated\n```",
        "usage": [
            483,
            11229,
            11712
        ],
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers needed to access the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Black Mirror\" to get the TV show id\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\"query\": \"Black Mirror\"}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\ntv_id = search_results['results'][0]['id']\n\n# Get the details of the second season of Black Mirror\nseason_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2\"\nseason_response = requests.get(season_url, headers=headers)\nseason_info = season_response.json()\n\n# Get the first episode details\nfirst_episode = season_info['episodes'][0]\n\n# Get the cast information for the first episode\ncast = first_episode['crew']\n\n# Find the lead actor in the cast\nlead_actor = [actor for actor in cast if actor[\"job\"] == \"Director\"][0]\n\nprint(lead_actor)\n```",
        "usage": [
            389,
            10054,
            10443
        ],
        "executed": "{'job': 'Director', 'department': 'Directing', 'credit_id': '5cf78e3b92514153b7b8cdb3', 'adult': False, 'gender': 2, 'id': 220702, 'known_for_department': 'Directing', 'name': 'Owen Harris', 'original_name': 'Owen Harris', 'popularity': 7.019, 'profile_path': '/cRmmAqvKQfnroB0KuzA0wCaypkg.jpg'}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Get the TV show details for The Mandalorian\ntv_show_id = 82856\ntv_show_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\ntv_show_response = requests.get(tv_show_url, headers=headers)\ntv_show_data = tv_show_response.json()\n\n# 2. Get the lead actor's details\nlead_actor_id = tv_show_data['created_by'][0]['id']\nperson_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nperson_response = requests.get(person_url, headers=headers)\nperson_data = person_response.json()\n\n# Output the birthdate of the lead actor\nprint(f\"The lead actor of The Mandalorian is {person_data['name']} and was born on {person_data['birthday']}\")\n```",
        "usage": [
            350,
            10265,
            10615
        ],
        "executed": "The lead actor of The Mandalorian is Jon Favreau and was born on 1966-10-19\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n# Set the parameters\nparams = {\n    \"page\": 1\n}\n# Set the authorization headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Extract the data from the response\n    data = response.json()\n    \n    # Get the result array from the response\n    results = data.get('results', [])\n    \n    if results:\n        # Get the name of the lead actor from the first TV show in the results\n        lead_actor = results[0]['cast'][0]['name']\n        print(\"The lead actor of today's most popular TV show is:\", lead_actor)\n    else:\n        print(\"No results found for popular TV shows.\")\nelse:\n    print(\"Failed to retrieve data from the API.\")\n```",
        "usage": [
            373,
            12007,
            12380
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the list of current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Specify the page number as 1 to get the first page of results\nparams = {\"page\": 1}\n\n# Make a GET request to the API with the provided headers\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the data from the response\n    data = response.json()\n    \n    # Get the TV show ID of the most popular TV show\n    tv_id = data['results'][0]['id']\n    \n    # Define the API endpoint to get the credits of the TV show\n    credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    \n    # Make a GET request to the credits API\n    credits_response = requests.get(credits_url, headers=headers)\n    \n    # Check if the credits response is successful\n    if credits_response.status_code == 200:\n        # Get the data from the credits response\n        credits_data = credits_response.json()\n        \n        # Get the profile path of the lead actor of the TV show\n        lead_actor_profile_path = credits_data['cast'][0]['profile_path']\n        \n        # Print the URL for the image of the lead actor\n        if lead_actor_profile_path:\n            image_url = f\"https://image.tmdb.org/t/p/original/{lead_actor_profile_path}\"\n            print(image_url)\n        else:\n            print(\"Lead actor profile path not available\")\n    else:\n        print(\"Failed to fetch credits data\")\nelse:\n    print(\"Failed to fetch popular TV shows data\")\n```  ",
        "usage": [
            369,
            11890,
            12259
        ],
        "executed": "https://image.tmdb.org/t/p/original//yYjGRTKpBW2XHaBfoA8ilJtmXDq.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Cate Blanchett to get person id\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Cate Blanchett\"\n}\nresponse = requests.get(person_search_url, headers=headers, params=params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the latest TV show credits for Cate Blanchett\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\nlatest_tv_show_id = response.json()[\"cast\"][0][\"id\"]\n\n# Get reviews for the latest TV show\nreviews_url = f\"https://api.themoviedb.org/3/tv/{latest_tv_show_id}/reviews\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(reviews_url, headers=headers, params=params)\nreviews = response.json()[\"results\"]\n\nprint(reviews)\n```",
        "usage": [
            387,
            10158,
            10545
        ],
        "executed": "[]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people API to get David Schwimmer's ID\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"include_adult\": \"false\"\n}\nresponse = requests.get(person_search_url, headers=headers, params=params)\nperson_id = response.json()['results'][0]['id']\n\n# Get TV show credits for David Schwimmer\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\ntv_credits = response.json()['cast']\n\n# Find the most popular TV show\nmost_popular_tv_show = max(tv_credits, key=lambda x: x['popularity'])\n\n# Output\nprint(\"David Schwimmer's most popular TV show is:\", most_popular_tv_show['original_name'])\n```",
        "usage": [
            368,
            11403,
            11771
        ],
        "executed": "David Schwimmer's most popular TV show is: The Daily Show\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for TV show \"Black Mirror\"\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_tv_params = {\n    \"query\": \"Black Mirror\",\n    \"include_adult\": False\n}\nsearch_tv_response = requests.get(search_tv_url, headers=headers, params=search_tv_params)\nsearch_tv_data = search_tv_response.json()\ntv_id = search_tv_data[\"results\"][0][\"id\"]\n\n# Step 2: Get the credits for the third episode of the second season of Black Mirror\nseason_credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/episode/3/credits\"\nseason_credits_response = requests.get(season_credits_url, headers=headers)\nseason_credits_data = season_credits_response.json()\nfor crew_member in season_credits_data[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director_name = crew_member[\"name\"]\n        break\n\n# Output the director of the third episode of the second season of Black Mirror\nprint(f\"The director of the third episode of the second season of Black Mirror is: {director_name}\")\n```",
        "usage": [
            421,
            12207,
            12628
        ],
        "executed": "The director of the third episode of the second season of Black Mirror is: Bryn Higgins\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the base url for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people with the query parameter for Christopher Nolan\nsearch_person_url = f\"{base_url}/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\ndata = response.json()\n\n# Obtain the known_for movies of Christopher Nolan\nif \"results\" in data and data[\"results\"]:\n    person_id = data[\"results\"][0][\"id\"]\n    known_for = data[\"results\"][0][\"known_for\"]\n    \n    # Extracting movie titles from known_for\n    movies = [item[\"original_title\"] for item in known_for if item[\"media_type\"] == \"movie\"]\n    print(movies)\nelse:\n    print(\"No results found for Christopher Nolan\")\n```",
        "usage": [
            362,
            11835,
            12197
        ],
        "executed": "['Inception', 'Interstellar', 'The Dark Knight']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API for Avatar movie\nurl_avatar = \"https://api.themoviedb.org/3/search/movie\"\nparams_avatar = {\n    \"query\": \"Avatar\",\n    \"include_adult\": False,\n    \"page\": 1\n}\nresponse_avatar = requests.get(url_avatar, headers=headers, params=params_avatar)\ndata_avatar = response_avatar.json()\n\n# API for Avatar: The Way of Water movie\nurl_water = \"https://api.themoviedb.org/3/search/movie\"\nparams_water = {\n    \"query\": \"Avatar: The Way of Water\",\n    \"include_adult\": False,\n    \"page\": 1\n}\nresponse_water = requests.get(url_water, headers=headers, params=params_water)\ndata_water = response_water.json()\n\n# Extracting average rating for both movies\nrating_avatar = data_avatar['results'][0]['vote_average']\nrating_water = data_water['results'][0]['vote_average']\n\n# Comparing ratings\nif rating_avatar > rating_water:\n    print(\"Avatar has a higher rating than Avatar: The Way of Water\")\nelif rating_water > rating_avatar:\n    print(\"Avatar: The Way of Water has a higher rating than Avatar\")\nelse:\n    print(\"Both movies have the same rating\")\n```",
        "usage": [
            433,
            10896,
            11329
        ],
        "executed": "Avatar: The Way of Water has a higher rating than Avatar\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/discover/movie\"\nparams = {\n    \"api_key\": \"YOUR_API_KEY\",\n    \"language\": \"en-US\",\n    \"sort_by\": \"vote_average.desc\",\n    \"vote_average.gte\": 7.0,\n    \"primary_release_date.gte\": \"2021-01-01\"\n}\n\n# Make the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    movies = data['results']\n    \n    # Output the movie titles\n    for movie in movies:\n        print(movie['title'])\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            338,
            11519,
            11857
        ],
        "executed": "Notes on Summer\nLysreisen\nHonduras - Vestiges d\u2019une civilisation oubli\u00e9e\nChocolate - Director's Cut\nTwelve Days\nBee's Knee's\nAfter Rock\nFrom Sound Check To Stage: Emergency Break\nVictor\nIn Between\nUnderground\nCampaign Day\nSnowman Bully\nEggenheimer\nNo to stealing\nElos 2 - Retalia\u00e7\u00e3o\nElos\nFrame by Frame\nKing Serio\nMORT THEORY: The Crimes of Mort\n",
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Lord of the Rings\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Lord of the Rings\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the genre of the first movie in the search results\nif data[\"total_results\"] > 0:\n    movie_id = data[\"results\"][0][\"id\"]\n    genre_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    response = requests.get(genre_url, headers=headers)\n    genre_data = response.json()\n    genres = [genre[\"name\"] for genre in genre_data[\"genres\"]]\n    print(genres)\nelse:\n    print(\"No movie found with the title 'Lord of the Rings'\")\n```",
        "usage": [
            354,
            9710,
            10064
        ],
        "executed": "['Adventure', 'Fantasy', 'Action']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of popular people\nresponse = requests.get(\"https://api.themoviedb.org/3/person/popular\", headers=headers)\nif response.status_code == 200:\n    data = response.json()\n    # Find the most popular person\n    most_popular_person = max(data[\"results\"], key=lambda x: x[\"popularity\"])\n    person_id = most_popular_person[\"id\"]\n\n    # Call the API to get the details of the most popular person\n    response_person = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}\", headers=headers)\n    if response_person.status_code == 200:\n        person_data = response_person.json()\n        birthday = person_data[\"birthday\"]\n        print(birthday)\n    else:\n        print(\"Failed to fetch person details\")\nelse:\n    print(\"Failed to fetch popular people list\")\n```",
        "usage": [
            366,
            11884,
            12250
        ],
        "executed": "1967-07-26\n",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url to get details of the TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the query parameter to search for \"Big Bang Theory\"\nparams = {\n    \"query\": \"Big Bang Theory\",\n    \"include_adult\": False\n}\n\n# Make a GET request to search for the TV show\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the TV show id from the response\ntv_id = response.json()[\"results\"][0][\"id\"]\n\n# Set the API url to get the details of the second season of the TV show\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2\"\n\n# Make a GET request to get the details of the second season\nresponse = requests.get(url, headers=headers)\n\n# Extract the poster path of the second season\nposter_path = response.json()[\"poster_path\"]\n\n# Print the poster path\nprint(poster_path)\n```",
        "usage": [
            213,
            12998,
            13211
        ],
        "executed": "/2NBwUBZ4clwj6qO9fBinfxiB0dR.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2/episode/3\"\n\n# Set the required HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Extract the name of the third episode of the second season of Mandalorian\n    third_episode_name = data[\"name\"]\n    print(third_episode_name)\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            303,
            11521,
            11824
        ],
        "executed": "Chapter 11: The Heiress\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Using the search/movie API to search for \"The Shawshank Redemption\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the lead actor's ID from the search results\nlead_actor_id = data[\"results\"][0][\"id\"]\n\n# Using the movie/{movie_id}/credits API to get the cast and crew details of the movie\nurl = f\"https://api.themoviedb.org/3/movie/{lead_actor_id}/credits\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Extracting the lead actor's ID from the cast\nlead_actor_id = data[\"cast\"][0][\"id\"]\n\n# Using the person/{person_id} API to get the details of the lead actor\nurl = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Getting the birthday of the lead actor\nbirthday = data[\"birthday\"]\nprint(\"The birthday of the lead actor of the movie The Shawshank Redemption is:\", birthday)\n```",
        "usage": [
            287,
            11682,
            11969
        ],
        "executed": "The birthday of the lead actor of the movie The Shawshank Redemption is: 1958-10-16\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API URL for searching for the movie \"The Shawshank Redemption\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n# Set the parameters for the movie search\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Call the API to search for the movie \"The Shawshank Redemption\"\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Extract the director's ID from the search results\nif data_search_movie[\"total_results\"] > 0:\n    movie_id = data_search_movie[\"results\"][0][\"id\"]\n\n    # Set the API URL for getting the credits of the movie\n    url_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n    # Call the API to get the credits of the movie\n    response_movie_credits = requests.get(url_movie_credits, headers=headers)\n    data_movie_credits = response_movie_credits.json()\n\n    # Extract the ID of the director from the credits\n    director_id = None\n    for crew_member in data_movie_credits[\"crew\"]:\n        if crew_member[\"job\"] == \"Director\":\n            director_id = crew_member[\"id\"]\n            break\n\n    if director_id:\n        # Set the API URL for getting the details of the director\n        url_director_details = f\"https://api.themoviedb.org/3/person/{director_id}\"\n        \n        # Call the API to get the details of the director\n        response_director_details = requests.get(url_director_details, headers=headers)\n        data_director_details = response_director_details.json()\n\n        # Extract and print the birthday of the director\n        director_birthday = data_director_details[\"birthday\"]\n        print(f\"The birthday of the director of 'The Shawshank Redemption' is: {director_birthday}\")\n    else:\n        print(\"Director information not found for the movie 'The Shawshank Redemption'\")\nelse:\n    print(\"Movie 'The Shawshank Redemption' not found in the database\")\n```",
        "usage": [
            466,
            12839,
            13305
        ],
        "executed": "The birthday of the director of 'The Shawshank Redemption' is: 1959-01-28\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Shawshank Redemption\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_movie = response_search_movie.json()\n# Get the company that created \"The Shawshank Redemption\"\ncompany_id = data_movie['results'][0]['production_company'][0]['id']\n\n# Get the details of the company headquarters\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse_company = requests.get(url_company, headers=headers)\ndata_company = response_company.json()\n\n# Extract and print the headquarters location of the company\nheadquarters_location = data_company['headquarters']\nprint(\"The headquarter of the company that created the movie 'The Shawshank Redemption' is:\", headquarters_location)\n```",
        "usage": [
            392,
            10094,
            10486
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"  # Provided Authorization token\n}\n\n# First, search for the collection with the name 'Star Wars'\nparams = {\n    \"query\": \"Star Wars\"\n}\n\nresponse = requests.get(\"https://api.themoviedb.org/3/search/collection\", headers=headers, params=params)\ndata = response.json()\n\nif 'results' in data and len(data['results']) > 0:\n    collection_id = data['results'][0]['id']  # Get the collection id\n    collection_name = data['results'][0]['name']  # Get the collection name\n\n    # Get the details of the collection to find the company_id\n    collection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    response = requests.get(collection_url, headers=headers)\n    collection_data = response.json()\n\n    if 'parts' in collection_data:\n        parts = collection_data['parts']\n        for part in parts:\n            if 'production_companies' in part:\n                production_companies = part['production_companies']\n                for company in production_companies:\n                    company_id = company['id']  # Get the company id\n\n                    # Get the details of the company to find the headquarters\n                    company_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n                    response = requests.get(company_url, headers=headers)\n                    company_data = response.json()\n\n                    if 'headquarters' in company_data:\n                        headquarters = company_data['headquarters']\n                        print(f\"The headquarters of the company that created the collection '{collection_name}' (ID: {company_id}) is: {headquarters}\")\n                        break  # Stop after finding the headquarters of the first company\nelse:\n    print(\"No collection found for the name 'Star Wars'\")\n```",
        "usage": [
            542,
            9189,
            9731
        ],
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the base URL for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Double Life of Veronique\nsearch_params = {\n    \"query\": \"The Double Life of Veronique\",\n    \"page\": 1\n}\nsearch_response = requests.get(f\"{base_url}/search/movie\", headers=headers, params=search_params)\nveronique_data = search_response.json()\n\n# Search for Mulholland Drive\nsearch_params = {\n    \"query\": \"Mulholland Drive\",\n    \"page\": 1\n}\nsearch_response = requests.get(f\"{base_url}/search/movie\", headers=headers, params=search_params)\nmulholland_data = search_response.json()\n\n# Extract release dates from the search results\nveronique_release_date = veronique_data[\"results\"][0][\"release_date\"]\nmulholland_release_date = mulholland_data[\"results\"][0][\"release_date\"]\n\n# Compare the release dates\nif veronique_release_date < mulholland_release_date:\n    print(\"The Double Life of Veronique has an earlier release date.\")\nelse:\n    print(\"Mulholland Drive has an earlier release date.\")\n```",
        "usage": [
            428,
            12020,
            12448
        ],
        "executed": "The Double Life of Veronique has an earlier release date.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url to get credits for Twin Peaks Season 1\nurl_twin_peaks_credits = \"https://api.themoviedb.org/3/tv/1920/season/1/credits\"\nparams = {}\nresponse_twin_peaks = requests.get(url_twin_peaks_credits, headers=headers, params=params)\ndata_twin_peaks = response_twin_peaks.json()\n\n# Extracting the director of Twin Peaks Season 1\ndirector_twin_peaks = \"\"\nfor crew_member in data_twin_peaks['crew']:\n    if crew_member['job'] == 'Director':\n        director_twin_peaks = crew_member['name']\n        break\n\n# API url to get credits for Mulholland Drive\nurl_mulholland_drive_credits = \"https://api.themoviedb.org/3/movie/947/credits\"\nparams = {}\nresponse_mulholland_drive = requests.get(url_mulholland_drive_credits, headers=headers, params=params)\ndata_mulholland_drive = response_mulholland_drive.json()\n\n# Extracting the director of Mulholland Drive\ndirector_mulholland_drive = \"\"\nfor crew_member in data_mulholland_drive['crew']:\n    if crew_member['job'] == 'Director':\n        director_mulholland_drive = crew_member['name']\n        break\n\n# Checking if the directors are the same\nif director_twin_peaks == director_mulholland_drive:\n    print(\"Yes, the director of Twin Peaks Season 1 and Mulholland Drive is the same person.\")\nelse:\n    print(\"No, the director of Twin Peaks Season 1 and Mulholland Drive is not the same person.\")\n```",
        "usage": [
            350,
            10615,
            10965
        ],
        "executed": "No, the director of Twin Peaks Season 1 and Mulholland Drive is not the same person.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url to search for the movie Mulholland Drive\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Mulholland Drive\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"\",\n    \"year\": 0,\n    \"primary_release_year\": 0\n}\n\n# Calling the API to search for the movie Mulholland Drive\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\nmovie_id = data_search_movie['results'][0]['id']\n\n# API url to get movie details by id\nurl_movie_details = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nparams_movie_details = {\n    \"append_to_response\": \"\"\n}\n\n# Calling the API to get details of the movie Mulholland Drive\nresponse_movie_details = requests.get(url_movie_details, headers=headers, params=params_movie_details)\ndata_movie_details = response_movie_details.json()\ndirector_id = data_movie_details['crew'][0]['id']\n\n# API url to get person details by id\nurl_person_details = f\"https://api.themoviedb.org/3/person/{director_id}\"\nparams_person_details = {}\n\n# Calling the API to get the details of the director of Mulholland Drive\nresponse_person_details = requests.get(url_person_details, headers=headers, params=params_person_details)\ndata_person_details = response_person_details.json()\ndirector_birthplace = data_person_details['place_of_birth']\n\n# Output\nprint(f\"The director of Mulholland Drive was born in: {director_birthplace}\")\n```",
        "usage": [
            357,
            11051,
            11408
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the list of top-rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Set the required parameters\nparams = {\n    \"page\": 1  # We are interested in the first page of the results\n}\n\n# Set the HTTP headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    # Get the list of top rated movies\n    top_movies = response.json()['results']\n\n    # Search for \"Mulholland Drive\" in the list of top-rated movies\n    is_mulholland_drive_top_rated = False\n    for movie in top_movies:\n        if movie['title'] == \"Mulholland Drive\":\n            is_mulholland_drive_top_rated = True\n            break\n\n    if is_mulholland_drive_top_rated:\n        print(\"Mulholland Drive is in the Top-10 rated list\")\n    else:\n        print(\"Mulholland Drive is not in the Top-10 rated list\")\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            426,
            12047,
            12473
        ],
        "executed": "Mulholland Drive is not in the Top-10 rated list\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Check how many movies were directed by Akira Kurosawa\nparams_kurosawa = {\n    \"query\": \"Akira Kurosawa\",\n    \"include_adult\": False\n}\nresponse_kurosawa = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params_kurosawa)\ndata_kurosawa = response_kurosawa.json()\nkurosawa_id = data_kurosawa['results'][0]['id']\n\nparams_kurosawa_credits = {}\nresponse_kurosawa_credits = requests.get(f\"https://api.themoviedb.org/3/person/{kurosawa_id}/movie_credits\", headers=headers, params=params_kurosawa_credits)\ndata_kurosawa_credits = response_kurosawa_credits.json()\nnum_movies_kurosawa = len(data_kurosawa_credits['cast']) + len(data_kurosawa_credits['crew'])\n\n# Check how many movies were directed by Steven Spielberg\nparams_spielberg = {\n    \"query\": \"Steven Spielberg\",\n    \"include_adult\": False\n}\nresponse_spielberg = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params_spielberg)\ndata_spielberg = response_spielberg.json()\nspielberg_id = data_spielberg['results'][0]['id']\n\nparams_spielberg_credits = {}\nresponse_spielberg_credits = requests.get(f\"https://api.themoviedb.org/3/person/{spielberg_id}/movie_credits\", headers=headers, params=params_spielberg_credits)\ndata_spielberg_credits = response_spielberg_credits.json()\nnum_movies_spielberg = len(data_spielberg_credits['cast']) + len(data_spielberg_credits['crew'])\n\n# Compare the number of movies directed by each director\nif num_movies_kurosawa > num_movies_spielberg:\n    print(\"Akira Kurosawa directed more movies.\")\nelif num_movies_kurosawa < num_movies_spielberg:\n    print(\"Spielberg directed more movies.\")\nelse:\n    print(\"Both directed the same number of movies.\")\n```",
        "usage": [
            625,
            13048,
            13673
        ],
        "executed": "Spielberg directed more movies.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"0dbab590c7eaca07ebelg9974a37ad92\"\n\n# Set the headers with the API key\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the person with the name of the director of Mulholland Drive\nparams = {\n    \"query\": \"David Lynch\",\n    \"include_adult\": False\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\ndata = response.json()\n\n# Get the person_id for David Lynch\nperson_id = data['results'][0]['id']\n\n# Get the TV show credits for David Lynch\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\", headers=headers)\ndata = response.json()\n\n# Get the list of TV shows directed by David Lynch\ntv_credits = data['crew']\ntv_series_directed = []\nfor credit in tv_credits:\n    if credit['job'] == \"Director\":\n        tv_series_directed.append(credit['name'])\n\nprint(tv_series_directed)\n```",
        "usage": [
            250,
            10890,
            11140
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url with the actor's id\nurl = \"https://api.themoviedb.org/3/person/129?api_key=0dbab590c7eaca07ebe625974a37ad92\"\n\n# Set the authorization headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    birth_date = data.get(\"birthday\")\n    print(f\"Scarlett Johansson's birthday is on: {birth_date}\")\nelse:\n    print(\"Failed to retrieve birthday information for Scarlett Johansson\")\n```",
        "usage": [
            312,
            10446,
            10758
        ],
        "executed": "Scarlett Johansson's birthday is on: 1892-01-03\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API key and base URL\napi_key = \"YOUR_API_KEY\"\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show \"Sword Art Online\"\nsearch_url = f\"{base_url}/search/tv\"\nparams = {\n    \"query\": \"Sword Art Online\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show ID\ntv_id = data[\"results\"][0][\"id\"]\n\n# Get details of the TV show\ntv_details_url = f\"{base_url}/tv/{tv_id}\"\nresponse = requests.get(tv_details_url, headers=headers)\ndata = response.json()\n\n# Get the number of seasons of Sword Art Online\nnumber_of_seasons = data[\"number_of_seasons\"]\n\nprint(f\"The number of seasons of Sword Art Online is: {number_of_seasons}\")\n```",
        "usage": [
            213,
            13267,
            13480
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"We Married as Job\"\nurl_search_tv_show = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"We Married as Job\"\n}\nresponse = requests.get(url_search_tv_show, headers=headers, params=params)\n  \nif response.status_code == 200:\n    data = response.json()\n    tv_show_id = data[\"results\"][0][\"id\"]  # Get the TV show ID\n\n    # Get the credits for the TV show including cast and crew\n    url_credits = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n    response_credits = requests.get(url_credits, headers=headers)\n\n    if response_credits.status_code == 200:\n        credits_data = response_credits.json()\n        cast = credits_data[\"cast\"]\n        crew = credits_data[\"crew\"]\n\n        # Check if Yui Aragaki and Gen Hoshino are in the cast\n        yui_aragaki_present = False\n        gen_hoshino_present = False\n        for person in cast:\n            if person[\"name\"] == \"Yui Aragaki\":\n                yui_aragaki_present = True\n            if person[\"name\"] == \"Gen Hoshino\":\n                gen_hoshino_present = True\n\n        if yui_aragaki_present and gen_hoshino_present:\n            print(\"Yes, Yui Aragaki and Gen Hoshino are co-starring in We Married as Job.\")\n        else:\n            print(\"No, Yui Aragaki and Gen Hoshino are not co-starring in We Married as Job.\")\n    else:\n        print(\"Error: Failed to fetch credits data.\")\nelse:\n    print(\"Error: Failed to fetch TV show data.\")\n```",
        "usage": [
            555,
            13243,
            13798
        ],
        "executed": "Yes, Yui Aragaki and Gen Hoshino are co-starring in We Married as Job.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the details of the movie Barbie\nmovie_barbie_id = 508943  # Example movie ID for Barbie\nmovie_barbie_credits_url = f\"https://api.themoviedb.org/3/movie/{movie_barbie_id}/credits\"\nresponse_barbie_credits = requests.get(movie_barbie_credits_url, headers=headers)\nbarbie_credits_data = response_barbie_credits.json()\n\n# Get the details of the TV show DEATH NOTE\ntv_death_note_id = 456  # Example TV show ID for DEATH NOTE\ntv_death_note_credits_url = f\"https://api.themoviedb.org/3/tv/{tv_death_note_id}/credits\"\nresponse_death_note_credits = requests.get(tv_death_note_credits_url, headers=headers)\ndeath_note_credits_data = response_death_note_credits.json()\n\n# Extract the birth year of the movie director of Barbie\ndirector_birth_year = None\nfor crew_member in barbie_credits_data[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director_birth_year = crew_member[\"gender\"]\n        break\n\n# Extract the birth year of the lead actor of DEATH NOTE\nactor_birth_year = None\nfor cast_member in death_note_credits_data[\"cast\"]:\n    if cast_member[\"order\"] == 0:  # Assume lead actor is the first in the list\n        actor_birth_year = cast_member[\"gender\"]\n        break\n\n# Calculate the age difference\nif director_birth_year is not None and actor_birth_year is not None:\n    age_difference = abs(director_birth_year - actor_birth_year)\n    print(f\"The director of film Barbie is older than the lead actor of television DEATH NOTE by {age_difference} years.\")\nelse:\n    print(\"Unable to determine the age difference.\")\n\n```",
        "usage": [
            548,
            10543,
            11091
        ],
        "executed": "The director of film Barbie is older than the lead actor of television DEATH NOTE by 0 years.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Katherine LaNasa to get her person details\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Katherine LaNasa\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_data = response.json()\n\n# Extract the person_id for Katherine LaNasa\nif 'results' in person_data and len(person_data['results']) > 0:\n    person_id = person_data['results'][0]['id']\n    \n    # Get the movie credits for Katherine LaNasa\n    person_movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(person_movie_credits_url, headers=headers)\n    movies_data = response.json()\n    \n    # Check if there are movie credits available\n    if 'cast' in movies_data and len(movies_data['cast']) > 0:\n        latest_movie = movies_data['cast'][0]['title']\n        print(f\"Katherine LaNasa's latest movie appearance is in the movie: {latest_movie}\")\n    else:\n        print(\"No movie credits found for Katherine LaNasa\")\nelse:\n    print(\"Katherine LaNasa not found in the database\")\n```",
        "usage": [
            453,
            13194,
            13647
        ],
        "executed": "Katherine LaNasa's latest movie appearance is in the movie: Black Karen\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameters\nparams = {\n    \"query\": \"Oppenheimer\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the cover image URL for the first result\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        poster_path = data[\"results\"][0][\"poster_path\"]\n        if poster_path:\n            poster_url = f\"https://image.tmdb.org/t/p/original{poster_path}\"\n            print(poster_url)\n        else:\n            print(\"No cover image found.\")\n    else:\n        print(\"No results found.\")\nelse:\n    print(\"Error: Unable to fetch data from the API.\")\n\n```",
        "usage": [
            354,
            10503,
            10857
        ],
        "executed": "https://image.tmdb.org/t/p/original/8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    }
]