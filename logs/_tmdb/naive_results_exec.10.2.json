[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "results": "```python\nimport requests\n\n# Define the headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person - Sofia Coppola\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nperson_search_params = {\n    \"query\": \"Sofia Coppola\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(person_search_url, headers=headers, params=person_search_params)\ndata = response.json()\n\n# Extract the person ID for Sofia Coppola\nperson_id = None\nif data.get(\"results\"):\n    for result in data.get(\"results\"):\n        if result.get(\"name\") == \"Sofia Coppola\":\n            person_id = result.get(\"id\")\n            break\n\n# If person ID is found, get the movie credits for the person\nif person_id:\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(movie_credits_url, headers=headers)\n    movie_credits_data = response.json()\n    \n    # Count the number of movies directed by Sofia Coppola\n    num_movies_directed = 0\n    if movie_credits_data.get(\"crew\"):\n        for credit in movie_credits_data.get(\"crew\"):\n            if credit.get(\"job\") == \"Director\":\n                num_movies_directed += 1\n\n    print(f\"Number of movies directed by Sofia Coppola: {num_movies_directed}\")\n\nelse:\n    print(\"Person ID for Sofia Coppola not found.\")\n```",
        "executed": "Number of movies directed by Sofia Coppola: 14\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "results": "```python\nimport requests\n\n# API url to search for the movie \"The Dark Knight\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"The Dark Knight\",\n    \"include_adult\": False\n}\n\n# Retrieve the movie id for \"The Dark Knight\"\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\nsearch_results = response_search_movie.json()\nmovie_id = search_results[\"results\"][0][\"id\"]\n\n# API url to get credits for the movie\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Retrieve the credits for the movie\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\nmovie_credits = response_movie_credits.json()\nlead_actor = movie_credits[\"cast\"][0][\"name\"]\n\nprint(f\"The lead actor in the movie 'The Dark Knight' was: {lead_actor}\")\n```",
        "executed": "The lead actor in the movie 'The Dark Knight' was: Christian Bale\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "results": "```python\nimport requests\n\n# API url to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Parameters for the API request\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Adding the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request to get the top rated movies\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the response to get the director of the top rated movie\nif response.status_code == 200:\n    # Get the movie results from the response\n    movie_results = response.json()[\"results\"]\n    \n    # Check if there are movie results\n    if len(movie_results) > 0:\n        # Get the id of the top rated movie\n        top_movie_id = movie_results[0][\"id\"]\n        \n        # API url to get the credits of the top rated movie\n        credits_url = f\"https://api.themoviedb.org/3/movie/{top_movie_id}/credits\"\n        \n        # Make the API request to get the credits of the top rated movie\n        credits_response = requests.get(credits_url, headers=headers)\n        \n        # Parse the credits response to get the director of the top rated movie\n        if credits_response.status_code == 200:\n            crew = credits_response.json()[\"crew\"]\n            for member in crew:\n                if member[\"job\"] == \"Director\":\n                    director = member[\"name\"]\n                    print(\"The director of the top rated movie is:\", director)\n                    break\n        else:\n            print(\"Failed to get credits of the top rated movie\")\n    else:\n        print(\"No movie results found\")\nelse:\n    print(\"Failed to get top rated movies\")\n```",
        "executed": "The director of the top rated movie is: Frank Darabont\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "give me a image for the collection Star Wars",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the parameters\nquery = \"Star Wars\"\nparams = {\n    \"query\": query,\n    \"page\": 1\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse and display the response\nresult = response.json()\nif 'results' in result and len(result['results']) > 0:\n    collection_id = result['results'][0]['id']\n    collection_name = result['results'][0]['name']\n\n    # Call images API for the specific collection\n    images_url = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\n    images_response = requests.get(images_url, headers=headers)\n    images_result = images_response.json()\n\n    # Display image for the collection\n    if 'posters' in images_result and len(images_result['posters']) > 0:\n        image_path = images_result['posters'][0]['file_path']\n        print(f\"Image for collection {collection_name}: https://image.tmdb.org/t/p/original{image_path}\")\n    else:\n        print(\"No image found for the collection.\")\nelse:\n    print(\"No collection found with the provided query.\")\n```",
        "executed": "Image for collection Star Wars Collection: https://image.tmdb.org/t/p/original/gfHJ2GJm44ZY2CO2MaBFYZEjmhy.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/search/company\"\nparams = {\n    \"query\": \"Walt Disney\"\n}\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the company_id for Walt Disney from the search result\ncompany_id = None\nfor result in data['results']:\n    if result['name'] == \"Walt Disney\":\n        company_id = result['id']\n        break\n\n# If the company_id is found, get the logo image\nif company_id:\n    url = f\"https://api.themoviedb.org/3/company/{company_id}/images\"\n    response = requests.get(url, headers=headers)\n    data = response.json()\n    logos = data['logos']\n    \n    # Print the logo information\n    if logos:\n        for logo in logos:\n            print(\"Logo URL: https://image.tmdb.org/t/p/original\" + logo['file_path'])\n    else:\n        print(\"No logo found for Walt Disney.\")\nelse:\n    print(\"Walt Disney not found in the company search results.\")\n```",
        "executed": "Walt Disney not found in the company search results.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "results": "```python\nimport requests\n\n# API url to search for the movie Titanic\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\n# Parameters for searching for the movie Titanic\nparams = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n# Make a GET request to search for the movie Titanic\nresponse = requests.get(search_movie_url, headers=headers, params=params)\n# Extracting the movie id of Titanic from the search result\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# API url to get the cast and crew for the movie Titanic\nmovie_credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n# Make a GET request to get the cast and crew for the movie Titanic\nresponse_credits = requests.get(movie_credits_url, headers=headers)\n\n# Extracting the lead actor (first cast member)\nlead_actor_name = response_credits.json()[\"cast\"][0][\"name\"]\n# Printing the lead actor's name\nprint(f\"The lead actor of Titanic is: {lead_actor_name}\")\n\n# Using the lead actor's id to get images for the lead actor\nlead_actor_id = response_credits.json()[\"cast\"][0][\"id\"]\n# API url to get images for the lead actor of Titanic\nimages_actor_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}/images\"\n# Make a GET request to get images for the lead actor\nresponse_images = requests.get(images_actor_url, headers=headers)\n\n# Extracting image file paths for the lead actor\nimage_paths = [image[\"file_path\"] for image in response_images.json()[\"profiles\"]]\n# Printing the image paths for the lead actor\nprint(\"Image paths for the lead actor:\")\nfor path in image_paths:\n    print(path)\n```",
        "executed": "The lead actor of Titanic is: Leonardo DiCaprio\nImage paths for the lead actor:\n/wo2hJpn04vbtmh0B9utCFdsQhxM.jpg\n/5Brc5dLifH3UInk3wUaCuGXpCqy.jpg\n/aLUFp0zWpLVyIOgY0scIpuuKZLE.jpg\n/rQXtbTp21ZWuFxcrkuPMytyTrip.jpg\n/jqbqNrOIB3alGMX6Gh2MbOKMXZO.jpg\n/h5JnhncKehZuzRXOdGKYTH6zVWX.jpg\n/jMOipiHOPkVdx9phhKamwlVKEZT.jpg\n/nb7e6caBO5BxZ8lyIp9Hzv69oNB.jpg\n/2cMjPA5MnzWvy9FaMTFCTZ39Uau.jpg\n/dIUG8zUX5WJmnL0F2PVpfaenCrt.jpg\n/iGYNP8yCh2p23M3SL5LVQD276jB.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie ID of Titanic\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\",\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\ntitanic_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get the similar movies to Titanic\nsimilar_url = f\"https://api.themoviedb.org/3/movie/{titanic_id}/similar\"\nsimilar_params = {\n    \"page\": 1\n}\nsimilar_response = requests.get(similar_url, headers=headers, params=similar_params)\nsimilar_movies = similar_response.json()[\"results\"]\n\n# Get the reviews of the first similar movie\nfirst_similar_id = similar_movies[0][\"id\"]\nreviews_url = f\"https://api.themoviedb.org/3/movie/{first_similar_id}/reviews\"\nreviews_params = {\n    \"page\": 1\n}\nreviews_response = requests.get(reviews_url, headers=headers, params=reviews_params)\nreviews = reviews_response.json()[\"results\"]\n\n# Output the reviews\nprint(reviews)\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "results": "```python\nimport requests\n\n# API url for getting recommendations for a movie\nurl_recommendations = \"https://api.themoviedb.org/3/movie/597/recommendations\"  # Assuming Titanic movie_id is 597\n\n# Parameters for the API request\nparams_recommendations = {\n    'page': 1\n}\n\n# Sending a GET request to the API\nresponse_recommendations = requests.get(url_recommendations, headers=headers, params=params_recommendations)\n\n# Getting the response data\nrecommendations_data = response_recommendations.json()\n\n# Extracting and printing the recommended movies\nif 'results' in recommendations_data:\n    for movie in recommendations_data['results']:\n        print(movie['title'])\nelse:\n    print(\"No recommendations found.\")\n```",
        "executed": "Harry Potter and the Philosopher's Stone\nThe Wolf of Wall Street\nSuicide Squad\nShutter Island\nAvatar\nRomeo + Juliet\nForrest Gump\nThe Lord of the Rings: The Two Towers\nToy Story\nBatman Begins\nPirates of the Caribbean: The Curse of the Black Pearl\nThe Revenant\nKick-Ass\nMen in Black\nTwilight\nCatch Me If You Can\nInception\nThe Shawshank Redemption\nThor\nFinding Nemo\nThe Lord of the Rings: The Fellowship of the Ring\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "results": "```python\nimport requests\n\n# Set the API URL\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n\n# Set the parameters to discover movies directed by Christopher Nolan\nparams = {\n    \"api_key\": \"YOUR_API_KEY\",\n    \"with_crew\": \"5250\",  # Christopher Nolan's id as a director\n    \"sort_by\": \"release_date.desc\"  # Sort by release date in descending order\n}\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the latest movie directed by Christopher Nolan\nif response.status_code == 200:\n    data = response.json()\n    latest_movie = data[\"results\"][0][\"title\"]\n    print(f\"The latest movie directed by Christopher Nolan is: {latest_movie}\")\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for person with name \"Martin Scorsese\"\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Martin Scorsese\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person_id of Martin Scorsese\nif len(data[\"results\"]) > 0:\n    person_id = data[\"results\"][0][\"id\"]\n\n    # Get the movie credits of Martin Scorsese\n    person_movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(person_movie_credits_url, headers=headers)\n    movie_credits = response.json()\n\n    # Find the highest rated movie directed by Martin Scorsese\n    highest_rated_movie = None\n    max_vote_average = 0\n    for movie in movie_credits[\"crew\"]:\n        if movie[\"job\"] == \"Director\" and movie[\"vote_average\"] > max_vote_average:\n            max_vote_average = movie[\"vote_average\"]\n            highest_rated_movie = movie\n\n    if highest_rated_movie:\n        movie_title = highest_rated_movie[\"title\"]\n        vote_average = highest_rated_movie[\"vote_average\"]\n        print(f\"The highest rated movie directed by Martin Scorsese is '{movie_title}' with a rating of {vote_average}.\")\n    else:\n        print(\"No movie directed by Martin Scorsese found.\")\nelse:\n    print(\"Martin Scorsese not found.\")\n```",
        "executed": "The highest rated movie directed by Martin Scorsese is 'GoodFellas' with a rating of 8.467.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "results": "```python\nimport requests\n\n# API headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the latest movie of an actor\ndef get_latest_movie(actor_name):\n    # Search for the actor ID\n    search_url = \"https://api.themoviedb.org/3/search/person\"\n    search_params = {\n        \"query\": actor_name,\n        \"page\": 1,\n        \"include_adult\": False,\n        \"region\": \"US\"\n    }\n    response = requests.get(search_url, headers=headers, params=search_params)\n    actor_id = response.json()[\"results\"][0][\"id\"]\n\n    # Get the movie credits of the actor\n    credits_url = f\"https://api.themoviedb.org/3/person/{actor_id}/movie_credits\"\n    response = requests.get(credits_url, headers=headers)\n    latest_movie = response.json()[\"cast\"][0]\n\n    return latest_movie\n\n# Function to get the director of a movie\ndef get_director(movie_id):\n    # Get the credits of the movie\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response = requests.get(credits_url, headers=headers)\n    crew = response.json()[\"crew\"]\n    \n    # Find the director from the crew\n    for person in crew:\n        if person[\"job\"] == \"Director\":\n            return person[\"name\"]\n\n# Get the latest movie of Leonardo DiCaprio\nlatest_movie = get_latest_movie(\"Leonardo DiCaprio\")\n\n# Get the director of the latest movie\ndirector_name = get_director(latest_movie[\"id\"])\n\nprint(f\"The director of Leonardo DiCaprio's latest movie is: {director_name}\")\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\"query\": \"Catherine Hardwicke\", \"page\": 1, \"include_adult\": False, \"region\": \"US\"}\nresponse_person = requests.get(search_person_url, headers=headers, params=params)\nperson_results = response_person.json()[\"results\"]\n\n# Get TV show credits for the person\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_results[0]['id']}/tv_credits\"\nresponse_tv_credits = requests.get(tv_credits_url, headers=headers)\ntv_credits = response_tv_credits.json()\n\n# Filter for TV shows where Catherine Hardwicke is a director\nrecent_tv_shows_directed = []\nfor credit in tv_credits['crew']:\n    if credit['job'] == \"Director\" and credit['name'] == \"Catherine Hardwicke\":\n        recent_tv_show_info_url = f\"https://api.themoviedb.org/3/tv/{credit['id']}\"\n        response_tv_show_info = requests.get(recent_tv_show_info_url, headers=headers)\n        recent_tv_show_info = response_tv_show_info.json()\n        recent_tv_shows_directed.append(recent_tv_show_info)\n\nprint(recent_tv_shows_directed)\n```",
        "executed": "[]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show id of Breaking Bad\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Breaking Bad\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the TV show id of Breaking Bad\n# Assuming the first result is the correct one\nbreaking_bad_id = search_results[\"results\"][0][\"id\"]\n\n# Get recommendations for the TV show with the Breaking Bad id\nrecommend_url = f\"https://api.themoviedb.org/3/tv/{breaking_bad_id}/recommendations\"\nrecommend_params = {\n    \"page\": 1\n}\nrecommend_response = requests.get(recommend_url, headers=headers, params=recommend_params)\nrecommend_results = recommend_response.json()\n\n# Extract and display the recommendations\nrecommendations = recommend_results[\"results\"]\nfor recommendation in recommendations:\n    print(recommendation[\"name\"])\n```",
        "executed": "Better Call Saul\nGame of Thrones\nStranger Things\nDexter\nThe Walking Dead\nSherlock\nRick and Morty\nFriends\nArcane\nVikings\nThe Big Bang Theory\nHouse\nChernobyl\nPrison Break\nMoney Heist\nPeaky Blinders\nBlack Mirror\nLost\nMr. Robot\nDark\nThe Sopranos\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "results": "```python\nimport requests\n\n# API url to get the daily trending movies\nurl = \"https://api.themoviedb.org/3/trending/movie/day\"\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API request\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\nif 'results' in data and len(data['results']) > 0:\n    # Get the ID of the most trending movie\n    movie_id = data['results'][0]['id']\n\n    # API url to get the credits for a movie\n    url_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    \n    # Making the API request to get the credits for the movie\n    response_credits = requests.get(url_credits, headers=headers)\n    credits_data = response_credits.json()\n\n    if 'crew' in credits_data:\n        director = None\n        for crew_member in credits_data['crew']:\n            if crew_member['job'] == 'Director':\n                director = crew_member['name']\n                break\n        \n        if director:\n            print(f\"The director of today's most trending movie is: {director}\")\n        else:\n            print(\"Director information not found for the movie.\")\n    else:\n        print(\"Crew information not found for the movie.\")\nelse:\n    print(\"No trending movies found.\")\n\n```",
        "executed": "The director of today's most trending movie is: Matthew Vaughn\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for the movie \"Twilight\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Twilight\",\n    \"include_adult\": False,\n    \"page\": 1,\n}\n\n# Make the API request to search for the movie \"Twilight\"\nresponse = requests.get(url_search_movie, headers=headers, params=params)\nsearch_results = response.json()\n\n# Get the movie id of the first search result\nif search_results[\"total_results\"] > 0:\n    movie_id = search_results[\"results\"][0][\"id\"]\nelse:\n    print(\"Movie 'Twilight' not found\")\n    movie_id = None\n\n# Check if the movie id exists\nif movie_id:\n    # Define the API endpoint to get the credits of the movie\n    url_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    \n    # Make the API request to get the credits of the movie\n    response_credits = requests.get(url_movie_credits, headers=headers)\n    credits = response_credits.json()\n    \n    # Find the director in the crew list\n    director = None\n    for crew_member in credits[\"crew\"]:\n        if crew_member[\"job\"] == \"Director\":\n            director = crew_member[\"name\"]\n            break\n    \n    if director:\n        print(f\"The director of the movie 'Twilight' is: {director}\")\n    else:\n        print(\"Director information not found for the movie 'Twilight'\")\n```",
        "executed": "The director of the movie 'Twilight' is: Catherine Hardwicke\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "results": "```python\nimport requests\n\n# Define the API url to get the images for the second episode of the first season of The Witcher\nurl = \"https://api.themoviedb.org/3/tv/85271/season/1/episode/2/images\"\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the data in JSON format\n    data = response.json()\n    # Extract the image file path from the response\n    if len(data[\"stills\"]) > 0:\n        image_path = data[\"stills\"][0][\"file_path\"]\n        print(\"Image path for the second episode of the first season of The Witcher:\", image_path)\n    else:\n        print(\"No images found for the specified episode.\")\nelse:\n    print(\"Error with status code:\", response.status_code)\n```",
        "executed": "Image path for the second episode of the first season of The Witcher: /3KZQbfi6SE5rTA5ysh8FvOMBuUN.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "What is top-1 rated movie?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Calling the API to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\nparams = {\"page\": 1}  # Requesting the first page\nresponse = requests.get(url, headers=headers, params=params)\n\n# Getting the results and extracting the top-1 movie\nif response.status_code == 200:\n    data = response.json()\n    top_rated_movies = data['results']\n    top_rated_movie = top_rated_movies[0]  # Top-1 rated movie is the first element in the list\n    print(top_rated_movie['title'])  # Print the title of the top-1 rated movie\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "executed": "The Shawshank Redemption\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching a movie\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for the search query, searching for \"The Matrix\"\nparams = {\n    \"query\": \"The Matrix\",\n    \"page\": 1,\n    \"include_adult\": False,\n}\n\n# Make the HTTP request to search for the movie\nresponse_search = requests.get(url_search_movie, headers=headers, params=params)\ndata_search = response_search.json()\n\n# Extract the movie_id of \"The Matrix\" from the search results\nif data_search[\"total_results\"] > 0:\n    movie_id = data_search[\"results\"][0][\"id\"]\n\n    # Define the API endpoint for getting release dates of a movie by movie_id\n    url_release_dates = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n\n    # Make the HTTP request to get the release dates of \"The Matrix\"\n    response_release_dates = requests.get(url_release_dates, headers=headers)\n    data_release_dates = response_release_dates.json()\n\n    # Extract and print the release dates\n    for result in data_release_dates[\"results\"]:\n        for release_date_info in result[\"release_dates\"]:\n            if release_date_info[\"type\"] == 2:  # Theatrical release type\n                release_date = release_date_info[\"release_date\"]\n                print(\"Release date of 'The Matrix':\", release_date)\n                break  # Break since we found the theatrical release date\n            else:\n                print(\"Release date not found.\")\nelse:\n    print(\"Movie 'The Matrix' not found.\")\n\n```",
        "executed": "Release date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date of 'The Matrix': 2021-09-03T00:00:00.000Z\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\nRelease date not found.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    },
    {
        "query": "Who is the most popular person?",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Getting the list of popular people\nresponse = requests.get(url, headers=headers)\n\n# Checking if the request was successful\nif response.status_code == 200:\n    popular_people = response.json()\n    most_popular_person = popular_people['results'][0]  # The first person is the most popular based on the response\n    print(f\"The most popular person is: {most_popular_person['name']}\")\nelse:\n    print(\"Failed to retrieve data\")\n\n```",
        "executed": "The most popular person is: Jason Statham\n",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person 'Christopher Nolan'\nresponse_person = requests.get(\"https://api.themoviedb.org/3/search/person\", \n                               headers=headers, \n                               params={\"query\": \"Christopher Nolan\"})\nperson_data = response_person.json()\n\n# Get the person id of Christopher Nolan\nperson_id = person_data['results'][0]['id']\n\n# Get the movie credits of Christopher Nolan\nresponse_movie_credits = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\",\n                                      headers=headers)\nmovie_credits_data = response_movie_credits.json()\n\n# Get the cover images of movies directed by Christopher Nolan\ncover_images = []\nfor movie in movie_credits_data['crew']:\n    if movie['job'] == \"Director\":\n        movie_id = movie['id']\n        response_images = requests.get(f\"https://api.themoviedb.org/3/movie/{movie_id}/images\",\n                                       headers=headers)\n        images_data = response_images.json()\n        if 'posters' in images_data:\n            cover_images.extend(images_data['posters'])\n\n# Output the cover images\nprint(cover_images)\n```",
        "executed": "[{'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b4Oe15CGLL61Ped0RAS9JpqdmCt.jpg', 'vote_average': 5.708, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/y8nvZPcNzuAIjWjplDiPeS4WZ6c.jpg', 'vote_average': 5.696, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/1VOKlC35yrwVKlfBSN52NY4zoF2.jpg', 'vote_average': 5.652, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2353, 'iso_639_1': 'zh', 'file_path': '/79mvAsULqtLpQvg5zYxgkK1Yohu.jpg', 'vote_average': 5.634, 'vote_count': 14, 'width': 1569}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'pt', 'file_path': '/kO6ewhlh7OIGRRbHwylDafEM1QG.jpg', 'vote_average': 5.522, 'vote_count': 6, 'width': 960}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ebSnODDg9lbsMIaWg2uAbjn7TO5.jpg', 'vote_average': 5.508, 'vote_count': 32, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zx87sFGLXZdrSF4B9WPhwjaKuQP.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'pt', 'file_path': '/8TbAQlEpRG2EQsjMNR76IYGNuki.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/e6yYRoEz4WoHIwcCaRTcQrAmaKG.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2040, 'iso_639_1': 'it', 'file_path': '/sInkpq76Q9L3JOEXEOVEQeJTjGl.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1360}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/cCH4jLoZCklH3rgqnvatjR7Q1AL.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/pEuitXhT6LEMOZuEvB6ecAaVa1m.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/m3xR365ajZrTN5vm2xf91L1zplv.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/3ldmcbmoQ6A9dUwphrwWxXIYQZM.jpg', 'vote_average': 5.33, 'vote_count': 9, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/maCv5pCoqp8mwWIxZmejzH5aCS4.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'he', 'file_path': '/ppqNQckAPwjVisCg5VPpdUBHxxb.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/l7sMTjCVqchwVAz6Kupm1bC62eP.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/iWzrUYxUfnpmLbm0rwyGKuFwpTO.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'sk', 'file_path': '/lsJ6fO8rXfTr5tcJHmJomru9SS5.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/iz7bV07QjC7Ero4msP5c9usJ3Az.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/t1LPjG9KNQQSX156XtXPxn8vIm2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.693, 'height': 2884, 'iso_639_1': 'el', 'file_path': '/ruayowvFykAbSJr5cVNRb14KXZt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sk', 'file_path': '/k6zHXaXXBSHyExTWxk6N2dtkh4a.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/QKPYFn2IS1t2neqv6hkFfAhQCc.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1667}, {'aspect_ratio': 0.7, 'height': 1372, 'iso_639_1': 'ko', 'file_path': '/r8GRroYelxUID8dOxcyeNKKol6W.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 961}, {'aspect_ratio': 0.667, 'height': 1155, 'iso_639_1': 'pl', 'file_path': '/zPRomhANBqtY8XSb9y4f2o5nHzp.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 770}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/za5q8ZKtUj3lGazCnPEDbhcp7Q4.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.705, 'height': 2838, 'iso_639_1': 'de', 'file_path': '/jSwp3rByt0iG3LwZbrMlw40wvZP.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'es', 'file_path': '/3lc06ptVbouEaZyjdHfCzmIm6v7.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1066, 'iso_639_1': 'th', 'file_path': '/sC8ci4k90aeUw7Yfd3HBlQIWBMw.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zHqzQyu6AyAZ0JCVaYmLQGfGduQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/iwvcIamoONxy9yB2td7yjRcbTQ2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.699, 'height': 1400, 'iso_639_1': 'he', 'file_path': '/cvyJDi3hP4G8knqNSmodfnJW4Wk.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 979}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/uHBAkhW91dSHjmvm3NaVGszDGwM.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/aWPRZvXOo5MmdzXwVNqnPf4uOxm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.706, 'height': 1529, 'iso_639_1': 'cs', 'file_path': '/vvabU7mZkohtB2yeEcVV6PcE71C.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'en', 'file_path': '/ggx11MEouBJgReHeWKhVOebSCno.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/zzHmycY21doYxLt2bDnhFr8xLo6.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'ja', 'file_path': '/wMGrlJ8TGuB77jcLISUWiVlG1vY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 667}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cUqEgoP6kj8ykfNjJx3Tl5zHCcN.jpg', 'vote_average': 5.306, 'vote_count': 78, 'width': 1012}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/jkFghrF0sHmL2aPwS8fpUINOzo6.jpg', 'vote_average': 5.282, 'vote_count': 14, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/53qrLADLqLsGoLVGaAkpe6The0K.jpg', 'vote_average': 5.282, 'vote_count': 14, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'fr', 'file_path': '/a0FWEv2NXw8zCgdCYAcI3x1M2iB.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 2792, 'iso_639_1': 'es', 'file_path': '/wHK0yX54svEWqlLNVMjoHcXXijq.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1861}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/pcVC6wvEVodaUxkTsUkXlgVrXHF.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/ii5CQ1ajuyvZlC60Q2rLFJT13UV.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.67, 'height': 1689, 'iso_639_1': 'ja', 'file_path': '/8z17OrgHGepjgyKvxIX9w5i1cBm.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1132}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/1zvQOnISwPx0jACHEqUa93WP1yF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/b5i4fvzOBc9mTu2J29RDsqmdvaC.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jX2GDUad2rHelr5la31MmwiL06T.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ltbTYAXBohdIHqC72RxthWWMR8S.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2974, 'iso_639_1': 'uk', 'file_path': '/4Nw3VyTcZGgk58cJxf5BJGdBU7.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1983}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/Y9KbriUET6fnsofAOvwDnXonI9.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/bP7sTFJSRKdO1PqRXBkdr7QJG5c.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/mtXqM8rjL9rwAs4V0LxKpkZ1ca1.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 954, 'iso_639_1': 'hu', 'file_path': '/qqe7SdnqKdyuZ4txNo7UzszU8RR.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 644}, {'aspect_ratio': 0.707, 'height': 1123, 'iso_639_1': 'sk', 'file_path': '/AkEkRv6yGDKxtPaO5cta6svr8em.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 794}, {'aspect_ratio': 0.69, 'height': 1015, 'iso_639_1': 'hu', 'file_path': '/7G1swFcaEE5IOC1c9vhmsNwAnBn.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 700}, {'aspect_ratio': 0.699, 'height': 1064, 'iso_639_1': 'lt', 'file_path': '/tCrBCNzwvFpbOzpakrIzE7urv1h.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 744}, {'aspect_ratio': 0.705, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/bcukXXsDE6E1uwN9uT2a7o0IkJ3.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1057}, {'aspect_ratio': 0.666, 'height': 800, 'iso_639_1': 'tr', 'file_path': '/820AaUpKmLqc7KJePkPUf0xWmZT.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 533}, {'aspect_ratio': 0.675, 'height': 1733, 'iso_639_1': 'en', 'file_path': '/yAznDPQlypuw3xuPzB8mwZ7thOF.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1170}, {'aspect_ratio': 0.666, 'height': 1912, 'iso_639_1': 'en', 'file_path': '/eHpGqOrkKcxOsjqTVU9XiRA9lBu.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1274}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/zsR6BLC3bqBpXnOVO8GAcltK5v5.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 2878, 'iso_639_1': 'ru', 'file_path': '/koF819pZLTVJDKnXTbAjsCWByCj.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'da', 'file_path': '/b8nDCzjLwOOK84QQ8IOBSXKVYmH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1080}, {'aspect_ratio': 0.686, 'height': 2334, 'iso_639_1': 'ko', 'file_path': '/jBMxV0Ufzn5zhhavrwmcwUPTQo1.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1602}, {'aspect_ratio': 0.693, 'height': 2885, 'iso_639_1': 'el', 'file_path': '/emdQj6jFZ5KmoVR6z3GzPlUEAPR.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.749, 'height': 2669, 'iso_639_1': 'fr', 'file_path': '/kO2XxxuY0zHv9Xzi75tbb0tH0qq.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'cn', 'file_path': '/irV3zgU4sxBLiZsRaJkUsFTIWiu.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 2852, 'iso_639_1': 'zh', 'file_path': '/z8yFLxSTrKsVl0LnKkRp7m5jHGW.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/nGtEd7mQ12lJyeSvj6rQSzy8sG5.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.75, 'height': 1073, 'iso_639_1': 'fr', 'file_path': '/2FaEoBZkjkmeocMpRrsB4C36JZ9.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 805}, {'aspect_ratio': 0.707, 'height': 1199, 'iso_639_1': 'fr', 'file_path': '/6vbOiVLl6yzDrcmX5tziUY337O.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 848}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/4oBdVk1ndVAyU9vieLMQDjTR0Ja.jpg', 'vote_average': 4.996, 'vote_count': 6, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1104, 'iso_639_1': 'en', 'file_path': '/qgISWc2owsFwQs65h45FyTpecfr.jpg', 'vote_average': 4.982, 'vote_count': 13, 'width': 736}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/xWeehULdRScOlKQjvGHacs3T9F9.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1012}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'es', 'file_path': '/li2TmtEDnl9YiKu0EabKZ3UN2OD.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 648}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/4nk6rKWPFafh8XEOsWEL1iuqeBR.jpg', 'vote_average': 4.968, 'vote_count': 20, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'en', 'file_path': '/vBw02gViFMiuhmQBDXALhxDCoDs.jpg', 'vote_average': 4.956, 'vote_count': 18, 'width': 648}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'es', 'file_path': '/rirlZ4Glx1IdtCnwGmax6t65KmE.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 648}, {'aspect_ratio': 0.666, 'height': 1183, 'iso_639_1': 'en', 'file_path': '/6OXM4vZiHI38tdzNl0eZBcnJ6Py.jpg', 'vote_average': 4.914, 'vote_count': 12, 'width': 788}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/hfPZSSOL9Lx8B5iSDob9ZzrWKmG.jpg', 'vote_average': 4.81, 'vote_count': 7, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/5YRk65QJV3oWTO0pzvMhUwHM3H8.jpg', 'vote_average': 4.744, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/wgbLSRE4hx2E2u4KC05dLejglvZ.jpg', 'vote_average': 4.744, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/uvp9JwfkHAfY98IKCVyW3wn50R5.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/rkydrPu5ozwuubWUxyGM0wBd7Zf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/adGWCFQtxYrzJDbVfsXqJd6An1f.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1801, 'iso_639_1': 'bg', 'file_path': '/iVLaWEt8lVm8DaWb2yFX0gZzhT1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'de', 'file_path': '/70n4Y3GW6BbwZf8TMspkw2S3E9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'pt', 'file_path': '/a45twTYksQoA7FQxHdrPbhmdymS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'pt', 'file_path': '/vOYYPbQwmNiFtuCZxepC5jSedK2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'pt', 'file_path': '/ozZUzjUrkTHm1DsXmxq5Szr33uI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 667}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/oV1orpEEyAG6qpYvx0eXLiMDOB5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.675, 'height': 1499, 'iso_639_1': 'vi', 'file_path': '/qRtqlnvcoWIL0Uma3HA15Ll84I6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1012}, {'aspect_ratio': 0.685, 'height': 934, 'iso_639_1': 'en', 'file_path': '/ibsAJmQFKIGD5045jHCtUjZoG5V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/xqpBQsx1pLgmCZmvlm4gs7Xkd6L.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.705, 'height': 2480, 'iso_639_1': 'en', 'file_path': '/71bgUB7aDOX2c0KdItL7nHS5V7Z.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1748}, {'aspect_ratio': 0.706, 'height': 1192, 'iso_639_1': 'cs', 'file_path': '/m85YWSaKOQTGd4P2iDPrdx9MWle.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 842}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cn69SQZ7JU5jGXespkOuTT4dWcN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uWp1gGlzks1Qbn4CRD53bwd1cYP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/m72FNxY3or8guz8fQeR6k8rhqIm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/477Y0JBPosetXaAq3F4JKS5cJOT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.712, 'height': 750, 'iso_639_1': 'en', 'file_path': '/xYsBhycaMctERkAryDnxzbhvLNd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 534}, {'aspect_ratio': 0.703, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/6UOBMm3SPyQwhjXg3JAuimhKH1A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 527}, {'aspect_ratio': 0.675, 'height': 750, 'iso_639_1': 'en', 'file_path': '/bUVnHhgs623J25hQKdXj5HB4TV5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 506}, {'aspect_ratio': 0.675, 'height': 1897, 'iso_639_1': 'en', 'file_path': '/bJjDuoXQwoKwf8Ikqw5fG93SccC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 1024, 'iso_639_1': 'th', 'file_path': '/sOV8Gs14hn3tItR9iRsT0zVXaN0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 683}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6mmR4jIx4lbcAlMq5jUwoxQBUNl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hJfvoSRul0vA8buvGEf8Y0nSMLj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/izwq3XnagOtZG2tjTikKmWD72Gr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ylIWpIzgtj8Kgu2LAttG91SAOEj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1562, 'iso_639_1': 'ro', 'file_path': '/jxeyKW2r6UJy18dJOsWnNcaO9ug.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1095}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/dEpzOsUsVOthJO50EeUV6c4OzOo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/6DNV7P1dELhmXMTovH5nmX1chcx.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/47Nt9FTKaibRT59Jt1C6kFrIUul.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'en', 'file_path': '/eD87eLlEBnu7YVq1mml7Ta6vraI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rbIaxCfEXhKcs81cDoRciWeZbWu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/cqUG42ME8SPfrCIBftZCTy0dIvx.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2501, 'iso_639_1': 'en', 'file_path': '/fC17drcQkvLoSfFssEtu0nEH3Cs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1667}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/3ZEJQbwgwr1FTEMm7gWMkTgwsZe.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ae18mE3HWOnuiCtT0Bu1REsm2wl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/sv1AZIcH1tLV6bcHsyouNVM3VNy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/jJ1H0mjM9qQTv5V52RdlKvOIWMF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/4VFkZEUnqwYYiWIoweufYEH67lE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/5dfGY1MiYj93BC9FKMe1K1sOJAh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/6LPkJO0phMVbuNld3jzLgoQcaYI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/yuTd4oGNt0jlT623ElJTOCZIzoK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 976, 'iso_639_1': 'en', 'file_path': '/iUw4Qp5EwnLRihy5V7vGBohdwo3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 651}, {'aspect_ratio': 0.666, 'height': 968, 'iso_639_1': 'en', 'file_path': '/4IJjdiRxMdnYXojJCNeUzwwXkUK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 645}, {'aspect_ratio': 0.664, 'height': 2118, 'iso_639_1': 'en', 'file_path': '/fbRhW1nrxIE3nwb5ByfIIQkgUni.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1407}, {'aspect_ratio': 0.667, 'height': 993, 'iso_639_1': None, 'file_path': '/8kK5FHLTrKHRT9UJvRnMlvEhvvk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 662}, {'aspect_ratio': 0.667, 'height': 1242, 'iso_639_1': 'en', 'file_path': '/dhSlbHJU9qGruyPmupchkDV41kc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/mJgVk2lvmvZtwQwfq7H71fs1xVQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/dQ7pAZt4vpYA04dHpOOqYfhADuS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vYPgI0pGfiJOI41JX4lN9c70MCL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/pvAYIDWwaQglnKjJGIGwDq02vzA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gqvkZN4yJwaWXLdawiY6SByPNgp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/bVsNuqh2hPEiX17xmUEhA6726FF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2814, 'iso_639_1': 'en', 'file_path': '/8TjRK4ltj94BIq6d5N3aUPJSnrB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1876}, {'aspect_ratio': 0.667, 'height': 1684, 'iso_639_1': 'en', 'file_path': '/obQY1Ey2M5txxmJZfYSFBzPyMXX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1124}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/spqqZhj0r8VM62hLrv3DwHyyG8E.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': None, 'file_path': '/jmtTd2RLeIK1JXYhZ9EW2Byj8i9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/iXQUHNghW2FsOxWifI1wWx87XOQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/7wSj4SRrmiuB54VGXKNB2X0RzQt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.666, 'height': 1121, 'iso_639_1': 'en', 'file_path': '/jkTXanEbEreyPBfmJXabl4vErOz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 747}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/8rTv325KOZLFjlvYW8r2wVFjHIh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/1au2MtEbzmr9WKRnv1w5ZzX0Zbg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1667}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/8fVpaUhCszes7r9EPtQLIvhBJfw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/6nVrUvOygBS8hS4RWClRKYhkN0a.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/oDdYBp1ekTO2ELJwb6SNQoC9Cua.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/p3HyZzJYgw35OJj06OnojkAIjdg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/5Pwoe5rZwYcLEmo3CyeWMND12Sp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'fr', 'file_path': '/7gmYun3b26zyDRDS11Lef8FkAgA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/j21lDOxiJBOoW8ApfVvilSow0GY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.749, 'height': 2669, 'iso_639_1': 'fr', 'file_path': '/zKJYwNZ38BmitETM9ttkG8rvjSF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/tASJpacWyivVyRnUahaxT2cJg5L.jpg', 'vote_average': 5.708, 'vote_count': 9, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/3VijrH8284v86IO3AjG24Ri2jZ1.jpg', 'vote_average': 5.642, 'vote_count': 10, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/72SOtZnFhCumLRZhoXlX8g2IkgF.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/k68nPLbIST6NP96JmTxmZijEvCA.jpg', 'vote_average': 5.388, 'vote_count': 57, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/bHUmjIqaAAjrQ0p8RqagHgCmG7N.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'el', 'file_path': '/AdkXPG1dBkd8VnuzQIyzh6B2o0X.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 978, 'iso_639_1': 'pl', 'file_path': '/IveefzhRc6Zdd5gzQw3VFjitZP.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 652}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/iKXqUiLFDgeIGozRR6JYRvFmD5A.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.72, 'height': 1000, 'iso_639_1': 'cs', 'file_path': '/hzvQVjmagnpOd1haaJq6IPJI3es.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 720}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/2olsZGB9vcazEoQUI1eoD7NaBXI.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/aCIFMriQh8rvhxpN1IWGgvH0Tlg.jpg', 'vote_average': 5.364, 'vote_count': 31, 'width': 1365}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'zh', 'file_path': '/qs13cxcA7tVTBq0WcgJ9GGplXnK.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/1jU80STrosbPsiNe3oPpwyS5cXg.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 2918, 'iso_639_1': 'ko', 'file_path': '/ylQRi3edixhzUiubw7LQP1YhI6W.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1958}, {'aspect_ratio': 0.671, 'height': 2917, 'iso_639_1': 'ko', 'file_path': '/4ISu3R5OQQ39aWCzWWYrB9reSQD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1958}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/ApP2sz8pMkPC5xRlFa3l6MjQINB.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'hr', 'file_path': '/naWwLNGj1cQ0nVz5Ap6CC3cl0RU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/buSr2RIxzJ5Zh6dLaLBsqAdvz3I.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/3nNhvoImY5xos82ZLMhv1jGucGM.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/hsGsdJnjvdXdqXOJyLiJHVecAt5.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.676, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/oEPLD99jMDtX1HabXB4JbHhkGWS.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 676}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/VBEruSTMZfwj1VFqMqGXBqLOro.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/kjMSOw223FtsdMzEOCUvTnyDPFY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/cRDUa63MeEpOWdqZeXqReDz7KTx.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'fr', 'file_path': '/m2Lb6a38TJbjP9py0Wjml6JtIdm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/qG5B4146EZHoCRlwYgybl2C060w.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2644, 'iso_639_1': 'sk', 'file_path': '/8Rat9OEsG5Ys9YxPoLpFSwUT3Ct.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1763}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/Ae0pbv4E6YfqfN3UjKWIfQSzP9v.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 2852, 'iso_639_1': 'fr', 'file_path': '/r4aygO7YvOVIl5r9xg5NmI1M6bV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oRkLA2EkXaRLmK63BkvK74G8tC4.jpg', 'vote_average': 5.3, 'vote_count': 22, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/wRlgk7KLJNUd1Kgct5FimlGgviK.jpg', 'vote_average': 5.292, 'vote_count': 18, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/oh8XmxWlySHgGLlx8QOBmq9k72j.jpg', 'vote_average': 5.282, 'vote_count': 14, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7wHx4Vk0NExuzZuGk2KRuc8Ogw8.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/q8Py71q2dnjdZOoB6BGcUkgmy0d.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rrKH3VhHssGTCfPuaEQkxvEoElv.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1200, 'iso_639_1': 'es', 'file_path': '/jFAi1Uv3JjNPEgjKuneG5mBlAvA.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 810}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/jutsxphSGbnpxpGr23xzbf2ziQZ.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'en', 'file_path': '/igGF5CJwfsHBXO515sQbHmEwwKb.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8W7GrgHc9FdfFhExGLSD8woZaSd.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/pBtBqPcNocjYEzVqSOzW5HQlx0E.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/n0zcpLDR6cbmPgWrIWTleGeI24j.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2046, 'iso_639_1': 'en', 'file_path': '/zukO7q7I4kBQhEMZFSnDkVx6rm6.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 2880, 'iso_639_1': 'en', 'file_path': '/20OxuK7i84dlrYLZkWXCYD595bZ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1920}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/w93KBwtAyLRHSwPApC9ojVbblz3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/hTAIqYYXDHqe8xPFV5cH4ElxCqb.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/iGkkhRzdtzg56zbCOpIi9XosVps.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 1280, 'iso_639_1': 'es', 'file_path': '/sJfBFmPBgBuE4bn6LeGzt3548wc.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 890}, {'aspect_ratio': 0.675, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/gXFO3yijIcE81ToS8fex5fckQs6.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1822}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bbsLQa2MFfjkKN1jiLJniuoVmnr.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/e17TGZsyJuV8SoSmjBpYyxpWDkF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/m96dj44zZJ8TxpaMZDJv63TldZh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'th', 'file_path': '/26UM1gxWL7siq8TdTWVoioirhiz.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 648}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'tr', 'file_path': '/dj6ji5YuvYK4TqfrI7N3EwoRstA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/fxWdGXi70vp3FmMwVUgaFOuz7p5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/t20YrhZQzVKTcUarWb8hvkuVdhR.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/953c71N8KDhL0FGfFjbHltwVmNj.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gr8rLs4QSu3c7sksYxUXqAvjTtL.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/uC2Us1kfVCbTfx0rvqwqgIIjDeu.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ba6WSxKmNzfeK1XnfrNDYfU3rJN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 750, 'iso_639_1': 'en', 'file_path': '/z1NOLVngacgijfaInk6NH9teHA8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 506}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/yrp3FwZnPk76nB4YTnVCRkLUWA8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 951}, {'aspect_ratio': 0.675, 'height': 2046, 'iso_639_1': 'en', 'file_path': '/n1It9EmM9R10Z3NGTQFiG1aodpl.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9hMMIbz0Aw9zO2jXoJZPOpBiCtT.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/deLRaMU1cYxp169iIqh0Pt6MbgN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/o4WvqfFGUKIqrGqCRPQQN4LfwPn.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/y0oS0FUbEeeDJ7zB2KneCeGBE0W.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.684, 'height': 1901, 'iso_639_1': 'en', 'file_path': '/51gY7geyCQ7RsFMsySUcBShd1jp.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1300}, {'aspect_ratio': 0.666, 'height': 1936, 'iso_639_1': 'en', 'file_path': '/qEFP7olEpveUjQoJBlVL7jYne5z.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1290}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/658wTC3V8AvrdZGiUKqLzFmbnHq.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1734, 'iso_639_1': 'en', 'file_path': '/zdV05nwIfPUkJaqjENtD1Bz6dqD.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1155}, {'aspect_ratio': 0.667, 'height': 1692, 'iso_639_1': 'en', 'file_path': '/yp8DRbAnJHunlXsrhTppHAezliH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1128}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4l7xavwBLzMO7XDuUSTIWS5xFbv.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gD60HrHf3E1muyaBTiEZVSsqq3Q.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 2250, 'iso_639_1': 'en', 'file_path': '/vHBk4t6Wf777uRxTlypF28RdLc8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1498}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/VarFilyykk24q2TM72DRGQY7Z9.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/6bBseBvhfnQwWVZUNdyKzDJ2ND7.jpg', 'vote_average': 5.206, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/3oNEdly8PgenWhQSHLZBBFXL5NZ.jpg', 'vote_average': 5.198, 'vote_count': 7, 'width': 800}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'zh', 'file_path': '/p0F78BfKkX9c3JnZILgZe0IFbjh.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1382}, {'aspect_ratio': 0.669, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/jvuXK03Tvq8Ttr4VbvjtbpNv8sV.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 954}, {'aspect_ratio': 0.7, 'height': 1000, 'iso_639_1': 'zh', 'file_path': '/68hZXVFkFGQ7KN3yjPBa5bcLyHf.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 700}, {'aspect_ratio': 0.669, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/dFjRYABWTsUmLdhnxEjWtiVGUQc.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 954}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/s5jxwhLPGI4Xow8GXwenzL1MkwF.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/5egQdoW86PIeMGbMQsaP17LTUGF.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/79n0cePpWjTt8Ge4BRQB87WL0lC.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1367, 'iso_639_1': 'en', 'file_path': '/AtBOlZVuzeIHmlLxBi6vKa7LxSX.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 911}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/ve6nayrO4nCSV7f4kJtyDnRDZXj.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/bnP8QQWIHAjz8lyNXyP1aIC9gQy.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/r3576fzKQ1N5mlwT8jZuCn5Arwb.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1423, 'iso_639_1': 'ru', 'file_path': '/vspWqZ3YR7MR1njlehqNChhsJbY.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 960}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'uk', 'file_path': '/aVIT5vpLhRRG0yfTWSqahSuUBy7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1382}, {'aspect_ratio': 0.709, 'height': 776, 'iso_639_1': 'uk', 'file_path': '/als8ezMfZQOU4qCPmWY4fE3dAYQ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 550}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/q3VwIHJifJqW1aB13z7ypYLjIR1.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/g50V0IpNnA9aO2KzUsWx1IOGbl7.jpg', 'vote_average': 5.146, 'vote_count': 10, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4QUBQUtHfGVOPA5FJr9ylj7qfk4.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/ufxaLyyrpjKTBf6s95xDMMBFhv8.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/2BcA6OuvAcZYGHYT9cGnz4OaG5w.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'fr', 'file_path': '/wi5c5ui75273L8Xy7utfQ338JVM.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1080}, {'aspect_ratio': 0.675, 'height': 1553, 'iso_639_1': 'zh', 'file_path': '/ikH6hPtVBAjDJrfEPWV0WsdZOou.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1049}, {'aspect_ratio': 0.707, 'height': 2808, 'iso_639_1': 'de', 'file_path': '/rvFPyynleFmssvkHkETR5dfA4wQ.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1985}, {'aspect_ratio': 0.707, 'height': 2694, 'iso_639_1': 'de', 'file_path': '/3ethyYcHylFB0MQaR9Re8XipD9Q.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1905}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/n43gtda4d9MpkQOJuDiZsghyuDF.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'it', 'file_path': '/zyhbCFImhQZGUpaR0YxQo9cS8ug.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 640}, {'aspect_ratio': 0.75, 'height': 2184, 'iso_639_1': 'fr', 'file_path': '/n3r7TJ4Jg7IMLfjox9DKf20INrM.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1638}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'fr', 'file_path': '/iFuUdZ8Sf3aUloLrwRkE9eZe9qn.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/lvGVvKUNjkYMsCiWRQvx0zmOSgf.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1080, 'iso_639_1': 'fr', 'file_path': '/wUFgurjdZ0CZLOpDddED61LsECp.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 729}, {'aspect_ratio': 0.675, 'height': 1080, 'iso_639_1': 'es', 'file_path': '/67p7XVP5SLup521iD9cAayMNt2U.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 729}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/xXnu79NXmxeBel3GN5Q35r5M9IH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/9SG06mt9sdAKPSV24ZwSC0BTJgP.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/gPHolElXk7RZIbtH5DZYy4x89KD.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/4yap6odXTCy4B5i4yj26CX0PP5u.jpg', 'vote_average': 5.046, 'vote_count': 14, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 1840, 'iso_639_1': 'en', 'file_path': '/fIkVbwSgIbtQoTXoPQFWQQYbTNo.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1227}, {'aspect_ratio': 0.667, 'height': 2025, 'iso_639_1': 'en', 'file_path': '/r3RN7MhELaLa1TswnruOguVpbti.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1350}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/4FcXo5SMDxx3xs6Gy4Hn8ghubjF.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/gtbcNREppG3EtlWPUSBgvQX3wLl.jpg', 'vote_average': 4.954, 'vote_count': 9, 'width': 1382}, {'aspect_ratio': 0.675, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/aqeFTqYgC8LkYUcCP9kPw1mVW38.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.679, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/wqgyAiTZwCJglokIViEwAMk6UXR.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 679}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/yj2fK2noJy7IeC7IF7Ck89rGYOI.jpg', 'vote_average': 4.908, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/miydFfLqKN52EG0cRqX3DNVxTEV.jpg', 'vote_average': 4.846, 'vote_count': 11, 'width': 1012}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lM9LUM7oJ9SekpzLxLGp64ACRBr.jpg', 'vote_average': 4.828, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/vTq8Sq4BJopStWGxDcAkmNThxdM.jpg', 'vote_average': 4.794, 'vote_count': 12, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'zh', 'file_path': '/fZDEaSzIez8VlPs0s0P3qKRshaE.jpg', 'vote_average': 4.774, 'vote_count': 10, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/lX9WdoJGHMr7pVyV7FNI6dA3M8j.jpg', 'vote_average': 4.756, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/k9HBfQwoXSTZgw4O6SeuVBYUgiY.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/hPWQxw5dQH2nKvC8m15aEJvIeJ3.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lRsEThuzrJuuvj6oCDDXDAxLOFF.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/9Nqx2tMrrksmq9aO5oSO0NzUEAf.jpg', 'vote_average': 4.674, 'vote_count': 12, 'width': 1400}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/rskwnqit2uNIGzdaRiK9xlDIcdK.jpg', 'vote_average': 4.576, 'vote_count': 14, 'width': 675}, {'aspect_ratio': 0.671, 'height': 1945, 'iso_639_1': 'ko', 'file_path': '/aHt13urK4fzrOr30yHVmGT6OsE6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1305}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/4xbiHTdPSlVKtYpTu4nABh9HfGH.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/jeHQIDSIa4vJBQPztVOHr39Z6ah.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/dFafJVFABS5A0rZ5gThMHO3lH8V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cs', 'file_path': '/lhauCTw99l7NLHNMnosVcM9AR4K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'uk', 'file_path': '/3axgBjjEgEm0BFWViSkfuyBQcab.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ar', 'file_path': '/iN8mhL0vSIxsTetkmE3XsJedvAv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ar', 'file_path': '/1haRSMcIshKnVUljJF6sxr0luH9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/eMTAAOl7t37LXSfmmwQgZUQjjna.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/qnoKl9QhIfQ9ooPAltuAQgO4PdQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/k2hAyRUMu2yMWImzwJ0be1EK4mA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 978, 'iso_639_1': 'pl', 'file_path': '/akyYzv6aF8EpIFp5Q7J5gBwOPys.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 652}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ja', 'file_path': '/azzqSt3XPpRRIYyh0WT6rs2BCe7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1200, 'iso_639_1': 'vi', 'file_path': '/nSaf4wrXgifAZZ52ncKuXBuR989.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 810}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'vi', 'file_path': '/6yEC8Vzeb8Jb2v92WDDlwE7o6Qp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/vrXFOYjBMXjsVgTZTNGvX5cwsVi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/8rmXY2DH0emfwwT1hsoGkh91bTR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'tr', 'file_path': '/n8gzKzi8tvpTZh0Ev8B5c5T6Lm2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'tr', 'file_path': '/incFPFFoGrnDR6xRtEACqkug4vN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/sdS5LoMq4ELi9oPJdqDkn3nY3Jz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/7iUA9SKVHzplTIxkXsVshlAYCtX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/rpfDaRMIbEXXHXN7EfNkfLqQe0b.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/bngxk1DYQD8rzkXeyDTf9afqQS2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jDO05iH7DkjEkTiZcLvT9MAID3k.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eQy2Dceeeg31cpLuLxyyGwHgq3N.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uG3LanNAPENQSVWzSCSBMzJ8vEI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/wdUzLcYKDuEk5hRQBy4GPWaWsU9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ywl38WqU29S8S9w6h1foR9jYyRR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/f6IjjhzR3tvPCKhWAybsyGgF0aj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/g1fDu3g7BsEScobygmBiZB6y7HU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.674, 'height': 2136, 'iso_639_1': 'ar', 'file_path': '/jlOxsDp0ehXpYjymkzza9NCrTe7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/ggFZHu542Iy3Uswh3iydOnrxQaP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/e8xHyx6xnvwOEJyFF7cyyJ8vBg2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/lrFsBGRdZtLNpMYPiQLu6iQFi0M.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/ggm8X8fgwoqUoIqE8QDcKxScLlW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gyMGax60ToZCkoKOKEkTDEzfUt1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/WukyEfsKP21vRahgU8oAPwFsj2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/GqAWQHdEHS0dzyTfGFGXJtIaq7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 750, 'iso_639_1': 'zh', 'file_path': '/tVe3xHC97imJoyfZ1KaE55AdngU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 506}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/epoids15egPuq933RvT0Y34L478.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/ovMjFDybSgGTkeboRl7NW1pxQwJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/2IRYjm9TPKOcAN05JQI7p83OYfc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 889, 'iso_639_1': 'ro', 'file_path': '/8hGCmXRQwg1oFRPSoELXb5Y2qMy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 592}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/zDktJ7HvvPmQfmODoQr82Vqixas.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/trcTyjkrPtJOs3VAhsKg4VXD4e3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/1Kp80UumFADxoujem4f9XUdorns.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/c2JahdNbxE3tnuqkHzc0PV5mmaf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.676, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/uC8TeYMb21Wbp7vBJxkdLSCVowF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 676}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/dXEz6T9l4beYMLFQCz8CaxGahrA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/45xZh9ckG0G1G1KDo3b3SMpCepI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.676, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/qA0AXOdnFdEqQ5QOkXpPNBJsSaC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 676}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/qJ6BS0pq5MmHt9eJRDIOpI6HQbr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/zpIqjUYkRHOECYjrNIT3Q5n8E3I.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/2y9JfYSDiFLuQE883SpHjsqg725.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/pnK4oL7yhFVAvcIDgTw2qvxmcQq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/qijkW9NBsX620z2oIO5rSIMgkZK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2jh51rEBFF4xd01mFeVaIuEB5Zs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/wY5ADCiNmcriq4ztk8vFdmLLPZa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1364}, {'aspect_ratio': 0.702, 'height': 997, 'iso_639_1': 'en', 'file_path': '/mlOQtpJ21PwrhJMWT82HTcR66f1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.667, 'height': 1049, 'iso_639_1': 'en', 'file_path': '/gqXcpvR0XbaAKdjUOFyhMnMYyCh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.675, 'height': 1353, 'iso_639_1': 'en', 'file_path': '/3p4m0xZDxEiJlMtfaBlJrDoRd94.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 913}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'en', 'file_path': '/ikprp0ljmuqwAKVF7loD0RYB1R3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.707, 'height': 990, 'iso_639_1': 'en', 'file_path': '/t6Ci35eRRUgjheNjwvDlnZasLAz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/vqPN7tSObfi2samod5YMWk3hd1T.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 2600, 'iso_639_1': 'hi', 'file_path': '/f9zhIg8M1X1tFpHFUEA3scA6OYb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1734}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/gfK480aiP5YP6LOLMcGwuCqUwod.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/4hyLO3l1QPnaL8nelSF9gcQP6Zu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'th', 'file_path': '/5ie13iRwU9fwpNlaSvy10NJQdob.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.666, 'height': 2000, 'iso_639_1': 'en', 'file_path': '/ofEnRAtapT6QDNQRgKRnEkGi9TJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1333}, {'aspect_ratio': 0.707, 'height': 1122, 'iso_639_1': 'no', 'file_path': '/w2PVxCxX9uXgji5XKBjTh6ZYV5k.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 793}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/biB1eiXO8Gtlm3f9V6qztEOipCw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.666, 'height': 1642, 'iso_639_1': 'en', 'file_path': '/c9o3YTki4jE2KBn2U2JypADzi3l.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1094}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'fa', 'file_path': '/k2az1QwAcRojG2DkMgq547cuUtm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1493, 'iso_639_1': 'en', 'file_path': '/rGMA2oKiBQJnCiyk1jTFripWnh6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 996}, {'aspect_ratio': 0.666, 'height': 2815, 'iso_639_1': 'en', 'file_path': '/osnMHdJcOtRn9Tt0UStGmjSW8a3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1876}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/e6rWRXmXNIAbhLTxxWyL47Gl83U.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/eS4JP1cUqDDxSCl0SZ7N8fi5DDi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9kw2rw8qDeNBsyfaPQ9X2AVyI0Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/fmMkJ2OK8Kil3RDOErXeFyfp3c9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/pHgdMEMLByURAvRExapzplW7zXV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/cUvsymH3xbOqaCsEp9UpLqxuyvF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/cIsad2oTEgIStgknjKR3uaQM16O.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/dPIhW8H3wcPuYSCkJddbeEcOYia.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/wgZH8JYBRL10gt6UjKzxPKWUl2w.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/2RvO5Q8i3Cv9ExSqPtRb64yBTPT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ja', 'file_path': '/6iQh1aekQjRYxS2U9rofwGocjfZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8vQuVYhXSbkrPajWxDlHPG7AdHS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/wxwlG0M23uNvXglZ2ScUZYb9z6W.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.665, 'height': 1994, 'iso_639_1': 'en', 'file_path': '/mGb10FlelkIYQe5OPidEKsNtZmt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1327}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/srfebAZOcvZJHy0gMtI8TCwigCS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 981, 'iso_639_1': 'sk', 'file_path': '/zbKHN5YeKCjdYE6JPrJFhkbdKQR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 654}, {'aspect_ratio': 0.674, 'height': 949, 'iso_639_1': 'en', 'file_path': '/8JnqTXhjaLnTFkvPOoSdvofzPn7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4BVUrRjMj5WiyjRnHURfmAWxWME.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gEU2QniE6E77NI6lCU6MxlNBvIx.jpg', 'vote_average': 5.728, 'vote_count': 39, 'width': 2000}, {'aspect_ratio': 0.668, 'height': 1124, 'iso_639_1': 'en', 'file_path': '/mS4EvhsrT0SQZOlWrQEzWI5KiUa.jpg', 'vote_average': 6.026, 'vote_count': 33, 'width': 751}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/bzONet3OeCTz5q9WOkGjVpOHMSR.jpg', 'vote_average': 5.638, 'vote_count': 12, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/iawqQdFKI7yTUoSkDNP8gyV3J3r.jpg', 'vote_average': 5.634, 'vote_count': 14, 'width': 2000}, {'aspect_ratio': 0.707, 'height': 2829, 'iso_639_1': 'en', 'file_path': '/fX44bgxKQsS4P4ewb2iotHveEkn.jpg', 'vote_average': 5.588, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/nrSaXF39nDfAAeLKksRCyvSzI2a.jpg', 'vote_average': 5.586, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/1pnigkWWy8W032o9TKDneBa3eVK.jpg', 'vote_average': 5.522, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/9d1sCoMSGJZtghS2X9us1h9u8lW.jpg', 'vote_average': 5.522, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/nCbkOyOMTEwlEV0LtCOvCnwEONA.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cBuvBJMhdZl85v4wRKDmEZ7Qd9B.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4pWbfjzUkusGXAZQoduARaI0qu2.jpg', 'vote_average': 5.394, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'be', 'file_path': '/rPrqBqZLl8m6sUQmZCchqW7IEYo.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/iolc5VLP4PFU0XvjTVRiCb80mUR.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/xbiycuc84TrieEWwkkuH2hoEa9S.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.75, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/8ATtOkzbQ315u5muIlAxtCZESOf.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 750}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/yQvGrMoipbRoddT0ZR8tPoR7NfX.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7uCL4gbdmokTWyeYbJxwBo5pbVT.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/fb9VcK7aCI2z4kH5nXjBKkEUVEu.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/v7Iib57HHgSEI9B7XYRF6qrs11T.jpg', 'vote_average': 5.36, 'vote_count': 27, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/9PTvvflydmTnfvMWMAwMMkV7X2s.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2304, 'iso_639_1': 'en', 'file_path': '/vRJ1ScAJUDeTxuBv5cX45fDD0I0.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1536}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/6KiSSndIMLj1swkpPNq2lYppDVQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.692, 'height': 1228, 'iso_639_1': 'bg', 'file_path': '/omKeIQBr8oiW3MikuoGPQ6z55EG.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 850}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/tYaC23U62BOJRNVIlFGT6iowEwj.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ja', 'file_path': '/rgoNKrN5oEWIpfM6ZSPORbB2NYf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/zDNAeWU0PxKolEX1D8Vn1qWhGjH.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 734}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/jM4VN1IFD2R1ElpqT3T0bt08uJt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 734}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/2mRRFbnMPMSh4ZiRdiAK0q303Nm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 2963, 'iso_639_1': 'he', 'file_path': '/dyUA5G7hmMOlBfa7yzAl0Zolynr.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/uODkRJ68CQN2uiHksyGXNPTYVuN.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/q6KI8ChlkIYYZww8C053cVfPQRo.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'de', 'file_path': '/hHdhfkkzt0Mwec33Ux177Z7CO8w.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/s7r8IkdbFP42sYhHhyPRnySmqCD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/674XbyJKOO7z5ds6ddR6uAmoThU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 951}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/wM0PSFUYHcFLEguYNjn3RDOEKtt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2157, 'iso_639_1': 'en', 'file_path': '/yCKxTlmPNQBoAl5qlHfn0GHMLjV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1439}, {'aspect_ratio': 0.667, 'height': 1242, 'iso_639_1': 'en', 'file_path': '/nvA7SLPXtuI3kG1ViXb5r8v8581.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 828}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/wATQX43h29TojNIbcwLuPg7OPqi.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zrwNvkdYXrgFea41AxhJhIKopov.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2304, 'iso_639_1': 'en', 'file_path': '/jWmRKnYYoIXfsiNuQVr7iB1DE6h.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1536}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/7fEFzWmCy6rV2gDl0uhz9smCQDS.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/vReLRjDV9XPhiOSEW7QWow4DXwf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 790, 'iso_639_1': 'en', 'file_path': '/fZYl4hG1Xve39hqeEN7q6UJsWPF.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 527}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/6ricSDD83BClJsFdGB6x7cM0MFQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2829, 'iso_639_1': 'it', 'file_path': '/fD5OfSm5aMEKlFpYp9jbGP8IxuU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1886}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/mQNr5d0ypstgJ6X0umnaJWoPdH4.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/th5UkDLIa7yyma9UYDAWaIgDh6z.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1667}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/bMKiLh0mES4Uiococ240lbbTGXQ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/fbUwSqYIP0isCiJXey3staY3DNn.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'tr', 'file_path': '/y1TKElkgWOl90iFik3GHlgJdphm.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/9rSeLJx4k1TaIUlPa4gwZK6tBxl.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/mR2OK5aK5kMOdAQYfc5kkOg06Pn.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/pOQfDNjk22UhTrAGwwN8Nwz7cyj.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/h7zAAbQ0rtEteSEQf7HklyizBg5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/j5AiH1Ez0b0RCjI2MTMvSDgkyXP.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1012}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/7HEYmKkuWHya4WTGhkqCjSfokAv.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1013}, {'aspect_ratio': 0.704, 'height': 2840, 'iso_639_1': 'de', 'file_path': '/lckRcubpItGlnO1v60clysNirme.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/eloxVOLxwOCPSzv1MFO2SuJYtrH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/7v5cRygVR8hqiAUP1a9IXdV3NUB.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/3c95G7trDKHahCYKMekCXjeacdh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ka', 'file_path': '/18Whj5cKOeAH01da7PLHDvKC76S.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1104, 'iso_639_1': 'en', 'file_path': '/cA5TGzNpwxhLGeAELmWHB5klcvN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 736}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xrgBLpPMXWXKdyj5r36RVfmkRdb.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/990DWuNkoVgvzu8meLQO1WwTHHQ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/e1pkIN4dPjug8rk75BRVukyIXAn.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/p6wYy2mUsOwi4TalNAk46ft4sVJ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/5qhJeFztZ2N31T7TvG7j6M1sOtj.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1125, 'iso_639_1': 'zh', 'file_path': '/7z0QoRia9Tknxe1R1vz7jwkzUrm.jpg', 'vote_average': 5.18, 'vote_count': 18, 'width': 750}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/8YZZMKVoc05O8mWdwzKMGhtM4m.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 734}, {'aspect_ratio': 0.736, 'height': 1284, 'iso_639_1': 'fr', 'file_path': '/uWZrj6K6kwggb8qdlpko76SRSG7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 945}, {'aspect_ratio': 0.667, 'height': 1124, 'iso_639_1': 'en', 'file_path': '/1ZOWn2VSiRhGdfWW7PdreiUOYuR.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 750}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/sOXOGIAUdlsygIovTGh0YIGeREN.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/jpxJj9mVbDNyG08fbmTyGFvZFNC.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/qvxBKd8GrgPg1W5FDG5nmwpzbb7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/uz0owCMTNBmojwPQcDR6OpdCyL2.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/u6EAEtocvyBbc3vwmwHh569DOTs.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.664, 'height': 1204, 'iso_639_1': 'en', 'file_path': '/90NU5EtPAjs1toYOu2cp4emP1tk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/aQWo0r7dcqrW8OdZ5PjkKdemaXN.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'zh', 'file_path': '/c35Vwd9rmMQfaEJuUrJRF3LZWJX.jpg', 'vote_average': 5.164, 'vote_count': 14, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/cv3tj98DvCW8ba75a9XwDPdiYIt.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 1600, 'iso_639_1': 'es', 'file_path': '/d1QKiYtceF3GDtxvTFXFAqwwah9.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1120}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/zq8j3XRJDVqNhiRMensg2uTkYrd.jpg', 'vote_average': 5.12, 'vote_count': 17, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/2QzyxZlj2HxVWiCjgjORIvjAq8T.jpg', 'vote_average': 5.12, 'vote_count': 17, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'en', 'file_path': '/qDSDtonrb6LfVOJXBbpZJNLjr2L.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 600}, {'aspect_ratio': 0.697, 'height': 1438, 'iso_639_1': 'es', 'file_path': '/9kmFzQjRdEjSpjVQeGlvmHAzaPw.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1003}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/AtOL7JqNBGELgBA87gSHNcfzSD.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/sEgN6vtJTw1CW7hjQp4dMUCxUSh.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1050}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/ija1bykAdfthqxlSl0UHhOBI2YM.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/55JWKCqNTn54016voGvig52ikjb.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6LlCIoqKpyJbKB63cmD4pyByHXQ.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/kfP55zsGaq9xl4CfI1C6TFDmLkZ.jpg', 'vote_average': 5.1, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/3DKszh7Ng0EN0UoTkIT01rb0SYC.jpg', 'vote_average': 5.1, 'vote_count': 13, 'width': 672}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/eS79aflvTbW2f754gCO7NM1j7Ym.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 672}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/rUOaQxFj5aKIgQJnmJRF22qQXrH.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 672}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/cNr99Vx7jIa2VOnxRMAfatt1Ong.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/vm4avyFTQAYT4k3YCXasI2Q0BCz.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.674, 'height': 800, 'iso_639_1': 'zh', 'file_path': '/x0svdinUPWHwI14CtIdeB5KXfiy.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 539}, {'aspect_ratio': 0.674, 'height': 800, 'iso_639_1': 'zh', 'file_path': '/zLgW4iKqUXxuTBMk5DmOfhPf0zw.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 539}, {'aspect_ratio': 0.701, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/mBZgrHMZ1VQqpuhHZU8fsN03H8u.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 673}, {'aspect_ratio': 0.667, 'height': 1800, 'iso_639_1': 'zh', 'file_path': '/7I0sjfbWJ5r8e8M9jWf7WcN256j.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/zQsvYbHaMjBRfnPVxZdtbPyyFT8.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cn', 'file_path': '/ulLGFg2QUAhKvkgClIJp2uxuYiA.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.707, 'height': 1698, 'iso_639_1': 'ja', 'file_path': '/vA133yh9mW7Kt82x3f6dnirLd73.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'de', 'file_path': '/jb2lnJrWkRhDy7C3yb129YQIY6i.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/9W7qYnmi1W3648YXVJvpjk82MUf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/hbGNJb88HjoQurnRYYWg45YBFtz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1667}, {'aspect_ratio': 0.702, 'height': 1500, 'iso_639_1': 'ja', 'file_path': '/v6oNcydMvHwV8sxNIF8eivbw8tK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1053}, {'aspect_ratio': 0.71, 'height': 1408, 'iso_639_1': 'cn', 'file_path': '/eX4Al8LtAmuw5RRHRLuDxs2Kn22.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 2024, 'iso_639_1': 'ro', 'file_path': '/mgt3D3a51efPMqGOgwH7AaF5m67.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1417}, {'aspect_ratio': 0.699, 'height': 2841, 'iso_639_1': 'en', 'file_path': '/hDO9K7NLSUHTis7QDeEdH64KEJ2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1986}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xdAzr43DN4BNMUomn8kgMsGUc7Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/q4emCJmjNomEE2pVGgqr3nDEIzI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2286, 'iso_639_1': 'ko', 'file_path': '/evoEi8SBSvIIEveM3V6nCJ6vKj8.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1524}, {'aspect_ratio': 0.693, 'height': 1108, 'iso_639_1': 'el', 'file_path': '/o0xb7oUWC8K516QdYISRg57fFJv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 768}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'be', 'file_path': '/104v27KQPR4FWQJtu25WEVIKB9S.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/goxCjppjJpJhhAYgzPTTBrqbfHi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 2287, 'iso_639_1': 'ko', 'file_path': '/Ap70Jv6nsJ3RpNrK66CfcicBHTA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1602}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/1KTTpt22QCdYkPmW7qcMsrEOA1D.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 734}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/bfMkoXy8d5HGBWPxOvCPRjtRZMF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 734}, {'aspect_ratio': 0.75, 'height': 1600, 'iso_639_1': 'fr', 'file_path': '/yFWUnIdLuxEB00NXQDSjuzgH0fO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pGZpvsjeJ1F5DWBhTe5h2cjIjR9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/6qdusBmmCndnYs1jkf7BSUrIoBr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/7jOjfOlM9hsZS6B930Oj10X56ib.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/gTlZAMmuMjN2Ia0M4pxU2C0ZWxq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 1408, 'iso_639_1': 'cn', 'file_path': '/fkb2SwmbXhjTCfqU82XmpH9VRAr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cn', 'file_path': '/fPM9jZHZAIo0JI4iMLpm5pC4OLw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/zioKUjPlD1aAg0jSdlZY4LNuJgP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'hr', 'file_path': '/lGdLsK976sbGRppdSHbQ5PbAMnb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.699, 'height': 2048, 'iso_639_1': 'tr', 'file_path': '/1T0YWRHgxkRXLh78RgPBH7yGHqU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1432}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'tr', 'file_path': '/gdo6oKHUdUiNLscrXzx3LZ6QcWw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 648}, {'aspect_ratio': 0.676, 'height': 888, 'iso_639_1': 'th', 'file_path': '/gx36DX1RLixLu6sBWgmdiDr7Rbb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.676, 'height': 947, 'iso_639_1': 'th', 'file_path': '/aDJlk2mPEo0weBzJ1eikAqZeHwS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.676, 'height': 947, 'iso_639_1': 'th', 'file_path': '/6L8Eo6ZgBKz63ar5lB6esutDmCU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/rct7HdAfPyvSqbr4H86b6z10tCE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1622, 'iso_639_1': 'en', 'file_path': '/lpkCFuoPC2m1tIHzkpcx6tO2JSa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/WXwTgRstrSe83GDSJvJLhGsMia.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 667}, {'aspect_ratio': 0.704, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/jT6hhix5X8hFgFUrQBy91QwFSlE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1056}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/ogn2abMeIel1UlLm8APU2U69Ydt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/3CQX7KAtGFVfI4PiPRD93Uf3xzX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oS4PsbsKxSP16qYj3RTSYO46OtB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/75VHAQoz8oOFISA52Ojbvpkcml9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/15SGNP9JUGCdKzResOuK07rmOxn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2157, 'iso_639_1': 'en', 'file_path': '/rfgabI22dfjG30GwD87pZ3v1pJQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1439}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/u2PufavhWhs598P66oYfmGSj6A4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/78SsIp2vSCwsXWoOMTcIydMl0ur.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cheLvF0GpLQsmC56L52t2hD4TMO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/w09DcbYm6YWno1H3OgCxUuNp2QL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7FmbPtk8yYu93HeOYQuiqKg81GO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/wvvpXMNB1ocUF8ef5ENhOhcvvmc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/nfDwAaCRwj5BLnkCitv0mgfjZAr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2880, 'iso_639_1': None, 'file_path': '/8CQOK1RyhUAZGUfiea0aAw3nCub.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.717, 'height': 2788, 'iso_639_1': None, 'file_path': '/2khhc03aoTG8nHtGvehEqvcFTDQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2880, 'iso_639_1': None, 'file_path': '/9DydKQbpAgsksnG3BvuVlV28VIs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/fUlEUhtWOuaojBaYhBXdpgBG3VJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/v1M9zqBq3JAF1Et6ltN2d2i1ZS0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oYuLEt3zVCKq57qu2F8dT7NIa6f.jpg', 'vote_average': 5.52, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/aBGVsKeDn5gtegkyajPGBHWev25.jpg', 'vote_average': 5.518, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'zh', 'file_path': '/mQw9lsrMGlWDHdigLoGvCqX4tz6.jpg', 'vote_average': 5.512, 'vote_count': 24, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/edv5CZvWj09upOsy2Y6IwDhK8bt.jpg', 'vote_average': 5.46, 'vote_count': 23, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/tXQvtRWfkUUnWJAn2tN3jERIUG.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ljsZTbVsrQSqZgWeep2B1QiDKuh.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lQEjWasu07JbQHdfFI5VnEUfId2.jpg', 'vote_average': 5.414, 'vote_count': 32, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/9e3Dz7aCANy5aRUQF745IlNloJ1.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': 'uk', 'file_path': '/r84x4x93LbZ2gozISTBYVeq0gLZ.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1067}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/xn0Kcg4e6p0mLxVS3nAWhNmW2Ni.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8IB2e4r4oVhHnANbnm7O3Tj6tF8.jpg', 'vote_average': 5.342, 'vote_count': 15, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xlaY2zyzMfkhk0HSC5VUwzoZPU1.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/5QHWgqaBxZI1eM5e3YhyKzY5o3z.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/w3tea0HZDYVwQVyjrWBoF5x0Ofs.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'de', 'file_path': '/t5WUY5ZSxwVIVExaMZmmIj88BKA.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cs', 'file_path': '/bgIt92V3IDysoAIcEfOo2ZK9PEv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'ja', 'file_path': '/qzb0slJerd5bQgJxteJ5oAmfp09.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.707, 'height': 1525, 'iso_639_1': 'bg', 'file_path': '/rxHM1Cyn0cpgF7l9DVA2m3SS5Zk.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1078}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'pl', 'file_path': '/aSY6QhgEeUYky0TMfAXjvRJj5bL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 720}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ta', 'file_path': '/paNKUnfHDVDWh4hifULoOdRVzP0.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1981, 'iso_639_1': 'he', 'file_path': '/2aQZWpZKHECecGkFKLcuWa0Cmus.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1321}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/84TynUqXvXJnYiQr8uYcdbTDDWY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/hEYPJruVOc3VBkVbEUbyVTZ2AXd.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/xMQpKxZzJog5DVMCjSTsD99AziI.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/ubj7fEmtNqxwtZtMk6wAIc0SCFJ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/frq4ygwcIMusECNv9rPBrvJwyxG.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2856, 'iso_639_1': 'ko', 'file_path': '/zTgjeblxSLSvomt6F6UYtpiD4n7.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1904}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/9Pfuay9ztGmoS3bt8LW2mfgGjHs.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/mJfTycNg8PxjvxzpnKnzAAG7RIP.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/2CkUNEqIRGAwOC5jiKcQgKFjw87.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9gk7adHYeDvHkCSEqAvQNLV5Uge.jpg', 'vote_average': 5.296, 'vote_count': 20, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2400, 'iso_639_1': 'fr', 'file_path': '/aej3LRUga5rhgkmRP6XMFw3ejbl.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 1600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gqgwNjwjSqGkOqkE2rppogenu4v.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/7SivRwOLuA6DR09zNJ9JIo14GyX.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/nPO8aNT4uGtDAY0bZZZACfP66Lo.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ja', 'file_path': '/jEsp30qRAFPAWMYFGWwK7f9ObST.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/4Kc9ij5DeAwexVwVoT0fGHWK5WM.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 1231, 'iso_639_1': 'ko', 'file_path': '/jSm8mzp7sucgL8NwINIoAmx4dS5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 826}, {'aspect_ratio': 0.671, 'height': 1749, 'iso_639_1': 'ko', 'file_path': '/anJ2PN3jfjv6nocW41Ikgqygcc6.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1173}, {'aspect_ratio': 0.671, 'height': 1231, 'iso_639_1': 'ko', 'file_path': '/dp7n2vb8bmhI2f3Fa0mkQnZnHyO.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 826}, {'aspect_ratio': 0.671, 'height': 2835, 'iso_639_1': 'ko', 'file_path': '/dVhP5LObWUYWwcHKufcdUabApII.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1902}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'hu', 'file_path': '/dUjeL2HBcOpQKATeu6gltO1CKVc.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 1971, 'iso_639_1': 'pt', 'file_path': '/ms1bJvwa4BJycBakQ7afcedGlwY.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1314}, {'aspect_ratio': 0.667, 'height': 1337, 'iso_639_1': 'pt', 'file_path': '/lFrnL8dxEOp6qVj54vyFLi0Qyw.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 892}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/vXyyn578tC5TonEUNmn49mwm4A0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/1G1DR6LxKVNKIAH1oPjp04EIsxr.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/bPYjum1fH24yU2f1exsq8nuHEG0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.698, 'height': 2835, 'iso_639_1': 'ko', 'file_path': '/4rHfaC6dthDRPO8SsrSTMgAgkdW.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1979}, {'aspect_ratio': 0.698, 'height': 2835, 'iso_639_1': 'ko', 'file_path': '/mKZVtEfdYqcCC8FnYnwO3rsgn2q.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1979}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'ru', 'file_path': '/b2jBc5P7vwnfBbLm8ZziNslFb9d.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/xgPGDEKkBrXhPaNmwIlf8e2RCMk.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/k3UoZhRHg6h2XYzwNAJJvGC2yev.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/lqkIBuRyD9mFF5tQ0gKZLfBY54a.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1000, 'iso_639_1': 'zh', 'file_path': '/agvve2rnVhH5Ybuovsqui2HkxC2.jpg', 'vote_average': 5.22, 'vote_count': 13, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/zt5kihG59UaOYyGcXnBz3HwQxXl.jpg', 'vote_average': 5.212, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/fL4CcbigFi4P0Gx1X76vbRjgg6c.jpg', 'vote_average': 5.198, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/1UgqxtiJNxRzPeqs9pztWBUJd7k.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eKkbXuGZ68YOkTs2sz8OYu7Y3hj.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/4VWZyyUTuOZGcamFWfdo9EccuQJ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/iViFPY2O3rSbK84zsw2kEUtmxVP.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/o1SB1gHCmEEURs8P6dfmSC9O3iu.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/67RLqAViz6v4ez5oTy01eVH57VC.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 2859, 'iso_639_1': 'de', 'file_path': '/eARwxzrwvayasGerlMgRH2rtILs.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/uvvH40CJ38pgqA97q2yurGVyycX.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.705, 'height': 780, 'iso_639_1': 'ja', 'file_path': '/llnw1ytJyplbttau3PWYo6P57Ma.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 550}, {'aspect_ratio': 0.67, 'height': 896, 'iso_639_1': 'th', 'file_path': '/uI1gJI93hpbP0L1OqjUQNwKHbq7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/ic8sEH971i01e9qs29795s9Sjr0.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 587}, {'aspect_ratio': 0.671, 'height': 1748, 'iso_639_1': 'ko', 'file_path': '/fB1AYIHXtZFp30khynZAx8pwCb2.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1173}, {'aspect_ratio': 0.667, 'height': 1875, 'iso_639_1': None, 'file_path': '/pMHZ5BPlB2FJWYVh8kpwPDMepUy.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1250}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/ida4t24BmQcVS3FUL4TY4uixoaU.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/A62DYEWb3dgRA2o4NNtuHciFJJi.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1748, 'iso_639_1': 'ko', 'file_path': '/d9ob4cNkH5vmyPppcrYIpIo6x8m.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1165}, {'aspect_ratio': 0.667, 'height': 2003, 'iso_639_1': 'es', 'file_path': '/iunQDLut0NRyEfsLeisnRDxzFEA.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1336}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'vi', 'file_path': '/eBtqGWtR5KUiNl6OXHLR3ri6nVm.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/efC6it8M158f76ym8BA7cHTlcBW.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'en', 'file_path': '/cHRXb7TUnfntX4XdGF63GNL3U4E.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iQUateaYbt0Zbjrl8gqaGlT56iG.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.672, 'height': 1041, 'iso_639_1': 'en', 'file_path': '/rq0UeJr9eoaAeEllw6WheF1HD9R.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 700}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/oiJOvzOcTi8g70d4bhaRVLEcQA8.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/g1z0zLD8tW94omZdM1NDg9Cb0L5.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/siwBgxiw39ox1eQ2GsTu49u7HNF.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1266, 'iso_639_1': 'uk', 'file_path': '/w7pIMKIKrkuzCAWCoUcV6H48krv.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 844}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/bmK3XsNFgAv1RfEV681KLLIKbbV.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/tLeqhlAKQicrzUoWqbTJH6Ac7Z0.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 675}, {'aspect_ratio': 0.707, 'height': 2481, 'iso_639_1': 'en', 'file_path': '/fJgkMpctcXdDo1aQz6LZ8mwuws8.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1754}, {'aspect_ratio': 0.664, 'height': 1247, 'iso_639_1': 'en', 'file_path': '/wGF3iLAkjDLvF2Ws1kcQI5VWGdv.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 828}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/kg03rABx8jwHNLnUhbTbhTGkoVH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/53rhALkaIDqkft2KRZO9ZaaRrB9.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1024, 'iso_639_1': 'en', 'file_path': '/4i1I0cvwYhUTVbU5Qe6HbD1audF.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 682}, {'aspect_ratio': 0.667, 'height': 2400, 'iso_639_1': 'en', 'file_path': '/3xxd3Ntf6dZfTQOG2edgUPx0CzD.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 1600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uoeYeDKCaxcjgZdal4r5UcQrSYD.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/pg4Q5CGD06jdkQQTi3Yz2TSzrU6.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/lCwO4czSKzL1LP4h85T4b8C0UWD.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'cn', 'file_path': '/w85Z9pG9qMtw6m9QuE6PvKygEh1.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1068, 'iso_639_1': 'en', 'file_path': '/jJKRz3f34UkncoZB7DdHJgNZFI0.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 712}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/tVmoPRtN7mMlTJLlhEZDOzqILpp.jpg', 'vote_average': 5.022, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/nJnRy3nywUceNwNZ3spYuIecIBG.jpg', 'vote_average': 5.022, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9egFcRMV4Z3ZdcaJAYoxmnbqZE7.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/nVTLDH8DCcCn4r4hixAYo6ESjyI.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hJmGoCN8DjH0yrw7XsLRFCL9VBJ.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xymM5aW6MDcH5AR9I3CamSegJd6.jpg', 'vote_average': 4.996, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/qZ0kJnOwX6Qo55vIYjicbtl8WlZ.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9nkrC15drTBc2ZWGg7T2x20MrEj.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/o8zlCwctVfRFHQYItVQgmf3mllz.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cfxBdqeRyuBnKa2axipmAFkQJPj.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/hyfpaJO6tSIHZNd9F9qoe9whJBA.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8S7couVqr7g4L48HQ7XD3jZkg5y.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/n9v7TUq3BrGlZRnGmdKVT5PDarg.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/klh1rwo3jpdvdRi2GVygmSoxWy1.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8bxMHkuEzRpIC1YeVhWJKBnj5qq.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bm1XEWLZfCZQEj77SlPcG3ZQaxd.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2963, 'iso_639_1': 'en', 'file_path': '/aC3kqu6Lqw8Rpg9c3spTTGvgOim.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/l9uiKYEmdd4cKFExymkDVeos1ED.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aQZOoAGDz7StBQVEA6hDiUGMMXA.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/p5NyT6SX3I6rjArOoxXl9U9fATf.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7futGyUOW7x0yGCHyLZvkciEeAB.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9Q7LAAkiLcgk5ohjlQPS0ocmWCe.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/d7nO6ezrtx9mkJIoaWN4QyFoloa.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/7l7GUXc4492LdNfusC3gSUKjSzk.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eM2Y0RN3mUwp40Nm9I22Slgzl4c.jpg', 'vote_average': 4.898, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oV5yEdlu1PodRNTyp8d2nvk2qOy.jpg', 'vote_average': 4.898, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1543, 'iso_639_1': 'zh', 'file_path': '/mVbiYFaGfi0YyYvQmUaObFzuvMj.jpg', 'vote_average': 4.714, 'vote_count': 16, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/jc45pxTMTuOlBilSItOejMAMH34.jpg', 'vote_average': 4.6, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1543, 'iso_639_1': 'zh', 'file_path': '/aGVZkgQVPFLAu2aVc5iwOywnskk.jpg', 'vote_average': 4.576, 'vote_count': 14, 'width': 1080}, {'aspect_ratio': 0.7, 'height': 1543, 'iso_639_1': 'zh', 'file_path': '/bseL9xvgcpp3KnYswS1rWmLPzJy.jpg', 'vote_average': 4.576, 'vote_count': 14, 'width': 1080}, {'aspect_ratio': 0.711, 'height': 1125, 'iso_639_1': 'zh', 'file_path': '/y242ckW8B10H24DrzpBAo5llXtp.jpg', 'vote_average': 4.552, 'vote_count': 12, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/jfnbkogB7iimhKYAcJDGsUHaW1b.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/3kB8ncO7iehDNQ2ERNcRnZCWiN3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/l46BsZPZ49J8oQZcOyP7pdlXkjs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/tHegx9JnXUHvIyViqZI2J9NJ2l9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/3VAhy6bMPqwaj13rzdonbDRQm5s.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/tokT0stOvqBigBpimusd4zmheI6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/9LohPHzsuILo2NUrf8nXudEiUcX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/2iTpJJlMgyPsprrovf9FTFjTa4g.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/6FE1uNqLmnjRX2W350nSO4drfuR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.706, 'height': 1000, 'iso_639_1': 'bg', 'file_path': '/dRNOQGwSZ35ByhRmKSkGMiW07Fd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 706}, {'aspect_ratio': 0.705, 'height': 1000, 'iso_639_1': 'bg', 'file_path': '/yJ2YdBfpwzrn0As12noouKt98BE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 705}, {'aspect_ratio': 0.693, 'height': 800, 'iso_639_1': 'el', 'file_path': '/ojCYOPJNUPGs9ZRrOkG08OXBQ9o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 554}, {'aspect_ratio': 0.711, 'height': 1125, 'iso_639_1': 'cn', 'file_path': '/eQmdFJJiTeFQCLMjf1gbi6euc3v.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.657, 'height': 1218, 'iso_639_1': 'cn', 'file_path': '/ssKmJjbt0JfXTFkSWcQ8t8o3GQL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.662, 'height': 1208, 'iso_639_1': 'cn', 'file_path': '/yw4pZVzVUKg5bjYUDHwXf5vHVvT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.66, 'height': 1212, 'iso_639_1': 'cn', 'file_path': '/bxccL5ak0yf26rBEdxGxKQQgQfs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.657, 'height': 1218, 'iso_639_1': 'cn', 'file_path': '/xvuafWsKv7QIzf9kqyQpnWEadZC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.697, 'height': 1200, 'iso_639_1': 'mo', 'file_path': '/RMG2IJAXRGYh1kT0r5tppM2v7P.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 836}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/wyMil0WQy0JhPVpWVfC6rRhKpTi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/qdqBcjf6hkimo5CvIToOVWweW5O.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1523, 'iso_639_1': None, 'file_path': '/8eWOfiFdhuW1Q4JiBA1qN9xa4DD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/z9iTcVx1SEAWjBFj36gSldWyGNz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/jkEx6jNxNjv0CFEJEyCpqfjXrOE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'hr', 'file_path': '/c28DpQIVrHX2py2RHM6S5pr6Wnd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'ru', 'file_path': '/qUcXimqo6p55r5D7gdYvKBeOMxB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/hzxHC3Q65MgpKsGxWKIT6I8wnxG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'pt', 'file_path': '/idHNmmHN7HRleTjwleWdMgU9IyC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/efvcvRgOAZgFC2hrPUa6YqrE1KG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.714, 'height': 1400, 'iso_639_1': 'pl', 'file_path': '/P4iP4Vgynjux22hH66oqDnrtWG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1868, 'iso_639_1': 'pl', 'file_path': '/rT8Qs7D4JLJYYy6gnD4hzZZLp3o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1260}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/gVhGjY9k7mUvsLn0ea2obchJXgk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/tKBvfN5zs7RDGEPvbLue6LZfcIy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': 'pt', 'file_path': '/b1DvgHXpVyuIEECJ5tM7cK1ydUK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/A2QSkPxjcMj4apEHO6Sz7aUCmUu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/ew7MmtIkLjhkYFKtN8dwKBBMzd0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/5MXQAlCa2npFrIbB7OjoquD4MG6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/jXE9uOtbE1BhnPgk5pioQ6aGEFy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/6DCq0lVZElOohBBYfUdLnc2wYmX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/tSHO3YQ6bdivbI5hLxuSgrPxbNR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/zxvAAPcJoNklMtM2XbgacvuGlel.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.665, 'height': 1245, 'iso_639_1': 'en', 'file_path': '/ny5ggIvfGixGZfn8nR4IzSROcGK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'fa', 'file_path': '/h7kgZg7Bk3fCmGkOD6vd9qoqdjC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uluMeKfYFVvfZlmHgFBXqbnHXE2.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 906, 'iso_639_1': 'en', 'file_path': '/eyDMENQZYq0APm8AypQT0DNOrwa.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 612}, {'aspect_ratio': 0.711, 'height': 1688, 'iso_639_1': 'fr', 'file_path': '/fTWzRx8TKAxj8EaNs0wZ17kiqCW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/qJ2tW6WMUDux911r6m7haRef0WH.jpg', 'vote_average': 5.504, 'vote_count': 48, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/pyNXnq8QBWoK3b37RS6C3axwUOy.jpg', 'vote_average': 5.708, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/8aQ048h92EvpPME4HsgEN4oJIxu.jpg', 'vote_average': 5.652, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/8QDQExnfNFOtabLDKqfDQuHDsIg.jpg', 'vote_average': 5.456, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1863, 'iso_639_1': 'en', 'file_path': '/2Pf0Dtw6P9CWshK6GYVXmmq9NFS.jpg', 'vote_average': 5.408, 'vote_count': 24, 'width': 1242}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xQPgyZOBhaz1GdCQIPf5A5VeFzO.jpg', 'vote_average': 5.394, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/hAf98uHIXMFzqNN5LX1vnouCShr.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/tSIH3DTA4oFQDhPaJgHxxQZoqHh.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/iWXaUWpWLdB4tu0mlVElTKboPgD.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/6pQMQQrnRWm2zweL5vWyyMHvAa6.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1038}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cs', 'file_path': '/zGfUVhyIhnCb44VKiPiw7p7pdI4.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/31ASyBd8PV0GtxnhvyL4JEAB87v.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2841, 'iso_639_1': 'ja', 'file_path': '/nftQJb9550PtYFXhmTs7XiN0QhR.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1894}, {'aspect_ratio': 0.667, 'height': 1338, 'iso_639_1': 'pt', 'file_path': '/iGZX91hIqM9Uu0KGhd4MUaJ0Rtm.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 892}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ja', 'file_path': '/j2aDrirI121LOg82NlmkjQk8a04.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/3KAtr9OX8Bq2FAvZtrjYcdUuBYp.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/wzJZ6tLRMwhStehrcjSyiVGnn3R.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.676, 'height': 1398, 'iso_639_1': 'uk', 'file_path': '/8W0SjK3gNHG4cD2pZhcL4Rvgkc8.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 945}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/7IPCEr7ifdH5CtU97QG7XgAAtOp.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/lch0ILTsm9uFqowVwVmIeRsMcdL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.708, 'height': 1028, 'iso_639_1': 'bg', 'file_path': '/m3N6ejIhoD160vgsOfRpBMguADg.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 728}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'pt', 'file_path': '/4HkwsmXp3uzcrNIPlNEYo3hMbL8.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'pt', 'file_path': '/pGq8oYx466sSukN3LUv0httsxQa.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/fCVD6ZPR7XyxsXZPJWOIp2VgF32.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/1fCoidUsB2xGzbAJr502Hm7Y2Yg.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/eMaH8xS0vXae1jm1Ry0S3yRBEhM.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'it', 'file_path': '/qIhsgno1mjbzUbs4H6DaRjhskAR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1500}, {'aspect_ratio': 0.699, 'height': 2841, 'iso_639_1': 'fr', 'file_path': '/pdLAyRqMEnL6pzkVgYwMS0a3fEm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1986}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/dxWaYQtgpLbycqUpHzkqqYkT5I3.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'vi', 'file_path': '/7EfSqviKvXwbiGhUjHyUBGVdoiW.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gHc2zbaIdc8l2e3aGCiIThgOQiz.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/wsOr8j0xoUwDfcY7k815rEJXgr1.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bIqPWFTrB15fna9010pLGfTiPuL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/uOIdtyKs6Jk0kSnMRQsWpxBnGcC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'vi', 'file_path': '/AabbWDWAwtxHxTJV3v8C9e67E2p.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/9ICUbdveP56jRoMMVkXSOr3ceyV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eP5NL7ZlGoW9tE9qnCdHpOLH1Ke.jpg', 'vote_average': 5.286, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/1PEFfYM4PV80dDqqO7jkCBdjbZa.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/sqj3UE4Rahv2NYFaxXYvXzqUz5L.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/vGYJRor3pCyjbaCpJKC39MpJhIT.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'tr', 'file_path': '/ggax1nyhiGIwbq1Ynk0otH2sD6.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/j10MzKeRM0LrfVgD6tHiO3OVOqU.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/uruzphNWfIo0MxygPDQ5dvlgEQh.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'en', 'file_path': '/5GTnnwpF1aj2kc91IogJHSn229K.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 960}, {'aspect_ratio': 0.675, 'height': 1333, 'iso_639_1': 'en', 'file_path': '/rqoWYzCuNdQewVfKw6H8dFfg4dd.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 900}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/5JSt5BraClSv0XgvDeTYM1FsFjG.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1300, 'iso_639_1': 'en', 'file_path': '/dxabgTYgwysyXP25lgc6L70IJJj.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 867}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/f6dNinWX8rBM79JXKcShkfSh2oA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1077}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/vLFCrzI3V4kbze877tP1H7TqppL.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/A6LnuOLkxOsi9xicfzNege4fjWA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/i9D9jRDaPKM9GpmJdy0a2yDO0B3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/shTcPSqtnQqddboWe5Mw7WAYxQh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 951}, {'aspect_ratio': 0.667, 'height': 1443, 'iso_639_1': 'en', 'file_path': '/d031gvt75HMZq9LxcMG381Hy9ko.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 962}, {'aspect_ratio': 0.666, 'height': 1001, 'iso_639_1': 'en', 'file_path': '/xynOH3rrt2X4hSe1YQgYAkBXfy.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 667}, {'aspect_ratio': 0.668, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/25cE7rTmSWVoRbBWTqIHAcvCtlK.jpg', 'vote_average': 5.244, 'vote_count': 21, 'width': 750}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/r9BQs8VaMziqG2pVD7mcS3ORCWd.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/pKKvCaL1TPTVtbI6EeliyND3api.jpg', 'vote_average': 5.206, 'vote_count': 26, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/z4XwvnDZSm40PCdg9vFJmo0W9ri.jpg', 'vote_average': 5.198, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/30bVZPX7ZRkoOhh7hCXAoDomDgQ.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1400, 'iso_639_1': 'hu', 'file_path': '/yfY6QdlQ6QQczjUaazFdKTVrxDr.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 933}, {'aspect_ratio': 0.7, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/bqFQKVRAs4rVRBiiHDUHWJIbzTk.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1038}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cFfhGHjxv7sWjXS4uABHJi9mvzW.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1013}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/c94GEWkz12pYfg9fO1weiN1ibU4.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/1QF5OFkYCOMmCCMSr7vC5A6DE5s.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/f4KUne3zM29fIq2Nnyn4e0j34mt.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/yjwJM3VcItwvkEDW6GklMrQNBhU.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.68, 'height': 1000, 'iso_639_1': 'he', 'file_path': '/csraeJmUm7GSXEoalvb83AFFq6W.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 680}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7MQT7G87WK7Y6ZeDB7c6mGRrzK9.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.715, 'height': 1181, 'iso_639_1': 'it', 'file_path': '/paIt2d08ZhrwltpmhkQYZiJXYCP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 844}, {'aspect_ratio': 0.704, 'height': 1450, 'iso_639_1': 'it', 'file_path': '/z9Otej9dIEYuPH6teXXu2I8Oh6V.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1021}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/2Ka2nOtSlwuFlsHtrtfHKMIjldC.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/kMq65QVRSL6YWpN5WQwLbaQjV3P.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'it', 'file_path': '/Ak8vHeUtTuBhLLB48iC1o8JjRnc.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/6IOvN7okabMadYJOznljdYq3cGV.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1383}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/z2E98ETb6PZ99VMqIC7PUEAeYDA.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 859, 'iso_639_1': 'en', 'file_path': '/bRZRXgW3UTUV1a19qGpGhm6W5uE.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 580}, {'aspect_ratio': 0.675, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/oOv23H19CiK1F2MTzyx76q7dGwk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 787}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/gN4qbFbuneR9CUXleYGQzomGUjW.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/axyvLjcRhH2IqFrPSdudJL5ohmh.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2932, 'iso_639_1': 'hu', 'file_path': '/wltraa6BO2g7OowPmUKuTUvIjHk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1955}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jsvX5vNggD0ObzHDXp2uUwC2Chs.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/8t7ceMgYm6dX0FA71yJ6UO0rNO.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/txSJ30aWZY9rDg9OuE2QpDJ7WwZ.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.742, 'height': 2096, 'iso_639_1': 'en', 'file_path': '/aArYQMWP5R6PwlFpSSawLLpYEvy.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1555}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/r05GcDOai2tlc5hASixe6BB4zpj.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/h2Q0Bjzb4rOulc0ekz6mH1FFaoI.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.706, 'height': 779, 'iso_639_1': 'ja', 'file_path': '/fh0VioO7JZfM6p1mOEsA0YA2xXC.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/lvNjH1zyN1w3FYkO8ZZJsICKpgN.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/tAgldVsdvZQ9GZuFMifjtl7kMTn.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.742, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/k6hExQBHOLPiGe0K5CBWrVaM3XK.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1187}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'zh', 'file_path': '/rKyMQvIGjBe80zyytNLXvGomWlZ.jpg', 'vote_average': 4.866, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.677, 'height': 1478, 'iso_639_1': 'ko', 'file_path': '/e1nMtpUTtaJGXbeZZ2ajaIOyTgU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.686, 'height': 1457, 'iso_639_1': 'ko', 'file_path': '/8E6MS99JaEZ9mNYZUupTe2nTeKY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.686, 'height': 1457, 'iso_639_1': 'ko', 'file_path': '/pV8U6MAtQBKcjcbq8zesh4Uhe6q.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.721, 'height': 950, 'iso_639_1': 'bg', 'file_path': '/qW85opMaI2Ln5Ea3KxBpeg6qjLG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 685}, {'aspect_ratio': 0.667, 'height': 1337, 'iso_639_1': 'pt', 'file_path': '/plGiCQxuksbGT3ClQDMLlUufo9K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 892}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/gKMDmGde8aAD8M6dvm6j7wciSbJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.715, 'height': 1119, 'iso_639_1': 'cn', 'file_path': '/6ZQsIxobvm7Z0yrtS9NSeRMxuFv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'cn', 'file_path': '/4s74Ob1e11tLDVL5FbCmfcKHm64.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/An3B1Vh3vEHJN1LZh8GwkbRmRn9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/9lPoG7vJOk3GRDIRC4rZyDVOGWE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/jDxcL8SYCgLHh1a1kiT1kA8y4A5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/zq8epazaprZpsI1HsqsBAHWHOBm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1193, 'iso_639_1': 'es', 'file_path': '/noYJ2sbKQE5384I9kB4h0k2YTlG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 795}, {'aspect_ratio': 0.75, 'height': 1654, 'iso_639_1': 'fr', 'file_path': '/utDBwHoh6lqBgNEwDlm5i40COYQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1240}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/3Z5y3P6CLweBgXazo5V2iebq28H.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fi', 'file_path': '/pacP7NdLG0F3EbOYd4CTvu1DB9x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/ghxS6itn1mGzejZb0SYiTo2SOMR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.697, 'height': 760, 'iso_639_1': 'ko', 'file_path': '/qxBQaS8bxhARdZu0feQO7dZPUIw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 530}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/dQ7saTbB4h7hPpAMPkCj7lPaSAQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1077}, {'aspect_ratio': 0.697, 'height': 1062, 'iso_639_1': 'ko', 'file_path': '/aabgm6CLRVUZ3EgnDYIBDD9RjH0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 740}, {'aspect_ratio': 0.75, 'height': 2560, 'iso_639_1': 'es', 'file_path': '/nZfPDfwBX4cLulKTIitPLsjobXd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/suA9dX1bvn528mDAiSHVzMgXpVr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'es', 'file_path': '/o8i8EDSWiwzTIiaMgyPnESKYIVd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/hZUSv4mCne1DP05ihoVDoh8Dg0W.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'pt', 'file_path': '/tnM9lt8QD8PseK7ED65Yt0fIZMd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1066}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/cswulqzPjSEaFF58pzOmiYpUfjq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1077}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/eWbIUAJchJjhkfncbKrmtUPCUrO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1077}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/zAQJ08Tw4DhYcpFCHoJ2wmVt6lA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/9pwp1Maj4c1lRl4QkyXEaktA22g.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 800, 'iso_639_1': 'el', 'file_path': '/bTOmCkefIK8YNhQNe3IOSueYGNZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 556}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/4Vv2UznWz86TY64m7KWO7yhVT5A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1296, 'iso_639_1': 'it', 'file_path': '/taZARyNlDUDw2qhDVqz2LpE8sy7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 864}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/zKw1XjlUrg6SThnelftIV4g0wUF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/u8InfsF7vwXyoSH8rgfDZYQzv3n.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cCCZ5lhbfvRvseWZHX8yOuSpRDJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'vi', 'file_path': '/pJAKIBOvsCc9dBhDDgIRGQGULRR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/a1UL3FTJDgQikYIebnMDhTPFVfm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'en', 'file_path': '/967Swdyk4pvSz3n4CpGBJiGVQFr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/m393i9D8M70Wu8Pc2bLOEILfIcn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1800}, {'aspect_ratio': 0.666, 'height': 1419, 'iso_639_1': 'uk', 'file_path': '/8eJ1cTMyQHk9FOYk1TAyJLR4eDF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 945}, {'aspect_ratio': 0.709, 'height': 2820, 'iso_639_1': 'uk', 'file_path': '/la1BpzspX6ZejdGFa4MRMhUAz2x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 2048, 'iso_639_1': 'cn', 'file_path': '/sjv42EQebn1nbKGx7vOquhfi5KO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1455}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/11Zx6SodSThTbMEVoQtxt11lckL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/t63vUEzIPnZXa5JYFFIK499O6Mr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bwQPehOhS14ePNRF4EBmN1GqSB1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/jQEN95EYetUtDGvpF4F78TVsRPF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.7, 'height': 900, 'iso_639_1': 'de', 'file_path': '/z1DfRQf2CgnROyhVZ6ch8FbWt71.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 630}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/8X41aAuDesg3ZUbxwoiYEIlkFUI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.724, 'height': 1382, 'iso_639_1': 'de', 'file_path': '/1M1Y77HhjJ5SgTc4IOdrkszi0nz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.722, 'height': 1385, 'iso_639_1': 'de', 'file_path': '/kaNc6kCjNMZx7kH7j7uXn4WQN8b.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.709, 'height': 1410, 'iso_639_1': 'de', 'file_path': '/vV2SS4fSc5qlvqHAB43t3A0mzOw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/2QeXdLNwrD5SufAWhszm4VzpwV6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/j0NNGfcbrYRKO8szyrJj4E2h03y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.672, 'height': 2197, 'iso_639_1': 'ro', 'file_path': '/bl3k5MKSmayH4bDAOWhESa9lFfi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1476}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ix8teqIt5kn6vJQQF5PukRaJGj4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gloStgr5JUbEYHX4tMJrvTfkGUq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cqjHJ7jQ0RDJCNZglISv1HDcpEr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1621, 'iso_639_1': 'en', 'file_path': '/l2Nxri5wXgaVQgpOiztMHWHxIsR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/kBMA1HLVQYG9RpcCH7FmtDOE78y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hr', 'file_path': '/xsWMuavHCm08R0NxmTff1g5Q9OU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gdhjkyfc85dIm9KYc7tzsFewJsB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/btIXVwMUHTlSq1XiEafPn1LSw6p.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.665, 'height': 1622, 'iso_639_1': 'en', 'file_path': '/kX7H27dYIHXt5UhPys64oEC0q5u.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1078}, {'aspect_ratio': 0.667, 'height': 1607, 'iso_639_1': 'en', 'file_path': '/nJO79lEYO9Ldz2Zjq0OJ1IGP941.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1072}, {'aspect_ratio': 0.667, 'height': 1607, 'iso_639_1': 'en', 'file_path': '/8zdR3dg39eU01sTnmoTO7aT4ZYa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1072}, {'aspect_ratio': 0.666, 'height': 1000, 'iso_639_1': None, 'file_path': '/rQ884232vYo3pbm0Ov1bCrMy6Zp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 666}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4MpN4kIEqUjW8OPtOQJXlTdHiJV.jpg', 'vote_average': 5.638, 'vote_count': 12, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/6yMWU1vWkOBbNRIwOxhetd2aHhO.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'cn', 'file_path': '/olxE3239oOQGaSShbWLJs1NQXBe.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 1500}, {'aspect_ratio': 0.671, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/1P3ZyEq02wcTMd3iE4ebtLvncvH.jpg', 'vote_average': 5.396, 'vote_count': 12, 'width': 754}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/lXRSRP5QMfrr9cSiupvcGDJW1Sa.jpg', 'vote_average': 5.392, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'uk', 'file_path': '/77NraO0uqhXOG0xqLz0nIuockDf.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/j8F9HJBcrRD3xevxf4NMF2IhQE2.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/s4I1JYIacFbi6amQYqRKB7ifrHx.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'tr', 'file_path': '/q7OK13aqXAwppQAF6yT6wZeKtc6.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'hu', 'file_path': '/2DkutTDxhB7173ItFi9cVDMFqUK.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/pqB8Xlu0QdwsONakoiKtortANdn.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/h8Qi8uIYAGh4lZ357ua6NNJ8Pui.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2000, 'iso_639_1': 'en', 'file_path': '/ezD8iZcSj9zQkIbBNpDZvdMxr8P.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1333}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b1V6Qp0xcNoxrpXu9tKhJ2PoYEW.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/3F2Rbu2DCC8Q7WGWqlsWI26Bw5P.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/54Jxp5zy190oQXqxcwBUPCVngTU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/e5F9ACInAM2802QxsBmmixyaXrU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/9nBRExEia2xF2nDzCZNtQUknZGD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/f1pQPzFmBXyFaScnrqeSm8lvCH9.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/AanMvzySJHlfIiScoU6edjNvIFH.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/fIfmG3EaIy3eqebyq7hXjl1ymQW.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gDpMT5nrgsuSAgX3NfRg2ZOsr0d.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/zBVNawbcB9z3cQw3uOvQ6dTLBS2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/sPX89Td70IDDjVr85jdSBb4rWGr.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.669, 'height': 1600, 'iso_639_1': None, 'file_path': '/8grKo5VUbtnnJWX5iQBhmKOQxHY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1070}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/vGKHM0WKkjt5KYKYr6dmX7RZfJZ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8pF4KoiRlXEf1MJCKTfZ5cyJz5l.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/A92FwaxylVAEC1g88ncRjPNupJE.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2184, 'iso_639_1': 'ja', 'file_path': '/mpdTFukLMNAALO2j0yfViyoI2TF.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1456}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/e8MB1d69fmzyonT6mz9iQs3rhw7.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oyjEePAoGmeyAkpLgloOfCB2ijG.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1545, 'iso_639_1': 'en', 'file_path': '/qLrkL9RUirxJkDW7KTTfrkNsL64.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1030}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8RW2runSEc34IwKN2D1aPcJd2UL.jpg', 'vote_average': 5.286, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rdXILMlfINsio98WbUFoXTXPz5S.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/h4QzFwldlUaEvJgVwumGTPOBA59.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/uheYLZ7KxfGolGOJr6nnKiNuQKh.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jrYbYRMRwCO7vNtTdoqNcgALwAi.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/taKcn26BMWnsUcMFSlr5RfGDtFB.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/3oOBjD1LZCjfrLPPL49xP9fFgeR.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1625, 'iso_639_1': 'es', 'file_path': '/xWufUAYvji3mgltweOd41kh3MRK.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1083}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/AdhhQHrgb9eWTcmBh7pThBzU0Ra.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/5Ml3AHO8D5Kil22e5FnDg8sgBn0.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/pQFtEAJC8QSs97rIYiKCmbxJseL.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 950}, {'aspect_ratio': 0.73, 'height': 1200, 'iso_639_1': 'ja', 'file_path': '/mx5zvtwTTWBwlNzBZCKvbcjJFIH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 876}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/48sBwODorRIoJjHFeDHttVU3XAF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/udMtQ5TQ0q856XqRyqQxE2F2wTB.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/oih8KKRAhnRtyU5kzKoSMaaLhQM.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/jHX4YIJtWFIteg7jIy5lZITP40C.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 1945, 'iso_639_1': 'ko', 'file_path': '/sb3V2fPhNDRRUvHJW4pQaeHbDxm.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1305}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/zKgfW9KhKmIQyjL6b2nVFOsyeZh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aBVr0YMCeAYVrtmEtt54DrtLZeq.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.683, 'height': 1464, 'iso_639_1': 'en', 'file_path': '/7hys0bs5xfxR9tu3G5InB0xDhat.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/gsKwOfUesyN0pZtag0ulh7bpxJX.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': 'ja', 'file_path': '/tqeP1OW2welQt6cVM9YwKOTU3z8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1068}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/8G6WFTx91CAQeVopRQtVCZDYpb1.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.669, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/8D2CZEClyq9H5zY0BaD9F2miS25.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1370}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/ziFjqY3ABYTJZ2kHMzjr3eeyMQZ.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iTFxTcAZtxvSrPV87IEnmnvyQGw.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/z9iIvDrc4A6WqBg3qzmfQmRFLwe.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'en', 'file_path': '/kb9pouNQIuXhBjPzt1VWawIrEFM.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 600}, {'aspect_ratio': 0.7, 'height': 1128, 'iso_639_1': 'pt', 'file_path': '/e22BN2rABXSkDS8RChni1E9VSvP.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 790}, {'aspect_ratio': 0.704, 'height': 1080, 'iso_639_1': 'bg', 'file_path': '/A5zTY0UJg0UcuzuXE51Lc21OhUI.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 760}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'fr', 'file_path': '/voA7jH8LIkPMlmtdYAp83z7bKiS.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.686, 'height': 1000, 'iso_639_1': 'ko', 'file_path': '/ur3wsVMVubcr9wiKP6oyEHJMF75.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 686}, {'aspect_ratio': 0.686, 'height': 1166, 'iso_639_1': 'ko', 'file_path': '/jCgGjUHt9Ut7nGibLS71ePCBnV.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.742, 'height': 2096, 'iso_639_1': 'en', 'file_path': '/1CvxVIiBT9XWN2WQZCm1bqIKchw.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1555}, {'aspect_ratio': 0.652, 'height': 781, 'iso_639_1': 'el', 'file_path': '/zQSuZTwBI81CiXUxxUKExcafnO9.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 509}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/oGby1unkAP5qH9I7AavC7QWtTNt.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9ghkbUgt5lAYzkL4DuehL2DHn4X.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1228, 'iso_639_1': 'es', 'file_path': '/2mRyNFKpRT37vAcZdHzBrCpmH51.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 818}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/k5Pq6DFqKZ6k6Q1kX5MarcugysV.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2886, 'iso_639_1': 'hu', 'file_path': '/vrwZ91I7j5QIrSm3TQEbadvA0sP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1924}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aGdng8Ic4ONpcepU3bVXPSLmNd3.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1223, 'iso_639_1': 'zh', 'file_path': '/VwksWozHDudb7i1XBQBYeEfxiP.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 815}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/uGGUIOwp1F3iSMB0ZyFZJ1Uorvy.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.742, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/3TAzUgbseHTVopZYIrPPeuRtxi1.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1187}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bY1SD4t8to0OJh3NBTan4kpMM7M.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'zh', 'file_path': '/jULqFuAvuikqjp870awMKXcfiXK.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'tr', 'file_path': '/d5CPMykx24J2FZ77Coun40mkRS.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 640}, {'aspect_ratio': 0.718, 'height': 1254, 'iso_639_1': 'zh', 'file_path': '/oarR8scEjqKmgbFAYHfUdpOP8Oz.jpg', 'vote_average': 4.882, 'vote_count': 8, 'width': 900}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/peVchL19Z1JJobkGOoWBfdGyUNP.jpg', 'vote_average': 4.81, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1950, 'iso_639_1': 'en', 'file_path': '/52xooeUA0yHufOpwzeEEuQA61LW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1300}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pl', 'file_path': '/cub46jQ4bLQYYbpbSL9Q24wofS2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 800, 'iso_639_1': 'en', 'file_path': '/ocEnq79nVKZbhKAllMVpxnbAQQ5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 534}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/66BlmYvDr92ZOJXWOLMfs55p5pD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 667}, {'aspect_ratio': 0.666, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/mrkFKMgjs1TWAXHVujASiBv0PTi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 666}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/v0ANxUnWwyfkf053ijLfu1nxi0K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1350, 'iso_639_1': 'hu', 'file_path': '/1Cfe1HTWMXUeaxLi3xF072Jkf0o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/1wVhoU0bBGhJYaiu5K8DrSCqDDY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.677, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/5v9MVHgHWjA1c6Rx2BlA2ty6SU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1083}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/rSZXvInOa94udX9F4hXSruyKm3u.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jZdal8sHUCJ9mMN9qQOniaxajFF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/eKdPunkhnw2y7KL5XRKqbhoowOd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/53lvq1hrL8NcFW1VXEhfXH0UmWt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.75, 'height': 2400, 'iso_639_1': 'en', 'file_path': '/ksFkFAevvjpyj6UYl7OZ8TKJ5FS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1800}, {'aspect_ratio': 0.704, 'height': 2162, 'iso_639_1': 'hu', 'file_path': '/6VtoPn1CBUEjugkkXZzD3R31PWG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1523}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/3HT2Dd9H97qF7f0MwTLpYlIVNi2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/njDm6YxpTM6eGWemXTXEIAl1QTg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'cn', 'file_path': '/eIxXgEJoPlnZKDXTVhZqayooGFe.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 825, 'iso_639_1': 'cn', 'file_path': '/heHTe9kEUtExNnLhlU1JdXjRdov.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/miHituxAvyTN1EiVd3ivHATPMuH.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/8BKhFMoI4nLdRcNsGa0917WpFcv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/uwUJyAVJecME2Za05MO3Os5NgMN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/1tmW4YcZbbnVXsdhOF5l1Vw4hrn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bqGfUxcgh0h2G0piN14kcUp1jtX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/8hQ30FJB9OSLeF3qDDS8dEuXavd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/bhbM9ubZ1ntgG6Nb7W2aSMMHUg2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.75, 'height': 800, 'iso_639_1': 'fr', 'file_path': '/dj3gMEPXmisUr0sAfQEqguL5CcG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'es', 'file_path': '/wn6M8RUu4aXAkm5CDYi925TjF5x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/o7RGTaHBMKbcoaBmVhalbxF9iyr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/kuq4rOo5xaeE4O9UrbmYePsnGk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 815, 'iso_639_1': 'en', 'file_path': '/lvH8MQw49D2y6YfdReuVimJ2M56.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.681, 'height': 999, 'iso_639_1': 'en', 'file_path': '/ilsnLZHdsfu3BBBxDNpTtD6AcUF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 680}, {'aspect_ratio': 0.711, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/mg3pPorXcQMxwKTCGyGgUlD3AGr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 533}, {'aspect_ratio': 0.661, 'height': 1180, 'iso_639_1': 'pl', 'file_path': '/r10xlLTZACGRPk3DdUFsMbKXC6S.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 780}, {'aspect_ratio': 0.676, 'height': 1332, 'iso_639_1': 'en', 'file_path': '/67rpL2zu7XbpfnUck4EDq5dJ0oq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.763, 'height': 1179, 'iso_639_1': 'pl', 'file_path': '/fVaJ6lIPG01GbRf6CiZVWLqdRWP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/aLcqG3KYjn7UcaP9RkwoDCCVtDM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/fqCX3kCbnIoo7e0WzoYnCJpjaiA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rcvFrSxNHleYiECFK5C9UTRo6pt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/5U3zBsuLdMobHmgsImRcz9v4zJo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/151LQXEVZNcEUnHrJ6zrmC4IrJY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/lZERCEFV7eEz4HhKEc8oAV3mILn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1610, 'iso_639_1': 'en', 'file_path': '/kF1LegAFVXVLpBuncjtA2vWU4te.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1073}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b8PrXkCXucjcpMDF6wTack7XLox.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/n4wda3f2nN5ZydGFyxgVDtpGZ1s.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1667, 'iso_639_1': 'uk', 'file_path': '/AkTECnZFMA9eiHhAGTFknHRCEru.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1111}, {'aspect_ratio': 0.71, 'height': 2048, 'iso_639_1': 'cn', 'file_path': '/gC0NNBDPMv9hCE3lFDlXpxRXutJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1455}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/jfZk3qhdEHpbhOgoe6LWiWQH1vw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b7Fu087b4lbgvD2Zkh9uuUzGvGW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/qJULvvrFj2jcQSW5CpBurl5F0GH.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'hu', 'file_path': '/2iLknZbwsuo2DU2XMwFustMv1Wc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1433}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/unbyPHlYp98fZXIycBs69iIqG7X.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/1wTXK636CyqDhvJ3AHcbTQdbqzA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'en', 'file_path': '/vpl0SgFYGJASU4X5otf4bXfN3CQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.669, 'height': 1238, 'iso_639_1': 'en', 'file_path': '/eVmnHzShdLNGN6WNIEwD9lAW0XL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.666, 'height': 1400, 'iso_639_1': 'de', 'file_path': '/b3UIToGx8JIpRqUTGkaoyaNLuU3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 933}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'de', 'file_path': '/bCS4nLmIb1Trem2XD1Gmv7QVCkq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.666, 'height': 1621, 'iso_639_1': 'en', 'file_path': '/roZDhuv0u5LOAbybq2lgQpSVOGY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7oj5A9xCVwSgocb9eQfoTEFQs0L.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ijKpiStjMetB43uxOAXpE8RAQR7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/f8dHlNWaxXLod6NQ5cSJmzwxvzp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oSAVoPnVgQmYnEN3e39aXjGicnd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6mp9FB58YtnvvluKr2uYntlOUA6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4wrnEENDwfqQqWw3iibW4TO7uz2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4vj4UFn2neMtq37tdiPNKizl3yZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.676, 'height': 1480, 'iso_639_1': 'en', 'file_path': '/oZ6USHIpL6A7r6JWDxodgguYVmb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/mao3SD11TSZW40HbM2Hbc3q6Cg8.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2325, 'iso_639_1': 'zh', 'file_path': '/aw5qvRlY31AixBLr5op0CIqCMdS.jpg', 'vote_average': 5.576, 'vote_count': 13, 'width': 1550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/tRNlZbgNCNOpLpbPEz5L8G8A0JN.jpg', 'vote_average': 5.516, 'vote_count': 14, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bdN3gXuIZYaJP7ftKK2sU0nPtEA.jpg', 'vote_average': 5.51, 'vote_count': 26, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gcphM7ZLxS5HPeCZgjZobfz907x.jpg', 'vote_average': 5.462, 'vote_count': 39, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/Ag2B2KHKQPukjH7WutmgnnSNurZ.jpg', 'vote_average': 5.406, 'vote_count': 22, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/37Fr7lY4QBHsuxlLJIfTNxW6nGW.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/a03qYIZM0zkEutN5JRZddTBmQqY.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/utdVHiRHQHKIMd11VHx1KOFdxFC.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/ti7W0gh3WyHnQGiBzZDMH7TpYtD.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'tr', 'file_path': '/wiSuje8hdVuwM0pvhtSFirCHmJF.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/bQNVJKVuSoyoa5iLvkesxRa8DH0.jpg', 'vote_average': 5.348, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/v5aGIxVprgv85Qa1XDbxYN2xpt6.jpg', 'vote_average': 5.342, 'vote_count': 15, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/pvSESD7ujxWZwtYDb9l57qE0ywq.jpg', 'vote_average': 5.33, 'vote_count': 9, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/9QxqZI7ssVzyKEBwdUvOt3AUWzA.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/lIl2CrnWohGrZSO9eyKRptxZ7Hs.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/nQP63IbCJ5B9O348h5FAAmGWanG.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1976}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/2ZOzyhoW08neG27DVySMCcq2emd.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/9yOIPXWQ9ttsZfzHvmcS7XiV8To.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'hu', 'file_path': '/rOa94QOq3wbqKBHjSqL0WtPPJm1.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1500}, {'aspect_ratio': 0.7, 'height': 1286, 'iso_639_1': 'ko', 'file_path': '/rwEc7SgXu7b5Yo8Co4CvSinF91v.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'ru', 'file_path': '/9jMvxh1Ib6BPnE0pprRcaNibKDO.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/6NHAZLR4AJhBAVU4qFzkucfyhVl.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 969, 'iso_639_1': 'sk', 'file_path': '/76lhZonZ0Fa2T8dq5tBtsV9yDCK.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 646}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/agcgaJ1ieNc972XWGBvsJkDxo08.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/qKnagY6ksIlZsbsUunXQCvbMk7K.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': None, 'file_path': '/8bLzqR9BuEUmVxficFYakJIQUan.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1067}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pvW6UoBZOp9IrMqpT5ha29snsDR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.703, 'height': 2185, 'iso_639_1': 'zh', 'file_path': '/3noVrrRbPU0iEcVhRRLGa7hnqY.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 1537}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/AdT50fOv8Sn7wnRMU4IUsLwy4CQ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'tr', 'file_path': '/29bgk0clNyU7xS6DkcgVFYos7yG.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'es', 'file_path': '/cibtd0x7yrEnbl2by7OnNY61bEM.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/9pJJXtw7j0nSs1TvBGPKYwQuId0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/syor3JlLzuzPkeheD2QHSYaJEQN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/rN2eGbRpbJw8ZFVDiQfDxsknirP.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/wx6gj3KKbnOsrGnwA6CyfXRrVF0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.75, 'height': 800, 'iso_639_1': 'fr', 'file_path': '/uuxtLLbfMVzWL4ythAgX87JinR3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/rHQWJ745h6vk9IzMN4NKBkxpYcR.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/4oanOpX1VAK62iU77RvOq3WcrzA.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 999, 'iso_639_1': 'ru', 'file_path': '/7bw2iBAdTu3fZoAKvZobbuMojMz.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 666}, {'aspect_ratio': 0.667, 'height': 1880, 'iso_639_1': 'pt', 'file_path': '/8wkZx4FbABuNyOFIb94DFDC3CcZ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1254}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/dKoKG8SyvDjOW3ZC4OO6mSza8xZ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 800}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'pt', 'file_path': '/9DQtfm51BsRQFVe5lOPNMY2w23O.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1880, 'iso_639_1': 'pt', 'file_path': '/qosQop2cGWG4WCtf1tbx98xXcDj.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1254}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/punmWKefqHUGo2f3dO3lpfRbOB2.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 869, 'iso_639_1': 'pt', 'file_path': '/89BhTcxt9s7daMsx44HLrH1yoYm.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 604}, {'aspect_ratio': 0.697, 'height': 750, 'iso_639_1': 'cs', 'file_path': '/j6bxCWwMpM44nwpbcosrE2fFNSr.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 523}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/xKsiJimxRa44FArhlfGHnylrT0i.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'hu', 'file_path': '/9cH4zoed31NY6xxgeMTzlzEvXaN.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/wtjVc3Yja1cTITPfgsXLgGy79MF.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 806, 'iso_639_1': 'en', 'file_path': '/rqLdxsUoGDWst28yXAmMIN1uVv6.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 564}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/A0eycgzccYk6VlpWF89L7ia2hNO.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/qTOHCFcgQH1NJZ0VI8KKuZxpd2s.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.668, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/bv15haKwQdMyGoVdnmP02MYE2bg.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 750}, {'aspect_ratio': 0.698, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/fAjOgo4NMGzqSfgvOzCBrU51hbb.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 838}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/tuLCSrXvRSXVlumY4e1TGb9zAc2.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.681, 'height': 1157, 'iso_639_1': 'zh', 'file_path': '/2SZAFZw6ITYtgRio3y5QDy2lvs0.jpg', 'vote_average': 4.774, 'vote_count': 10, 'width': 788}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ro', 'file_path': '/cNpg2TjWtsut8QUBqezkbHXQFgb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.716, 'height': 1051, 'iso_639_1': 'pt', 'file_path': '/7GyVI1QpkycimTgFPlrpUq3jqiT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 752}, {'aspect_ratio': 0.713, 'height': 800, 'iso_639_1': 'bg', 'file_path': '/h4SgwOskf3CIBlsEiZwVFDkB7Gy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 570}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/m624LrPxlbXkMZVyM9tyDkI8g0M.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/atJR8vClEvAU7MtB5hy4oxuf4RK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/zOwP4sWiVUffsbzQva742GL3ZXA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'ko', 'file_path': '/aE4PR92KPazsbZKEha06roRoXgv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.706, 'height': 779, 'iso_639_1': 'zh', 'file_path': '/dOdURWFzv6UGYK1tBzXsn9mY7oD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/ujX6Liubmg9cBdqZIm7MxYm6DvZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/jb4GtFklHbxTJ9u3zMgUvJ5dkeE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8zoy0oZ0CiCXleCsnQaPWVogAir.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/t72QYzBgFNVECrvln688z3Xf2aG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.678, 'height': 755, 'iso_639_1': 'en', 'file_path': '/u5sQzZtxe3VnWNZh8ExijDQG9yZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 512}, {'aspect_ratio': 0.684, 'height': 1280, 'iso_639_1': 'ru', 'file_path': '/yVyVqv7D6l2LpggHbwBkut7wHdw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 875}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'ru', 'file_path': '/jKFVa9Dq2lSc7VePdMs8ApZbGX4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'ru', 'file_path': '/tPAAA4p8NqKbkhIAxPz3MaAkjMA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/fqTQIMWqjHoHVQouignErrOy3Co.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': None, 'file_path': '/wsUt98RThQsNXbTY3OT5Fl2zYFa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': None, 'file_path': '/hGGmC4a3F9JYYQUM2ePz6lw4rj6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/dyXgxnqRdHPzoGXqwYKNnsJ7bgl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/yfUZxBmAdXF6DNQnBWSJqekOOJc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/mrwOUto3pCzo7EygRTjgZOJ60nk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 2585, 'iso_639_1': 'zh', 'file_path': '/mrf31ezhckXfkIUd0p8LHqksvbG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1836}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'en', 'file_path': '/cq5RVLOYxYWGkGI3FWGmoTYWheV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/riVXh3EimGO0y5dgQxEWPRy5Itg.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/t3oYtCqDue393e7uhDn5f8NBQRx.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/6Vwc5vgioIXUhLQGAqmp3uDDKJJ.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/eJ49J6QXrTJryC61p43NTAULms.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/74Tw91IVP3Q8AjfeNSqgfZ0FGWK.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/u8qp8FKo6sU7SUOER8guCd8LVsv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 771, 'iso_639_1': 'pl', 'file_path': '/dVppgIoMNu3NvK3GThHdXjqOHYD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 514}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'pt', 'file_path': '/7IKbG5NpqnT8UKP6bigmeQmmR2k.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 960}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/tptisxjbdI4LInxdjrU95DYCXnT.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gjHergpHMkxtgpSr8fTbasVmXDS.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/cwB0t4OHX1Pw1Umzc9jPgzalUpS.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eJ7Rg29Gf9OMBRJTx7S1MWkoIDy.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/6O3eA55DO3fHicwlAE3DaSrA5Uv.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gAP5xELKJrIdLjc20W7QUSD2q9Z.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.689, 'height': 1000, 'iso_639_1': 'ru', 'file_path': '/o9KCIyB81bxUIysFYa32tRmDLLa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 689}, {'aspect_ratio': 0.698, 'height': 1128, 'iso_639_1': 'ko', 'file_path': '/iUVqFNAsczEZDKMZ0WUwmijFXXi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 787}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'pl', 'file_path': '/xr5vqYTGDDNp1czYWS3FXDgTLgS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/6NyOWQ32k1uh6DOtwJQkc3Gsq0V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/yfvof5mHWcHI51d985ty8Md5Unz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'hu', 'file_path': '/xKbkg7hXd2sxjC4yog7wRsa0Htf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'de', 'file_path': '/eQ0fpkk2DSlMGWp3E4BzEqAxxD5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iwU4g5UynQRp5PSMR6gLIW84FdE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'fr', 'file_path': '/lHZXeG4sTkWREgkP7iJCWGJkPmp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/7pfpRJMkk7iy4pby2gnIX8dmPQc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1014, 'iso_639_1': 'uk', 'file_path': '/yWXumElnl9Ma5upfZ0lVXzJoSIZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 676}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/hpUFOvUg4QEBaYf17ptfBgftF1A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/wz3tHxlBIlVXrwdcxi4V6RgBDLQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/2QsdTyaPOEeH3Hs9IZ7wP4Q47KI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/zeZ2KBilr4i1weqDgaJMXwfszfB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2809, 'iso_639_1': 'en', 'file_path': '/iHFgXmnl8kI5Mj7M2FIgVNidh1K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1873}, {'aspect_ratio': 0.67, 'height': 1245, 'iso_639_1': None, 'file_path': '/lVEKzRlME0PzVhhsYIjSozUzOjG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 834}, {'aspect_ratio': 0.67, 'height': 1245, 'iso_639_1': 'en', 'file_path': '/meHgOaJw1qG4ghyOQpgcAEnGiYL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 834}, {'aspect_ratio': 0.755, 'height': 2415, 'iso_639_1': 'en', 'file_path': '/lgikX0J6y1HQwd2olhpAO6uFaRM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1824}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ydO1cCU9rNkSCMwYRAj0uAXh2jc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6r0kwSACT5ByguAtPOD2jEBX4Bk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8ex63HADjW4Aq0Yyi7I206fPD4w.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/poUximKxGghA1MgjN0DNUYTb8aK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'hu', 'file_path': '/sWBfP7vfft2EcmDet9wMVS1RgZt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/grgvwGEAUNurWDsIyTLeGSQkc5r.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/8y9yQAwWlWYVzLxz0spQRoKWh3T.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/z2im6qUwtDIn2KMiWoRg0dRIXIC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'fr', 'file_path': '/5mGl3dFFCzeTCG3otMmsjY71Bdm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/l95SOzLzZ9x9qY0EdBPYa6mnFDL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bctwBm75A0hCMIkRAv9hudqJgxU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/q9rKjv1XucoqDg6046hqvfuQInA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/pMs8nZuoLPrzL20dcS7cZM11ba9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2uTHwj5aHXiDlw8V99wzRrmTljD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/yuNs09hvpHVU1cBTCAk9zxsL2oW.jpg', 'vote_average': 5.576, 'vote_count': 13, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/nWtySDlffTfwAa0rSfq61o33ZXV.jpg', 'vote_average': 5.456, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/uprP8rtOgMYJQ2h3ldDFvGsaBgH.jpg', 'vote_average': 5.394, 'vote_count': 10, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/3jFQqn81xdYqNquQZtsu8PJBPiB.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/nzlv62aC0octS5AklAiWpXLX9Z0.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2234, 'iso_639_1': 'uk', 'file_path': '/j0W26SOwnorl6Kga9A90wCypjcr.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1490}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/adRNs1fR1ggpsUQejMvzRiyu7F2.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/rO9d5ES2v5h2xDDZzVWUfQwdZ42.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.707, 'height': 2000, 'iso_639_1': 'ko', 'file_path': '/vqxdADPdy0ZVJr8dMB3mh6C5Vsv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1414}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/tBS1gqYTGS31sM9vAGc5fKCAJTA.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/neHrQLVfT3KPqvv30pNPyRb6chQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/wqG9YXPBpDbC4NpV1Xc42BOm2hO.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/uSae85DR1D4uKknQIsHbuqO1RgN.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.671, 'height': 1414, 'iso_639_1': 'ko', 'file_path': '/pXLnKcUzbUZI8OwkznA8te5dOSt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 949}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/7leBWM27Q0TUnvmhw6WnFNgGn4G.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/fKTPH2WvH8nHTXeBYBVhawtRqtR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'ru', 'file_path': '/xILX5k6PvSeCQ0NFVjKQJKkiJr2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/iQmjFjtM4bf85KY3ToZTjJPNfx0.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.659, 'height': 1117, 'iso_639_1': 'en', 'file_path': '/exU1uUwNuF7EXy6G9nKVUJfGG4l.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 736}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/psE5eio91dVL1k5nTwPUNLp7Kuy.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2289, 'iso_639_1': 'uk', 'file_path': '/dH4wSoQx5Pn5Ig3lPediWEJvzzl.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1526}, {'aspect_ratio': 0.671, 'height': 1103, 'iso_639_1': 'ko', 'file_path': '/iWr4SwGJTF9Pamoeaan8tLgp0r5.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 740}, {'aspect_ratio': 0.671, 'height': 2828, 'iso_639_1': 'ko', 'file_path': '/ogpwO0trLk4Fc4eqgy5S4ShH3oJ.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1897}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/AoLzLn8Z5akd1zHfBcrIiF2MdPw.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1439, 'iso_639_1': 'uk', 'file_path': '/6BHA8tT4d4M5bpj45VCmehpaKyV.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 959}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/uCgVdMeAaGKNgXjkRoQEHuOOn6x.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1104, 'iso_639_1': 'es', 'file_path': '/5Pe6iiwZyExtIzeuk2Q5LNxLuHO.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 736}, {'aspect_ratio': 0.667, 'height': 1758, 'iso_639_1': 'uk', 'file_path': '/3PcEBIneICSp2Bct3eVDUztPkV6.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1172}, {'aspect_ratio': 0.708, 'height': 777, 'iso_639_1': 'ja', 'file_path': '/6ONkGH38ajR7uFvg5WX8SbkbfVP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'bg', 'file_path': '/d2dbk2s4Nnlw5FxJ4f0mues6kp3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/dCCsDcMeJFVOUN0mt9QYGHZDquq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oAvAkTk0cta7o1hB1WlmUYV8txT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/jEiaUHh062AlNNDdIIB6W7DMb1V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cNKT3GNCndTIHlzhEU8Ga6kMNEj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.703, 'height': 2268, 'iso_639_1': 'hu', 'file_path': '/orak5VWu5CPaty1XCzdYWnxtEEd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1594}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ytzQijCzGG8KDzHYri9nc0jyJdh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/nkmokS8g0GHjxdhmRNfYueYvUN5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/f3AKnpK3aFPwnjHTSRkviTkuobr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1800, 'iso_639_1': 'tr', 'file_path': '/31yNVJl968krAHy3f5nFB6kLl7i.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'de', 'file_path': '/qaXfDrZCdd3wix2XYor5HDDpFrT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'ru', 'file_path': '/tDDUPuvdCLjx4hwRYPHdZxt2uB4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'fr', 'file_path': '/2zjoduvmZzBWRPYti8pdBxr4tSt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/tLFV34gBCjuc55xFwFL7zyoCClK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pFj339q3hoXg0NYbo7BvnmdBRhK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.708, 'height': 2000, 'iso_639_1': 'uk', 'file_path': '/5ZbII3voM1KrQYgM76ZnnkBHXB4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1416}, {'aspect_ratio': 0.75, 'height': 1080, 'iso_639_1': 'fr', 'file_path': '/iJeqcL4vlz8u1emUeZzcBBdaLoy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 810}, {'aspect_ratio': 0.675, 'height': 1080, 'iso_639_1': 'ko', 'file_path': '/gaky2GoDZHmt1p3HwPYiiS7SOeC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 729}, {'aspect_ratio': 0.7, 'height': 750, 'iso_639_1': 'ko', 'file_path': '/60SUpn8uryJRorPOOwXYLfwNCDV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 525}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/bzu9nTQPO690uSYOOy7hXjK1vn5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ru', 'file_path': '/k34v0hBeMdVl41w47QKqZL3UH0Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/e8aNU97T9zggNstlyc922c1qOPA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/3bX6VVSMf0dvzk5pMT4ALG5A92d.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1605, 'iso_639_1': 'it', 'file_path': '/fmls6kOMCfKWrJaq43PLCWVr6ve.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1070}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/odvmwLXNfkE1JmvfVBraaMGbtQQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/r1pjXIXCwlFhtrEvPXxhw2wwqry.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/g5svlJvwpUpo8NeNzIGeBoctgTX.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8Ta8uxDusA18OsIb3ksLOH4qTxv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8uWjDveJ8bkhcolpwoMMDNDOkFL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/lK9LE5D67HNyPlhJcjKAgnRh0OO.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ob9dYT7cuEcVrjkQXajnIgQsXHt.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'en', 'file_path': '/eaIXDmrHIwYSXjSK0N6hcXM0gGx.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'en', 'file_path': '/5giub1nKK3sFRvZxmebe31scQOo.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 700}, {'aspect_ratio': 0.667, 'height': 1800, 'iso_639_1': 'en', 'file_path': '/ctqienHJX0uuQCIv7Qr0WvXshld.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 1605, 'iso_639_1': 'it', 'file_path': '/cfNxgChrQI4rQqcDtWx0XbUHIP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1070}, {'aspect_ratio': 0.667, 'height': 1575, 'iso_639_1': 'it', 'file_path': '/a3TkBxEd4gS4l9JAqMOnkChguv3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1050}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'ru', 'file_path': '/oiouMT6o8ss9Iro2Y1wS6As0IS0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'es', 'file_path': '/7EpzeTKziFdjMYMtcqtu9QYmSLu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9xKxkCc3aotmu7r8iQT5jvgMRMp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 2168, 'iso_639_1': 'hu', 'file_path': '/l7EEYEjW9je0VYqQKpWe5GQqKxO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1520}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pCti3dACGQQpvD0gQnG7pacZwAD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/iLYLgzHXAf6sJUjWBTF7gkFgvYZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'pt', 'file_path': '/g4PdSeyLwpspxd47miKPFBnv7yK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'uk', 'file_path': '/hSgNpJ92Vi4SmW915qb7wzSH8aP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.665, 'height': 1926, 'iso_639_1': 'en', 'file_path': '/aN4HPRZvaNawxmDs92HrEwV7LPl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'zh', 'file_path': '/rXHdIfyJ5ojQYsN2wPrmf9aIIyN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 1241, 'iso_639_1': 'en', 'file_path': '/rzgaiEqMSvSQJWwgk5phFQnlTIa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.667, 'height': 1065, 'iso_639_1': 'en', 'file_path': '/qrB8po1jncE4tK8t3UXV040NTVb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 710}, {'aspect_ratio': 0.672, 'height': 1282, 'iso_639_1': 'en', 'file_path': '/cXDFFv6yZNW3vUHOKKUPJNnL0So.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 861}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/mJGIjkALIOmj1TGv48l3qGvJQuy.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 500}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'en', 'file_path': '/7kSYGg6zrsXBsLvZnaNwoteiruv.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 600}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hr0L2aueqlP2BYUblTTjmtn0hw4.jpg', 'vote_average': 5.458, 'vote_count': 15, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/rcqIPCMhvYpreMHzMuHiezQqBK3.jpg', 'vote_average': 5.586, 'vote_count': 7, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/rrS7K8tXVFUBliIKWaRuSq65nWr.jpg', 'vote_average': 5.522, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/8JoNBc8AMLcTXbAURDJXXZpTo9j.jpg', 'vote_average': 5.522, 'vote_count': 6, 'width': 951}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/ApcGBERN0p9I0nDOIwJeEmpnLU5.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/8JCu1wi83pirpHEbVpmpfowDolX.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': 'ja', 'file_path': '/sJTxiMt4slbmTnQoV5UyA2HlYx4.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1068}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/85cWkCVftiVs0BVey6pxX8uNmLt.jpg', 'vote_average': 5.346, 'vote_count': 17, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2366, 'iso_639_1': 'en', 'file_path': '/bOizb8SnashwNbFCpwie5pmLi1m.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1577}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/ht5Jqka646AW8P3IsdrUPf8W8La.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ja', 'file_path': '/mQyK6KLWCwvrG8lBpfDWEWd6lK1.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/bfezKMcrzCIU4p72SljoZMjJUsW.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/9LfroB8zJD7HqP5hsxeDPHrzbw0.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/oWIhEWtHbSlvttp5qbBEutPOV7G.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/vvPsRFPzOMqnlzbFfxYR2EPqUeg.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/guMc9QD270iEVYLpEJiAndSyO7G.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/1Z07Kqke0JyOn3ODt2t3qd2CEpN.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/wUpqWb7YZW1Jz2oyF4UJgItYXDC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'el', 'file_path': '/mKq0xiEM0BoETIJ3Mrs4lc5Oamw.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/3viEo7Rt7swwh573wBCZffcM7eo.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/jtB2vPm7Drpw0AToSxKIcxjRcgC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 862, 'iso_639_1': 'tr', 'file_path': '/f1Lt6pJEb25LVEIodLxZDgIhTks.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 574}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/2NaeRiOuxkpWv8s0uBzSlp7SuCn.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gP3KJvuqZGwYEZ0BWXNadYAMFO3.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.75, 'height': 960, 'iso_639_1': None, 'file_path': '/jpoA8SXWQpCsEXDeXbK6xoKccWV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 720}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/c0GcUqVFuklMyuNJuag3NRpGZpu.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/eq5P71YHwwaacEYKaQ72Wxy6BlT.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rc1iRerRJIw3iStmlsdQIZUp49J.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/mBxOeqHQvdF5lxGtDUB6XVcJNi5.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/6XDLzDabcJpuURgilfSTX080lNZ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/ws4Hj54pdDsk2DdIEPDwZU8z5KT.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2366, 'iso_639_1': 'en', 'file_path': '/eTOmj92I7sLydsEXoHE4UPFjynG.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1577}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/tTiMHKsTeA30CXJS3byz2jG1MlR.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.686, 'height': 1311, 'iso_639_1': 'ko', 'file_path': '/stbZZs3WMPr9rvAT92Qd8gXCUfx.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 900}, {'aspect_ratio': 0.695, 'height': 1920, 'iso_639_1': 'ko', 'file_path': '/1EePZmyG7B1Gm9qubLWVtlICDiG.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1335}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/70fWwkCYjsHPhPRUF9OydhbEkVC.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/4Op2hWPNa5JygwbmLs1O1pDAm7L.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/fN0YkgaNUNR8Tf2d4MdpaHwREg8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/pi6mwFCtTDIAHOHWan4AQ36Tdh2.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oAletUf008Es7TQmWIZjjPTQw1R.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/3dboviWGRZdGHXVEKqCU6jq5BX3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 951}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/xwfcNOXVaaauEG6zX73ECq5Vj6k.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.667, 'height': 919, 'iso_639_1': 'en', 'file_path': '/j3U7vzNilUnu3E3zMgBaSSRhTqF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 613}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/ezAOlzdExzNXzmsTxQUTwo6F3gZ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/df17TKgMV104fbEIfPstCkAvBbe.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/s9oQj6ZzPDVeQctL8ZDVchtDquw.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/1u2GII8LtwIRWLyGTotC6AlIZL8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/u0HJjTs5ZQd7jL9QG4mVyUVYqQD.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/fp7cZ3ENxJmKBSA46XrkqGmSZdx.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/h9x3h93HG5iCjevWwUppofmkuwW.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/i6Wdrls4gsFXmwbC2MYmabHOWzn.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/wDnmRGxiA2lUgmxgoFtYdvvzYVN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/3eYugifQ739WRTuG6q5CumYpB6.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/tQnmavK2agVr1jz0CEnPa0hsYBp.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/8EF7hJ1lWRA7ngk1SR0TePbYD6n.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.667, 'height': 1515, 'iso_639_1': 'en', 'file_path': '/6Y3tH8PrZKr0Cv6KroaWlvMIlaU.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1010}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vzvKcPQ4o7TjWeGIn0aGC9FeVNu.jpg', 'vote_average': 5.206, 'vote_count': 9, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/hrJUZ5Jo2G3Czy391evhlxgbEdJ.jpg', 'vote_average': 5.206, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2215, 'iso_639_1': 'es', 'file_path': '/rOD0IgjAop4LA2vuimhNRLyGijf.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1477}, {'aspect_ratio': 0.667, 'height': 1074, 'iso_639_1': 'pt', 'file_path': '/zRwO5BPPgkTNo1PoomZPE7wkKvQ.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 716}, {'aspect_ratio': 0.668, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/irP27RDYv9JjF7fVPKYKUODhr0S.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 750}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'it', 'file_path': '/p2JzxFRAlbxS4EvWMo4yiYZXu1W.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'pt', 'file_path': '/d9EYFtoo4QJMCl5qWzS8zAblAlf.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/nIImGBHeBW90jAxCpp7RwGN2Mgk.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.659, 'height': 990, 'iso_639_1': 'en', 'file_path': '/v4FHdJCRg94cOKX9hwKU9aTad7k.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 652}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'it', 'file_path': '/tCQtssGTb74NQV198XaaTFOxywV.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/z5bRqRQv9UIieAuySQ82CTmtU6t.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/8AYfVmtQX0MgcaAMmowLkvQv47K.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/hg9rnax7IcerZOiOvi2oEshBt7f.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/mZrnY7zrfEqjJKJT8UFs03QlTpe.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'hu', 'file_path': '/tFB5SGE30So69tRz7mebiMSCFZ3.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1401}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/pU1DqL2OhZY8i1FLb74qYWMGASa.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1337, 'iso_639_1': 'pt', 'file_path': '/dqlxzH1DEIFTSYCv6HM0C1sxVB7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 892}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/nOI2Siljlsi0HbzVpcaP2zaI3qO.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.675, 'height': 1481, 'iso_639_1': 'en', 'file_path': '/lAFXWGCUAPSF6v671gaobbfz9mq.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/3opgrJowXttqeFgLRzIdHTLmdHI.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/jDheQYsH7fwtTon6354CWxLxnbc.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/gaivVSK2pOIOAWNGGKyMGpIAC2z.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hDni6zlvNgGW4Li3SIdzhsL54uI.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.684, 'height': 750, 'iso_639_1': 'en', 'file_path': '/A3omWIGbMcGTP43nbQBn75qHjei.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 513}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/6OApdDSChDhlNmi5L2NdL4fverK.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/211ixGjXqxXNe2yeYZTAG5sd4HU.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1434}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/iRpMKBjY1sXcRWL6monOQKBfzAJ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1434}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/je9RusBcFosNylhdRrweTkLkamx.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1433}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/a14jV8DjI5enrPMX3MIRxBoXoMP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1434}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/v1jB1xjTZpW5TYtLaHnagIErFsp.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1433}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/z4h5z2ultilQ4KaEhD2dSsYbqB.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.709, 'height': 2820, 'iso_639_1': 'uk', 'file_path': '/9gtc3GLDCeLZ9vhaq2e0PZQyGDo.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gegAwg4aVl3jpS3oi8sij7fpArL.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/lEeOaKZf16R1cZCuryP859SKgE7.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.742, 'height': 2096, 'iso_639_1': 'en', 'file_path': '/nYvQZLi9P7kmR3lmgkp5tujxiMP.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1555}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/uG4D95vfcZ3SQc7AMpvQCy2kfCT.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bZhj71lpvfAIkHUMdvgftD2h1bY.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.668, 'height': 1498, 'iso_639_1': 'en', 'file_path': '/kOKvBKLCiUx1yk8wVNvp3e1DBWt.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/s9ZLJz5haARLcLm8GGvAeTSslqc.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1999}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6Wkqvkg5EMaJMLuacz4sz8T9ijp.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/5xM2crlkyRwtbbfMQFb26A6NVmr.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/6YUrt0c9Q30UpUYskc0ppbO7DXH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/s6Kf3qHvRKjnZjyVj7YcbhTHrxi.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/zGoxNkACbex9VoAmJS6iAQvXoHs.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2366, 'iso_639_1': 'en', 'file_path': '/nQfJRcsHoEnPX0RY1oHJqQl2gI4.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1577}, {'aspect_ratio': 0.699, 'height': 1700, 'iso_639_1': 'it', 'file_path': '/h7go9xdRhf4fE7rkDzWe7eGUxR6.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1189}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oKXQPPmeAf4zMK5L9WzQuItTI9y.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vak0Hclk3ih11ljYdp6HPYZ1czh.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.676, 'height': 1183, 'iso_639_1': 'en', 'file_path': '/lNYltGAlgtyNmuGKHoX8iQAeit9.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/icpIopNi4fFtgxlcWeRDH5nZPG4.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'it', 'file_path': '/fA2hFBbo1Y8sSIUtUAkUn8UiICI.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 672}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/3gdTo4OmciK2nGFBtAazDpozP95.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4w4TQUzYmiz99Pg5OqjUt1TOEAe.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.655, 'height': 1648, 'iso_639_1': 'zh', 'file_path': '/bVnHnrojrIUMLnLDSSXi3krg4VJ.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1080}, {'aspect_ratio': 0.742, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/zInSl0P8Rk04mgAHz4E1xR1hmmH.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1187}, {'aspect_ratio': 0.692, 'height': 1228, 'iso_639_1': 'bg', 'file_path': '/vt3Jf9fzHKO2WYQNCQQTsXJcdCM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 850}, {'aspect_ratio': 0.693, 'height': 796, 'iso_639_1': 'he', 'file_path': '/y0I9F5u7yianHQuFYzy8xsR94q9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 552}, {'aspect_ratio': 0.667, 'height': 2011, 'iso_639_1': 'cs', 'file_path': '/guG09K0cxo9UJMBlbYRTwh2GylW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1341}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/poNBHaE54CXOtTjmAcnrb729pDQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/xbXzUM2cQoaHNUJrp6kOKFkf3LL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/8MhqFD41aixsEGKQAfycoH4RSR5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/osjIjyDc6le4lqqNZvq9d5qj0jC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/mhiwE3OIgeURZcAecAR1Ew6W2sQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/vXVked88FPWAqVJNX7qqFarBWMP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/i5BTtItJTaqGoZ0hEKlj5SzQOkh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.71, 'height': 1127, 'iso_639_1': 'cn', 'file_path': '/ghmlIwKMK1c0cQDmGH9fnIarQ0t.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'cn', 'file_path': '/zj7PZtHjCOOw1nZ5lARNL4CafaX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/rJFbUt5CVBxOzJkrmaEnGJtma5x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 2304, 'iso_639_1': 'ko', 'file_path': '/u3y3Ex9c69T4hRBZcIIPIrKUXsw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1602}, {'aspect_ratio': 0.75, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/7eNOyX67wrsmJpuFeVmjzVL9KWw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1125}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fi', 'file_path': '/aojNRY7yRJIQ51nkW2q0ApQ9vol.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/cKEM1ERV1lqVH83F95845FO8AW6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/rFiVxVt83lFU5e3UyUjePo8wKeR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.663, 'height': 754, 'iso_639_1': 'en', 'file_path': '/dAUwS3wmSrA9IH02xukDKxB6CQK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.705, 'height': 750, 'iso_639_1': 'en', 'file_path': '/4tkTHjYJ7UHRDLZc1gfQzmEj6Qo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 529}, {'aspect_ratio': 0.7, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/zzcwe9aqLY39rEwULxYmSfOlWuF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 525}, {'aspect_ratio': 0.705, 'height': 750, 'iso_639_1': 'en', 'file_path': '/taqB3T5bt7rgYPozK56GQfU3aBf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 529}, {'aspect_ratio': 0.675, 'height': 1280, 'iso_639_1': 'en', 'file_path': '/zhHWbDF0BdCSUoLmcQMHDqM8cBI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 864}, {'aspect_ratio': 0.724, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/mepdUhSur3MXxM8VCuMaJwLShFJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 543}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'it', 'file_path': '/pDc2SDH2ndElbg93aR2Id9eTgoJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/qVs4jjEngrT71XLclmmJKMr2h72.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/tTOiMCTNSZ1IbLF0GkhKsO5YUb6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/6doRIUrCTNjUEk2WzC3DU6QMG4U.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/bxdRr1isvADfem0j3W5ZwSG6fE6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xHzULcM3LKhw532adNt54SMfdmG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 2048, 'iso_639_1': 'cn', 'file_path': '/8murHJQyYQezDHm3CHn261Zw2zs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1455}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/vIZ4X0FTDNoxhlvGKwv17CEnpUo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iWsnznzdtlgMYBaftnLbu8i1wkg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/zlvv836AMk92uUUWIFY1DWeRUn4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.707, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bkbIkAPWoVsDFJK7ria2fOBFw1A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1061}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/eQ72Hdf6sKBOnzA1HWTx5jYeuzE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/1I0wbQjSg7M2sXj5M6rllkl8sET.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/uZ9i1ivL7rtqY6Z4FxgGkSnF4mZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'en', 'file_path': '/drfusGgi3MnZs7WQROzmWRdCIhf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.666, 'height': 1688, 'iso_639_1': 'en', 'file_path': '/8oKHBckmdhH4EVhH8CE0R2IxTrw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1125}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'en', 'file_path': '/5oZO16FhBzkZ1LcMKIlm92PQQsD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1280}, {'aspect_ratio': 0.666, 'height': 1920, 'iso_639_1': 'en', 'file_path': '/MaLLF6QmfoZvGy4RH3vQTu3eWD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1279}, {'aspect_ratio': 0.672, 'height': 2197, 'iso_639_1': 'ro', 'file_path': '/kGbx95vZRmJGv6yiwDs3GyvK5LF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1476}, {'aspect_ratio': 0.667, 'height': 2147, 'iso_639_1': 'ja', 'file_path': '/z6i9Qc7UMtiSX6TbK2BpfMrFWJN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1431}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'vi', 'file_path': '/1ua0jberyWnXlOQ9JXpVLTb9vjS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/d2ir64IkXExrdLgJXtbqNEduAhZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/1HQavodBAhgkLqr29PPt4Jy2ebF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/jg7vZUBlhF9I3JAGyOjLtPi8N7Q.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bhNfqgdaf8QuVvT75sLx26UzdpE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bcRK1ykUiB0PKGVIvjf0UTlamus.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vmwSCgBIkvJAKqmEPIByHqH4px0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zjlAlpz5HaUL9bZQGg4SYqH55Oo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/3AEGRu7g8U1dwvyvMQmpsQlzODD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hr', 'file_path': '/hPnKJDvliL2cOHFL8xPZ2BmcJ5a.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9wvNBOWpUpqAP4IquQWtNar77av.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1583, 'iso_639_1': 'en', 'file_path': '/eqFhruWEIRwjkvqgJN48VPuR50Q.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1055}, {'aspect_ratio': 0.667, 'height': 853, 'iso_639_1': None, 'file_path': '/geKOL5vnXoqTEH8D2qVoYGIkfys.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 569}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg', 'vote_average': 4.982, 'vote_count': 123, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ptpr0kGAckfQkJeJIt8st5dglvd.jpg', 'vote_average': 6.24, 'vote_count': 89, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/q2uyutja5fBQJ595oEAfticrcfU.jpg', 'vote_average': 5.88, 'vote_count': 124, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/e5H3wpl1t4EOzad9LpjJAhNPka4.jpg', 'vote_average': 5.79, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/boAUuJBeID7VNp4L7LNMQs8mfQS.jpg', 'vote_average': 5.586, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aqZ75oN6yd7UTShYIMNlpSdDbbH.jpg', 'vote_average': 5.568, 'vote_count': 70, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2y48XTa483LRFIb5fDKOwr8DHWz.jpg', 'vote_average': 5.5, 'vote_count': 68, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gC88YsrMe1sKCctzfnV955tcr6c.jpg', 'vote_average': 5.46, 'vote_count': 29, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/eHjIEiEKTnb9euehI7IbCxtGH5N.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/9AiHV08v8RyyuHcO5wuTaTXBxfe.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/4mHVnPcbOmycA5n3AKREsNho1tO.jpg', 'vote_average': 5.412, 'vote_count': 30, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1575, 'iso_639_1': 'zh', 'file_path': '/aGfEOxRPwp5lEeYfUU0cBpQ0k9K.jpg', 'vote_average': 5.412, 'vote_count': 30, 'width': 1050}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/55Mshyp5vXEyZYlGF9phGdR2gsG.jpg', 'vote_average': 5.398, 'vote_count': 14, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/a6v21Mgz2w6OQL7ezkQxGbGA92W.jpg', 'vote_average': 5.396, 'vote_count': 12, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/3yw39HIxi8bS3i0I75GygeOGVbL.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/ncKCQVXgk4BcQV6XbvesgZ2zLvZ.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/iAv3HAlrrIgjcf2yCFvedJzekXT.jpg', 'vote_average': 5.384, 'vote_count': 51, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/8OQzw8keE6sDNH25sOqPRTxhFTO.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/oPfQrmf2YgwSKKdaqDohtk0LciQ.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/c0DCmfC7Et2K3URnIJ4ahJpeXR2.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/rc2naqhwFHtl5xzut3KlUQKed9x.jpg', 'vote_average': 5.372, 'vote_count': 37, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aiFAq6HrEENrP2Hs9UCrjC9siVI.jpg', 'vote_average': 5.342, 'vote_count': 48, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1894, 'iso_639_1': 'es', 'file_path': '/8HCoPfguQ3u1QhiunBBJxHSy2K1.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 1263}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ar', 'file_path': '/fj4Sw2PihpjJkkeyhAWV5x933no.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2048, 'iso_639_1': 'tr', 'file_path': '/mmZi0tyPFfbcCqEsJIPxVldCPOL.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1364}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/oejIAXQupayIdy2H5FKXidNGj02.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'vi', 'file_path': '/ixLH2iM9at8BbuLr5wQWnCfwhJO.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ar', 'file_path': '/qsX1in0bR35lbtS0m9Sdaal02K4.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1284, 'iso_639_1': 'he', 'file_path': '/ywj717tJsdtMjD1iC4dCrSJAYTw.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 856}, {'aspect_ratio': 0.667, 'height': 1863, 'iso_639_1': 'ar', 'file_path': '/2AXxc5qrYsix01mD7uyy7PTMnQq.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1242}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/89fbqq5nnnzroLpD13T4TJ55Llf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2380, 'iso_639_1': 'cs', 'file_path': '/uwOo42nxRKeD5pyG2aREp0Dfu2a.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1587}, {'aspect_ratio': 0.667, 'height': 1941, 'iso_639_1': 'ar', 'file_path': '/95mVJrYVxxZX8y7IA9QJWw21Sxe.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1294}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'bg', 'file_path': '/ooOGz4YyBgp7EewnnpavQISCr25.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'kk', 'file_path': '/yyChRudT9X0C4234kvTSNsvXirf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2846, 'iso_639_1': 'ar', 'file_path': '/cEhBHpf1tyaYM4nMAd6PW9a3oZ3.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1896}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'el', 'file_path': '/efoCIdMmNgSdOlsNwovGxByjlOR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/3syYwwZbmk8xRhFKBYvbiY0B037.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/vkecMXHRfnQ2G3n3BBbRXlrsLbR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/joNffSkuJd4n4GlzDhmCJFwpDyC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/3sUflKm4wyhABAcgSxiB8zDJ3WJ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/5t05uhX5ULn8Um2f1ZuznVvIffU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/k1qmORaMZVfF5vQArYJD8PODapt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.708, 'height': 2542, 'iso_639_1': 'de', 'file_path': '/vrcpQICJZvIfhstaWhprHP2t1pJ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/fRtaxfyynWMJI6DhejyA6JOzVTB.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/jpD6z9fgNe7OqsHoDeAWQWoULde.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/8aL8aGfyKo3KsmLJXuuPZVCeQzB.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'pl', 'file_path': '/qefIXX7dwY8eKfMUcedn98HBMhb.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/dt9ODfEeCnHBZn0rRZMLwudeGAo.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/xtiPrwnOI7cMCXwWC32GQLiWRET.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/vTtUTK447f0OQWUYLEouDg8Yank.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/riSS1kglPxjrM4zxnMsCX6zDEqi.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/j4KO91h5R4jrXHu3yWw1xBnPmyG.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2976, 'iso_639_1': 'en', 'file_path': '/yg7B62JJbJrkBwiQrRf8vMDogLB.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1984}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/AvqMWPV1oyhlceU9Eq0LNRkSKe7.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1382}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'ko', 'file_path': '/kAYtsVpE7q6NhLz6vKYAxOM6LmN.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 947}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2j5oI4E5BRJkdU0UWaelNDo0iZZ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/649ruw8GkG4Ey5JDMXxJDLC6jfD.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bNoTicKwuf13iwqSmmGjjJAQac7.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/jvaI1gezzvhkKid00goKxz9fAso.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aEY57WJu84nUn0b9PknyVAPu3xX.jpg', 'vote_average': 5.248, 'vote_count': 82, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 3000, 'iso_639_1': None, 'file_path': '/47noGzgMSj01xFnpnVUhPeNMfb2.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1999}, {'aspect_ratio': 0.666, 'height': 2048, 'iso_639_1': 'tr', 'file_path': '/ga6K522LfGAlHoTaMbc0kESNn6O.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1364}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'ko', 'file_path': '/4ZLnVUfiCe3wX8Ut9eyujndpyvA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 947}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/ePpU7vi2awWZOzfiDGVRbdsKnde.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'fa', 'file_path': '/fjZv6ATsZxMGJDVC8KRATSnnoLH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1080}, {'aspect_ratio': 0.666, 'height': 1024, 'iso_639_1': 'ru', 'file_path': '/3ZsKFl9BX8bmOoGw2lVmVMHuqdh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 682}, {'aspect_ratio': 0.667, 'height': 2865, 'iso_639_1': 'ko', 'file_path': '/qxv1LPu17lzOZvOrhtQchU1foxy.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1910}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/aefB62fAcx2OxoaSWMEPt5ezvHQ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/wxcbunCEyKxbhuaTjZv91D4f0a5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/cZ7GfieJMbcDmb7HzXo32V8gBNT.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/PnXkWrMH4WHaqD3SjulfK9otmw.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/lrcuwcNiiZjoB68fzvSOPwu9JWv.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/dT00YQDn7wiH5OGO9DziqASAw4j.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/imYs1UAGvlXq0euT2Jee8PbmFWG.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/iCvn9DQkrD1gjizYR7UkOEO1QzQ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8ITnnLLlOB7XhZsj8WOhpICFX5i.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.679, 'height': 1236, 'iso_639_1': 'en', 'file_path': '/3iD4rpmdg82TajZ8fMvfykF7By0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 839}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'en', 'file_path': '/4tbvuLIzuEKfwsNFEhP3i3usCED.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/h2NqJnjixzVGaK0G8EVAtwO1Z8J.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/x2NrJAi1hqYnS5CSRtaqmldMfzW.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/8KBYRWm2EyHKli5quoIVDHCd6F8.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/9zwb8QIbAV2l8cSKHzFIAj1322A.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/7wYG2Rowz7TwOosomGBvuqLAfe5.jpg', 'vote_average': 5.186, 'vote_count': 20, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/5NyGSpXYgJ8ZG0At8URp4muckL0.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/9fZaYcdfuHLCWUYabdVzaZnLHFW.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/idq4eV7xRhEeI2JTOC2PmOjjhTk.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uXhV97FuB8OFt1pSEvIdf3Pnvgg.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ko', 'file_path': '/z3PjbQPksbnAwwzSfLnSph3ZJyA.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/barGT1G6ElVIdyFrOohQ0gtUp4F.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'es', 'file_path': '/lfPDe1GRL5sASJc3yf0YEPwiAmP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/j8zvODfD3ZKx1rizFN3Ai3kqX1O.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1350, 'iso_639_1': 'es', 'file_path': '/sCUySzcdrsHrGmvpkgsQ4bRMhvB.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1350, 'iso_639_1': 'es', 'file_path': '/5GbB0I4zSnc1HeLrErwSMcz31KP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 900}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'cs', 'file_path': '/xluNQVt0p3pXzLWLby0qH1NIeQu.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/jBthaXnKQzdpC2adZsN14KtFGdk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/xPtwGWt72dRDIRlpHgCMmriK1EG.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/umM0Bt8GOqpWhmVbdEY9fg0Op6K.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/5RfTJgNOA1UOysOHtVOXaJWvaCZ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/hjgOCeGIn56Y0syegaceC57k6gP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/25k4Bz7HaoLjOCnVZBz52IJDVQq.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.674, 'height': 1930, 'iso_639_1': 'fa', 'file_path': '/2UBFPLKt5YbYJMov4ToKAbX9dXQ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1300}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/vNcKXmUI4Hvn5VMvCpCWlnoQVz4.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/3bRQcScE7LhTrxAyETY4xHG76cb.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/pkxwlwcYfH1s66Ye2mO5ttOObOO.jpg', 'vote_average': 5.146, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.677, 'height': 2048, 'iso_639_1': 'zh', 'file_path': '/dvSCpCMcfBHqe5etXDDtFHe2Eld.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1387}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'zh', 'file_path': '/3PYDPnCq27g1juniyMvePYtfVSJ.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 947}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/wPYBGNV4KREkgZ4ELBZ2axd6NH6.jpg', 'vote_average': 5.114, 'vote_count': 41, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/eOOjas7U0O2QYvOh2vsN6krVWxX.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1999}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4qFBCufnzW1BubZjJoj1e5H4fhC.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/nu3oii71mRekR6beDNpiihd6GSL.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 799}, {'aspect_ratio': 0.666, 'height': 1178, 'iso_639_1': 'de', 'file_path': '/ePxV40QYOSZgrpBEZOmDtlQRR6g.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 785}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'de', 'file_path': '/9UYo2H6XTPUMpYiTxewsr4laxbz.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 640}, {'aspect_ratio': 0.75, 'height': 1350, 'iso_639_1': 'fr', 'file_path': '/3D9w3Vv1G1YxSdqwKnfiKDXuz1V.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 1012}, {'aspect_ratio': 0.666, 'height': 2560, 'iso_639_1': 'en', 'file_path': '/A5DGdsvMWIDgc75qXzDIX1ufLnh.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1706}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/mgjKNDzFINGvNFtHSqzfUZ4pk6Y.jpg', 'vote_average': 5.018, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ekfE5ChBWPGF5p3VWhrpKgLFYwa.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/t2GFUkjgEfynpmxqHf60cbIrj9Y.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gO6UfLfoOGnbmbrnbF3KMTNqfNC.jpg', 'vote_average': 5.006, 'vote_count': 17, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lTEyneX42noQDG8Cxc8DJvkUB6m.jpg', 'vote_average': 4.996, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/v6614PcDdocBAKYJMkfKaLSMVJA.jpg', 'vote_average': 4.992, 'vote_count': 24, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/3cKaEyoEUhxhnZG48dRG0iufPxs.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/4QCAm7J3nfjZygFQOuWace6ULPX.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7p4JCF9ptaE7Ptc9SLxTPv7QdfH.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/iJOJRVSdKGx3yYdbwfqCiAPHxfK.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2457, 'iso_639_1': 'zh', 'file_path': '/1eCxQQUEhMVS0nWOSD1SlVbGUWI.jpg', 'vote_average': 4.828, 'vote_count': 9, 'width': 1638}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/9Yg7DZE4ip2Yl0K2BUm6hAd8iRK.jpg', 'vote_average': 4.828, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.709, 'height': 2820, 'iso_639_1': 'uk', 'file_path': '/p81GFBwd9YaZnx6luJO5bJOqqHJ.jpg', 'vote_average': 4.81, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/wIAxpY365lKSlSXaM8BH7pB3y0M.jpg', 'vote_average': 4.6, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/mesnygQJfEJaWMA89rLk8VEZNj8.jpg', 'vote_average': 4.398, 'vote_count': 18, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/pyWvLGCaaI7N8U92BRLBNul2vuI.jpg', 'vote_average': 4.398, 'vote_count': 18, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/gF1XEP9gfE6og6s8MGvyFI4Muig.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/q7zrl3Kvu9E3t1ZCzm8w0lOaQW5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 2100, 'iso_639_1': 'th', 'file_path': '/xloEW5DQGqkR9i4EbJ0RXag3DIS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1399}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cn', 'file_path': '/or2wuvAbf2AG9MWylxPUisb85Ew.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'cs', 'file_path': '/uejpfeP1atdbdEea84cHFNKL24g.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 947}, {'aspect_ratio': 0.71, 'height': 1080, 'iso_639_1': 'cn', 'file_path': '/ObORCPqtaZgRhIvPnTTXGk5rAN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 767}, {'aspect_ratio': 0.666, 'height': 800, 'iso_639_1': 'th', 'file_path': '/ryW8AqLEt7viQZI40obvCVgKyEF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 533}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/guswIMwCLrDDrLfyiUBJJktmhBh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1351, 'iso_639_1': 'ar', 'file_path': '/y3I2XL5436scaaiQh5cfSXHEHnV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1587, 'iso_639_1': 'lt', 'file_path': '/tYFY9CkTy6yoaqTZTEu1IAtMBgT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1058}, {'aspect_ratio': 0.71, 'height': 1126, 'iso_639_1': 'cn', 'file_path': '/atkSaDwZEcINEaoL0JF25DDdcni.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aDIFDU7niNbIHUp5vdCsSxthpeW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1420, 'iso_639_1': 'ko', 'file_path': '/pb9giHGBgA4wbRREbbd8XL4XaN7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 947}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/akndvu1UcoMrEh4NQHXRLxGPTGg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/dW9C0FKB3HvwugUUtKXEXBFqcIL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2304, 'iso_639_1': 'en', 'file_path': '/t0uXoXeF9GMdviHgMW7UQzQ4eSG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1536}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/utCBEg4YNuZYaWSZaY13MXj1Z9G.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/m75xCRghGBAyXRKuiWbJvDPPGrS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2976, 'iso_639_1': 'en', 'file_path': '/eb6vkfY72J5gZhEnnRncsXSDftz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1984}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'nl', 'file_path': '/jtTHxuJhuZpFAnCI4vGjg1LGmpY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/qp595lmvI6UTWb1Gc8DD5SnLHnm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.739, 'height': 1623, 'iso_639_1': 'sk', 'file_path': '/gz0LUZClgzS6hCzurFk89e5G5d1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/aQxeSwWXB3NaRTiN1DRNHIxReAG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/1YX789imfZI5xaztsaqmtz6DVmX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/dRRjhIncQlg2Kak1oASyzGEtZ0t.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/kphZJTxd47ThurGYP01s67m8Dmt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1367, 'iso_639_1': 'en', 'file_path': '/6uq1c4QTytke0y2NWUsCpi0tISw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 911}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/bbYXxNaOAFtJjQnygqPKm13AC7a.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/hRJNOQBGkdU7K7DZTB9pGVYpfok.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.679, 'height': 1236, 'iso_639_1': 'en', 'file_path': '/j5GfnhEeBTl46SSc54CMDouRE7Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 839}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/kR32sxbb7wNK5pJLlwTido7RCAz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/x451yAdEA1OAnt5P2KVRgMoV5Ba.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 2702, 'iso_639_1': 'cn', 'file_path': '/cp7zu2Spi1hkkeI408Ebrhv4zc1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.701, 'height': 1152, 'iso_639_1': 'ru', 'file_path': '/lnxdR1XCdhV268bwOykdsRcUN1x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 808}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/hZcoR85iY5uDvzlSxAYTGvOLvV9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/mXOpcMOEruhz4BX3vXnIYe3rYDM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/udw0rc91ixvWneOwuEftXOfzF0x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cn', 'file_path': '/yef6p6pDg3YNk8I31wlQpotsaYa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/obAL7JCj46c7ogTt0PERbEYJlXn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/44ZIBFFkkVtBPtjdC2aPMH4YeYf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2842, 'iso_639_1': 'zh', 'file_path': '/5s3LUmU4G5ogVueGsWdbSTnMA0o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1895}, {'aspect_ratio': 0.675, 'height': 2963, 'iso_639_1': 'zh', 'file_path': '/6TgpVL16UT5ptzRrepVUaYjrg2Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/94UsD1QNU1f4tlkj8Ex3Jim4dj4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.707, 'height': 1527, 'iso_639_1': 'ja', 'file_path': '/1jLg9oKyMfQlcLtAUskZ5MDra5W.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/9cObSJoxDSVclz9OJzZiSUsYF4i.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1110, 'iso_639_1': None, 'file_path': '/iY1FDQM6taKwO7bG6YH09nE8NSs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 740}, {'aspect_ratio': 0.667, 'height': 2454, 'iso_639_1': None, 'file_path': '/7QjqXSW8pl2PCSaYSUHdO1qc0vh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1636}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/uL0iqPb4dtICVCCMKYem2yRPBRX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the movie ID for \"Titanic\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Extract the movie ID for \"Titanic\" from the search results\nif data_search_movie['total_results'] > 0:\n    movie_id = data_search_movie['results'][0]['id']\n\n    # Define the API endpoint to get the keywords for the movie\n    url_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n    response_keywords = requests.get(url_keywords, headers=headers)\n    data_keywords = response_keywords.json()\n\n    # Extract and print the keywords associated with the movie \"Titanic\"\n    if 'keywords' in data_keywords:\n        keywords = [keyword['name'] for keyword in data_keywords['keywords']]\n        print(keywords)\n    else:\n        print(\"Keywords not found for the movie Titanic.\")\nelse:\n    print(\"Movie Titanic not found.\")\n\n```",
        "executed": "['epic', 'ship', 'drowning', 'panic', 'shipwreck', 'evacuation', 'iceberg', 'titanic', 'forbidden love', 'ocean liner', 'based on true story', 'rich woman poor man', 'love', 'tragedy', 'tragic love', 'disaster', 'historical fiction', 'class differences', 'love affair', 'historical event', 'lifeboat', 'star crossed lovers', 'sinking ship', 'steerage', 'rich snob', 'disaster movie', '1910s', 'sunken ship']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "Give me a show that is currently on the air",
        "results": "```python\nimport requests\n\n# Define the API url to get the list of shows currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n# Define the parameters (if needed)\nparams = {\"page\": 1}\n# Assign the headers with bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse and print the response data\n    data = response.json()\n    tv_shows = data[\"results\"]\n    \n    for show in tv_shows:\n        print(show[\"name\"])\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "executed": "The Daily Show\nSturm der Liebe\nBinnelanders\nThe Kelly Clarkson Show\nGreat Minds\nThe Jennifer Hudson Show\nTomorrow Is Ours\nUlice\nChronicles of the Sun\nProst\u0159eno!\nLate Night with Seth Meyers\nAlla mot alla med Filip och Fredrik\nThe Late Show with Stephen Colbert\nHere it all begins\nUnpredictable Family\nLang Leve de Liefde\nBarbara Karlich \u2013 Talk um 4\nEl hormiguero\nSuidooster\nThe Third Marriage\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ]
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "results": "```python\nimport requests\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for Clint Eastwood\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\nparams_search_person = {\n    \"query\": \"Clint Eastwood\"\n}\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\nresult_search_person = response_search_person.json()\n\n# Extract person_id for Clint Eastwood\nclint_eastwood_id = result_search_person[\"results\"][0][\"id\"]\n\n# Step 2: Get the movie credits for Clint Eastwood\nurl_movie_credits = f\"https://api.themoviedb.org/3/person/{clint_eastwood_id}/movie_credits\"\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\nresult_movie_credits = response_movie_credits.json()\n\n# Extract the release date (latest movie) for Clint Eastwood\nlatest_movie_release_date = result_movie_credits[\"cast\"][0][\"release_date\"]\nprint(\"Clint Eastwood's latest movie is scheduled to be released on:\", latest_movie_release_date)\n```",
        "executed": "Clint Eastwood's latest movie is scheduled to be released on: 1997-02-14\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "results": "```python\nimport requests\n\n# Define the API url, in this case, we will search for the movie id of \"The Dark Knight\" first\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"api_key\": \"YOUR_API_KEY_HERE\",\n    \"query\": \"The Dark Knight\"\n}\n\n# Make a GET request to search for the movie\nresponse = requests.get(movie_search_url, params=params)\n\n# Extract the movie ID from the search results\nif response.status_code == 200:\n    movie_id = response.json()[\"results\"][0][\"id\"]\n\n    # Use the movie ID to get the reviews for that movie\n    movie_reviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n    params = {\n        \"api_key\": \"YOUR_API_KEY_HERE\",\n        \"page\": 1\n    }\n\n    # Make a GET request to get the reviews\n    response = requests.get(movie_reviews_url, headers=headers, params=params)\n\n    if response.status_code == 200:\n        reviews = response.json()[\"results\"]\n        for review in reviews:\n            print(f\"Author: {review['author']}\")\n            print(f\"Content: {review['content']}\")\n            print(\"----\")\n    else:\n        print(\"Failed to get movie reviews.\")\nelse:\n    print(\"Failed to find the movie ID for 'The Dark Knight' using the search API.\")\n```",
        "executed": "Failed to find the movie ID for 'The Dark Knight' using the search API.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for a person using the name 'Francis Ford Coppola'\nparams = {\n    \"query\": \"Francis Ford Coppola\",\n    \"include_adult\": False\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\nperson_results = response.json()['results']\n\nif person_results:\n    # Get the movies directed by Francis Ford Coppola\n    person_id = person_results[0]['id']\n    response = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\", headers=headers)\n    movie_credits = response.json()['crew']\n\n    if movie_credits:\n        # For simplicity, consider the first movie directed by Francis Ford Coppola\n        movie_id = movie_credits[0]['id']\n\n        # Get similar movies to the selected movie\n        params = {\n            \"page\": 1\n        }\n        response = requests.get(f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\", headers=headers, params=params)\n        similar_movies = response.json()['results']\n\n        # Print the title of similar movies\n        for movie in similar_movies:\n            print(movie['title'])\n    else:\n        print(\"No movie credits found.\")\nelse:\n    print(\"Person not found.\")\n```",
        "executed": "John Rabe\nThe Jane Austen Book Club\nOnly Human\nThe Woman in Red\nThe Family Man\nKiss of Life\nHidden Track\nAlexandria\nDIYU \u5730\u7344\nBambi\nThe Match Factory Girl\nLowlands\nMouth to Mouth\nA Life Less Ordinary\nKhadak\nDesperately Seeking Susan\nKika\nNathalie Granger\nThe Lost Honor of Katharina Blum\nCharles and Lucie\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "results": "```python\nimport requests\n\n# Headers to access the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API URL to get the latest movie\nlatest_movie_url = \"https://api.themoviedb.org/3/movie/latest\"\n\n# Make the API request\nresponse = requests.get(latest_movie_url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the lead actor name from the response\n    latest_movie_data = response.json()\n    if 'cast' in latest_movie_data:\n        lead_actor = latest_movie_data['cast'][0]['name']\n        print(\"The lead actor in the latest released movie is:\", lead_actor)\n    else:\n        print(\"Lead actor data not found.\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "executed": "Lead actor data not found.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the API url to get a list of movies currently playing in theaters\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the first movie result from the response\n    movie_info = response.json()[\"results\"][0]\n\n    # Get the movie ID\n    movie_id = movie_info[\"id\"]\n\n    # Define the API url to get images of the movie by ID\n    images_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n\n    # Send a GET request to the images API\n    images_response = requests.get(images_url, headers=headers)\n\n    # Check if the request was successful\n    if images_response.status_code == 200:\n        # Get the first backdrop image of the movie\n        image_path = images_response.json()[\"backdrops\"][0][\"file_path\"]\n        image_url = f\"https://image.tmdb.org/t/p/original{image_path}\"\n\n        print(f\"Image URL of the movie currently playing in theaters: {image_url}\")\n    else:\n        print(\"Error in fetching images\")\nelse:\n    print(\"Error in fetching movie details\")\n```",
        "executed": "Image URL of the movie currently playing in theaters: https://image.tmdb.org/t/p/original/4woSOUD0equAYzvwhWBHIJDCM88.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n# Define the API parameters\nparams = {\n    \"page\": 1,  # Page number\n    \"region\": \"US\"  # Region code\n}\n# Include the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie_id of the most popular movie\n    most_popular_movie_id = response.json()[\"results\"][0][\"id\"]\n\n    # Define the API endpoint for getting keywords of a movie\n    keywords_url = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\n    \n    # Make a request to get the keywords of the most popular movie\n    keywords_response = requests.get(keywords_url, headers=headers)\n    \n    # Check if the request was successful\n    if keywords_response.status_code == 200:\n        # Get the keywords of the most popular movie\n        keywords = keywords_response.json()[\"keywords\"]\n        \n        print(\"Most popular movie keywords:\")\n        for keyword in keywords:\n            print(keyword[\"name\"])\n    else:\n        print(\"Failed to get keywords for the most popular movie.\")\nelse:\n    print(\"Failed to get the most popular movie.\")\n\n```",
        "executed": "Most popular movie keywords:\nocean\nbodyguard\nrescue mission\nchildhood trauma\nshark\nairplane trip\nsharks\nair crash\nsurvivor\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Define the parameters for the request\nparams = {\n    \"page\": 1,  # Get the first page\n    \"region\": \"US\"  # Specify the region (ISO 3166-1 code)\n}\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the JSON response\ndata = response.json()\n\n# Get the movie id of the most popular movie\nmost_popular_movie_id = data['results'][0]['id']\n\n# Use the movie id to call the keywords API\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\nkeywords_response = requests.get(keywords_url, headers=headers)\n\n# Get the keywords of the most popular movie\nkeywords_data = keywords_response.json()\nkeywords = [keyword['name'] for keyword in keywords_data['keywords']]\nprint(keywords)\n```",
        "executed": "['ocean', 'bodyguard', 'rescue mission', 'childhood trauma', 'shark', 'airplane trip', 'sharks', 'air crash', 'survivor']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "results": "```python\nimport requests\n\n# Define the API url to search for the movie Titanic\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Parameters for searching the movie Titanic\nparams_search_movie = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\n\n# Make the HTTP request to search for the movie Titanic\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie ID for Titanic\nif data_search_movie[\"total_results\"] > 0:\n    movie_id_titanic = data_search_movie[\"results\"][0][\"id\"]\nelse:\n    print(\"Titanic movie not found.\")\n    exit()\n\n# Define the API url to get the cast and crew for the movie Titanic\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id_titanic}/credits\"\n\n# Make the HTTP request to get the cast and crew for the movie Titanic\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Get the cast members for the movie Titanic\ncast_members = data_movie_credits[\"cast\"]\n\n# Extract the names of the cast members\ncast_names = [member[\"name\"] for member in cast_members]\n\n# Print the list of cast members who starred in the movie Titanic\nprint(\"Cast members of Titanic:\")\nfor name in cast_names:\n    print(name)\n```",
        "executed": "Cast members of Titanic:\nLeonardo DiCaprio\nKate Winslet\nBilly Zane\nKathy Bates\nFrances Fisher\nGloria Stuart\nVictor Garber\nBill Paxton\nBernard Hill\nDavid Warner\nJonathan Hyde\nLewis Abernathy\nSuzy Amis\nNicholas Cascone\nDanny Nucci\nJason Barry\nLew Palter\nEric Braeden\nEwan Stewart\nBernard Fox\nIoan Gruffudd\nJonny Phillips\nEdward Fletcher\nScott G. Anderson\nMartin East\nGregory Cooke\nAlexandrea Owens\nSeth Adkins\nMichael Ensign\nAnatoly M. Sagalevitch\nMartin Hub\nMark Lindsay Chapman\nRichard Graham\nPaul Brightwell\nCraig Kelly\nRon Donachie\nCharlotte Chatton\nFannie Brett\nJenette Goldstein\nCamilla Overbye Roos\nLinda Kerns\nAmy Gaipa\nMartin Jarvis\nRosalind Ayres\nRochelle Rose\nJonathan Evans-Jones\nRocky Taylor\nLiam Tuohy\nSimon Crane\nJames Lancaster\nElsa Raven\nReece P. Thompson III\nLaramie Landis\nMark Rafael Truitt\nJohn Walcutt\nTerry Forrestal\nDerek Lea\nRichard Ashton\nSean Nepita\nBrendan Connolly\nDavid Cronnelly\nGarth Wilton\nRichard Fox\nNick Meaney\nKevin Owers\nMark Capri\nMarc Cass\nPaul Herbert\nEmmett James\nChris Byrne\nOliver Page\nJames Garrett\nErik Holland\nJari Kinnunen\nAnders Falk\nBarry Dennen\nVern Urich\nRebecca Klingler\nTricia O'Neil\nKathleen S. Dunn\nRomeo Francis\nMandana Marino\nVan Ling\nBj\u00f8rn Olsen\nDan Pettersson\nShay Duffin\nGreg Ellis\nDiana Morgan\nKris Andersson\nBobbie Bates\nAaron James Cash\nAnne Fletcher\nEdmond Alan Forsyth\nAndie Hicks\nScott Hislop\nStan Mazin\nLisa Ratzin\nJulene Renee\nBrian Walsh\nAlexandra Boyd\nJames Cameron\nMike Butters\nBruno Campolo\nKevin De La Noy\nTony Kenny\nSean Lawlor\nDon Lynch\nJohnny Martin\nRyan McClurkin\nMeghan McLeod\nMike O'Neal\nPhil Parlapiano\nSteven Quale\nR. Gern Trowbridge\nOlivia Rosewood\nJohn Slade\nBrian McDermott\nBret Aaron Knower\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "results": "```python\nimport requests\n\n# API url to get the company details by id\nurl = \"https://api.themoviedb.org/3/company/4\"  # 4 is the company_id for Paramount Pictures\n\n# HTTP headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the logo_path for Paramount Pictures\n    company_data = response.json()\n    logo_path = company_data[\"logo_path\"]\n    \n    print(\"Logo path for Paramount Pictures:\")\n    print(logo_path)\nelse:\n    print(\"Failed to fetch logo information for Paramount Pictures.\")\n```",
        "executed": "Logo path for Paramount Pictures:\n/gz66EfNoYPqHTYI4q9UEN4CbHRc.png\n",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for companies with the query \"universal pictures\"\nurl_search_company = \"https://api.themoviedb.org/3/search/company\"\nparams_search_company = {\n    \"query\": \"universal pictures\",\n    \"page\": 1\n}\n\nresponse_search_company = requests.get(url_search_company, headers=headers, params=params_search_company)\ndata_search_company = response_search_company.json()\n\n# Get the details of the first company found\nif data_search_company['total_results'] > 0:\n    company_id = data_search_company['results'][0]['id']\n    \n    # Get the company details by ID\n    url_company_details = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    response_company_details = requests.get(url_company_details, headers=headers)\n    data_company_details = response_company_details.json()\n    \n    # Extract the headquarters location\n    headquarters_location = data_company_details['headquarters']\n    print(f\"The headquarters location of Universal Pictures is: {headquarters_location}\")\nelse:\n    print(\"Universal Pictures company not found.\")\n```",
        "executed": "The headquarters location of Universal Pictures is: Universal City, California\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "results": "```python\nimport requests\n\n# Set the API url for searching a movie\nurl = \"https://api.themoviedb.org/3/search/movie\"\nmovie_name = \"Titanic\"\n\n# Define the parameters for the search query\nparams = {\n    \"query\": movie_name,\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Make a GET request to search for the movie\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results from the response\n    results = response.json()[\"results\"]\n    \n    # Check if there are any results\n    if results:\n        # Get the first movie in the results (assuming it is the correct movie)\n        first_movie = results[0]\n        movie_id = first_movie[\"id\"]\n        \n        # Now we get the release dates for the movie using the movie_id\n        release_dates_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n        release_dates_response = requests.get(release_dates_url, headers=headers)\n        \n        if release_dates_response.status_code == 200:\n            # Get the results from the response\n            release_dates = release_dates_response.json()[\"results\"]\n            \n            # Find the release date for the movie\n            for release_date in release_dates:\n                if release_date[\"iso_3166_1\"] == \"US\":\n                    formatted_release_date = release_date[\"release_dates\"][0][\"release_date\"]\n                    print(f\"The movie '{movie_name}' was released on: {formatted_release_date}\")\n                    break\n        else:\n            print(\"Unable to retrieve release dates for the movie.\")\n    else:\n        print(f\"No movie found with the name '{movie_name}'.\")\nelse:\n    print(\"Failed to search for the movie.\")\n```",
        "executed": "The movie 'Titanic' was released on: 1997-12-14T00:00:00.000Z\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for Star Wars collection\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Step 2: Get details of the first collection found\nif search_results['total_results'] > 0:\n    collection_id = search_results['results'][0]['id']\n\n    collection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    collection_details_response = requests.get(collection_details_url, headers=headers)\n    collection_details = collection_details_response.json()\n\n    # Step 3: Get the cast of the first movie in the collection\n    if len(collection_details['parts']) > 0:\n        first_movie_cast_url = f\"https://api.themoviedb.org/3/movie/{collection_details['parts'][0]['id']}/credits\"\n        first_movie_cast_response = requests.get(first_movie_cast_url, headers=headers)\n        first_movie_cast = first_movie_cast_response.json()\n\n        # Extract cast names\n        cast_names = [actor['name'] for actor in first_movie_cast['cast']]\n        print(cast_names)\n    else:\n        print(\"No movie found in the collection\")\nelse:\n    print(\"Star Wars collection not found\")\n```",
        "executed": "['Mark Hamill', 'Harrison Ford', 'Carrie Fisher', 'Peter Cushing', 'Alec Guinness', 'Anthony Daniels', 'Kenny Baker', 'Peter Mayhew', 'David Prowse', 'James Earl Jones', 'Phil Brown', 'Shelagh Fraser', 'Jack Purvis', 'Alex McCrindle', 'Eddie Byrne', 'Drewe Henley', 'Denis Lawson', 'Garrick Hagon', 'Jack Klaff', 'William Hootkins', 'Angus MacInnes', 'Jeremy Sinden', 'Graham Ashley', 'Don Henderson', 'Richard LeParmentier', 'Leslie Schofield', 'Michael Leader', 'David Ankrum', 'Scott Beach', 'Lightning Bear', 'Jon Berg', 'Doug Beswick', 'Paul Blake', 'Janice Burchette', 'Ted Burnett', 'John Chapman', 'Gilda Cohen', 'Tim Condren', 'Barry Copping', 'Alfie Curtis', 'Robert Davies', 'Maria De Aragon', 'Robert A. Denham', 'Frazer Diamond', 'Peter Diamond', 'Warwick Diamond', 'Sadie Eden', 'Kim Falkinburg', 'Harry Fielder', 'Ted Gagliano', 'Salo Gardner', 'Steve Gawley', 'Barry Gnome', 'Rusty Goffe', 'Isaac Grand', 'Reg Harding', 'Alan Harris', 'Frank Henson', 'Arthur Howell', 'Tommy Ilsley', 'Joe Johnston', 'Annette Jones', 'Linda Jones', 'Joe Kaye', 'Colin Michael Kitchens', 'Melissa Kurtz', 'Tiffany Hillkurtz', 'Al Lampert', 'Anthony Lang', 'Laine Liska', 'Derek Lyons', 'Mahjoub', 'Alf Mangan', 'Grant McCune', 'Geoffrey Moon', 'Mandy Morton', 'Lorne Peterson', 'Marcus Powell', 'Shane Rimmer', 'Pam Rose', 'George Roubicek', 'Erica Simmons', 'Angela Staines', 'George Stock', 'Roy Straite', 'Peter Sturgeon', 'Peter Sumner', 'John Sylla', 'Tom Sylla', 'Malcolm Tierney', 'Phil Tippett', 'Burnell Tucker', 'Morgan Upton', 'Jerry Walter', 'Hal Wamsley', 'Diana Sadley Way', 'Bill Weston', 'Fred Wood', 'Colin Higgins', 'Ron Tarr', 'Anthony Forrest', 'Frances Alfred Basil Tomlin', 'Larry Ward', 'John Cannon']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the query parameters\nparams = {\n    \"query\": \"Harry Potter\",\n    \"page\": 1\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    results = data['results']\n    \n    # Get the poster path of the first collection (assuming there is a match)\n    if results:\n        collection = results[0]\n        poster_path = collection['poster_path']\n        print(poster_path)\n    else:\n        print(\"No movie cover found for the collection 'Harry Potter'\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "executed": "/eVPs2Y0LyvTLZn6AP5Z6O2rtiGB.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "results": "```python\nimport requests\n\n# HTTP headers containing authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Searching for collection 'The Hunger Games' to get the collection id\nsearch_collection_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"The Hunger Games\"\n}\nresponse = requests.get(search_collection_url, headers=headers, params=search_params)\ncollection_id = response.json()[\"results\"][0][\"id\"]\n\n# Using the collection id to get the details of the collection\ncollection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse = requests.get(collection_details_url, headers=headers)\nkeywords = response.json()[\"parts\"][0][\"keywords\"]\nkeyword_list = [keyword[\"name\"] for keyword in keywords]\n\nprint(keyword_list)\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "results": "```python\nimport requests\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections with the name \"The Hobbit\"\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"The Hobbit\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the collection id for \"The Hobbit\"\ncollection_id = search_results['results'][0]['id']\n\n# Get the details of the collection with id = collection_id\ncollection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\ncollection_details_response = requests.get(collection_details_url, headers=headers)\ncollection_details = collection_details_response.json()\n\n# Extract the release dates of the movies in the collection\nrelease_dates = []\nfor movie in collection_details['parts']:\n    release_dates.append(movie['release_date'])\n\nprint(release_dates)\n```",
        "executed": "['2012-12-12', '2013-12-11', '2014-12-10']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "results": "```python\nimport requests\n\n# Api key for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Fast and the Furious collection\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    results = response.json()[\"results\"]\n    for result in results:\n        print(\"Name:\", result[\"name\"])\n        print(\"Collection ID:\", result[\"id\"])\n        print(\"Poster Path:\", result[\"poster_path\"])\n        print(\"---\")\nelse:\n    print(\"Error connecting to API\")\n```",
        "executed": "Name: The Fast and the Furious Collection\nCollection ID: 9485\nPoster Path: /rKKSOVv6iU3nULrKQmd9uEx9gez.jpg\n---\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "results": "```python\nimport requests\n\n# Set the API key and headers\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Step 1: Search for the collection ID of \"The Fast and the Furious\"\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"The Fast and the Furious\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params).json()\n\n# Extract the collection ID\ncollection_id = search_response['results'][0]['id']\n\n# Step 2: Get the reviews of a movie in the collection\nreview_url = f\"https://api.themoviedb.org/3/movie/{collection_id}/reviews\"\nreview_params = {\n    \"page\": 1\n}\nreview_response = requests.get(review_url, headers=headers, params=review_params).json()\n\n# Output the reviews\nreviews = review_response['results']\nfor review in reviews:\n    print(f\"Author: {review['author']}\")\n    print(f\"Content: {review['content']}\")\n    print()\n```\nThis code first searches for the collection ID of \"The Fast and the Furious\" and then retrieves the reviews of a movie in that collection. Finally, it outputs the author and content of each review.",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "results": "```python\nimport requests\n\n# API endpoint to search for collections\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Parameters for search collection API\nparams_search_collection = {\n    \"query\": \"Lord of the Rings\"\n}\n\n# Call the search collection API\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ndata_search_collection = response_search_collection.json()\n\n# Get the collection ID of \"Lord of the Rings\"\ncollection_id = data_search_collection['results'][0]['id']\n\n# API endpoint to get collection details by id\nurl_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n# Call the collection details API\nresponse_collection_details = requests.get(url_collection_details, headers=headers)\ndata_collection_details = response_collection_details.json()\n\n# Get the release date of the first movie in the collection\nfirst_movie_release_date = data_collection_details['parts'][0]['release_date']\n\nprint(first_movie_release_date)\n```",
        "executed": "2002-04-01\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"0dbab590c7eaca07ebf2d7e8e2242f63\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show \"House of Cards\" to get its ID\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nshow_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the first season of House of Cards\ncredits_url = f\"https://api.themoviedb.org/3/tv/{show_id}/season/1/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits = response.json()\n\n# Extracting directors from the crew list for the first season\ndirectors = [crew[\"name\"] for crew in credits[\"crew\"] if crew[\"job\"] == \"Director\"]\n\n# Print the directors of the first season of House of Cards\nprint(directors)\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"House of Cards\"\nsearch_params = {\n    \"query\": \"House of Cards\"\n}\nsearch_response = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=search_params)\nhouse_of_cards_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get a list of similar TV shows to \"House of Cards\"\nsimilar_params = {\n    \"page\": 1\n}\nsimilar_response = requests.get(f\"https://api.themoviedb.org/3/tv/{house_of_cards_id}/similar\", headers=headers, params=similar_params)\nsimilar_tv_shows = similar_response.json()[\"results\"]\n\n# Print the names of similar TV shows\nfor show in similar_tv_shows:\n    print(show[\"name\"])\n```",
        "executed": "Haunted Hair\nFuera de control\nQueen of Ambition\nThe Escape Artist\nFugitives\nPrincess Agents\nQueen For Seven Days\nWinning Time: The Rise of the Lakers Dynasty\nStay-at-Home Maison\n5th Republic\nVanished\nG.B.H.\n\u68a7\u6850\u96e8\nThe Dance of the Storm\nUnknown Woman\nBring On The Night\nThe English\n1993\nLuoyang\nPsychologist\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API endpoint to get list of shows currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Calling the API to get a list of shows currently on the air\nresponse = requests.get(url, headers=headers)\n\n# Checking if the response is successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Getting the details of the most popular TV show currently on the air\n    most_popular_show = data['results'][0]\n    \n    # Extracting the start date of the show\n    start_date = most_popular_show['first_air_date']\n    \n    print(\"The most popular TV show currently on the air started on:\", start_date)\nelse:\n    print(\"Failed to get data from the API\")\n```",
        "executed": "The most popular TV show currently on the air started on: 1996-07-22\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "results": "```python\nimport requests\n\n# Define the API url to get the movie details of Django Unchained\nmovie_id = 68718\nurl = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nparams = {'append_to_response': 'credits'}\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    # Extract the director name from the response\n    movie_details = response.json()\n    director_name = None\n    for crew in movie_details['credits']['crew']:\n        if crew['job'] == 'Director':\n            director_name = crew['name']\n            break\n\n    if director_name:\n        # API to get the movie credits for the director\n        url = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\n        response = requests.get(url, headers=headers)\n\n        if response.status_code == 200:\n            # Extract a few more works directed by the director\n            director_credits = response.json()['crew']\n            more_works = [work['title'] for work in director_credits[:5]]  # Get the titles of the first 5 movies\n            print(\"A few more works directed by the director of Django Unchained:\")\n            for work in more_works:\n                print(work)\n        else:\n            print(\"Error in getting director credits.\")\n    else:\n        print(\"Director of Django Unchained not found.\")\nelse:\n    print(\"Error in getting movie details.\")\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "results": "```python\nimport requests\n\n# API url to get the list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\nparams = {\"page\": 1}  # Specify the page number\n\n# Make the get request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the JSON data from the response\n    tv_shows_data = response.json()\n    \n    # Get the first TV show from the results\n    if len(tv_shows_data[\"results\"]) > 0:\n        first_tv_show = tv_shows_data[\"results\"][0]\n        tv_show_id = first_tv_show[\"id\"]\n        \n        # API url to get the credits for a specific TV show\n        credits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n        \n        # Make another get request to get the credits of the TV show\n        credits_response = requests.get(credits_url, headers=headers)\n        \n        # Check if the credits response is successful\n        if credits_response.status_code == 200:\n            # Get the cast data from the response\n            credits_data = credits_response.json()\n            \n            # Extract the cast list from the credits data\n            cast_list = credits_data[\"cast\"]\n            \n            # Print the list of cast members\n            for cast_member in cast_list:\n                print(cast_member[\"name\"])\n        else:\n            print(\"Error fetching credits data\")\n    else:\n        print(\"No TV show on the air found\")\nelse:\n    print(\"Error fetching TV shows data\")\n```",
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "I need a review for Breaking Bad",
        "results": "```python\nimport requests\n\n# Api endpoint to search for TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nparams = {\n    \"query\": \"Breaking Bad\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting TV show id for Breaking Bad\ntv_id = response.json()['results'][0]['id']\n\n# Api endpoint to get reviews for the TV show Breaking Bad\nurl_reviews = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\nparams_reviews = {\n    \"page\": 1\n}\nresponse_reviews = requests.get(url_reviews, headers=headers, params=params_reviews)\n\n# Extracting reviews for Breaking Bad\nreviews = response_reviews.json()['results']\n\nprint(reviews)\n```",
        "executed": "[{'author': 'slyone10001', 'author_details': {'name': '', 'username': 'slyone10001', 'avatar_path': None, 'rating': 10.0}, 'content': 'Wow....where to start. Not really into \"DRUG\" inspired shows. But this one had me from the start. The only bad about this show was the split seasons when it was a first run show. But now you can go right through to the next episode with out having to wait.....MUST WATCH ! !', 'created_at': '2018-04-10T15:44:38.134Z', 'id': '5accdbe6c3a3687e2702d058', 'updated_at': '2021-06-23T15:58:07.601Z', 'url': 'https://www.themoviedb.org/review/5accdbe6c3a3687e2702d058'}, {'author': 'Dean', 'author_details': {'name': 'Dean', 'username': 'Ditendra', 'avatar_path': None, 'rating': 10.0}, 'content': \"I'll be honest, at first when I started this TV show and finished first season, I didn't like it. It felt boring for me and I stopped watching, but after few years, I decided to give it a chance and continue. I'm so happy because of my decision, because after finishing this TV show, I can definitely tell that it was a masterpiece! 5th season is a bomb and 14th season was shocking! It left me with sad, euphoric shock feeling. It was mind blowing! I'm not gonna spoil you what happened, but if you started first season and you don't like it, for goodness sake, give it a chance and continue watching. I promise you won't regret.\\r\\n\\r\\nCharacters are very well developed. Acting is superb! Plot is very interesting. Whole TV show is tense, especially the last season. The only downside I can think about is camera. Sometimes it's shaking on some certain scenes. I don't know why they didn't pay attention to this, but this is nothing, just a very minor minus. Everything else is great about this TV show.\", 'created_at': '2019-09-30T09:02:26.890Z', 'id': '5d91c4a2172d7f001759ca0a', 'updated_at': '2021-06-23T15:58:27.439Z', 'url': 'https://www.themoviedb.org/review/5d91c4a2172d7f001759ca0a'}, {'author': 'l33t5p34k3r', 'author_details': {'name': '', 'username': 'l33t5p34k3r', 'avatar_path': None, 'rating': 9.0}, 'content': 'Started out really good, but dropped quality after the second to last season', 'created_at': '2020-06-10T07:29:33.686Z', 'id': '5ee08bdd90dde0001fa67192', 'updated_at': '2021-06-23T15:58:39.055Z', 'url': 'https://www.themoviedb.org/review/5ee08bdd90dde0001fa67192'}, {'author': 'drystyx', 'author_details': {'name': '', 'username': 'drystyx', 'avatar_path': '/hLLsAvAnVT0cFU7JuuaaItTWXv8.jpg', 'rating': 3.0}, 'content': 'This is the kind of TV show for the \"formula lovers\" who want to feel superior.\\r\\nThere is an air of the superiority complex of the \"drug knowledgeable\" crowd in this series about a \"smart guy\" breaking into the drug trade.\\r\\nHis \"talent\" makes him the important cog in the machine. He can call his shots.\\r\\nStill, the ruffians give him a rough way to go, because criminals really are stupid.\\r\\nOnce they learn that they are nothing without him, he gets his way.\\r\\nMuch like a Western town blacksmith, he\\'s the needed ingredient.\\r\\nHowever, things get very formula early on in the show. And there\\'s always this sense of a superiority complex from the sort of people who push shows like this onto their friends and acquaintances. The directing writing team tap into the control freak crowd very well.\\r\\nBut it is a dull show about dull people.', 'created_at': '2023-04-02T17:02:14.125Z', 'id': '6429b5168de0ae00978d836a', 'updated_at': '2023-04-03T16:45:23.650Z', 'url': 'https://www.themoviedb.org/review/6429b5168de0ae00978d836a'}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# API url to search for TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for the search query\nparams = {\n    \"query\": \"The Last Of Us\",\n    \"include_adult\": False\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()[\"results\"]\n    \n    # Get the TV show id for \"The Last Of Us\"\n    tv_id = results[0][\"id\"]\n    \n    # API url to get TV show recommendations\n    url_recommendations = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\n\n    # Make a GET request to the API for recommendations\n    response_recommendations = requests.get(url_recommendations, headers=headers, params={\"page\": 1})\n\n    # Check if the request was successful\n    if response_recommendations.status_code == 200:\n        # Get the recommendations\n        recommendations = response_recommendations.json()[\"results\"]\n        print(recommendations)\n    else:\n        print(\"Failed to retrieve recommendations\")\nelse:\n    print(\"Failed to retrieve TV show information\")\n```",
        "executed": "[{'adult': False, 'backdrop_path': '/9zcbqSxdsRMZWHYtyCd1nXPr2xq.jpg', 'id': 82856, 'name': 'The Mandalorian', 'original_language': 'en', 'original_name': 'The Mandalorian', 'overview': 'After the fall of the Galactic Empire, lawlessness has spread throughout the galaxy. A lone gunfighter makes his way through the outer reaches, earning his keep as a bounty hunter.', 'poster_path': '/eU1i6eHXlzMOlEq0ku1Rzq7Y4wA.jpg', 'media_type': 'tv', 'genre_ids': [10765, 10759, 18], 'popularity': 227.975, 'first_air_date': '2019-11-12', 'vote_average': 8.445, 'vote_count': 9656, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/iHSwvRVsRyxpX7FE7GbviaDvgGZ.jpg', 'id': 119051, 'name': 'Wednesday', 'original_language': 'en', 'original_name': 'Wednesday', 'overview': 'Wednesday Addams is sent to Nevermore Academy, a bizarre boarding school where she attempts to master her psychic powers, stop a monstrous killing spree of the town citizens, and solve the supernatural mystery that affected her family 25 years ago \u2014 all while navigating her new relationships.', 'poster_path': '/9PFonBhy4cQy7Jz20NpMygczOkv.jpg', 'media_type': 'tv', 'genre_ids': [10765, 9648, 35], 'popularity': 194.558, 'first_air_date': '2022-11-23', 'vote_average': 8.501, 'vote_count': 8027, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/rIe3PnM6S7IBUmvNwDkBMX0i9EZ.jpg', 'id': 1399, 'name': 'Game of Thrones', 'original_language': 'en', 'original_name': 'Game of Thrones', 'overview': \"Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond.\", 'poster_path': '/1XS1oqL89opfnbLl8WnZY1O1uJx.jpg', 'media_type': 'tv', 'genre_ids': [10765, 18, 10759], 'popularity': 994.002, 'first_air_date': '2011-04-17', 'vote_average': 8.446, 'vote_count': 22759, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/20eIP9o5ebArmu2HxJutaBjhLf4.jpg', 'id': 87108, 'name': 'Chernobyl', 'original_language': 'en', 'original_name': 'Chernobyl', 'overview': 'The true story of one of the worst man-made catastrophes in history: the catastrophic nuclear accident at Chernobyl. A tale of the brave men and women who sacrificed to save Europe from unimaginable disaster.', 'poster_path': '/hlLXt2tOPT6RRnjiUmoxyG1LTFi.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 124.986, 'first_air_date': '2019-05-06', 'vote_average': 8.659, 'vote_count': 5772, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/9faGSFi5jam6pDWGNd0p8JcJgXQ.jpg', 'id': 1396, 'name': 'Breaking Bad', 'original_language': 'en', 'original_name': 'Breaking Bad', 'overview': \"Walter White, a New Mexico chemistry teacher, is diagnosed with Stage III cancer and given a prognosis of only two years left to live. He becomes filled with a sense of fearlessness and an unrelenting desire to secure his family's financial future at any cost as he enters the dangerous world of drugs and crime.\", 'poster_path': '/ztkUQFLlC19CCMYHW9o1zWhJRNq.jpg', 'media_type': 'tv', 'genre_ids': [18, 80], 'popularity': 649.263, 'first_air_date': '2008-01-20', 'vote_average': 8.904, 'vote_count': 13218, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/56v2KjBlU4XaOv9rVYEQypROD7P.jpg', 'id': 66732, 'name': 'Stranger Things', 'original_language': 'en', 'original_name': 'Stranger Things', 'overview': 'When a young boy vanishes, a small town uncovers a mystery involving secret experiments, terrifying supernatural forces, and one strange little girl.', 'poster_path': '/49WJfeN0moxb9IPfGn8AIqMGskD.jpg', 'media_type': 'tv', 'genre_ids': [18, 10765, 9648], 'popularity': 338.647, 'first_air_date': '2016-07-15', 'vote_average': 8.615, 'vote_count': 16774, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/mNHRGO1gFpR2CYZdANe72kcKq7G.jpg', 'id': 153312, 'name': 'Tulsa King', 'original_language': 'en', 'original_name': 'Tulsa King', 'overview': 'Just after he is released from prison after 25 years, New York mafia capo Dwight \u201cThe General\u201d Manfredi is unceremoniously exiled by his boss to set up shop in Tulsa, Okla. Realizing that his mob family may not have his best interests in mind, Dwight slowly builds a \u201ccrew\u201d from a group of unlikely characters, to help him establish a new criminal empire in a place that to him might as well be another planet.', 'poster_path': '/fwTv3RPRAIy0maOMns5eYRRwnDk.jpg', 'media_type': 'tv', 'genre_ids': [80, 18], 'popularity': 118.295, 'first_air_date': '2022-11-13', 'vote_average': 8.4, 'vote_count': 1494, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/vXpeJJs1z8OKC88CNJX9O9QOhtr.jpg', 'id': 94997, 'name': 'House of the Dragon', 'original_language': 'en', 'original_name': 'House of the Dragon', 'overview': 'The Targaryen dynasty is at the absolute apex of its power, with more than 15 dragons under their yoke. Most empires crumble from such heights. In the case of the Targaryens, their slow fall begins when King Viserys breaks with a century of tradition by naming his daughter Rhaenyra heir to the Iron Throne. But when Viserys later fathers a son, the court is shocked when Rhaenyra retains her status as his heir, and seeds of division sow friction across the realm.', 'poster_path': '/m7ta0kNg2ONvnBFF76miVvbWK1V.jpg', 'media_type': 'tv', 'genre_ids': [10765, 18, 10759], 'popularity': 299.308, 'first_air_date': '2022-08-21', 'vote_average': 8.421, 'vote_count': 3731, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/x4salpjB11umlUOltfNvSSrjSXm.jpg', 'id': 1402, 'name': 'The Walking Dead', 'original_language': 'en', 'original_name': 'The Walking Dead', 'overview': \"Sheriff's deputy Rick Grimes awakens from a coma to find a post-apocalyptic world dominated by flesh-eating zombies. He sets out to find his family and encounters many other survivors along the way.\", 'poster_path': '/n7PVu0hSz2sAsVekpOIoCnkWlbn.jpg', 'media_type': 'tv', 'genre_ids': [10759, 18, 10765], 'popularity': 521.542, 'first_air_date': '2010-10-31', 'vote_average': 8.12, 'vote_count': 15871, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/2ZNFu0hkSVtAI6LRWGIlCPNd1Tj.jpg', 'id': 78191, 'name': 'You', 'original_language': 'en', 'original_name': 'You', 'overview': 'A dangerously charming, intensely obsessive young man goes to extreme measures to insert himself into the lives of those he is transfixed by.', 'poster_path': '/7bEYwjUvlJW7GerM8GYmqwl4oS3.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 187.278, 'first_air_date': '2018-09-09', 'vote_average': 8.065, 'vote_count': 2942, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/n6vVs6z8obNbExdD3QHTr4Utu1Z.jpg', 'id': 76479, 'name': 'The Boys', 'original_language': 'en', 'original_name': 'The Boys', 'overview': 'A group of vigilantes known informally as \u201cThe Boys\u201d set out to take down corrupt superheroes with no more than blue-collar grit and a willingness to fight dirty.', 'poster_path': '/7Ns6tO3aYjppI5bFhyYZurOYGBT.jpg', 'media_type': 'tv', 'genre_ids': [10765, 10759], 'popularity': 346.739, 'first_air_date': '2019-07-25', 'vote_average': 8.471, 'vote_count': 9227, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/rBF8wVQN8hTWHspVZBlI3h7HZJ.jpg', 'id': 60625, 'name': 'Rick and Morty', 'original_language': 'en', 'original_name': 'Rick and Morty', 'overview': \"Rick is a mentally-unbalanced but scientifically gifted old man who has recently reconnected with his family. He spends most of his time involving his young grandson Morty in dangerous, outlandish adventures throughout space and alternate universes. Compounded with Morty's already unstable family life, these events cause Morty much distress at home and school.\", 'poster_path': '/gdIrmf2DdY5mgN6ycVP0XlzKzbE.jpg', 'media_type': 'tv', 'genre_ids': [16, 35, 10765, 10759], 'popularity': 666.249, 'first_air_date': '2013-12-02', 'vote_average': 8.702, 'vote_count': 9217, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/57clBMPX25NNO6nmDw3TV3zQaQE.jpg', 'id': 114472, 'name': 'Secret Invasion', 'original_language': 'en', 'original_name': 'Secret Invasion', 'overview': 'Nick Fury and Talos discover a faction of shapeshifting Skrulls who have been infiltrating Earth for years.', 'poster_path': '/f5ZMzzCvt2IzVDxr54gHPv9jlC9.jpg', 'media_type': 'tv', 'genre_ids': [18, 10765, 10759], 'popularity': 126.163, 'first_air_date': '2023-06-21', 'vote_average': 6.864, 'vote_count': 927, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/vLN520GJvHJJQOFqqV7RjZNBwi7.jpg', 'id': 129552, 'name': 'The Night Agent', 'original_language': 'en', 'original_name': 'The Night Agent', 'overview': 'While monitoring an emergency line, a vigilant FBI agent answers a call that plunges him into a deadly conspiracy involving a mole at the White House.', 'poster_path': '/xjsx6rGEgHl2tUqkimo6Bz2KzVo.jpg', 'media_type': 'tv', 'genre_ids': [18, 9648, 10759], 'popularity': 90.464, 'first_air_date': '2023-03-23', 'vote_average': 7.874, 'vote_count': 571, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/u7OpeS4eckBSR1wFxFTuyy3FjHE.jpg', 'id': 154385, 'name': 'BEEF', 'original_language': 'en', 'original_name': 'BEEF', 'overview': 'A road rage incident between two strangers \u2014 a failing contractor and an unfulfilled entrepreneur \u2014 sparks a feud that brings out their darkest impulses.', 'poster_path': '/4b4v7RnPhNyPEaVGFarEuo74r8W.jpg', 'media_type': 'tv', 'genre_ids': [35, 18], 'popularity': 66.703, 'first_air_date': '2023-04-06', 'vote_average': 7.839, 'vote_count': 482, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/AjwoDj77HLlqcpwEGqsnvMXm5my.jpg', 'id': 136283, 'name': 'The Glory', 'original_language': 'ko', 'original_name': '\ub354 \uae00\ub85c\ub9ac', 'overview': 'After a childhood marked by pain and violence, a woman puts a carefully planned revenge scheme in motion.', 'poster_path': '/uUM4LVlPgIrww07OoEKrGWlS1Ej.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 111.593, 'first_air_date': '2022-12-30', 'vote_average': 8.555, 'vote_count': 568, 'origin_country': ['KR']}, {'adult': False, 'backdrop_path': '/npD65vPa4vvn1ZHpp3o05A5vdKT.jpg', 'id': 95396, 'name': 'Severance', 'original_language': 'en', 'original_name': 'Severance', 'overview': 'Mark leads a team of office workers whose memories have been surgically divided between their work and personal lives. When a mysterious colleague appears outside of work, it begins a journey to discover the truth about their jobs.', 'poster_path': '/lFf6LLrQjYldcZItzOkGmMMigP7.jpg', 'media_type': 'tv', 'genre_ids': [18, 9648, 10765], 'popularity': 117.625, 'first_air_date': '2022-02-17', 'vote_average': 8.404, 'vote_count': 1006, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/qBppESpY8e97WfPWVZiU0JdRXw.jpg', 'id': 84773, 'name': 'The Lord of the Rings: The Rings of Power', 'original_language': 'en', 'original_name': 'The Lord of the Rings: The Rings of Power', 'overview': 'Beginning in a time of relative peace, we follow an ensemble cast of characters as they confront the re-emergence of evil to Middle-earth. From the darkest depths of the Misty Mountains, to the majestic forests of Lindon, to the breathtaking island kingdom of N\u00famenor, to the furthest reaches of the map, these kingdoms and characters will carve out legacies that live on long after they are gone.', 'poster_path': '/mYLOqiStMxDK3fYZFirgrMt8z5d.jpg', 'media_type': 'tv', 'genre_ids': [10759, 10765, 18], 'popularity': 211.148, 'first_air_date': '2022-09-01', 'vote_average': 7.4, 'vote_count': 2396, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/hR2pFXMxVihldEk5WoSrV7Yq2ra.jpg', 'id': 124364, 'name': 'From', 'original_language': 'en', 'original_name': 'From', 'overview': 'Unravel the mystery of a nightmarish town in middle America that traps all those who enter. As the unwilling residents fight to keep a sense of normalcy and search for a way out, they must also survive the threats of the surrounding forest \u2013 including the terrifying creatures that come out when the sun goes down.', 'poster_path': '/pnrv8tfOcWxu4CrB8N7xK0jYJsR.jpg', 'media_type': 'tv', 'genre_ids': [9648, 18, 10765], 'popularity': 188.821, 'first_air_date': '2022-02-20', 'vote_average': 8.146, 'vote_count': 869, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/mYegNdFjJeCISA1RDDCKBhKB4Ao.jpg', 'id': 126725, 'name': 'Velma', 'original_language': 'en', 'original_name': 'Velma', 'overview': 'Jinkies! This raucous reimagining of the Scooby-Doo franchise unravels the mysterious origins of Mystery, Inc. \u2013 as seen through the eyes of the gang\u2019s beloved bespectacled detective Velma.', 'poster_path': '/zxkNhuPSHeDv3yA7sFu2RuEOGgR.jpg', 'media_type': 'tv', 'genre_ids': [16, 35], 'popularity': 39.651, 'first_air_date': '2023-01-12', 'vote_average': 3.464, 'vote_count': 248, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/34OGjFEbHj0E3lE2w0iTUVq0CBz.jpg', 'id': 87739, 'name': \"The Queen's Gambit\", 'original_language': 'en', 'original_name': \"The Queen's Gambit\", 'overview': 'In a 1950s orphanage, a young girl reveals an astonishing talent for chess and begins an unlikely journey to stardom while grappling with addiction.', 'poster_path': '/zU0htwkhNvBQdVSIKB9s6hgVeFK.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 113.416, 'first_air_date': '2020-10-23', 'vote_average': 8.503, 'vote_count': 4123, 'origin_country': ['US']}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ]
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "results": "```python\nimport requests\n\n# Define the base URL for the TMDB API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Set the API key\napi_key = \"YOUR_API_KEY_HERE\"\n\n# Set the headers for the API request\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show \"The Last of Us\" to get its ID\nsearch_params = {\n    \"query\": \"The Last of Us\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(f\"{base_url}/search/tv\", headers=headers, params=search_params)\nsearch_results = search_response.json()\ntv_show_id = search_results[\"results\"][0][\"id\"]\n\n# Get recommendations for the TV show using its ID\nrecommendation_params = {\n    \"page\": 1\n}\nrecommendation_response = requests.get(f\"{base_url}/tv/{tv_show_id}/recommendations\", headers=headers, params=recommendation_params)\nrecommendation_results = recommendation_response.json()\n\n# Print the recommendations\nrecommendations = recommendation_results[\"results\"]\nfor recommendation in recommendations:\n    print(recommendation[\"name\"])\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "results": "```python\nimport requests\n\n# Define the API URL to get the TV show details by id\napi_url = \"https://api.themoviedb.org/3/tv/1668/season/3/episode/24/credits\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(api_url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    \n    # Extract the guest stars information from the response\n    guest_stars = data[\"guest_stars\"]\n    \n    # Iterate over the guest stars and print their names\n    for star in guest_stars:\n        print(star[\"name\"])\n\nelse:\n    # Print an error message if the request was not successful\n    print(\"Error: Unable to retrieve guest stars. Status code:\", response.status_code)\n```",
        "executed": "Christine Taylor\nJames Hong\nJon Favreau\nSteve Park\nJoe O'Connor\nRobin Williams\nBilly Crystal\nBruce Buffer\nJohn McCarthy\nSam McMurray\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "results": "```python\nimport requests\n\n# Assign the authorization token to the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get a list of popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}\nresponse = requests.get(url, headers=headers, params=params)\ntv_shows_data = response.json()\n\n# Get the TV show id of the most popular TV show\nmost_popular_tv_show_id = tv_shows_data['results'][0]['id']\n\n# Call the API to get the credits (cast and crew) of the most popular TV show\ncredits_url = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_show_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\n\n# Get the lead actor in the most popular TV show\nlead_actor = credits_data['cast'][0]['name']\nprint(lead_actor)\n```",
        "executed": "Jimmy Fallon\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/top_rated\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the parameters (page=1)\nparams = {\n    \"page\": 1\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the keyword of the top-1 rated TV show\n    top_rated_tv_shows = response.json()['results']\n    if len(top_rated_tv_shows) > 0:\n        top_1_keyword = requests.get(f\"https://api.themoviedb.org/3/tv/{top_rated_tv_shows[0]['id']}/keywords\", headers=headers).json()['results'][0]['name']\n        print(f\"The keyword of the top-1 rated TV show is: {top_1_keyword}\")\n    else:\n        print(\"No top rated TV show found.\")\nelse:\n    print(\"Failed to fetch data\")\n```",
        "executed": "The keyword of the top-1 rated TV show is: hotel\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/tv"
        ]
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "results": "```python\nimport requests\n\n# API key and headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"2 Broke Girls\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ntv_show_id = response.json()['results'][0]['id']\n\n# Get the images of the TV show\nimages_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/images\"\nresponse = requests.get(images_url, headers=headers)\nposter_path = response.json()['posters'][0]['file_path']\n\n# Base URL for image poster\nbase_url = \"https://image.tmdb.org/t/p/w500/\"\n\n# Print the URL for the poster of \"2 Broke Girls\"\nprint(base_url + poster_path)\n```",
        "executed": "https://image.tmdb.org/t/p/w500//ofv5rjNogosS2X2N4VyiW4akdc2.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "results": "```python\nimport requests\n\n# Set the base URL for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"2 Broke Girls\"\nsearch_url = f\"{base_url}/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show ID for \"2 Broke Girls\"\ntv_id = data[\"results\"][0][\"id\"]\n\n# Get the details of the TV show by ID\ntv_details_url = f\"{base_url}/tv/{tv_id}\"\nresponse = requests.get(tv_details_url, headers=headers)\ndata = response.json()\n\n# Calculate the total number of episodes\ntotal_episodes = 0\nfor season in data[\"seasons\"]:\n    total_episodes += season[\"episode_count\"]\n\nprint(total_episodes)\n```",
        "executed": "137\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "results": "```python\nimport requests\n\n# Define the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"The Big Bang Theory\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"The Big Bang Theory\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_show_info = response_search_tv.json()\n\n# Extract the production company id\nif 'results' in tv_show_info and len(tv_show_info['results']) > 0:\n    production_company_id = tv_show_info['results'][0]['production_companies'][0]['id']\n\n# Get the company details by id\nurl_company_details = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\nresponse_company_details = requests.get(url_company_details, headers=headers)\ncompany_info = response_company_details.json()\n\n# Print the foundation year of the company\nprint(f\"The company that produced The Big Bang Theory was founded in: {company_info['foundation_year']}\")\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show by its name\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Big Bang Theory\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show id\ntv_id = data['results'][0]['id']\n\n# Get the primary details of the TV show by id\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Extract the first air date of the TV show\ncreation_date = data['first_air_date']\n\nprint(f\"The TV show 'The Big Bang Theory' was created on: {creation_date}\")\n```",
        "executed": "The TV show 'The Big Bang Theory' was created on: 2007-09-24\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "results": "```python\nimport requests\n\n# Http header to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get a list of the current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the TV show id of the most popular TV show\n    tv_show_id = data['results'][0]['id']\n    \n    # API url to get the keywords of the most popular TV show\n    keyword_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/keywords\"\n    \n    # Send GET request to the API\n    keyword_response = requests.get(keyword_url, headers=headers)\n    \n    # Check if the keyword request was successful\n    if keyword_response.status_code == 200:\n        # Parse the keyword JSON response\n        keyword_data = keyword_response.json()\n        \n        # Get the first keyword of the most popular TV show\n        first_keyword = keyword_data['results'][0]['name']\n        \n        print(f\"The keyword of the most popular TV show is: {first_keyword}\")\n    else:\n        print(\"Failed to get keywords for the most popular TV show\")\nelse:\n    print(\"Failed to get list of popular TV shows\")\n```",
        "executed": "The keyword of the most popular TV show is: new york city\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ]
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "results": "```python\nimport requests\n\n# API url to get TV show details by episode\nurl = \"https://api.themoviedb.org/3/tv/63247/season/2/episode/3\"\n# Parameters\nparams = {\n    'api_key': 'YOUR_API_KEY'  # Replace 'YOUR_API_KEY' with your actual API key\n}\n# HTTP Headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Get the overview of the episode\n    episode_overview = data['overview']\n    print(\"The third episode of the second season of Westworld talked about:\", episode_overview)\nelse:\n    # Print an error message if the request was not successful\n    print(\"Error - Unable to fetch data\")\n```",
        "executed": "The third episode of the second season of Westworld talked about: There is beauty in who we are. Shouldn't we, too, try to survive? Truth is, we don't all deserve to make it. Dolores makes her next move as Charlotte scrambles to protect Delos' most prized asset. Bernard gets closer to the truth and Maeve continues the search for her daughter.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/1399/season/2\"\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Convert the response to JSON\n    data = response.json()\n    \n    # Get the air date of the second season of Game of Thrones\n    air_date = data['air_date']\n    \n    print(\"The air date of the second season of Game of Thrones is:\", air_date)\nelse:\n    print(\"Error: Unable to fetch data.\")\n\n# Make sure to replace tv_id with the actual id of Game of Thrones\n# In this case, the id of Game of Thrones is 1399.\n```",
        "executed": "The air date of the second season of Game of Thrones is: 2012-03-31\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show Band of Brothers\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_search_params = {\n    \"query\": \"Band of Brothers\"\n}\ntv_search_response = requests.get(tv_search_url, headers=headers, params=tv_search_params)\ntv_search_results = tv_search_response.json()\nband_of_brothers_id = tv_search_results[\"results\"][0][\"id\"]\n\n# Get details of the third episode of Band of Brothers\nepisode_details_url = f\"https://api.themoviedb.org/3/tv/{band_of_brothers_id}/season/1/episode/3\"\nepisode_details_response = requests.get(episode_details_url, headers=headers)\nepisode_details = episode_details_response.json()\n\n# Get the poster path of the third episode of Band of Brothers\nposter_path = episode_details[\"still_path\"]\nprint(poster_path)\n```",
        "executed": "/122cDgrjc5lFqUZ7cYi8vUVrcrn.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "results": "```python\nimport requests\n\n# Define the base URL for API calls\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Set the API key for authorization\napi_key = \"0dbab590c7eaca07ebel625974a37ad92\"\n\n# Set the headers for the API call\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show \"Game of Thrones\"\nsearch_url = f\"{base_url}/search/tv\"\nsearch_params = {\n    \"query\": \"Game of Thrones\"\n}\n\n# Get the TV show details by id\nresponse = requests.get(search_url, headers=headers, params=search_params)\nshow_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the primary TV show details by id\ntv_details_url = f\"{base_url}/tv/{show_id}\"\ntv_details_response = requests.get(tv_details_url, headers=headers)\nnetwork_id = tv_details_response.json()[\"networks\"][0][\"id\"]\n\n# Get the network details by id\nnetwork_url = f\"{base_url}/network/{network_id}\"\nnetwork_details_response = requests.get(network_url, headers=headers)\nnetwork_logo = network_details_response.json()[\"logos\"][0][\"file_path\"]\nprint(network_logo)\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "results": "```python\nimport requests\n\n# Define the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for \"Game of Thrones\"\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params={\"query\": \"Game of Thrones\"})\ngame_of_thrones_id = response.json()[\"results\"][0][\"id\"] if response.json()[\"results\"] else None\n\n# Get the primary details of \"Game of Thrones\"\nif game_of_thrones_id:\n    response = requests.get(f\"https://api.themoviedb.org/3/tv/{game_of_thrones_id}\", headers=headers)\n    game_of_thrones_details = response.json()\n\n    # Get the network id that produced Game of Thrones\n    network_id = game_of_thrones_details[\"networks\"][0][\"id\"] if game_of_thrones_details[\"networks\"] else None\n\n    # Get the homepage of the network that produced Game of Thrones\n    if network_id:\n        response = requests.get(f\"https://api.themoviedb.org/3/network/{network_id}\", headers=headers)\n        network_homepage = response.json()[\"homepage\"]\n        print(network_homepage)\n    else:\n        print(\"No network information found for Game of Thrones\")\nelse:\n    print(\"Game of Thrones not found in the database\")\n```",
        "executed": "https://www.hbo.com\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "results": "```python\nimport requests\n\n# API url for getting a list of the current popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n# API url for getting keywords of a TV show\nurl_keywords = \"https://api.themoviedb.org/3/tv/{}/keywords\"\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get a list of the current popular TV shows\nresponse_popular_tv = requests.get(url_popular_tv, headers=headers)\ndata_popular_tv = response_popular_tv.json()\n\n# Get the TV show ID of the most popular TV show\ntv_id = data_popular_tv[\"results\"][0][\"id\"]\n\n# Get the keywords of the most popular TV show\nresponse_keywords = requests.get(url_keywords.format(tv_id), headers=headers)\ndata_keywords = response_keywords.json()\n\n# Get the first keyword of the most popular TV show\nkeyword = data_keywords[\"results\"][0][\"name\"]\n\nprint(\"Keyword of the most popular TV show currently:\", keyword)\n```",
        "executed": "Keyword of the most popular TV show currently: new york city\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "results": "```python\nimport requests\n\n# Http headers for authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Request the list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {'page': 1}  # Requesting the first page\nresponse = requests.get(url_popular_tv, headers=headers, params=params)\ndata = response.json()\n\n# Get the id of the company that produced currently the most popular TV show\nmost_popular_tv_show = data['results'][0]  # Get the most popular TV show\nproduction_company_id = most_popular_tv_show['production_companies'][0]['id']\n\n# Request the details of the company\nurl_company_details = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\nresponse_company = requests.get(url_company_details, headers=headers)\ncompany_data = response_company.json()\n\n# Extracting the headquarters of the company\nheadquarter = company_data['headquarters']\n\nprint(\"The headquarters of the company that produced currently the most popular TV show is:\", headquarter)\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "results": "```python\nimport requests\n\n# Define the API url to get the primary TV show details\nurl = \"https://api.themoviedb.org/3/tv/82856\"\n\n# Define the parameters\nparams = {\n    \"language\": \"en-US\"\n}\n\n# Set the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Get the genre of The Mandalorian\n    genres = data.get(\"genres\", [])\n    genre_names = [genre[\"name\"] for genre in genres]\n    print(\"The genre of The Mandalorian is:\", genre_names)\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "executed": "The genre of The Mandalorian is: ['Sci-Fi & Fantasy', 'Action & Adventure', 'Drama']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get today's trending TV show\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\ntrending_tv_data = response_trending_tv.json()\n\n# Get the lead actor's birthday from the TV show\nif trending_tv_data[\"results\"]:\n    lead_actor_id = trending_tv_data[\"results\"][0][\"id\"]\n    url_credits = f\"https://api.themoviedb.org/3/tv/{lead_actor_id}/credits\"\n    response_credits = requests.get(url_credits, headers=headers)\n    credits_data = response_credits.json()\n\n    # Get the lead actor's id\n    lead_actor_id = credits_data[\"cast\"][0][\"id\"]\n\n    # Get the lead actor's details\n    url_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n    response_person = requests.get(url_person, headers=headers)\n    person_data = response_person.json()\n\n    birthday = person_data[\"birthday\"]\n    print(f\"The lead actor's birthday is: {birthday}\")\nelse:\n    print(\"No trending TV show found today.\")\n```",
        "executed": "The lead actor's birthday is: 1984-12-16\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "results": "```python\nimport requests\n\n# Define the API url and parameters to get the trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\nparams = {}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request to get the response\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the response JSON to get the TV show ID\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Define the API url to get the TV show details by ID\ntv_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\ntv_params = {}\n\n# Make the API request to get the TV show details\ntv_response = requests.get(tv_url, headers=headers, params=tv_params)\n\n# Get the network ID from the TV show details\nnetwork_id = tv_response.json()[\"networks\"][0][\"id\"]\n\n# Define the API url to get the network details by ID\nnetwork_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\nnetwork_params = {}\n\n# Make the API request to get the network details\nnetwork_response = requests.get(network_url, headers=headers, params=network_params)\n\n# Get the homepage of the network\nnetwork_homepage = network_response.json()[\"homepage\"]\n\nprint(network_homepage)\n```",
        "executed": "http://www.netflix.com\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "give me a review of today's most trending TV show",
        "results": "```python\nimport requests\n\n# API url to get today's most trending TV shows\nurl_trending_TV = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Adding the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the trending TV shows\nresponse_trending_TV = requests.get(url_trending_TV, headers=headers)\ntrending_TV_data = response_trending_TV.json()\n\n# Get the tv_id of the most trending TV show\nif \"results\" in trending_TV_data and len(trending_TV_data[\"results\"]) > 0:\n    most_trending_TV_id = trending_TV_data[\"results\"][0][\"id\"]\n    \n    # API url to get reviews of the most trending TV show\n    url_reviews = f\"https://api.themoviedb.org/3/tv/{most_trending_TV_id}/reviews\"\n\n    # Get the reviews of the most trending TV show\n    response_reviews = requests.get(url_reviews, headers=headers)\n    reviews_data = response_reviews.json()\n\n    # Print the results\n    print(reviews_data)\nelse:\n    print(\"No trending TV show found.\")\n```  ",
        "executed": "{'id': 236235, 'page': 1, 'results': [], 'total_pages': 0, 'total_results': 0}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "results": "```python\nimport requests\n\n# Set the API endpoint\nurl_trending = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the headers with the authentication token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to get the trending TV shows\nresponse = requests.get(url_trending, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the TV show id of the most trending TV show\n    trending_tv_show_id = response.json()[\"results\"][0][\"id\"]\n\n    # Set the API endpoint to get similar TV shows\n    url_similar_tv = f\"https://api.themoviedb.org/3/tv/{trending_tv_show_id}/similar\"\n\n    # Send a GET request to get similar TV shows\n    response_similar_tv = requests.get(url_similar_tv, headers=headers)\n\n    # Check if the request was successful\n    if response_similar_tv.status_code == 200:\n        similar_tv_shows = response_similar_tv.json()[\"results\"]\n        print(similar_tv_shows)\n    else:\n        print(\"Failed to retrieve similar TV shows.\")\nelse:\n    print(\"Failed to retrieve trending TV shows.\")\n```",
        "executed": "[{'adult': False, 'backdrop_path': '/g64LG7nV1vpRPTmNxM1oTkf0pWq.jpg', 'genre_ids': [9648, 10765, 18], 'id': 46616, 'origin_country': ['FR'], 'original_language': 'fr', 'original_name': 'Les Revenants', 'overview': 'In the shadow of an enormous hydraulic dam, the lives of the residents of a small French town are changed to their core when hundreds of previously dead relatives all return home on the same day.', 'popularity': 29.531, 'poster_path': '/x6B2UTMMU06GNzRgbDfaObuWFT6.jpg', 'first_air_date': '2012-11-26', 'name': 'The Returned', 'vote_average': 7.439, 'vote_count': 239}, {'adult': False, 'backdrop_path': None, 'genre_ids': [16, 10751, 18, 10759, 10762], 'id': 46438, 'origin_country': ['JP'], 'original_language': 'ja', 'original_name': '\u3042\u3089\u3057\u306e\u3088\u308b\u306b \u301c\u3072\u307f\u3064\u306e\u3068\u3082\u3060\u3061\u301c', 'overview': '', 'popularity': 40.555, 'poster_path': '/wwulccmYXbFNEdCrlwBq8OnITMX.jpg', 'first_air_date': '2012-04-04', 'name': 'On a Stormy Night: Secret Friends', 'vote_average': 8.0, 'vote_count': 2}, {'adult': False, 'backdrop_path': '/8OapOjQUbA52qDdog8GGIIy8bdh.jpg', 'genre_ids': [10759, 18], 'id': 167, 'origin_country': ['US', 'CA'], 'original_language': 'en', 'original_name': 'La Femme Nikita', 'overview': 'La Femme Nikita was a Canadian action/drama television series based on the French film Nikita by Luc Besson. The series was co-produced by Jay Firestone of Fireworks Entertainment and Warner Bros.. It was adapted for television by Joel Surnow. The series was first telecast in North America on the USA Network cable channel on January 13, 1997, and ran for five television seasons\u2014until March 2001. The series was also aired in Canada on the over-the-air CTV Television Network. La Femme Nikita was the highest-rated drama on American basic cable during its first two seasons. It was also distributed in some other countries, and it continues to have a strong cult following.', 'popularity': 161.685, 'poster_path': '/pvm8hc0JzbDOcH85bPmlqmMJDvT.jpg', 'first_air_date': '1997-01-13', 'name': 'La Femme Nikita', 'vote_average': 7.451, 'vote_count': 226}, {'adult': False, 'backdrop_path': '/hGtx3dAB6x0ShXpDk4BBvt74Mtx.jpg', 'genre_ids': [18, 35, 10765], 'id': 99654, 'origin_country': ['KR'], 'original_language': 'ko', 'original_name': '18 \uc5b4\uac8c\uc778', 'overview': \"At a difficult place in his marriage and career, a middle-aged man gets a shot at a do-over when he's transformed back into his 18-year-old body.\", 'popularity': 97.606, 'poster_path': '/AwoC5PiNdi1RZTZTgOGGdHqCzrC.jpg', 'first_air_date': '2020-09-21', 'name': '18 Again', 'vote_average': 8.348, 'vote_count': 201}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18], 'id': 1337, 'origin_country': ['CA'], 'original_language': 'en', 'original_name': 'FX: The Series', 'overview': 'Rollie Tyler, a special effects expert, helps his detective friend solve crimes by making criminals see what they want to see. But what is real and what is illusion?', 'popularity': 66.314, 'poster_path': '/kLdsiEqnLEdVde4mq32i15xgEBi.jpg', 'first_air_date': '1996-09-09', 'name': 'FX: The Series', 'vote_average': 6.133, 'vote_count': 15}, {'adult': False, 'backdrop_path': '/hmFP1VIQ2IFCPMBUotgJxtF44CU.jpg', 'genre_ids': [35, 16, 10759], 'id': 231821, 'origin_country': ['CA'], 'original_language': 'en', 'original_name': 'Open Season: Call of Nature', 'overview': 'Follow best friends Boog, a lovable, risk-averse grizzly bear, and Elliot, a fast-talking, \"act-first, think-later\" deer. When the pair discover an abandoned summer camp in the middle of nowhere, they embark on a brave and hilarious adventure to create a new place to live where animals get to embrace their inner wild!', 'popularity': 31.408, 'poster_path': '/6hgNirgp2PGUxw0sbxirocnJKGY.jpg', 'first_air_date': '2023-11-03', 'name': 'Open Season: Call of Nature', 'vote_average': 5.5, 'vote_count': 2}, {'adult': False, 'backdrop_path': '/8t1Qdx4JSwPEY2LxffehwC1qfgV.jpg', 'genre_ids': [10765, 10759, 35, 80], 'id': 5191, 'origin_country': ['CA'], 'original_language': 'en', 'original_name': 'RoboCop: The Series', 'overview': 'RoboCop: The Series is a 1994 television series based on the film of the same name. It stars Richard Eden as the title character. Made to appeal primarily to children and young teenagers, it lacks the graphic violence that was the hallmark of RoboCop and RoboCop 2. RoboCop has several non-lethal alternatives to killing criminals, which ensures that certain villains can be recurring. The OCP Chairman and his corporation are treated as simply na\u00efve and ignorant, in contrast to their malicious and immoral behavior from the second film onward.', 'popularity': 33.113, 'poster_path': '/lKPeX5a04E1qrzAVeI43ocfinM.jpg', 'first_air_date': '1994-03-12', 'name': 'RoboCop: The Series', 'vote_average': 6.097, 'vote_count': 67}, {'adult': False, 'backdrop_path': '/oCEk2jiHkQaqCYakr5IdCEYiWSb.jpg', 'genre_ids': [35], 'id': 4719, 'origin_country': ['CA', 'US'], 'original_language': 'en', 'original_name': 'Police Academy: The Series', 'overview': \"Police Academy: The Series is a syndicated 1997 television series spin-off from the Police Academy series of films. Michael Winslow was the only actor from the Police Academy films to have a recurring role on the show, although several of the film's cast made occasional guest appearances. The series was written by Paul Maslansky and produced by James Margellos and Gary M. Goodman. Music by Ari Wise and Jim Guttridge\", 'popularity': 33.449, 'poster_path': '/9KAPETuGQmuOI17h5rYWeABAICv.jpg', 'first_air_date': '1997-09-22', 'name': 'Police Academy: The Series', 'vote_average': 5.6, 'vote_count': 22}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18], 'id': 228528, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Cruel Intentions', 'overview': \"At an elite Washington, D.C., college, two ruthless step-siblings will do anything to stay on top of the cutthroat social hierarchy. After a brutal hazing incident threatens the entire Panhellenic system at their school, they'll do whatever is necessary to preserve their power and reputation, even if that means seducing the daughter of the vice president of the United States.\", 'popularity': 5.917, 'poster_path': None, 'first_air_date': '', 'name': 'Cruel Intentions', 'vote_average': 0.0, 'vote_count': 0}, {'adult': False, 'backdrop_path': '/mgvMMxKz4eDLeompM9oJRDufNdW.jpg', 'genre_ids': [10759, 16, 35, 9648], 'id': 2286, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Real Ghostbusters', 'overview': 'The continuing adventures of paranormal investigators Dr. Peter Venkman, Dr. Egon Spengler, Dr. Ray Stantz, Winston Zeddemore, their secretary Janine Melnitz and their mascot ghost Slimer.', 'popularity': 125.84, 'poster_path': '/j1xlBYeyOQcH51xQc4gEFJK6o13.jpg', 'first_air_date': '1986-09-13', 'name': 'The Real Ghostbusters', 'vote_average': 7.498, 'vote_count': 226}, {'adult': False, 'backdrop_path': '/1LyPGN2D5MtMeCPzmfq5QC5zaXv.jpg', 'genre_ids': [35], 'id': 202213, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'History of the World: Part II', 'overview': 'Explore different periods of human history through a variety of sketches.', 'popularity': 31.569, 'poster_path': '/6PlHUsScubMx3VADGRh1kIylML2.jpg', 'first_air_date': '2023-03-06', 'name': 'History of the World: Part II', 'vote_average': 5.361, 'vote_count': 54}, {'adult': False, 'backdrop_path': '/cElydeQSNZmX8NRFPEB0FTTYigo.jpg', 'genre_ids': [18], 'id': 74169, 'origin_country': ['IT'], 'original_language': 'it', 'original_name': 'Anna Karenina', 'overview': 'Anna and Kitty. Two lives. One of desperate passion that ends in tragedy, the other, an existence made real through love. Two destinies that interweave, giving rise to two, so very different stories, yet lived in pursuit of the same desire- to find a love that lets them fully be themselves, to live without having to conform to society\u2019s pretenses.', 'popularity': 19.062, 'poster_path': '/b6seDdJl7B1bRcy32qgAqZAMNNY.jpg', 'first_air_date': '2013-12-02', 'name': 'Anna Karenina', 'vote_average': 7.286, 'vote_count': 14}, {'adult': False, 'backdrop_path': '/lwcRxaeAYNox5dyoUYqEDS9NZYK.jpg', 'genre_ids': [35], 'id': 127620, 'origin_country': ['ES'], 'original_language': 'es', 'original_name': 'Se\u00f1or, dame paciencia', 'overview': '', 'popularity': 10.211, 'poster_path': '/9oIcKDhNXpi6wVdLhQQApdp9YLz.jpg', 'first_air_date': '2022-01-02', 'name': 'Lord, Give Me Patience', 'vote_average': 4.25, 'vote_count': 4}, {'adult': False, 'backdrop_path': '/yYPFzdQdRzeidwl3llxFFOKyNwe.jpg', 'genre_ids': [18, 80], 'id': 127585, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'American Gigolo', 'overview': 'Julian Kaye has always been an object of desire, so much so that people are willing to destroy him in order to have him. Exonerated, after 15 years in prison for a murder he didn\u2019t commit, he now faces the challenge of picking up the pieces as the detective who put him behind bars tries to unravel the mystery that led to his wrongful incarceration.', 'popularity': 37.733, 'poster_path': '/m0nRFOLYUju4XHG7v2jZZf3n6vs.jpg', 'first_air_date': '2022-09-11', 'name': 'American Gigolo', 'vote_average': 7.054, 'vote_count': 56}, {'adult': False, 'backdrop_path': '/iS0zzzkRHmE1nsDLJWfaYlQbXF5.jpg', 'genre_ids': [18], 'id': 4278, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Friday Night Lights', 'overview': 'The trials and triumphs of life in the small town of Dillon, Texas, where high school football is everything.', 'popularity': 120.301, 'poster_path': '/Eu7MzZY1DldJ683z7vLkILHNRD.jpg', 'first_air_date': '2006-10-03', 'name': 'Friday Night Lights', 'vote_average': 8.0, 'vote_count': 250}, {'adult': False, 'backdrop_path': '/4yvQlzOaOWleR2kFW4zs1pllMYU.jpg', 'genre_ids': [35], 'id': 1462, 'origin_country': ['GB'], 'original_language': 'en', 'original_name': 'Let Them Eat Cake', 'overview': 'Let Them Eat Cake is a British sitcom starring Dawn French and Jennifer Saunders set in France, 1782, just seven years before the French Revolution. It is one of the few programmes in which French and Saunders have appeared which they did not create themselves.', 'popularity': 7.906, 'poster_path': '/x3qKj73qC65xMGBpwRsXlK2VLDZ.jpg', 'first_air_date': '1999-09-09', 'name': 'Let Them Eat Cake', 'vote_average': 6.8, 'vote_count': 5}, {'adult': False, 'backdrop_path': '/iXrseWaiQSmGQjePTj8pmd4pMCp.jpg', 'genre_ids': [18, 10765], 'id': 1475, 'origin_country': ['US', 'CA'], 'original_language': 'en', 'original_name': 'The Dead Zone', 'overview': 'Johnny Smith discovers he has developed psychic abilities after a coma.', 'popularity': 89.1, 'poster_path': '/j9l4svOscUWoVqGoATtGEDfTms.jpg', 'first_air_date': '2002-06-16', 'name': 'The Dead Zone', 'vote_average': 7.2, 'vote_count': 131}, {'adult': False, 'backdrop_path': '/4EDRjZAxcqwVv4Qj4ZoNbA1S8U1.jpg', 'genre_ids': [35, 16, 10762], 'id': 2831, 'origin_country': ['CA', 'US'], 'original_language': 'en', 'original_name': 'Ace Ventura: Pet Detective', 'overview': 'Ace Ventura: Pet Detective is an animated television series based on the film of the same name. The series was produced by Morgan Creek Productions and Nelvana for Warner Bros. Studios. It aired for two seasons from 1995 to 1997 on CBS. A third season and reruns of previous episodes aired on Nickelodeon from 1999 to 2000.', 'popularity': 65.226, 'poster_path': '/hMaEc8qqRgBP1DLbx89r70nvNUW.jpg', 'first_air_date': '1995-12-09', 'name': 'Ace Ventura: Pet Detective', 'vote_average': 4.543, 'vote_count': 23}, {'adult': False, 'backdrop_path': '/qciatHh45qIWn6cn8MU7l4Ogo5r.jpg', 'genre_ids': [10759, 9648, 18, 10765], 'id': 2925, 'origin_country': ['AU', 'CA', 'US'], 'original_language': 'en', 'original_name': 'BeastMaster', 'overview': 'BeastMaster is a Canadian television series that aired from 1999 to 2002. It was loosely based on a 1982 MGM film The Beastmaster. The series aired for three complete seasons. It is produced by Coote/Hayes Productions.\\n\\nThe series was nominated for the Open Craft Award in the category of cinematography by the Australian Film Institute in 2000, and for the Saturn Award for Best Syndicated/Cable Television Series by the Academy of Science Fiction, Fantasy, and Horror Films, USA, in 2001. BeastMaster is currently running in syndication on Sci-Fi Channel in the USA, but not in any prime-time slots.', 'popularity': 65.157, 'poster_path': '/kp0BYJwFfPlkSejAoIGc2GR77bD.jpg', 'first_air_date': '1999-10-09', 'name': 'BeastMaster', 'vote_average': 6.2, 'vote_count': 45}, {'adult': False, 'backdrop_path': '/jPyKuRjloYkjVWNPtXCrYxtg3Bu.jpg', 'genre_ids': [10759, 16, 35, 10765, 10762], 'id': 2745, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Aladdin', 'overview': 'Aladdin is an animated television series made by Walt Disney Television which aired from 1994 to 1995, based on the original 1992 feature. It was animated at the Slightly Offbeat Productions Studios in Penrose, Auckland, New Zealand. Coming on the heels of the direct-to-video sequel The Return of Jafar, the series picked up where that installment left off, with Aladdin now living in the palace, engaged to beautiful and spunky Princess Jasmine. \"Al\" and Jasmine went together into peril among sorcerers, monsters, thieves, and more. Monkey sidekick Abu, the animated Magic Carpet, and the fast-talking, shape-shifting Genie came along to help, as did sassy, complaining parrot Iago, formerly Jafar\u2019s pet but now an antihero. Jafar, having previously been destroyed in the second movie, returns in only one episode which also serves as a crossover with Hercules: The Animated Series.', 'popularity': 113.404, 'poster_path': '/nlaiczW81kY46GBdfIcTrBIqr8I.jpg', 'first_air_date': '1994-02-06', 'name': 'Aladdin', 'vote_average': 6.9, 'vote_count': 315}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "results": "```python\nimport requests\n\n# Set the API url to get the trending TV shows for the day\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    \n    # Get the URL of the poster for the most trending TV show\n    if len(data[\"results\"]) > 0:\n        trending_tv_show = data[\"results\"][0]\n        poster_url = f\"https://image.tmdb.org/t/p/original{trending_tv_show['poster_path']}\"\n        print(\"Poster URL of today's most trending TV show:\", poster_url)\n    else:\n        print(\"No trending TV shows found for today\")\nelse:\n    print(\"Failed to retrieve trending TV show data. Status code:\", response.status_code)\n```",
        "executed": "Poster URL of today's most trending TV show: https://image.tmdb.org/t/p/original/tw3tzfXaSpmUZIB8ZNqNEGzMBCy.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "results": "```python\n# First, we need to find Jeremy Clarkson's person_id\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nparams = {\n    \"query\": \"Jeremy Clarkson\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\ndata = response.json()\nperson_id = data['results'][0]['id']\n\n# Next, we need to get the TV credits for Jeremy Clarkson\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\", headers=headers)\ntv_credits_data = response.json()\n\n# Now, we will find the most popular TV show Jeremy Clarkson has worked on\nmax_popularity = 0\nmost_popular_show = \"\"\n\nfor show in tv_credits_data['cast']:\n    if show['popularity'] > max_popularity:\n        max_popularity = show['popularity']\n        most_popular_show = show['name']\n\n# Finally, we will find the people who have worked with Jeremy Clarkson in his most popular TV show\nfor show in tv_credits_data['cast']:\n    if show['name'] == most_popular_show:\n        cast_members = show['cast']\n        for member in cast_members:\n            if member['name'] != 'Jeremy Clarkson': # To exclude Jeremy Clarkson from the list\n                print(member['name'])\n                break\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "results": "```python\nimport requests\n\n# Define the API endpoints\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_credits_url = \"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits\"\nperson_images_url = \"https://api.themoviedb.org/3/person/{person_id}/images\"\n\n# Set the API token in headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Black Mirror\" to get its ID\nsearch_params = {\n    \"query\": \"Black Mirror\"\n}\nresponse = requests.get(search_tv_url, headers=headers, params=search_params)\ntv_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits of the first episode of the second season of Black Mirror\ntv_credits_params = {\n    \"tv_id\": tv_id,\n    \"season_number\": 2,\n    \"episode_number\": 1\n}\nresponse = requests.get(tv_credits_url.format(tv_id=tv_id, season_number=2, episode_number=1), headers=headers, params=tv_credits_params)\nlead_actor_id = response.json()[\"cast\"][0][\"id\"]\n\n# Get the images of the lead actor\nresponse = requests.get(person_images_url.format(person_id=lead_actor_id), headers=headers)\nlead_actor_image_path = response.json()[\"profiles\"][0][\"file_path\"]\n\nprint(\"The lead actor of the first episode of the second season of Black Mirror looks like:\")\nprint(f\"https://image.tmdb.org/t/p/w500{lead_actor_image_path}\")\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "results": "```python\nimport requests\n\n# Define the API url to search for TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Define the query parameter to search for \"The Mandalorian\"\nparams_search_tv = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\n\n# Make the API call to search for TV shows\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\n\n# Check if the response status is successful\nif response_search_tv.status_code == 200:\n    # Get the results from the response\n    results_search_tv = response_search_tv.json()[\"results\"]\n    if results_search_tv:\n        # Get the TV show id for \"The Mandalorian\"\n        tv_id = results_search_tv[0][\"id\"]\n        \n        # Define the API url to get the credits for the TV show\n        url_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n        \n        # Make the API call to get the credits for \"The Mandalorian\"\n        response_credits = requests.get(url_credits, headers=headers)\n        \n        # Check if the response status is successful\n        if response_credits.status_code == 200:\n            # Get the cast information from the response\n            cast_info = response_credits.json()[\"cast\"]\n            \n            # Find the lead actor of \"The Mandalorian\"\n            for actor in cast_info:\n                if actor[\"order\"] == 0:  # The lead actor usually has the order 0\n                    lead_actor_id = actor[\"id\"]\n                    break\n            \n            # Define the API url to get the person details\n            url_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n            \n            # Make the API call to get the person details of the lead actor\n            response_person = requests.get(url_person, headers=headers)\n            \n            # Check if the response status is successful\n            if response_person.status_code == 200:\n                # Get the birthdate of the lead actor of \"The Mandalorian\"\n                birthdate = response_person.json()[\"birthday\"]\n                print(f\"The lead actor of The Mandalorian is born on: {birthdate}\")\n            else:\n                print(\"Failed to retrieve the lead actor's details\")\n        else:\n            print(\"Failed to retrieve cast details for The Mandalorian\")\n    else:\n        print(\"No results found for The Mandalorian\")\nelse:\n    print(\"Failed to search for TV shows\")\n```",
        "executed": "The lead actor of The Mandalorian is born on: 1975-04-02\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API endpoint to get the list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Getting the popular TV shows data\nresponse = requests.get(url_popular_tv, headers=headers)\ndata = response.json()\n\n# Extracting the TV show ID of the most popular TV show\nmost_popular_tv_id = data['results'][0]['id']\n\n# API endpoint to get the credits (cast and crew) of a TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_id}/credits\"\n\n# Getting the credits data of the most popular TV show\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Extracting the lead actor of the most popular TV show\nlead_actor = data_credits['cast'][0]['name']\n\nprint(f\"The lead actor of today's most popular TV show is: {lead_actor}\")\n```",
        "executed": "The lead actor of today's most popular TV show is: Jimmy Fallon\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ]
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the appropriate parameters for the API call\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request to get popular TV shows\nresponse = requests.get(url_popular_tv, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show ID of the most popular TV show\ntv_show_id = data[\"results\"][0][\"id\"]\n\n# Define the API endpoint to get the credits of the TV show\nurl_tv_credits = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n\n# Make the API request to get the credits of the TV show\nresponse_credits = requests.get(url_tv_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the profile path of the lead actor\nlead_actor_profile_path = data_credits[\"cast\"][0][\"profile_path\"]\n\n# Print the URL of the lead actor's profile image\nif lead_actor_profile_path:\n    lead_actor_image_url = f\"https://image.tmdb.org/t/p/original{lead_actor_profile_path}\"\n    print(lead_actor_image_url)\nelse:\n    print(\"Lead actor profile image not available.\")\n```",
        "executed": "https://image.tmdb.org/t/p/original/fHrPNc8fCbnd1vALo0S38E2E51N.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ]
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "results": "```python\nimport requests\n\n# Set the API key and headers\nAPI_KEY = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\"\n}\n\n# Search for Cate Blanchett\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Cate Blanchett\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nresults = response.json()\n\n# Get the person id for Cate Blanchett\nperson_id = results['results'][0]['id']\n\n# Get the latest TV show credits for Cate Blanchett\nperson_tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(person_tv_credits_url, headers=headers)\ncredits = response.json()\n\n# Get the latest TV show id for Cate Blanchett\nlatest_tv_show_id = credits['cast'][0]['id']\n\n# Get the reviews for the latest TV show\ntv_reviews_url = f\"https://api.themoviedb.org/3/tv/{latest_tv_show_id}/reviews\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(tv_reviews_url, headers=headers, params=params)\ntv_reviews = response.json()\n\n# Extract and print some reviews\nfor review in tv_reviews['results']:\n    print(\"Author:\", review['author'])\n    print(\"Content:\", review['content'])\n    print(\"----\")\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "results": "```python\nimport requests\n\n# API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n\n}\n\n# Search for David Schwimmer\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\ndata = response.json()\n\n# Get David Schwimmer's person ID\nperson_id = data['results'][0]['id']\n\n# Get David Schwimmer's TV show credits\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\ntv_credits_data = response.json()\n\n# Find the most popular TV show\npopular_tv_show = max(tv_credits_data['cast'], key=lambda x: x['popularity'])\n\nprint(\"David Schwimmer's most popular TV show is:\", popular_tv_show['original_name'])\n```",
        "executed": "David Schwimmer's most popular TV show is: The Daily Show\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "results": "```python\nimport requests\n\n# Define the headers including the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Get the TV show ID for Black Mirror\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Black Mirror\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_id = response_search_tv.json()['results'][0]['id']\n\n# 2. Get the credits for the third episode of the second season of Black Mirror\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/episode/3/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndirector = response_credits.json()['crew'][0]['name']\n\nprint(f\"The director of the third episode of the second season of Black Mirror is: {director}\")\n```",
        "executed": "The director of the third episode of the second season of Black Mirror is: Barney Reisz\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Christopher Nolan\nsearch_people_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_people_url, headers=headers, params=params)\ndata = response.json()\n\n# Get Christopher Nolan's ID\nchristopher_nolan_id = None\nif data[\"results\"]:\n    christopher_nolan_id = data[\"results\"][0][\"id\"]\n\nmovies_known_for = []\n\nif christopher_nolan_id:\n    # Get Christopher Nolan's information\n    person_images_url = f\"https://api.themoviedb.org/3/person/{christopher_nolan_id}/images\"\n    response = requests.get(person_images_url, headers=headers)\n    data = response.json()\n\n    # Get images from the response\n    if \"profiles\" in data:\n        images = data[\"profiles\"]\n\n        # Get a list of movies Christopher Nolan is known for based on images\n        for image in images:\n            movie_id = image.get(\"id\")\n            if movie_id:\n                movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n                params = {}\n                response = requests.get(movie_details_url, headers=headers, params=params)\n                movie_data = response.json()\n                movies_known_for.append(movie_data)\n\n# Print the list of movies Christopher Nolan is known for\nfor movie in movies_known_for:\n    print(movie[\"title\"])\n```",
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for movie \"Avatar\"\nurl_avatar = \"https://api.themoviedb.org/3/search/movie\"\nparams_avatar = {\n    \"query\": \"Avatar\",\n    \"include_adult\": False\n}\nresponse_avatar = requests.get(url_avatar, headers=headers, params=params_avatar)\navatar_data = response_avatar.json()\n\n# Step 2: Search for movie \"Avatar: The Way of Water\"\nurl_avatar_water = \"https://api.themoviedb.org/3/search/movie\"\nparams_avatar_water = {\n    \"query\": \"Avatar: The Way of Water\",\n    \"include_adult\": False\n}\nresponse_avatar_water = requests.get(url_avatar_water, headers=headers, params=params_avatar_water)\navatar_water_data = response_avatar_water.json()\n\n# Step 3: Get the average rating for each movie\nrating_avatar = 0\nrating_avatar_water = 0\n\nif avatar_data['total_results'] > 0:\n    rating_avatar = avatar_data['results'][0]['vote_average']\n\nif avatar_water_data['total_results'] > 0:\n    rating_avatar_water = avatar_water_data['results'][0]['vote_average']\n\n# Step 4: Compare the ratings\nresult = \"\"\nif rating_avatar > rating_avatar_water:\n    result = \"Avatar has a higher rating than Avatar: The Way of Water\"\nelif rating_avatar < rating_avatar_water:\n    result = \"Avatar: The Way of Water has a higher rating than Avatar\"\nelse:\n    result = \"Avatar and Avatar: The Way of Water have the same rating\"\n\nprint(result)\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "results": "```python\nimport requests\n\n# API url\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n# Parameters\nparams = {\n    \"api_key\": \"YOUR_API_KEY\",\n    \"language\": \"en-US\",\n    \"page\": 1,\n    \"primary_release_year\": 2021,\n    \"vote_average.gte\": 7.0,\n    \"with_original_language\": \"en\"\n}\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Display the movie titles\nif response.status_code == 200:\n    results = data['results']\n    for movie in results:\n        print(movie['title'])\nelse:\n    print(\"Error in fetching data\")\n```",
        "executed": "Dune\nSpider-Man: No Way Home\nGodzilla vs. Kong\nEncanto\nWeekend Warriors\nShang-Chi and the Legend of the Ten Rings\nThe Fallout\nThe Suicide Squad\nZack Snyder's Justice League\nThe Conjuring: The Devil Made Me Do It\nSing 2\nLuca\nWrath of Man\nThe Tomorrow War\nA Quiet Place Part II\nGhostbusters: Afterlife\nBlack Widow\nAfter We Fell\nUs Again\nCruella\n",
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "results": "```python\nimport requests\n\n# Define the API url to search for the movie \"Lord of the Rings\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Send a GET request to search for the movie\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the movie genre\nif 'results' in data and len(data['results']) > 0:\n    movie_id = data['results'][0]['id']\n    url_movie_details = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    response_movie_details = requests.get(url_movie_details, headers=headers)\n    data_movie_details = response_movie_details.json()\n    if 'genres' in data_movie_details:\n        genres = [genre['name'] for genre in data_movie_details['genres']]\n        print(genres)\n    else:\n        print(\"Genre information not found.\")\nelse:\n    print(\"Movie not found.\")\n```",
        "executed": "['Adventure', 'Fantasy', 'Action']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ]
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the popular person API\npopular_person_url = \"https://api.themoviedb.org/3/person/popular\"\nresponse = requests.get(popular_person_url, headers=headers)\n\nif response.status_code == 200:\n    popular_person_data = response.json()\n    # Get the birthday of the most popular person\n    most_popular_person = popular_person_data['results'][0]\n    birthday = most_popular_person.get('birthday', 'Birthday information not available')\n    print(\"The birthday of the most popular person right now is:\", birthday)\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "executed": "The birthday of the most popular person right now is: Birthday information not available\n",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "results": "```python\nimport requests\n\n# Replace the API key with your own\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the Big Bang Theory TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Big Bang Theory\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\ntv_id = search_results['results'][0]['id']\n\n# Get the images for the second season of the Big Bang Theory\nseason_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/images\"\nseason_response = requests.get(season_url, headers=headers)\nseason_results = season_response.json()\nposter_path = season_results['posters'][0]['file_path']\n\nprint(poster_path)\n```",
        "executed": "/2NBwUBZ4clwj6qO9fBinfxiB0dR.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "results": "```python\nimport requests\n\n# Headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2/episode/3\"\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    episode_name = data['name']\n    print(\"The name of the third episode of the second season of Mandalorian is:\", episode_name)\nelse:\n    print(\"Error in fetching data. Status code:\", response.status_code)\n```",
        "executed": "The name of the third episode of the second season of Mandalorian is: Chapter 11: The Heiress\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching the movie 'The Shawshank Redemption'\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n    \"include_adult\": False\n}\n\n# Call the API to search for the movie\nresponse = requests.get(search_movie_url, headers=headers, params=params)\nmovie_results = response.json()\n\n# Get the movie ID of 'The Shawshank Redemption' to fetch the credits\nif 'results' in movie_results and len(movie_results['results']) > 0:\n    movie_id = movie_results['results'][0]['id']\n\n    # Define the API endpoint to get the credits of a movie by its ID\n    get_credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n    # Call the API to get the credits of the movie\n    response_credits = requests.get(get_credits_url, headers=headers)\n    credits_info = response_credits.json()\n\n    # Get the lead actor's ID\n    lead_actor_id = None\n    if 'cast' in credits_info and len(credits_info['cast']) > 0:\n        lead_actor_id = credits_info['cast'][0]['id']\n\n    if lead_actor_id:\n        # Define the API endpoint to get the details of a person by ID\n        get_person_details_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n\n        # Call the API to get the details of the lead actor\n        response_person = requests.get(get_person_details_url, headers=headers)\n        person_details = response_person.json()\n\n        if 'birthday' in person_details:\n            lead_actor_birthday = person_details['birthday']\n            print(f\"The birthday of the lead actor of the movie 'The Shawshank Redemption' is: {lead_actor_birthday}\")\n        else:\n            print(\"Birthday information not available for the lead actor.\")\n    else:\n        print(\"Lead actor information not found.\")\nelse:\n    print(\"Movie 'The Shawshank Redemption' not found.\")\n```",
        "executed": "The birthday of the lead actor of the movie 'The Shawshank Redemption' is: 1958-10-16\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/278/credits\"\n\n# Set the headers including the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to get the cast and crew for the movie\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Find the director of the movie The Shawshank Redemption\ncrew = data[\"crew\"]\nfor person in crew:\n    if person[\"job\"] == \"Director\":\n        director_id = person[\"id\"]\n        break\n\n# Using the director's id to find the birthday\nperson_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\nperson_response = requests.get(person_url, headers=headers)\nperson_data = person_response.json()\n\n# Extract the birthday of the director\nbirthday = person_data[\"birthday\"]\nprint(birthday)\n```",
        "executed": "1959-01-28\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the movie The Shawshank Redemption\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\"\n}\nresponse_search = requests.get(search_movie_url, headers=headers, params=params_search_movie)\ndata_search = response_search.json()\n\n# Step 2: Get the production company of the movie\ncompany_id = data_search['results'][0]['production_companies'][0]['id']\n\n# Step 3: Get the company details by id\ncompany_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse_company = requests.get(company_url, headers=headers)\ndata_company = response_company.json()\n\n# Extracting the headquarters of the company\nheadquarter_location = data_company['headquarters']\n\nprint(\"The headquarter of the company that created the movie The Shawshank Redemption is:\", headquarter_location)\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the query parameter to search for the collection\nparams = {\n    \"query\": \"Star Wars\"\n}\n\n# Set the HTTP header with the required Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the company id that created the Star Wars collection\nstar_wars_collection = None\nfor result in data['results']:\n    if result['name'] == \"Star Wars\":\n        star_wars_collection = result\n        break\n\nif star_wars_collection:\n    company_id = star_wars_collection.get('id')\n    # Use the company id to query the company details\n    url_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    response_company = requests.get(url_company, headers=headers)\n    data_company = response_company.json()\n    \n    # Extract the headquarter information of the company\n    headquarter = data_company.get('headquarters')\n    print(\"The headquarter of the company that created the collection Star Wars is:\", headquarter)\nelse:\n    print(\"Star Wars collection not found.\")\n```",
        "executed": "Star Wars collection not found.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "results": "```python\nimport requests\n\n# Define the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Double Life of Veronique\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"The Double Life of Veronique\",\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nveronique_results = search_response.json()[\"results\"]\n\n# Search for the movie \"Mulholland Drive\"\nsearch_params[\"query\"] = \"Mulholland Drive\"\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nmulholland_results = search_response.json()[\"results\"]\n\nveronique_release_date = None\nmulholland_release_date = None\n\n# Get the release dates of the movies\nfor result in veronique_results:\n    if result[\"title\"] == \"The Double Life of Veronique\":\n        veronique_release_date = result[\"release_date\"]\n        break\n\nfor result in mulholland_results:\n    if result[\"title\"] == \"Mulholland Drive\":\n        mulholland_release_date = result[\"release_date\"]\n        break\n\nif veronique_release_date is not None and mulholland_release_date is not None:\n    if veronique_release_date < mulholland_release_date:\n        print(\"The Double Life of Veronique has an earlier release date than Mulholland Drive.\")\n    else:\n        print(\"Mulholland Drive has an earlier release date than The Double Life of Veronique.\")\nelse:\n    print(\"Could not find release dates for both movies.\")\n```",
        "executed": "Could not find release dates for both movies.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "results": "```python\nimport requests\n\n# Define the API url for getting the credits of TV season\nurl_season = \"https://api.themoviedb.org/3/tv/82/season/1/credits\"  # Assuming TV show id 82 corresponds to Twin Peaks Season 1\nresponse_season = requests.get(url_season, headers=headers)\n\n# Define the API url for getting the credits of a movie\nurl_movie = \"https://api.themoviedb.org/3/movie/884/credits\"  # Assuming movie id 884 corresponds to Mulholland Drive\nresponse_movie = requests.get(url_movie, headers=headers)\n\n# Check if the API calls were successful\nif response_season.status_code == 200 and response_movie.status_code == 200:\n    # Get the director of Twin Peaks Season 1\n    crew_season = response_season.json().get('crew', [])\n    director_season = [member['name'] for member in crew_season if member['job'] == 'Director']\n\n    # Get the director of Mulholland Drive\n    crew_movie = response_movie.json().get('crew', [])\n    director_movie = [member['name'] for member in crew_movie if member['job'] == 'Director']\n\n    # Check if the same director worked on both Twin Peaks Season 1 and Mulholland Drive\n    if director_season and director_movie:\n        if director_season[0] == director_movie[0]:\n            print(\"The director of Twin Peaks Season 1 and Mulholland Drive is the same person.\")\n        else:\n            print(\"The director of Twin Peaks Season 1 and Mulholland Drive is different.\")\n    else:\n        print(\"Director information not found for either Twin Peaks Season 1 or Mulholland Drive.\")\nelse:\n    print(\"Failed to retrieve data. Status codes - Season: {}, Movie: {}\".format(response_season.status_code, response_movie.status_code))\n```",
        "executed": "Director information not found for either Twin Peaks Season 1 or Mulholland Drive.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "results": "```python\nimport requests\n\n# Define the API url for searching the movie \"Mulholland Drive\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the query parameter for searching the movie \"Mulholland Drive\"\nparams = {\n    \"query\": \"Mulholland Drive\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make a GET request to search for the movie \"Mulholland Drive\"\nresponse = requests.get(url_search_movie, headers=headers, params=params)\ndata = response.json()\n\n# Extract the movie ID of \"Mulholland Drive\"\nmovie_id = data['results'][0]['id']\n\n# Define the API url for getting the credits of the movie using its ID\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make a GET request to get the credits of the movie \"Mulholland Drive\"\nresponse_credits = requests.get(url_movie_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Extract the director's name of the movie \"Mulholland Drive\"\ndirector_name = data_credits['crew'][0]['name']\n\n# Define the API url for getting the person details by name\nurl_person_details = f\"https://api.themoviedb.org/3/search/person\"\n\n# Define the query parameter for searching the director's name\nparams_person = {\n    \"query\": director_name,\n    \"page\": 1\n}\n\n# Make a GET request to search for the director's details\nresponse_person = requests.get(url_person_details, headers=headers, params=params_person)\ndata_person = response_person.json()\n\n# Extract the place of birth of the director\ndirector_birth_place = data_person['results'][0]['place_of_birth']\n\nprint(f\"The director of Mulholland Drive was born in: {director_birth_place}\")\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "results": "```python\nimport requests\n\n# Define the API url to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the parameters for the query\nparams = {\n    \"page\": 1\n}\n\n# Define the HTTP header with the Bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Check if Mulholland Drive is in the top rated list\n    for movie in data[\"results\"]:\n        if movie[\"title\"] == \"Mulholland Drive\":\n            print(\"Mulholland Drive is in the Top-10 rated list of the TMDB.\")\n            break\n    else:\n        print(\"Mulholland Drive is not in the Top-10 rated list of the TMDB.\")\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "executed": "Mulholland Drive is not in the Top-10 rated list of the TMDB.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ]
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "results": "```python\nimport requests\n\n# API URL to search for Akira Kurosawa\nakira_url = \"https://api.themoviedb.org/3/search/person\"\nakira_params = {\n    \"query\": \"Akira Kurosawa\",\n    \"include_adult\": False\n}\n\nresponse_akira = requests.get(akira_url, headers=headers, params=akira_params)\nakira_data = response_akira.json()\n\n# Extracting the person id for Akira Kurosawa\nakira_person_id = akira_data['results'][0]['id']\n\n# API URL to get the movie credits for Akira Kurosawa\nakira_credits_url = f\"https://api.themoviedb.org/3/person/{akira_person_id}/movie_credits\"\nakira_credits_params = {}\n\nresponse_akira_credits = requests.get(akira_credits_url, headers=headers, params=akira_credits_params)\nakira_credits_data = response_akira_credits.json()\n\n# Counting the number of movies directed by Akira Kurosawa\nakira_movie_count = len(akira_credits_data['crew'])\n\n# API URL to search for Steven Spielberg\nspielberg_url = \"https://api.themoviedb.org/3/search/person\"\nspielberg_params = {\n    \"query\": \"Steven Spielberg\",\n    \"include_adult\": False\n}\n\nresponse_spielberg = requests.get(spielberg_url, headers=headers, params=spielberg_params)\nspielberg_data = response_spielberg.json()\n\n# Extracting the person id for Steven Spielberg\nspielberg_person_id = spielberg_data['results'][0]['id']\n\n# API URL to get the movie credits for Steven Spielberg\nspielberg_credits_url = f\"https://api.themoviedb.org/3/person/{spielberg_person_id}/movie_credits\"\nspielberg_credits_params = {}\n\nresponse_spielberg_credits = requests.get(spielberg_credits_url, headers=headers, params=spielberg_credits_params)\nspielberg_credits_data = response_spielberg_credits.json()\n\n# Counting the number of movies directed by Steven Spielberg\nspielberg_movie_count = len(spielberg_credits_data['crew'])\n\n# Comparing the number of movies directed by Akira Kurosawa and Steven Spielberg\nif akira_movie_count > spielberg_movie_count:\n    print(\"Akira Kurosawa directed more movies.\")\nelif spielberg_movie_count > akira_movie_count:\n    print(\"Steven Spielberg directed more movies.\")\nelse:\n    print(\"Both Akira Kurosawa and Steven Spielberg directed the same number of movies.\")\n```",
        "executed": "Steven Spielberg directed more movies.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/latest"
        ]
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "results": "```python\nimport requests\n\n# Http header for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person with name \"David Lynch\" who is the director of Mulholland Drive\nquery_params = {\n    \"query\": \"David Lynch\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=query_params)\ndata = response.json()\n\n# Get the person id of David Lynch\nperson_id = data[\"results\"][0][\"id\"]\n\n# Get the TV show credits for David Lynch\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\ntv_credits_data = response.json()\n\n# Find the TV series directed by David Lynch\ntv_series_directed = []\nfor credit in tv_credits_data[\"crew\"]:\n    if credit[\"job\"] == \"Director\":\n        tv_series_directed.append(credit[\"name\"])\n\nprint(tv_series_directed)\n```",
        "executed": "['On the Air', 'Twin Peaks', 'DumbLand', 'Hotel Room']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Scarlett Johansson\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Scarlett Johansson\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\nif search_response.status_code == 200 and search_data[\"total_results\"] > 0:\n    person_id = search_data[\"results\"][0][\"id\"]\n    \n    # Get person details by id\n    person_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n    person_response = requests.get(person_url, headers=headers)\n    person_data = person_response.json()\n\n    if person_response.status_code == 200:\n        birthday = person_data[\"birthday\"]\n        print(\"Scarlett Johansson's birthday is:\", birthday)\n    else:\n        print(\"Error: Failed to get actor's details\")\nelse:\n    print(\"Error: Actor not found\")\n\n```",
        "executed": "Scarlett Johansson's birthday is: 1984-11-22\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "results": "```python\nimport requests\n\n# Define the API url for searching TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n# Define the parameters for searching TV show\nparams = {\n    \"query\": \"Sword Art Online\",\n    \"include_adult\": False\n}\n# Define the HTTP headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to search for TV show\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the TV show id of \"Sword Art Online\"\nif 'results' in data and len(data['results']) > 0:\n    tv_id = data['results'][0]['id']\n\n    # Define the API url for getting the TV show details by id\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    # Send a GET request to get the TV show details\n    response = requests.get(url, headers=headers)\n    data = response.json()\n\n    # Get the number of seasons of \"Sword Art Online\"\n    num_seasons = data['number_of_seasons']\n    print(f\"The number of seasons of Sword Art Online is: {num_seasons}\")\nelse:\n    print(\"Sword Art Online TV show not found.\")\n```",
        "executed": "The number of seasons of Sword Art Online is: 4\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "results": "```python\nimport requests\n\n# Define the HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"We Married as Job\" to get its id\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"We Married as Job\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Check if the search was successful and the movie was found\nif search_data[\"total_results\"] > 0:\n    movie_id = search_data[\"results\"][0][\"id\"]\n\n    # Get the cast and crew for the movie with id = movie_id\n    cast_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    cast_response = requests.get(cast_url, headers=headers)\n    cast_data = cast_response.json()\n\n    # Check if Yui Aragaki and Gen Hoshino are part of the cast\n    cast_list = cast_data[\"cast\"]\n    yui_aragaki_present = False\n    gen_hoshino_present = False\n    for cast_member in cast_list:\n        if cast_member[\"name\"] == \"Yui Aragaki\":\n            yui_aragaki_present = True\n        elif cast_member[\"name\"] == \"Gen Hoshino\":\n            gen_hoshino_present = True\n\n    if yui_aragaki_present and gen_hoshino_present:\n        print(\"Yes, Yui Aragaki and Gen Hoshino are co-starring in We Married as Job.\")\n    else:\n        print(\"No, Yui Aragaki and Gen Hoshino are not co-starring in We Married as Job.\")\nelse:\n    print(\"Movie 'We Married as Job' not found.\")\n\n```",
        "executed": "Yes, Yui Aragaki and Gen Hoshino are co-starring in We Married as Job.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "results": "```python\nimport requests\n\n# Set the API url for searching movies\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the API url for retrieving credits of a movie\nurl_movie_credits = \"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Set the API url for retrieving credits of a TV show\nurl_tv_credits = \"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n\n# Set the API headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the director of the movie \"Barbie\"\nparams_search_movie_barbie = {\"query\": \"Barbie\"}\nresponse_search_movie_barbie = requests.get(url_search_movie, headers=headers, params=params_search_movie_barbie)\ndirector_barbie_id = response_search_movie_barbie.json()[\"results\"][0][\"id\"]\n\n# Get the lead actor of the TV show \"DEATH NOTE\"\nparams_search_tv_death_note = {\"query\": \"DEATH NOTE\"}\nresponse_search_tv_death_note = requests.get(url_search_tv, headers=headers, params=params_search_tv_death_note)\nlead_actor_death_note_id = response_search_tv_death_note.json()[\"results\"][0][\"id\"]\n\n# Get the credits of the director of the movie \"Barbie\"\nurl_movie_director_credits = url_movie_credits.format(movie_id=director_barbie_id)\nresponse_movie_director_credits = requests.get(url_movie_director_credits, headers=headers)\ndirector_birthday = response_movie_director_credits.json()[\"crew\"][0][\"birthday\"]\n\n# Get the credits of the lead actor of the TV show \"DEATH NOTE\"\nurl_tv_lead_actor_credits = url_tv_credits.format(tv_id=lead_actor_death_note_id)\nresponse_tv_lead_actor_credits = requests.get(url_tv_lead_actor_credits, headers=headers)\nlead_actor_birthday = response_tv_lead_actor_credits.json()[\"cast\"][0][\"birthday\"]\n\n# Calculate the age difference in years\ndef calculate_age(birthdate):\n    birth_year = int(birthdate.split(\"-\")[0])\n    current_year = 2021\n    return current_year - birth_year\n\ndirector_age = calculate_age(director_birthday)\nlead_actor_age = calculate_age(lead_actor_birthday)\nage_difference = abs(director_age - lead_actor_age)\n\nprint(\"The director of the movie Barbie is older than the lead actor of the TV show DEATH NOTE.\")\nprint(\"By\", age_difference, \"years.\")\n```",
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for Katherine LaNasa\nperson_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Katherine LaNasa\",\n}\nresponse = requests.get(person_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person_id of Katherine LaNasa\nperson_id = data['results'][0]['id']\n\n# Step 2: Get the movie credits of Katherine LaNasa\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovie_credits = response.json()\n\n# Get the latest movie appearance of Katherine LaNasa\nlatest_movie = movie_credits['cast'][0]\n\nprint(\"Katherine LaNasa's latest movie appearance:\")\nprint(\"Title:\", latest_movie['title'])\nprint(\"Character:\", latest_movie['character'])\nprint(\"Release Date:\", latest_movie['release_date'])\n```",
        "executed": "Katherine LaNasa's latest movie appearance:\nTitle: Black Karen\nCharacter: Therapist\nRelease Date: 2022-01-23\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Search for the movie 'Oppenheimer'\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Oppenheimer\"\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nresults = response.json()[\"results\"]\n\nif results:  # If there are search results\n    movie_id = results[0][\"id\"]  # Get the movie id of the first result\n\n    # 2. Get the images of the movie with id\n    images_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n    images_params = {}\n    images_response = requests.get(images_url, headers=headers, params=images_params)\n    \n    # Get the cover image of the movie\n    cover_image = images_response.json()[\"posters\"][0][\"file_path\"]\n    print(f\"The cover image of the movie 'Oppenheimer': https://image.tmdb.org/t/p/original{cover_image}\")\n\nelse:\n    print(\"Movie 'Oppenheimer' not found.\")\n```",
        "executed": "The cover image of the movie 'Oppenheimer': https://image.tmdb.org/t/p/original/8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    }
]