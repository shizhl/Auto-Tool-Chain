[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person with the name \"Sofia Coppola\"\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\"query\": \"Sofia Coppola\", \"include_adult\": False}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Check if the search results contain any person with the name \"Sofia Coppola\"\nif search_data[\"total_results\"] > 0:\n    person_id = search_data[\"results\"][0][\"id\"]\n\n    # Get the movie credits for the person with ID found above\n    credit_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    credit_response = requests.get(credit_url, headers=headers)\n    credit_data = credit_response.json()\n\n    # Count the number of movies directed by Sofia Coppola\n    directed_movies = [movie for movie in credit_data[\"crew\"] if movie[\"job\"] == \"Director\"]\n    number_of_movies_directed = len(directed_movies)\n\n    print(f\"The number of movies directed by Sofia Coppola is: {number_of_movies_directed}\")\n\nelse:\n    print(\"No results found for Sofia Coppola\")\n```",
        "usage": [
            439,
            11329,
            11768
        ],
        "executed": "The number of movies directed by Sofia Coppola is: 14\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url to get the list of similar movies to The Dark Knight\nurl = \"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\nmovie_id = 155  # The Dark Knight movie id\nurl = url.replace(\"{movie_id}\", str(movie_id))\n\n# Define the parameters for the API request\nparams = {\n    'page': 1\n}\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if the request was successful and get the lead actor's name\nif response.status_code == 200:\n    # Assuming the lead actor is the first one in the cast list of the first similar movie\n    lead_actor = data['results'][0]['cast'][0]['name']\n    print(f\"The lead actor in the movie The Dark Knight is: {lead_actor}\")\nelse:\n    print(\"Failed to fetch the lead actor information\")\n\n```",
        "usage": [
            380,
            11793,
            12173
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url for getting the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the query parameters\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the top rated movie\n    top_rated_movie = response.json()[\"results\"][0]\n    \n    # Get the movie id\n    movie_id = top_rated_movie[\"id\"]\n    \n    # Make a request to get the details of the top rated movie\n    movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    movie_details_response = requests.get(movie_details_url, headers=headers)\n    \n    # Check if the request was successful\n    if movie_details_response.status_code == 200:\n        # Get the details of the top rated movie\n        movie_details = movie_details_response.json()\n        \n        # Get the director of the movie\n        crew = movie_details.get(\"credits\", {}).get(\"crew\", [])\n        director = [member[\"name\"] for member in crew if member[\"job\"] == \"Director\"]\n        \n        if director:\n            print(f\"The director of the top rated movie is: {director[0]}\")\n        else:\n            print(\"Director information not found.\")\n    else:\n        print(\"Error in getting movie details\")\nelse:\n    print(\"Error in getting top rated movies\")\n```",
        "usage": [
            333,
            12712,
            13045
        ],
        "executed": "Director information not found.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "give me a image for the collection Star Wars",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection with the name Star Wars\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\n\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    \n    # Get the image path for Star Wars collection\n    if data.get(\"results\"):\n        star_wars_collection = data[\"results\"][0]\n        image_path = star_wars_collection.get(\"backdrop_path\")\n        \n        if image_path:\n            print(f\"Image path for Star Wars collection: {image_path}\")\n        else:\n            print(\"No image found for Star Wars collection\")\n    else:\n        print(\"No collection found for Star Wars\")\nelse:\n    print(\"Error: Unable to fetch data from the API\")\n\n```",
        "usage": [
            366,
            12849,
            13215
        ],
        "executed": "Image path for Star Wars collection: /d8duYyyC9J5T825Hg7grmaabfxQ.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the company (Walt Disney)\nsearch_company_url = \"https://api.themoviedb.org/3/search/company\"\nparams = {\n    \"query\": \"Walt Disney\"\n}\nresponse = requests.get(search_company_url, headers=headers, params=params)\ncompany_id = response.json()['results'][0]['id']\n\n# Get the company details by id\ncompany_details_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse = requests.get(company_details_url, headers=headers)\nlogo_path = response.json()['logo_path']\n\nprint(f\"The logo path of Walt Disney is: {logo_path}\")\n```",
        "usage": [
            310,
            10326,
            10636
        ],
        "executed": "The logo path of Walt Disney is: /rRGi5UkwvdOPSfr5Xf42RZUsYgd.png\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ]
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/597/credits\"  # 597 is the movie_id for Titanic\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the response data\n    data = response.json()\n    \n    # Extract the lead actor details\n    lead_actor = data[\"cast\"][0]\n    \n    # Get the profile path if available\n    profile_path = lead_actor.get(\"profile_path\", \"No image available\")\n    \n    # Print the lead actor's details and image\n    print(\"Lead Actor of Titanic - {}\".format(lead_actor[\"name\"]))\n    print(\"Character - {}\".format(lead_actor[\"character\"]))\n    print(\"Image URL - https://image.tmdb.org/t/p/w500/{}\".format(profile_path))\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            386,
            12471,
            12857
        ],
        "executed": "Lead Actor of Titanic - Leonardo DiCaprio\nCharacter - Jack Dawson\nImage URL - https://image.tmdb.org/t/p/w500//wo2hJpn04vbtmh0B9utCFdsQhxM.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url for searching a movie similar to Titanic\nurl_search_similar = \"https://api.themoviedb.org/3/movie/597/similar\"\n\n# Set the API url for fetching reviews of a movie\nurl_movie_reviews = \"https://api.themoviedb.org/3/movie/{}/reviews\"\n\n# Define the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of movies similar to Titanic\nresponse = requests.get(url_search_similar, headers=headers)\ndata = response.json()\n\n# Check if there are any similar movies\nif 'results' in data and len(data['results']) > 0:\n    # Get the id of the first similar movie\n    similar_movie_id = data['results'][0]['id']\n    \n    # Call the API to get the reviews of the first similar movie\n    response_reviews = requests.get(url_movie_reviews.format(similar_movie_id), headers=headers)\n    reviews_data = response_reviews.json()\n    \n    reviews = reviews_data['results']\n    print(reviews)\nelse:\n    print(\"No similar movies found for Titanic\")\n```",
        "usage": [
            401,
            11197,
            11598
        ],
        "executed": "[]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular"
        ]
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the Titanic movie id\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=params)\ntitanic_id = response.json()[\"results\"][0][\"id\"]\n\n# Get movie recommendations for Titanic\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(f\"https://api.themoviedb.org/3/movie/{titanic_id}/recommendations\", headers=headers, params=params)\nrecommendations = response.json()[\"results\"]\n\nprint(recommendations)\n```",
        "usage": [
            315,
            11353,
            11668
        ],
        "executed": "[{'adult': False, 'backdrop_path': '/hziiv14OpD73u9gAak4XDDfBKa2.jpg', 'id': 671, 'title': \"Harry Potter and the Philosopher's Stone\", 'original_language': 'en', 'original_title': \"Harry Potter and the Philosopher's Stone\", 'overview': \"Harry Potter has lived under the stairs at his aunt and uncle's house his whole life. But on his 11th birthday, he learns he's a powerful wizard\u2014with a place waiting for him at the Hogwarts School of Witchcraft and Wizardry. As he learns to harness his newfound powers with the help of the school's kindly headmaster, Harry uncovers the truth about his parents' deaths\u2014and about the villain who's to blame.\", 'poster_path': '/wuMc08IPKEatf9rnMNXvIDxqP4W.jpg', 'media_type': 'movie', 'genre_ids': [12, 14], 'popularity': 161.952, 'release_date': '2001-11-16', 'video': False, 'vote_average': 7.915, 'vote_count': 26214}, {'adult': False, 'backdrop_path': '/2P0toWq3feNvFAzf28j7vNc1IuZ.jpg', 'id': 106646, 'title': 'The Wolf of Wall Street', 'original_language': 'en', 'original_title': 'The Wolf of Wall Street', 'overview': \"A New York stockbroker refuses to cooperate in a large securities fraud case involving corruption on Wall Street, corporate banking world and mob infiltration. Based on Jordan Belfort's autobiography.\", 'poster_path': '/34m2tygAYBGqA9MXKhRDtzYd4MR.jpg', 'media_type': 'movie', 'genre_ids': [80, 18, 35], 'popularity': 91.349, 'release_date': '2013-12-25', 'video': False, 'vote_average': 8.035, 'vote_count': 22979}, {'adult': False, 'backdrop_path': '/8XyX5Us7uzwQdXtAdnhCB9Gquek.jpg', 'id': 297761, 'title': 'Suicide Squad', 'original_language': 'en', 'original_title': 'Suicide Squad', 'overview': 'From DC Comics comes the Suicide Squad, an antihero team of incarcerated supervillains who act as deniable assets for the United States government, undertaking high-risk black ops missions in exchange for commuted prison sentences.', 'poster_path': '/xFw9RXKZDvevAGocgBK0zteto4U.jpg', 'media_type': 'movie', 'genre_ids': [28, 12, 14], 'popularity': 45.581, 'release_date': '2016-08-03', 'video': False, 'vote_average': 5.912, 'vote_count': 20495}, {'adult': False, 'backdrop_path': '/ecvy2kMxsJ60ej52beZ0F8EOGkL.jpg', 'id': 11324, 'title': 'Shutter Island', 'original_language': 'en', 'original_title': 'Shutter Island', 'overview': 'World War II soldier-turned-U.S. Marshal Teddy Daniels investigates the disappearance of a patient from a hospital for the criminally insane, but his efforts are compromised by troubling visions and a mysterious doctor.', 'poster_path': '/4GDy0PHYX3VRXUtwK5ysFbg3kEx.jpg', 'media_type': 'movie', 'genre_ids': [18, 53, 9648], 'popularity': 79.974, 'release_date': '2010-02-14', 'video': False, 'vote_average': 8.202, 'vote_count': 23035}, {'adult': False, 'backdrop_path': '/vL5LR6WdxWPjLPFRLe133jXWsh5.jpg', 'id': 19995, 'title': 'Avatar', 'original_language': 'en', 'original_title': 'Avatar', 'overview': 'In the 22nd century, a paraplegic Marine is dispatched to the moon Pandora on a unique mission, but becomes torn between following orders and protecting an alien civilization.', 'poster_path': '/kyeqWdyUXW608qlYkRqosgbbJyK.jpg', 'media_type': 'movie', 'genre_ids': [28, 12, 14, 878], 'popularity': 113.078, 'release_date': '2009-12-15', 'video': False, 'vote_average': 7.58, 'vote_count': 30572}, {'adult': False, 'backdrop_path': '/m0miV65ZZIp13TNHJSRUF6vmCos.jpg', 'id': 454, 'title': 'Romeo + Juliet', 'original_language': 'en', 'original_title': 'Romeo + Juliet', 'overview': \"In director Baz Luhrmann's contemporary take on William Shakespeare's classic tragedy, the Montagues and Capulets have moved their ongoing feud to the sweltering suburb of Verona Beach, where Romeo and Juliet fall in love and secretly wed. Though the film is visually modern, the bard's dialogue remains.\", 'poster_path': '/eLf4jclPijOqfEp6bDAmezRFxk5.jpg', 'media_type': 'movie', 'genre_ids': [18, 10749], 'popularity': 28.839, 'release_date': '1996-11-01', 'video': False, 'vote_average': 6.793, 'vote_count': 4795}, {'adult': False, 'backdrop_path': '/qdIMHd4sEfJSckfVJfKQvisL02a.jpg', 'id': 13, 'title': 'Forrest Gump', 'original_language': 'en', 'original_title': 'Forrest Gump', 'overview': 'A man with a low IQ has accomplished great things in his life and been present during significant historic events\u2014in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him.', 'poster_path': '/arw2vcBveWOVZr6pxd9XTd1TdQa.jpg', 'media_type': 'movie', 'genre_ids': [35, 18, 10749], 'popularity': 89.774, 'release_date': '1994-06-23', 'video': False, 'vote_average': 8.5, 'vote_count': 26276}, {'adult': False, 'backdrop_path': '/6G73mNyooWAEQTpckPSnFxFoNmc.jpg', 'id': 121, 'title': 'The Lord of the Rings: The Two Towers', 'original_language': 'en', 'original_title': 'The Lord of the Rings: The Two Towers', 'overview': 'Frodo and Sam are trekking to Mordor to destroy the One Ring of Power while Gimli, Legolas and Aragorn search for the orc-captured Merry and Pippin. All along, nefarious wizard Saruman awaits the Fellowship members at the Orthanc Tower in Isengard.', 'poster_path': '/5VTN0pR8gcqV3EPUHHfMGnJYN9L.jpg', 'media_type': 'movie', 'genre_ids': [12, 14, 28], 'popularity': 86.962, 'release_date': '2002-12-18', 'video': False, 'vote_average': 8.392, 'vote_count': 20909}, {'adult': False, 'backdrop_path': '/lxD5ak7BOoinRNehOCA85CQ8ubr.jpg', 'id': 862, 'title': 'Toy Story', 'original_language': 'en', 'original_title': 'Toy Story', 'overview': \"Led by Woody, Andy's toys live happily in his room until Andy's birthday brings Buzz Lightyear onto the scene. Afraid of losing his place in Andy's heart, Woody plots against Buzz. But when circumstances separate Buzz and Woody from their owner, the duo eventually learns to put aside their differences.\", 'poster_path': '/uXDfjJbdP4ijW5hWSBrPrlKpxab.jpg', 'media_type': 'movie', 'genre_ids': [16, 12, 10751, 35], 'popularity': 100.2, 'release_date': '1995-10-30', 'video': False, 'vote_average': 7.972, 'vote_count': 17668}, {'adult': False, 'backdrop_path': '/lh5lbisD4oDbEKgUxoRaZU8HVrk.jpg', 'id': 272, 'title': 'Batman Begins', 'original_language': 'en', 'original_title': 'Batman Begins', 'overview': 'Driven by tragedy, billionaire Bruce Wayne dedicates his life to uncovering and defeating the corruption that plagues his home, Gotham City.  Unable to work within the system, he instead creates a new identity, a symbol of fear for the criminal underworld - The Batman.', 'poster_path': '/4MpN4kIEqUjW8OPtOQJXlTdHiJV.jpg', 'media_type': 'movie', 'genre_ids': [28, 80, 18], 'popularity': 62.431, 'release_date': '2005-06-10', 'video': False, 'vote_average': 7.704, 'vote_count': 20134}, {'adult': False, 'backdrop_path': '/wW7Wt5bXzPy4VOEE4LTIUDyDgBo.jpg', 'id': 22, 'title': 'Pirates of the Caribbean: The Curse of the Black Pearl', 'original_language': 'en', 'original_title': 'Pirates of the Caribbean: The Curse of the Black Pearl', 'overview': \"Jack Sparrow, a freewheeling 18th-century pirate, quarrels with a rival pirate bent on pillaging Port Royal. When the governor's daughter is kidnapped, Sparrow decides to help the girl's love save her.\", 'poster_path': '/z8onk7LV9Mmw6zKz4hT6pzzvmvl.jpg', 'media_type': 'movie', 'genre_ids': [12, 14, 28], 'popularity': 130.933, 'release_date': '2003-07-09', 'video': False, 'vote_average': 7.798, 'vote_count': 19769}, {'adult': False, 'backdrop_path': '/mFreKKBNnB2v678aDq0IZ2jaD8K.jpg', 'id': 281957, 'title': 'The Revenant', 'original_language': 'en', 'original_title': 'The Revenant', 'overview': 'In the 1820s, a frontiersman, Hugh Glass, sets out on a path of vengeance against those who left him for dead after a bear mauling.', 'poster_path': '/wkA03WX3IdHYMX2gIxaCwqowQX.jpg', 'media_type': 'movie', 'genre_ids': [37, 18, 12], 'popularity': 53.441, 'release_date': '2015-12-25', 'video': False, 'vote_average': 7.53, 'vote_count': 17514}, {'adult': False, 'backdrop_path': '/qHhuTmhRCYvj9ls4STFGnaeAPhR.jpg', 'id': 23483, 'title': 'Kick-Ass', 'original_language': 'en', 'original_title': 'Kick-Ass', 'overview': 'Dave Lizewski is an unnoticed high school student and comic book fan who one day decides to become a super-hero, even though he has no powers, training or meaningful reason to do so.', 'poster_path': '/8citjdBmjddZjlPsAHEyCKwGVvD.jpg', 'media_type': 'movie', 'genre_ids': [28, 80], 'popularity': 46.491, 'release_date': '2010-03-22', 'video': False, 'vote_average': 7.1, 'vote_count': 11224}, {'adult': False, 'backdrop_path': '/1GJvBE7UWU1WOVi0XREl4JQc7f8.jpg', 'id': 607, 'title': 'Men in Black', 'original_language': 'en', 'original_title': 'Men in Black', 'overview': 'After a police chase with an otherworldly being, a New York City cop is recruited as an agent in a top-secret organization established to monitor and police alien activity on Earth: the Men in Black. Agent Kay and new recruit Agent Jay find themselves in the middle of a deadly plot by an intergalactic terrorist who has arrived on Earth to assassinate two ambassadors from opposing galaxies.', 'poster_path': '/uLOmOF5IzWoyrgIF5MfUnh5pa1X.jpg', 'media_type': 'movie', 'genre_ids': [28, 12, 35, 878], 'popularity': 51.461, 'release_date': '1997-07-02', 'video': False, 'vote_average': 7.19, 'vote_count': 13187}, {'adult': False, 'backdrop_path': '/mfFhgR9ILPWbYtvbdyAGUo6fbpT.jpg', 'id': 8966, 'title': 'Twilight', 'original_language': 'en', 'original_title': 'Twilight', 'overview': \"When Bella Swan moves to a small town in the Pacific Northwest, she falls in love with Edward Cullen, a mysterious classmate who reveals himself to be a 108-year-old vampire. Despite Edward's repeated cautions, Bella can't stay away from him, a fatal move that endangers her own life.\", 'poster_path': '/3Gkb6jm6962ADUPaCBqzz9CTbn9.jpg', 'media_type': 'movie', 'genre_ids': [14, 18, 10749], 'popularity': 97.684, 'release_date': '2008-11-20', 'video': False, 'vote_average': 6.3, 'vote_count': 12977}, {'adult': False, 'backdrop_path': '/Ag6qhzsJd3k1NKuNrG9RmhZDMh7.jpg', 'id': 640, 'title': 'Catch Me If You Can', 'original_language': 'en', 'original_title': 'Catch Me If You Can', 'overview': 'A true story about Frank Abagnale Jr. who, before his 19th birthday, successfully conned millions of dollars worth of checks as a Pan Am pilot, doctor, and legal prosecutor. An FBI agent makes it his mission to put him behind bars. But Frank not only eludes capture, he revels in the pursuit.', 'poster_path': '/ctjEj2xM32OvBXCq8zAdK3ZrsAj.jpg', 'media_type': 'movie', 'genre_ids': [18, 80], 'popularity': 58.878, 'release_date': '2002-12-16', 'video': False, 'vote_average': 7.977, 'vote_count': 14918}, {'adult': False, 'backdrop_path': '/8ZTVqvKDQ8emSGUEMjsS4yHAwrp.jpg', 'id': 27205, 'title': 'Inception', 'original_language': 'en', 'original_title': 'Inception', 'overview': 'Cobb, a skilled thief who commits corporate espionage by infiltrating the subconscious of his targets is offered a chance to regain his old life as payment for a task considered to be impossible: \"inception\", the implantation of another person\\'s idea into a target\\'s subconscious.', 'poster_path': '/oYuLEt3zVCKq57qu2F8dT7NIa6f.jpg', 'media_type': 'movie', 'genre_ids': [28, 878, 12], 'popularity': 86.506, 'release_date': '2010-07-15', 'video': False, 'vote_average': 8.367, 'vote_count': 35360}, {'adult': False, 'backdrop_path': '/kXfqcdQKsToO0OUXHcrrNCHDBzO.jpg', 'id': 278, 'title': 'The Shawshank Redemption', 'original_language': 'en', 'original_title': 'The Shawshank Redemption', 'overview': 'Framed in the 1940s for the double murder of his wife and her lover, upstanding banker Andy Dufresne begins a new life at the Shawshank prison, where he puts his accounting skills to work for an amoral warden. During his long stretch in prison, Dufresne comes to be admired by the other inmates -- including an older prisoner named Red -- for his integrity and unquenchable sense of hope.', 'poster_path': '/9cqNxx0GxF0bflZmeSMuL5tnGzr.jpg', 'media_type': 'movie', 'genre_ids': [18, 80], 'popularity': 114.769, 'release_date': '1994-09-23', 'video': False, 'vote_average': 8.704, 'vote_count': 25735}, {'adult': False, 'backdrop_path': '/cDJ61O1STtbWNBwefuqVrRe3d7l.jpg', 'id': 10195, 'title': 'Thor', 'original_language': 'en', 'original_title': 'Thor', 'overview': \"Against his father Odin's will, The Mighty Thor - a powerful but arrogant warrior god - recklessly reignites an ancient war. Thor is cast down to Earth and forced to live among humans as punishment. Once here, Thor learns what it takes to be a true hero when the most dangerous villain of his world sends the darkest forces of Asgard to invade Earth.\", 'poster_path': '/prSfAi1xGrhLQNxVSUFh61xQ4Qy.jpg', 'media_type': 'movie', 'genre_ids': [12, 14, 28], 'popularity': 65.411, 'release_date': '2011-04-21', 'video': False, 'vote_average': 6.8, 'vote_count': 20450}, {'adult': False, 'backdrop_path': '/eCynaAOgYYiw5yN5lBwz3IxqvaW.jpg', 'id': 12, 'title': 'Finding Nemo', 'original_language': 'en', 'original_title': 'Finding Nemo', 'overview': \"Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, surfer dude turtles, hypnotic jellyfish, hungry seagulls, and more along the way.\", 'poster_path': '/eHuGQ10FUzK1mdOY69wF5pGgEf5.jpg', 'media_type': 'movie', 'genre_ids': [16, 10751], 'popularity': 89.401, 'release_date': '2003-05-30', 'video': False, 'vote_average': 7.824, 'vote_count': 18526}, {'adult': False, 'backdrop_path': '/x2RS3uTcsJJ9IfjNPcgDmukoEcQ.jpg', 'id': 120, 'title': 'The Lord of the Rings: The Fellowship of the Ring', 'original_language': 'en', 'original_title': 'The Lord of the Rings: The Fellowship of the Ring', 'overview': 'Young hobbit Frodo Baggins, after inheriting a mysterious ring from his uncle Bilbo, must leave his home in order to keep it from falling into the hands of its evil creator. Along the way, a fellowship is formed to protect the ringbearer and make sure that the ring arrives at its final destination: Mt. Doom, the only place where it can be destroyed.', 'poster_path': '/6oom5QYQ2yQTMJIbnvbkBL9cHo6.jpg', 'media_type': 'movie', 'genre_ids': [12, 14, 28], 'popularity': 120.19, 'release_date': '2001-12-18', 'video': False, 'vote_average': 8.409, 'vote_count': 24059}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the latest movie directed by Christopher Nolan\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params={\"query\": \"Christopher Nolan\", \"include_adult\": False, \"page\": 1})\nresults = response.json()[\"results\"]\n\n# Find the latest movie directed by Christopher Nolan\nif results:\n    nolan_id = results[0][\"id\"]\n    movie_credits = requests.get(f\"https://api.themoviedb.org/3/person/{nolan_id}/movie_credits\", headers=headers).json()\n    \n    # Look for the latest movie directed by Christopher Nolan\n    nolan_movies = movie_credits[\"crew\"]\n    latest_nolan_movie = None\n    for movie in nolan_movies:\n        if movie[\"job\"] == \"Director\":\n            if latest_nolan_movie is None or movie[\"release_date\"] > latest_nolan_movie[\"release_date\"]:\n                latest_nolan_movie = movie\n    \n    if latest_nolan_movie:\n        print(f\"The latest movie directed by Christopher Nolan is '{latest_nolan_movie['original_title']}' released on {latest_nolan_movie['release_date']}.\")\n    else:\n        print(\"No director credits found for Christopher Nolan.\")\nelse:\n    print(\"No results found for Christopher Nolan.\")\n```",
        "usage": [
            450,
            10724,
            11174
        ],
        "executed": "The latest movie directed by Christopher Nolan is 'Oppenheimer' released on 2023-07-19.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define a function to get the highest rated movie directed by Martin Scorsese\ndef highest_rated_movie_directed_by_scorsese():\n    # Search for the person id of Martin Scorsese\n    person_search_url = \"https://api.themoviedb.org/3/search/person\"\n    person_params = {\n        \"query\": \"Martin Scorsese\"\n    }\n    response = requests.get(person_search_url, headers=headers, params=person_params)\n    person_data = response.json()\n    \n    # Get the person id of Martin Scorsese\n    person_id = None\n    if person_data[\"total_results\"] > 0:\n        person_id = person_data[\"results\"][0][\"id\"]\n    \n    if person_id:\n        # Get the movie credits of Martin Scorsese\n        movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n        response = requests.get(movie_credits_url, headers=headers)\n        movie_credits_data = response.json()\n        \n        # Find the highest rated movie directed by Martin Scorsese\n        highest_rated_movie = None\n        highest_rating = 0\n        for movie in movie_credits_data[\"cast\"]:\n            if movie[\"vote_average\"] > highest_rating:\n                highest_rating = movie[\"vote_average\"]\n                highest_rated_movie = movie\n        \n        return highest_rated_movie\n    else:\n        return \"Martin Scorsese not found in the database\"\n\n# Call the function to get the highest rated movie directed by Martin Scorsese\nresult = highest_rated_movie_directed_by_scorsese()\nprint(result)\n```",
        "usage": [
            514,
            11444,
            11958
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Provided HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the credits of a movie by movie id\ndef get_movie_credits(movie_id):\n    url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response = requests.get(url, headers=headers)\n    data = response.json()\n    return data\n\n# Function to get the details of a person by person id\ndef get_person_details(person_id):\n    url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n    response = requests.get(url, headers=headers)\n    data = response.json()\n    return data\n\n# Function to search for a movie by title\ndef search_movie(query):\n    url = \"https://api.themoviedb.org/3/search/movie\"\n    params = {\n        \"query\": query\n    }\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n    return data\n\n# Search for Leonardo DiCaprio's latest movie\nsearch_result = search_movie(\"Leonardo DiCaprio\")\nif search_result.get(\"results\"):\n    # Assuming the first result is the most recent movie\n    movie_id = search_result[\"results\"][0][\"id\"]\n    # Get the credits of the movie\n    movie_credits = get_movie_credits(movie_id)\n    if movie_credits.get(\"crew\"):\n        # Look for the director in the crew list\n        for crew_member in movie_credits[\"crew\"]:\n            if crew_member.get(\"job\") == \"Director\":\n                director_id = crew_member[\"id\"]\n                # Get the details of the director\n                director_details = get_person_details(director_id)\n                director_name = director_details.get(\"name\")\n                print(f\"The director of Leonardo DiCaprio's latest movie is: {director_name}\")\n                break\n    else:\n        print(\"Director information not found for the movie.\")\nelse:\n    print(\"No movies found for Leonardo DiCaprio.\")\n```",
        "usage": [
            579,
            10951,
            11530
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people named \"Catherine Hardwicke\"\nurl_person_search = \"https://api.themoviedb.org/3/search/person\"\nparams_person_search = {\n    \"query\": \"Catherine Hardwicke\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse_person_search = requests.get(url_person_search, headers=headers, params=params_person_search)\nperson_results = response_person_search.json()[\"results\"]\n\n# Get the id of Catherine Hardwicke\nperson_id = person_results[0][\"id\"]\n\n# Get the TV show credits for Catherine Hardwicke\nurl_tv_credits = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse_tv_credits = requests.get(url_tv_credits, headers=headers)\ntv_credits = response_tv_credits.json()[\"cast\"]\n\n# Filter to find the latest TV show directed by Catherine Hardwicke\nlatest_tv_show = None\nfor tv_show in tv_credits:\n    if tv_show[\"department\"] == \"Directing\":\n        if latest_tv_show is None or tv_show[\"episode_count\"] > latest_tv_show[\"episode_count\"]:\n            latest_tv_show = tv_show\n\nprint(latest_tv_show)\n```",
        "usage": [
            442,
            13635,
            14077
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show with the query \"Breaking Bad\"\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params={\"query\": \"Breaking Bad\"})\nbreaking_bad_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the list of similar TV shows to Breaking Bad\nresponse = requests.get(f\"https://api.themoviedb.org/3/tv/{breaking_bad_show_id}/similar\", headers=headers)\nsimilar_shows = response.json()[\"results\"]\n\nfor show in similar_shows:\n    print(show[\"name\"])  # Output the names of the similar TV shows\n```",
        "usage": [
            316,
            9711,
            10027
        ],
        "executed": "Flower of Evil\nHardcastle and McCormick\nThe Sopranos\nDeadwood\nSons of Anarchy\nThe Shield\nMea culpa\nEl d\u00eda menos pensado\nThe Wright Verdicts\nLove, Now\nSenior High\nShameless\nThe Twilight Zone\nHeist\nThe Best Times\nAlpha Beta\nMatlock\nDanger of Her\nJenny\nThe Ancient Magus' Bride\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API key and base url\napi_key = \"YOUR_API_KEY\"\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Set the headers with the authorization token\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Get the trending movies for today\ntrending_url = f\"{base_url}/trending/all/day\"\nresponse = requests.get(trending_url, headers=headers)\ntrending_data = response.json()\n\n# Get the movie id of the most trending movie\nmovie_id = trending_data[\"results\"][0][\"id\"]\n\n# Get the credits for the movie to find the director\ncredits_url = f\"{base_url}/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits_data = response.json()\n\n# Find the director in the crew\ndirector = None\nfor member in credits_data[\"crew\"]:\n    if member[\"job\"] == \"Director\":\n        director = member[\"name\"]\n        break\n\nprint(f\"The director of today's most trending movie is: {director}\")\n```",
        "usage": [
            226,
            12997,
            13223
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Twilight\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Twilight\"\n}\n\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie_id of the first result\nif data[\"results\"]:\n    movie_id = data[\"results\"][0][\"id\"]\n\n    # Get the movie details to find the director\n    movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    response = requests.get(movie_details_url, headers=headers)\n    movie_data = response.json()\n\n    if movie_data.get(\"status_code\"):\n        print(\"Error: Movie not found\")\n    else:\n        # Get the director of the movie\n        for crew_member in movie_data[\"credits\"][\"crew\"]:\n            if crew_member[\"job\"] == \"Director\":\n                director = crew_member[\"name\"]\n                print(f\"The director of the movie 'Twilight' is: {director}\")\n                break\nelse:\n    print(\"Error: Movie not found\")\n```",
        "usage": [
            403,
            12524,
            12927
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the Bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# First, we need to get the TV show details by id\ntv_id = \"82856\"\ntv_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\ntv_response = requests.get(tv_url, headers=headers)\ntv_data = tv_response.json()\n\n# Next, we need to get the images that belong to the second episode of the first season\nseason_number = 1\nepisode_number = 2\nimages_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images\"\nimages_response = requests.get(images_url, headers=headers)\nimages_data = images_response.json()\n\n# Extract the photo path\nphoto_path = images_data[\"stills\"][0][\"file_path\"]\n\n# Print the photo path\nprint(f\"Photo path: {photo_path}\")\n```",
        "usage": [
            364,
            11490,
            11854
        ],
        "executed": "Photo path: /b8y9qAq2ZdU27Ua1lJxyNQbmzQE.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "What is top-1 rated movie?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url for getting the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Parameters for the API request\nparams = {\n    \"page\": 1,  # Get data for the first page\n    \"region\": \"\"  # No specific region filter\n}\n\n# Http headers for authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the top-1 rated movie from the response\n    top_rated_movies = response.json()[\"results\"]\n    if top_rated_movies:\n        top_1_movie = top_rated_movies[0]\n        print(\"Top-1 rated movie:\")\n        print(top_1_movie[\"title\"])\n    else:\n        print(\"No top rated movies found.\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            377,
            8462,
            8839
        ],
        "executed": "Top-1 rated movie:\nThe Shawshank Redemption\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ]
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Assign the provided access token to the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the parameters for the query to search for \"The Matrix\"\nparams = {\n    \"query\": \"The Matrix\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the GET request to search for the movie\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Extract the movie id of \"The Matrix\"\n    movie_id = data['results'][0]['id']\n    \n    # Using the movie id, call the API to get release dates\n    release_date_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n    release_date_response = requests.get(release_date_url, headers=headers)\n    \n    # Check if the release date request was successful\n    if release_date_response.status_code == 200:\n        release_date_data = release_date_response.json()\n        \n        # Extract the release date information\n        release_dates = release_date_data['results']\n        \n        for release in release_dates:\n            if release['iso_3166_1'] == 'US':  # Assuming seeking the release date for the US\n                release_date = release['release_dates'][0]['release_date']\n                print(f\"The release date of the movie 'The Matrix' in the US is: {release_date}\")\n                break\n    else:\n        print(\"Failed to retrieve release date information.\")\nelse:\n    print(\"Failed to retrieve movie data for 'The Matrix'.\")\n```",
        "usage": [
            535,
            10562,
            11097
        ],
        "executed": "The release date of the movie 'The Matrix' in the US is: 1999-03-24T00:00:00.000Z\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ]
    },
    {
        "query": "Who is the most popular person?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Set the page parameter to 1 to get the first page of results\nparams = {\"page\": 1}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting the data from the response\ndata = response.json()\n\n# Finding the most popular person\nmost_popular_person = max(data[\"results\"], key=lambda x: x[\"popularity\"])\n\nmost_popular_person_name = most_popular_person[\"name\"]\n\nprint(f\"The most popular person is: {most_popular_person_name}\")\n```",
        "usage": [
            315,
            11438,
            11753
        ],
        "executed": "The most popular person is: Jason Statham\n",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person with the name \"Christopher Nolan\"\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\"\n}\nresponse = requests.get(person_search_url, headers=headers, params=params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the movie credits for Christopher Nolan\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovies = response.json()[\"cast\"]\n\n# Extract image paths for the movies directed by Christopher Nolan\ncover_images = []\nfor movie in movies:\n    if \"poster_path\" in movie:\n        cover_images.append(movie[\"poster_path\"])\n\nprint(cover_images)\n```",
        "usage": [
            347,
            10801,
            11148
        ],
        "executed": "['/lAAwYAEnDXJoYt1V0DUBkLJK8sh.jpg', '/vemBplPKQhVe5cRWL7kxtgp15Vq.jpg', '/mwj189nph5bM0lc4fsjbEjI8V5M.jpg', '/pW9rYNpkrtlLL7rkiI6Dj7b2erE.jpg', '/e15wNHmLX7PJUo8lqzQRhwbX7PL.jpg', '/tlAYMNTvga69AUXMIY0HeeoblHT.jpg', '/f2Pih9muBJMhqFCNmw1b64mMFVd.jpg', '/eqFhruWEIRwjkvqgJN48VPuR50Q.jpg', None, '/vD5WKISzeYtdVlSJUU7c9xpAYO1.jpg', '/xwkYWcs8aypUtk3xDRUh0ndo4GA.jpg', '/ijz2HzG87GdkRuPK51FYfdG4naR.jpg', '/pUvbuOTHKQWrLuGY1x2pHd1evPL.jpg', '/e6eFWrSjkzXSDTliRonCX7P504K.jpg', '/k1Q1ayXdOb6H1emGtnGGwy63uPU.jpg', '/jafF7jcl116rzohZydL1VfK1y2e.jpg', '/y78UlBU4Y2HnEuvSW4V0A5DzP3C.jpg', None, '/i4PpBcuLvdcJwIf3hkcV9QDR1iH.jpg', None, '/jiby8Ilxlmbhv6elIf0qRMuaDdd.jpg', '/djInrUsSdM1ZDRS9WsE4MgKwEqT.jpg', '/qeeQ7rfTAXNYh4EqqdolFLkNwKM.jpg', '/2ntILBHp9SIa8nXMwPmswD0H3M4.jpg', '/iY1FDQM6taKwO7bG6YH09nE8NSs.jpg', '/x1eJojaMe9N0y0qg5yRRWEjYJxa.jpg', '/2j9gMIbtftm26CbH78nIwiImoN0.jpg', '/ord8gdBUFitBHccX1S5RpatulA7.jpg', '/am5Sst8LFmU0bhPrzU3km4RRy3J.jpg', '/bi4k7EE8JFuTHKWhiWEgdIlp40Z.jpg']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ]
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for \"Titanic\" movie to get the movie id\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\",\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get keywords associated with the movie\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\nresponse = requests.get(keywords_url, headers=headers)\nkeywords = [kw[\"name\"] for kw in response.json()[\"keywords\"]]\n\nprint(keywords)\n```",
        "usage": [
            311,
            10596,
            10907
        ],
        "executed": "['epic', 'ship', 'drowning', 'panic', 'shipwreck', 'evacuation', 'iceberg', 'titanic', 'forbidden love', 'ocean liner', 'based on true story', 'rich woman poor man', 'love', 'tragedy', 'tragic love', 'disaster', 'historical fiction', 'class differences', 'love affair', 'historical event', 'lifeboat', 'star crossed lovers', 'sinking ship', 'steerage', 'rich snob', 'disaster movie', '1910s', 'sunken ship']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ]
    },
    {
        "query": "Give me a show that is currently on the air",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Print the response\nprint(response.json())\n```",
        "usage": [
            259,
            10614,
            10873
        ],
        "executed": "{'page': 1, 'results': [{'adult': False, 'backdrop_path': '/h0y3OzHzG4yNvn8u3Za6ByH8lrQ.jpg', 'genre_ids': [18, 10766], 'id': 45789, 'origin_country': ['DE'], 'original_language': 'de', 'original_name': 'Sturm der Liebe', 'overview': 'These are the stories of relationships taking place in the fictional five-star hotel F\u00fcrstenhof, located in Feldkirchen-Westerham near Rosenheim with the plot revolving around members of the family room area, the hotel owners, and employees.', 'popularity': 4153.22, 'poster_path': '/9oZjOh3Va3FsiLGouhSogFsBX9G.jpg', 'first_air_date': '2005-09-26', 'name': 'Sturm der Liebe', 'vote_average': 7.25, 'vote_count': 14}, {'adult': False, 'backdrop_path': '/eWF3oRyL4QWaidN9F4uvM7cBJUV.jpg', 'genre_ids': [10766], 'id': 206559, 'origin_country': ['ZA'], 'original_language': 'af', 'original_name': 'Binnelanders', 'overview': 'A South African Afrikaans soap opera. It is set in and around the fictional private hospital, Binneland Kliniek, in Pretoria, and the storyline follows the trials, trauma and tribulations of the staff and patients of the hospital.', 'popularity': 3868.199, 'poster_path': '/v9nGSRx5lFz6KEgfmgHJMSgaARC.jpg', 'first_air_date': '2005-10-13', 'name': 'Binnelanders', 'vote_average': 6.063, 'vote_count': 40}, {'adult': False, 'backdrop_path': '/9TXcHOeCsM8W3ZKKIKjdYUsRSeq.jpg', 'genre_ids': [80, 18], 'id': 72879, 'origin_country': ['FR'], 'original_language': 'fr', 'original_name': 'Demain nous appartient', 'overview': 'The story revolves around the people of S\u00e8te, France. Their lives are punctuated by family rivalries, romance and scenes from daily life, but also by plots involving police investigations, secrets and betrayals.', 'popularity': 3448.184, 'poster_path': '/3uU5uJzOX7xe7mn7YKpBM9oiEZO.jpg', 'first_air_date': '2017-07-17', 'name': 'Tomorrow Is Ours', 'vote_average': 6.125, 'vote_count': 55}, {'adult': False, 'backdrop_path': '/mpcrV6RKlXxTsOCt7K70pJzNzNI.jpg', 'genre_ids': [10767], 'id': 204746, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Jennifer Hudson Show', 'overview': 'Talented entertainer and newly-minted EGOT Jennifer Hudson takes on the daytime talk show landscape.', 'popularity': 3326.458, 'poster_path': '/6VBNeo8XG90sNKWYQ0yTEmVBXHJ.jpg', 'first_air_date': '2022-09-12', 'name': 'The Jennifer Hudson Show', 'vote_average': 6.5, 'vote_count': 12}, {'adult': False, 'backdrop_path': '/lhdUwhInXu31qHm65jwBAlpTp8P.jpg', 'genre_ids': [10767], 'id': 82873, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Kelly Clarkson Show', 'overview': 'Kelly Clarkson presents the biggest newsmakers and names in film, television and music; as well as emerging new talent and everyday people who are beacons of hope in their communities.', 'popularity': 3325.982, 'poster_path': '/9Gg1oM8Us8gCS5aJA8e0ZRuIHnf.jpg', 'first_air_date': '2019-09-09', 'name': 'The Kelly Clarkson Show', 'vote_average': 6.243, 'vote_count': 35}, {'adult': False, 'backdrop_path': '/qZ7CdO7rkH0KyCxvZBoP4Mm2cQL.jpg', 'genre_ids': [10767, 99], 'id': 132544, 'origin_country': ['KR'], 'original_language': 'ko', 'original_name': '\uc704\ub300\ud55c \uc218\uc5c5, \uadf8\ub808\uc774\ud2b8 \ub9c8\uc778\uc988', 'overview': '', 'popularity': 3239.594, 'poster_path': '/lj46PSaBziqCqbGXlmnXN325biA.jpg', 'first_air_date': '2021-08-30', 'name': 'Great Minds', 'vote_average': 5.333, 'vote_count': 12}, {'adult': False, 'backdrop_path': '/kaiKuIEc8c0nhDVYcjWYJGD7eDC.jpg', 'genre_ids': [10764], 'id': 75685, 'origin_country': ['CZ'], 'original_language': 'cs', 'original_name': 'Prost\u0159eno!', 'overview': 'The knives (and forks) are out as a group of strangers compete for the title of ultimate dinner party host. And the money on the table adds spice to the proceedings...', 'popularity': 3138.372, 'poster_path': '/lh8GGzReYg4uoIjpveARaPgd4ZY.jpg', 'first_air_date': '2010-03-01', 'name': 'Prost\u0159eno!', 'vote_average': 6.2, 'vote_count': 5}, {'adult': False, 'backdrop_path': '/rj3jBAZwPiOgkwAy1205MAgLahj.jpg', 'genre_ids': [10766], 'id': 81329, 'origin_country': ['FR'], 'original_language': 'fr', 'original_name': 'Un si grand soleil', 'overview': 'Claire is surprised when she gets arrested for the murder of her childhood friend after she returns to Montpellier.', 'popularity': 3122.277, 'poster_path': '/t6jVlbPMtZOJoAOfeoR4yQmnjXM.jpg', 'first_air_date': '2018-08-27', 'name': 'Chronicles of the Sun', 'vote_average': 7.329, 'vote_count': 70}, {'adult': False, 'backdrop_path': '/y4w232QOzDD1McRocp2htMVmF3b.jpg', 'genre_ids': [10763, 35], 'id': 2224, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Daily Show', 'overview': \"The World's Fakest News Team tackle the biggest stories in news, politics and pop culture.\", 'popularity': 3058.961, 'poster_path': '/ixcfyK7it6FjRM36Te4OdblAq4X.jpg', 'first_air_date': '1996-07-22', 'name': 'The Daily Show', 'vote_average': 6.297, 'vote_count': 489}, {'adult': False, 'backdrop_path': '/gMMnf8VRg3Z98WaFmOLr9Jk8pIs.jpg', 'genre_ids': [35, 10767], 'id': 63770, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Late Show with Stephen Colbert', 'overview': 'Stephen Colbert brings his signature satire and comedy to The Late Show with Stephen Colbert, the #1 show in late night, where he talks with an eclectic mix of guests about what is new and relevant in the worlds of politics, entertainment, business, music, technology, and more. Featuring bandleader Jon Batiste with his band Stay Human, the Emmy Award-nominated show is broadcast from the historic Ed Sullivan Theater. Stephen Colbert, Chris Licht, Tom Purcell, and Jon Stewart are executive producers. Barry Julien and Denise Rehrig serve as co-executive producers.', 'popularity': 2984.402, 'poster_path': '/9jkThAGYj2yp8jsS6Nriy5mzKFT.jpg', 'first_air_date': '2015-09-08', 'name': 'The Late Show with Stephen Colbert', 'vote_average': 6.5, 'vote_count': 242}, {'adult': False, 'backdrop_path': '/4W2sH4CXzJ98ScuLGRij1KakzSv.jpg', 'genre_ids': [10751, 35], 'id': 230525, 'origin_country': ['KR'], 'original_language': 'ko', 'original_name': '\uc6b0\ub2f9\ud0d5\ud0d5 \ud328\ubc00\ub9ac', 'overview': 'A romantic family drama about a divorced couple who broke up 30 years ago out of hate, reuniting as in-laws through their children and overcoming long overdue conflicts and enmity.', 'popularity': 2928.411, 'poster_path': '/goMzJ6rxTndGki2pKpyAKuKNXHY.jpg', 'first_air_date': '2023-09-18', 'name': 'Unpredictable Family', 'vote_average': 6.667, 'vote_count': 6}, {'adult': False, 'backdrop_path': '/5AkPhazx8F0Ht74CUdJU03vNzBi.jpg', 'genre_ids': [10767, 35], 'id': 61818, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Late Night with Seth Meyers', 'overview': 'Seth Meyers, who is \"Saturday Night Live\u2019s\" longest serving anchor on the show\u2019s wildly popular \"Weekend Update,\" takes over as host of NBC\u2019s \"Late Night\" \u2014 home to A-list celebrity guests, memorable comedy and the best in musical talent. As the Emmy Award-winning head writer for \"SNL,\" Meyers has established a reputation for sharp wit and perfectly timed comedy, and has gained fame for his spot-on jokes and satire. Meyers takes his departure from \"SNL\" to his new post at \"Late Night,\" as Jimmy Fallon moves to \"The Tonight Show\".', 'popularity': 2883.773, 'poster_path': '/x5asOuPOjW21e0Ykkvkuzu1TGEl.jpg', 'first_air_date': '2014-02-25', 'name': 'Late Night with Seth Meyers', 'vote_average': 5.5, 'vote_count': 76}, {'adult': False, 'backdrop_path': '/butPVWgcbtAjL9Z7jU7Xj1KA8KD.jpg', 'genre_ids': [10767, 35], 'id': 22980, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Watch What Happens Live with Andy Cohen', 'overview': 'Bravo network executive Andy Cohen discusses pop culture topics with celebrities and reality show personalities.', 'popularity': 2860.193, 'poster_path': '/onSD9UXfJwrMXWhq7UY7hGF2S1h.jpg', 'first_air_date': '2009-07-16', 'name': 'Watch What Happens Live with Andy Cohen', 'vote_average': 5.25, 'vote_count': 38}, {'adult': False, 'backdrop_path': '/5S0SI4NjyMji05OPL0GOZ4BsiMh.jpg', 'genre_ids': [10764], 'id': 136166, 'origin_country': ['NL'], 'original_language': 'nl', 'original_name': 'Lang Leve de Liefde', 'overview': '', 'popularity': 2844.492, 'poster_path': '/9lpvvzEl5kViIc2vUJG4QKzj2ds.jpg', 'first_air_date': '2020-01-20', 'name': 'Lang Leve de Liefde', 'vote_average': 2.667, 'vote_count': 3}, {'adult': False, 'backdrop_path': '/yWVqYVOUcS6vu22v4BPXKJW10m5.jpg', 'genre_ids': [10764, 10751], 'id': 206679, 'origin_country': ['CZ'], 'original_language': 'cs', 'original_name': 'Na lovu', 'overview': 'Na Lovu is a Czech game-show, based on the license of the popular global format The Chase. A heart-racing quiz show where four competitors must pit their wits and face off against Lovec (the Chaser), a ruthless quiz genius determined to stop them from winning cash prizes.', 'popularity': 2774.066, 'poster_path': '/udJ1wVuOwFg1q6UBcQGwcpcdIYF.jpg', 'first_air_date': '2021-08-16', 'name': 'Na lovu', 'vote_average': 8.0, 'vote_count': 2}, {'adult': False, 'backdrop_path': '/i8iqYtAy9qcO5RSrA1f6fY1n6SN.jpg', 'genre_ids': [10766], 'id': 235484, 'origin_country': ['ZA'], 'original_language': 'af', 'original_name': 'Suidooster', 'overview': 'Suidooster is a South African television soap opera produced by Suidooster Films which revolves around a matriarch, her family, friends and the people of Suidooster, a small shopping and business centre in the fictional Cape Town suburb of Ruiterbosch.', 'popularity': 2747.235, 'poster_path': '/u4tPY6df9atOne5soyW7vUyRgvD.jpg', 'first_air_date': '2015-11-16', 'name': 'Suidooster', 'vote_average': 8.0, 'vote_count': 7}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18, 35], 'id': 36361, 'origin_country': ['CZ'], 'original_language': 'cs', 'original_name': 'Ulice', 'overview': 'Ulice is a Czech soap opera produced and broadcast by Nova. In the Czech language Ulice means street.\\n\\nThe show describes the lives of the Farsk\u00fd, Jord\u00e1n, Boh\u00e1\u010d, Nikl, and Li\u0161ka families and many other people that live in Prague. Their daily battle against real problems of living in a modern world like divorce, love, betrayal and illness or disease. Ulice often shows crime.', 'popularity': 2745.162, 'poster_path': '/3ayWL13P1HeRnyVL9lU9flOdZjq.jpg', 'first_air_date': '2005-09-05', 'name': 'Ulice', 'vote_average': 3.333, 'vote_count': 18}, {'adult': False, 'backdrop_path': '/uFDlUMdp3NoXhnveAfgSpty8vBy.jpg', 'genre_ids': [10767], 'id': 108188, 'origin_country': ['AT'], 'original_language': 'de', 'original_name': 'Barbara Karlich \u2013 Talk um 4', 'overview': 'A talk show produced by ORF since 1999 and broadcast on ORF 2.', 'popularity': 2691.44, 'poster_path': '/1NAVqNAKXbFbBzl9P52boCOUACJ.jpg', 'first_air_date': '1999-10-27', 'name': 'Barbara Karlich \u2013 Talk um 4', 'vote_average': 3.5, 'vote_count': 2}, {'adult': False, 'backdrop_path': '/vqlsnDsDb2izWcMNLXRyuU81CEm.jpg', 'genre_ids': [18], 'id': 233090, 'origin_country': ['KR'], 'original_language': 'ko', 'original_name': '\uc138 \ubc88\uc9f8 \uacb0\ud63c', 'overview': 'Love and marriage bloom in a game of truth with a woman who lives a fake life and a woman who tries to reveal it.', 'popularity': 2614.634, 'poster_path': '/mRP8Ehrfe1X2eoOBxK24ZGQv4gn.jpg', 'first_air_date': '2023-10-23', 'name': 'The Third Marriage', 'vote_average': 10.0, 'vote_count': 1}, {'adult': False, 'backdrop_path': '/zW0v2YT74C6tRafzqqBkfSqLAN0.jpg', 'genre_ids': [10759, 10765], 'id': 52814, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Halo', 'overview': 'Depicting an epic 26th-century conflict between humanity and an alien threat known as the Covenant, the series weaves deeply drawn personal stories with action, adventure and a richly imagined vision of the future.', 'popularity': 2598.129, 'poster_path': '/hmHA5jqxN3ESIAGx0jAwV7TJhTQ.jpg', 'first_air_date': '2022-03-24', 'name': 'Halo', 'vote_average': 8.327, 'vote_count': 2346}], 'total_pages': 66, 'total_results': 1303}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Clint Eastwood's person id\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Clint Eastwood\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\nperson_id = data['results'][0]['id']\n\n# Get the movie credits for Clint Eastwood\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\nlatest_movie_release_date = data['cast'][0]['release_date']\n\n# Output\nprint(\"Clint Eastwood's latest movie is scheduled to be released on:\", latest_movie_release_date)\n```",
        "usage": [
            337,
            13176,
            13513
        ],
        "executed": "Clint Eastwood's latest movie is scheduled to be released on: 1997-02-14\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ]
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie id of The Dark Knight\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"The Dark Knight\",\n    \"page\": 1\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\nmovie_id = data_search_movie[\"results\"][0][\"id\"]  # Get the movie id of The Dark Knight\n\n# Get the movie reviews for The Dark Knight\nurl_reviews = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\nparams_reviews = {\n    \"page\": 1\n}\nresponse_reviews = requests.get(url_reviews, headers=headers, params=params_reviews)\ndata_reviews = response_reviews.json()\n\n# Extract and print the reviews\nreviews = data_reviews[\"results\"]\nfor review in reviews:\n    print(\"Author:\", review[\"author\"])\n    print(\"Content:\", review[\"content\"])\n    print(\"URL:\", review[\"url\"])\n    print(\"--------------------------------------\")\n```",
        "usage": [
            404,
            11036,
            11440
        ],
        "executed": "Author: tricksy\nContent: Excellent movie. Best of the trilogy. Lovely music. Nolan is a genius. So is Heath Ledger.\nURL: https://www.themoviedb.org/review/557693fac3a368569a003fab\n--------------------------------------\nAuthor: talisencrw\nContent: This has no competition. It is the very finest comic-book character movie ever made. Knowing the Burton, Donner and Nolan filmic adaptations of Batman and Superman exist helps me to sleep at night. They are Exhibit A of 'How to Make a Comic-Book Movie'. Nothing else has ever come even remotely close. These seven films (I include 'Superman II' because it was mostly Donner's work)--and Nolan's trilogy especially--are what I imagine a great director like Kubrick, Hitchcock or Kurosawa would have come up with, if they had ever been asked to make a Superman or Batman movie. They are the easiest for an audience to identify with because in these the scripts most approximate human emotions and the typical conundrums of the human experience--in short, are the closest, in a good way, they come to the complexities of the human condition. Peerless.\nURL: https://www.themoviedb.org/review/574639f9c3a36806b00002c1\n--------------------------------------\nAuthor: erickprieto\nContent: Perhaps the best Batman movie of all times. I think that this Batman trilogy presents the well-known superhero history in an unexpected way with the capable to maintain on the edge of the chair all time.\r\n**Heath Ledger** present an excellent impersonification of a psychopath.\r\nAll support roles are magnificent.\r\nAnd Bruce Wayne role played by Christian Bale, shows a human being behind of the mask.\nURL: https://www.themoviedb.org/review/5be161edc3a3680a00009915\n--------------------------------------\nAuthor: moubledian\nContent: I used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\r\n\r\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it's definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\r\n\r\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\r\n\r\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson's portrayal is true unpredictability. It's obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn't easy. How exactly does one take him down when he's woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\r\n\r\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\r\n\r\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can't represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we've seen just the prelude to the Dark Knight's upcoming legendary battles with the worst of Gotham City's dark underside.\r\n\r\n\"The Dark Knight\" gets a solid 10 of 10 stars.\r\n\r\nI used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\r\n\r\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it's definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\r\n\r\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\r\n\r\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson's portrayal is true unpredictability. It's obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn't easy. How exactly does one take him down when he's woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\r\n\r\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\r\n\r\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can't represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we've seen just the prelude to the Dark Knight's upcoming legendary battles with the worst of Gotham City's dark underside.\r\n\r\n\"The Dark Knight\" gets a solid 10 of 10 stars.\r\n\r\nI used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\r\n\r\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it's definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\r\n\r\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\r\n\r\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson's portrayal is true unpredictability. It's obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn't easy. How exactly does one take him down when he's woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\r\n\r\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\r\n\r\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can't represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we've seen just the prelude to the Dark Knight's upcoming legendary battles with the worst of Gotham City's dark underside.\r\n\r\n\"The Dark Knight\" gets a solid 10 of 10 stars.\nURL: https://www.themoviedb.org/review/5c95ccc40e0a2645f151d76d\n--------------------------------------\nAuthor: tmdb22590444\nContent: One of the best movies of all time. Christopher Nolan has brought us the Batman trilogy that it made it feel it could happen today. Christian Bale returns as Batman, was able to perform as wonderfully as he did in Batman Begins. The one person that ultimately stole the show had to be the late Heath Ledger who played as the Joker. His performance as a psychotic clown terrorizing Gotham City was one of the best performance as a superhero villain. One of the best parts of the Joker was when he was telling his victims on how \u201che got his scars?\u201d. Another great part was when he kidnapped a police officer and he was recording it while scaring the man and also giving a warning to Batman. The supporting actor and actresses did a good job of delivering the story. I was disappointed that Katie Holmes did not return as Rachael Dawes but the actress how played as her Maggie Gyllenhaal did a really good job. One of the best parts of Christopher Nolan is that in every movie of his, the cinematography would look amazing and this movie is no exception.\nURL: https://www.themoviedb.org/review/5ccbd4ee0e0a262fcd009b52\n--------------------------------------\nAuthor: tmdb79614358\nContent: A Masterpiece!!! I Love how The Dark Knight shows to me the \"Dark & Gritty Tone\". Overall, Nolan give us the Game changing, best superhero film OF ALL TIME. For me it's 10/10\nURL: https://www.themoviedb.org/review/5fc50011420228003dc3d744\n--------------------------------------\nAuthor: EDSR\nContent: A sickening, borderline fascist film that is simultaneously dull and harmful. The editing represents that of an anti-pirate commercial and the politics are beyond reprehensible. The film ends with a monologue about how violent law-enforcement and brutality is what the country needs, but does not deserve. Nolan clearly did not intend for any subtext, yet that is not an excuse, if anything, that makes it worse. He includes these scenes to make the film more dark and edgy, yet there are people, from suppressed countries, who have to live through the hardships of violence from law-enforcers and dictatorship every day, and in his obliviousness, Nolan thinks that using this in a superhero film is a good excuse for self-importance. He is a war profiteer, and exploiter, and this is nothing short of disgusting.\nURL: https://www.themoviedb.org/review/613f220ba6ddcb002c698ab8\n--------------------------------------\nAuthor: AstroNoud\nContent: Unforgettable crime film with good dialogue, thrilling action and chase scenes and once again a magnificent cast (most notably a terrifically terrifying Ledger) and superb score.\r\n\r\n10/10\nURL: https://www.themoviedb.org/review/621a966ad7a70a00430d4c21\n--------------------------------------\nAuthor: CinemaSerf\nContent: Heath Ledger is outstanding in this follow up to the 2006 \"Batman Begins\" outing for the caped crusader. His portrayal of the malevolent \"Joker' is confident and highly entertaining, treading a fine line between supreme intellect and total insanity with considerable aplomb. He comes back to terrorise \"Gotham\" after \"Batman\" (Christian Bale), \"Gordon\" (Gary Oldman) - now Commissioner in charge of the police force, and newly installed District Attorney \"Dent\" (Aaron Eckhart) had made progress getting the criminals off the street. The \"Joker\", meantime, decides that the best strategy is to rob the mob - and pitching them all against each other, and with the help of the duplicitous \"Lau\" (Chin Han) manages to secure enough of their funds to initiate a campaign of lawlessness that is ruthless, manipulative and good fun to watch. Not only has the man in black his new, potent, nemesis to deal with - but he also begins to realise that his childhood sweetheart \"Rachel\" (this time Maggie Gyllenhaal) is drifting into the arms of the new DA. it is also pretty clear that they are both now proving to be an useful additional weapon in the armoury of his enemy who knows, increasingly, which buttons to press to cause maximum anxiety among those who would bring him down. It's over 2\u00bd hours long, but really does fly by as the quickly paced action really does kick in right from the start. The story is dark and gritty but the pace isn't ponderous and moody - Ledger exudes a sense of peril throughout the whole thing, but that has an edge to it - a sophistication that plays well against the flawed superhero who is increasingly having to identify and cope with his own demons. Sir Michael Caine pops up now and again as his shrewd butler \"Alfred\", always striving to keep his boss on the right side of sanity, and Morgan Freeman continues to feature (sparingly) and his quartermaster. On that latter front, there are loads of new gadgets that still have that element of plausibility to them (no super-powers!). On balance I think I still preferred the first film, but as sequels go - this takes, and will take, some beating. On a big screen in a packed cinema, it's just a great experience.\nURL: https://www.themoviedb.org/review/62cfbc31394a8704ae5c02a3\n--------------------------------------\nAuthor: The Movie Mob\nContent: **Overall : A cinematic marvel and once-in-a-decade masterpiece.**\r\n\r\nThis isn't simply a superhero movie or a Christopher Nolan film. The Dark Knight is a masterpiece. A perfect film. An epic scale with magnificent action pieces, oscar-winning performances, incredible writing, excellent pacing, dazzling special effects, and the list goes on and on, including the set design, costumes, and more. But, Christopher Nolan did more than make the greatest superhero movie of all time. He made one of the greatest movies of all time! All this is elevated further by Heath Ledger's once-in-a-lifetime portrayal of the Joker. Ledger was born for this role with a performance in league with Anthony Hopkins' Hannibal Lecter or Val Kilmer's Doc Holliday.\nURL: https://www.themoviedb.org/review/63001999097c49007f5fced9\n--------------------------------------\nAuthor: drystyx\nContent: Even worse than Tim Burton's Batman, although obviously copying the neo Nazi ideology of \"kill all the brunettes you can in a movie\".\r\nThis is so predictable and so poorly written that it boggles the mind. Yet there is a fan base of what can only be described as neo Nazis. I guess those fans were poor cuckolds who got jilted by too many brunettes at a young age, and they couldn't get over it.\r\nThat's about the entire story here. Oh, the Joker kills anything he sees. Whoopee. And he's invulnerable. And he's a demigod who can only be beaten by another demigod.\r\nSo, we've got traditional mundane Greek heroes and villains here, just like most Hollywood movies.\r\nUnfortunately, the fans of these traditional Hollywood movies are the loudest people on Earth, and the biggest control freaks. It's ridiculous to believe there are actually this big a percentage of fans for this kind of depressing Hollywood formula movie making, but if you look at Imdb's top 250, you see such movies make up over half of the top 250. Are they voted up because control freaks vote more than non control freaks? Or are they voted up because control freaks use many fake user names? Probably both, which explains why over half of the top 250 are nothing more than Greek traditional idolizations of control freaks.\r\nOh, and Batman turns totally gay, which would be okay if he'd admit it, but he's given the choice of saving a man from death or a hot woman from death, and he chooses to save the man. This isn't any real Batman. It's just another contrived story line for the Nolan Nazi merit badge. They are not even subtle. They bang you over the head with their worship of Adolf and Eva. \r\nGod help the world if this garbage still has a fan base fifty years from now. But it could happen. We may have drug addicts and meth heads around for even longer than that, praising the hate and feeding the hate. It would be nice if someone made a real Batman movie with a real story line involving some degree of motivation.\nURL: https://www.themoviedb.org/review/643ef51668b7660524ee929b\n--------------------------------------\nAuthor: Andre Gonzales\nContent: I enjoyed watching the Dark Knight. They were at least able to keep the same batman from the the last one made too.\nURL: https://www.themoviedb.org/review/64483429b76cbb0492a3bf0f\n--------------------------------------\nAuthor: JN2012\nContent: If I can hold my pee for a whole two and a half hours rewatching a film I\u2019ve already seen then I love it.\nURL: https://www.themoviedb.org/review/652ac2641511aa013886872f\n--------------------------------------\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Search for movies directed by Francis Ford Coppola\ndirector_name = \"Francis Ford Coppola\"\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": director_name,\n    \"include_adult\": False\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_results = response.json()[\"results\"]\n\n# Get the person id for Francis Ford Coppola\nperson_id = None\nfor person in person_results:\n    if person[\"name\"] == director_name:\n        person_id = person[\"id\"]\n        break\n\nif person_id is not None:\n    # 2. Get the movie credits for Francis Ford Coppola\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(movie_credits_url, headers=headers)\n    movie_credits = response.json()[\"cast\"]\n\n    if movie_credits:  # If the director has movie credits\n        movie_id = movie_credits[0][\"id\"]  # Choose the first movie to find similar movies\n\n        # 3. Get a list of similar movies\n        similar_movies_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\n        response = requests.get(similar_movies_url, headers=headers)\n        similar_movies = response.json()[\"results\"]\n\n        # Output the similar movies\n        for movie in similar_movies:\n            print(movie[\"title\"])\n\n    else:\n        print(\"No movie credits found for Francis Ford Coppola.\")\nelse:\n    print(\"Person not found for Francis Ford Coppola.\")\n```",
        "usage": [
            520,
            11879,
            12399
        ],
        "executed": "League of Exotique Dancers\nDamage Done: The Drug War Odyssey\nMarlon Brando: An Actor Named Desire\nA New Romance of Celluloid: The Miracle of Sound\nBeer Wars\nNerdcore Rising\nPrison Dogs\nMaurizio Cattelan: Be Right Back\nThe Next Step Live: The Movie\nThe Making of 'One from the Heart'\nBehind the Moomins\nA Short History of the Highrise\nBTS 2018 SUMMER PACKAGE in Saipan\nLight Years\nCheck It\nEnlighten Us: The Rise and Fall of James Arthur Ray\nTempest Storm\nSina Dino at ang Kanilang Sikreto\nWhen Elephants Were Young\nA Magical Substance Flows Into Me\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url for getting the latest movie\nurl = \"https://api.themoviedb.org/3/movie/latest\"\n\n# Making the GET request\nresponse = requests.get(url, headers=headers)\n\n# Checking if the request was successful\nif response.status_code == 200:\n    # Getting the JSON response\n    movie_data = response.json()\n\n    # Extracting the lead actor from the cast\n    lead_actor = movie_data.get(\"cast\")[0].get(\"name\")\n    \n    print(\"The lead actor in the latest released movie is:\", lead_actor)\n\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            309,
            11901,
            12210
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular"
        ]
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url for getting a list of movies currently in theaters\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Parameters to specify page 1 and retrieve only one result\nparams = {\n    \"page\": 1\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the image path of the first movie in the response\n    json_data = response.json()\n    if json_data.get(\"results\") and len(json_data[\"results\"]) > 0:\n        movie_image_path = json_data[\"results\"][0][\"poster_path\"]\n        print(f\"Image path of the movie currently in theaters: {movie_image_path}\")\n    else:\n        print(\"No movie data found in the response.\")\nelse:\n    print(\"Failed to retrieve data from the API.\")\n```",
        "usage": [
            373,
            9223,
            9596
        ],
        "executed": "Image path of the movie currently in theaters: /hu40Uxp9WtpL34jv3zyWLb5zEVY.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ]
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url for getting the list of popular movies\nurl_popular_movies = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Parameters for the API\nparams = {\n    \"page\": 1,  # We are interested in the first page of results\n}\n\n# Http header for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of popular movies\nresponse_popular_movies = requests.get(url_popular_movies, headers=headers, params=params)\ndata_popular_movies = response_popular_movies.json()\n\n# Get the most popular movie from the response\nmost_popular_movie = data_popular_movies[\"results\"][0]\n\n# Extracting the movie id\nmovie_id = most_popular_movie[\"id\"]\n\n# API url for getting the keywords of a movie\nurl_movie_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n\n# Call the API to get the keywords of the most popular movie\nresponse_movie_keywords = requests.get(url_movie_keywords, headers=headers)\ndata_movie_keywords = response_movie_keywords.json()\n\n# Extracting the keywords of the most popular movie\nkeywords = data_movie_keywords[\"keywords\"]\n\nprint(\"Most popular movie details:\")\nprint(\"Title:\", most_popular_movie[\"title\"])\nprint(\"Keywords:\", [keyword[\"name\"] for keyword in keywords])\n```",
        "usage": [
            445,
            9033,
            9478
        ],
        "executed": "Most popular movie details:\nTitle: No Way Up\nKeywords: ['ocean', 'bodyguard', 'rescue mission', 'childhood trauma', 'shark', 'airplane trip', 'sharks', 'air crash', 'survivor']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Provide the API url for getting the list of current popular movies\nurl_popular_movies = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Set the header with the Authorization token for accessing the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to get the list of popular movies\nresponse_popular_movies = requests.get(url_popular_movies, headers=headers)\n\n# Check if the request was successful\nif response_popular_movies.status_code == 200:\n    # Get the movie id of the most popular movie\n    most_popular_movie_id = response_popular_movies.json()[\"results\"][0][\"id\"]\n\n    # Provide the API url for getting the keywords of a movie\n    url_movie_keywords = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\n\n    # Make a GET request to get the keywords of the most popular movie\n    response_movie_keywords = requests.get(url_movie_keywords, headers=headers)\n\n    # Check if the request was successful\n    if response_movie_keywords.status_code == 200:\n        # Extract and print the keywords of the most popular movie\n        keywords = response_movie_keywords.json()[\"keywords\"]\n        print(\"Keywords of the most popular movie right now:\")\n        for keyword in keywords:\n            print(keyword[\"name\"])\n    else:\n        print(\"Failed to retrieve keywords of the most popular movie\")\nelse:\n    print(\"Failed to retrieve list of popular movies\")\n```",
        "usage": [
            468,
            10749,
            11217
        ],
        "executed": "Keywords of the most popular movie right now:\nocean\nbodyguard\nrescue mission\nchildhood trauma\nshark\nairplane trip\nsharks\nair crash\nsurvivor\n",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=params)\n\n# Extract movie_id from the search results\nmovie_id = response.json()['results'][0]['id']\n\n# Get the cast and crew for the movie \"Titanic\"\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncast = response.json()['cast']\n\n# Extract the names of the actors who starred in the movie \"Titanic\"\nactors = [actor['name'] for actor in cast]\n\nprint(actors)\n```",
        "usage": [
            346,
            10385,
            10731
        ],
        "executed": "['Leonardo DiCaprio', 'Kate Winslet', 'Billy Zane', 'Kathy Bates', 'Frances Fisher', 'Gloria Stuart', 'Victor Garber', 'Bill Paxton', 'Bernard Hill', 'David Warner', 'Jonathan Hyde', 'Lewis Abernathy', 'Suzy Amis', 'Nicholas Cascone', 'Danny Nucci', 'Jason Barry', 'Lew Palter', 'Eric Braeden', 'Ewan Stewart', 'Bernard Fox', 'Ioan Gruffudd', 'Jonny Phillips', 'Edward Fletcher', 'Scott G. Anderson', 'Martin East', 'Gregory Cooke', 'Alexandrea Owens', 'Seth Adkins', 'Michael Ensign', 'Anatoly M. Sagalevitch', 'Martin Hub', 'Mark Lindsay Chapman', 'Richard Graham', 'Paul Brightwell', 'Craig Kelly', 'Ron Donachie', 'Charlotte Chatton', 'Fannie Brett', 'Jenette Goldstein', 'Camilla Overbye Roos', 'Linda Kerns', 'Amy Gaipa', 'Martin Jarvis', 'Rosalind Ayres', 'Rochelle Rose', 'Jonathan Evans-Jones', 'Rocky Taylor', 'Liam Tuohy', 'Simon Crane', 'James Lancaster', 'Elsa Raven', 'Reece P. Thompson III', 'Laramie Landis', 'Mark Rafael Truitt', 'John Walcutt', 'Terry Forrestal', 'Derek Lea', 'Richard Ashton', 'Sean Nepita', 'Brendan Connolly', 'David Cronnelly', 'Garth Wilton', 'Richard Fox', 'Nick Meaney', 'Kevin Owers', 'Mark Capri', 'Marc Cass', 'Paul Herbert', 'Emmett James', 'Chris Byrne', 'Oliver Page', 'James Garrett', 'Erik Holland', 'Jari Kinnunen', 'Anders Falk', 'Barry Dennen', 'Vern Urich', 'Rebecca Klingler', \"Tricia O'Neil\", 'Kathleen S. Dunn', 'Romeo Francis', 'Mandana Marino', 'Van Ling', 'Bj\u00f8rn Olsen', 'Dan Pettersson', 'Shay Duffin', 'Greg Ellis', 'Diana Morgan', 'Kris Andersson', 'Bobbie Bates', 'Aaron James Cash', 'Anne Fletcher', 'Edmond Alan Forsyth', 'Andie Hicks', 'Scott Hislop', 'Stan Mazin', 'Lisa Ratzin', 'Julene Renee', 'Brian Walsh', 'Alexandra Boyd', 'James Cameron', 'Mike Butters', 'Bruno Campolo', 'Kevin De La Noy', 'Tony Kenny', 'Sean Lawlor', 'Don Lynch', 'Johnny Martin', 'Ryan McClurkin', 'Meghan McLeod', \"Mike O'Neal\", 'Phil Parlapiano', 'Steven Quale', 'R. Gern Trowbridge', 'Olivia Rosewood', 'John Slade', 'Brian McDermott', 'Bret Aaron Knower']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ]
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/company/4/images\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to retrieve the logos of the company with company_id 4 (Paramount Pictures)\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.ok:\n    # Extract the JSON data\n    data = response.json()\n    # Print the data which contains information about the logos of Paramount Pictures\n    print(data)\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            294,
            9393,
            9687
        ],
        "executed": "{'id': 4, 'logos': [{'aspect_ratio': 1.240694789081886, 'file_path': '/gz66EfNoYPqHTYI4q9UEN4CbHRc.png', 'height': 806, 'id': '626b605aa410c8009e8a37c2', 'file_type': '.svg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 1.344086021505376, 'file_path': '/fycMZt242LVjagMByZOLUGbCvv3.png', 'height': 744, 'id': '5aa0bd20925141574100003c', 'file_type': '.svg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 1.240694789081886, 'file_path': '/zKQ6jLPmCGeB2AiTAwB3aeXAJOb.png', 'height': 806, 'id': '63f8381b1f3319009ebf7a59', 'file_type': '.svg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}]}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for companies similar to \"Universal Pictures\"\ncompany_search_url = \"https://api.themoviedb.org/3/search/company\"\nparams = {\n    \"query\": \"Universal Pictures\"\n}\nsearch_response = requests.get(company_search_url, headers=headers, params=params)\nsearch_results = search_response.json()\ncompany_id = search_results[\"results\"][0][\"id\"]\n\n# Get company details by id\ncompany_details_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\ndetails_response = requests.get(company_details_url, headers=headers)\ndetails_results = details_response.json()\n\n# Extracting the company headquarters information\nheadquarters_location = details_results[\"headquarters\"]\n\nprint(\"The headquarters location of Universal Pictures is:\", headquarters_location)\n```",
        "usage": [
            332,
            9418,
            9750
        ],
        "executed": "The headquarters location of Universal Pictures is: Universal City, California\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameter\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if there are results for \"Titanic\"\nif data[\"total_results\"] > 0:\n    # Get the movie release date\n    movie_id = data[\"results\"][0][\"id\"]\n    release_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    release_response = requests.get(release_url, headers=headers)\n    release_data = release_response.json()\n\n    # Print the release date of the movie \"Titanic\"\n    print(f\"The movie 'Titanic' was released on {release_data['release_date']}\")\nelse:\n    print(\"No results found for the movie 'Titanic'\")\n```",
        "usage": [
            390,
            11321,
            11711
        ],
        "executed": "The movie 'Titanic' was released on 1997-11-18\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ]
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url to search for Star Wars collection\nurl = \"https://api.themoviedb.org/3/search/collection\"\n# Parameters for searching Star Wars collection\nparams = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\n# Make the GET request to search for Star Wars collection\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extracting the collection id of the first Star Wars collection\n    collection_id = response.json()[\"results\"][0][\"id\"]\n    \n    # API url to get collection details by id\n    details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    # Make the GET request to get the details of Star Wars collection\n    details_response = requests.get(details_url, headers=headers)\n    \n    # Check if the request for collection details was successful\n    if details_response.status_code == 200:\n        # Extracting the first movie's id in the collection\n        movie_id = details_response.json()[\"parts\"][0][\"id\"]\n        \n        # API url to get the credits (cast and crew) for a movie\n        credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n        # Make the GET request to get the credits of the first movie in Star Wars collection\n        credits_response = requests.get(credits_url, headers=headers)\n        \n        # Check if the request for credits was successful\n        if credits_response.status_code == 200:\n            # Extracting the cast (actors) from the credits\n            cast = credits_response.json()[\"cast\"]\n            \n            # Getting the names of the actors who starred in the first movie of Star Wars collection\n            actors = [actor[\"name\"] for actor in cast]\n            print(actors)\n        else:\n            print(\"Failed to fetch credits data\")\n    else:\n        print(\"Failed to fetch collection details data\")\nelse:\n    print(\"Failed to fetch Star War collection data\")\n```",
        "usage": [
            433,
            12025,
            12458
        ],
        "executed": "['Mark Hamill', 'Harrison Ford', 'Carrie Fisher', 'Peter Cushing', 'Alec Guinness', 'Anthony Daniels', 'Kenny Baker', 'Peter Mayhew', 'David Prowse', 'James Earl Jones', 'Phil Brown', 'Shelagh Fraser', 'Jack Purvis', 'Alex McCrindle', 'Eddie Byrne', 'Drewe Henley', 'Denis Lawson', 'Garrick Hagon', 'Jack Klaff', 'William Hootkins', 'Angus MacInnes', 'Jeremy Sinden', 'Graham Ashley', 'Don Henderson', 'Richard LeParmentier', 'Leslie Schofield', 'Michael Leader', 'David Ankrum', 'Scott Beach', 'Lightning Bear', 'Jon Berg', 'Doug Beswick', 'Paul Blake', 'Janice Burchette', 'Ted Burnett', 'John Chapman', 'Gilda Cohen', 'Tim Condren', 'Barry Copping', 'Alfie Curtis', 'Robert Davies', 'Maria De Aragon', 'Robert A. Denham', 'Frazer Diamond', 'Peter Diamond', 'Warwick Diamond', 'Sadie Eden', 'Kim Falkinburg', 'Harry Fielder', 'Ted Gagliano', 'Salo Gardner', 'Steve Gawley', 'Barry Gnome', 'Rusty Goffe', 'Isaac Grand', 'Reg Harding', 'Alan Harris', 'Frank Henson', 'Arthur Howell', 'Tommy Ilsley', 'Joe Johnston', 'Annette Jones', 'Linda Jones', 'Joe Kaye', 'Colin Michael Kitchens', 'Melissa Kurtz', 'Tiffany Hillkurtz', 'Al Lampert', 'Anthony Lang', 'Laine Liska', 'Derek Lyons', 'Mahjoub', 'Alf Mangan', 'Grant McCune', 'Geoffrey Moon', 'Mandy Morton', 'Lorne Peterson', 'Marcus Powell', 'Shane Rimmer', 'Pam Rose', 'George Roubicek', 'Erica Simmons', 'Angela Staines', 'George Stock', 'Roy Straite', 'Peter Sturgeon', 'Peter Sumner', 'John Sylla', 'Tom Sylla', 'Malcolm Tierney', 'Phil Tippett', 'Burnell Tucker', 'Morgan Upton', 'Jerry Walter', 'Hal Wamsley', 'Diana Sadley Way', 'Bill Weston', 'Fred Wood', 'Colin Higgins', 'Ron Tarr', 'Anthony Forrest', 'Frances Alfred Basil Tomlin', 'Larry Ward', 'John Cannon']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the query parameter for the collection name\nparams = {\n    \"query\": \"Harry Potter\"\n}\n\n# Set the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Extract the poster paths for the movies in the collection\n    poster_paths = [result[\"poster_path\"] for result in data[\"results\"]]\n    \n    # Print the poster paths\n    print(poster_paths)\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            325,
            10728,
            11053
        ],
        "executed": "['/eVPs2Y0LyvTLZn6AP5Z6O2rtiGB.jpg']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection with name \"The Hunger Games\"\ncollection_url = \"https://api.themoviedb.org/3/search/collection\"\ncollection_params = {\n    \"query\": \"The Hunger Games\"\n}\ncollection_response = requests.get(collection_url, headers=headers, params=collection_params)\ncollection_data = collection_response.json()\n\n# Check if any results found\nif collection_data['total_results'] > 0:\n    # Get the collection id\n    collection_id = collection_data['results'][0]['id']\n\n    # Get the keywords for the collection by collection id\n    keywords_url = f\"https://api.themoviedb.org/3/movie/{collection_id}/keywords\"\n    keywords_response = requests.get(keywords_url, headers=headers)\n    keywords_data = keywords_response.json()\n\n    # Extract keywords\n    keywords = [keyword['name'] for keyword in keywords_data['keywords']]\n    print(keywords)\nelse:\n    print(\"Collection not found\")\n```",
        "usage": [
            376,
            9163,
            9539
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the query parameters\nparams = {\n    \"query\": \"The Hobbit\",\n}\n\n# Set the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Loop through the results to find the collection with name \"The Hobbit\"\n    for result in data[\"results\"]:\n        if result[\"name\"] == \"The Hobbit\":\n            collection_id = result[\"id\"]\n            break\n    \n    # Use the collection_id to get the release dates of the movies in the collection\n    if collection_id:\n        url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n        response = requests.get(url, headers=headers)\n        \n        if response.status_code == 200:\n            collection_data = response.json()\n            print(\"Release dates for the movies of 'The Hobbit' collection:\")\n            for movie in collection_data[\"parts\"]:\n                print(f\"Movie: {movie['original_title']}, Release Date: {movie['release_date']}\")\n        else:\n            print(\"Error: Unable to fetch collection data\")\n    else:\n        print(\"Error: 'The Hobbit' collection not found\")\nelse:\n    print(\"Error: Unable to fetch collection search results\")\n```",
        "usage": [
            477,
            11694,
            12171
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url to search for collections\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Parameters for searching The Fast and the Furious collection\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\n\n# Include the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Extract the list of movies from The Fast and the Furious collection\n    movies = data['results']\n    \n    # Output the list of movies\n    for movie in movies:\n        print(movie['name'])\nelse:\n    print(\"Error in API request\")\n```",
        "usage": [
            334,
            11100,
            11434
        ],
        "executed": "The Fast and the Furious Collection\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the collection - The Fast and the Furious\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"The Fast and the Furious\",\n    \"page\": 1\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\ncollection_id = response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get reviews for a movie in the collection\nmovie_id = collection_id\nreviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\nreviews_params = {\n    \"page\": 1\n}\nreviews_response = requests.get(reviews_url, headers=headers, params=reviews_params)\nreviews = reviews_response.json()[\"results\"]\n\n# Print the reviews\nfor review in reviews:\n    print(\"Author:\", review[\"author\"])\n    print(\"Content:\", review[\"content\"])\n    print(\"URL:\", review[\"url\"])\n    print(\"-------------------\")\n```",
        "usage": [
            384,
            9829,
            10213
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Lord of the Rings\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\ncollection_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get collection details by id\ncollection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\ncollection_response = requests.get(collection_url, headers=headers)\n\n# Extracting the release date of the first movie in the collection\nfirst_movie_release_date = collection_response.json()[\"parts\"][0][\"release_date\"]\nprint(\"The first movie of the collection Lord of the Rings was released on:\", first_movie_release_date)\n```",
        "usage": [
            336,
            10934,
            11270
        ],
        "executed": "The first movie of the collection Lord of the Rings was released on: 2002-04-01\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ]
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details of House of Cards\ntv_show_id = 1855  # House of Cards TV show id\nurl = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/1\"\n\n# Set the API key in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Extract the crew information for the first season\ncrew = data['episodes'][0]['crew']\n\n# Filter out the directors from the crew information\ndirectors = [member['name'] for member in crew if member['job'] == 'Director']\n\nprint(directors)\n```",
        "usage": [
            321,
            9817,
            10138
        ],
        "executed": "['Winrich Kolbe']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"House of Cards\"\nparams = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params)\njson_response = response.json()\n\n# Extract the TV show ID for \"House of Cards\"\ntv_id = json_response[\"results\"][0][\"id\"]\n\n# Get a list of similar TV shows to \"House of Cards\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_id}/similar\", headers=headers, params=params)\nsimilar_tv_shows = response.json()[\"results\"]\n\n# Print the list of similar TV shows\nfor show in similar_tv_shows:\n    print(show[\"name\"])\n```",
        "usage": [
            351,
            9439,
            9790
        ],
        "executed": "The Firmament of the Pleiades\nAge of Legends\nI've Fallen For You\nThe Penthouse\nThe English\n24\nMalcolm in the Middle\nAlias\nWaterfront\nThe Gravy Train Goes East\nFatal Promise\nSpin City\nKkavyanjali\nReunion\n1993\nSilo\nThe Good Wife\nThe Wire\nTarzan: The Epic Adventures\nLove and Deception\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Define the parameters (page number is optional)\nparams = {\n    \"page\": 1\n}\n\n# Define the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    data = response.json()\n    # Check if there are results\n    if data['total_results'] > 0:\n        # Get the details of the most popular TV show currently on the air\n        show = data['results'][0]\n        # Get the first air date of the show\n        first_air_date = show['first_air_date']\n        print(\"The most popular TV show currently on the air started on:\", first_air_date)\n    else:\n        print(\"No TV shows currently on the air found.\")\nelse:\n    print(\"Error with API request. Status code:\", response.status_code)\n```",
        "usage": [
            391,
            9970,
            10361
        ],
        "executed": "The most popular TV show currently on the air started on: 2005-09-26\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ]
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url to search for a movie by query\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Parameters for searching for movies directed by the director of Django Unchained\nparams = {\n    \"query\": \"Quentin Tarantino\",  # Director of Django Unchained\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Calling the API to search for movies directed by Quentin Tarantino\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the response data\ndata = response.json()\n\n# Extracting the movie titles from the results\nmovie_titles = [movie['title'] for movie in data['results']]\n\nprint(movie_titles)\n```",
        "usage": [
            156,
            12279,
            12435
        ],
        "executed": "['Short Cuts: Quentin Tarantino\\'s \"The Hateful Eight\"', 'Quentin Tarantino: 20 Years of Filmmaking', \"Quentin Tarantino: Hollywood's Boy Wonder\", \"Quentin Tarantino's Star Wars\", 'Quentin Tarantino: A Life in Pictures', 'A Christmas Eve Conversation With Quentin Tarantino & Paul Thomas Anderson', 'Quentin Tarantino: From a Movie Buff to a Hollywood Legend', 'QT8: The First Eight', 'Death Proof']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API URL\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the cast of the TV show on the air\n    tv_show_cast = response.json()[\"results\"][0][\"id\"]\n\n    # Call the API to get the credits for the TV show\n    credits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_cast}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n\n    if credits_response.status_code == 200:\n        # Extract the cast information\n        cast = credits_response.json()[\"cast\"]\n        print(cast)\n    else:\n        print(\"Error in retrieving TV show credits\")\nelse:\n    print(\"Error in retrieving TV shows currently on the air\")\n```",
        "usage": [
            394,
            11103,
            11497
        ],
        "executed": "[{'adult': False, 'gender': 2, 'id': 1237276, 'known_for_department': 'Acting', 'name': 'Dirk Galuba', 'original_name': 'Dirk Galuba', 'popularity': 6.304, 'profile_path': '/yYjGRTKpBW2XHaBfoA8ilJtmXDq.jpg', 'character': 'Werner Saalfeld', 'credit_id': '52596ce4760ee34661a10fe1', 'order': 2}, {'adult': False, 'gender': 2, 'id': 18730, 'known_for_department': 'Acting', 'name': 'Sepp Schauer', 'original_name': 'Sepp Schauer', 'popularity': 6.922, 'profile_path': '/9uULTWVv1p4CR5LUfIvt2lo0HP3.jpg', 'character': 'Alfons Sonnbichler', 'credit_id': '52596ce6760ee34661a1101c', 'order': 4}, {'adult': False, 'gender': 1, 'id': 43686, 'known_for_department': 'Acting', 'name': 'Antje Hagen', 'original_name': 'Antje Hagen', 'popularity': 7.061, 'profile_path': '/8r3c92gsghsNFlf40GUMuCIGIb9.jpg', 'character': 'Hildegard Sonnbichler', 'credit_id': '52596ce4760ee34661a10ff9', 'order': 5}, {'adult': False, 'gender': 2, 'id': 1256857, 'known_for_department': 'Acting', 'name': 'Erich Altenkopf', 'original_name': 'Erich Altenkopf', 'popularity': 2.925, 'profile_path': '/nMDLJZbcllPQggIFes4PnKkkU1B.jpg', 'character': 'Michael Niederb\u00fchl', 'credit_id': '52596cea760ee34661a1108c', 'order': 11}, {'adult': False, 'gender': 2, 'id': 43164, 'known_for_department': 'Acting', 'name': 'Dieter Bach', 'original_name': 'Dieter Bach', 'popularity': 9.269, 'profile_path': '/njFl1thZDLxqV9iuRcjB4dBPOi8.jpg', 'character': 'Christoph Saalfeld', 'credit_id': '5d0dda1b925141779dba4b66', 'order': 26}, {'adult': False, 'gender': 0, 'id': 4391697, 'known_for_department': 'Acting', 'name': 'Soluna-Delta Kokol', 'original_name': 'Soluna-Delta Kokol', 'popularity': 0.833, 'profile_path': '/70vE88bOCcbYDSuYrG8Xb8GLIDa.jpg', 'character': 'Ana Alves', 'credit_id': '655e7d831dbc880100e1e74f', 'order': 62}, {'adult': False, 'gender': 0, 'id': 2866117, 'known_for_department': 'Acting', 'name': 'Robin Schick', 'original_name': 'Robin Schick', 'popularity': 0.75, 'profile_path': '/nahIRf8mVFm4racNbj3pQe4MmqR.jpg', 'character': 'Philipp Brandes', 'credit_id': '655e7d96b2681f00abba054f', 'order': 63}, {'adult': False, 'gender': 2, 'id': 1628452, 'known_for_department': 'Acting', 'name': 'Martin Walde', 'original_name': 'Martin Walde', 'popularity': 5.566, 'profile_path': '/AoC1CQRtyYf0UG5wocxyUNtvCOj.jpg', 'character': 'Vincent Ritter', 'credit_id': '655e7da47dfda600ac20d8e2', 'order': 64}, {'adult': False, 'gender': 2, 'id': 66061, 'known_for_department': 'Acting', 'name': 'Sven Waasner', 'original_name': 'Sven Waasner', 'popularity': 3.879, 'profile_path': '/wjosfX2GuJFInKpXWu0oFypBNqH.jpg', 'character': 'Erik Vogt', 'credit_id': '655e7de51d356300e11038cb', 'order': 65}, {'adult': False, 'gender': 1, 'id': 1249925, 'known_for_department': 'Acting', 'name': 'Tanja Lan\u00e4us', 'original_name': 'Tanja Lan\u00e4us', 'popularity': 4.727, 'profile_path': '/rHnGT7gzB6fZvHy9c8txq2HMJmp.jpg', 'character': 'Yvonne Klee', 'credit_id': '655e7df4244182012da9d3ff', 'order': 66}, {'adult': False, 'gender': 1, 'id': 3155850, 'known_for_department': 'Acting', 'name': 'Sabine Werner', 'original_name': 'Sabine Werner', 'popularity': 1.189, 'profile_path': '/owiu36yjlR7YVty9Pj7jxlytlhv.jpg', 'character': 'Helene Richter', 'credit_id': '655e7e04180dea0100bd0bba', 'order': 67}, {'adult': False, 'gender': 2, 'id': 3117593, 'known_for_department': 'Acting', 'name': 'Daniela Kiefer', 'original_name': 'Daniela Kiefer', 'popularity': 1.896, 'profile_path': '/qXEq4uCvt3C1RQ5LdUBz1Jw37vy.jpg', 'character': 'Alexandra Schwarzbach', 'credit_id': '655e7e1a180dea0100bd0bbf', 'order': 68}, {'adult': False, 'gender': 2, 'id': 1815165, 'known_for_department': 'Acting', 'name': 'Timo Ben Sch\u00f6fer', 'original_name': 'Timo Ben Sch\u00f6fer', 'popularity': 1.712, 'profile_path': '/iYJIKGyK1FpNJ1SjchOQLwAEuf9.jpg', 'character': 'Markus Schwarzbach', 'credit_id': '655e7e29244182014e875b51', 'order': 69}, {'adult': False, 'gender': 0, 'id': 2483494, 'known_for_department': 'Acting', 'name': 'Christopher Jan Busse', 'original_name': 'Christopher Jan Busse', 'popularity': 2.07, 'profile_path': '/cbBxGyjnlw6AQTLxL3BuwilyLm3.jpg', 'character': 'Noah Schwarzbach', 'credit_id': '655e7e4024418200ca7552d2', 'order': 70}, {'adult': False, 'gender': 1, 'id': 1235095, 'known_for_department': 'Acting', 'name': 'Laura Osswald', 'original_name': 'Laura Osswald', 'popularity': 7.408, 'profile_path': '/iuqXfgnOKU3wiphLUCFNiGe6MZi.jpg', 'character': 'Greta Bergmann', 'credit_id': '655e7e4d1dbc88013be3d1dc', 'order': 71}, {'adult': False, 'gender': 1, 'id': 1796464, 'known_for_department': 'Acting', 'name': 'Yeliz Simsek', 'original_name': 'Yeliz Simsek', 'popularity': 2.133, 'profile_path': None, 'character': 'Lale Ceylan', 'credit_id': '655e7e5db2681f00abba0596', 'order': 72}, {'adult': False, 'gender': 2, 'id': 1874867, 'known_for_department': 'Acting', 'name': 'Tim Borys', 'original_name': 'Tim Borys', 'popularity': 3.55, 'profile_path': '/eM8gdbRTGLSOSwv8X6D7OSlXob.jpg', 'character': 'Julian Specht', 'credit_id': '655e7e6ab2681f0138baa6a3', 'order': 73}, {'adult': False, 'gender': 0, 'id': 4391718, 'known_for_department': 'Acting', 'name': 'Dionne Wudu', 'original_name': 'Dionne Wudu', 'popularity': 0.84, 'profile_path': '/gSvoRh6lRnLM0FduX3sIciTIj17.jpg', 'character': 'Nicole Alves', 'credit_id': '655e7e781d356300abc04743', 'order': 74}, {'adult': False, 'gender': 2, 'id': 3624219, 'known_for_department': 'Acting', 'name': 'Lukas Leibe', 'original_name': 'Lukas Leibe', 'popularity': 0.996, 'profile_path': '/knJxStM65Zao5t9rd2hObQzSbet.jpg', 'character': 'Theo Licht', 'credit_id': '655e7e841d356300e11038ec', 'order': 75}, {'adult': False, 'gender': 0, 'id': 2672641, 'known_for_department': 'Acting', 'name': 'Isabell Stern', 'original_name': 'Isabell Stern', 'popularity': 2.304, 'profile_path': '/mj7m87c7AzJ8SBaWiPTdqqcAcdG.jpg', 'character': 'Katja Neubach', 'credit_id': '655e7e97706e5600e1514680', 'order': 76}, {'adult': False, 'gender': 0, 'id': 4523727, 'known_for_department': 'Acting', 'name': 'Milan Marcus', 'original_name': 'Milan Marcus', 'popularity': 1.186, 'profile_path': '/q800OjDGKPO75uAcSmhqo1MW0X0.jpg', 'character': 'Tom Dammann', 'credit_id': '65c3d3782fe2fa016229f2e3', 'order': 84}]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "I need a review for Breaking Bad",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url for searching TV shows\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for the query\nparams = {\n    \"query\": \"Breaking Bad\",  # TV show name to search\n    \"page\": 1,  # Page number\n    \"include_adult\": False  # Exclude adult content\n}\n\n# Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nresponse = requests.get(url, headers=headers, params=params)\n\ndata = response.json()\n\n# Print the review for Breaking Bad\nprint(data['results'][0]['name'] + \" Review:\")\nreview_url = f\"https://api.themoviedb.org/3/tv/{data['results'][0]['id']}/reviews\"\nreview_params = {\n    \"page\": 1  # Page number\n}\nreview_response = requests.get(review_url, headers=headers, params=review_params)\nreview_data = review_response.json()\nreviews = review_data['results']\nfor i, review in enumerate(reviews):\n    print(f\"Review #{i+1}:\")\n    print(f\"Author: {review['author']}\")\n    print(f\"Content: {review['content']}\")\n```",
        "usage": [
            413,
            10605,
            11018
        ],
        "executed": "Breaking Bad Review:\nReview #1:\nAuthor: slyone10001\nContent: Wow....where to start. Not really into \"DRUG\" inspired shows. But this one had me from the start. The only bad about this show was the split seasons when it was a first run show. But now you can go right through to the next episode with out having to wait.....MUST WATCH ! !\nReview #2:\nAuthor: Dean\nContent: I'll be honest, at first when I started this TV show and finished first season, I didn't like it. It felt boring for me and I stopped watching, but after few years, I decided to give it a chance and continue. I'm so happy because of my decision, because after finishing this TV show, I can definitely tell that it was a masterpiece! 5th season is a bomb and 14th season was shocking! It left me with sad, euphoric shock feeling. It was mind blowing! I'm not gonna spoil you what happened, but if you started first season and you don't like it, for goodness sake, give it a chance and continue watching. I promise you won't regret.\r\n\r\nCharacters are very well developed. Acting is superb! Plot is very interesting. Whole TV show is tense, especially the last season. The only downside I can think about is camera. Sometimes it's shaking on some certain scenes. I don't know why they didn't pay attention to this, but this is nothing, just a very minor minus. Everything else is great about this TV show.\nReview #3:\nAuthor: l33t5p34k3r\nContent: Started out really good, but dropped quality after the second to last season\nReview #4:\nAuthor: drystyx\nContent: This is the kind of TV show for the \"formula lovers\" who want to feel superior.\r\nThere is an air of the superiority complex of the \"drug knowledgeable\" crowd in this series about a \"smart guy\" breaking into the drug trade.\r\nHis \"talent\" makes him the important cog in the machine. He can call his shots.\r\nStill, the ruffians give him a rough way to go, because criminals really are stupid.\r\nOnce they learn that they are nothing without him, he gets his way.\r\nMuch like a Western town blacksmith, he's the needed ingredient.\r\nHowever, things get very formula early on in the show. And there's always this sense of a superiority complex from the sort of people who push shows like this onto their friends and acquaintances. The directing writing team tap into the control freak crowd very well.\r\nBut it is a dull show about dull people.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ]
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/tv/46648/recommendations\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Set the API key in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the results in JSON format\nrecommendations = response.json()\n\nrecommendations\n```",
        "usage": [
            264,
            9737,
            10001
        ],
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show The Last Of Us\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Last Of Us\"\n}\nresponse = requests.get(search_tv_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show ID for The Last Of Us\ntv_id = data['results'][0]['id']\n\n# Get recommendations for the TV show The Last Of Us\nrecommendations_tv_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\nresponse = requests.get(recommendations_tv_url, headers=headers)\nrecommendations = response.json()\n\n# Print the recommendations\nprint(recommendations)\n```",
        "usage": [
            332,
            10779,
            11111
        ],
        "executed": "{'page': 1, 'results': [{'adult': False, 'backdrop_path': '/9zcbqSxdsRMZWHYtyCd1nXPr2xq.jpg', 'id': 82856, 'name': 'The Mandalorian', 'original_language': 'en', 'original_name': 'The Mandalorian', 'overview': 'After the fall of the Galactic Empire, lawlessness has spread throughout the galaxy. A lone gunfighter makes his way through the outer reaches, earning his keep as a bounty hunter.', 'poster_path': '/eU1i6eHXlzMOlEq0ku1Rzq7Y4wA.jpg', 'media_type': 'tv', 'genre_ids': [10765, 10759, 18], 'popularity': 227.975, 'first_air_date': '2019-11-12', 'vote_average': 8.445, 'vote_count': 9657, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/iHSwvRVsRyxpX7FE7GbviaDvgGZ.jpg', 'id': 119051, 'name': 'Wednesday', 'original_language': 'en', 'original_name': 'Wednesday', 'overview': 'Wednesday Addams is sent to Nevermore Academy, a bizarre boarding school where she attempts to master her psychic powers, stop a monstrous killing spree of the town citizens, and solve the supernatural mystery that affected her family 25 years ago \u2014 all while navigating her new relationships.', 'poster_path': '/9PFonBhy4cQy7Jz20NpMygczOkv.jpg', 'media_type': 'tv', 'genre_ids': [10765, 9648, 35], 'popularity': 194.558, 'first_air_date': '2022-11-23', 'vote_average': 8.499, 'vote_count': 8032, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/rIe3PnM6S7IBUmvNwDkBMX0i9EZ.jpg', 'id': 1399, 'name': 'Game of Thrones', 'original_language': 'en', 'original_name': 'Game of Thrones', 'overview': \"Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond.\", 'poster_path': '/1XS1oqL89opfnbLl8WnZY1O1uJx.jpg', 'media_type': 'tv', 'genre_ids': [10765, 18, 10759], 'popularity': 994.002, 'first_air_date': '2011-04-17', 'vote_average': 8.446, 'vote_count': 22760, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/20eIP9o5ebArmu2HxJutaBjhLf4.jpg', 'id': 87108, 'name': 'Chernobyl', 'original_language': 'en', 'original_name': 'Chernobyl', 'overview': 'The true story of one of the worst man-made catastrophes in history: the catastrophic nuclear accident at Chernobyl. A tale of the brave men and women who sacrificed to save Europe from unimaginable disaster.', 'poster_path': '/hlLXt2tOPT6RRnjiUmoxyG1LTFi.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 124.986, 'first_air_date': '2019-05-06', 'vote_average': 8.66, 'vote_count': 5773, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/9faGSFi5jam6pDWGNd0p8JcJgXQ.jpg', 'id': 1396, 'name': 'Breaking Bad', 'original_language': 'en', 'original_name': 'Breaking Bad', 'overview': \"Walter White, a New Mexico chemistry teacher, is diagnosed with Stage III cancer and given a prognosis of only two years left to live. He becomes filled with a sense of fearlessness and an unrelenting desire to secure his family's financial future at any cost as he enters the dangerous world of drugs and crime.\", 'poster_path': '/ztkUQFLlC19CCMYHW9o1zWhJRNq.jpg', 'media_type': 'tv', 'genre_ids': [18, 80], 'popularity': 649.263, 'first_air_date': '2008-01-20', 'vote_average': 8.904, 'vote_count': 13220, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/56v2KjBlU4XaOv9rVYEQypROD7P.jpg', 'id': 66732, 'name': 'Stranger Things', 'original_language': 'en', 'original_name': 'Stranger Things', 'overview': 'When a young boy vanishes, a small town uncovers a mystery involving secret experiments, terrifying supernatural forces, and one strange little girl.', 'poster_path': '/49WJfeN0moxb9IPfGn8AIqMGskD.jpg', 'media_type': 'tv', 'genre_ids': [18, 10765, 9648], 'popularity': 338.647, 'first_air_date': '2016-07-15', 'vote_average': 8.6, 'vote_count': 16776, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/mNHRGO1gFpR2CYZdANe72kcKq7G.jpg', 'id': 153312, 'name': 'Tulsa King', 'original_language': 'en', 'original_name': 'Tulsa King', 'overview': 'Just after he is released from prison after 25 years, New York mafia capo Dwight \u201cThe General\u201d Manfredi is unceremoniously exiled by his boss to set up shop in Tulsa, Okla. Realizing that his mob family may not have his best interests in mind, Dwight slowly builds a \u201ccrew\u201d from a group of unlikely characters, to help him establish a new criminal empire in a place that to him might as well be another planet.', 'poster_path': '/fwTv3RPRAIy0maOMns5eYRRwnDk.jpg', 'media_type': 'tv', 'genre_ids': [80, 18], 'popularity': 118.295, 'first_air_date': '2022-11-13', 'vote_average': 8.4, 'vote_count': 1494, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/vXpeJJs1z8OKC88CNJX9O9QOhtr.jpg', 'id': 94997, 'name': 'House of the Dragon', 'original_language': 'en', 'original_name': 'House of the Dragon', 'overview': 'The Targaryen dynasty is at the absolute apex of its power, with more than 15 dragons under their yoke. Most empires crumble from such heights. In the case of the Targaryens, their slow fall begins when King Viserys breaks with a century of tradition by naming his daughter Rhaenyra heir to the Iron Throne. But when Viserys later fathers a son, the court is shocked when Rhaenyra retains her status as his heir, and seeds of division sow friction across the realm.', 'poster_path': '/m7ta0kNg2ONvnBFF76miVvbWK1V.jpg', 'media_type': 'tv', 'genre_ids': [10765, 18, 10759], 'popularity': 299.308, 'first_air_date': '2022-08-21', 'vote_average': 8.421, 'vote_count': 3731, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/x4salpjB11umlUOltfNvSSrjSXm.jpg', 'id': 1402, 'name': 'The Walking Dead', 'original_language': 'en', 'original_name': 'The Walking Dead', 'overview': \"Sheriff's deputy Rick Grimes awakens from a coma to find a post-apocalyptic world dominated by flesh-eating zombies. He sets out to find his family and encounters many other survivors along the way.\", 'poster_path': '/n7PVu0hSz2sAsVekpOIoCnkWlbn.jpg', 'media_type': 'tv', 'genre_ids': [10759, 18, 10765], 'popularity': 521.542, 'first_air_date': '2010-10-31', 'vote_average': 8.1, 'vote_count': 15872, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/2ZNFu0hkSVtAI6LRWGIlCPNd1Tj.jpg', 'id': 78191, 'name': 'You', 'original_language': 'en', 'original_name': 'You', 'overview': 'A dangerously charming, intensely obsessive young man goes to extreme measures to insert himself into the lives of those he is transfixed by.', 'poster_path': '/7bEYwjUvlJW7GerM8GYmqwl4oS3.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 187.278, 'first_air_date': '2018-09-09', 'vote_average': 8.066, 'vote_count': 2944, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/n6vVs6z8obNbExdD3QHTr4Utu1Z.jpg', 'id': 76479, 'name': 'The Boys', 'original_language': 'en', 'original_name': 'The Boys', 'overview': 'A group of vigilantes known informally as \u201cThe Boys\u201d set out to take down corrupt superheroes with no more than blue-collar grit and a willingness to fight dirty.', 'poster_path': '/7Ns6tO3aYjppI5bFhyYZurOYGBT.jpg', 'media_type': 'tv', 'genre_ids': [10765, 10759], 'popularity': 346.739, 'first_air_date': '2019-07-25', 'vote_average': 8.5, 'vote_count': 9228, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/rBF8wVQN8hTWHspVZBlI3h7HZJ.jpg', 'id': 60625, 'name': 'Rick and Morty', 'original_language': 'en', 'original_name': 'Rick and Morty', 'overview': \"Rick is a mentally-unbalanced but scientifically gifted old man who has recently reconnected with his family. He spends most of his time involving his young grandson Morty in dangerous, outlandish adventures throughout space and alternate universes. Compounded with Morty's already unstable family life, these events cause Morty much distress at home and school.\", 'poster_path': '/gdIrmf2DdY5mgN6ycVP0XlzKzbE.jpg', 'media_type': 'tv', 'genre_ids': [16, 35, 10765, 10759], 'popularity': 666.249, 'first_air_date': '2013-12-02', 'vote_average': 8.702, 'vote_count': 9218, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/57clBMPX25NNO6nmDw3TV3zQaQE.jpg', 'id': 114472, 'name': 'Secret Invasion', 'original_language': 'en', 'original_name': 'Secret Invasion', 'overview': 'Nick Fury and Talos discover a faction of shapeshifting Skrulls who have been infiltrating Earth for years.', 'poster_path': '/f5ZMzzCvt2IzVDxr54gHPv9jlC9.jpg', 'media_type': 'tv', 'genre_ids': [18, 10765, 10759], 'popularity': 126.163, 'first_air_date': '2023-06-21', 'vote_average': 6.859, 'vote_count': 928, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/vLN520GJvHJJQOFqqV7RjZNBwi7.jpg', 'id': 129552, 'name': 'The Night Agent', 'original_language': 'en', 'original_name': 'The Night Agent', 'overview': 'While monitoring an emergency line, a vigilant FBI agent answers a call that plunges him into a deadly conspiracy involving a mole at the White House.', 'poster_path': '/xjsx6rGEgHl2tUqkimo6Bz2KzVo.jpg', 'media_type': 'tv', 'genre_ids': [18, 9648, 10759], 'popularity': 90.464, 'first_air_date': '2023-03-23', 'vote_average': 7.874, 'vote_count': 573, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/u7OpeS4eckBSR1wFxFTuyy3FjHE.jpg', 'id': 154385, 'name': 'BEEF', 'original_language': 'en', 'original_name': 'BEEF', 'overview': 'A road rage incident between two strangers \u2014 a failing contractor and an unfulfilled entrepreneur \u2014 sparks a feud that brings out their darkest impulses.', 'poster_path': '/4b4v7RnPhNyPEaVGFarEuo74r8W.jpg', 'media_type': 'tv', 'genre_ids': [35, 18], 'popularity': 66.703, 'first_air_date': '2023-04-06', 'vote_average': 7.839, 'vote_count': 482, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/AjwoDj77HLlqcpwEGqsnvMXm5my.jpg', 'id': 136283, 'name': 'The Glory', 'original_language': 'ko', 'original_name': '\ub354 \uae00\ub85c\ub9ac', 'overview': 'After a childhood marked by pain and violence, a woman puts a carefully planned revenge scheme in motion.', 'poster_path': '/uUM4LVlPgIrww07OoEKrGWlS1Ej.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 111.593, 'first_air_date': '2022-12-30', 'vote_average': 8.555, 'vote_count': 568, 'origin_country': ['KR']}, {'adult': False, 'backdrop_path': '/npD65vPa4vvn1ZHpp3o05A5vdKT.jpg', 'id': 95396, 'name': 'Severance', 'original_language': 'en', 'original_name': 'Severance', 'overview': 'Mark leads a team of office workers whose memories have been surgically divided between their work and personal lives. When a mysterious colleague appears outside of work, it begins a journey to discover the truth about their jobs.', 'poster_path': '/lFf6LLrQjYldcZItzOkGmMMigP7.jpg', 'media_type': 'tv', 'genre_ids': [18, 9648, 10765], 'popularity': 117.625, 'first_air_date': '2022-02-17', 'vote_average': 8.403, 'vote_count': 1007, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/qBppESpY8e97WfPWVZiU0JdRXw.jpg', 'id': 84773, 'name': 'The Lord of the Rings: The Rings of Power', 'original_language': 'en', 'original_name': 'The Lord of the Rings: The Rings of Power', 'overview': 'Beginning in a time of relative peace, we follow an ensemble cast of characters as they confront the re-emergence of evil to Middle-earth. From the darkest depths of the Misty Mountains, to the majestic forests of Lindon, to the breathtaking island kingdom of N\u00famenor, to the furthest reaches of the map, these kingdoms and characters will carve out legacies that live on long after they are gone.', 'poster_path': '/mYLOqiStMxDK3fYZFirgrMt8z5d.jpg', 'media_type': 'tv', 'genre_ids': [10759, 10765, 18], 'popularity': 211.148, 'first_air_date': '2022-09-01', 'vote_average': 7.4, 'vote_count': 2396, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/hR2pFXMxVihldEk5WoSrV7Yq2ra.jpg', 'id': 124364, 'name': 'From', 'original_language': 'en', 'original_name': 'From', 'overview': 'Unravel the mystery of a nightmarish town in middle America that traps all those who enter. As the unwilling residents fight to keep a sense of normalcy and search for a way out, they must also survive the threats of the surrounding forest \u2013 including the terrifying creatures that come out when the sun goes down.', 'poster_path': '/pnrv8tfOcWxu4CrB8N7xK0jYJsR.jpg', 'media_type': 'tv', 'genre_ids': [9648, 18, 10765], 'popularity': 188.821, 'first_air_date': '2022-02-20', 'vote_average': 8.146, 'vote_count': 869, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/mYegNdFjJeCISA1RDDCKBhKB4Ao.jpg', 'id': 126725, 'name': 'Velma', 'original_language': 'en', 'original_name': 'Velma', 'overview': 'Jinkies! This raucous reimagining of the Scooby-Doo franchise unravels the mysterious origins of Mystery, Inc. \u2013 as seen through the eyes of the gang\u2019s beloved bespectacled detective Velma.', 'poster_path': '/zxkNhuPSHeDv3yA7sFu2RuEOGgR.jpg', 'media_type': 'tv', 'genre_ids': [16, 35], 'popularity': 39.651, 'first_air_date': '2023-01-12', 'vote_average': 3.464, 'vote_count': 248, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/34OGjFEbHj0E3lE2w0iTUVq0CBz.jpg', 'id': 87739, 'name': \"The Queen's Gambit\", 'original_language': 'en', 'original_name': \"The Queen's Gambit\", 'overview': 'In a 1950s orphanage, a young girl reveals an astonishing talent for chess and begins an unlikely journey to stardom while grappling with addiction.', 'poster_path': '/zU0htwkhNvBQdVSIKB9s6hgVeFK.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 113.416, 'first_air_date': '2020-10-23', 'vote_average': 8.503, 'vote_count': 4123, 'origin_country': ['US']}], 'total_pages': 2, 'total_results': 40}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ]
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/1668/season/3/episode/24/credits\"\n\n# Set the required headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    \n    # Extract the guest stars from the response\n    guest_stars = data.get(\"guest_stars\")\n    \n    # Print the list of guest stars\n    for star in guest_stars:\n        print(star[\"name\"])\nelse:\n    print(\"Error occurred. Status code:\", response.status_code)\n```",
        "usage": [
            312,
            11391,
            11703
        ],
        "executed": "Christine Taylor\nJames Hong\nJon Favreau\nSteve Park\nJoe O'Connor\nRobin Williams\nBilly Crystal\nBruce Buffer\nJohn McCarthy\nSam McMurray\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the TV popular API to get the list of popular TV shows\npopular_tv_url = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}  # Page 1\nresponse = requests.get(popular_tv_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the first TV show from the results\nif data.get(\"results\"):\n    first_tv_show = data[\"results\"][0]\n    tv_id = first_tv_show.get(\"id\")\n    \n    if tv_id:\n        # Call the TV credits API to get the credits for the TV show\n        credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n        response_credits = requests.get(credits_url, headers=headers)\n        data_credits = response_credits.json()\n        \n        # Get the lead actor's name from the cast\n        lead_actor = None\n        if data_credits.get(\"cast\"):\n            cast = data_credits[\"cast\"]\n            if len(cast) > 0:\n                lead_actor = cast[0][\"name\"]\n        \n        print(\"Lead Actor in the most popular TV show:\", lead_actor)\n    else:\n        print(\"TV ID not found\")\nelse:\n    print(\"No TV shows found in the results\")  \n```",
        "usage": [
            460,
            10334,
            10794
        ],
        "executed": "Lead Actor in the most popular TV show: Dirk Galuba\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ]
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/tv/top_rated\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the top rated TV shows data\n    top_rated_tv_shows = response.json()\n    \n    # Extract the keyword of the top-1 rated TV show\n    if len(top_rated_tv_shows[\"results\"]) > 0:\n        top_rated_tv_show_keyword = top_rated_tv_shows[\"results\"][0][\"name\"]\n        print(\"Keyword of the top-1 rated TV show:\", top_rated_tv_show_keyword)\n    else:\n        print(\"No top rated TV shows found\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            380,
            10039,
            10419
        ],
        "executed": "Keyword of the top-1 rated TV show: Hazbin Hotel\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# search for the TV show \"2 Broke Girls\"\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\",\n    \"page\": 1\n}\n\n# make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# extract the poster path from the response\nif response.status_code == 200:\n    data = response.json()\n    poster_path = data['results'][0]['poster_path']\n    print(poster_path)\nelse:\n    print(\"Error: Unable to retrieve the poster path\")\n```",
        "usage": [
            305,
            11104,
            11409
        ],
        "executed": "/qCa4ANpF1QOioqRUNHgk2B3KFMZ.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ]
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for searching TV show \"2 Broke Girls\"\nparams_search_tv = {\n    \"query\": \"2 Broke Girls\"\n}\n\n# Calling the API to search for \"2 Broke Girls\"\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Getting the TV show id of \"2 Broke Girls\"\ntv_id_2_broke_girls = data_search_tv['results'][0]['id']\n\n# API url for getting TV show details by id\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id_2_broke_girls}\"\n# Parameters for getting TV show details\nparams_tv_details = {}\n# Calling the API to get details of \"2 Broke Girls\"\nresponse_tv_details = requests.get(url_tv_details, headers=headers, params=params_tv_details)\ndata_tv_details = response_tv_details.json()\n\n# Calculating total number of episodes\ntotal_episodes = sum([season['episode_count'] for season in data_tv_details['seasons']])\n\nprint(f\"Total number of episodes in 2 Broke Girls: {total_episodes}\")\n```",
        "usage": [
            451,
            12937,
            13388
        ],
        "executed": "Total number of episodes in 2 Broke Girls: 137\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the http headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the company Warner Bros. Television which produced The Big Bang Theory\nurl_search_company = \"https://api.themoviedb.org/3/search/company\"\nparams_search_company = {\n    \"query\": \"Warner Bros. Television\"\n}\nresponse_search_company = requests.get(url_search_company, headers=headers, params=params_search_company)\nresults_search_company = response_search_company.json()\n\n# Get the company id for Warner Bros. Television\ncompany_id = results_search_company[\"results\"][0][\"id\"]\n\n# Get the company details including the foundation date\nurl_company_details = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse_company_details = requests.get(url_company_details, headers=headers)\ncompany_details = response_company_details.json()\n\n# Extract and print the foundation date of Warner Bros. Television\nfoundation_date = company_details[\"description\"]\nprint(\"The company Warner Bros. Television was founded on:\", foundation_date)\n```",
        "usage": [
            376,
            10970,
            11346
        ],
        "executed": "The company Warner Bros. Television was founded on: \n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/company"
        ]
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers for accessing the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the endpoint for searching TV show with the title \"The Big Bang Theory\"\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Big Bang Theory\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the first result which should be The Big Bang Theory\nif data[\"total_results\"] > 0:\n    first_result = data[\"results\"][0]\n\n    # Get the first air date of The Big Bang Theory\n    first_air_date = first_result[\"first_air_date\"]\n    print(\"The Big Bang Theory was created on:\", first_air_date)\nelse:\n    print(\"The Big Bang Theory not found in the search results.\")\n```",
        "usage": [
            346,
            10357,
            10703
        ],
        "executed": "The Big Bang Theory was created on: 2007-09-24\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the keyword of the most popular TV show\nif 'results' in data and len(data['results']) > 0:\n    first_show = data['results'][0]\n    tv_id = first_show['id']\n    keyword_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    \n    keyword_response = requests.get(keyword_url, headers=headers)\n    keyword_data = keyword_response.json()\n    \n    if 'results' in keyword_data and len(keyword_data['results']) > 0:\n        keyword = keyword_data['results'][0]['name']\n        print(f\"The keyword of the most popular TV show is: {keyword}\")\n    else:\n        print(\"No keyword found for the most popular TV show.\")\nelse:\n    print(\"No TV shows found.\")\n```",
        "usage": [
            394,
            10817,
            11211
        ],
        "executed": "The keyword of the most popular TV show is: germany\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/tv/63247/season/2/episode/3\"\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Extract the overview of the episode\n    episode_overview = data[\"overview\"]\n    print(\"The third episode of the second season of Westworld talks about: \", episode_overview)\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            307,
            9384,
            9691
        ],
        "executed": "The third episode of the second season of Westworld talks about:  There is beauty in who we are. Shouldn't we, too, try to survive? Truth is, we don't all deserve to make it. Dolores makes her next move as Charlotte scrambles to protect Delos' most prized asset. Bernard gets closer to the truth and Maeve continues the search for her daughter.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url for getting TV show details\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters for the query\nparams = {\n    \"query\": \"Game of Thrones\",\n    \"include_adult\": False\n}\n\n# Make the HTTP GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the JSON response\ndata = response.json()\n\n# Get the TV show id for Game of Thrones\ntv_show_id = data[\"results\"][0][\"id\"]\n\n# Now, we need to get details of the second season of Game of Thrones\nurl = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/2\"\n\n# Make the HTTP GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Parse the JSON response\ndata = response.json()\n\n# Get the air date of the second season of Game of Thrones\nair_date = data[\"air_date\"]\nprint(air_date)\n```",
        "usage": [
            220,
            11299,
            11519
        ],
        "executed": "2012-03-31\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the necessary headers for API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Band of Brothers\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Band of Brothers\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the TV show id for \"Band of Brothers\"\ntv_id = search_results['results'][0]['id']\n\n# Get the images for the third episode of \"Band of Brothers\"\nepisode_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1/episode/3/images\"\nepisode_response = requests.get(episode_url, headers=headers)\nepisode_results = episode_response.json()\n\n# Get the poster path for the third episode\nposter_path = episode_results['stills'][0]['file_path']\n\nprint(poster_path)\n```",
        "usage": [
            374,
            11498,
            11872
        ],
        "executed": "/122cDgrjc5lFqUZ7cYi8vUVrcrn.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ]
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API URL to get the details of the TV show 'Game of Thrones' by id\nurl = \"https://api.themoviedb.org/3/tv/1399\"\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to fetch the details of the TV show 'Game of Thrones'\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Extract the network logo details\nnetwork_logo_path = data[\"networks\"][0][\"logo_path\"]\n\n# Display the logo of the network that produced Game of Thrones\nprint(network_logo_path)\n```",
        "usage": [
            296,
            11745,
            12041
        ],
        "executed": "/tuomPhY2UtuPTqqFnKMVHvSb724.png\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ]
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show Game of Thrones\nurl_search = \"https://api.themoviedb.org/3/search/tv\"\nparams_search = {\n    \"query\": \"Game of Thrones\"\n}\nresponse_search = requests.get(url_search, headers=headers, params=params_search)\ndata_search = response_search.json()\n\n# Get the network homepage \nif 'results' in data_search and len(data_search['results']) > 0:\n    tv_id = data_search['results'][0]['id']\n    url_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    response_tv_details = requests.get(url_tv_details, headers=headers)\n    data_tv_details = response_tv_details.json()\n\n    # Get the network id\n    if 'networks' in data_tv_details and len(data_tv_details['networks']) > 0:\n        network_id = data_tv_details['networks'][0]['id']\n        \n        # Get network details including homepage\n        url_network = f\"https://api.themoviedb.org/3/network/{network_id}\"\n        response_network = requests.get(url_network, headers=headers)\n        data_network = response_network.json()\n\n        if 'homepage' in data_network:\n            homepage = data_network['homepage']\n            print(homepage)\n        else:\n            print(\"Homepage not found for network\")\n    else:\n        print(\"Network details not found for the TV show\")\nelse:\n    print(\"TV show not found\")\n```",
        "usage": [
            481,
            12096,
            12577
        ],
        "executed": "https://www.hbo.com\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Define the headers with API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    # Get the data from the response\n    data = response.json()\n    # Get the first TV show result\n    first_show = data['results'][0]\n    # Get the TV show id\n    tv_id = first_show['id']\n    \n    # Call the API to get keywords for the most popular TV show\n    keyword_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    keyword_response = requests.get(keyword_url, headers=headers)\n    \n    if keyword_response.status_code == 200:\n        keyword_data = keyword_response.json()\n        keyword = keyword_data['results'][0]['name']\n        print(keyword)\n    else:\n        print(\"Error fetching keyword data\")\nelse:\n    print(\"Error fetching TV show data\")\n```",
        "usage": [
            419,
            10394,
            10813
        ],
        "executed": "germany\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API endpoints\ntv_popular_url = \"https://api.themoviedb.org/3/tv/popular\"\ncompany_url = \"https://api.themoviedb.org/3/company/{}\"\n\n# Set the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of popular TV shows\nresponse = requests.get(tv_popular_url, headers=headers)\ntv_popular_data = response.json()\n\n# Get the company ID of the company that produced the most popular TV show\nmost_popular_show = tv_popular_data['results'][0]\ncompany_id = most_popular_show['production_companies'][0]['id']\n\n# Get the company details by company ID\ncompany_response = requests.get(company_url.format(company_id), headers=headers)\ncompany_data = company_response.json()\n\n# Extract the headquarters of the company\nheadquarters = company_data['headquarters']\nprint(\"The headquarter of the company that produced the currently most popular TV show is:\", headquarters)\n```",
        "usage": [
            370,
            12278,
            12648
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV shows matching the query \"The Mandalorian\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"The Mandalorian\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\nresults_search_tv = response_search_tv.json()\n\n# Get the genre of The Mandalorian\nif 'results' in results_search_tv and len(results_search_tv['results']) > 0:\n    tv_id = results_search_tv['results'][0]['id']\n    \n    # Get TV show details by id\n    url_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    response_tv_details = requests.get(url_tv_details, headers=headers)\n    tv_details = response_tv_details.json()\n    \n    genres = tv_details['genres']\n    if genres:\n        genre_names = [genre['name'] for genre in genres]\n        print(genre_names)\n    else:\n        print(\"Genre information not available\")\nelse:\n    print(\"The Mandalorian not found\")\n```",
        "usage": [
            410,
            10818,
            11228
        ],
        "executed": "['Sci-Fi & Fantasy', 'Action & Adventure', 'Drama']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ]
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the trending TV shows\ntrending_tv_url = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(trending_tv_url, headers=headers)\ntrending_tv_data = response.json()\n\n# Get the TV show ID of the most trending TV show\nmost_trending_tv_id = trending_tv_data['results'][0]['id']\n\n# Get the credits (cast and crew) for the TV show\ncredits_url = f\"https://api.themoviedb.org/3/tv/{most_trending_tv_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits_data = response.json()\n\n# Get the lead actor ID\nlead_actor_id = credits_data['cast'][0]['id']\n\n# Get the person details of the lead actor\nperson_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse = requests.get(person_url, headers=headers)\nperson_data = response.json()\n\nbirthday = person_data['birthday']\nprint(\"Birthday of the lead actor of today's most trending TV show is:\", birthday)\n```",
        "usage": [
            412,
            9400,
            9812
        ],
        "executed": "Birthday of the lead actor of today's most trending TV show is: 1984-12-16\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"YOUR_API_KEY\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Get the trending TV shows for today\nurl_trending = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending = requests.get(url_trending, headers=headers)\ntrending_tv_show_id = response_trending.json()['results'][0]['id']\n\n# Get the details of the TV show\nurl_tv_show = f\"https://api.themoviedb.org/3/tv/{trending_tv_show_id}\"\nresponse_tv_show = requests.get(url_tv_show, headers=headers)\nnetwork_id = response_tv_show.json()['networks'][0]['id']\n\n# Get the homepage of the network\nurl_network = f\"https://api.themoviedb.org/3/network/{network_id}\"\nresponse_network = requests.get(url_network, headers=headers)\nnetwork_homepage = response_network.json()['homepage']\n\nprint(network_homepage)\n```",
        "usage": [
            215,
            11739,
            11954
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ]
    },
    {
        "query": "give me a review of today's most trending TV show",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the base url for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the endpoint to get today's trending TV shows\nendpoint = \"trending/tv/day\"\n\n# Construct the full url\nurl = f\"{base_url}/{endpoint}\"\n\n# Assign the API token to the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Extract the TV show id from the response\n    trending_tv_id = response.json()[\"results\"][0][\"id\"]\n    \n    # Define the endpoint to get reviews for a TV show\n    reviews_endpoint = f\"tv/{trending_tv_id}/reviews\"\n    \n    # Construct the full url for reviews\n    reviews_url = f\"{base_url}/{reviews_endpoint}\"\n    \n    # Send a GET request to get reviews for the trending TV show\n    reviews_response = requests.get(reviews_url, headers=headers)\n    \n    # Check if the reviews response is successful\n    if reviews_response.status_code == 200:\n        print(reviews_response.json())\n    else:\n        print(\"Failed to fetch reviews\")\nelse:\n    print(\"Failed to fetch today's trending TV show\")\n```",
        "usage": [
            438,
            11465,
            11903
        ],
        "executed": "{'id': 236235, 'page': 1, 'results': [], 'total_pages': 0, 'total_results': 0}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the trending TV shows for the day\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(url_trending_tv, headers=headers)\n\nif response.status_code == 200:\n    # Get the most popular TV show\n    trending_tv = response.json()['results'][0]\n    \n    # Get the TV show ID\n    tv_id = trending_tv['id']\n    \n    # Get a list of similar TV shows\n    url_similar_tv = f\"https://api.themoviedb.org/3/tv/{tv_id}/similar\"\n\n    # Request similar TV shows\n    response_similar_tv = requests.get(url_similar_tv, headers=headers)\n\n    if response_similar_tv.status_code == 200:\n        # Get the list of similar TV shows\n        similar_tv_shows = response_similar_tv.json()['results']\n        \n        # Print the list of similar TV shows\n        for similar_tv_show in similar_tv_shows:\n            print(similar_tv_show['name'])\n    else:\n        print(\"Failed to fetch similar TV shows\")\nelse:\n    print(\"Failed to fetch trending TV shows\")\n```",
        "usage": [
            427,
            11185,
            11612
        ],
        "executed": "American Gigolo\nLord, Give Me Patience\nAladdin\nBad Teacher\nFX: The Series\nLas historias de Sussi\nHoney, I Shrunk the Kids: The TV Show\nRoughnecks: Starship Troopers Chronicles\nHistory of the World: Part II\nMonarch: Legacy of Monsters\nLet Them Eat Cake\nThe Dead Zone\nUnder Pressure\nted\n18 Again\nAldo: Mais Forte que o Mundo\nLilo & Stitch: The Series\nThe Real Ghostbusters\nCruel Intentions\nAnna Karenina\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/movie"
        ]
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the TV show that is airing today API to get the trending TV show\nurl = \"https://api.themoviedb.org/3/tv/airing_today\"\nparams = {\n    \"page\": 1\n}\n\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    # Get the poster path of the first TV show in the results\n    trending_tv_show = response.json()['results'][0]\n    poster_path = trending_tv_show['poster_path']\n    \n    print(f\"Poster path of today's most trending TV show: {poster_path}\")\nelse:\n    print(\"Error while fetching data\")\n```",
        "usage": [
            320,
            12652,
            12972
        ],
        "executed": "Poster path of today's most trending TV show: /9oZjOh3Va3FsiLGouhSogFsBX9G.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ]
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# headers needed to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Get the person ID for Jeremy Clarkson\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Jeremy Clarkson\",\n    \"page\": 1,\n    \"include_adult\": False,\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the person ID for Jeremy Clarkson\nperson_id = data['results'][0]['id']\n\n# Step 2: Get the TV show credits for Jeremy Clarkson\nperson_tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(person_tv_credits_url, headers=headers)\ndata = response.json()\n\n# Extract the TV show with highest popularity for Jeremy Clarkson\ntv_show_id = None\nhighest_popularity = -1\nfor credit in data['cast']:\n    if credit['popularity'] > highest_popularity:\n        highest_popularity = credit['popularity']\n        tv_show_id = credit['id']\n\n# Step 3: Get the credits for the most popular TV show\ntv_show_credits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\nresponse = requests.get(tv_show_credits_url, headers=headers)\ndata = response.json()\n\n# Extract the list of people Jeremy Clarkson has worked with in his most popular TV show\nworked_with = []\nfor person in data['cast']:\n    if person['name'] != \"Jeremy Clarkson\":\n        worked_with.append(person['name'])\n\nprint(worked_with)\n```",
        "usage": [
            516,
            11944,
            12460
        ],
        "executed": "['Graham Norton']\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ]
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API key and headers\nAPI_KEY = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\"\n}\n\n# Search for the TV show \"Black Mirror\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Black Mirror\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show ID for Black Mirror\ntv_id = data_search_tv[\"results\"][0][\"id\"]\n\n# Get the credits for the second season of Black Mirror\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the lead actor of the first episode of the second season of Black Mirror\nlead_actor = data_credits[\"cast\"][0][\"name\"]\nlead_actor_profile_path = data_credits[\"cast\"][0][\"profile_path\"]\n\nprint(f\"The lead actor of the first episode of the second season of Black Mirror is: {lead_actor}\")\nprint(f\"Profile path: {lead_actor_profile_path}\")\n```",
        "usage": [
            303,
            10359,
            10662
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ]
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the parameters for the query\nparams = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the TV show ID of The Mandalorian\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Now, we will use the TV show ID to get the credits (cast and crew) for the TV show\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n\n# Make the API request to get the credits\ncredits_response = requests.get(credits_url, headers=headers)\n\n# Extract the lead actor's name from the credits\ncast = credits_response.json()[\"cast\"]\nlead_actor = [actor for actor in cast if actor[\"order\"] == 1][0]\n\n# Now, we will use the lead actor's ID to get their details, including the birthdate\nactor_id = lead_actor[\"id\"]\nactor_details_url = f\"https://api.themoviedb.org/3/person/{actor_id}\"\n\n# Make the API request to get the actor's details\nactor_details_response = requests.get(actor_details_url, headers=headers)\n\n# Extract the birthdate of the lead actor of The Mandalorian\nbirthdate = actor_details_response.json()[\"birthday\"]\n\n# Print the birthdate\nprint(\"The lead actor of The Mandalorian is born on:\", birthdate)\n```",
        "usage": [
            331,
            11458,
            11789
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ]
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get a list of the current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show ID of the most popular TV show\ntv_id = data[\"results\"][0][\"id\"]\n\n# Get the credits (cast and crew) of the most popular TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Extracting the lead actor\nlead_actor = data_credits[\"cast\"][0][\"name\"]\nlead_actor_character = data_credits[\"cast\"][0][\"character\"]\n\nprint(f\"The lead actor of today's most popular TV show is {lead_actor} as {lead_actor_character}\")\n```",
        "usage": [
            380,
            10041,
            10421
        ],
        "executed": "The lead actor of today's most popular TV show is Dirk Galuba as Werner Saalfeld\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ]
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the base url for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the API endpoint to get the most popular TV shows\nendpoint = \"/tv/popular\"\n\n# Define the parameters for the API request\nparams = {\n    \"page\": 1\n}\n\n# Make the API request to get the most popular TV shows\nresponse = requests.get(base_url + endpoint, headers=headers, params=params)\n\n# Parse the response to get the TV show with the highest popularity\nif response.status_code == 200:\n    popular_tv_shows = response.json()\n    most_popular_tv_show = popular_tv_shows['results'][0]\n    \n    # Get the ID of the most popular TV show\n    tv_id = most_popular_tv_show['id']\n    \n    # Make a new API request to get the credits for the TV show\n    credits_endpoint = f\"/tv/{tv_id}/credits\"\n    credits_response = requests.get(base_url + credits_endpoint, headers=headers)\n    \n    # Parse the response to get the lead actor's profile image\n    if credits_response.status_code == 200:\n        credits_data = credits_response.json()\n        \n        # Get the profile image of the lead actor\n        lead_actor = credits_data['cast'][0]\n        lead_actor_profile_path = lead_actor['profile_path']\n        \n        # Generate the complete image url\n        image_base_url = \"https://image.tmdb.org/t/p/original\"\n        lead_actor_image_url = image_base_url + lead_actor_profile_path\n        \n        print(lead_actor_image_url)\n    else:\n        print(\"Failed to get credits data for the TV show\")\nelse:\n    print(\"Failed to get data for popular TV shows\")\n```",
        "usage": [
            363,
            11615,
            11978
        ],
        "executed": "https://image.tmdb.org/t/p/original/yYjGRTKpBW2XHaBfoA8ilJtmXDq.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ]
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Cate Blanchett\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Cate Blanchett\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person ID of Cate Blanchett\nperson_id = data[\"results\"][0][\"id\"]\n\n# Get the latest TV show of Cate Blanchett\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the latest TV show ID\ntv_id = data[\"cast\"][0][\"id\"]\n\n# Get the reviews for the latest TV show of Cate Blanchett\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\nreviews = response.json()\n\nprint(reviews)\n```",
        "usage": [
            402,
            11957,
            12359
        ],
        "executed": "{'id': 1709, 'page': 1, 'results': [], 'total_pages': 0, 'total_results': 0}\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url to get the list of popular people on TMDb\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Set the headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query to search for David Schwimmer\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"page\": 1\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the response data\ndata = response.json()\n\n# Check if the response contains results\nif 'results' in data and len(data['results']) > 0:\n    # Get the known_for field for the first person in the results\n    known_for = data['results'][0]['known_for']\n    \n    # Find the TV show with the highest popularity among the known_for list\n    max_popularity = 0\n    popular_tv_show = \"\"\n    for item in known_for:\n        if 'media_type' in item and item['media_type'] == \"tv\" and 'popularity' in item:\n            if item['popularity'] > max_popularity:\n                max_popularity = item['popularity']\n                popular_tv_show = item['name']\n\n    print(\"David Schwimmer's most popular TV show is:\", popular_tv_show)\nelse:\n    print(\"No results found for David Schwimmer.\")\n```   ",
        "usage": [
            459,
            11096,
            11555
        ],
        "executed": "David Schwimmer's most popular TV show is: \n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the TV show details (Black Mirror)\ntv_show_id = 628\nseason_number = 2\nepisode_number = 3\nurl = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/{season_number}/episode/{episode_number}/credits\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Extract the director of the third episode of the second season of Black Mirror\nfor crew_member in data['crew']:\n    if crew_member['job'] == 'Director':\n        director = crew_member['name']\n\nprint(director)\n```",
        "usage": [
            302,
            11559,
            11861
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/person"
        ]
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the person ID for Christopher Nolan by searching for people\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_results = response.json()[\"results\"]\nif len(person_results) == 0:\n    print(\"No person found for the given query\")\nelse:\n    person_id = person_results[0][\"id\"]\n\n# Get the movie list that Christopher Nolan is known for\nperson_details_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\nparams = {}\nresponse = requests.get(person_details_url, headers=headers, params=params)\nknown_for_results = response.json()[\"known_for\"]\n\n# Extract movie titles from the known for results\nmovie_titles = [result[\"original_title\"] for result in known_for_results if result[\"media_type\"] == \"movie\"]\n\nprint(movie_titles)\n```",
        "usage": [
            389,
            11302,
            11691
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ]
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the URLs for the movies \"Avatar\" and \"Avatar: The Way of Water\"\navatar_url = \"https://api.themoviedb.org/3/movie/19995\"\navatar_water_url = \"https://api.themoviedb.org/3/movie/590995\"\n\n# Send requests to get the details of the movies\navatar_response = requests.get(avatar_url, headers=headers)\navatar_water_response = requests.get(avatar_water_url, headers=headers)\n\n# Extract the vote_average from the responses\navatar_rating = avatar_response.json().get('vote_average')\navatar_water_rating = avatar_water_response.json().get('vote_average')\n\n# Compare the ratings and print the result\nif avatar_rating > avatar_water_rating:\n    print(\"Avatar has a higher rating.\")\nelif avatar_rating < avatar_water_rating:\n    print(\"Avatar: The Way of Water has a higher rating.\")\nelse:\n    print(\"Both movies have the same rating.\")\n```",
        "usage": [
            376,
            10150,
            10526
        ],
        "executed": "Avatar has a higher rating.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nurl = \"https://api.themoviedb.org/3/discover/movie\"\nparams = {\n    \"page\": 1,\n    \"primary_release_date.gte\": \"2021-01-01\",\n    \"vote_average.gte\": 7.0,\n    \"with_original_language\": \"en\"\n}\n\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    movies = data['results']\n    for movie in movies:\n        print(movie['title'])\nelse:\n    print(\"Error fetching data\")\n```",
        "usage": [
            295,
            12191,
            12486
        ],
        "executed": "Dune: Part Two\nPoor Things\nMigration\nKung Fu Panda 4\nDune\nRed Right Hand\nWonka\nThe Beekeeper\nThe Family Plan\nOppenheimer\nBarbie\nFast X\nTransformers: Rise of the Beasts\nThe Super Mario Bros. Movie\nAvatar: The Way of Water\nThe Hunger Games: The Ballad of Songbirds & Snakes\nKillers of the Flower Moon\nJohn Wick: Chapter 4\nThe Tiger's Apprentice\nElemental\n",
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ]
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Lord of the Rings\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the genre_ids from the first result\nif data[\"results\"]:\n    first_result = data[\"results\"][0]\n    genre_ids = first_result[\"genre_ids\"]\n    \n    print(genre_ids)\nelse:\n    print(\"Movie 'Lord of the Rings' not found\")\n```",
        "usage": [
            304,
            14219,
            14523
        ],
        "executed": "[12, 14, 28]\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ]
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Define the headers containing the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the data from the response\n    data = response.json()\n    \n    # Get the details of the most popular person\n    most_popular_person = data[\"results\"][0]  # Assuming the first item in the list is the most popular\n    \n    # Get the birthday of the most popular person\n    birthday = most_popular_person.get(\"birthday\", \"Birthday information not available\")\n    \n    print(\"Birthday of the most popular person right now:\", birthday)\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            350,
            10684,
            11034
        ],
        "executed": "Birthday of the most popular person right now: Birthday information not available\n",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ]
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the Big Bang Theory TV show\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\"query\": \"Big Bang Theory\"}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_show_id = response_search_tv.json()[\"results\"][0][\"id\"]\n\n# Get images of the second season of Big Bang Theory\nurl_season_images = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/2/images\"\nresponse_season_images = requests.get(url_season_images, headers=headers)\n\n# Extract the poster path of the second season\nposter_path = response_season_images.json()[\"posters\"][0][\"file_path\"]\nprint(poster_path)\n```",
        "usage": [
            338,
            10336,
            10674
        ],
        "executed": "/2NBwUBZ4clwj6qO9fBinfxiB0dR.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv"
        ]
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the necessary variables\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Define the headers for the API requests\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# First, we need to find the TV id for \"The Mandalorian\" show\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_search_params = {\n    \"query\": \"The Mandalorian\"\n}\ntv_search_response = requests.get(tv_search_url, headers=headers, params=tv_search_params)\ntv_id = tv_search_response.json()[\"results\"][0][\"id\"]\n\n# Next, we need to find the season number for the second season of \"The Mandalorian\"\nseason_search_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\nseason_search_params = {}\nseason_search_response = requests.get(season_search_url, headers=headers, params=season_search_params)\nseason_number = 2\n\n# Finally, we can find the name of the third episode in the second season of \"The Mandalorian\"\nepisode_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/3\"\nepisode_response = requests.get(episode_url, headers=headers)\nprint(episode_response.json()[\"name\"])\n```",
        "usage": [
            290,
            12652,
            12942
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/movie"
        ]
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Step 1: Search for the movie \"The Shawshank Redemption\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\nmovie_id = search_results[\"results\"][0][\"id\"]\n\n# Step 2: Get the credits for the movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_results = credits_response.json()\n\n# Step 3: Get the details of the lead actor\nlead_actor_id = credits_results[\"cast\"][0][\"id\"]\n\nperson_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nperson_response = requests.get(person_url, headers=headers)\nperson_result = person_response.json()\n\n# Output the birthday of the lead actor\nlead_actor_birthday = person_result[\"birthday\"]\nprint(f\"The birthday of the lead actor of 'The Shawshank Redemption' is: {lead_actor_birthday}\")\n```",
        "usage": [
            304,
            11727,
            12031
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url to get the movie details of The Shawshank Redemption\nmovie_id = 278\nurl = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nparams = {\n    \"append_to_response\": \"credits\" # Include credits information in the response\n}\n\n# Make the API request to get the movie details\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the director's id\ncrew = data.get(\"credits\", {}).get(\"crew\", [])\ndirector_id = None\nfor member in crew:\n    if member.get(\"job\") == \"Director\":\n        director_id = member.get(\"id\")\n        break\n\nif director_id:\n    # Define the API url to get the director's details\n    url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n    response = requests.get(url, headers=headers)\n    director_data = response.json()\n\n    # Extract the birthday of the director\n    director_birthday = director_data.get(\"birthday\")\n    print(\"The birthday of the director of The Shawshank Redemption is:\", director_birthday)\nelse:\n    print(\"Director for the movie not found.\")\n```",
        "usage": [
            425,
            10913,
            11338
        ],
        "executed": "The birthday of the director of The Shawshank Redemption is: 1959-01-28\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url for searching movies\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the params for searching the movie \"The Shawshank Redemption\"\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Make the API request to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\n\n# Get the company id that created the movie \"The Shawshank Redemption\" from the search results\ncompany_id = response_search_movie.json()[\"results\"][0][\"production_companies\"][0][\"id\"]\n\n# Define the API url for getting the company details\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\n\n# Make the API request to get the company details\nresponse_company = requests.get(url_company, headers=headers)\n\n# Get the headquarters of the company that created the movie \"The Shawshank Redemption\"\nheadquarters = response_company.json()[\"headquarters\"]\n\nprint(\"The headquarters of the company that created the movie The Shawshank Redemption is:\", headquarters)\n```",
        "usage": [
            253,
            11571,
            11824
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/popular"
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection with the name \"Star Wars\"\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ndata_search_collection = response_search_collection.json()\n\n# Get the company id that created the collection\ncompany_id = data_search_collection[\"results\"][0][\"id\"]\n\n# Get the details of the company by company id\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse_company = requests.get(url_company, headers=headers)\ndata_company = response_company.json()\n\n# Extract the headquarters of the company\ncompany_headquarters = data_company[\"headquarters\"]\nprint(company_headquarters)\n```",
        "usage": [
            355,
            11729,
            12084
        ],
        "executed": "\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ]
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get movie details by movie_id\ndef get_movie_details(movie_id):\n    url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        movie_data = response.json()\n        return movie_data\n    else:\n        print(\"Error occurred while fetching movie details\")\n        return None\n\n# Get movie details for \"The Double Life of Veronique\" (movie_id = 777)\nveronique_movie = get_movie_details(777)\n\n# Get movie details for \"Mulholland Drive\" (movie_id = 101)\nmulholland_drive_movie = get_movie_details(101)\n\n# Compare the release dates of the two movies\nif veronique_movie and mulholland_drive_movie:\n    veronique_release_date = veronique_movie['release_date']\n    mulholland_drive_release_date = mulholland_drive_movie['release_date']\n\n    if veronique_release_date < mulholland_drive_release_date:\n        print(\"The Double Life of Veronique has an earlier release date.\")\n    elif mulholland_drive_release_date < veronique_release_date:\n        print(\"Mulholland Drive has an earlier release date.\")\n    else:\n        print(\"Both movies have the same release date.\")\nelse:\n    print(\"Error fetching movie details.\")\n```",
        "usage": [
            468,
            10397,
            10865
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to retrieve the credits for a TV season\ndef get_credits_tv_season(tv_id, season_number):\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits\"\n    response = requests.get(url, headers=headers)\n    data = response.json()\n    return data\n\n# Get the credits for Twin Peaks Season 1\ntwin_peaks_credits = get_credits_tv_season(3690, 1)  # Assuming 3690 is the ID for Twin Peaks\n\n# Get the director for Twin Peaks Season 1\ntwin_peaks_director = None\nfor crew_member in twin_peaks_credits['crew']:\n    if crew_member['job'] == 'Director':\n        twin_peaks_director = crew_member['name']\n        break\n\n# Get the credits for Mulholland Drive\nmulholland_drive_credits = get_credits_tv_season(10323, 1)  # Assuming 10323 is the ID for Mulholland Drive\n\n# Get the director for Mulholland Drive\nmulholland_drive_director = None\nfor crew_member in mulholland_drive_credits['crew']:\n    if crew_member['job'] == 'Director':\n        mulholland_drive_director = crew_member['name']\n        break\n\n# Check if the directors are the same\nif twin_peaks_director and mulholland_drive_director and twin_peaks_director == mulholland_drive_director:\n    print(\"Yes, the director of Twin Peaks Season 1 and Mulholland Drive is the same person.\")\nelse:\n    print(\"No, the director of Twin Peaks Season 1 and Mulholland Drive is not the same person.\")\n```",
        "usage": [
            539,
            8760,
            9299
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie 'Mulholland Drive'\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Mulholland Drive\"\n}\nresponse = requests.get(search_movie_url, headers=headers, params=search_params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the details of the movie 'Mulholland Drive'\nmovie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nresponse = requests.get(movie_details_url, headers=headers)\ndirector_id = response.json()[\"id\"]\nprint(\"Director ID:\", director_id)\n\n# Get the details of the director of 'Mulholland Drive'\ndirector_details_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\nresponse = requests.get(director_details_url, headers=headers)\ndirector_birthplace = response.json()[\"place_of_birth\"]\nprint(\"Director's Birthplace:\", director_birthplace)\n```",
        "usage": [
            383,
            10007,
            10390
        ],
        "executed": "Director ID: 1018\nDirector's Birthplace: Glostrup, Denmark\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ]
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the top rated movies\nurl_top_rated_movies = \"https://api.themoviedb.org/3/movie/top_rated\"\nparams_top_rated_movies = {\n    \"page\": 1\n}\nresponse_top_rated_movies = requests.get(url_top_rated_movies, headers=headers, params=params_top_rated_movies)\ntop_rated_movies = response_top_rated_movies.json()\n\n# Check if Mulholland Drive is in the top-10 rated movies\nmulholland_drive_title = \"Mulholland Drive\"\nis_in_top_10 = False\nfor idx, movie in enumerate(top_rated_movies[\"results\"][:10]):\n    if movie[\"title\"] == mulholland_drive_title:\n        is_in_top_10 = True\n        break\n\nprint(is_in_top_10)\n```",
        "usage": [
            347,
            12095,
            12442
        ],
        "executed": "False\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/collection"
        ]
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the number of movies directed by a specific director\ndef get_director_movie_count(director_name):\n    url = \"https://api.themoviedb.org/3/search/person\"\n    params = {\n        \"query\": director_name,\n        \"include_adult\": False\n    }\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n    if 'results' in data and len(data['results']) > 0:\n        return data['results'][0]['known_for_department']  # Assuming 'known_for_department' field contains director information\n    return 0\n\n# Get the number of movies directed by Akira Kurosawa and Spielberg\nakira_movie_count = get_director_movie_count(\"Akira Kurosawa\")\nspielberg_movie_count = get_director_movie_count(\"Spielberg\")\n\n# Compare the number of movies directed\nif akira_movie_count > spielberg_movie_count:\n    print(\"Akira Kurosawa directed more movies.\")\nelif spielberg_movie_count > akira_movie_count:\n    print(\"Spielberg directed more movies.\")\nelse:\n    print(\"Both Akira Kurosawa and Spielberg directed the same number of movies.\")\n```",
        "usage": [
            428,
            12173,
            12601
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ]
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Find the director of \"Mulholland Drive\" by movie id\nmovie_id = 101\nmovie_response = requests.get(f\"https://api.themoviedb.org/3/movie/{movie_id}\", headers=headers)\nmovie_data = movie_response.json()\ndirector_name = \"\"\nif \"belongs_to_collection\" in movie_data and movie_data[\"belongs_to_collection\"] is not None:\n    collection_id = movie_data[\"belongs_to_collection\"][\"id\"]\n    collection_response = requests.get(f\"https://api.themoviedb.org/3/collection/{collection_id}\", headers=headers)\n    collection_data = collection_response.json()\n    director_id = collection_data[\"parts\"][0][\"crew\"][0][\"id\"]\n    director_response = requests.get(f\"https://api.themoviedb.org/3/person/{director_id}\", headers=headers)\n    director_data = director_response.json()\n    director_name = director_data[\"name\"]\n\n# Find TV series directed by the director\ntv_series_response = requests.get(f\"https://api.themoviedb.org/3/person/{director_id}/tv_credits\", headers=headers)\ntv_series_data = tv_series_response.json()\n\ntv_series_list = []\nfor credit in tv_series_data[\"crew\"]:\n    tv_series_list.append(credit[\"name\"])\n\nprint(tv_series_list) # This will print the list of TV series directed by the director of \"Mulholland Drive\"\n```",
        "usage": [
            467,
            10698,
            11165
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ]
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API URL and the person_id for Scarlett Johansson\nurl = \"https://api.themoviedb.org/3/search/person\"\nperson_name = \"Scarlett Johansson\"\n\n# Setting up the parameters for searching the person\nparams = {\n    \"query\": person_name,\n    \"include_adult\": \"false\",\n    \"page\": 1\n}\n\n# Make the API request to search for the person's details\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Parse the response to get the person's id\n    data = response.json()\n    person_id = data['results'][0]['id']\n    \n    # Get the person's details using the person_id\n    person_details_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n    details_response = requests.get(person_details_url, headers=headers)\n    \n    # Check if the details response is successful\n    if details_response.status_code == 200:\n        # Parse the details response to get the birthday of the actor\n        details_data = details_response.json()\n        birthday = details_data['birthday']\n        print(f\"The birthday of {person_name} is {birthday}\")\n    else:\n        print(\"Error: Could not retrieve person details\")\nelse:\n    print(\"Error: Could not retrieve person id\")\n```",
        "usage": [
            295,
            9947,
            10242
        ],
        "executed": "The birthday of Scarlett Johansson is 1984-11-22\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/latest"
        ]
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API key in the headers\nheaders = {\"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"}\n\n# Search for the TV show \"Sword Art Online\"\nquery = \"Sword Art Online\"\nparams = {\"query\": query}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params)\ndata = response.json()\n\n# Extract the ID of Sword Art Online\nsao_id = data[\"results\"][0][\"id\"]\n\n# Get the TV show details by ID to find out the number of seasons\nresponse = requests.get(f\"https://api.themoviedb.org/3/tv/{sao_id}\", headers=headers)\ntv_show_data = response.json()\n\nnum_seasons = tv_show_data[\"number_of_seasons\"]\n\nnum_seasons\n```",
        "usage": [
            326,
            12838,
            13164
        ],
        "executed": "",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ]
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Searching for Yui Aragaki\nparams = {\n    \"query\": \"Yui Aragaki\"\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\naragaki_results = response.json()[\"results\"]\n\naragaki_id = None\nfor result in aragaki_results:\n    if result[\"name\"] == \"Yui Aragaki\":\n        aragaki_id = result[\"id\"]\n        break\n\n# Searching for Gen Hoshino\nparams = {\n    \"query\": \"Gen Hoshino\"\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\nhoshino_results = response.json()[\"results\"]\n\nhoshino_id = None\nfor result in hoshino_results:\n    if result[\"name\"] == \"Gen Hoshino\":\n        hoshino_id = result[\"id\"]\n        break\n\n# Check if they are co-starring in \"We Married as Job\"\nparams = {}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params)\nwe_married_results = response.json()[\"results\"]\n\nwe_married_id = None\nfor result in we_married_results:\n    if result[\"name\"] == \"We Married as Job\":\n        we_married_id = result[\"id\"]\n        break\n\nif aragaki_id is not None and hoshino_id is not None and we_married_id is not None:\n    params = {\"tv_id\": we_married_id}\n    response = requests.get(f\"https://api.themoviedb.org/3/tv/{we_married_id}/credits\", headers=headers, params=params)\n    cast_crew = response.json()\n    \n    aragaki_in_cast = False\n    hoshino_in_cast = False\n    for cast_member in cast_crew[\"cast\"]:\n        if cast_member[\"id\"] == aragaki_id:\n            aragaki_in_cast = True\n        if cast_member[\"id\"] == hoshino_id:\n            hoshino_in_cast = True\n\n    if aragaki_in_cast and hoshino_in_cast:\n        print(\"Yui Aragaki and Gen Hoshino are co-starring in We Married as Job.\")\n    else:\n        print(\"Yui Aragaki and Gen Hoshino are not co-starring in We Married as Job.\")\nelse:\n    print(\"Could not find information about Yui Aragaki, Gen Hoshino, or We Married as Job.\")\n```",
        "usage": [
            721,
            9957,
            10678
        ],
        "executed": "Could not find information about Yui Aragaki, Gen Hoshino, or We Married as Job.\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ]
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API URLs\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\nperson_url = \"https://api.themoviedb.org/3/person/{}\"\n\n# Set the API key in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Barbie\"\nparams = {\n    \"query\": \"Barbie\"\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\nbarbie_director_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the details of the movie director\nresponse = requests.get(movie_credits_url.format(movie_id=barbie_director_id), headers=headers)\nbarbie_director_id = response.json()[\"crew\"][0][\"id\"]\n\n# Search for the TV show \"DEATH NOTE\"\nparams = {\n    \"query\": \"DEATH NOTE\"\n}\nresponse = requests.get(tv_search_url, headers=headers, params=params)\ndeath_note_lead_actor_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the details of the lead actor of DEATH NOTE\nresponse = requests.get(tv_credits_url.format(tv_id=death_note_lead_actor_id), headers=headers)\ndeath_note_lead_actor_id = response.json()[\"cast\"][0][\"id\"]\n\n# Get the birthdates of the director of Barbie and the lead actor of DEATH NOTE\nresponse = requests.get(person_url.format(barbie_director_id), headers=headers)\nbarbie_director_birthdate = response.json()[\"birthday\"]\n\nresponse = requests.get(person_url.format(death_note_lead_actor_id), headers=headers)\ndeath_note_lead_actor_birthdate = response.json()[\"birthday\"]\n\n# Calculate the age difference\nbarbie_director_birthyear = int(barbie_director_birthdate.split(\"-\")[0])\ndeath_note_lead_actor_birthyear = int(death_note_lead_actor_birthdate.split(\"-\")[0])\n\nif barbie_director_birthyear > death_note_lead_actor_birthyear:\n    older_person = \"Director of Barbie\"\n    age_difference = barbie_director_birthyear - death_note_lead_actor_birthyear\nelse:\n    older_person = \"Lead actor of DEATH NOTE\"\n    age_difference = death_note_lead_actor_birthyear - barbie_director_birthyear\n\nprint(f\"{older_person} is older by {age_difference} years.\")\n```",
        "usage": [
            655,
            10771,
            11426
        ],
        "executed": null,
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ]
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Specify the query parameters\nparams = {\n    \"query\": \"Katherine LaNasa\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the person id from the API response\n    person_id = response.json()[\"results\"][0][\"id\"]\n\n    # Define the API url for person's movie credits\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n    # Make the API request to get the movie credits\n    movie_credits_response = requests.get(movie_credits_url, headers=headers)\n\n    # Extract the latest movie appearance\n    latest_movie = movie_credits_response.json()[\"cast\"][0]\n\n    # Print the results\n    print(\"Katherine LaNasa's latest movie appearance:\")\n    print(\"Title:\", latest_movie[\"title\"])\n    print(\"Character:\", latest_movie[\"character\"])\n    print(\"Release Date:\", latest_movie[\"release_date\"])\nelse:\n    print(\"Error fetching data\")\n\n```",
        "usage": [
            273,
            12590,
            12863
        ],
        "executed": "Katherine LaNasa's latest movie appearance:\nTitle: Black Karen\nCharacter: Therapist\nRelease Date: 2022-01-23\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ]
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching movies\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Specify the query to search for the movie \"Oppenheimer\"\nparams = {\n    \"query\": \"Oppenheimer\",\n    \"page\": 1,  # We only need the first page\n    \"include_adult\": False,  # Exclude adult content\n    \"region\": \"US\",  # Specify the region as US\n    \"year\": 0,  # Any year\n    \"primary_release_year\": 0  # Any primary release year\n}\n\n# Make a GET request to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params)\nmovie_results = response_search_movie.json()\n\n# Get the poster path of the first result (cover image)\nif movie_results[\"total_results\"] > 0:\n    first_result_poster_path = movie_results[\"results\"][0][\"poster_path\"]\n    if first_result_poster_path:\n        # Print the full image url for the cover image\n        print(\"Cover Image URL:\", f\"https://image.tmdb.org/t/p/original{first_result_poster_path}\")\n    else:\n        print(\"No cover image found for the movie.\")\nelse:\n    print(\"No movie found with the given query.\")\n```",
        "usage": [
            281,
            8811,
            9092
        ],
        "executed": "Cover Image URL: https://image.tmdb.org/t/p/original/8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg\n",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "api_list": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ]
    }
]