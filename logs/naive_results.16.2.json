[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for a person\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the parameters to search for Sofia Coppola\nparams = {\n    \"query\": \"Sofia Coppola\",\n    \"include_adult\": False\n}\n\n# Make the request to search for the person\nresponse = requests.get(url_search_person, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()[\"results\"]\n    \n    # Search for Sofia Coppola's id\n    person_id = None\n    for result in results:\n        if result[\"name\"] == \"Sofia Coppola\":\n            person_id = result[\"id\"]\n            break\n    \n    if person_id:\n        # Define the API url to get movie credits for the director\n        url_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n        # Make the request to get the movie credits for Sofia Coppola\n        response_credits = requests.get(url_movie_credits, headers=headers)\n\n        # Check if the request was successful\n        if response_credits.status_code == 200:\n            # Get the movie credits\n            movie_credits = response_credits.json()[\"cast\"]\n\n            # Count the number of movies\n            num_movies = len(movie_credits)\n            print(f\"Number of movies directed by Sofia Coppola: {num_movies}\")\n\n        else:\n            print(\"Error in getting movie credits\")\n    else:\n        print(\"Sofia Coppola not found in search results\")\nelse:\n    print(\"Error in searching for person\")\n```",
        "usage": [
            539,
            7599,
            8138
        ]
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie The Dark Knight\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\"query\": \"The Dark Knight\"}\nresponse = requests.get(url_search_movie, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie_id of The Dark Knight\nmovie_id = data['results'][0]['id']\n\n# Get the cast and crew of The Dark Knight\nurl_cast_crew = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse_cast_crew = requests.get(url_cast_crew, headers=headers)\ndata_cast_crew = response_cast_crew.json()\n\n# Find the lead actor in the cast\nlead_actor = \"\"\nfor actor in data_cast_crew['cast']:\n    if actor['order'] == 0:  # Assuming lead actor has order 0\n        lead_actor = actor['name']\n        break\n\nprint(f\"The lead actor in the movie The Dark Knight was: {lead_actor}\")\n```",
        "usage": [
            391,
            8976,
            9367
        ]
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "results": "```python\nimport requests\n\n# API url to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Adding the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parsing the response JSON\ndata = response.json()\n\n# Getting the director of the top-1 rated movie\nmovie_id = data[\"results\"][0][\"id\"]\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse_credits = requests.get(credits_url, headers=headers)\ndata_credits = response_credits.json()\n\ndirector = None\nfor crew_member in data_credits[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director = crew_member[\"name\"]\n        break\n\nprint(\"Director of the top-1 rated movie:\", director)\n```",
        "usage": [
            379,
            11413,
            11792
        ]
    },
    {
        "query": "give me a image for the collection Star Wars",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "results": "```python\nimport requests\n\n# Provided headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n\n}\n\n# API url to search for collections\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Parameters for the query\nparams = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Checking if the request was successful\nif response.status_code == 200:\n    # Getting the response data\n    data = response.json()\n    \n    # Checking if any results were returned\n    if data['total_results'] > 0:\n        # Getting the image path for the collection\n        backdrop_path = data['results'][0]['backdrop_path']\n        print(\"Image path for the collection 'Star Wars':\", backdrop_path)\n    else:\n        print(\"No results found for the collection 'Star Wars'\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            375,
            7377,
            7752
        ]
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching companies\nurl = \"https://api.themoviedb.org/3/search/company\"\n\n# Define the query parameters\nparams = {\n    \"query\": \"Walt Disney\",\n    \"page\": 1\n}\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to search for the company\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()[\"results\"]\n    \n    # Find the company with the name \"Walt Disney\" and get its logo\n    for result in results:\n        if result[\"name\"] == \"Walt Disney\":\n            company_id = result[\"id\"]\n            logo_url = f\"https://api.themoviedb.org/3/company/{company_id}/images\"\n            logo_response = requests.get(logo_url, headers=headers)\n            logo_data = logo_response.json()\n            logo_path = logo_data[\"logos\"][0][\"file_path\"]  # Get the path of the logo image\n            print(f\"The logo of Walt Disney is: https://image.tmdb.org/t/p/original{logo_path}\")\n            break\nelse:\n    print(\"Error occurred while fetching data\")\n```",
        "usage": [
            440,
            7129,
            7569
        ]
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# Headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie Titanic to get the movie_id\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\"query\": \"Titanic\", \"page\": 1}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the movie Titanic to find the lead actor\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\nlead_actor_name = response.json()[\"cast\"][0][\"name\"]\n\n# Get the images for the lead actor\nsearch_person_url = f\"https://api.themoviedb.org/3/search/person\"\nparams = {\"query\": lead_actor_name, \"page\": 1}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the images for the lead actor\nperson_images_url = f\"https://api.themoviedb.org/3/person/{person_id}/images\"\nresponse = requests.get(person_images_url, headers=headers)\nactor_images = response.json()[\"profiles\"]\n\n# Print the images for the lead actor of Titanic\nprint(actor_images)\n```",
        "usage": [
            448,
            7111,
            7559
        ]
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# API Key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movies similar to Titanic\nurl_search = \"https://api.themoviedb.org/3/search/movie\"\nparams_search = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse_search = requests.get(url_search, headers=headers, params=params_search)\nsearch_results = response_search.json()\n\nif search_results[\"total_results\"] > 0:\n    # Get the movie id of the first movie similar to Titanic\n    movie_id = search_results[\"results\"][0][\"id\"]\n\n    # Get reviews for the first movie similar to Titanic\n    url_reviews = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n    params_reviews = {\n        \"page\": 1\n    }\n    response_reviews = requests.get(url_reviews, headers=headers, params=params_reviews)\n    reviews_data = response_reviews.json()\n\n    # Extract the reviews\n    reviews = reviews_data[\"results\"]\n    print(reviews)\n\nelse:\n    print(\"No movies similar to Titanic found.\")\n```",
        "usage": [
            397,
            7592,
            7989
        ]
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "results": "```python\nimport requests\n\n# API url for getting recommendations for a movie\nurl = \"https://api.themoviedb.org/3/movie/597/recommendations\"  # Assuming Titanic movie_id is 597\n\n# Parameters for the API request\nparams = {\n    \"page\": 1\n}\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting and printing the recommendations from the response\nrecommendations = response.json()\nprint(recommendations)\n```",
        "usage": [
            280,
            10119,
            10399
        ]
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/person/5256/movie_credits\"\n\n# Define the parameters\nparams = {\n    \"api_key\": \"<your_api_key_here>\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie list for Christopher Nolan\n    movies = response.json()[\"cast\"]\n    \n    # Sort the movies by release date in descending order\n    sorted_movies = sorted(movies, key=lambda x: x[\"release_date\"], reverse=True)\n    \n    # Get the latest movie directed by Christopher Nolan\n    latest_movie = next(movie for movie in sorted_movies if \"director\" in movie[\"job\"])\n    \n    # Print the title of the latest movie directed by Christopher Nolan\n    print(\"The latest movie directed by Christopher Nolan is:\", latest_movie[\"title\"])\nelse:\n    # Print an error message if the request was not successful\n    print(\"Error: Failed to fetch movie credits for Christopher Nolan\")\n```",
        "usage": [
            233,
            8257,
            8490
        ]
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the director - Martin Scorsese\nsearch_director_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Martin Scorsese\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_director_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the director's id\ndirector_id = data['results'][0]['id']\n\n# Get the movie credits for the director\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\ndata = response.json()\n\n# Find the highest rated movie directed by Martin Scorsese\nhighest_rated_movie = None\nhighest_rating = 0\nfor movie in data['cast']:\n    if movie['vote_average'] > highest_rating:\n        highest_rating = movie['vote_average']\n        highest_rated_movie = movie\n\nprint(highest_rated_movie['title'], highest_rated_movie['vote_average'])\n```",
        "usage": [
            401,
            7518,
            7919
        ]
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Leonardo DiCaprio\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Leonardo DiCaprio\"\n}\n\nresponse = requests.get(person_search_url, headers=headers, params=params)\nperson_data = response.json()\n\nif len(person_data[\"results\"]) > 0:\n    # Get the ID of the first result (assuming it's Leonardo DiCaprio)\n    person_id = person_data[\"results\"][0][\"id\"]\n    \n    # Get the movie credits for Leonardo DiCaprio\n    credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(credits_url, headers=headers)\n    credits_data = response.json()\n    \n    if len(credits_data[\"cast\"]) > 0:\n        # Get the latest movie data (first item in the cast array)\n        latest_movie = credits_data[\"cast\"][0]\n        \n        # Get the movie details\n        movie_id = latest_movie[\"id\"]\n        movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n        params = {\n            \"append_to_response\": \"credits\"\n        }\n        response = requests.get(movie_details_url, headers=headers, params=params)\n        movie_details = response.json()\n        \n        # Get the director of the movie\n        if \"credits\" in movie_details:\n            crew = movie_details[\"credits\"][\"crew\"]\n            for member in crew:\n                if member[\"job\"] == \"Director\":\n                    director = member[\"name\"]\n                    print(director)\n                    break\n```\n\nThis code snippet will search for Leonardo DiCaprio, retrieve his latest movie credits, and then find the director of his latest movie. The result will be printed out.",
        "usage": [
            552,
            8022,
            8574
        ]
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person with the name Catherine Hardwicke\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Catherine Hardwicke\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\ncatherine_hardwicke_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the movie credits for Catherine Hardwicke\nperson_movie_credits_url = f\"https://api.themoviedb.org/3/person/{catherine_hardwicke_id}/movie_credits\"\nresponse = requests.get(person_movie_credits_url, headers=headers)\nmovie_credits = response.json()[\"cast\"]\n\n# Find the most recent TV show directed by Catherine Hardwicke\nrecent_tv_show = None\nfor credit in movie_credits:\n    if \"job\" in credit and credit[\"job\"] == \"Director\" and credit[\"media_type\"] == \"tv\":\n        recent_tv_show = credit\n        break\n\nprint(recent_tv_show)\n```",
        "usage": [
            400,
            9457,
            9857
        ]
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for the search query\nparams = {\n    \"query\": \"Breaking Bad\",\n    \"include_adult\": False\n}\n\n# Make a GET request to search for TV shows similar to Breaking Bad\nresponse_search = requests.get(url_search_tv, headers=headers, params=params)\n\n# Check if the request was successful\nif response_search.status_code == 200:\n    # Extracting the TV show id for Breaking Bad\n    breaking_bad_id = response_search.json()[\"results\"][0][\"id\"]\n\n    # Define the API url for getting similar TV shows\n    url_similar_tv = f\"https://api.themoviedb.org/3/tv/{breaking_bad_id}/similar\"\n\n    # Parameters for getting similar TV shows\n    params_similar = {\n        \"page\": 1\n    }\n\n    # Make a GET request to get similar TV shows\n    response_similar = requests.get(url_similar_tv, headers=headers, params=params_similar)\n\n    # Check if the request for similar TV shows was successful\n    if response_similar.status_code == 200:\n        similar_tv_shows = response_similar.json()[\"results\"]\n        # Print out the similar TV shows\n        for show in similar_tv_shows:\n            print(show[\"name\"])\n    else:\n        print(\"Error: Unable to fetch similar TV shows\")\nelse:\n    print(\"Error: Unable to search for TV show 'Breaking Bad'\")\n```",
        "usage": [
            326,
            8057,
            8383
        ]
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the trending movies for today\nurl = \"https://api.themoviedb.org/3/trending/movie/day\"\n\n# Set the header with the provided authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to get the trending movies\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Extract the movie id of the most trending movie\n    trending_movie_id = response.json()[\"results\"][0][\"id\"]\n    \n    # Define the API url to get the credits of the movie\n    credits_url = f\"https://api.themoviedb.org/3/movie/{trending_movie_id}/credits\"\n    \n    # Make the GET request to get the credits of the movie\n    credits_response = requests.get(credits_url, headers=headers)\n    \n    # Check if the credits response is successful\n    if credits_response.status_code == 200:\n        # Extract the crew information from the credits response\n        crew = credits_response.json()[\"crew\"]\n        \n        # Iterate over the crew members to find the director\n        for member in crew:\n            if member[\"job\"] == \"Director\":\n                director = member[\"name\"]\n                print(f\"The director of today's most trending movie is: {director}\")\n                break\n    else:\n        print(\"Error fetching credits data.\")\nelse:\n    print(\"Error fetching trending movies data.\")\n```",
        "usage": [
            464,
            7324,
            7788
        ]
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching movie with the query \"Twilight\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Specify the query with the movie name \"Twilight\"\nparams = {\n    \"query\": \"Twilight\"\n}\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the movie id of the first result\nmovie_id = response.json()['results'][0]['id']\n\n# Define the API url for getting the credits of the movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make the API call to get the credits of the movie\nresponse = requests.get(credits_url, headers=headers)\n\n# Get the crew list for the movie\ncrew_list = response.json()['crew']\n\n# Find the director from the crew list\ndirector = None\nfor crew in crew_list:\n    if crew['job'] == 'Director':\n        director = crew['name']\n        break\n\n# Output the director of the movie \"Twilight\"\nif director:\n    print(f\"The director of the movie Twilight is: {director}\")\nelse:\n    print(\"Director information not found for the movie Twilight\")\n```",
        "usage": [
            428,
            8400,
            8828
        ]
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv"
        ],
        "results": "```python\nimport requests\n\n# Given API url\nurl = \"https://api.themoviedb.org/3/tv/65621/season/1/episode/2/images\"\n# Provided authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Sending request to the API\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Extracting the stills photos data\nstills = data.get(\"stills\", [])\nfor image in stills:\n    file_path = image.get(\"file_path\")\n    print(\"Image path:\", file_path)\n```",
        "usage": [
            279,
            6949,
            7228
        ]
    },
    {
        "query": "What is top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Set the required parameters\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    \n    # Get the top-1 rated movie\n    top_rated_movie = data['results'][0]['title']\n    print(\"Top-1 rated movie:\", top_rated_movie)\nelse:\n    print(\"Failed to fetch data\")\n```",
        "usage": [
            319,
            7198,
            7517
        ]
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Matrix\"\nurl_search = \"https://api.themoviedb.org/3/search/movie\"\nparams_search = {\n    \"query\": \"The Matrix\",\n    \"include_adult\": False\n}\nresponse_search = requests.get(url_search, headers=headers, params=params_search)\nmovie_id = response_search.json()[\"results\"][0][\"id\"]  # Get the movie id\n\n# Get the release dates for the movie\nurl_release_dates = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\nresponse_release_dates = requests.get(url_release_dates, headers=headers)\n\n# Extract the release date\nrelease_dates = response_release_dates.json()[\"results\"]\nfor release_info in release_dates:\n    for release_date in release_info[\"release_dates\"]:\n        if release_date[\"type\"] == 3:  # Theatrical release type\n            print(f\"The release date of 'The Matrix' is: {release_date['release_date']}\")\n            break\n```",
        "usage": [
            388,
            7353,
            7741
        ]
    },
    {
        "query": "Who is the most popular person?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the parameters (page)\nparams = {\n    \"page\": 1\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    most_popular_person = data['results'][0]['name']\n    print(f\"The most popular person is: {most_popular_person}\")\nelse:\n    print(\"Failed to get data. Status code:\", response.status_code)\n```",
        "usage": [
            312,
            6833,
            7145
        ]
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movies directed by Christopher Nolan\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False,\n    \"page\": 1,\n    \"region\": \"US\"  # Example region code, can be changed\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the person ID for Christopher Nolan\nperson_id = search_results[\"results\"][0][\"id\"]\n\n# Get the movie credits for Christopher Nolan\ncredits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_results = credits_response.json()\n\n# Extract the cover images of movies directed by Christopher Nolan\ncover_images = []\nfor movie in credits_results[\"cast\"]:\n    if \"poster_path\" in movie:\n        cover_images.append(movie[\"poster_path\"])\n\nprint(cover_images)\n```",
        "usage": [
            393,
            9383,
            9776
        ]
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "results": "```python\nimport requests\n\n# Headers provided for authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Query the movie_id of the movie \"Titanic\"\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\"\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the keywords associated with the movie \"Titanic\"\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\nresponse = requests.get(keywords_url, headers=headers)\nkeywords = response.json()[\"keywords\"]\n\n# Extract common keywords\ncommon_keywords = [keyword[\"name\"] for keyword in keywords]\nprint(common_keywords)\n```",
        "usage": [
            324,
            8719,
            9043
        ]
    },
    {
        "query": "Give me a show that is currently on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\nparams = {\"page\": 1}\n\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    if data.get(\"results\"):\n        first_show = data.get(\"results\")[0]\n        print(first_show)\n    else:\n        print(\"No shows currently on the air.\")\nelse:\n    print(\"Failed to retrieve show information.\")\n```",
        "usage": [
            276,
            8432,
            8708
        ]
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ],
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Clint Eastwood\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Clint Eastwood\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse = requests.get(url, headers=headers, params=params)\nclint_eastwood_id = response.json()[\"results\"][0][\"id\"]\n\n# Get Clint Eastwood's movie credits\nurl = f\"https://api.themoviedb.org/3/person/{clint_eastwood_id}/movie_credits\"\nresponse = requests.get(url.format(person_id=clint_eastwood_id), headers=headers)\nmovie_credits = response.json()[\"cast\"]\n\n# Filter out the release dates of Clint Eastwood's movies\nrelease_dates = []\nfor movie in movie_credits:\n    if movie[\"release_date\"]:\n        release_dates.append(movie[\"release_date\"])\n\n# Find the latest release date\nlatest_release_date = max(release_dates)\n\nprint(f\"The latest movie of Clint Eastwood is scheduled to be released on: {latest_release_date}\")\n```",
        "usage": [
            408,
            8378,
            8786
        ]
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie id of \"The Dark Knight\"\nurl_search = \"https://api.themoviedb.org/3/search/movie\"\nparams_search = {\n    \"query\": \"The Dark Knight\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse_search = requests.get(url_search, headers=headers, params=params_search)\nresults_search = response_search.json()\nmovie_id = results_search['results'][0]['id']  # Get the movie ID of The Dark Knight\n\n# Get reviews for the movie\nurl_reviews = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\nparams_reviews = {\n    \"page\": 1\n}\nresponse_reviews = requests.get(url_reviews, headers=headers, params=params_reviews)\nreviews = response_reviews.json()\n\n# Output the reviews\nprint(reviews)\n```",
        "usage": [
            354,
            9399,
            9753
        ]
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the person with name Francis Ford Coppola\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nperson_params = {\n    \"query\": \"Francis Ford Coppola\"\n}\nresponse = requests.get(person_search_url, headers=headers, params=person_params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get the movie credits for the person\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovie_titles = [movie[\"title\"] for movie in response.json()[\"cast\"]]\n\n# Step 3: Find similar movies for one of the movies Francis Ford Coppola directed\nsimilar_movie_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\nsimilar_movie_params = {\n    \"page\": 1\n}\nresponse = requests.get(similar_movie_url, headers=headers, params=similar_movie_params)\nsimilar_movies = response.json()[\"results\"]\n\n# Output the similar movies\nfor movie in similar_movies:\n    print(movie[\"title\"])\n```",
        "usage": [
            425,
            8246,
            8671
        ]
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/latest\"\n\n# Set the required headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the lead actor from the response\n    response_json = response.json()\n    if 'cast' in response_json:\n        cast = response_json['cast']\n        if len(cast) > 0:\n            lead_actor = cast[0]['name']\n            print(f\"The lead actor in the latest released movie is: {lead_actor}\")\n        else:\n            print(\"No cast information available.\")\n    else:\n        print(\"Cast information not found in the response.\")\nelse:\n    print(\"Error occurred while fetching data. Status code:\", response.status_code)\n```",
        "usage": [
            349,
            9143,
            9492
        ]
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of movies currently in theaters\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"  # Example region parameter as US for United States\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the poster path of the first movie in the list\nposter_path = data['results'][0]['poster_path']\n\n# Construct the full image url\nimage_url = f\"https://image.tmdb.org/t/p/original{poster_path}\"\nprint(image_url)\n```",
        "usage": [
            307,
            5959,
            6266
        ]
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "results": "```python\nimport requests\n\n# API url to get the list of current popular movies\nurl_popular_movies = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1,  # Get the first page of results\n    \"region\": \"US\"  # Specify the region to filter release dates\n}\n\n# Make the HTTP request to get the list of popular movies\nresponse = requests.get(url_popular_movies, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie id of the most popular movie\n    popular_movies = response.json()\n    if popular_movies[\"results\"]:\n        most_popular_movie_id = popular_movies[\"results\"][0][\"id\"]\n\n        # API url to get the keywords of the movie\n        url_movie_keywords = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\n\n        # Make the HTTP request to get the keywords of the most popular movie\n        response_keywords = requests.get(url_movie_keywords, headers=headers)\n\n        # Check if the request was successful\n        if response_keywords.status_code == 200:\n            # Get the keywords of the most popular movie\n            movie_keywords = response_keywords.json()[\"keywords\"]\n\n            print(movie_keywords)\n        else:\n            print(\"Failed to get movie keywords.\")\n    else:\n        print(\"No popular movies found.\")\nelse:\n    print(\"Failed to get list of popular movies.\")\n```",
        "usage": [
            318,
            8076,
            8394
        ]
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for getting the list of popular movies\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Parameters for the API request\nparams = {\n    \"page\": 1,  # We only want the first page of results\n    \"region\": \"US\"  # Filter by region (for example, US)\n}\n\n# Headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API endpoint\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the movie ID of the most popular movie\n    popular_movie_id = response.json()['results'][0]['id']\n\n    # Define the API endpoint for getting the keywords of the movie\n    keyword_url = f\"https://api.themoviedb.org/3/movie/{popular_movie_id}/keywords\"\n    \n    # Send a GET request to get the keywords of the most popular movie\n    keyword_response = requests.get(keyword_url, headers=headers)\n\n    # Check if the request for keywords was successful\n    if keyword_response.status_code == 200:\n        # Extract and print the keywords of the most popular movie\n        keywords = keyword_response.json()[\"keywords\"]\n        print(keywords)\n    else:\n        print(\"Failed to fetch keywords\")\nelse:\n    print(\"Failed to fetch popular movies\")\n```",
        "usage": [
            461,
            7008,
            7469
        ]
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching the movie\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameters for searching the movie \"Titanic\"\nparams = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\n\n# Send a GET request to search for the movie\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the movie id of the first result\n    movie_id = response.json()['results'][0]['id']\n\n    # Define the API url for getting the cast and crew of the movie by movie_id\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n    # Send a GET request to retrieve the cast and crew of the movie\n    credits_response = requests.get(credits_url, headers=headers)\n\n    # Check if the credits response is successful\n    if credits_response.status_code == 200:\n        # Extract the cast information from the response\n        cast_list = credits_response.json()['cast']\n\n        # Get the names of the actors who starred in the movie \"Titanic\"\n        actors_list = [actor['name'] for actor in cast_list]\n\n        # Print the list of actors who starred in the movie \"Titanic\"\n        print(\"Actors who starred in the movie Titanic:\")\n        for actor in actors_list:\n            print(actor)\n\n    else:\n        print(\"Failed to retrieve cast and crew details for the movie\")\nelse:\n    print(\"Failed to search for the movie Titanic\")\n```",
        "usage": [
            519,
            7498,
            8017
        ]
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\n# Import the requests library\nimport requests\n\n# Define the API url with the company_id of Paramount Pictures\nurl = \"https://api.themoviedb.org/3/company/4/images\"\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to get the logo of Paramount Pictures\nresponse = requests.get(url, headers=headers)\n\n# Get the JSON response data\ndata = response.json()\n\n# Print the logo for Paramount Pictures\nif response.status_code == 200:\n    if data['logos']:\n        for logo in data['logos']:\n            print(\"Logo path:\", logo['file_path'])\n    else:\n        print(\"No logo images found for Paramount Pictures\")\nelse:\n    print(\"Failed to retrieve logo images for Paramount Pictures\")\n\n```",
        "usage": [
            325,
            7788,
            8113
        ]
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the company \"universal pictures\" to get its id\nsearch_url = \"https://api.themoviedb.org/3/search/company\"\nsearch_params = {\n    \"query\": \"universal pictures\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\ncompany_id = search_data['results'][0]['id']\n\n# Get the details of the company by its id\ncompany_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\ncompany_response = requests.get(company_url, headers=headers)\ncompany_data = company_response.json()\nfounding_location = company_data['origin_country']\n\nprint(f\"The company 'Universal Pictures' was founded in: {founding_location}\")\n```",
        "usage": [
            334,
            6260,
            6594
        ]
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company"
        ],
        "results": "```python\nimport requests\n\n# Define the HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if the movie \"Titanic\" is found\nif data[\"total_results\"] > 0:\n    movie_id = data[\"results\"][0][\"id\"]  # Get the ID of the movie \"Titanic\"\n\n    # Get the release dates for the movie with ID movie_id\n    url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n    response = requests.get(url, headers=headers)\n    data = response.json()\n\n    # Extract the release dates of the movie \"Titanic\"\n    release_dates = data[\"results\"]\n    for release_date in release_dates:\n        if release_date[\"iso_3166_1\"] == \"US\":  # Assuming we want the release date in the US\n            print(f'The movie \"Titanic\" is released on: {release_date[\"release_dates\"][0][\"release_date\"]}')\nelse:\n    print(\"Movie 'Titanic' not found.\")\n```",
        "usage": [
            440,
            8480,
            8920
        ]
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"YOUR_API_KEY\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# 1. Search for the Star Wars collection\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the collection id for Star Wars\ncollection_id = search_results[\"results\"][0][\"id\"]\n\n# 2. Get the details of the Star Wars collection\ncollection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\ncollection_response = requests.get(collection_url, headers=headers)\ncollection_details = collection_response.json()\n\n# Get the first movie in the collection\nfirst_movie_id = collection_details[\"parts\"][0][\"id\"]\n\n# 3. Get the cast and crew for the first Star Wars movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{first_movie_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_details = credits_response.json()\n\n# Extract the cast details\ncast_list = credits_details[\"cast\"]\n\n# Get the names of the actors in the first Star Wars movie\nstar_actors = [actor[\"name\"] for actor in cast_list]\n\nprint(star_actors)\n```",
        "usage": [
            312,
            8769,
            9081
        ]
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and params for searching the collection\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\n    \"query\": \"Harry Potter\",\n    \"page\": 1\n}\n\n# Make a GET request to search for the collection\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ndata_search_collection = response_search_collection.json()\n\n# Get the collection id of Harry Potter\ncollection_id = data_search_collection[\"results\"][0][\"id\"]\n\n# Define the API url for getting collection details\nurl_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n# Make a GET request to get the collection details\nresponse_collection_details = requests.get(url_collection_details, headers=headers)\ndata_collection_details = response_collection_details.json()\n\n# Get the movie cover path from the collection details\nmovie_cover_path = data_collection_details[\"parts\"][0][\"poster_path\"]\n\nprint(movie_cover_path)\n```",
        "usage": [
            216,
            7493,
            7709
        ]
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection id of \"The Hunger Games\"\ncollection_url = \"https://api.themoviedb.org/3/search/collection\"\ncollection_params = {\n    \"query\": \"The Hunger Games\"\n}\ncollection_response = requests.get(collection_url, headers=headers, params=collection_params)\ncollection_id = collection_response.json()[\"results\"][0][\"id\"]\n\n# Get the keywords for a movie in the collection\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{collection_id}/keywords\"\nkeywords_response = requests.get(keywords_url, headers=headers)\nkeywords = keywords_response.json()[\"keywords\"]\n\nprint(keywords)\n```",
        "usage": [
            310,
            8235,
            8545
        ]
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching collections\nurl_search_collections = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the headers with the Bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the query parameter for the collection name\nparams = {\n    \"query\": \"The Hobbit\"\n}\n\n# Make the API request to search for collections\nresponse_search_collections = requests.get(url_search_collections, headers=headers, params=params)\nsearch_collection_results = response_search_collections.json()\n\n# Extract the collection ID for The Hobbit\ncollection_id = search_collection_results['results'][0]['id']\n\n# Define the API endpoint for getting collection details by ID\nurl_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n# Make the API request to get collection details by ID\nresponse_collection_details = requests.get(url_collection_details, headers=headers)\ncollection_details = response_collection_details.json()\n\n# Extract the release dates for the movies in The Hobbit collection\nrelease_dates = []\nfor part in collection_details['parts']:\n    release_dates.append(part['release_date'])\n\n# Print the release dates for the movies in The Hobbit collection\nprint(release_dates)\n```",
        "usage": [
            416,
            7760,
            8176
        ]
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\n\nresponse = requests.get(search_url, headers=headers, params=params)\nresults = response.json()\n\n# Extracting collection IDs for The Fast and the Furious\ncollection_ids = [collection['id'] for collection in results['results']]\n\n# Get details of movies from each collection\nmovies = []\nfor collection_id in collection_ids:\n    collection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    response = requests.get(collection_details_url, headers=headers)\n    collection_details = response.json()\n    \n    parts = collection_details['parts']\n    for part in parts:\n        movie = {\n            'title': part['title'],\n            'release_date': part['release_date'],\n            'overview': part['overview']\n        }\n        movies.append(movie)\n\n# Displaying the list of movies\nfor i, movie in enumerate(movies, start=1):\n    print(f\"Movie {i}:\")\n    print(f\"Title: {movie['title']}\")\n    print(f\"Release Date: {movie['release_date']}\")\n    print(f\"Overview: {movie['overview']}\")\n    print(\"\\n\")\n```",
        "usage": [
            450,
            7334,
            7784
        ]
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for collections\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the query parameter to search for The Fast and the Furious collection\nparams_search_collection = {\n    \"query\": \"The Fast and the Furious\"\n}\n\n# Make a GET request to search for the collection\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ndata_search_collection = response_search_collection.json()\n\n# Extract the collection id from the search results\ncollection_id = data_search_collection['results'][0]['id']\n\n# Define the API url to get reviews of movies from the specified collection\nurl_reviews = f\"https://api.themoviedb.org/3/collection/{collection_id}/reviews\"\n\n# Make a GET request to get the reviews\nresponse_reviews = requests.get(url_reviews, headers=headers)\ndata_reviews = response_reviews.json()\n\n# Extract and print the review(s) of a movie from the collection\nreviews = data_reviews['results']\nfor review in reviews:\n    print(review['content'])\n```",
        "usage": [
            229,
            8272,
            8501
        ]
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections to get Lord of the Rings collection id\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\"query\": \"Lord of the Rings\"}\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\n\nif response_search_collection.status_code == 200:\n    collection_id = response_search_collection.json()[\"results\"][0][\"id\"]\n\n    # Get details of the Lord of the Rings collection\n    url_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    response_collection_details = requests.get(url_collection_details, headers=headers)\n\n    if response_collection_details.status_code == 200:\n        first_movie_release_date = response_collection_details.json()[\"parts\"][0][\"release_date\"]\n        print(\"The first movie of the Lord of the Rings collection was released on:\", first_movie_release_date)\n    else:\n        print(\"Failed to fetch collection details\")\nelse:\n    print(\"Failed to search for the collection\")\n```",
        "usage": [
            394,
            7590,
            7984
        ]
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details of House of Cards\nurl = \"https://api.themoviedb.org/3/search/tv\"\n# Define the parameters for the search query\nparams = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\n# Make the API request to search for House of Cards TV show\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the TV show ID of House of Cards\ntv_id = data['results'][0]['id']\n\n# Define the API url to get the details of the first season of House of Cards\nurl_season = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1\"\n# Make the API request to get the details of the first season of House of Cards\nresponse_season = requests.get(url_season, headers=headers)\ndata_season = response_season.json()\n\n# Extracting the directors from the crew of the first season\ncrew = data_season['episodes'][0]['crew']\ndirectors = [member['name'] for member in crew if member['job'] == 'Director']\n\nprint(directors)\n```",
        "usage": [
            254,
            8030,
            8284
        ]
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for House of Cards TV show\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"page\": 1,\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\nshow_id = data_search_tv[\"results\"][0][\"id\"]\n\n# Get similar TV shows to House of Cards\nurl_similar_tv = f\"https://api.themoviedb.org/3/tv/{show_id}/similar\"\nparams_similar_tv = {\n    \"page\": 1\n}\nresponse_similar_tv = requests.get(url_similar_tv, headers=headers, params=params_similar_tv)\nsimilar_tv_shows = response_similar_tv.json()[\"results\"]\n\nprint(similar_tv_shows)\n```",
        "usage": [
            368,
            9590,
            9958
        ]
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API endpoint to get the list of currently popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Extracting the first TV show from the response which is assumed as the most popular\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        most_popular_show_start_date = data[\"results\"][0][\"first_air_date\"]\n        print(\"The most popular TV show currently on the air started on: \", most_popular_show_start_date)\n    else:\n        print(\"No currently on-air TV show found.\")\nelse:\n    print(\"Failed to fetch data. Status code:\", response.status_code)\n```",
        "usage": [
            344,
            9608,
            9952
        ]
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Set the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/68718/credits\"\n\n# Set the headers containing the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the director's id from the credits\n    director_id = None\n    for crew in data[\"crew\"]:\n        if crew[\"job\"] == \"Director\":\n            director_id = crew[\"id\"]\n            break\n\n    if director_id is not None:\n        # Get the movie credits for the director\n        credits_url = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\n        credits_response = requests.get(credits_url, headers=headers)\n        credits_data = credits_response.json()\n\n        # Extract a few more works directed by the director\n        if credits_response.status_code == 200:\n            more_works = []\n            for movie in credits_data[\"crew\"]:\n                if movie[\"job\"] == \"Director\":\n                    more_works.append(movie[\"title\"])\n\n            print(more_works)\n        else:\n            print(\"Failed to fetch director's works\")\n    else:\n        print(\"Director not found in credits\")\nelse:\n    print(\"Failed to fetch credits for Django Unchained\")\n```",
        "usage": [
            462,
            9194,
            9656
        ]
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the cast from the response\n    tv_cast = response.json()[\"results\"][0][\"id\"]\n    print(tv_cast)\nelse:\n    print(\"Failed to retrieve the TV show cast\")\n```",
        "usage": [
            296,
            9790,
            10086
        ]
    },
    {
        "query": "I need a review for Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show using query parameter\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Breaking Bad\"\n}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the TV show ID for Breaking Bad\ntv_show_id = response.json()['results'][0]['id']\n\n# Get the reviews for the TV show Breaking Bad\nurl = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/reviews\"\nresponse = requests.get(url, headers=headers)\n\nreviews = response.json()['results']\nprint(reviews)\n```",
        "usage": [
            309,
            7515,
            7824
        ]
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for \"The Last Of Us\" TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Last Of Us\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Get recommendations for the TV show\nrecommendations_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/recommendations\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(recommendations_url, headers=headers, params=params)\nrecommendations = response.json()[\"results\"]\n\n# Print the recommendations\nfor recommendation in recommendations:\n    print(recommendation[\"name\"])\n```",
        "usage": [
            340,
            8806,
            9146
        ]
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Last Of Us\",\n    \"include_adult\": False\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the TV show id of \"The Last Of Us\"\n    tv_show_id = response.json()[\"results\"][0][\"id\"]\n    \n    # Call the recommendations API with the TV show id\n    recommendations_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/recommendations\"\n    recommendations_params = {\n        \"page\": 1\n    }\n    \n    recommendations_response = requests.get(recommendations_url, headers=headers, params=recommendations_params)\n    \n    # Check if the recommendations API request was successful\n    if recommendations_response.status_code == 200:\n        recommendations = recommendations_response.json()[\"results\"]\n        # Print the recommendations\n        for recommendation in recommendations:\n            print(recommendation[\"name\"])\n    else:\n        print(\"Failed to retrieve recommendations\")\nelse:\n    print(\"Failed to retrieve TV show information\")    \n```",
        "usage": [
            266,
            8551,
            8817
        ]
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# Set the API url to get the credits for a TV episode\nurl = \"https://api.themoviedb.org/3/tv/1668/season/3/episode/24/credits\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Get the JSON response\ndata = response.json()\n\n# Extract the guest stars information\nguest_stars = data['guest_stars']\n\n# Print the list of guest stars\nfor star in guest_stars:\n    print(star['name'])\n```",
        "usage": [
            293,
            8921,
            9214
        ]
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the popular TV show API to get the list of current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {'page': 1} # Setting page as 1\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the id of the most popular TV show\ntv_id = data['results'][0]['id']\n\n# Call the credits API for the most popular TV show to get the cast\ncast_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\ncast_response = requests.get(cast_url, headers=headers)\ncast_data = cast_response.json()\n\n# Get the lead actor (first cast member)\nlead_actor = cast_data['cast'][0]['name']\n\nprint(f\"The lead actor in the most popular TV show is: {lead_actor}\")\n```",
        "usage": [
            370,
            6079,
            6449
        ]
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the top rated TV shows\nresponse_tv_top_rated = requests.get(\"https://api.themoviedb.org/3/tv/top_rated\", headers=headers, params={\"page\": 1})\ndata_tv_top_rated = response_tv_top_rated.json()\n\n# Get the TV show id of the top-1 rated TV show\ntv_id = data_tv_top_rated['results'][0]['id']\n\n# Call the API to get the keywords of the top-1 rated TV show\nresponse_keywords = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\", headers=headers)\ndata_keywords = response_keywords.json()\n\n# Get the first keyword\nfirst_keyword = data_keywords['results'][0]['name']\n\nprint(first_keyword)\n```",
        "usage": [
            340,
            8702,
            9042
        ]
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show 2 Broke Girls\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the poster path of the first result\ndata = response.json()\nif data[\"total_results\"] > 0:\n    poster_path = data[\"results\"][0][\"poster_path\"]\n    print(\"Poster path for 2 Broke Girls:\", poster_path)\nelse:\n    print(\"2 Broke Girls not found.\")\n```",
        "usage": [
            313,
            6412,
            6725
        ]
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show 2 Broke Girls\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    'query': '2 Broke Girls',\n    'include_adult': 'false'\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params)\nsearch_results = response_search_tv.json()\ntv_id = search_results['results'][0]['id']\n\n# Get the details of 2 Broke Girls\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\nresponse_tv_details = requests.get(url_tv_details, headers=headers)\ntv_details = response_tv_details.json()\n\n# Calculate the total number of episodes\ntotal_episodes = 0\nfor season in tv_details['seasons']:\n    total_episodes += season['episode_count']\n\ntotal_episodes\n```",
        "usage": [
            364,
            9725,
            10089
        ]
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# API url to search for the TV show \"The Big Bang Theory\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n# Parameters for searching the TV show \"The Big Bang Theory\"\nparams_tv_search = {\n    \"query\": \"The Big Bang Theory\",\n    \"include_adult\": False,\n    \"first_air_date_year\": 2007\n}\n\n# Make a request to search for the TV show \"The Big Bang Theory\"\nresponse_tv_search = requests.get(url_search_tv, headers=headers, params=params_tv_search)\ndata_tv_search = response_tv_search.json()\n\n# Extract the production company id for \"The Big Bang Theory\"\nif data_tv_search['total_results'] > 0:\n    tv_show_data = data_tv_search['results'][0]\n    company_ids = tv_show_data['production_company_ids']\n\n    if company_ids:\n        # Get the details of the first production company that worked on \"The Big Bang Theory\"\n        production_company_id = company_ids[0]\n        \n        # API url to get the details of the production company\n        url_company_details = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\n        \n        # Make a request to get the details of the production company\n        response_company_details = requests.get(url_company_details, headers=headers)\n        company_details = response_company_details.json()\n        \n        print(f\"The company that produced The Big Bang Theory was founded in {company_details['origin_country']}\")\n    else:\n        print(\"No production company information found for The Big Bang Theory\")\nelse:\n    print(\"No information found for The Big Bang Theory\")\n```",
        "usage": [
            346,
            8265,
            8611
        ]
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"The Big Bang Theory\"\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Big Bang Theory\"\n}\nresponse = requests.get(tv_search_url, headers=headers, params=params)\n\n# Extract the creation date of The Big Bang Theory from the response\nif response.ok:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        first_air_date = data[\"results\"][0][\"first_air_date\"]\n        print(\"The Big Bang Theory was created on:\", first_air_date)\n    else:\n        print(\"No results found for The Big Bang Theory\")\nelse:\n    print(\"Error occurred during API call\")\n```  ",
        "usage": [
            331,
            8579,
            8910
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API URL for getting popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Parameters for the API\nparams = {\n    \"page\": 1\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    \n    # Get the first TV show's id\n    tv_id = data['results'][0]['id']\n    \n    # API URL for getting keywords of a TV show\n    url_keywords = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    \n    # Send GET request to get keywords of the TV show\n    response_keywords = requests.get(url_keywords, headers=headers)\n    \n    if response_keywords.status_code == 200:\n        # Get the JSON response\n        data_keywords = response_keywords.json()\n        \n        # Get the keyword of the most popular TV show\n        keyword = data_keywords['results'][0]['name']\n        \n        print(\"Keyword of the most popular TV show:\", keyword)\n    else:\n        print(\"Failed to get keywords:\", response_keywords.status_code)\nelse:\n    print(\"Failed to get popular TV shows:\", response.status_code)\n```",
        "usage": [
            456,
            9127,
            9583
        ]
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n\n# Step 1: Get the TV show details for Westworld\ntv_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Westworld\"\n}\nresponse_tv = requests.get(tv_url, headers=headers, params=params)\ntv_data = response_tv.json()\nwestworld_id = tv_data['results'][0]['id']\n\n# Step 2: Get the details of the second season of Westworld\nseason_url = f\"https://api.themoviedb.org/3/tv/{westworld_id}/season/2\"\nresponse_season = requests.get(season_url, headers=headers)\nseason_data = response_season.json()\n\n# Step 3: Get the details of the third episode of the second season of Westworld\nepisode_url = f\"https://api.themoviedb.org/3/tv/{westworld_id}/season/2/episode/3\"\nresponse_episode = requests.get(episode_url, headers=headers)\nepisode_data = response_episode.json()\n\n# Output the overview of the third episode of the second season of Westworld\nprint(episode_data['overview'])\n```",
        "usage": [
            412,
            9513,
            9925
        ]
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show Game of Thrones\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Game of Thrones\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_show_id = response_search_tv.json()[\"results\"][0][\"id\"]\n\n# Get the details of the second season of Game of Thrones\nurl_season_details = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/2\"\nresponse_season_details = requests.get(url_season_details, headers=headers)\n\n# Extract the air date of the second season\nair_date_second_season = response_season_details.json()[\"air_date\"]\nprint(\"Air Date of the Second Season of Game of Thrones: \", air_date_second_season)\n```",
        "usage": [
            353,
            8553,
            8906
        ]
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/858/season/1/episode/3/images\"\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Get the json data from the response\ndata = response.json()\n\n# Extract the poster path of the third episode\nposter_path = data[\"stills\"][2][\"file_path\"]\nprint(poster_path)\n```",
        "usage": [
            274,
            8166,
            8440
        ]
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular"
        ],
        "results": "```python\nimport requests\n\n# Provided API url to get the primary TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/1399\"\n\n# Parameters for the API call (no extra parameter needed, just replace the {tv_id})\nparams = {}\n\n# The provided authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the response to get the network logo\nif response.status_code == 200:\n    data = response.json()\n    networks = data.get(\"networks\")\n    if networks:\n        for network in networks:\n            # Check if the network name is \"HBO\" (The network that produced \"Game of Thrones\") and get its logo\n            if network.get(\"name\") == \"HBO\":\n                logo_path = network.get(\"logo_path\")\n                if logo_path:\n                    logo_url = f\"https://image.tmdb.org/t/p/original/{logo_path}\"\n                    print(\"Logo of the network that produced `Game of Thrones`:\", logo_url)\n                    break\n    else:\n        print(\"No networks found\")\nelse:\n    print(\"Error - Unable to fetch network details\")\n\n```",
        "usage": [
            414,
            8433,
            8847
        ]
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"0dbab590c7eaca07ebf113a51974a37ad92\"\n# Set the headers\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for TV show 'Game of Thrones'\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Game of Thrones\"\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = response.json()\n\n# Get the network id of 'Game of Thrones'\nnetwork_id = search_results[\"results\"][0][\"networks\"][0][\"id\"]\n\n# Get the details of the network\nnetwork_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\nnetwork_response = requests.get(network_url, headers=headers)\nnetwork_details = network_response.json()\n\n# Get the homepage of the network\nnetwork_homepage = network_details[\"homepage\"]\nprint(network_homepage)\n```",
        "usage": [
            216,
            9351,
            9567
        ]
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the parameters\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the results in JSON format\ndata = response.json()\n\n# Extracting the first TV show result to get the keywords\nif data and data.get(\"results\"):\n    first_show = data[\"results\"][0]\n    tv_id = first_show[\"id\"]\n\n    # Calling the TV show keywords API\n    keywords_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    keywords_response = requests.get(keywords_url, headers=headers)\n    keywords_data = keywords_response.json()\n\n    # Extracting the first keyword\n    if keywords_data and keywords_data.get(\"results\"):\n        first_keyword = keywords_data[\"results\"][0][\"name\"]\n        print(f\"The keyword of the most popular TV show currently is: {first_keyword}\")\n    else:\n        print(\"No keywords found for the TV show.\")\n\nelse:\n    print(\"No TV show data found.\")\n```",
        "usage": [
            422,
            8545,
            8967
        ]
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get a list of currently popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the id of the company that produced the most popular TV show\nmost_popular_show = data['results'][0]\ncompany_id = most_popular_show['production_companies'][0]['id']\n\n# Call the API to get details of the company by id\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse_company = requests.get(url_company, headers=headers)\ndata_company = response_company.json()\n\n# Extract the headquarter location of the company\nheadquarters_location = data_company['headquarters']\n\nprint(\"The headquarter of the company that produced currently the most popular TV show is:\", headquarters_location)\n```",
        "usage": [
            360,
            7496,
            7856
        ]
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for searching TV show\nparams = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\n\n# Set the authorization token in the header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the genre of The Mandalorian if the API call is successful\nif response.status_code == 200:\n    results = response.json().get('results', [])\n    if results:\n        genre_ids = results[0].get('genre_ids', [])  # Get the genre IDs\n        print(genre_ids)\n    else:\n        print(\"The Mandalorian was not found in the search results.\")\nelse:\n    print(\"Failed to retrieve data from the API.\")\n```",
        "usage": [
            353,
            8006,
            8359
        ]
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the trending API to get the most trending TV show\ntrending_url = \"https://api.themoviedb.org/3/trending/tv/day\"\ntrending_response = requests.get(trending_url, headers=headers)\ntrending_data = trending_response.json()\n\n# Extract the TV show id of the most trending show\ntv_id = trending_data['results'][0]['id']\n\n# Call the credits API for the TV show to get the cast details\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\n\n# Extract the lead actor's id for the TV show\nlead_actor_id = credits_data['cast'][0]['id']\n\n# Call the person API to get the lead actor's details\nperson_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nperson_response = requests.get(person_url, headers=headers)\nperson_data = person_response.json()\n\n# Extract the birthday of the lead actor\nlead_actor_birthday = person_data['birthday']\n\nprint(f\"The birthday of the lead actor of today's most trending TV show is: {lead_actor_birthday}\")\n```",
        "usage": [
            437,
            8709,
            9146
        ]
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "results": "```python\nimport requests\n\n# Set the API key and base url\nbase_url = \"https://api.themoviedb.org/3\"\napi_key = \"<Your API Key>\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Get the trending TV shows for today\nurl = f\"{base_url}/trending/tv/day\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the network id of the most trending TV show\nnetwork_id = data[\"results\"][0][\"networks\"][0][\"id\"]\n\n# Get the details of the network by network id\nurl = f\"{base_url}/network/{network_id}\"\nresponse = requests.get(url, headers=headers)\nnetwork_data = response.json()\n\n# Print the homepage of the network\nhomepage = network_data[\"homepage\"]\nprint(\"Homepage of the network that produced today's most trending TV show:\", homepage)\n```",
        "usage": [
            189,
            9140,
            9329
        ]
    },
    {
        "query": "give me a review of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the API key in headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the data from the response\n    data = response.json()\n\n    # Get the TV show id of the most trending TV show\n    trending_tv_id = data['results'][0]['id']\n\n    # Define the API endpoint to get the reviews of the most trending TV show\n    reviews_url = f\"https://api.themoviedb.org/3/tv/{trending_tv_id}/reviews\"\n\n    # Make the API request to get the reviews\n    reviews_response = requests.get(reviews_url, headers=headers)\n\n    if reviews_response.status_code == 200:\n        # Get the reviews data\n        reviews_data = reviews_response.json()\n\n        # Print the user reviews for the most trending TV show\n        for review in reviews_data['results']:\n            print(f\"Author: {review['author']}\")\n            print(f\"Review: {review['content']}\")\n            print(\"----------\")\n\n    else:\n        print(f\"Failed to retrieve reviews. Status code: {reviews_response.status_code}\")\nelse:\n    print(f\"Failed to retrieve trending TV shows. Status code: {response.status_code}\")\n```",
        "usage": [
            473,
            8895,
            9368
        ]
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get today's trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\n\n# Check if the request was successful with status code 200\nif response_trending_tv.status_code == 200:\n    # Extract the TV show id of the most trending TV show\n    trending_tv_id = response_trending_tv.json()[\"results\"][0][\"id\"]\n\n    # Get similar TV shows to the most trending TV show\n    url_similar_tv = f\"https://api.themoviedb.org/3/tv/{trending_tv_id}/similar\"\n    response_similar_tv = requests.get(url_similar_tv, headers=headers)\n\n    # Print the results\n    print(response_similar_tv.json())\nelse:\n    print(\"Failed to fetch trending TV shows data.\")\n```",
        "usage": [
            364,
            8341,
            8705
        ]
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Setting the API url\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Setting the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API call\nresponse = requests.get(url, headers=headers)\n\n# Extracting the poster path of the most trending TV show\nif response.status_code == 200:\n    results = response.json()\n    if 'results' in results and len(results['results']) > 0:\n        most_trending_tvshow = results['results'][0]\n        if 'poster_path' in most_trending_tvshow:\n            poster_path = most_trending_tvshow['poster_path']\n            print(\"Poster path of today's most trending TV show:\", poster_path)\n        else:\n            print(\"Poster path not available for the most trending TV show.\")\n    else:\n        print(\"No results found for trending TV shows.\")\nelse:\n    print(\"Failed to fetch data. Status code:\", response.status_code)\n```",
        "usage": [
            368,
            8435,
            8803
        ]
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Create a function to get a person's primary TV show details by id\ndef get_tv_show_details(tv_id):\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    response = requests.get(url, headers=headers)\n    return response.json()\n\n# Search for popular people to find Jeremy Clarkson\nparams = {\n    \"page\": 1\n}\npopular_people_response = requests.get(\"https://api.themoviedb.org/3/person/popular\", headers=headers, params=params)\npopular_people_data = popular_people_response.json()\njeremy_clarkson_id = None\n\nfor person in popular_people_data['results']:\n    if person['name'] == 'Jeremy Clarkson':\n        jeremy_clarkson_id = person['id']\n        break\n\nif jeremy_clarkson_id:\n    # Get Jeremy Clarkson's details\n    jeremy_clarkson_details = get_tv_show_details(jeremy_clarkson_id)\n    if jeremy_clarkson_details:\n        # Get the name of Jeremy Clarkson's most popular TV show\n        most_popular_tv_show = jeremy_clarkson_details['name']\n        \n        # Get the credits for Jeremy Clarkson's most popular TV show\n        credits_url = f\"https://api.themoviedb.org/3/tv/{jeremy_clarkson_id}/season/1/credits\"\n        credits_response = requests.get(credits_url, headers=headers)\n        credits_data = credits_response.json()\n\n        # Check for cast members who have worked with Jeremy Clarkson\n        worked_with_jeremy = []\n        for cast_member in credits_data['cast']:\n            if cast_member['name'] != 'Jeremy Clarkson':  # Exclude Jeremy Clarkson from the results\n                worked_with_jeremy.append(cast_member['name'])\n\n        print(f\"People who worked with Jeremy Clarkson in his most popular TV show '{most_popular_tv_show}':\")\n        for person in worked_with_jeremy:\n            print(person)\n    else:\n        print(\"Error: Unable to retrieve Jeremy Clarkson's details.\")\nelse:\n    print(\"Jeremy Clarkson not found in popular people.\")\n```",
        "usage": [
            618,
            9360,
            9978
        ]
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# API url to search for the TV show Black Mirror\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_tv_params = {\n    \"query\": \"Black Mirror\",\n    \"include_adult\": False\n}\nsearch_tv_response = requests.get(search_tv_url, headers=headers, params=search_tv_params)\nsearch_tv_result = search_tv_response.json()\n\n# Extracting the TV show ID for Black Mirror\ntv_id = search_tv_result[\"results\"][0][\"id\"]\n\n# API url to get the details of the second season of Black Mirror\nseason_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2\"\nseason_response = requests.get(season_url, headers=headers)\nseason_result = season_response.json()\n\n# Extracting the ID of the first episode of the second season of Black Mirror\nepisode_id = season_result[\"episodes\"][0][\"id\"]\n\n# API url to get the images of the first episode of the second season of Black Mirror\nepisode_images_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/episode/1/images\"\nepisode_images_response = requests.get(episode_images_url, headers=headers)\nepisode_images_result = episode_images_response.json()\n\n# Printing the image path of the lead actor of the first episode of the second season of Black Mirror\nlead_actor_image_path = episode_images_result[\"stills\"][0][\"file_path\"]\nprint(lead_actor_image_path)\n```",
        "usage": [
            319,
            8823,
            9142
        ]
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching TV show\nurl_tv_search = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for searching TV show (query parameter will be \"The Mandalorian\")\nparams_tv_search = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\n\n# Call the API to search for TV show\nresponse_tv_search = requests.get(url_tv_search, headers=headers, params=params_tv_search)\ndata_tv_search = response_tv_search.json()\n\n# Get the TV show id of The Mandalorian\ntv_id = data_tv_search['results'][0]['id']\n\n# Define the API url for getting cast and crew of a TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n\n# Call the API to get cast and crew of The Mandalorian\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Find the lead actor in the cast\nlead_actor = None\nfor cast_member in data_credits['cast']:\n    if cast_member['order'] == 0:  # Assuming order 0 represents the lead actor\n        lead_actor = cast_member\n        break\n\nif lead_actor:\n    lead_actor_id = lead_actor['id']\n\n    # Define the API url for getting the person details\n    url_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n\n    # Call the API to get details of the lead actor\n    response_person = requests.get(url_person, headers=headers)\n    data_person = response_person.json()\n\n    # Extract the birthday of the lead actor\n    lead_actor_birthday = data_person['birthday']\n\n    print(\"The lead actor of The Mandalorian is born on:\", lead_actor_birthday)\nelse:\n    print(\"Lead actor not found for The Mandalorian.\")\n```",
        "usage": [
            403,
            7422,
            7825
        ]
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for fetching the most popular TV shows airing today\nurl = \"https://api.themoviedb.org/3/tv/airing_today\"\n# Define the parameters for the API request\nparams = {\n    'page': 1\n}\n\n# Set the authorization token in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the JSON response\ndata = response.json()\n\n# Get the most popular TV show\nif data['results']:\n    tv_show_id = data['results'][0]['id']\n    \n    # Call API to get the credits for the TV show to find lead actor\n    credits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    credits_data = credits_response.json()\n    \n    # Get the lead actor from the cast\n    lead_actor = credits_data['cast'][0]['name']\n    print(f\"The lead actor of today's most popular TV show is: {lead_actor}\")\nelse:\n    print(\"No TV shows airing today.\")\n```",
        "usage": [
            413,
            7444,
            7857
        ]
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\n# define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# get the list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\nparams_popular_tv = {\"page\": 1}  # We will retrieve the first page\nresponse = requests.get(url_popular_tv, headers=headers, params=params_popular_tv)\npopular_tv_shows = response.json()\n\n# get the TV show id of the most popular TV show\nmost_popular_tv_show_id = popular_tv_shows[\"results\"][0][\"id\"]\n\n# get the credits of the TV show to find the lead actor\nurl_credits = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_show_id}/credits\"\nresponse = requests.get(url_credits, headers=headers)\ncredits = response.json()\n\n# get the profile path of the lead actor\nlead_actor_profile_path = credits[\"cast\"][0][\"profile_path\"]\n\n# now we have the image path of the lead actor of the most popular TV show\nprint(f\"The photo of the lead actor of the most popular TV show: {lead_actor_profile_path}\")\n```",
        "usage": [
            413,
            9098,
            9511
        ]
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "results": "```python\nimport requests\n\n# Set the API url for searching a person\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Set the query parameter to search for Cate Blanchett\nparams = {\n    \"query\": \"Cate Blanchett\",\n    \"include_adult\": False\n}\n\n# Make a GET request to search for Cate Blanchett\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Extract the person id for Cate Blanchett\n    person_id = response.json()['results'][0]['id']\n    \n    # Set the API url for getting TV show credits for Cate Blanchett\n    tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n    \n    # Make a GET request to get TV show credits for Cate Blanchett\n    tv_credits_response = requests.get(tv_credits_url, headers=headers)\n    \n    # Check if the TV credits response is successful\n    if tv_credits_response.status_code == 200:\n        # Get the latest TV show id from Cate Blanchett's credits\n        latest_tv_show_id = tv_credits_response.json()['cast'][0]['id']\n        \n        # Set the API url for getting reviews of the latest TV show\n        reviews_url = f\"https://api.themoviedb.org/3/tv/{latest_tv_show_id}/reviews\"\n        \n        # Make a GET request to get reviews of the latest TV show\n        reviews_response = requests.get(reviews_url, headers=headers)\n        \n        # Check if the reviews response is successful\n        if reviews_response.status_code == 200:\n            # Extract and display the reviews of Cate Blanchett's latest TV show\n            reviews = reviews_response.json()['results']\n            for review in reviews:\n                print(\"Author:\", review['author'])\n                print(\"Content:\", review['content'])\n                print(\"URL:\", review['url'])\n                print()\n        else:\n            print(\"Failed to retrieve reviews of the latest TV show\")\n    else:\n        print(\"Failed to retrieve TV show credits for Cate Blanchett\")\nelse:\n    print(\"Failed to search for Cate Blanchett\")\n```",
        "usage": [
            474,
            10884,
            11358
        ]
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\n# Define the base url and endpoint for finding a person by name\nbase_url = \"https://api.themoviedb.org/3/search/person\"\nperson_name = \"David Schwimmer\"\n\n# Set the parameters for the API request\nparams = {\n    \"query\": person_name,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Make the API call to search for the person\nresponse = requests.get(base_url, headers=headers, params=params)\ndata = response.json()\n\n# Check if the API call was successful and if there are any results\nif response.status_code == 200 and data.get(\"results\"):\n    person_id = data[\"results\"][0][\"id\"]\n\n    # Define the base url and endpoint for getting TV credits of the person\n    tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n\n    # Make the API call to get the TV credits of the person\n    tv_credits_response = requests.get(tv_credits_url, headers=headers)\n    tv_credits_data = tv_credits_response.json()\n\n    # Check if the API call was successful and if there are any results\n    if tv_credits_response.status_code == 200 and tv_credits_data.get(\"cast\"):\n        # Sort the TV shows by popularity\n        tv_shows = tv_credits_data[\"cast\"]\n        tv_shows.sort(key=lambda x: x[\"popularity\"], reverse=True)\n\n        # Get the most popular TV show\n        most_popular_tv_show = {\n            \"name\": tv_shows[0][\"name\"],\n            \"popularity\": tv_shows[0][\"popularity\"]\n        }\n\n        print(f\"The most popular TV show of David Schwimmer is '{most_popular_tv_show['name']}' with a popularity score of {most_popular_tv_show['popularity']}\")\n    else:\n        print(\"No TV show credits found for David Schwimmer.\")\nelse:\n    print(\"No person found for the given name.\")\n```",
        "usage": [
            423,
            9484,
            9907
        ]
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show Black Mirror\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_tv_params = {\n    \"query\": \"Black Mirror\",\n    \"include_adult\": False\n}\nsearch_tv_response = requests.get(search_tv_url, headers=headers, params=search_tv_params)\nsearch_tv_result = search_tv_response.json()\nblack_mirror_id = search_tv_result[\"results\"][0][\"id\"]\n\n# Get the credits for the second season of Black Mirror\nseason_credits_url = f\"https://api.themoviedb.org/3/tv/{black_mirror_id}/season/2/credits\"\nseason_credits_response = requests.get(season_credits_url, headers=headers)\nseason_credits_result = season_credits_response.json()\n\n# Find the director of the third episode (episode number 3)\ndirector = None\nfor crew_member in season_credits_result[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\" and crew_member[\"episode_count\"] == 3:\n        director = crew_member[\"name\"]\n        break\n\nprint(f\"The director of the third episode of the second season of Black Mirror is: {director}\")\n```",
        "usage": [
            422,
            9862,
            10284
        ]
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people with the name \"Christopher Nolan\"\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": \"false\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the ID of Christopher Nolan\nperson_id = data['results'][0]['id']\n\n# Get the known for movies of Christopher Nolan\nknown_for_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\nresponse = requests.get(known_for_url, headers=headers)\nknown_for_data = response.json()\n\n# Extract the known for movies\nknown_for_movies = []\nfor item in known_for_data['known_for']:\n    if item['media_type'] == \"movie\":\n        known_for_movies.append(item['original_title'])\n\nprint(known_for_movies)\n```",
        "usage": [
            373,
            9128,
            9501
        ]
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching movies\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the query for 'Avatar'\nparams_avatar = {\n    \"query\": \"Avatar\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Define the query for 'Avatar: The Way of Water'\nparams_avatar_water = {\n    \"query\": \"Avatar: The Way of Water\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make API calls to search for movies\nresponse_avatar = requests.get(url_search_movie, headers=headers, params=params_avatar).json()\nresponse_avatar_water = requests.get(url_search_movie, headers=headers, params=params_avatar_water).json()\n\n# Get the average rating for 'Avatar'\naverage_rating_avatar = sum([movie[\"vote_average\"] for movie in response_avatar[\"results\"]]) / len(response_avatar[\"results\"])\n\n# Get the average rating for 'Avatar: The Way of Water'\naverage_rating_avatar_water = sum([movie[\"vote_average\"] for movie in response_avatar_water[\"results\"]]) / len(response_avatar_water[\"results\"])\n\n# Compare the ratings\nif average_rating_avatar > average_rating_avatar_water:\n    print(\"Avatar has a higher rating.\")\nelif average_rating_avatar < average_rating_avatar_water:\n    print(\"Avatar: The Way of Water has a higher rating.\")\nelse:\n    print(\"Both Avatar and Avatar: The Way of Water have the same rating.\")\n```",
        "usage": [
            310,
            9122,
            9432
        ]
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n\nparams = {\n    \"primary_release_date.gte\": \"2021-01-01\",\n    \"vote_average.gte\": 7.0,\n    \"with_original_language\": \"en\",\n    \"page\": 1\n}\n\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    movies = data[\"results\"]\n    for movie in movies:\n        print(movie[\"title\"])\nelse:\n    print(\"Unable to fetch data\")\n```",
        "usage": [
            296,
            10011,
            10307
        ]
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to search for the movie Lord of the Rings\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Lord of the Rings\",  # Searching for the movie\n    \"include_adult\": \"false\"  # Excluding adult content\n}\n\n# Making the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the genre ids of the movie\ngenre_ids = data['results'][0]['genre_ids']\n\n# API url to get the list of official genres for movies\ngenre_url = \"https://api.themoviedb.org/3/genre/movie/list\"\ngenre_params = {}\ngenre_response = requests.get(genre_url, headers=headers, params=genre_params)\ngenre_data = genre_response.json()\n\n# Finding the genre name based on genre id\ngenre_name = None\nfor genre in genre_data['genres']:\n    if genre['id'] in genre_ids:\n        genre_name = genre['name']\n        break\n\nprint(genre_name)\n```",
        "usage": [
            405,
            9714,
            10119
        ]
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the person with the highest popularity\npopular_people = response.json()[\"results\"]\nmost_popular_person = max(popular_people, key=lambda x: x[\"popularity\"])\n\n# Get the details of the most popular person\nurl = f\"https://api.themoviedb.org/3/person/{most_popular_person['id']}\"\nresponse = requests.get(url, headers=headers)\n\n# Extract the birthday of the most popular person\nbirthday = response.json()[\"birthday\"]\nprint(birthday)\n```",
        "usage": [
            333,
            7004,
            7337
        ]
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Big Bang Theory TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Big Bang Theory\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\ndata = response.json()\n\n# Get the TV show ID\ntv_show_id = data[\"results\"][0][\"id\"]\n\n# Get the images of the second season of The Big Bang Theory\nimage_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/2/images\"\nresponse = requests.get(image_url, headers=headers)\nimages_data = response.json()\n\n# Retrieve the poster of the second season\nposter_path = images_data[\"posters\"][0][\"file_path\"]\n\n# Display the poster path\nprint(poster_path)\n```",
        "usage": [
            360,
            9160,
            9520
        ]
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "results": "```python\nimport requests\n\n# API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2/episode/3\"\n# Params dict (none needed as all information is in the url)\nparams = {}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    # Extract the name of the third episode of the second season of Mandalorian\n    episode_name = data['name']\n    print(\"The name of the third episode of the second season of Mandalorian is:\", episode_name)\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            173,
            9267,
            9440
        ]
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching for the movie \"The Shawshank Redemption\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n# Set the query parameter for the movie \"The Shawshank Redemption\"\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the API call to search for the movie \"The Shawshank Redemption\"\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie id of \"The Shawshank Redemption\"\nmovie_id = data_search_movie['results'][0]['id']\n\n# Define the API endpoint for getting credits of the movie\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make the API call to get the credits of the movie\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Get the lead actor id (assuming the lead actor is the first in the cast list)\nlead_actor_id = data_movie_credits['cast'][0]['id']\n\n# Define the API endpoint for getting the details of the lead actor\nurl_person_details = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n\n# Make the API call to get the details of the lead actor\nresponse_person_details = requests.get(url_person_details, headers=headers)\ndata_person_details = response_person_details.json()\n\n# Extract the birthday of the lead actor of \"The Shawshank Redemption\"\nlead_actor_birthday = data_person_details['birthday']\n\nprint(f\"The birthday of the lead actor of the movie 'The Shawshank Redemption' is: {lead_actor_birthday}\")\n```",
        "usage": [
            394,
            7549,
            7943
        ]
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the API key and headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Shawshank Redemption\"\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nmovie_params = {\n    \"query\": \"The Shawshank Redemption\"\n}\nmovie_response = requests.get(movie_search_url, headers=headers, params=movie_params)\nmovie_data = movie_response.json()\nmovie_id = movie_data['results'][0]['id']\n\n# Get the credits for the movie to find the director\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\ncrew = credits_data['crew']\n\n# Find the director in the crew list\ndirector = next((member for member in crew if member['job'] == 'Director'), None)\n\nif director:\n    director_id = director['id']\n    \n    # Get the details of the director\n    person_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n    person_response = requests.get(person_url, headers=headers)\n    person_data = person_response.json()\n    \n    director_birthday = person_data['birthday']\n    \n    print(f\"The birthday of the director of 'The Shawshank Redemption' is: {director_birthday}\")\nelse:\n    print(\"Director information not found for 'The Shawshank Redemption'\")\n```",
        "usage": [
            469,
            7107,
            7576
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching the movie\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for searching the movie \"The Shawshank Redemption\"\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"api_key\": \"0dbab590c7eaca07ebe625974a37ad92\"\n}\n\n# Call the API to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\n\n# Get the company id that created the movie\ncompany_id = response_search_movie.json()[\"results\"][0][\"production_companies\"][0][\"id\"]\n\n# Define the API url for getting company details\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\n\n# Call the API to get the company details\nresponse_company = requests.get(url_company, headers=headers)\n\n# Get the headquarter location of the company\nheadquarter_location = response_company.json()[\"headquarters\"]\n\nprint(headquarter_location)\n```",
        "usage": [
            227,
            8434,
            8661
        ]
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "results": "```python\nimport requests\n\n# Define the necessary API endpoints\ncollection_search_url = \"https://api.themoviedb.org/3/search/collection\"\ncompany_details_url = \"https://api.themoviedb.org/3/company/\"\n\n# Set the API key\napi_key = \"YOUR_API_KEY\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the Star Wars collection\nparams = {\n    \"query\": \"Star Wars\"\n}\nresponse = requests.get(collection_search_url, headers=headers, params=params)\nstar_wars_collection_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the company details for the Star Wars collection\ncompany_id = response.json()[\"results\"][0][\"id\"]\ncompany_response = requests.get(company_details_url + str(company_id), headers=headers)\ncompany_headquarters = company_response.json()[\"headquarters\"]\nprint(\"The headquarters of the company that created the Star Wars collection is:\", company_headquarters)\n```",
        "usage": [
            200,
            6824,
            7024
        ]
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get movie details for The Double Life of Veronique\nresponse_veronique = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params={\"query\": \"The Double Life of Veronique\"})\nveronique_results = response_veronique.json()[\"results\"]\nveronique_release_date = veronique_results[0][\"release_date\"]\n\n# Get movie details for Mulholland Drive\nresponse_mulholland = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params={\"query\": \"Mulholland Drive\"})\nmulholland_results = response_mulholland.json()[\"results\"]\nmulholland_release_date = mulholland_results[0][\"release_date\"]\n\n# Compare release dates\nif veronique_release_date < mulholland_release_date:\n    print(\"The Double Life of Veronique was released earlier.\")\nelse:\n    print(\"Mulholland Drive was released earlier.\")\n```",
        "usage": [
            378,
            9888,
            10266
        ]
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get credits for Twin Peaks Season 1\ntv_id = 1920  # Twin Peaks tv show id\nseason_number = 1\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits\"\nresponse = requests.get(url, headers=headers)\ntwin_peaks_season1_credits = response.json()\n\n# Get credits for Mulholland Drive\nmovie_id = 101  # Mulholland Drive movie id\nurl = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(url, headers=headers)\nmulholland_drive_credits = response.json()\n\n# Extract director names\ntwin_peaks_director = None\nmulholland_drive_director = None\n\nfor crew_member in twin_peaks_season1_credits['crew']:\n    if crew_member['job'] == 'Director':\n        twin_peaks_director = crew_member['name']\n        break\n\nfor crew_member in mulholland_drive_credits['crew']:\n    if crew_member['job'] == 'Director':\n        mulholland_drive_director = crew_member['name']\n        break\n\n# Check if the director of Twin Peaks Season 1 is the same as Mulholland Drive\nif twin_peaks_director is not None and mulholland_drive_director is not None:\n    if twin_peaks_director == mulholland_drive_director:\n        print(f\"The director of Twin Peaks Season 1 and Mulholland Drive is the same person: {twin_peaks_director}\")\n    else:\n        print(\"The director of Twin Peaks Season 1 and Mulholland Drive is different.\")\nelse:\n    print(\"Could not find the director of at least one of the titles.\")\n```",
        "usage": [
            548,
            8415,
            8963
        ]
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# First, we need to search for the movie id of \"Mulholland Drive\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Mulholland Drive\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Get the movie id from the search results\nmovie_id = search_data[\"results\"][0][\"id\"]\n\n# Next, we get the credits for the movie to find the director\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\n\n# Find the director in the crew list\ndirector_name = \"\"\nfor crew_member in credits_data[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director_name = crew_member[\"name\"]\n        break\n\n# Finally, get the person details to find out where the director was born\nif director_name:\n    person_search_url = \"https://api.themoviedb.org/3/search/person\"\n    person_search_params = {\n        \"query\": director_name\n    }\n    person_search_response = requests.get(person_search_url, headers=headers, params=person_search_params)\n    person_search_data = person_search_response.json()\n\n    # Get the person id from the search results\n    person_id = person_search_data[\"results\"][0][\"id\"]\n\n    # Get the details of the person\n    person_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n    person_response = requests.get(person_url, headers=headers)\n    person_data = person_response.json()\n\n    # Print the birth place of the director\n    print(f\"The director of Mulholland Drive, {director_name}, was born in {person_data['place_of_birth']}\")\nelse:\n    print(\"Director information not found.\")\n```",
        "usage": [
            582,
            7302,
            7884
        ]
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Define the headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Mulholland Drive\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Mulholland Drive\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Check if \"Mulholland Drive\" is in the top-rated list\ntop_rated_url = \"https://api.themoviedb.org/3/movie/top_rated\"\ntop_rated_params = {}\ntop_rated_response = requests.get(top_rated_url, headers=headers, params=top_rated_params)\ntop_rated_results = top_rated_response.json()\n\n# Search for \"Mulholland Drive\" in the top-rated list\nis_in_top_10 = False\nfor movie in top_rated_results[\"results\"][:10]:  # Check top 10 movies\n    if \"Mulholland Drive\" in movie[\"title\"]:\n        is_in_top_10 = True\n        break\n\nprint(is_in_top_10)\n```",
        "usage": [
            402,
            8362,
            8764
        ]
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest"
        ],
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Akira Kurosawa\nparams_akira = {\n    \"query\": \"Akira Kurosawa\",\n    \"include_adult\": False\n}\nresponse_akira = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params_akira)\njson_akira = response_akira.json()\n\n# Search for Spielberg\nparams_spielberg = {\n    \"query\": \"Steven Spielberg\",\n    \"include_adult\": False\n}\nresponse_spielberg = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params_spielberg)\njson_spielberg = response_spielberg.json()\n\n# Get movie credits for Akira Kurosawa\nif json_akira[\"total_results\"] > 0:\n    akira_id = json_akira[\"results\"][0][\"id\"]\n    response_akira_credits = requests.get(f\"https://api.themoviedb.org/3/person/{akira_id}/movie_credits\", headers=headers)\n    json_akira_credits = response_akira_credits.json()\n    num_akira_movies = len(json_akira_credits[\"cast\"])\n\n# Get movie credits for Spielberg\nif json_spielberg[\"total_results\"] > 0:\n    spielberg_id = json_spielberg[\"results\"][0][\"id\"]\n    response_spielberg_credits = requests.get(f\"https://api.themoviedb.org/3/person/{spielberg_id}/movie_credits\", headers=headers)\n    json_spielberg_credits = response_spielberg_credits.json()\n    num_spielberg_movies = len(json_spielberg_credits[\"cast\"])\n\n# Compare who directed more movies\nif num_akira_movies > num_spielberg_movies:\n    print(\"Akira Kurosawa directed more movies.\")\nelif num_spielberg_movies > num_akira_movies:\n    print(\"Spielberg directed more movies.\")\nelse:\n    print(\"Both Akira Kurosawa and Spielberg directed the same number of movies.\")\n```",
        "usage": [
            599,
            8677,
            9276
        ]
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"0dbab590c7eaca07ebf6fa3a7ad92\"\n# Set the headers\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Step 1: Get the director id for \"Mulholland Drive\" movie\nmovie_title = \"Mulholland Drive\"\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": movie_title\n}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\ndirector_id = None\n\nif response.status_code == 200:\n    movie_data = response.json()\n    if \"results\" in movie_data and len(movie_data[\"results\"]) > 0:\n        first_result = movie_data[\"results\"][0]\n        if \"id\" in first_result:\n            movie_id = first_result[\"id\"]\n            credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n            \n            # Step 2: Get the credits for \"Mulholland Drive\" movie to find the director id\n            response = requests.get(credits_url, headers=headers)\n            if response.status_code == 200:\n                credits_data = response.json()\n                if \"crew\" in credits_data:\n                    for crew_member in credits_data[\"crew\"]:\n                        if crew_member[\"job\"] == \"Director\":\n                            director_id = crew_member[\"id\"]\n                            break\n\n# Step 3: Get the TV shows directed by the director\nif director_id:\n    director_tv_credits_url = f\"https://api.themoviedb.org/3/person/{director_id}/tv_credits\"\n    response = requests.get(director_tv_credits_url, headers=headers)\n    if response.status_code == 200:\n        tv_credits_data = response.json()\n        tv_series_directed = []\n\n        if \"crew\" in tv_credits_data:\n            for credit in tv_credits_data[\"crew\"]:\n                tv_series_directed.append(credit[\"name\"])\n\n        print(tv_series_directed)\n    else:\n        print(\"Failed to fetch TV series data for the director.\")\nelse:\n    print(\"Director ID not found.\")\n\n```",
        "usage": [
            464,
            8489,
            8953
        ]
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for getting person details\nurl = \"https://api.themoviedb.org/3/search/person\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the parameters for the query to search for Scarlett Johansson\nparams = {\n    'query': 'Scarlett Johansson',\n    'page': 1,\n    'include_adult': 'false',\n    'region': 'US'\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the person id of Scarlett Johansson\nperson_id = data['results'][0]['id']\n\n# Now we have the person id, we can make another API call to get specific details\nperson_details_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\nperson_params = {}\nperson_response = requests.get(person_details_url, headers=headers, params=person_params)\nperson_data = person_response.json()\n\n# Get the birthday of Scarlett Johansson\nscarlett_birthday = person_data['birthday']\nprint(scarlett_birthday)\n```",
        "usage": [
            392,
            7554,
            7946
        ]
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get details of a TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n# Define the query parameters to search for \"Sword Art Online\"\nparams = {\n    'query': 'Sword Art Online',\n    'include_adult': False\n}\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results from the response\n    results = response.json()['results']\n\n    # Iterate through the results to find the TV show \"Sword Art Online\"\n    for result in results:\n        if result['name'] == 'Sword Art Online':\n            tv_id = result['id']\n            break\n\n    # If the TV show \"Sword Art Online\" was found, get the details to find the number of seasons\n    if 'tv_id' in locals():\n        url_season = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n        response_season = requests.get(url_season, headers=headers)\n\n        if response_season.status_code == 200:\n            # Get the number of seasons from the response\n            num_seasons = response_season.json()['number_of_seasons']\n            print(f\"The total number of seasons of Sword Art Online is: {num_seasons}\")\n        else:\n            print(\"Error fetching data for the TV show\")\n    else:\n        print(\"Sword Art Online TV show not found in the search results\")\nelse:\n    print(\"Error searching for TV show\")\n\n```",
        "usage": [
            338,
            7432,
            7770
        ]
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching the movie \"We Married as Job\" to get its movie_id\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"We Married as Job\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = response.json()\n\n# Extract the movie_id of \"We Married as Job\" to use in credits API\nmovie_id = search_results['results'][0]['id']\n\n# API url to get credits for the movie with the specified movie_id\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits_info = response.json()\n\n# Check if Yui Aragaki and Gen Hoshino are co-starring in \"We Married as Job\"\nyui_aragaki_in_cast = False\ngen_hoshino_in_cast = False\n\nfor cast_member in credits_info['cast']:\n    if cast_member['name'] == 'Yui Aragaki':\n        yui_aragaki_in_cast = True\n    if cast_member['name'] == 'Gen Hoshino':\n        gen_hoshino_in_cast = True\n\n# Print the result\nif yui_aragaki_in_cast and gen_hoshino_in_cast:\n    print(\"Yui Aragaki and Gen Hoshino are co-starring in 'We Married as Job'.\")\nelse:\n    print(\"Yui Aragaki and Gen Hoshino are not co-starring in 'We Married as Job'.\")\n```",
        "usage": [
            349,
            5941,
            6290
        ]
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "results": "```python\nimport requests\n\n# Set the API key\nAPI_KEY = \"0dba059c7eaca07ebe625974a37ad92\"\n# Set the headers\nheaders = {\n    \"Authorization\": f\"Bearer {API_KEY}\"\n}\n\n# Function to get the director of the movie \"Barbie\"\ndef get_barbie_director():\n    url = \"https://api.themoviedb.org/3/search/movie\"\n    params = {\n        \"query\": \"Barbie\",\n        \"include_adult\": False\n    }\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n    director = None\n    if \"results\" in data and data[\"results\"]:\n        movie_id = data[\"results\"][0][\"id\"]\n        credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n        response = requests.get(credits_url, headers=headers)\n        credits_data = response.json()\n        for crew_member in credits_data[\"crew\"]:\n            if crew_member[\"job\"] == \"Director\":\n                director = crew_member[\"name\"]\n                break\n    return director\n\n# Function to get the lead actor of the TV show \"DEATH NOTE\"\ndef get_death_note_lead_actor():\n    url = \"https://api.themoviedb.org/3/search/tv\"\n    params = {\n        \"query\": \"DEATH NOTE\",\n        \"include_adult\": False\n    }\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n    lead_actor = None\n    if \"results\" in data and data[\"results\"]:\n        tv_id = data[\"results\"][0][\"id\"]\n        credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n        response = requests.get(credits_url, headers=headers)\n        credits_data = response.json()\n        for cast_member in credits_data[\"cast\"]:\n            if cast_member[\"order\"] == 0:  # Assuming lead actor is the first one in the cast list\n                lead_actor = cast_member[\"name\"]\n                break\n    return lead_actor\n\n# Get the director of the movie \"Barbie\"\nbarbie_director = get_barbie_director()\n\n# Get the lead actor of the TV show \"DEATH NOTE\"\ndeath_note_lead_actor = get_death_note_lead_actor()\n\n# Calculate the age difference\n# Assuming the director of the film \"Barbie\" is x years old and the lead actor of the TV show \"DEATH NOTE\" is y years old\n# Assuming age difference = |x - y|\n# We do not have actual birthdates to calculate exact difference\n\nprint(barbie_director, death_note_lead_actor)\n```",
        "usage": [
            569,
            7581,
            8150
        ]
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person with the name 'Katherine LaNasa'\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\nparams_search_person = {\n    \"query\": \"Katherine LaNasa\"\n}\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\ndata_search_person = response_search_person.json()\n\n# Get the person id for Katherine LaNasa\nif data_search_person.get('results'):\n    person_id = data_search_person['results'][0]['id']\n\n    # Get the movie credits for Katherine LaNasa\n    url_person_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response_person_movie_credits = requests.get(url_person_movie_credits, headers=headers)\n    data_person_movie_credits = response_person_movie_credits.json()\n\n    # Get the latest movie appearance\n    latest_movie = data_person_movie_credits['cast'][0]\n\n    print(\"Katherine LaNasa's latest movie appearance:\")\n    print(\"Title:\", latest_movie.get('title'))\n    print(\"Character:\", latest_movie.get('character'))\n    print(\"Release Date:\", latest_movie.get('release_date'))\nelse:\n    print(\"No results found for Katherine LaNasa.\")\n```",
        "usage": [
            446,
            8844,
            9290
        ]
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# API key for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movies with the query 'Oppenheimer'\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Oppenheimer\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the poster path of the first movie in the search results\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        movie = data[\"results\"][0]\n        poster_path = movie[\"poster_path\"]\n        if poster_path:\n            # Construct the full image path URL\n            image_url = f\"https://image.tmdb.org/t/p/original{poster_path}\"\n            print(image_url)\n        else:\n            print(\"No cover image found for the movie 'Oppenheimer'.\")\n    else:\n        print(\"No movie found with the title 'Oppenheimer'.\")\nelse:\n    print(\"Error: Failed to retrieve data from the API.\")\n```",
        "usage": [
            396,
            6493,
            6889
        ]
    }
]