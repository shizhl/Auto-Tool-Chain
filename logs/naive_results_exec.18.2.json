[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the provided authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person with the name \"Sofia Coppola\"\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Sofia Coppola\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Check if any results are found\nif search_data[\"total_results\"] == 0:\n    print(\"No results found for Sofia Coppola\")\nelse:\n    person_id = search_data[\"results\"][0][\"id\"]  # Get the person id for Sofia Coppola\n    \n    # Get the movie credits for Sofia Coppola\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    movie_credits_response = requests.get(movie_credits_url, headers=headers)\n    movie_credits_data = movie_credits_response.json()\n    \n    # Count the number of movies directed by Sofia Coppola\n    directed_movies = [credit for credit in movie_credits_data[\"crew\"] if credit[\"job\"] == \"Director\"]\n    num_directed_movies = len(directed_movies)\n    \n    print(f\"Sofia Coppola has directed {num_directed_movies} movies.\")\n```",
        "usage": [
            446,
            11229,
            11675
        ],
        "executed": "Sofia Coppola has directed 14 movies.\n"
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching the movie \"The Dark Knight\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n# Define the parameters for searching the movie \"The Dark Knight\"\nparams_search_movie = {\n    \"query\": \"The Dark Knight\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Make the API request to search for the movie \"The Dark Knight\"\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie id for the movie \"The Dark Knight\"\nmovie_id = data_search_movie['results'][0]['id']\n\n# Define the API endpoint for getting the credits of the movie\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make the API request to get the credits of the movie \"The Dark Knight\"\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Extract the lead actor's name from the credits data\nlead_actor = data_movie_credits['cast'][0]['name']\n\nprint(f\"The lead actor in the movie The Dark Knight was: {lead_actor}\")\n```  ",
        "usage": [
            275,
            8722,
            8997
        ],
        "executed": "The lead actor in the movie The Dark Knight was: Christian Bale\n"
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "results": "```python\nimport requests\n\n# Setting up the API endpoint\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\nparams = {\n    \"page\": 1\n}\n\n# Making the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Checking if the request was successful\nif response.status_code == 200:\n    # Getting the data from the response\n    data = response.json()\n    \n    # Checking if the data contains any movies\n    if \"results\" in data and len(data[\"results\"]) > 0:\n        # Getting the director of the top-1 rated movie\n        top_movie_id = data[\"results\"][0][\"id\"]\n        \n        # Getting the credits for the top movie\n        credits_url = f\"https://api.themoviedb.org/3/movie/{top_movie_id}/credits\"\n        credits_response = requests.get(credits_url, headers=headers)\n        \n        if credits_response.status_code == 200:\n            credits_data = credits_response.json()\n            \n            # Checking if the credits contain crew information\n            if \"crew\" in credits_data:\n                # Looking for the director in the crew\n                for member in credits_data[\"crew\"]:\n                    if member[\"job\"].lower() == \"director\":\n                        director_name = member[\"name\"]\n                        print(f\"The director of the top-1 rated movie is: {director_name}\")\n                        break\n        else:\n            print(\"Failed to fetch credits\")\n    else:\n        print(\"No top-rated movies found\")\nelse:\n    print(\"Failed to fetch top-rated movies\")\n```",
        "usage": [
            329,
            9579,
            9908
        ],
        "executed": "The director of the top-1 rated movie is: Frank Darabont\n"
    },
    {
        "query": "give me a image for the collection Star Wars",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Provide the query for the collection \"Star Wars\"\nparams = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    result = response.json()\n    # Extract the image path for the collection\n    if 'results' in result and len(result['results']) > 0:\n        collection_id = result['results'][0]['id']\n        images_url = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\n        image_response = requests.get(images_url, headers=headers)\n        \n        # Check if the image request was successful\n        if image_response.status_code == 200:\n            image_result = image_response.json()\n            if 'backdrops' in image_result and len(image_result['backdrops']) > 0:\n                image_path = image_result['backdrops'][0]['file_path']\n                print(f\"Image path for Star Wars collection: {image_path}\")\n            else:\n                print(\"No image found for the collection\")\n        else:\n            print(\"Failed to retrieve image for the collection\")\n    else:\n        print(\"No collection found with the given query\")\nelse:\n    print(\"Failed to retrieve collection information\")\n\n```",
        "usage": [
            481,
            9107,
            9588
        ],
        "executed": "Image path for Star Wars collection: /d8duYyyC9J5T825Hg7grmaabfxQ.jpg\n"
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching companies\nurl = \"https://api.themoviedb.org/3/search/company\"\n\n# Define the parameters for the search query\nparams = {\n    \"query\": \"Walt Disney\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Iterate through the results to find Walt Disney\n    for company in data['results']:\n        if company['name'] == 'Walt Disney':\n            company_id = company['id']\n            # Print the company id for Walt Disney\n            print(\"Company ID for Walt Disney:\", company_id)\n            \n            # Use the company ID to get the images/logos\n            logo_url = f\"https://api.themoviedb.org/3/company/{company_id}/images\"\n            logo_response = requests.get(logo_url, headers=headers)\n            \n            # Check if logo request was successful\n            if logo_response.status_code == 200:\n                logo_data = logo_response.json()\n                # Print the logo path for Walt Disney\n                print(\"Logo path for Walt Disney:\", logo_data['logos'][0]['file_path'])\n            else:\n                print(\"Error fetching logo data\")\nelse:\n    print(\"Error fetching company data\")\n```",
        "usage": [
            296,
            9823,
            10119
        ],
        "executed": ""
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the movie_id for Titanic\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\"query\": \"Titanic\", \"page\": 1, \"include_adult\": False}\nresponse = requests.get(search_url, headers=headers, params=params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the Titanic movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncast = response.json()[\"cast\"]\n\n# Find the lead actor (assuming it's the first cast member)\nlead_actor_id = cast[0][\"id\"]\n\n# Get the images for the lead actor\nimages_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}/images\"\nresponse = requests.get(images_url, headers=headers)\nimages = response.json()[\"profiles\"]\n\n# Print out the first image url\nif images:\n    print(\"The lead actor of Titanic looks like:\")\n    print(images[0][\"file_path\"])\nelse:\n    print(\"No images found for the lead actor of Titanic.\")\n```",
        "usage": [
            420,
            9506,
            9926
        ],
        "executed": "The lead actor of Titanic looks like:\n/wo2hJpn04vbtmh0B9utCFdsQhxM.jpg\n"
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "results": "```python\nimport requests\n\n# Set the API endpoint\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nurl_similar_movies = \"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\nurl_movie_reviews = \"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n\n# Set the API key in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movies similar to \"Titanic\"\nparams_search_movie = {\n    \"query\": \"Titanic\",\n    \"page\": 1\n}\n\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie ID of the first similar movie\nif data_search_movie[\"total_results\"] > 0:\n    movie_id = data_search_movie[\"results\"][0][\"id\"]\n\n    # Get the list of similar movies\n    url_similar_movies = url_similar_movies.format(movie_id=movie_id)\n    params_similar_movies = {\n        \"page\": 1\n    }\n\n    response_similar_movies = requests.get(url_similar_movies, headers=headers, params=params_similar_movies)\n    data_similar_movies = response_similar_movies.json()\n\n    # Get the first similar movie ID\n    if data_similar_movies[\"total_results\"] > 0:\n        similar_movie_id = data_similar_movies[\"results\"][0][\"id\"]\n\n        # Get the reviews of the first similar movie\n        url_movie_reviews = url_movie_reviews.format(movie_id=similar_movie_id)\n        params_movie_reviews = {\n            \"page\": 1\n        }\n\n        response_movie_reviews = requests.get(url_movie_reviews, headers=headers, params=params_movie_reviews)\n        data_movie_reviews = response_movie_reviews.json()\n\n        # Extract and print the reviews\n        if data_movie_reviews[\"total_results\"] > 0:\n            reviews = data_movie_reviews[\"results\"]\n            print(\"Reviews of the first movie similar to Titanic:\")\n            for review in reviews:\n                print(f\"Author: {review['author']}\")\n                print(f\"Content: {review['content']}\")\n                print(\"--------------\")\n\n    else:\n        print(\"No similar movies found.\")\n        \nelse:\n    print(\"No movies found with the search term 'Titanic'.\")\n\n```",
        "usage": [
            643,
            7683,
            8326
        ],
        "executed": ""
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Step 1: Search for the movie Titanic\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nresponse = requests.get(movie_search_url, headers=headers, params=params)\nif response.status_code == 200:\n    results = response.json()[\"results\"]\n    if results:\n        titanic_id = results[0][\"id\"]\n\n        # Step 2: Get recommendations for the movie Titanic\n        recommendations_url = f\"https://api.themoviedb.org/3/movie/{titanic_id}/recommendations\"\n        params = {\n            \"page\": 1\n        }\n\n        response = requests.get(recommendations_url, headers=headers, params=params)\n        if response.status_code == 200:\n            recommendations = response.json()[\"results\"]\n            print(recommendations)\n        else:\n            print(\"Failed to fetch recommendations\")\n    else:\n        print(\"Titanic not found\")\nelse:\n    print(\"Failed to search for Titanic\")\n```",
        "usage": [
            276,
            9073,
            9349
        ],
        "executed": "Failed to search for Titanic\n"
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\n# Define the base URL for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for movies directed by Christopher Nolan\nsearch_url = f\"{base_url}/search/person\"\nsearch_params = {\n    \"query\": \"Christopher Nolan\"\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\ndata = response.json()\n\n# Get the person ID for Christopher Nolan\nperson_id = None\nif \"results\" in data and len(data[\"results\"]) > 0:\n    person_id = data[\"results\"][0][\"id\"]\n\n# Get the latest movie directed by Christopher Nolan\nlatest_movie_url = f\"{base_url}/person/{person_id}/movie_credits\"\nmovie_response = requests.get(latest_movie_url, headers=headers)\nmovie_data = movie_response.json()\n\n# Find the latest movie directed by Christopher Nolan\nlatest_movie = None\nif \"crew\" in movie_data:\n    for movie in movie_data[\"crew\"]:\n        if movie[\"job\"] == \"Director\":\n            latest_movie = movie\n            break\n\n# Output the result\nif latest_movie:\n    print(\"The latest movie directed by Christopher Nolan is:\", latest_movie[\"original_title\"])\nelse:\n    print(\"No movie directed by Christopher Nolan found.\")\n```",
        "usage": [
            442,
            10874,
            11316
        ],
        "executed": "The latest movie directed by Christopher Nolan is: Interstellar\n"
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TMDB movie with Martin Scorsese as director\nurl = \"https://api.themoviedb.org/3/discover/movie\"\nparams = {\n    \"sort_by\": \"vote_average.desc\",\n    \"with_people\": \"10380\",  # Martin Scorsese's TMDB id\n    \"page\": 1\n}\n\nresponse = requests.get(url, headers=headers, params=params)\n\n# Find the highest rated movie directed by Martin Scorsese\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        highest_rated_movie = data[\"results\"][0]\n        print(\"The highest rated movie directed by Martin Scorsese is:\", highest_rated_movie[\"title\"])\n    else:\n        print(\"No movies directed by Martin Scorsese found.\")\nelse:\n    print(\"Error fetching data from TMDB API\")\n```",
        "usage": [
            369,
            10304,
            10673
        ],
        "executed": "The highest rated movie directed by Martin Scorsese is: An Old Fashioned Love Story: Making 'The Bridges of Madison County'\n"
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the latest movie of Leonardo DiCaprio\nurl = \"https://api.themoviedb.org/3/person/6193/movie_credits\"\nparams = {}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the latest movie id\nlatest_movie_id = data['cast'][0]['id']\n\n# Get the details of the latest movie\nurl = f\"https://api.themoviedb.org/3/movie/{latest_movie_id}\"\nparams = {}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the director of the latest movie\ndirector = None\nfor crew_member in data['credits']['crew']:\n    if crew_member['job'] == 'Director':\n        director = crew_member['name']\n        break\n\nprint(f\"The director of Leonardo DiCaprio's latest movie is: {director}\")\n```",
        "usage": [
            363,
            11165,
            11528
        ],
        "executed": null
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people by name\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Catherine Hardwicke\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the TV show credits for the person\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(url, headers=headers)\ntv_credits = response.json()\n\n# Find the TV show recently directed by Catherine Hardwicke\nrecent_show = None\nfor credit in tv_credits[\"crew\"]:\n    if credit[\"job\"] == \"Director\":\n        recent_show = credit\n        break\n\nprint(recent_show)\n```",
        "usage": [
            357,
            8910,
            9267
        ],
        "executed": "{'adult': False, 'backdrop_path': '/pXwEO7OYA7LhVPYyGIIqa58wwcF.jpg', 'genre_ids': [10759, 18, 37], 'id': 1401, 'origin_country': ['US', 'CA'], 'original_language': 'en', 'original_name': 'Hell on Wheels', 'overview': 'The epic story of post-Civil War America, focusing on Cullen Bohannon, a Confederate soldier who sets out to exact revenge on the Union soldiers who killed his wife. His journey takes him west to Hell on Wheels, a dangerous, raucous, lawless melting pot of a town that travels with and services the construction of the first transcontinental railroad, an engineering feat unprecedented for its time.', 'popularity': 157.497, 'poster_path': '/hK6C1Iimyw52ToE3d8WFFUh9Vn1.jpg', 'first_air_date': '2011-11-06', 'name': 'Hell on Wheels', 'vote_average': 7.605, 'vote_count': 392, 'credit_id': '53d75b9bc3a3683a25000e70', 'department': 'Directing', 'episode_count': 1, 'job': 'Director'}\n"
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show Breaking Bad\nparams = {\n    \"query\": \"Breaking Bad\",\n    \"page\": 1\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params)\nresults = response.json()\n\n# Get the TV show id for Breaking Bad\nbreaking_bad_id = results[\"results\"][0][\"id\"]\n\n# Get similar TV shows to Breaking Bad\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(f\"https://api.themoviedb.org/3/tv/{breaking_bad_id}/similar\", headers=headers, params=params)\nsimilar_results = response.json()\n\n# Print the list of similar TV shows\nfor show in similar_results[\"results\"]:\n    print(show[\"name\"])\n```",
        "usage": [
            339,
            8531,
            8870
        ],
        "executed": "Flower of Evil\nHardcastle and McCormick\nThe Sopranos\nDeadwood\nSons of Anarchy\nThe Shield\nMea culpa\nEl d\u00eda menos pensado\nThe Wright Verdicts\nLove, Now\nSenior High\nShameless\nThe Twilight Zone\nHeist\nThe Best Times\nAlpha Beta\nMatlock\nDanger of Her\nJenny\nThe Ancient Magus' Bride\n"
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for getting today's trending movies\nurl = \"https://api.themoviedb.org/3/trending/movie/day\"\n\n# Set the authorization token in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the HTTP GET request to the API\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the movie ID of the most trending movie\n    movie_id = data['results'][0]['id']\n    \n    # Define the API url for getting the credits of the movie\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    \n    # Make the HTTP GET request to the credits API\n    credits_response = requests.get(credits_url, headers=headers)\n    \n    if credits_response.status_code == 200:\n        # Parse the credits JSON response\n        credits_data = credits_response.json()\n        \n        # Get the director of the movie\n        for crew_member in credits_data['crew']:\n            if crew_member['job'] == 'Director':\n                director_name = crew_member['name']\n                break\n        \n        print(f\"The director of today's most trending movie is: {director_name}\")\n\n    else:\n        print(f\"Error in getting movie credits. Status code: {credits_response.status_code}\")\n\nelse:\n    print(f\"Error in getting trending movies data. Status code: {response.status_code}\")\n```",
        "usage": [
            474,
            10011,
            10485
        ],
        "executed": "The director of today's most trending movie is: Juan Carlos Fresnadillo\n"
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for the query\nparams = {\n    \"query\": \"Twilight\",  # Search for the movie \"Twilight\"\n    \"include_adult\": False,  # Exclude adult content\n    \"region\": \"US\",  # Filter by release region\n    \"year\": 2008  # Year the movie was released\n}\n\n# Make the GET request to search for the movie \"Twilight\"\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the movie_id of the first result\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Define the API url to get the credits of the movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make the GET request to get the credits of the movie\ncredits_response = requests.get(credits_url, headers=headers)\n\n# Get the crew information from the credits response\ncrew = credits_response.json()[\"crew\"]\n\n# Find the director in the crew list\ndirector = next((person[\"name\"] for person in crew if person[\"job\"] == \"Director\"), None)\n\nprint(\"The director of the movie 'Twilight' is:\", director)\n```",
        "usage": [
            276,
            8848,
            9124
        ],
        "executed": "The director of the movie 'Twilight' is: Catherine Hardwicke\n"
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/tv/65600/season/1/episode/2/images\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Extract the path of the image for the second episode of the first season\n    image_path = data.get(\"stills\")[0].get(\"file_path\") if data.get(\"stills\") else \"No image found\"\n    print(\"Image path for the second episode of the first season of the Witcher: \", image_path)\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            337,
            11192,
            11529
        ],
        "executed": "Image path for the second episode of the first season of the Witcher:  /nAzc7ORKhccJ0gMu8yMY2OLhRRo.jpg\n"
    },
    {
        "query": "What is top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "results": "```python\nimport requests\n\n# API endpoint for getting the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Parameters for specifying the page\nparams = {\n    \"page\": 1\n}\n\n# Adding authorization token to headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Fetching data from the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting the top-1 rated movie from the response\ntop_rated_movie = response.json()['results'][0]['title']\n\nprint(\"Top-1 rated movie:\", top_rated_movie)\n```",
        "usage": [
            289,
            8701,
            8990
        ],
        "executed": "Top-1 rated movie: The Shawshank Redemption\n"
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for a movie\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for the search\nparams = {\n    \"query\": \"The Matrix\",\n    \"include_adult\": \"false\"\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to search for the movie\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the movie ID of \"The Matrix\" from the search results\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Define the API url to get the release dates of the movie\nrelease_date_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n\n# Send a GET request to get the release dates of the movie\nrelease_date_response = requests.get(release_date_url, headers=headers)\n\n# Get the release dates information from the response\nrelease_dates = release_date_response.json()[\"results\"]\n\n# Filter out the release date information\nfor result in release_dates:\n    if result[\"iso_3166_1\"] == \"US\":\n        release_date = result[\"release_dates\"][0][\"release_date\"]\n        print(\"The release date of the movie 'The Matrix' in the US is:\", release_date)\n        break\n```",
        "usage": [
            441,
            9080,
            9521
        ],
        "executed": "The release date of the movie 'The Matrix' in the US is: 1999-03-24T00:00:00.000Z\n"
    },
    {
        "query": "Who is the most popular person?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Parameters for the API\nparams = {\n    \"page\": 1\n}\n\n# Calling the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting the most popular person from the response\nif response.status_code == 200:\n    data = response.json()\n    popular_people = data['results']\n    most_popular_person = max(popular_people, key=lambda x: x['popularity'])\n    print(f\"The most popular person is: {most_popular_person['name']} with a popularity score of {most_popular_person['popularity']}\")\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "usage": [
            336,
            9727,
            10063
        ],
        "executed": "The most popular person is: Jason Statham with a popularity score of 377.015\n"
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the person ID of Christopher Nolan\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\ndata = response.json()\nperson_id = data[\"results\"][0][\"id\"]\n\n# Step 2: Get the movie credits of Christopher Nolan\nperson_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(person_credits_url, headers=headers)\ndata = response.json()\n\n# Step 3: Extract movie IDs directed by Christopher Nolan\nmovie_ids = [movie[\"id\"] for movie in data[\"crew\"] if movie[\"job\"] == \"Director\"]\n\n# Step 4: Get the images of movies directed by Christopher Nolan\nimages = []\nfor movie_id in movie_ids:\n    movie_images_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n    response = requests.get(movie_images_url, headers=headers)\n    data = response.json()\n    if \"posters\" in data:\n        images.extend(data[\"posters\"])\n\nprint(images)\n```",
        "usage": [
            430,
            10486,
            10916
        ],
        "executed": "[{'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gEU2QniE6E77NI6lCU6MxlNBvIx.jpg', 'vote_average': 5.728, 'vote_count': 39, 'width': 2000}, {'aspect_ratio': 0.668, 'height': 1124, 'iso_639_1': 'en', 'file_path': '/mS4EvhsrT0SQZOlWrQEzWI5KiUa.jpg', 'vote_average': 6.026, 'vote_count': 33, 'width': 751}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/bzONet3OeCTz5q9WOkGjVpOHMSR.jpg', 'vote_average': 5.638, 'vote_count': 12, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/iawqQdFKI7yTUoSkDNP8gyV3J3r.jpg', 'vote_average': 5.634, 'vote_count': 14, 'width': 2000}, {'aspect_ratio': 0.707, 'height': 2829, 'iso_639_1': 'en', 'file_path': '/fX44bgxKQsS4P4ewb2iotHveEkn.jpg', 'vote_average': 5.588, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/nrSaXF39nDfAAeLKksRCyvSzI2a.jpg', 'vote_average': 5.586, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/1pnigkWWy8W032o9TKDneBa3eVK.jpg', 'vote_average': 5.522, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/9d1sCoMSGJZtghS2X9us1h9u8lW.jpg', 'vote_average': 5.522, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/nCbkOyOMTEwlEV0LtCOvCnwEONA.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cBuvBJMhdZl85v4wRKDmEZ7Qd9B.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4pWbfjzUkusGXAZQoduARaI0qu2.jpg', 'vote_average': 5.394, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'be', 'file_path': '/rPrqBqZLl8m6sUQmZCchqW7IEYo.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/iolc5VLP4PFU0XvjTVRiCb80mUR.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/xbiycuc84TrieEWwkkuH2hoEa9S.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.75, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/8ATtOkzbQ315u5muIlAxtCZESOf.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 750}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/yQvGrMoipbRoddT0ZR8tPoR7NfX.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7uCL4gbdmokTWyeYbJxwBo5pbVT.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/fb9VcK7aCI2z4kH5nXjBKkEUVEu.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/v7Iib57HHgSEI9B7XYRF6qrs11T.jpg', 'vote_average': 5.36, 'vote_count': 27, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/9PTvvflydmTnfvMWMAwMMkV7X2s.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2304, 'iso_639_1': 'en', 'file_path': '/vRJ1ScAJUDeTxuBv5cX45fDD0I0.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1536}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/6KiSSndIMLj1swkpPNq2lYppDVQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.692, 'height': 1228, 'iso_639_1': 'bg', 'file_path': '/omKeIQBr8oiW3MikuoGPQ6z55EG.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 850}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/tYaC23U62BOJRNVIlFGT6iowEwj.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ja', 'file_path': '/rgoNKrN5oEWIpfM6ZSPORbB2NYf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/zDNAeWU0PxKolEX1D8Vn1qWhGjH.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 734}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/jM4VN1IFD2R1ElpqT3T0bt08uJt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 734}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/2mRRFbnMPMSh4ZiRdiAK0q303Nm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 2963, 'iso_639_1': 'he', 'file_path': '/dyUA5G7hmMOlBfa7yzAl0Zolynr.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/uODkRJ68CQN2uiHksyGXNPTYVuN.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/q6KI8ChlkIYYZww8C053cVfPQRo.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'de', 'file_path': '/hHdhfkkzt0Mwec33Ux177Z7CO8w.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/s7r8IkdbFP42sYhHhyPRnySmqCD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/674XbyJKOO7z5ds6ddR6uAmoThU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 951}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/wM0PSFUYHcFLEguYNjn3RDOEKtt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2157, 'iso_639_1': 'en', 'file_path': '/yCKxTlmPNQBoAl5qlHfn0GHMLjV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1439}, {'aspect_ratio': 0.667, 'height': 1242, 'iso_639_1': 'en', 'file_path': '/nvA7SLPXtuI3kG1ViXb5r8v8581.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 828}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/wATQX43h29TojNIbcwLuPg7OPqi.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zrwNvkdYXrgFea41AxhJhIKopov.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2304, 'iso_639_1': 'en', 'file_path': '/jWmRKnYYoIXfsiNuQVr7iB1DE6h.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1536}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/7fEFzWmCy6rV2gDl0uhz9smCQDS.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/vReLRjDV9XPhiOSEW7QWow4DXwf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 790, 'iso_639_1': 'en', 'file_path': '/fZYl4hG1Xve39hqeEN7q6UJsWPF.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 527}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/6ricSDD83BClJsFdGB6x7cM0MFQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2829, 'iso_639_1': 'it', 'file_path': '/fD5OfSm5aMEKlFpYp9jbGP8IxuU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1886}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/mQNr5d0ypstgJ6X0umnaJWoPdH4.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/th5UkDLIa7yyma9UYDAWaIgDh6z.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1667}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/bMKiLh0mES4Uiococ240lbbTGXQ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/fbUwSqYIP0isCiJXey3staY3DNn.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'tr', 'file_path': '/y1TKElkgWOl90iFik3GHlgJdphm.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/9rSeLJx4k1TaIUlPa4gwZK6tBxl.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/mR2OK5aK5kMOdAQYfc5kkOg06Pn.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/pOQfDNjk22UhTrAGwwN8Nwz7cyj.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/h7zAAbQ0rtEteSEQf7HklyizBg5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/j5AiH1Ez0b0RCjI2MTMvSDgkyXP.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1012}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/7HEYmKkuWHya4WTGhkqCjSfokAv.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1013}, {'aspect_ratio': 0.704, 'height': 2840, 'iso_639_1': 'de', 'file_path': '/lckRcubpItGlnO1v60clysNirme.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/eloxVOLxwOCPSzv1MFO2SuJYtrH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/7v5cRygVR8hqiAUP1a9IXdV3NUB.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/3c95G7trDKHahCYKMekCXjeacdh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ka', 'file_path': '/18Whj5cKOeAH01da7PLHDvKC76S.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1104, 'iso_639_1': 'en', 'file_path': '/cA5TGzNpwxhLGeAELmWHB5klcvN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 736}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xrgBLpPMXWXKdyj5r36RVfmkRdb.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/990DWuNkoVgvzu8meLQO1WwTHHQ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/e1pkIN4dPjug8rk75BRVukyIXAn.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/p6wYy2mUsOwi4TalNAk46ft4sVJ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/5qhJeFztZ2N31T7TvG7j6M1sOtj.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1125, 'iso_639_1': 'zh', 'file_path': '/7z0QoRia9Tknxe1R1vz7jwkzUrm.jpg', 'vote_average': 5.18, 'vote_count': 18, 'width': 750}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/8YZZMKVoc05O8mWdwzKMGhtM4m.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 734}, {'aspect_ratio': 0.736, 'height': 1284, 'iso_639_1': 'fr', 'file_path': '/uWZrj6K6kwggb8qdlpko76SRSG7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 945}, {'aspect_ratio': 0.667, 'height': 1124, 'iso_639_1': 'en', 'file_path': '/1ZOWn2VSiRhGdfWW7PdreiUOYuR.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 750}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/sOXOGIAUdlsygIovTGh0YIGeREN.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/jpxJj9mVbDNyG08fbmTyGFvZFNC.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/qvxBKd8GrgPg1W5FDG5nmwpzbb7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/uz0owCMTNBmojwPQcDR6OpdCyL2.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/u6EAEtocvyBbc3vwmwHh569DOTs.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.664, 'height': 1204, 'iso_639_1': 'en', 'file_path': '/90NU5EtPAjs1toYOu2cp4emP1tk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/aQWo0r7dcqrW8OdZ5PjkKdemaXN.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'zh', 'file_path': '/c35Vwd9rmMQfaEJuUrJRF3LZWJX.jpg', 'vote_average': 5.164, 'vote_count': 14, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/cv3tj98DvCW8ba75a9XwDPdiYIt.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 1600, 'iso_639_1': 'es', 'file_path': '/d1QKiYtceF3GDtxvTFXFAqwwah9.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1120}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/zq8j3XRJDVqNhiRMensg2uTkYrd.jpg', 'vote_average': 5.12, 'vote_count': 17, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/2QzyxZlj2HxVWiCjgjORIvjAq8T.jpg', 'vote_average': 5.12, 'vote_count': 17, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'en', 'file_path': '/qDSDtonrb6LfVOJXBbpZJNLjr2L.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 600}, {'aspect_ratio': 0.697, 'height': 1438, 'iso_639_1': 'es', 'file_path': '/9kmFzQjRdEjSpjVQeGlvmHAzaPw.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1003}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/AtOL7JqNBGELgBA87gSHNcfzSD.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/sEgN6vtJTw1CW7hjQp4dMUCxUSh.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1050}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/ija1bykAdfthqxlSl0UHhOBI2YM.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/55JWKCqNTn54016voGvig52ikjb.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6LlCIoqKpyJbKB63cmD4pyByHXQ.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/kfP55zsGaq9xl4CfI1C6TFDmLkZ.jpg', 'vote_average': 5.1, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/3DKszh7Ng0EN0UoTkIT01rb0SYC.jpg', 'vote_average': 5.1, 'vote_count': 13, 'width': 672}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/eS79aflvTbW2f754gCO7NM1j7Ym.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 672}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/rUOaQxFj5aKIgQJnmJRF22qQXrH.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 672}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/cNr99Vx7jIa2VOnxRMAfatt1Ong.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/vm4avyFTQAYT4k3YCXasI2Q0BCz.jpg', 'vote_average': 5.09, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.674, 'height': 800, 'iso_639_1': 'zh', 'file_path': '/x0svdinUPWHwI14CtIdeB5KXfiy.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 539}, {'aspect_ratio': 0.674, 'height': 800, 'iso_639_1': 'zh', 'file_path': '/zLgW4iKqUXxuTBMk5DmOfhPf0zw.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 539}, {'aspect_ratio': 0.701, 'height': 960, 'iso_639_1': 'zh', 'file_path': '/mBZgrHMZ1VQqpuhHZU8fsN03H8u.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 673}, {'aspect_ratio': 0.667, 'height': 1800, 'iso_639_1': 'zh', 'file_path': '/7I0sjfbWJ5r8e8M9jWf7WcN256j.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/zQsvYbHaMjBRfnPVxZdtbPyyFT8.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cn', 'file_path': '/ulLGFg2QUAhKvkgClIJp2uxuYiA.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.707, 'height': 1698, 'iso_639_1': 'ja', 'file_path': '/vA133yh9mW7Kt82x3f6dnirLd73.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'de', 'file_path': '/jb2lnJrWkRhDy7C3yb129YQIY6i.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/9W7qYnmi1W3648YXVJvpjk82MUf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/hbGNJb88HjoQurnRYYWg45YBFtz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1667}, {'aspect_ratio': 0.702, 'height': 1500, 'iso_639_1': 'ja', 'file_path': '/v6oNcydMvHwV8sxNIF8eivbw8tK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1053}, {'aspect_ratio': 0.71, 'height': 1408, 'iso_639_1': 'cn', 'file_path': '/eX4Al8LtAmuw5RRHRLuDxs2Kn22.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 2024, 'iso_639_1': 'ro', 'file_path': '/mgt3D3a51efPMqGOgwH7AaF5m67.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1417}, {'aspect_ratio': 0.699, 'height': 2841, 'iso_639_1': 'en', 'file_path': '/hDO9K7NLSUHTis7QDeEdH64KEJ2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1986}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xdAzr43DN4BNMUomn8kgMsGUc7Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/q4emCJmjNomEE2pVGgqr3nDEIzI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2286, 'iso_639_1': 'ko', 'file_path': '/evoEi8SBSvIIEveM3V6nCJ6vKj8.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1524}, {'aspect_ratio': 0.693, 'height': 1108, 'iso_639_1': 'el', 'file_path': '/o0xb7oUWC8K516QdYISRg57fFJv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 768}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'be', 'file_path': '/104v27KQPR4FWQJtu25WEVIKB9S.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/goxCjppjJpJhhAYgzPTTBrqbfHi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 2287, 'iso_639_1': 'ko', 'file_path': '/Ap70Jv6nsJ3RpNrK66CfcicBHTA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1602}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/1KTTpt22QCdYkPmW7qcMsrEOA1D.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 734}, {'aspect_ratio': 0.7, 'height': 1048, 'iso_639_1': 'ko', 'file_path': '/bfMkoXy8d5HGBWPxOvCPRjtRZMF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 734}, {'aspect_ratio': 0.75, 'height': 1600, 'iso_639_1': 'fr', 'file_path': '/yFWUnIdLuxEB00NXQDSjuzgH0fO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pGZpvsjeJ1F5DWBhTe5h2cjIjR9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/6qdusBmmCndnYs1jkf7BSUrIoBr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/7jOjfOlM9hsZS6B930Oj10X56ib.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/gTlZAMmuMjN2Ia0M4pxU2C0ZWxq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 1408, 'iso_639_1': 'cn', 'file_path': '/fkb2SwmbXhjTCfqU82XmpH9VRAr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cn', 'file_path': '/fPM9jZHZAIo0JI4iMLpm5pC4OLw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/zioKUjPlD1aAg0jSdlZY4LNuJgP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'hr', 'file_path': '/lGdLsK976sbGRppdSHbQ5PbAMnb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.699, 'height': 2048, 'iso_639_1': 'tr', 'file_path': '/1T0YWRHgxkRXLh78RgPBH7yGHqU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1432}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'tr', 'file_path': '/gdo6oKHUdUiNLscrXzx3LZ6QcWw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 648}, {'aspect_ratio': 0.676, 'height': 888, 'iso_639_1': 'th', 'file_path': '/gx36DX1RLixLu6sBWgmdiDr7Rbb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.676, 'height': 947, 'iso_639_1': 'th', 'file_path': '/aDJlk2mPEo0weBzJ1eikAqZeHwS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.676, 'height': 947, 'iso_639_1': 'th', 'file_path': '/6L8Eo6ZgBKz63ar5lB6esutDmCU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/rct7HdAfPyvSqbr4H86b6z10tCE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1622, 'iso_639_1': 'en', 'file_path': '/lpkCFuoPC2m1tIHzkpcx6tO2JSa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/WXwTgRstrSe83GDSJvJLhGsMia.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 667}, {'aspect_ratio': 0.704, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/jT6hhix5X8hFgFUrQBy91QwFSlE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1056}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/ogn2abMeIel1UlLm8APU2U69Ydt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/3CQX7KAtGFVfI4PiPRD93Uf3xzX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oS4PsbsKxSP16qYj3RTSYO46OtB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/75VHAQoz8oOFISA52Ojbvpkcml9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/15SGNP9JUGCdKzResOuK07rmOxn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2157, 'iso_639_1': 'en', 'file_path': '/rfgabI22dfjG30GwD87pZ3v1pJQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1439}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/u2PufavhWhs598P66oYfmGSj6A4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/78SsIp2vSCwsXWoOMTcIydMl0ur.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cheLvF0GpLQsmC56L52t2hD4TMO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/w09DcbYm6YWno1H3OgCxUuNp2QL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7FmbPtk8yYu93HeOYQuiqKg81GO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/wvvpXMNB1ocUF8ef5ENhOhcvvmc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/nfDwAaCRwj5BLnkCitv0mgfjZAr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2880, 'iso_639_1': None, 'file_path': '/8CQOK1RyhUAZGUfiea0aAw3nCub.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.717, 'height': 2788, 'iso_639_1': None, 'file_path': '/2khhc03aoTG8nHtGvehEqvcFTDQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2880, 'iso_639_1': None, 'file_path': '/9DydKQbpAgsksnG3BvuVlV28VIs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/fUlEUhtWOuaojBaYhBXdpgBG3VJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/v1M9zqBq3JAF1Et6ltN2d2i1ZS0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uluMeKfYFVvfZlmHgFBXqbnHXE2.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 906, 'iso_639_1': 'en', 'file_path': '/eyDMENQZYq0APm8AypQT0DNOrwa.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 612}, {'aspect_ratio': 0.711, 'height': 1688, 'iso_639_1': 'fr', 'file_path': '/fTWzRx8TKAxj8EaNs0wZ17kiqCW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/yuNs09hvpHVU1cBTCAk9zxsL2oW.jpg', 'vote_average': 5.576, 'vote_count': 13, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/nWtySDlffTfwAa0rSfq61o33ZXV.jpg', 'vote_average': 5.456, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/uprP8rtOgMYJQ2h3ldDFvGsaBgH.jpg', 'vote_average': 5.394, 'vote_count': 10, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/3jFQqn81xdYqNquQZtsu8PJBPiB.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/nzlv62aC0octS5AklAiWpXLX9Z0.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2234, 'iso_639_1': 'uk', 'file_path': '/j0W26SOwnorl6Kga9A90wCypjcr.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1490}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/adRNs1fR1ggpsUQejMvzRiyu7F2.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/rO9d5ES2v5h2xDDZzVWUfQwdZ42.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.707, 'height': 2000, 'iso_639_1': 'ko', 'file_path': '/vqxdADPdy0ZVJr8dMB3mh6C5Vsv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1414}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/tBS1gqYTGS31sM9vAGc5fKCAJTA.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/neHrQLVfT3KPqvv30pNPyRb6chQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/wqG9YXPBpDbC4NpV1Xc42BOm2hO.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/uSae85DR1D4uKknQIsHbuqO1RgN.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.671, 'height': 1414, 'iso_639_1': 'ko', 'file_path': '/pXLnKcUzbUZI8OwkznA8te5dOSt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 949}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/7leBWM27Q0TUnvmhw6WnFNgGn4G.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/fKTPH2WvH8nHTXeBYBVhawtRqtR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'ru', 'file_path': '/xILX5k6PvSeCQ0NFVjKQJKkiJr2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/iQmjFjtM4bf85KY3ToZTjJPNfx0.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.659, 'height': 1117, 'iso_639_1': 'en', 'file_path': '/exU1uUwNuF7EXy6G9nKVUJfGG4l.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 736}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/psE5eio91dVL1k5nTwPUNLp7Kuy.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2289, 'iso_639_1': 'uk', 'file_path': '/dH4wSoQx5Pn5Ig3lPediWEJvzzl.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1526}, {'aspect_ratio': 0.671, 'height': 1103, 'iso_639_1': 'ko', 'file_path': '/iWr4SwGJTF9Pamoeaan8tLgp0r5.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 740}, {'aspect_ratio': 0.671, 'height': 2828, 'iso_639_1': 'ko', 'file_path': '/ogpwO0trLk4Fc4eqgy5S4ShH3oJ.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1897}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/AoLzLn8Z5akd1zHfBcrIiF2MdPw.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1439, 'iso_639_1': 'uk', 'file_path': '/6BHA8tT4d4M5bpj45VCmehpaKyV.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 959}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/uCgVdMeAaGKNgXjkRoQEHuOOn6x.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1104, 'iso_639_1': 'es', 'file_path': '/5Pe6iiwZyExtIzeuk2Q5LNxLuHO.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 736}, {'aspect_ratio': 0.667, 'height': 1758, 'iso_639_1': 'uk', 'file_path': '/3PcEBIneICSp2Bct3eVDUztPkV6.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1172}, {'aspect_ratio': 0.708, 'height': 777, 'iso_639_1': 'ja', 'file_path': '/6ONkGH38ajR7uFvg5WX8SbkbfVP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'bg', 'file_path': '/d2dbk2s4Nnlw5FxJ4f0mues6kp3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/dCCsDcMeJFVOUN0mt9QYGHZDquq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oAvAkTk0cta7o1hB1WlmUYV8txT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/jEiaUHh062AlNNDdIIB6W7DMb1V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cNKT3GNCndTIHlzhEU8Ga6kMNEj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.703, 'height': 2268, 'iso_639_1': 'hu', 'file_path': '/orak5VWu5CPaty1XCzdYWnxtEEd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1594}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ytzQijCzGG8KDzHYri9nc0jyJdh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/nkmokS8g0GHjxdhmRNfYueYvUN5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/f3AKnpK3aFPwnjHTSRkviTkuobr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1800, 'iso_639_1': 'tr', 'file_path': '/31yNVJl968krAHy3f5nFB6kLl7i.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'de', 'file_path': '/qaXfDrZCdd3wix2XYor5HDDpFrT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'ru', 'file_path': '/tDDUPuvdCLjx4hwRYPHdZxt2uB4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'fr', 'file_path': '/2zjoduvmZzBWRPYti8pdBxr4tSt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/tLFV34gBCjuc55xFwFL7zyoCClK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pFj339q3hoXg0NYbo7BvnmdBRhK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.708, 'height': 2000, 'iso_639_1': 'uk', 'file_path': '/5ZbII3voM1KrQYgM76ZnnkBHXB4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1416}, {'aspect_ratio': 0.75, 'height': 1080, 'iso_639_1': 'fr', 'file_path': '/iJeqcL4vlz8u1emUeZzcBBdaLoy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 810}, {'aspect_ratio': 0.675, 'height': 1080, 'iso_639_1': 'ko', 'file_path': '/gaky2GoDZHmt1p3HwPYiiS7SOeC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 729}, {'aspect_ratio': 0.7, 'height': 750, 'iso_639_1': 'ko', 'file_path': '/60SUpn8uryJRorPOOwXYLfwNCDV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 525}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/bzu9nTQPO690uSYOOy7hXjK1vn5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ru', 'file_path': '/k34v0hBeMdVl41w47QKqZL3UH0Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/e8aNU97T9zggNstlyc922c1qOPA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oYuLEt3zVCKq57qu2F8dT7NIa6f.jpg', 'vote_average': 5.52, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/aBGVsKeDn5gtegkyajPGBHWev25.jpg', 'vote_average': 5.518, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'zh', 'file_path': '/mQw9lsrMGlWDHdigLoGvCqX4tz6.jpg', 'vote_average': 5.512, 'vote_count': 24, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/edv5CZvWj09upOsy2Y6IwDhK8bt.jpg', 'vote_average': 5.46, 'vote_count': 23, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/tXQvtRWfkUUnWJAn2tN3jERIUG.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ljsZTbVsrQSqZgWeep2B1QiDKuh.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lQEjWasu07JbQHdfFI5VnEUfId2.jpg', 'vote_average': 5.414, 'vote_count': 32, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/9e3Dz7aCANy5aRUQF745IlNloJ1.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': 'uk', 'file_path': '/r84x4x93LbZ2gozISTBYVeq0gLZ.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1067}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/xn0Kcg4e6p0mLxVS3nAWhNmW2Ni.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8IB2e4r4oVhHnANbnm7O3Tj6tF8.jpg', 'vote_average': 5.342, 'vote_count': 15, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xlaY2zyzMfkhk0HSC5VUwzoZPU1.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/5QHWgqaBxZI1eM5e3YhyKzY5o3z.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/w3tea0HZDYVwQVyjrWBoF5x0Ofs.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'de', 'file_path': '/t5WUY5ZSxwVIVExaMZmmIj88BKA.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cs', 'file_path': '/bgIt92V3IDysoAIcEfOo2ZK9PEv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'ja', 'file_path': '/qzb0slJerd5bQgJxteJ5oAmfp09.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.707, 'height': 1525, 'iso_639_1': 'bg', 'file_path': '/rxHM1Cyn0cpgF7l9DVA2m3SS5Zk.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1078}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'pl', 'file_path': '/aSY6QhgEeUYky0TMfAXjvRJj5bL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 720}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ta', 'file_path': '/paNKUnfHDVDWh4hifULoOdRVzP0.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1981, 'iso_639_1': 'he', 'file_path': '/2aQZWpZKHECecGkFKLcuWa0Cmus.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1321}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/84TynUqXvXJnYiQr8uYcdbTDDWY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/hEYPJruVOc3VBkVbEUbyVTZ2AXd.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/xMQpKxZzJog5DVMCjSTsD99AziI.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/ubj7fEmtNqxwtZtMk6wAIc0SCFJ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/frq4ygwcIMusECNv9rPBrvJwyxG.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2856, 'iso_639_1': 'ko', 'file_path': '/zTgjeblxSLSvomt6F6UYtpiD4n7.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1904}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/9Pfuay9ztGmoS3bt8LW2mfgGjHs.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/mJfTycNg8PxjvxzpnKnzAAG7RIP.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/2CkUNEqIRGAwOC5jiKcQgKFjw87.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9gk7adHYeDvHkCSEqAvQNLV5Uge.jpg', 'vote_average': 5.296, 'vote_count': 20, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2400, 'iso_639_1': 'fr', 'file_path': '/aej3LRUga5rhgkmRP6XMFw3ejbl.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 1600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gqgwNjwjSqGkOqkE2rppogenu4v.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/7SivRwOLuA6DR09zNJ9JIo14GyX.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/nPO8aNT4uGtDAY0bZZZACfP66Lo.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ja', 'file_path': '/jEsp30qRAFPAWMYFGWwK7f9ObST.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/4Kc9ij5DeAwexVwVoT0fGHWK5WM.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 1231, 'iso_639_1': 'ko', 'file_path': '/jSm8mzp7sucgL8NwINIoAmx4dS5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 826}, {'aspect_ratio': 0.671, 'height': 1749, 'iso_639_1': 'ko', 'file_path': '/anJ2PN3jfjv6nocW41Ikgqygcc6.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1173}, {'aspect_ratio': 0.671, 'height': 1231, 'iso_639_1': 'ko', 'file_path': '/dp7n2vb8bmhI2f3Fa0mkQnZnHyO.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 826}, {'aspect_ratio': 0.671, 'height': 2835, 'iso_639_1': 'ko', 'file_path': '/dVhP5LObWUYWwcHKufcdUabApII.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1902}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'hu', 'file_path': '/dUjeL2HBcOpQKATeu6gltO1CKVc.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 1971, 'iso_639_1': 'pt', 'file_path': '/ms1bJvwa4BJycBakQ7afcedGlwY.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1314}, {'aspect_ratio': 0.667, 'height': 1337, 'iso_639_1': 'pt', 'file_path': '/lFrnL8dxEOp6qVj54vyFLi0Qyw.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 892}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/vXyyn578tC5TonEUNmn49mwm4A0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/1G1DR6LxKVNKIAH1oPjp04EIsxr.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/bPYjum1fH24yU2f1exsq8nuHEG0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.698, 'height': 2835, 'iso_639_1': 'ko', 'file_path': '/4rHfaC6dthDRPO8SsrSTMgAgkdW.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1979}, {'aspect_ratio': 0.698, 'height': 2835, 'iso_639_1': 'ko', 'file_path': '/mKZVtEfdYqcCC8FnYnwO3rsgn2q.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1979}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'ru', 'file_path': '/b2jBc5P7vwnfBbLm8ZziNslFb9d.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/xgPGDEKkBrXhPaNmwIlf8e2RCMk.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/k3UoZhRHg6h2XYzwNAJJvGC2yev.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/lqkIBuRyD9mFF5tQ0gKZLfBY54a.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1000, 'iso_639_1': 'zh', 'file_path': '/agvve2rnVhH5Ybuovsqui2HkxC2.jpg', 'vote_average': 5.22, 'vote_count': 13, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/zt5kihG59UaOYyGcXnBz3HwQxXl.jpg', 'vote_average': 5.212, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/fL4CcbigFi4P0Gx1X76vbRjgg6c.jpg', 'vote_average': 5.198, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/1UgqxtiJNxRzPeqs9pztWBUJd7k.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eKkbXuGZ68YOkTs2sz8OYu7Y3hj.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/4VWZyyUTuOZGcamFWfdo9EccuQJ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/iViFPY2O3rSbK84zsw2kEUtmxVP.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/o1SB1gHCmEEURs8P6dfmSC9O3iu.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/67RLqAViz6v4ez5oTy01eVH57VC.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 2859, 'iso_639_1': 'de', 'file_path': '/eARwxzrwvayasGerlMgRH2rtILs.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/uvvH40CJ38pgqA97q2yurGVyycX.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.705, 'height': 780, 'iso_639_1': 'ja', 'file_path': '/llnw1ytJyplbttau3PWYo6P57Ma.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 550}, {'aspect_ratio': 0.67, 'height': 896, 'iso_639_1': 'th', 'file_path': '/uI1gJI93hpbP0L1OqjUQNwKHbq7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/ic8sEH971i01e9qs29795s9Sjr0.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 587}, {'aspect_ratio': 0.671, 'height': 1748, 'iso_639_1': 'ko', 'file_path': '/fB1AYIHXtZFp30khynZAx8pwCb2.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1173}, {'aspect_ratio': 0.667, 'height': 1875, 'iso_639_1': None, 'file_path': '/pMHZ5BPlB2FJWYVh8kpwPDMepUy.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1250}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/ida4t24BmQcVS3FUL4TY4uixoaU.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/A62DYEWb3dgRA2o4NNtuHciFJJi.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1748, 'iso_639_1': 'ko', 'file_path': '/d9ob4cNkH5vmyPppcrYIpIo6x8m.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1165}, {'aspect_ratio': 0.667, 'height': 2003, 'iso_639_1': 'es', 'file_path': '/iunQDLut0NRyEfsLeisnRDxzFEA.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1336}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'vi', 'file_path': '/eBtqGWtR5KUiNl6OXHLR3ri6nVm.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/efC6it8M158f76ym8BA7cHTlcBW.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'en', 'file_path': '/cHRXb7TUnfntX4XdGF63GNL3U4E.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iQUateaYbt0Zbjrl8gqaGlT56iG.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.672, 'height': 1041, 'iso_639_1': 'en', 'file_path': '/rq0UeJr9eoaAeEllw6WheF1HD9R.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 700}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/oiJOvzOcTi8g70d4bhaRVLEcQA8.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/g1z0zLD8tW94omZdM1NDg9Cb0L5.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/siwBgxiw39ox1eQ2GsTu49u7HNF.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1266, 'iso_639_1': 'uk', 'file_path': '/w7pIMKIKrkuzCAWCoUcV6H48krv.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 844}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/bmK3XsNFgAv1RfEV681KLLIKbbV.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/tLeqhlAKQicrzUoWqbTJH6Ac7Z0.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 675}, {'aspect_ratio': 0.707, 'height': 2481, 'iso_639_1': 'en', 'file_path': '/fJgkMpctcXdDo1aQz6LZ8mwuws8.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1754}, {'aspect_ratio': 0.664, 'height': 1247, 'iso_639_1': 'en', 'file_path': '/wGF3iLAkjDLvF2Ws1kcQI5VWGdv.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 828}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/kg03rABx8jwHNLnUhbTbhTGkoVH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/53rhALkaIDqkft2KRZO9ZaaRrB9.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1024, 'iso_639_1': 'en', 'file_path': '/4i1I0cvwYhUTVbU5Qe6HbD1audF.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 682}, {'aspect_ratio': 0.667, 'height': 2400, 'iso_639_1': 'en', 'file_path': '/3xxd3Ntf6dZfTQOG2edgUPx0CzD.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 1600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uoeYeDKCaxcjgZdal4r5UcQrSYD.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/pg4Q5CGD06jdkQQTi3Yz2TSzrU6.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/lCwO4czSKzL1LP4h85T4b8C0UWD.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'cn', 'file_path': '/w85Z9pG9qMtw6m9QuE6PvKygEh1.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1068, 'iso_639_1': 'en', 'file_path': '/jJKRz3f34UkncoZB7DdHJgNZFI0.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 712}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/tVmoPRtN7mMlTJLlhEZDOzqILpp.jpg', 'vote_average': 5.022, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/nJnRy3nywUceNwNZ3spYuIecIBG.jpg', 'vote_average': 5.022, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9egFcRMV4Z3ZdcaJAYoxmnbqZE7.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/nVTLDH8DCcCn4r4hixAYo6ESjyI.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hJmGoCN8DjH0yrw7XsLRFCL9VBJ.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xymM5aW6MDcH5AR9I3CamSegJd6.jpg', 'vote_average': 4.996, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/qZ0kJnOwX6Qo55vIYjicbtl8WlZ.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9nkrC15drTBc2ZWGg7T2x20MrEj.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/o8zlCwctVfRFHQYItVQgmf3mllz.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cfxBdqeRyuBnKa2axipmAFkQJPj.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/hyfpaJO6tSIHZNd9F9qoe9whJBA.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8S7couVqr7g4L48HQ7XD3jZkg5y.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/n9v7TUq3BrGlZRnGmdKVT5PDarg.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/klh1rwo3jpdvdRi2GVygmSoxWy1.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8bxMHkuEzRpIC1YeVhWJKBnj5qq.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bm1XEWLZfCZQEj77SlPcG3ZQaxd.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2963, 'iso_639_1': 'en', 'file_path': '/aC3kqu6Lqw8Rpg9c3spTTGvgOim.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/l9uiKYEmdd4cKFExymkDVeos1ED.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aQZOoAGDz7StBQVEA6hDiUGMMXA.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/p5NyT6SX3I6rjArOoxXl9U9fATf.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7futGyUOW7x0yGCHyLZvkciEeAB.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9Q7LAAkiLcgk5ohjlQPS0ocmWCe.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/d7nO6ezrtx9mkJIoaWN4QyFoloa.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/7l7GUXc4492LdNfusC3gSUKjSzk.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eM2Y0RN3mUwp40Nm9I22Slgzl4c.jpg', 'vote_average': 4.898, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oV5yEdlu1PodRNTyp8d2nvk2qOy.jpg', 'vote_average': 4.898, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1543, 'iso_639_1': 'zh', 'file_path': '/mVbiYFaGfi0YyYvQmUaObFzuvMj.jpg', 'vote_average': 4.714, 'vote_count': 16, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/jc45pxTMTuOlBilSItOejMAMH34.jpg', 'vote_average': 4.6, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1543, 'iso_639_1': 'zh', 'file_path': '/aGVZkgQVPFLAu2aVc5iwOywnskk.jpg', 'vote_average': 4.576, 'vote_count': 14, 'width': 1080}, {'aspect_ratio': 0.7, 'height': 1543, 'iso_639_1': 'zh', 'file_path': '/bseL9xvgcpp3KnYswS1rWmLPzJy.jpg', 'vote_average': 4.576, 'vote_count': 14, 'width': 1080}, {'aspect_ratio': 0.711, 'height': 1125, 'iso_639_1': 'zh', 'file_path': '/y242ckW8B10H24DrzpBAo5llXtp.jpg', 'vote_average': 4.552, 'vote_count': 12, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/jfnbkogB7iimhKYAcJDGsUHaW1b.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/3kB8ncO7iehDNQ2ERNcRnZCWiN3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/l46BsZPZ49J8oQZcOyP7pdlXkjs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/tHegx9JnXUHvIyViqZI2J9NJ2l9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/3VAhy6bMPqwaj13rzdonbDRQm5s.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/tokT0stOvqBigBpimusd4zmheI6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/9LohPHzsuILo2NUrf8nXudEiUcX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/2iTpJJlMgyPsprrovf9FTFjTa4g.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.671, 'height': 875, 'iso_639_1': 'ko', 'file_path': '/6FE1uNqLmnjRX2W350nSO4drfuR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 587}, {'aspect_ratio': 0.706, 'height': 1000, 'iso_639_1': 'bg', 'file_path': '/dRNOQGwSZ35ByhRmKSkGMiW07Fd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 706}, {'aspect_ratio': 0.705, 'height': 1000, 'iso_639_1': 'bg', 'file_path': '/yJ2YdBfpwzrn0As12noouKt98BE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 705}, {'aspect_ratio': 0.693, 'height': 800, 'iso_639_1': 'el', 'file_path': '/ojCYOPJNUPGs9ZRrOkG08OXBQ9o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 554}, {'aspect_ratio': 0.711, 'height': 1125, 'iso_639_1': 'cn', 'file_path': '/eQmdFJJiTeFQCLMjf1gbi6euc3v.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.657, 'height': 1218, 'iso_639_1': 'cn', 'file_path': '/ssKmJjbt0JfXTFkSWcQ8t8o3GQL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.662, 'height': 1208, 'iso_639_1': 'cn', 'file_path': '/yw4pZVzVUKg5bjYUDHwXf5vHVvT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.66, 'height': 1212, 'iso_639_1': 'cn', 'file_path': '/bxccL5ak0yf26rBEdxGxKQQgQfs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.657, 'height': 1218, 'iso_639_1': 'cn', 'file_path': '/xvuafWsKv7QIzf9kqyQpnWEadZC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.697, 'height': 1200, 'iso_639_1': 'mo', 'file_path': '/RMG2IJAXRGYh1kT0r5tppM2v7P.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 836}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/wyMil0WQy0JhPVpWVfC6rRhKpTi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/qdqBcjf6hkimo5CvIToOVWweW5O.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1523, 'iso_639_1': None, 'file_path': '/8eWOfiFdhuW1Q4JiBA1qN9xa4DD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/z9iTcVx1SEAWjBFj36gSldWyGNz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/jkEx6jNxNjv0CFEJEyCpqfjXrOE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'hr', 'file_path': '/c28DpQIVrHX2py2RHM6S5pr6Wnd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'ru', 'file_path': '/qUcXimqo6p55r5D7gdYvKBeOMxB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/hzxHC3Q65MgpKsGxWKIT6I8wnxG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'pt', 'file_path': '/idHNmmHN7HRleTjwleWdMgU9IyC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/efvcvRgOAZgFC2hrPUa6YqrE1KG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.714, 'height': 1400, 'iso_639_1': 'pl', 'file_path': '/P4iP4Vgynjux22hH66oqDnrtWG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1868, 'iso_639_1': 'pl', 'file_path': '/rT8Qs7D4JLJYYy6gnD4hzZZLp3o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1260}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/gVhGjY9k7mUvsLn0ea2obchJXgk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': None, 'file_path': '/tKBvfN5zs7RDGEPvbLue6LZfcIy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 1524, 'iso_639_1': 'pt', 'file_path': '/b1DvgHXpVyuIEECJ5tM7cK1ydUK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1016}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/A2QSkPxjcMj4apEHO6Sz7aUCmUu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/ew7MmtIkLjhkYFKtN8dwKBBMzd0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/5MXQAlCa2npFrIbB7OjoquD4MG6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/jXE9uOtbE1BhnPgk5pioQ6aGEFy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/6DCq0lVZElOohBBYfUdLnc2wYmX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/tSHO3YQ6bdivbI5hLxuSgrPxbNR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/zxvAAPcJoNklMtM2XbgacvuGlel.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.665, 'height': 1245, 'iso_639_1': 'en', 'file_path': '/ny5ggIvfGixGZfn8nR4IzSROcGK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'fa', 'file_path': '/h7kgZg7Bk3fCmGkOD6vd9qoqdjC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/qJ2tW6WMUDux911r6m7haRef0WH.jpg', 'vote_average': 5.504, 'vote_count': 48, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/pyNXnq8QBWoK3b37RS6C3axwUOy.jpg', 'vote_average': 5.708, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/8aQ048h92EvpPME4HsgEN4oJIxu.jpg', 'vote_average': 5.652, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/8QDQExnfNFOtabLDKqfDQuHDsIg.jpg', 'vote_average': 5.456, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1863, 'iso_639_1': 'en', 'file_path': '/2Pf0Dtw6P9CWshK6GYVXmmq9NFS.jpg', 'vote_average': 5.408, 'vote_count': 24, 'width': 1242}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xQPgyZOBhaz1GdCQIPf5A5VeFzO.jpg', 'vote_average': 5.394, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/hAf98uHIXMFzqNN5LX1vnouCShr.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/tSIH3DTA4oFQDhPaJgHxxQZoqHh.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/iWXaUWpWLdB4tu0mlVElTKboPgD.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/6pQMQQrnRWm2zweL5vWyyMHvAa6.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1038}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cs', 'file_path': '/zGfUVhyIhnCb44VKiPiw7p7pdI4.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/31ASyBd8PV0GtxnhvyL4JEAB87v.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2841, 'iso_639_1': 'ja', 'file_path': '/nftQJb9550PtYFXhmTs7XiN0QhR.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1894}, {'aspect_ratio': 0.667, 'height': 1338, 'iso_639_1': 'pt', 'file_path': '/iGZX91hIqM9Uu0KGhd4MUaJ0Rtm.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 892}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ja', 'file_path': '/j2aDrirI121LOg82NlmkjQk8a04.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/3KAtr9OX8Bq2FAvZtrjYcdUuBYp.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/wzJZ6tLRMwhStehrcjSyiVGnn3R.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.676, 'height': 1398, 'iso_639_1': 'uk', 'file_path': '/8W0SjK3gNHG4cD2pZhcL4Rvgkc8.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 945}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/7IPCEr7ifdH5CtU97QG7XgAAtOp.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/lch0ILTsm9uFqowVwVmIeRsMcdL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.708, 'height': 1028, 'iso_639_1': 'bg', 'file_path': '/m3N6ejIhoD160vgsOfRpBMguADg.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 728}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'pt', 'file_path': '/4HkwsmXp3uzcrNIPlNEYo3hMbL8.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'pt', 'file_path': '/pGq8oYx466sSukN3LUv0httsxQa.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/fCVD6ZPR7XyxsXZPJWOIp2VgF32.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/1fCoidUsB2xGzbAJr502Hm7Y2Yg.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/eMaH8xS0vXae1jm1Ry0S3yRBEhM.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'it', 'file_path': '/qIhsgno1mjbzUbs4H6DaRjhskAR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1500}, {'aspect_ratio': 0.699, 'height': 2841, 'iso_639_1': 'fr', 'file_path': '/pdLAyRqMEnL6pzkVgYwMS0a3fEm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1986}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/dxWaYQtgpLbycqUpHzkqqYkT5I3.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'vi', 'file_path': '/7EfSqviKvXwbiGhUjHyUBGVdoiW.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gHc2zbaIdc8l2e3aGCiIThgOQiz.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/wsOr8j0xoUwDfcY7k815rEJXgr1.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bIqPWFTrB15fna9010pLGfTiPuL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/uOIdtyKs6Jk0kSnMRQsWpxBnGcC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'vi', 'file_path': '/AabbWDWAwtxHxTJV3v8C9e67E2p.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/9ICUbdveP56jRoMMVkXSOr3ceyV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eP5NL7ZlGoW9tE9qnCdHpOLH1Ke.jpg', 'vote_average': 5.286, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/1PEFfYM4PV80dDqqO7jkCBdjbZa.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/sqj3UE4Rahv2NYFaxXYvXzqUz5L.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/vGYJRor3pCyjbaCpJKC39MpJhIT.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'tr', 'file_path': '/ggax1nyhiGIwbq1Ynk0otH2sD6.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/j10MzKeRM0LrfVgD6tHiO3OVOqU.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/uruzphNWfIo0MxygPDQ5dvlgEQh.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'en', 'file_path': '/5GTnnwpF1aj2kc91IogJHSn229K.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 960}, {'aspect_ratio': 0.675, 'height': 1333, 'iso_639_1': 'en', 'file_path': '/rqoWYzCuNdQewVfKw6H8dFfg4dd.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 900}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/5JSt5BraClSv0XgvDeTYM1FsFjG.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1300, 'iso_639_1': 'en', 'file_path': '/dxabgTYgwysyXP25lgc6L70IJJj.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 867}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/f6dNinWX8rBM79JXKcShkfSh2oA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1077}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/vLFCrzI3V4kbze877tP1H7TqppL.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/A6LnuOLkxOsi9xicfzNege4fjWA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/i9D9jRDaPKM9GpmJdy0a2yDO0B3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/shTcPSqtnQqddboWe5Mw7WAYxQh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 951}, {'aspect_ratio': 0.667, 'height': 1443, 'iso_639_1': 'en', 'file_path': '/d031gvt75HMZq9LxcMG381Hy9ko.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 962}, {'aspect_ratio': 0.666, 'height': 1001, 'iso_639_1': 'en', 'file_path': '/xynOH3rrt2X4hSe1YQgYAkBXfy.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 667}, {'aspect_ratio': 0.668, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/25cE7rTmSWVoRbBWTqIHAcvCtlK.jpg', 'vote_average': 5.244, 'vote_count': 21, 'width': 750}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/r9BQs8VaMziqG2pVD7mcS3ORCWd.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/pKKvCaL1TPTVtbI6EeliyND3api.jpg', 'vote_average': 5.206, 'vote_count': 26, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/z4XwvnDZSm40PCdg9vFJmo0W9ri.jpg', 'vote_average': 5.198, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/30bVZPX7ZRkoOhh7hCXAoDomDgQ.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1400, 'iso_639_1': 'hu', 'file_path': '/yfY6QdlQ6QQczjUaazFdKTVrxDr.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 933}, {'aspect_ratio': 0.7, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/bqFQKVRAs4rVRBiiHDUHWJIbzTk.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1038}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cFfhGHjxv7sWjXS4uABHJi9mvzW.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1013}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/c94GEWkz12pYfg9fO1weiN1ibU4.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/1QF5OFkYCOMmCCMSr7vC5A6DE5s.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/f4KUne3zM29fIq2Nnyn4e0j34mt.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/yjwJM3VcItwvkEDW6GklMrQNBhU.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.68, 'height': 1000, 'iso_639_1': 'he', 'file_path': '/csraeJmUm7GSXEoalvb83AFFq6W.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 680}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7MQT7G87WK7Y6ZeDB7c6mGRrzK9.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.715, 'height': 1181, 'iso_639_1': 'it', 'file_path': '/paIt2d08ZhrwltpmhkQYZiJXYCP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 844}, {'aspect_ratio': 0.704, 'height': 1450, 'iso_639_1': 'it', 'file_path': '/z9Otej9dIEYuPH6teXXu2I8Oh6V.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1021}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/2Ka2nOtSlwuFlsHtrtfHKMIjldC.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/kMq65QVRSL6YWpN5WQwLbaQjV3P.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'it', 'file_path': '/Ak8vHeUtTuBhLLB48iC1o8JjRnc.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/6IOvN7okabMadYJOznljdYq3cGV.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1383}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/z2E98ETb6PZ99VMqIC7PUEAeYDA.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 859, 'iso_639_1': 'en', 'file_path': '/bRZRXgW3UTUV1a19qGpGhm6W5uE.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 580}, {'aspect_ratio': 0.675, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/oOv23H19CiK1F2MTzyx76q7dGwk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 787}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/gN4qbFbuneR9CUXleYGQzomGUjW.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/axyvLjcRhH2IqFrPSdudJL5ohmh.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2932, 'iso_639_1': 'hu', 'file_path': '/wltraa6BO2g7OowPmUKuTUvIjHk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1955}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jsvX5vNggD0ObzHDXp2uUwC2Chs.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/8t7ceMgYm6dX0FA71yJ6UO0rNO.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/txSJ30aWZY9rDg9OuE2QpDJ7WwZ.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.742, 'height': 2096, 'iso_639_1': 'en', 'file_path': '/aArYQMWP5R6PwlFpSSawLLpYEvy.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1555}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/r05GcDOai2tlc5hASixe6BB4zpj.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/h2Q0Bjzb4rOulc0ekz6mH1FFaoI.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.706, 'height': 779, 'iso_639_1': 'ja', 'file_path': '/fh0VioO7JZfM6p1mOEsA0YA2xXC.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/lvNjH1zyN1w3FYkO8ZZJsICKpgN.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/tAgldVsdvZQ9GZuFMifjtl7kMTn.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.742, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/k6hExQBHOLPiGe0K5CBWrVaM3XK.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1187}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'zh', 'file_path': '/rKyMQvIGjBe80zyytNLXvGomWlZ.jpg', 'vote_average': 4.866, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.677, 'height': 1478, 'iso_639_1': 'ko', 'file_path': '/e1nMtpUTtaJGXbeZZ2ajaIOyTgU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.686, 'height': 1457, 'iso_639_1': 'ko', 'file_path': '/8E6MS99JaEZ9mNYZUupTe2nTeKY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.686, 'height': 1457, 'iso_639_1': 'ko', 'file_path': '/pV8U6MAtQBKcjcbq8zesh4Uhe6q.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.721, 'height': 950, 'iso_639_1': 'bg', 'file_path': '/qW85opMaI2Ln5Ea3KxBpeg6qjLG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 685}, {'aspect_ratio': 0.667, 'height': 1337, 'iso_639_1': 'pt', 'file_path': '/plGiCQxuksbGT3ClQDMLlUufo9K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 892}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/gKMDmGde8aAD8M6dvm6j7wciSbJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.715, 'height': 1119, 'iso_639_1': 'cn', 'file_path': '/6ZQsIxobvm7Z0yrtS9NSeRMxuFv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'cn', 'file_path': '/4s74Ob1e11tLDVL5FbCmfcKHm64.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/An3B1Vh3vEHJN1LZh8GwkbRmRn9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/9lPoG7vJOk3GRDIRC4rZyDVOGWE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/jDxcL8SYCgLHh1a1kiT1kA8y4A5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/zq8epazaprZpsI1HsqsBAHWHOBm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1193, 'iso_639_1': 'es', 'file_path': '/noYJ2sbKQE5384I9kB4h0k2YTlG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 795}, {'aspect_ratio': 0.75, 'height': 1654, 'iso_639_1': 'fr', 'file_path': '/utDBwHoh6lqBgNEwDlm5i40COYQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1240}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/3Z5y3P6CLweBgXazo5V2iebq28H.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fi', 'file_path': '/pacP7NdLG0F3EbOYd4CTvu1DB9x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/ghxS6itn1mGzejZb0SYiTo2SOMR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.697, 'height': 760, 'iso_639_1': 'ko', 'file_path': '/qxBQaS8bxhARdZu0feQO7dZPUIw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 530}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/dQ7saTbB4h7hPpAMPkCj7lPaSAQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1077}, {'aspect_ratio': 0.697, 'height': 1062, 'iso_639_1': 'ko', 'file_path': '/aabgm6CLRVUZ3EgnDYIBDD9RjH0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 740}, {'aspect_ratio': 0.75, 'height': 2560, 'iso_639_1': 'es', 'file_path': '/nZfPDfwBX4cLulKTIitPLsjobXd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/suA9dX1bvn528mDAiSHVzMgXpVr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'es', 'file_path': '/o8i8EDSWiwzTIiaMgyPnESKYIVd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/hZUSv4mCne1DP05ihoVDoh8Dg0W.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'pt', 'file_path': '/tnM9lt8QD8PseK7ED65Yt0fIZMd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1066}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/cswulqzPjSEaFF58pzOmiYpUfjq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1077}, {'aspect_ratio': 0.697, 'height': 1545, 'iso_639_1': 'ko', 'file_path': '/eWbIUAJchJjhkfncbKrmtUPCUrO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1077}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/zAQJ08Tw4DhYcpFCHoJ2wmVt6lA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/9pwp1Maj4c1lRl4QkyXEaktA22g.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 800, 'iso_639_1': 'el', 'file_path': '/bTOmCkefIK8YNhQNe3IOSueYGNZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 556}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/4Vv2UznWz86TY64m7KWO7yhVT5A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1296, 'iso_639_1': 'it', 'file_path': '/taZARyNlDUDw2qhDVqz2LpE8sy7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 864}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/zKw1XjlUrg6SThnelftIV4g0wUF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/u8InfsF7vwXyoSH8rgfDZYQzv3n.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cCCZ5lhbfvRvseWZHX8yOuSpRDJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'vi', 'file_path': '/pJAKIBOvsCc9dBhDDgIRGQGULRR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/a1UL3FTJDgQikYIebnMDhTPFVfm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'en', 'file_path': '/967Swdyk4pvSz3n4CpGBJiGVQFr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/m393i9D8M70Wu8Pc2bLOEILfIcn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1800}, {'aspect_ratio': 0.666, 'height': 1419, 'iso_639_1': 'uk', 'file_path': '/8eJ1cTMyQHk9FOYk1TAyJLR4eDF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 945}, {'aspect_ratio': 0.709, 'height': 2820, 'iso_639_1': 'uk', 'file_path': '/la1BpzspX6ZejdGFa4MRMhUAz2x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 2048, 'iso_639_1': 'cn', 'file_path': '/sjv42EQebn1nbKGx7vOquhfi5KO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1455}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/11Zx6SodSThTbMEVoQtxt11lckL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/t63vUEzIPnZXa5JYFFIK499O6Mr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bwQPehOhS14ePNRF4EBmN1GqSB1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/jQEN95EYetUtDGvpF4F78TVsRPF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.7, 'height': 900, 'iso_639_1': 'de', 'file_path': '/z1DfRQf2CgnROyhVZ6ch8FbWt71.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 630}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/8X41aAuDesg3ZUbxwoiYEIlkFUI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.724, 'height': 1382, 'iso_639_1': 'de', 'file_path': '/1M1Y77HhjJ5SgTc4IOdrkszi0nz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.722, 'height': 1385, 'iso_639_1': 'de', 'file_path': '/kaNc6kCjNMZx7kH7j7uXn4WQN8b.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.709, 'height': 1410, 'iso_639_1': 'de', 'file_path': '/vV2SS4fSc5qlvqHAB43t3A0mzOw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/2QeXdLNwrD5SufAWhszm4VzpwV6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/j0NNGfcbrYRKO8szyrJj4E2h03y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.672, 'height': 2197, 'iso_639_1': 'ro', 'file_path': '/bl3k5MKSmayH4bDAOWhESa9lFfi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1476}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ix8teqIt5kn6vJQQF5PukRaJGj4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gloStgr5JUbEYHX4tMJrvTfkGUq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cqjHJ7jQ0RDJCNZglISv1HDcpEr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1621, 'iso_639_1': 'en', 'file_path': '/l2Nxri5wXgaVQgpOiztMHWHxIsR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/kBMA1HLVQYG9RpcCH7FmtDOE78y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hr', 'file_path': '/xsWMuavHCm08R0NxmTff1g5Q9OU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gdhjkyfc85dIm9KYc7tzsFewJsB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/btIXVwMUHTlSq1XiEafPn1LSw6p.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.665, 'height': 1622, 'iso_639_1': 'en', 'file_path': '/kX7H27dYIHXt5UhPys64oEC0q5u.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1078}, {'aspect_ratio': 0.667, 'height': 1607, 'iso_639_1': 'en', 'file_path': '/nJO79lEYO9Ldz2Zjq0OJ1IGP941.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1072}, {'aspect_ratio': 0.667, 'height': 1607, 'iso_639_1': 'en', 'file_path': '/8zdR3dg39eU01sTnmoTO7aT4ZYa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1072}, {'aspect_ratio': 0.667, 'height': 2325, 'iso_639_1': 'zh', 'file_path': '/aw5qvRlY31AixBLr5op0CIqCMdS.jpg', 'vote_average': 5.576, 'vote_count': 13, 'width': 1550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/tRNlZbgNCNOpLpbPEz5L8G8A0JN.jpg', 'vote_average': 5.516, 'vote_count': 14, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bdN3gXuIZYaJP7ftKK2sU0nPtEA.jpg', 'vote_average': 5.51, 'vote_count': 26, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gcphM7ZLxS5HPeCZgjZobfz907x.jpg', 'vote_average': 5.462, 'vote_count': 39, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/Ag2B2KHKQPukjH7WutmgnnSNurZ.jpg', 'vote_average': 5.406, 'vote_count': 22, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/37Fr7lY4QBHsuxlLJIfTNxW6nGW.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/a03qYIZM0zkEutN5JRZddTBmQqY.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/utdVHiRHQHKIMd11VHx1KOFdxFC.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/ti7W0gh3WyHnQGiBzZDMH7TpYtD.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'tr', 'file_path': '/wiSuje8hdVuwM0pvhtSFirCHmJF.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/bQNVJKVuSoyoa5iLvkesxRa8DH0.jpg', 'vote_average': 5.348, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/v5aGIxVprgv85Qa1XDbxYN2xpt6.jpg', 'vote_average': 5.342, 'vote_count': 15, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/pvSESD7ujxWZwtYDb9l57qE0ywq.jpg', 'vote_average': 5.33, 'vote_count': 9, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/9QxqZI7ssVzyKEBwdUvOt3AUWzA.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/lIl2CrnWohGrZSO9eyKRptxZ7Hs.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/nQP63IbCJ5B9O348h5FAAmGWanG.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1976}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/2ZOzyhoW08neG27DVySMCcq2emd.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/9yOIPXWQ9ttsZfzHvmcS7XiV8To.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'hu', 'file_path': '/rOa94QOq3wbqKBHjSqL0WtPPJm1.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1500}, {'aspect_ratio': 0.7, 'height': 1286, 'iso_639_1': 'ko', 'file_path': '/rwEc7SgXu7b5Yo8Co4CvSinF91v.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'ru', 'file_path': '/9jMvxh1Ib6BPnE0pprRcaNibKDO.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/6NHAZLR4AJhBAVU4qFzkucfyhVl.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 969, 'iso_639_1': 'sk', 'file_path': '/76lhZonZ0Fa2T8dq5tBtsV9yDCK.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 646}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/agcgaJ1ieNc972XWGBvsJkDxo08.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/qKnagY6ksIlZsbsUunXQCvbMk7K.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': None, 'file_path': '/8bLzqR9BuEUmVxficFYakJIQUan.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1067}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pvW6UoBZOp9IrMqpT5ha29snsDR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.703, 'height': 2185, 'iso_639_1': 'zh', 'file_path': '/3noVrrRbPU0iEcVhRRLGa7hnqY.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 1537}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/AdT50fOv8Sn7wnRMU4IUsLwy4CQ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'tr', 'file_path': '/29bgk0clNyU7xS6DkcgVFYos7yG.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'es', 'file_path': '/cibtd0x7yrEnbl2by7OnNY61bEM.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/9pJJXtw7j0nSs1TvBGPKYwQuId0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/syor3JlLzuzPkeheD2QHSYaJEQN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/rN2eGbRpbJw8ZFVDiQfDxsknirP.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/wx6gj3KKbnOsrGnwA6CyfXRrVF0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.75, 'height': 800, 'iso_639_1': 'fr', 'file_path': '/uuxtLLbfMVzWL4ythAgX87JinR3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/rHQWJ745h6vk9IzMN4NKBkxpYcR.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/4oanOpX1VAK62iU77RvOq3WcrzA.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 999, 'iso_639_1': 'ru', 'file_path': '/7bw2iBAdTu3fZoAKvZobbuMojMz.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 666}, {'aspect_ratio': 0.667, 'height': 1880, 'iso_639_1': 'pt', 'file_path': '/8wkZx4FbABuNyOFIb94DFDC3CcZ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1254}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/dKoKG8SyvDjOW3ZC4OO6mSza8xZ.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 800}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'pt', 'file_path': '/9DQtfm51BsRQFVe5lOPNMY2w23O.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1880, 'iso_639_1': 'pt', 'file_path': '/qosQop2cGWG4WCtf1tbx98xXcDj.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1254}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/punmWKefqHUGo2f3dO3lpfRbOB2.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 869, 'iso_639_1': 'pt', 'file_path': '/89BhTcxt9s7daMsx44HLrH1yoYm.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 604}, {'aspect_ratio': 0.697, 'height': 750, 'iso_639_1': 'cs', 'file_path': '/j6bxCWwMpM44nwpbcosrE2fFNSr.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 523}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/xKsiJimxRa44FArhlfGHnylrT0i.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'hu', 'file_path': '/9cH4zoed31NY6xxgeMTzlzEvXaN.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/wtjVc3Yja1cTITPfgsXLgGy79MF.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 806, 'iso_639_1': 'en', 'file_path': '/rqLdxsUoGDWst28yXAmMIN1uVv6.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 564}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/A0eycgzccYk6VlpWF89L7ia2hNO.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/qTOHCFcgQH1NJZ0VI8KKuZxpd2s.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.668, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/bv15haKwQdMyGoVdnmP02MYE2bg.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 750}, {'aspect_ratio': 0.698, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/fAjOgo4NMGzqSfgvOzCBrU51hbb.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 838}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/tuLCSrXvRSXVlumY4e1TGb9zAc2.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.681, 'height': 1157, 'iso_639_1': 'zh', 'file_path': '/2SZAFZw6ITYtgRio3y5QDy2lvs0.jpg', 'vote_average': 4.774, 'vote_count': 10, 'width': 788}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ro', 'file_path': '/cNpg2TjWtsut8QUBqezkbHXQFgb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.716, 'height': 1051, 'iso_639_1': 'pt', 'file_path': '/7GyVI1QpkycimTgFPlrpUq3jqiT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 752}, {'aspect_ratio': 0.713, 'height': 800, 'iso_639_1': 'bg', 'file_path': '/h4SgwOskf3CIBlsEiZwVFDkB7Gy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 570}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/m624LrPxlbXkMZVyM9tyDkI8g0M.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/atJR8vClEvAU7MtB5hy4oxuf4RK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/zOwP4sWiVUffsbzQva742GL3ZXA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'ko', 'file_path': '/aE4PR92KPazsbZKEha06roRoXgv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.706, 'height': 779, 'iso_639_1': 'zh', 'file_path': '/dOdURWFzv6UGYK1tBzXsn9mY7oD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/ujX6Liubmg9cBdqZIm7MxYm6DvZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/jb4GtFklHbxTJ9u3zMgUvJ5dkeE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8zoy0oZ0CiCXleCsnQaPWVogAir.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/t72QYzBgFNVECrvln688z3Xf2aG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.678, 'height': 755, 'iso_639_1': 'en', 'file_path': '/u5sQzZtxe3VnWNZh8ExijDQG9yZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 512}, {'aspect_ratio': 0.684, 'height': 1280, 'iso_639_1': 'ru', 'file_path': '/yVyVqv7D6l2LpggHbwBkut7wHdw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 875}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'ru', 'file_path': '/jKFVa9Dq2lSc7VePdMs8ApZbGX4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'ru', 'file_path': '/tPAAA4p8NqKbkhIAxPz3MaAkjMA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/fqTQIMWqjHoHVQouignErrOy3Co.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': None, 'file_path': '/wsUt98RThQsNXbTY3OT5Fl2zYFa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': None, 'file_path': '/hGGmC4a3F9JYYQUM2ePz6lw4rj6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/dyXgxnqRdHPzoGXqwYKNnsJ7bgl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/yfUZxBmAdXF6DNQnBWSJqekOOJc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/mrwOUto3pCzo7EygRTjgZOJ60nk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 2585, 'iso_639_1': 'zh', 'file_path': '/mrf31ezhckXfkIUd0p8LHqksvbG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1836}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'en', 'file_path': '/cq5RVLOYxYWGkGI3FWGmoTYWheV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/3bX6VVSMf0dvzk5pMT4ALG5A92d.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1605, 'iso_639_1': 'it', 'file_path': '/fmls6kOMCfKWrJaq43PLCWVr6ve.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1070}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/odvmwLXNfkE1JmvfVBraaMGbtQQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/r1pjXIXCwlFhtrEvPXxhw2wwqry.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/g5svlJvwpUpo8NeNzIGeBoctgTX.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8Ta8uxDusA18OsIb3ksLOH4qTxv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8uWjDveJ8bkhcolpwoMMDNDOkFL.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/lK9LE5D67HNyPlhJcjKAgnRh0OO.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ob9dYT7cuEcVrjkQXajnIgQsXHt.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'en', 'file_path': '/eaIXDmrHIwYSXjSK0N6hcXM0gGx.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'en', 'file_path': '/5giub1nKK3sFRvZxmebe31scQOo.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 700}, {'aspect_ratio': 0.667, 'height': 1800, 'iso_639_1': 'en', 'file_path': '/ctqienHJX0uuQCIv7Qr0WvXshld.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 1605, 'iso_639_1': 'it', 'file_path': '/cfNxgChrQI4rQqcDtWx0XbUHIP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1070}, {'aspect_ratio': 0.667, 'height': 1575, 'iso_639_1': 'it', 'file_path': '/a3TkBxEd4gS4l9JAqMOnkChguv3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1050}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'ru', 'file_path': '/oiouMT6o8ss9Iro2Y1wS6As0IS0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'es', 'file_path': '/7EpzeTKziFdjMYMtcqtu9QYmSLu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9xKxkCc3aotmu7r8iQT5jvgMRMp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 2168, 'iso_639_1': 'hu', 'file_path': '/l7EEYEjW9je0VYqQKpWe5GQqKxO.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1520}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/pCti3dACGQQpvD0gQnG7pacZwAD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/iLYLgzHXAf6sJUjWBTF7gkFgvYZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'pt', 'file_path': '/g4PdSeyLwpspxd47miKPFBnv7yK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'uk', 'file_path': '/hSgNpJ92Vi4SmW915qb7wzSH8aP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.665, 'height': 1926, 'iso_639_1': 'en', 'file_path': '/aN4HPRZvaNawxmDs92HrEwV7LPl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'zh', 'file_path': '/rXHdIfyJ5ojQYsN2wPrmf9aIIyN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 1241, 'iso_639_1': 'en', 'file_path': '/rzgaiEqMSvSQJWwgk5phFQnlTIa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.667, 'height': 1065, 'iso_639_1': 'en', 'file_path': '/qrB8po1jncE4tK8t3UXV040NTVb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 710}, {'aspect_ratio': 0.672, 'height': 1282, 'iso_639_1': 'en', 'file_path': '/cXDFFv6yZNW3vUHOKKUPJNnL0So.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 861}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/mJGIjkALIOmj1TGv48l3qGvJQuy.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 500}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'en', 'file_path': '/7kSYGg6zrsXBsLvZnaNwoteiruv.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 600}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4MpN4kIEqUjW8OPtOQJXlTdHiJV.jpg', 'vote_average': 5.638, 'vote_count': 12, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/6yMWU1vWkOBbNRIwOxhetd2aHhO.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'cn', 'file_path': '/olxE3239oOQGaSShbWLJs1NQXBe.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 1500}, {'aspect_ratio': 0.671, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/1P3ZyEq02wcTMd3iE4ebtLvncvH.jpg', 'vote_average': 5.396, 'vote_count': 12, 'width': 754}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/lXRSRP5QMfrr9cSiupvcGDJW1Sa.jpg', 'vote_average': 5.392, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'uk', 'file_path': '/77NraO0uqhXOG0xqLz0nIuockDf.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/j8F9HJBcrRD3xevxf4NMF2IhQE2.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/s4I1JYIacFbi6amQYqRKB7ifrHx.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'tr', 'file_path': '/q7OK13aqXAwppQAF6yT6wZeKtc6.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'hu', 'file_path': '/2DkutTDxhB7173ItFi9cVDMFqUK.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/pqB8Xlu0QdwsONakoiKtortANdn.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/h8Qi8uIYAGh4lZ357ua6NNJ8Pui.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2000, 'iso_639_1': 'en', 'file_path': '/ezD8iZcSj9zQkIbBNpDZvdMxr8P.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1333}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b1V6Qp0xcNoxrpXu9tKhJ2PoYEW.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/3F2Rbu2DCC8Q7WGWqlsWI26Bw5P.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/54Jxp5zy190oQXqxcwBUPCVngTU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/e5F9ACInAM2802QxsBmmixyaXrU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/9nBRExEia2xF2nDzCZNtQUknZGD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/f1pQPzFmBXyFaScnrqeSm8lvCH9.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/AanMvzySJHlfIiScoU6edjNvIFH.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/fIfmG3EaIy3eqebyq7hXjl1ymQW.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gDpMT5nrgsuSAgX3NfRg2ZOsr0d.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/zBVNawbcB9z3cQw3uOvQ6dTLBS2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/sPX89Td70IDDjVr85jdSBb4rWGr.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.669, 'height': 1600, 'iso_639_1': None, 'file_path': '/8grKo5VUbtnnJWX5iQBhmKOQxHY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1070}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/vGKHM0WKkjt5KYKYr6dmX7RZfJZ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8pF4KoiRlXEf1MJCKTfZ5cyJz5l.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/A92FwaxylVAEC1g88ncRjPNupJE.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2184, 'iso_639_1': 'ja', 'file_path': '/mpdTFukLMNAALO2j0yfViyoI2TF.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1456}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/e8MB1d69fmzyonT6mz9iQs3rhw7.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oyjEePAoGmeyAkpLgloOfCB2ijG.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1545, 'iso_639_1': 'en', 'file_path': '/qLrkL9RUirxJkDW7KTTfrkNsL64.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1030}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8RW2runSEc34IwKN2D1aPcJd2UL.jpg', 'vote_average': 5.286, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rdXILMlfINsio98WbUFoXTXPz5S.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/h4QzFwldlUaEvJgVwumGTPOBA59.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/uheYLZ7KxfGolGOJr6nnKiNuQKh.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jrYbYRMRwCO7vNtTdoqNcgALwAi.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/taKcn26BMWnsUcMFSlr5RfGDtFB.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/3oOBjD1LZCjfrLPPL49xP9fFgeR.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1625, 'iso_639_1': 'es', 'file_path': '/xWufUAYvji3mgltweOd41kh3MRK.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1083}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/AdhhQHrgb9eWTcmBh7pThBzU0Ra.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/5Ml3AHO8D5Kil22e5FnDg8sgBn0.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/pQFtEAJC8QSs97rIYiKCmbxJseL.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 950}, {'aspect_ratio': 0.73, 'height': 1200, 'iso_639_1': 'ja', 'file_path': '/mx5zvtwTTWBwlNzBZCKvbcjJFIH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 876}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/48sBwODorRIoJjHFeDHttVU3XAF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/udMtQ5TQ0q856XqRyqQxE2F2wTB.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/oih8KKRAhnRtyU5kzKoSMaaLhQM.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/jHX4YIJtWFIteg7jIy5lZITP40C.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 1945, 'iso_639_1': 'ko', 'file_path': '/sb3V2fPhNDRRUvHJW4pQaeHbDxm.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1305}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/zKgfW9KhKmIQyjL6b2nVFOsyeZh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aBVr0YMCeAYVrtmEtt54DrtLZeq.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.683, 'height': 1464, 'iso_639_1': 'en', 'file_path': '/7hys0bs5xfxR9tu3G5InB0xDhat.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/gsKwOfUesyN0pZtag0ulh7bpxJX.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': 'ja', 'file_path': '/tqeP1OW2welQt6cVM9YwKOTU3z8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1068}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/8G6WFTx91CAQeVopRQtVCZDYpb1.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.669, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/8D2CZEClyq9H5zY0BaD9F2miS25.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1370}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/ziFjqY3ABYTJZ2kHMzjr3eeyMQZ.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iTFxTcAZtxvSrPV87IEnmnvyQGw.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/z9iIvDrc4A6WqBg3qzmfQmRFLwe.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'en', 'file_path': '/kb9pouNQIuXhBjPzt1VWawIrEFM.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 600}, {'aspect_ratio': 0.7, 'height': 1128, 'iso_639_1': 'pt', 'file_path': '/e22BN2rABXSkDS8RChni1E9VSvP.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 790}, {'aspect_ratio': 0.704, 'height': 1080, 'iso_639_1': 'bg', 'file_path': '/A5zTY0UJg0UcuzuXE51Lc21OhUI.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 760}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'fr', 'file_path': '/voA7jH8LIkPMlmtdYAp83z7bKiS.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.686, 'height': 1000, 'iso_639_1': 'ko', 'file_path': '/ur3wsVMVubcr9wiKP6oyEHJMF75.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 686}, {'aspect_ratio': 0.686, 'height': 1166, 'iso_639_1': 'ko', 'file_path': '/jCgGjUHt9Ut7nGibLS71ePCBnV.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.742, 'height': 2096, 'iso_639_1': 'en', 'file_path': '/1CvxVIiBT9XWN2WQZCm1bqIKchw.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1555}, {'aspect_ratio': 0.652, 'height': 781, 'iso_639_1': 'el', 'file_path': '/zQSuZTwBI81CiXUxxUKExcafnO9.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 509}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/oGby1unkAP5qH9I7AavC7QWtTNt.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/9ghkbUgt5lAYzkL4DuehL2DHn4X.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1228, 'iso_639_1': 'es', 'file_path': '/2mRyNFKpRT37vAcZdHzBrCpmH51.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 818}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/k5Pq6DFqKZ6k6Q1kX5MarcugysV.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2886, 'iso_639_1': 'hu', 'file_path': '/vrwZ91I7j5QIrSm3TQEbadvA0sP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1924}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aGdng8Ic4ONpcepU3bVXPSLmNd3.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1223, 'iso_639_1': 'zh', 'file_path': '/VwksWozHDudb7i1XBQBYeEfxiP.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 815}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/uGGUIOwp1F3iSMB0ZyFZJ1Uorvy.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.742, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/3TAzUgbseHTVopZYIrPPeuRtxi1.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1187}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bY1SD4t8to0OJh3NBTan4kpMM7M.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'zh', 'file_path': '/jULqFuAvuikqjp870awMKXcfiXK.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'tr', 'file_path': '/d5CPMykx24J2FZ77Coun40mkRS.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 640}, {'aspect_ratio': 0.718, 'height': 1254, 'iso_639_1': 'zh', 'file_path': '/oarR8scEjqKmgbFAYHfUdpOP8Oz.jpg', 'vote_average': 4.882, 'vote_count': 8, 'width': 900}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/peVchL19Z1JJobkGOoWBfdGyUNP.jpg', 'vote_average': 4.81, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1950, 'iso_639_1': 'en', 'file_path': '/52xooeUA0yHufOpwzeEEuQA61LW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1300}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pl', 'file_path': '/cub46jQ4bLQYYbpbSL9Q24wofS2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 800, 'iso_639_1': 'en', 'file_path': '/ocEnq79nVKZbhKAllMVpxnbAQQ5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 534}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/66BlmYvDr92ZOJXWOLMfs55p5pD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 667}, {'aspect_ratio': 0.666, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/mrkFKMgjs1TWAXHVujASiBv0PTi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 666}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/v0ANxUnWwyfkf053ijLfu1nxi0K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1350, 'iso_639_1': 'hu', 'file_path': '/1Cfe1HTWMXUeaxLi3xF072Jkf0o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/1wVhoU0bBGhJYaiu5K8DrSCqDDY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.677, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/5v9MVHgHWjA1c6Rx2BlA2ty6SU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1083}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/rSZXvInOa94udX9F4hXSruyKm3u.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jZdal8sHUCJ9mMN9qQOniaxajFF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/eKdPunkhnw2y7KL5XRKqbhoowOd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/53lvq1hrL8NcFW1VXEhfXH0UmWt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.75, 'height': 2400, 'iso_639_1': 'en', 'file_path': '/ksFkFAevvjpyj6UYl7OZ8TKJ5FS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1800}, {'aspect_ratio': 0.704, 'height': 2162, 'iso_639_1': 'hu', 'file_path': '/6VtoPn1CBUEjugkkXZzD3R31PWG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1523}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/3HT2Dd9H97qF7f0MwTLpYlIVNi2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/njDm6YxpTM6eGWemXTXEIAl1QTg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'cn', 'file_path': '/eIxXgEJoPlnZKDXTVhZqayooGFe.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 825, 'iso_639_1': 'cn', 'file_path': '/heHTe9kEUtExNnLhlU1JdXjRdov.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/miHituxAvyTN1EiVd3ivHATPMuH.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/8BKhFMoI4nLdRcNsGa0917WpFcv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/uwUJyAVJecME2Za05MO3Os5NgMN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cs', 'file_path': '/1tmW4YcZbbnVXsdhOF5l1Vw4hrn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bqGfUxcgh0h2G0piN14kcUp1jtX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/8hQ30FJB9OSLeF3qDDS8dEuXavd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/bhbM9ubZ1ntgG6Nb7W2aSMMHUg2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.75, 'height': 800, 'iso_639_1': 'fr', 'file_path': '/dj3gMEPXmisUr0sAfQEqguL5CcG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'es', 'file_path': '/wn6M8RUu4aXAkm5CDYi925TjF5x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/o7RGTaHBMKbcoaBmVhalbxF9iyr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/kuq4rOo5xaeE4O9UrbmYePsnGk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 815, 'iso_639_1': 'en', 'file_path': '/lvH8MQw49D2y6YfdReuVimJ2M56.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 550}, {'aspect_ratio': 0.681, 'height': 999, 'iso_639_1': 'en', 'file_path': '/ilsnLZHdsfu3BBBxDNpTtD6AcUF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 680}, {'aspect_ratio': 0.711, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/mg3pPorXcQMxwKTCGyGgUlD3AGr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 533}, {'aspect_ratio': 0.661, 'height': 1180, 'iso_639_1': 'pl', 'file_path': '/r10xlLTZACGRPk3DdUFsMbKXC6S.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 780}, {'aspect_ratio': 0.676, 'height': 1332, 'iso_639_1': 'en', 'file_path': '/67rpL2zu7XbpfnUck4EDq5dJ0oq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.763, 'height': 1179, 'iso_639_1': 'pl', 'file_path': '/fVaJ6lIPG01GbRf6CiZVWLqdRWP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/aLcqG3KYjn7UcaP9RkwoDCCVtDM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/fqCX3kCbnIoo7e0WzoYnCJpjaiA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rcvFrSxNHleYiECFK5C9UTRo6pt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/5U3zBsuLdMobHmgsImRcz9v4zJo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/151LQXEVZNcEUnHrJ6zrmC4IrJY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/lZERCEFV7eEz4HhKEc8oAV3mILn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1610, 'iso_639_1': 'en', 'file_path': '/kF1LegAFVXVLpBuncjtA2vWU4te.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1073}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b8PrXkCXucjcpMDF6wTack7XLox.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/n4wda3f2nN5ZydGFyxgVDtpGZ1s.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1667, 'iso_639_1': 'uk', 'file_path': '/AkTECnZFMA9eiHhAGTFknHRCEru.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1111}, {'aspect_ratio': 0.71, 'height': 2048, 'iso_639_1': 'cn', 'file_path': '/gC0NNBDPMv9hCE3lFDlXpxRXutJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1455}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/jfZk3qhdEHpbhOgoe6LWiWQH1vw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b7Fu087b4lbgvD2Zkh9uuUzGvGW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/qJULvvrFj2jcQSW5CpBurl5F0GH.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'hu', 'file_path': '/2iLknZbwsuo2DU2XMwFustMv1Wc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1433}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/unbyPHlYp98fZXIycBs69iIqG7X.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/1wTXK636CyqDhvJ3AHcbTQdbqzA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'en', 'file_path': '/vpl0SgFYGJASU4X5otf4bXfN3CQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.669, 'height': 1238, 'iso_639_1': 'en', 'file_path': '/eVmnHzShdLNGN6WNIEwD9lAW0XL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.666, 'height': 1400, 'iso_639_1': 'de', 'file_path': '/b3UIToGx8JIpRqUTGkaoyaNLuU3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 933}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'de', 'file_path': '/bCS4nLmIb1Trem2XD1Gmv7QVCkq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.666, 'height': 1621, 'iso_639_1': 'en', 'file_path': '/roZDhuv0u5LOAbybq2lgQpSVOGY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7oj5A9xCVwSgocb9eQfoTEFQs0L.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ijKpiStjMetB43uxOAXpE8RAQR7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/f8dHlNWaxXLod6NQ5cSJmzwxvzp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oSAVoPnVgQmYnEN3e39aXjGicnd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6mp9FB58YtnvvluKr2uYntlOUA6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4wrnEENDwfqQqWw3iibW4TO7uz2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4vj4UFn2neMtq37tdiPNKizl3yZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.676, 'height': 1480, 'iso_639_1': 'en', 'file_path': '/oZ6USHIpL6A7r6JWDxodgguYVmb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/mao3SD11TSZW40HbM2Hbc3q6Cg8.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/riVXh3EimGO0y5dgQxEWPRy5Itg.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/t3oYtCqDue393e7uhDn5f8NBQRx.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/6Vwc5vgioIXUhLQGAqmp3uDDKJJ.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/eJ49J6QXrTJryC61p43NTAULms.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/74Tw91IVP3Q8AjfeNSqgfZ0FGWK.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/u8qp8FKo6sU7SUOER8guCd8LVsv.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 771, 'iso_639_1': 'pl', 'file_path': '/dVppgIoMNu3NvK3GThHdXjqOHYD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 514}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'pt', 'file_path': '/7IKbG5NpqnT8UKP6bigmeQmmR2k.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 960}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/tptisxjbdI4LInxdjrU95DYCXnT.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gjHergpHMkxtgpSr8fTbasVmXDS.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/cwB0t4OHX1Pw1Umzc9jPgzalUpS.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eJ7Rg29Gf9OMBRJTx7S1MWkoIDy.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/6O3eA55DO3fHicwlAE3DaSrA5Uv.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gAP5xELKJrIdLjc20W7QUSD2q9Z.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.689, 'height': 1000, 'iso_639_1': 'ru', 'file_path': '/o9KCIyB81bxUIysFYa32tRmDLLa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 689}, {'aspect_ratio': 0.698, 'height': 1128, 'iso_639_1': 'ko', 'file_path': '/iUVqFNAsczEZDKMZ0WUwmijFXXi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 787}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'pl', 'file_path': '/xr5vqYTGDDNp1czYWS3FXDgTLgS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/6NyOWQ32k1uh6DOtwJQkc3Gsq0V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/yfvof5mHWcHI51d985ty8Md5Unz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'hu', 'file_path': '/xKbkg7hXd2sxjC4yog7wRsa0Htf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'de', 'file_path': '/eQ0fpkk2DSlMGWp3E4BzEqAxxD5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iwU4g5UynQRp5PSMR6gLIW84FdE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'fr', 'file_path': '/lHZXeG4sTkWREgkP7iJCWGJkPmp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/7pfpRJMkk7iy4pby2gnIX8dmPQc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1014, 'iso_639_1': 'uk', 'file_path': '/yWXumElnl9Ma5upfZ0lVXzJoSIZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 676}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/hpUFOvUg4QEBaYf17ptfBgftF1A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/wz3tHxlBIlVXrwdcxi4V6RgBDLQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/2QsdTyaPOEeH3Hs9IZ7wP4Q47KI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/zeZ2KBilr4i1weqDgaJMXwfszfB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2809, 'iso_639_1': 'en', 'file_path': '/iHFgXmnl8kI5Mj7M2FIgVNidh1K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1873}, {'aspect_ratio': 0.67, 'height': 1245, 'iso_639_1': None, 'file_path': '/lVEKzRlME0PzVhhsYIjSozUzOjG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 834}, {'aspect_ratio': 0.67, 'height': 1245, 'iso_639_1': 'en', 'file_path': '/meHgOaJw1qG4ghyOQpgcAEnGiYL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 834}, {'aspect_ratio': 0.755, 'height': 2415, 'iso_639_1': 'en', 'file_path': '/lgikX0J6y1HQwd2olhpAO6uFaRM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1824}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ydO1cCU9rNkSCMwYRAj0uAXh2jc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6r0kwSACT5ByguAtPOD2jEBX4Bk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/8ex63HADjW4Aq0Yyi7I206fPD4w.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/poUximKxGghA1MgjN0DNUYTb8aK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'hu', 'file_path': '/sWBfP7vfft2EcmDet9wMVS1RgZt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/grgvwGEAUNurWDsIyTLeGSQkc5r.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/8y9yQAwWlWYVzLxz0spQRoKWh3T.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/z2im6qUwtDIn2KMiWoRg0dRIXIC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'fr', 'file_path': '/5mGl3dFFCzeTCG3otMmsjY71Bdm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/l95SOzLzZ9x9qY0EdBPYa6mnFDL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bctwBm75A0hCMIkRAv9hudqJgxU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/q9rKjv1XucoqDg6046hqvfuQInA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/pMs8nZuoLPrzL20dcS7cZM11ba9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2uTHwj5aHXiDlw8V99wzRrmTljD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/b4Oe15CGLL61Ped0RAS9JpqdmCt.jpg', 'vote_average': 5.708, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/y8nvZPcNzuAIjWjplDiPeS4WZ6c.jpg', 'vote_average': 5.696, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/1VOKlC35yrwVKlfBSN52NY4zoF2.jpg', 'vote_average': 5.652, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2353, 'iso_639_1': 'zh', 'file_path': '/79mvAsULqtLpQvg5zYxgkK1Yohu.jpg', 'vote_average': 5.634, 'vote_count': 14, 'width': 1569}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'pt', 'file_path': '/kO6ewhlh7OIGRRbHwylDafEM1QG.jpg', 'vote_average': 5.522, 'vote_count': 6, 'width': 960}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ebSnODDg9lbsMIaWg2uAbjn7TO5.jpg', 'vote_average': 5.508, 'vote_count': 32, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zx87sFGLXZdrSF4B9WPhwjaKuQP.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'pt', 'file_path': '/8TbAQlEpRG2EQsjMNR76IYGNuki.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/e6yYRoEz4WoHIwcCaRTcQrAmaKG.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2040, 'iso_639_1': 'it', 'file_path': '/sInkpq76Q9L3JOEXEOVEQeJTjGl.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1360}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/cCH4jLoZCklH3rgqnvatjR7Q1AL.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/pEuitXhT6LEMOZuEvB6ecAaVa1m.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/m3xR365ajZrTN5vm2xf91L1zplv.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/3ldmcbmoQ6A9dUwphrwWxXIYQZM.jpg', 'vote_average': 5.33, 'vote_count': 9, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/maCv5pCoqp8mwWIxZmejzH5aCS4.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'he', 'file_path': '/ppqNQckAPwjVisCg5VPpdUBHxxb.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/l7sMTjCVqchwVAz6Kupm1bC62eP.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/iWzrUYxUfnpmLbm0rwyGKuFwpTO.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'sk', 'file_path': '/lsJ6fO8rXfTr5tcJHmJomru9SS5.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/iz7bV07QjC7Ero4msP5c9usJ3Az.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/t1LPjG9KNQQSX156XtXPxn8vIm2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.693, 'height': 2884, 'iso_639_1': 'el', 'file_path': '/ruayowvFykAbSJr5cVNRb14KXZt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sk', 'file_path': '/k6zHXaXXBSHyExTWxk6N2dtkh4a.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/QKPYFn2IS1t2neqv6hkFfAhQCc.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1667}, {'aspect_ratio': 0.7, 'height': 1372, 'iso_639_1': 'ko', 'file_path': '/r8GRroYelxUID8dOxcyeNKKol6W.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 961}, {'aspect_ratio': 0.667, 'height': 1155, 'iso_639_1': 'pl', 'file_path': '/zPRomhANBqtY8XSb9y4f2o5nHzp.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 770}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/za5q8ZKtUj3lGazCnPEDbhcp7Q4.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.705, 'height': 2838, 'iso_639_1': 'de', 'file_path': '/jSwp3rByt0iG3LwZbrMlw40wvZP.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'es', 'file_path': '/3lc06ptVbouEaZyjdHfCzmIm6v7.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1066, 'iso_639_1': 'th', 'file_path': '/sC8ci4k90aeUw7Yfd3HBlQIWBMw.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zHqzQyu6AyAZ0JCVaYmLQGfGduQ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/iwvcIamoONxy9yB2td7yjRcbTQ2.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.699, 'height': 1400, 'iso_639_1': 'he', 'file_path': '/cvyJDi3hP4G8knqNSmodfnJW4Wk.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 979}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/uHBAkhW91dSHjmvm3NaVGszDGwM.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/aWPRZvXOo5MmdzXwVNqnPf4uOxm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.706, 'height': 1529, 'iso_639_1': 'cs', 'file_path': '/vvabU7mZkohtB2yeEcVV6PcE71C.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'en', 'file_path': '/ggx11MEouBJgReHeWKhVOebSCno.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/zzHmycY21doYxLt2bDnhFr8xLo6.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'ja', 'file_path': '/wMGrlJ8TGuB77jcLISUWiVlG1vY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 667}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/cUqEgoP6kj8ykfNjJx3Tl5zHCcN.jpg', 'vote_average': 5.306, 'vote_count': 78, 'width': 1012}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/jkFghrF0sHmL2aPwS8fpUINOzo6.jpg', 'vote_average': 5.282, 'vote_count': 14, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/53qrLADLqLsGoLVGaAkpe6The0K.jpg', 'vote_average': 5.282, 'vote_count': 14, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'fr', 'file_path': '/a0FWEv2NXw8zCgdCYAcI3x1M2iB.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 2792, 'iso_639_1': 'es', 'file_path': '/wHK0yX54svEWqlLNVMjoHcXXijq.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1861}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/pcVC6wvEVodaUxkTsUkXlgVrXHF.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/ii5CQ1ajuyvZlC60Q2rLFJT13UV.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.67, 'height': 1689, 'iso_639_1': 'ja', 'file_path': '/8z17OrgHGepjgyKvxIX9w5i1cBm.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1132}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/1zvQOnISwPx0jACHEqUa93WP1yF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/b5i4fvzOBc9mTu2J29RDsqmdvaC.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jX2GDUad2rHelr5la31MmwiL06T.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ltbTYAXBohdIHqC72RxthWWMR8S.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2974, 'iso_639_1': 'uk', 'file_path': '/4Nw3VyTcZGgk58cJxf5BJGdBU7.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1983}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/Y9KbriUET6fnsofAOvwDnXonI9.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/bP7sTFJSRKdO1PqRXBkdr7QJG5c.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/mtXqM8rjL9rwAs4V0LxKpkZ1ca1.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 954, 'iso_639_1': 'hu', 'file_path': '/qqe7SdnqKdyuZ4txNo7UzszU8RR.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 644}, {'aspect_ratio': 0.707, 'height': 1123, 'iso_639_1': 'sk', 'file_path': '/AkEkRv6yGDKxtPaO5cta6svr8em.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 794}, {'aspect_ratio': 0.69, 'height': 1015, 'iso_639_1': 'hu', 'file_path': '/7G1swFcaEE5IOC1c9vhmsNwAnBn.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 700}, {'aspect_ratio': 0.699, 'height': 1064, 'iso_639_1': 'lt', 'file_path': '/tCrBCNzwvFpbOzpakrIzE7urv1h.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 744}, {'aspect_ratio': 0.705, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/bcukXXsDE6E1uwN9uT2a7o0IkJ3.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1057}, {'aspect_ratio': 0.666, 'height': 800, 'iso_639_1': 'tr', 'file_path': '/820AaUpKmLqc7KJePkPUf0xWmZT.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 533}, {'aspect_ratio': 0.675, 'height': 1733, 'iso_639_1': 'en', 'file_path': '/yAznDPQlypuw3xuPzB8mwZ7thOF.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1170}, {'aspect_ratio': 0.666, 'height': 1912, 'iso_639_1': 'en', 'file_path': '/eHpGqOrkKcxOsjqTVU9XiRA9lBu.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1274}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/zsR6BLC3bqBpXnOVO8GAcltK5v5.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 2878, 'iso_639_1': 'ru', 'file_path': '/koF819pZLTVJDKnXTbAjsCWByCj.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'da', 'file_path': '/b8nDCzjLwOOK84QQ8IOBSXKVYmH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1080}, {'aspect_ratio': 0.686, 'height': 2334, 'iso_639_1': 'ko', 'file_path': '/jBMxV0Ufzn5zhhavrwmcwUPTQo1.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1602}, {'aspect_ratio': 0.693, 'height': 2885, 'iso_639_1': 'el', 'file_path': '/emdQj6jFZ5KmoVR6z3GzPlUEAPR.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.749, 'height': 2669, 'iso_639_1': 'fr', 'file_path': '/kO2XxxuY0zHv9Xzi75tbb0tH0qq.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'cn', 'file_path': '/irV3zgU4sxBLiZsRaJkUsFTIWiu.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 2852, 'iso_639_1': 'zh', 'file_path': '/z8yFLxSTrKsVl0LnKkRp7m5jHGW.jpg', 'vote_average': 5.08, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/nGtEd7mQ12lJyeSvj6rQSzy8sG5.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.75, 'height': 1073, 'iso_639_1': 'fr', 'file_path': '/2FaEoBZkjkmeocMpRrsB4C36JZ9.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 805}, {'aspect_ratio': 0.707, 'height': 1199, 'iso_639_1': 'fr', 'file_path': '/6vbOiVLl6yzDrcmX5tziUY337O.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 848}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/4oBdVk1ndVAyU9vieLMQDjTR0Ja.jpg', 'vote_average': 4.996, 'vote_count': 6, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1104, 'iso_639_1': 'en', 'file_path': '/qgISWc2owsFwQs65h45FyTpecfr.jpg', 'vote_average': 4.982, 'vote_count': 13, 'width': 736}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/xWeehULdRScOlKQjvGHacs3T9F9.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1012}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'es', 'file_path': '/li2TmtEDnl9YiKu0EabKZ3UN2OD.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 648}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/4nk6rKWPFafh8XEOsWEL1iuqeBR.jpg', 'vote_average': 4.968, 'vote_count': 20, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'en', 'file_path': '/vBw02gViFMiuhmQBDXALhxDCoDs.jpg', 'vote_average': 4.956, 'vote_count': 18, 'width': 648}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'es', 'file_path': '/rirlZ4Glx1IdtCnwGmax6t65KmE.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 648}, {'aspect_ratio': 0.666, 'height': 1183, 'iso_639_1': 'en', 'file_path': '/6OXM4vZiHI38tdzNl0eZBcnJ6Py.jpg', 'vote_average': 4.914, 'vote_count': 12, 'width': 788}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/hfPZSSOL9Lx8B5iSDob9ZzrWKmG.jpg', 'vote_average': 4.81, 'vote_count': 7, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/5YRk65QJV3oWTO0pzvMhUwHM3H8.jpg', 'vote_average': 4.744, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/wgbLSRE4hx2E2u4KC05dLejglvZ.jpg', 'vote_average': 4.744, 'vote_count': 13, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/uvp9JwfkHAfY98IKCVyW3wn50R5.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/rkydrPu5ozwuubWUxyGM0wBd7Zf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/adGWCFQtxYrzJDbVfsXqJd6An1f.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1801, 'iso_639_1': 'bg', 'file_path': '/iVLaWEt8lVm8DaWb2yFX0gZzhT1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'de', 'file_path': '/70n4Y3GW6BbwZf8TMspkw2S3E9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'pt', 'file_path': '/a45twTYksQoA7FQxHdrPbhmdymS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'pt', 'file_path': '/vOYYPbQwmNiFtuCZxepC5jSedK2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1000, 'iso_639_1': 'pt', 'file_path': '/ozZUzjUrkTHm1DsXmxq5Szr33uI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 667}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/oV1orpEEyAG6qpYvx0eXLiMDOB5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1400}, {'aspect_ratio': 0.675, 'height': 1499, 'iso_639_1': 'vi', 'file_path': '/qRtqlnvcoWIL0Uma3HA15Ll84I6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1012}, {'aspect_ratio': 0.685, 'height': 934, 'iso_639_1': 'en', 'file_path': '/ibsAJmQFKIGD5045jHCtUjZoG5V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/xqpBQsx1pLgmCZmvlm4gs7Xkd6L.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.705, 'height': 2480, 'iso_639_1': 'en', 'file_path': '/71bgUB7aDOX2c0KdItL7nHS5V7Z.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1748}, {'aspect_ratio': 0.706, 'height': 1192, 'iso_639_1': 'cs', 'file_path': '/m85YWSaKOQTGd4P2iDPrdx9MWle.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 842}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/cn69SQZ7JU5jGXespkOuTT4dWcN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uWp1gGlzks1Qbn4CRD53bwd1cYP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/m72FNxY3or8guz8fQeR6k8rhqIm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/477Y0JBPosetXaAq3F4JKS5cJOT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.712, 'height': 750, 'iso_639_1': 'en', 'file_path': '/xYsBhycaMctERkAryDnxzbhvLNd.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 534}, {'aspect_ratio': 0.703, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/6UOBMm3SPyQwhjXg3JAuimhKH1A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 527}, {'aspect_ratio': 0.675, 'height': 750, 'iso_639_1': 'en', 'file_path': '/bUVnHhgs623J25hQKdXj5HB4TV5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 506}, {'aspect_ratio': 0.675, 'height': 1897, 'iso_639_1': 'en', 'file_path': '/bJjDuoXQwoKwf8Ikqw5fG93SccC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 1024, 'iso_639_1': 'th', 'file_path': '/sOV8Gs14hn3tItR9iRsT0zVXaN0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 683}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6mmR4jIx4lbcAlMq5jUwoxQBUNl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hJfvoSRul0vA8buvGEf8Y0nSMLj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/izwq3XnagOtZG2tjTikKmWD72Gr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ylIWpIzgtj8Kgu2LAttG91SAOEj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1562, 'iso_639_1': 'ro', 'file_path': '/jxeyKW2r6UJy18dJOsWnNcaO9ug.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1095}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/dEpzOsUsVOthJO50EeUV6c4OzOo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/6DNV7P1dELhmXMTovH5nmX1chcx.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/47Nt9FTKaibRT59Jt1C6kFrIUul.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 1050, 'iso_639_1': 'en', 'file_path': '/eD87eLlEBnu7YVq1mml7Ta6vraI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rbIaxCfEXhKcs81cDoRciWeZbWu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/cqUG42ME8SPfrCIBftZCTy0dIvx.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2501, 'iso_639_1': 'en', 'file_path': '/fC17drcQkvLoSfFssEtu0nEH3Cs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1667}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/3ZEJQbwgwr1FTEMm7gWMkTgwsZe.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ae18mE3HWOnuiCtT0Bu1REsm2wl.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/sv1AZIcH1tLV6bcHsyouNVM3VNy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/jJ1H0mjM9qQTv5V52RdlKvOIWMF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/4VFkZEUnqwYYiWIoweufYEH67lE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/5dfGY1MiYj93BC9FKMe1K1sOJAh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/6LPkJO0phMVbuNld3jzLgoQcaYI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/yuTd4oGNt0jlT623ElJTOCZIzoK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 976, 'iso_639_1': 'en', 'file_path': '/iUw4Qp5EwnLRihy5V7vGBohdwo3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 651}, {'aspect_ratio': 0.666, 'height': 968, 'iso_639_1': 'en', 'file_path': '/4IJjdiRxMdnYXojJCNeUzwwXkUK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 645}, {'aspect_ratio': 0.664, 'height': 2118, 'iso_639_1': 'en', 'file_path': '/fbRhW1nrxIE3nwb5ByfIIQkgUni.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1407}, {'aspect_ratio': 0.667, 'height': 993, 'iso_639_1': None, 'file_path': '/8kK5FHLTrKHRT9UJvRnMlvEhvvk.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 662}, {'aspect_ratio': 0.667, 'height': 1242, 'iso_639_1': 'en', 'file_path': '/dhSlbHJU9qGruyPmupchkDV41kc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 828}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/mJgVk2lvmvZtwQwfq7H71fs1xVQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/dQ7pAZt4vpYA04dHpOOqYfhADuS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vYPgI0pGfiJOI41JX4lN9c70MCL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/pvAYIDWwaQglnKjJGIGwDq02vzA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gqvkZN4yJwaWXLdawiY6SByPNgp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/bVsNuqh2hPEiX17xmUEhA6726FF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2814, 'iso_639_1': 'en', 'file_path': '/8TjRK4ltj94BIq6d5N3aUPJSnrB.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1876}, {'aspect_ratio': 0.667, 'height': 1684, 'iso_639_1': 'en', 'file_path': '/obQY1Ey2M5txxmJZfYSFBzPyMXX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1124}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/spqqZhj0r8VM62hLrv3DwHyyG8E.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': None, 'file_path': '/jmtTd2RLeIK1JXYhZ9EW2Byj8i9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 600}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/iXQUHNghW2FsOxWifI1wWx87XOQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/7wSj4SRrmiuB54VGXKNB2X0RzQt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.666, 'height': 1121, 'iso_639_1': 'en', 'file_path': '/jkTXanEbEreyPBfmJXabl4vErOz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 747}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/8rTv325KOZLFjlvYW8r2wVFjHIh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2500, 'iso_639_1': 'en', 'file_path': '/1au2MtEbzmr9WKRnv1w5ZzX0Zbg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1667}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/8fVpaUhCszes7r9EPtQLIvhBJfw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/6nVrUvOygBS8hS4RWClRKYhkN0a.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/oDdYBp1ekTO2ELJwb6SNQoC9Cua.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/p3HyZzJYgw35OJj06OnojkAIjdg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/5Pwoe5rZwYcLEmo3CyeWMND12Sp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'fr', 'file_path': '/7gmYun3b26zyDRDS11Lef8FkAgA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/j21lDOxiJBOoW8ApfVvilSow0GY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.749, 'height': 2669, 'iso_639_1': 'fr', 'file_path': '/zKJYwNZ38BmitETM9ttkG8rvjSF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/tASJpacWyivVyRnUahaxT2cJg5L.jpg', 'vote_average': 5.708, 'vote_count': 9, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/3VijrH8284v86IO3AjG24Ri2jZ1.jpg', 'vote_average': 5.642, 'vote_count': 10, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/72SOtZnFhCumLRZhoXlX8g2IkgF.jpg', 'vote_average': 5.456, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/k68nPLbIST6NP96JmTxmZijEvCA.jpg', 'vote_average': 5.388, 'vote_count': 57, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/bHUmjIqaAAjrQ0p8RqagHgCmG7N.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'el', 'file_path': '/AdkXPG1dBkd8VnuzQIyzh6B2o0X.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 978, 'iso_639_1': 'pl', 'file_path': '/IveefzhRc6Zdd5gzQw3VFjitZP.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 652}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/iKXqUiLFDgeIGozRR6JYRvFmD5A.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.72, 'height': 1000, 'iso_639_1': 'cs', 'file_path': '/hzvQVjmagnpOd1haaJq6IPJI3es.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 720}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/2olsZGB9vcazEoQUI1eoD7NaBXI.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/aCIFMriQh8rvhxpN1IWGgvH0Tlg.jpg', 'vote_average': 5.364, 'vote_count': 31, 'width': 1365}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'zh', 'file_path': '/qs13cxcA7tVTBq0WcgJ9GGplXnK.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/1jU80STrosbPsiNe3oPpwyS5cXg.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.671, 'height': 2918, 'iso_639_1': 'ko', 'file_path': '/ylQRi3edixhzUiubw7LQP1YhI6W.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1958}, {'aspect_ratio': 0.671, 'height': 2917, 'iso_639_1': 'ko', 'file_path': '/4ISu3R5OQQ39aWCzWWYrB9reSQD.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1958}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/ApP2sz8pMkPC5xRlFa3l6MjQINB.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'hr', 'file_path': '/naWwLNGj1cQ0nVz5Ap6CC3cl0RU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/buSr2RIxzJ5Zh6dLaLBsqAdvz3I.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/3nNhvoImY5xos82ZLMhv1jGucGM.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/hsGsdJnjvdXdqXOJyLiJHVecAt5.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.676, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/oEPLD99jMDtX1HabXB4JbHhkGWS.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 676}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/VBEruSTMZfwj1VFqMqGXBqLOro.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/kjMSOw223FtsdMzEOCUvTnyDPFY.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/cRDUa63MeEpOWdqZeXqReDz7KTx.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'fr', 'file_path': '/m2Lb6a38TJbjP9py0Wjml6JtIdm.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/qG5B4146EZHoCRlwYgybl2C060w.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2644, 'iso_639_1': 'sk', 'file_path': '/8Rat9OEsG5Ys9YxPoLpFSwUT3Ct.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1763}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/Ae0pbv4E6YfqfN3UjKWIfQSzP9v.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 2852, 'iso_639_1': 'fr', 'file_path': '/r4aygO7YvOVIl5r9xg5NmI1M6bV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/oRkLA2EkXaRLmK63BkvK74G8tC4.jpg', 'vote_average': 5.3, 'vote_count': 22, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/wRlgk7KLJNUd1Kgct5FimlGgviK.jpg', 'vote_average': 5.292, 'vote_count': 18, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/oh8XmxWlySHgGLlx8QOBmq9k72j.jpg', 'vote_average': 5.282, 'vote_count': 14, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7wHx4Vk0NExuzZuGk2KRuc8Ogw8.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/q8Py71q2dnjdZOoB6BGcUkgmy0d.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rrKH3VhHssGTCfPuaEQkxvEoElv.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1200, 'iso_639_1': 'es', 'file_path': '/jFAi1Uv3JjNPEgjKuneG5mBlAvA.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 810}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'de', 'file_path': '/jutsxphSGbnpxpGr23xzbf2ziQZ.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2250, 'iso_639_1': 'en', 'file_path': '/igGF5CJwfsHBXO515sQbHmEwwKb.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8W7GrgHc9FdfFhExGLSD8woZaSd.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/pBtBqPcNocjYEzVqSOzW5HQlx0E.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/n0zcpLDR6cbmPgWrIWTleGeI24j.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2046, 'iso_639_1': 'en', 'file_path': '/zukO7q7I4kBQhEMZFSnDkVx6rm6.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 2880, 'iso_639_1': 'en', 'file_path': '/20OxuK7i84dlrYLZkWXCYD595bZ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1920}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/w93KBwtAyLRHSwPApC9ojVbblz3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/hTAIqYYXDHqe8xPFV5cH4ElxCqb.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/iGkkhRzdtzg56zbCOpIi9XosVps.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 1280, 'iso_639_1': 'es', 'file_path': '/sJfBFmPBgBuE4bn6LeGzt3548wc.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 890}, {'aspect_ratio': 0.675, 'height': 2700, 'iso_639_1': 'en', 'file_path': '/gXFO3yijIcE81ToS8fex5fckQs6.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1822}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bbsLQa2MFfjkKN1jiLJniuoVmnr.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/e17TGZsyJuV8SoSmjBpYyxpWDkF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/m96dj44zZJ8TxpaMZDJv63TldZh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 960, 'iso_639_1': 'th', 'file_path': '/26UM1gxWL7siq8TdTWVoioirhiz.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 648}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'tr', 'file_path': '/dj6ji5YuvYK4TqfrI7N3EwoRstA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/fxWdGXi70vp3FmMwVUgaFOuz7p5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/t20YrhZQzVKTcUarWb8hvkuVdhR.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/953c71N8KDhL0FGfFjbHltwVmNj.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gr8rLs4QSu3c7sksYxUXqAvjTtL.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/uC2Us1kfVCbTfx0rvqwqgIIjDeu.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ba6WSxKmNzfeK1XnfrNDYfU3rJN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 750, 'iso_639_1': 'en', 'file_path': '/z1NOLVngacgijfaInk6NH9teHA8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 506}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/yrp3FwZnPk76nB4YTnVCRkLUWA8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 951}, {'aspect_ratio': 0.675, 'height': 2046, 'iso_639_1': 'en', 'file_path': '/n1It9EmM9R10Z3NGTQFiG1aodpl.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9hMMIbz0Aw9zO2jXoJZPOpBiCtT.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/deLRaMU1cYxp169iIqh0Pt6MbgN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/o4WvqfFGUKIqrGqCRPQQN4LfwPn.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/y0oS0FUbEeeDJ7zB2KneCeGBE0W.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.684, 'height': 1901, 'iso_639_1': 'en', 'file_path': '/51gY7geyCQ7RsFMsySUcBShd1jp.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1300}, {'aspect_ratio': 0.666, 'height': 1936, 'iso_639_1': 'en', 'file_path': '/qEFP7olEpveUjQoJBlVL7jYne5z.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1290}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/658wTC3V8AvrdZGiUKqLzFmbnHq.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1734, 'iso_639_1': 'en', 'file_path': '/zdV05nwIfPUkJaqjENtD1Bz6dqD.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1155}, {'aspect_ratio': 0.667, 'height': 1692, 'iso_639_1': 'en', 'file_path': '/yp8DRbAnJHunlXsrhTppHAezliH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1128}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4l7xavwBLzMO7XDuUSTIWS5xFbv.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/gD60HrHf3E1muyaBTiEZVSsqq3Q.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 2250, 'iso_639_1': 'en', 'file_path': '/vHBk4t6Wf777uRxTlypF28RdLc8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1498}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/VarFilyykk24q2TM72DRGQY7Z9.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/6bBseBvhfnQwWVZUNdyKzDJ2ND7.jpg', 'vote_average': 5.206, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/3oNEdly8PgenWhQSHLZBBFXL5NZ.jpg', 'vote_average': 5.198, 'vote_count': 7, 'width': 800}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'zh', 'file_path': '/p0F78BfKkX9c3JnZILgZe0IFbjh.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1382}, {'aspect_ratio': 0.669, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/jvuXK03Tvq8Ttr4VbvjtbpNv8sV.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 954}, {'aspect_ratio': 0.7, 'height': 1000, 'iso_639_1': 'zh', 'file_path': '/68hZXVFkFGQ7KN3yjPBa5bcLyHf.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 700}, {'aspect_ratio': 0.669, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/dFjRYABWTsUmLdhnxEjWtiVGUQc.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 954}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/s5jxwhLPGI4Xow8GXwenzL1MkwF.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/5egQdoW86PIeMGbMQsaP17LTUGF.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/79n0cePpWjTt8Ge4BRQB87WL0lC.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1367, 'iso_639_1': 'en', 'file_path': '/AtBOlZVuzeIHmlLxBi6vKa7LxSX.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 911}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/ve6nayrO4nCSV7f4kJtyDnRDZXj.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'sv', 'file_path': '/bnP8QQWIHAjz8lyNXyP1aIC9gQy.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/r3576fzKQ1N5mlwT8jZuCn5Arwb.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1423, 'iso_639_1': 'ru', 'file_path': '/vspWqZ3YR7MR1njlehqNChhsJbY.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 960}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'uk', 'file_path': '/aVIT5vpLhRRG0yfTWSqahSuUBy7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1382}, {'aspect_ratio': 0.709, 'height': 776, 'iso_639_1': 'uk', 'file_path': '/als8ezMfZQOU4qCPmWY4fE3dAYQ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 550}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/q3VwIHJifJqW1aB13z7ypYLjIR1.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/g50V0IpNnA9aO2KzUsWx1IOGbl7.jpg', 'vote_average': 5.146, 'vote_count': 10, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4QUBQUtHfGVOPA5FJr9ylj7qfk4.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/ufxaLyyrpjKTBf6s95xDMMBFhv8.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/2BcA6OuvAcZYGHYT9cGnz4OaG5w.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'fr', 'file_path': '/wi5c5ui75273L8Xy7utfQ338JVM.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1080}, {'aspect_ratio': 0.675, 'height': 1553, 'iso_639_1': 'zh', 'file_path': '/ikH6hPtVBAjDJrfEPWV0WsdZOou.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1049}, {'aspect_ratio': 0.707, 'height': 2808, 'iso_639_1': 'de', 'file_path': '/rvFPyynleFmssvkHkETR5dfA4wQ.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1985}, {'aspect_ratio': 0.707, 'height': 2694, 'iso_639_1': 'de', 'file_path': '/3ethyYcHylFB0MQaR9Re8XipD9Q.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1905}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/n43gtda4d9MpkQOJuDiZsghyuDF.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'it', 'file_path': '/zyhbCFImhQZGUpaR0YxQo9cS8ug.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 640}, {'aspect_ratio': 0.75, 'height': 2184, 'iso_639_1': 'fr', 'file_path': '/n3r7TJ4Jg7IMLfjox9DKf20INrM.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1638}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'fr', 'file_path': '/iFuUdZ8Sf3aUloLrwRkE9eZe9qn.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/lvGVvKUNjkYMsCiWRQvx0zmOSgf.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1080, 'iso_639_1': 'fr', 'file_path': '/wUFgurjdZ0CZLOpDddED61LsECp.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 729}, {'aspect_ratio': 0.675, 'height': 1080, 'iso_639_1': 'es', 'file_path': '/67p7XVP5SLup521iD9cAayMNt2U.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 729}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/xXnu79NXmxeBel3GN5Q35r5M9IH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/9SG06mt9sdAKPSV24ZwSC0BTJgP.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/gPHolElXk7RZIbtH5DZYy4x89KD.jpg', 'vote_average': 5.068, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/4yap6odXTCy4B5i4yj26CX0PP5u.jpg', 'vote_average': 5.046, 'vote_count': 14, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 1840, 'iso_639_1': 'en', 'file_path': '/fIkVbwSgIbtQoTXoPQFWQQYbTNo.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1227}, {'aspect_ratio': 0.667, 'height': 2025, 'iso_639_1': 'en', 'file_path': '/r3RN7MhELaLa1TswnruOguVpbti.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1350}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/4FcXo5SMDxx3xs6Gy4Hn8ghubjF.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/gtbcNREppG3EtlWPUSBgvQX3wLl.jpg', 'vote_average': 4.954, 'vote_count': 9, 'width': 1382}, {'aspect_ratio': 0.675, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/aqeFTqYgC8LkYUcCP9kPw1mVW38.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 1000}, {'aspect_ratio': 0.679, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/wqgyAiTZwCJglokIViEwAMk6UXR.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 679}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/yj2fK2noJy7IeC7IF7Ck89rGYOI.jpg', 'vote_average': 4.908, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/miydFfLqKN52EG0cRqX3DNVxTEV.jpg', 'vote_average': 4.846, 'vote_count': 11, 'width': 1012}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lM9LUM7oJ9SekpzLxLGp64ACRBr.jpg', 'vote_average': 4.828, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/vTq8Sq4BJopStWGxDcAkmNThxdM.jpg', 'vote_average': 4.794, 'vote_count': 12, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'zh', 'file_path': '/fZDEaSzIez8VlPs0s0P3qKRshaE.jpg', 'vote_average': 4.774, 'vote_count': 10, 'width': 1000}, {'aspect_ratio': 0.675, 'height': 1482, 'iso_639_1': 'zh', 'file_path': '/lX9WdoJGHMr7pVyV7FNI6dA3M8j.jpg', 'vote_average': 4.756, 'vote_count': 8, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/k9HBfQwoXSTZgw4O6SeuVBYUgiY.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 500}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/hPWQxw5dQH2nKvC8m15aEJvIeJ3.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 500}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lRsEThuzrJuuvj6oCDDXDAxLOFF.jpg', 'vote_average': 4.724, 'vote_count': 11, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/9Nqx2tMrrksmq9aO5oSO0NzUEAf.jpg', 'vote_average': 4.674, 'vote_count': 12, 'width': 1400}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'en', 'file_path': '/rskwnqit2uNIGzdaRiK9xlDIcdK.jpg', 'vote_average': 4.576, 'vote_count': 14, 'width': 675}, {'aspect_ratio': 0.671, 'height': 1945, 'iso_639_1': 'ko', 'file_path': '/aHt13urK4fzrOr30yHVmGT6OsE6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1305}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/4xbiHTdPSlVKtYpTu4nABh9HfGH.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/jeHQIDSIa4vJBQPztVOHr39Z6ah.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/dFafJVFABS5A0rZ5gThMHO3lH8V.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cs', 'file_path': '/lhauCTw99l7NLHNMnosVcM9AR4K.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'uk', 'file_path': '/3axgBjjEgEm0BFWViSkfuyBQcab.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ar', 'file_path': '/iN8mhL0vSIxsTetkmE3XsJedvAv.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ar', 'file_path': '/1haRSMcIshKnVUljJF6sxr0luH9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/eMTAAOl7t37LXSfmmwQgZUQjjna.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/qnoKl9QhIfQ9ooPAltuAQgO4PdQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/k2hAyRUMu2yMWImzwJ0be1EK4mA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 978, 'iso_639_1': 'pl', 'file_path': '/akyYzv6aF8EpIFp5Q7J5gBwOPys.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 652}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ja', 'file_path': '/azzqSt3XPpRRIYyh0WT6rs2BCe7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1200, 'iso_639_1': 'vi', 'file_path': '/nSaf4wrXgifAZZ52ncKuXBuR989.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 810}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'vi', 'file_path': '/6yEC8Vzeb8Jb2v92WDDlwE7o6Qp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/vrXFOYjBMXjsVgTZTNGvX5cwsVi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/8rmXY2DH0emfwwT1hsoGkh91bTR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'tr', 'file_path': '/n8gzKzi8tvpTZh0Ev8B5c5T6Lm2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'tr', 'file_path': '/incFPFFoGrnDR6xRtEACqkug4vN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/sdS5LoMq4ELi9oPJdqDkn3nY3Jz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/7iUA9SKVHzplTIxkXsVshlAYCtX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/rpfDaRMIbEXXHXN7EfNkfLqQe0b.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ta', 'file_path': '/bngxk1DYQD8rzkXeyDTf9afqQS2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/jDO05iH7DkjEkTiZcLvT9MAID3k.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/eQy2Dceeeg31cpLuLxyyGwHgq3N.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uG3LanNAPENQSVWzSCSBMzJ8vEI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'da', 'file_path': '/wdUzLcYKDuEk5hRQBy4GPWaWsU9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ywl38WqU29S8S9w6h1foR9jYyRR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/f6IjjhzR3tvPCKhWAybsyGgF0aj.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/g1fDu3g7BsEScobygmBiZB6y7HU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.674, 'height': 2136, 'iso_639_1': 'ar', 'file_path': '/jlOxsDp0ehXpYjymkzza9NCrTe7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/ggFZHu542Iy3Uswh3iydOnrxQaP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/e8xHyx6xnvwOEJyFF7cyyJ8vBg2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/lrFsBGRdZtLNpMYPiQLu6iQFi0M.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 2160, 'iso_639_1': 'ar', 'file_path': '/ggm8X8fgwoqUoIqE8QDcKxScLlW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1440}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gyMGax60ToZCkoKOKEkTDEzfUt1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/WukyEfsKP21vRahgU8oAPwFsj2.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/GqAWQHdEHS0dzyTfGFGXJtIaq7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 750, 'iso_639_1': 'zh', 'file_path': '/tVe3xHC97imJoyfZ1KaE55AdngU.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 506}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/epoids15egPuq933RvT0Y34L478.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/ovMjFDybSgGTkeboRl7NW1pxQwJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'uk', 'file_path': '/2IRYjm9TPKOcAN05JQI7p83OYfc.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 889, 'iso_639_1': 'ro', 'file_path': '/8hGCmXRQwg1oFRPSoELXb5Y2qMy.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 592}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/zDktJ7HvvPmQfmODoQr82Vqixas.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/trcTyjkrPtJOs3VAhsKg4VXD4e3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/1Kp80UumFADxoujem4f9XUdorns.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/c2JahdNbxE3tnuqkHzc0PV5mmaf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.676, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/uC8TeYMb21Wbp7vBJxkdLSCVowF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 676}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/dXEz6T9l4beYMLFQCz8CaxGahrA.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/45xZh9ckG0G1G1KDo3b3SMpCepI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.676, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/qA0AXOdnFdEqQ5QOkXpPNBJsSaC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 676}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/qJ6BS0pq5MmHt9eJRDIOpI6HQbr.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/zpIqjUYkRHOECYjrNIT3Q5n8E3I.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/2y9JfYSDiFLuQE883SpHjsqg725.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/pnK4oL7yhFVAvcIDgTw2qvxmcQq.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.675, 'height': 1000, 'iso_639_1': 'th', 'file_path': '/qijkW9NBsX620z2oIO5rSIMgkZK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 675}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2jh51rEBFF4xd01mFeVaIuEB5Zs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/wY5ADCiNmcriq4ztk8vFdmLLPZa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1364}, {'aspect_ratio': 0.702, 'height': 997, 'iso_639_1': 'en', 'file_path': '/mlOQtpJ21PwrhJMWT82HTcR66f1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.667, 'height': 1049, 'iso_639_1': 'en', 'file_path': '/gqXcpvR0XbaAKdjUOFyhMnMYyCh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.675, 'height': 1353, 'iso_639_1': 'en', 'file_path': '/3p4m0xZDxEiJlMtfaBlJrDoRd94.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 913}, {'aspect_ratio': 0.675, 'height': 2964, 'iso_639_1': 'en', 'file_path': '/ikprp0ljmuqwAKVF7loD0RYB1R3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.707, 'height': 990, 'iso_639_1': 'en', 'file_path': '/t6Ci35eRRUgjheNjwvDlnZasLAz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 700}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/vqPN7tSObfi2samod5YMWk3hd1T.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.667, 'height': 2600, 'iso_639_1': 'hi', 'file_path': '/f9zhIg8M1X1tFpHFUEA3scA6OYb.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1734}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/gfK480aiP5YP6LOLMcGwuCqUwod.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/4hyLO3l1QPnaL8nelSF9gcQP6Zu.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'th', 'file_path': '/5ie13iRwU9fwpNlaSvy10NJQdob.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.666, 'height': 2000, 'iso_639_1': 'en', 'file_path': '/ofEnRAtapT6QDNQRgKRnEkGi9TJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1333}, {'aspect_ratio': 0.707, 'height': 1122, 'iso_639_1': 'no', 'file_path': '/w2PVxCxX9uXgji5XKBjTh6ZYV5k.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 793}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/biB1eiXO8Gtlm3f9V6qztEOipCw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1382}, {'aspect_ratio': 0.666, 'height': 1642, 'iso_639_1': 'en', 'file_path': '/c9o3YTki4jE2KBn2U2JypADzi3l.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1094}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'fa', 'file_path': '/k2az1QwAcRojG2DkMgq547cuUtm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1493, 'iso_639_1': 'en', 'file_path': '/rGMA2oKiBQJnCiyk1jTFripWnh6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 996}, {'aspect_ratio': 0.666, 'height': 2815, 'iso_639_1': 'en', 'file_path': '/osnMHdJcOtRn9Tt0UStGmjSW8a3.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1876}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/e6rWRXmXNIAbhLTxxWyL47Gl83U.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/eS4JP1cUqDDxSCl0SZ7N8fi5DDi.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9kw2rw8qDeNBsyfaPQ9X2AVyI0Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/fmMkJ2OK8Kil3RDOErXeFyfp3c9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/pHgdMEMLByURAvRExapzplW7zXV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/cUvsymH3xbOqaCsEp9UpLqxuyvF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/cIsad2oTEgIStgknjKR3uaQM16O.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': None, 'file_path': '/dPIhW8H3wcPuYSCkJddbeEcOYia.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/wgZH8JYBRL10gt6UjKzxPKWUl2w.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/2RvO5Q8i3Cv9ExSqPtRb64yBTPT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ja', 'file_path': '/6iQh1aekQjRYxS2U9rofwGocjfZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8vQuVYhXSbkrPajWxDlHPG7AdHS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.675, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/wxwlG0M23uNvXglZ2ScUZYb9z6W.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.665, 'height': 1994, 'iso_639_1': 'en', 'file_path': '/mGb10FlelkIYQe5OPidEKsNtZmt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1327}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/srfebAZOcvZJHy0gMtI8TCwigCS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 981, 'iso_639_1': 'sk', 'file_path': '/zbKHN5YeKCjdYE6JPrJFhkbdKQR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 654}, {'aspect_ratio': 0.674, 'height': 949, 'iso_639_1': 'en', 'file_path': '/8JnqTXhjaLnTFkvPOoSdvofzPn7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 640}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4BVUrRjMj5WiyjRnHURfmAWxWME.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1000, 'iso_639_1': None, 'file_path': '/rQ884232vYo3pbm0Ov1bCrMy6Zp.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 666}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hr0L2aueqlP2BYUblTTjmtn0hw4.jpg', 'vote_average': 5.458, 'vote_count': 15, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'zh', 'file_path': '/rcqIPCMhvYpreMHzMuHiezQqBK3.jpg', 'vote_average': 5.586, 'vote_count': 7, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/rrS7K8tXVFUBliIKWaRuSq65nWr.jpg', 'vote_average': 5.522, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/8JoNBc8AMLcTXbAURDJXXZpTo9j.jpg', 'vote_average': 5.522, 'vote_count': 6, 'width': 951}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/ApcGBERN0p9I0nDOIwJeEmpnLU5.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/8JCu1wi83pirpHEbVpmpfowDolX.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1600, 'iso_639_1': 'ja', 'file_path': '/sJTxiMt4slbmTnQoV5UyA2HlYx4.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 1068}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'en', 'file_path': '/85cWkCVftiVs0BVey6pxX8uNmLt.jpg', 'vote_average': 5.346, 'vote_count': 17, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 2366, 'iso_639_1': 'en', 'file_path': '/bOizb8SnashwNbFCpwie5pmLi1m.jpg', 'vote_average': 5.326, 'vote_count': 7, 'width': 1577}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/ht5Jqka646AW8P3IsdrUPf8W8La.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'ja', 'file_path': '/mQyK6KLWCwvrG8lBpfDWEWd6lK1.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/bfezKMcrzCIU4p72SljoZMjJUsW.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/9LfroB8zJD7HqP5hsxeDPHrzbw0.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/oWIhEWtHbSlvttp5qbBEutPOV7G.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'sk', 'file_path': '/vvPsRFPzOMqnlzbFfxYR2EPqUeg.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/guMc9QD270iEVYLpEJiAndSyO7G.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/1Z07Kqke0JyOn3ODt2t3qd2CEpN.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/wUpqWb7YZW1Jz2oyF4UJgItYXDC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 900, 'iso_639_1': 'el', 'file_path': '/mKq0xiEM0BoETIJ3Mrs4lc5Oamw.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 600}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/3viEo7Rt7swwh573wBCZffcM7eo.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'tr', 'file_path': '/jtB2vPm7Drpw0AToSxKIcxjRcgC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 862, 'iso_639_1': 'tr', 'file_path': '/f1Lt6pJEb25LVEIodLxZDgIhTks.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 574}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/2NaeRiOuxkpWv8s0uBzSlp7SuCn.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gP3KJvuqZGwYEZ0BWXNadYAMFO3.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.75, 'height': 960, 'iso_639_1': None, 'file_path': '/jpoA8SXWQpCsEXDeXbK6xoKccWV.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 720}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/c0GcUqVFuklMyuNJuag3NRpGZpu.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/eq5P71YHwwaacEYKaQ72Wxy6BlT.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/rc1iRerRJIw3iStmlsdQIZUp49J.jpg', 'vote_average': 5.27, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/mBxOeqHQvdF5lxGtDUB6XVcJNi5.jpg', 'vote_average': 5.264, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/6XDLzDabcJpuURgilfSTX080lNZ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/ws4Hj54pdDsk2DdIEPDwZU8z5KT.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2366, 'iso_639_1': 'en', 'file_path': '/eTOmj92I7sLydsEXoHE4UPFjynG.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1577}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/tTiMHKsTeA30CXJS3byz2jG1MlR.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.686, 'height': 1311, 'iso_639_1': 'ko', 'file_path': '/stbZZs3WMPr9rvAT92Qd8gXCUfx.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 900}, {'aspect_ratio': 0.695, 'height': 1920, 'iso_639_1': 'ko', 'file_path': '/1EePZmyG7B1Gm9qubLWVtlICDiG.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1335}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/70fWwkCYjsHPhPRUF9OydhbEkVC.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/4Op2hWPNa5JygwbmLs1O1pDAm7L.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/fN0YkgaNUNR8Tf2d4MdpaHwREg8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/pi6mwFCtTDIAHOHWan4AQ36Tdh2.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oAletUf008Es7TQmWIZjjPTQw1R.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1426, 'iso_639_1': 'en', 'file_path': '/3dboviWGRZdGHXVEKqCU6jq5BX3.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 951}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/xwfcNOXVaaauEG6zX73ECq5Vj6k.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.667, 'height': 919, 'iso_639_1': 'en', 'file_path': '/j3U7vzNilUnu3E3zMgBaSSRhTqF.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 613}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/ezAOlzdExzNXzmsTxQUTwo6F3gZ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/df17TKgMV104fbEIfPstCkAvBbe.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/s9oQj6ZzPDVeQctL8ZDVchtDquw.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/1u2GII8LtwIRWLyGTotC6AlIZL8.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/u0HJjTs5ZQd7jL9QG4mVyUVYqQD.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/fp7cZ3ENxJmKBSA46XrkqGmSZdx.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/h9x3h93HG5iCjevWwUppofmkuwW.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/i6Wdrls4gsFXmwbC2MYmabHOWzn.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/wDnmRGxiA2lUgmxgoFtYdvvzYVN.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/3eYugifQ739WRTuG6q5CumYpB6.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/tQnmavK2agVr1jz0CEnPa0hsYBp.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.666, 'height': 1166, 'iso_639_1': 'en', 'file_path': '/8EF7hJ1lWRA7ngk1SR0TePbYD6n.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 777}, {'aspect_ratio': 0.667, 'height': 1515, 'iso_639_1': 'en', 'file_path': '/6Y3tH8PrZKr0Cv6KroaWlvMIlaU.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1010}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vzvKcPQ4o7TjWeGIn0aGC9FeVNu.jpg', 'vote_average': 5.206, 'vote_count': 9, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/hrJUZ5Jo2G3Czy391evhlxgbEdJ.jpg', 'vote_average': 5.206, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2215, 'iso_639_1': 'es', 'file_path': '/rOD0IgjAop4LA2vuimhNRLyGijf.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 1477}, {'aspect_ratio': 0.667, 'height': 1074, 'iso_639_1': 'pt', 'file_path': '/zRwO5BPPgkTNo1PoomZPE7wkKvQ.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 716}, {'aspect_ratio': 0.668, 'height': 1123, 'iso_639_1': 'en', 'file_path': '/irP27RDYv9JjF7fVPKYKUODhr0S.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 750}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'it', 'file_path': '/p2JzxFRAlbxS4EvWMo4yiYZXu1W.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'pt', 'file_path': '/d9EYFtoo4QJMCl5qWzS8zAblAlf.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/nIImGBHeBW90jAxCpp7RwGN2Mgk.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.659, 'height': 990, 'iso_639_1': 'en', 'file_path': '/v4FHdJCRg94cOKX9hwKU9aTad7k.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 652}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'it', 'file_path': '/tCQtssGTb74NQV198XaaTFOxywV.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/z5bRqRQv9UIieAuySQ82CTmtU6t.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/8AYfVmtQX0MgcaAMmowLkvQv47K.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/hg9rnax7IcerZOiOvi2oEshBt7f.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/mZrnY7zrfEqjJKJT8UFs03QlTpe.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'hu', 'file_path': '/tFB5SGE30So69tRz7mebiMSCFZ3.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1401}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'fr', 'file_path': '/pU1DqL2OhZY8i1FLb74qYWMGASa.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 1337, 'iso_639_1': 'pt', 'file_path': '/dqlxzH1DEIFTSYCv6HM0C1sxVB7.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 892}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'it', 'file_path': '/nOI2Siljlsi0HbzVpcaP2zaI3qO.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.675, 'height': 1481, 'iso_639_1': 'en', 'file_path': '/lAFXWGCUAPSF6v671gaobbfz9mq.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/3opgrJowXttqeFgLRzIdHTLmdHI.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2100, 'iso_639_1': 'es', 'file_path': '/jDheQYsH7fwtTon6354CWxLxnbc.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1400}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/gaivVSK2pOIOAWNGGKyMGpIAC2z.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/hDni6zlvNgGW4Li3SIdzhsL54uI.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.684, 'height': 750, 'iso_639_1': 'en', 'file_path': '/A3omWIGbMcGTP43nbQBn75qHjei.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 513}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'hu', 'file_path': '/6OApdDSChDhlNmi5L2NdL4fverK.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/211ixGjXqxXNe2yeYZTAG5sd4HU.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1434}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/iRpMKBjY1sXcRWL6monOQKBfzAJ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1434}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/je9RusBcFosNylhdRrweTkLkamx.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1433}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/a14jV8DjI5enrPMX3MIRxBoXoMP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1434}, {'aspect_ratio': 0.7, 'height': 2048, 'iso_639_1': 'it', 'file_path': '/v1jB1xjTZpW5TYtLaHnagIErFsp.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1433}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/z4h5z2ultilQ4KaEhD2dSsYbqB.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.709, 'height': 2820, 'iso_639_1': 'uk', 'file_path': '/9gtc3GLDCeLZ9vhaq2e0PZQyGDo.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gegAwg4aVl3jpS3oi8sij7fpArL.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/lEeOaKZf16R1cZCuryP859SKgE7.jpg', 'vote_average': 5.138, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.742, 'height': 2096, 'iso_639_1': 'en', 'file_path': '/nYvQZLi9P7kmR3lmgkp5tujxiMP.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1555}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'es', 'file_path': '/uG4D95vfcZ3SQc7AMpvQCy2kfCT.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/bZhj71lpvfAIkHUMdvgftD2h1bY.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.668, 'height': 1498, 'iso_639_1': 'en', 'file_path': '/kOKvBKLCiUx1yk8wVNvp3e1DBWt.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2999, 'iso_639_1': 'en', 'file_path': '/s9ZLJz5haARLcLm8GGvAeTSslqc.jpg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1999}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/6Wkqvkg5EMaJMLuacz4sz8T9ijp.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/5xM2crlkyRwtbbfMQFb26A6NVmr.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/6YUrt0c9Q30UpUYskc0ppbO7DXH.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/s6Kf3qHvRKjnZjyVj7YcbhTHrxi.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/zGoxNkACbex9VoAmJS6iAQvXoHs.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1365}, {'aspect_ratio': 0.667, 'height': 2366, 'iso_639_1': 'en', 'file_path': '/nQfJRcsHoEnPX0RY1oHJqQl2gI4.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1577}, {'aspect_ratio': 0.699, 'height': 1700, 'iso_639_1': 'it', 'file_path': '/h7go9xdRhf4fE7rkDzWe7eGUxR6.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1189}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/oKXQPPmeAf4zMK5L9WzQuItTI9y.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vak0Hclk3ih11ljYdp6HPYZ1czh.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.676, 'height': 1183, 'iso_639_1': 'en', 'file_path': '/lNYltGAlgtyNmuGKHoX8iQAeit9.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/icpIopNi4fFtgxlcWeRDH5nZPG4.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.7, 'height': 960, 'iso_639_1': 'it', 'file_path': '/fA2hFBbo1Y8sSIUtUAkUn8UiICI.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 672}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/3gdTo4OmciK2nGFBtAazDpozP95.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/4w4TQUzYmiz99Pg5OqjUt1TOEAe.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 1000}, {'aspect_ratio': 0.655, 'height': 1648, 'iso_639_1': 'zh', 'file_path': '/bVnHnrojrIUMLnLDSSXi3krg4VJ.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 1080}, {'aspect_ratio': 0.742, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/zInSl0P8Rk04mgAHz4E1xR1hmmH.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1187}, {'aspect_ratio': 0.692, 'height': 1228, 'iso_639_1': 'bg', 'file_path': '/vt3Jf9fzHKO2WYQNCQQTsXJcdCM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 850}, {'aspect_ratio': 0.693, 'height': 796, 'iso_639_1': 'he', 'file_path': '/y0I9F5u7yianHQuFYzy8xsR94q9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 552}, {'aspect_ratio': 0.667, 'height': 2011, 'iso_639_1': 'cs', 'file_path': '/guG09K0cxo9UJMBlbYRTwh2GylW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1341}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/poNBHaE54CXOtTjmAcnrb729pDQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/xbXzUM2cQoaHNUJrp6kOKFkf3LL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/8MhqFD41aixsEGKQAfycoH4RSR5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/osjIjyDc6le4lqqNZvq9d5qj0jC.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/mhiwE3OIgeURZcAecAR1Ew6W2sQ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.671, 'height': 2333, 'iso_639_1': 'ko', 'file_path': '/vXVked88FPWAqVJNX7qqFarBWMP.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1566}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/i5BTtItJTaqGoZ0hEKlj5SzQOkh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.71, 'height': 1127, 'iso_639_1': 'cn', 'file_path': '/ghmlIwKMK1c0cQDmGH9fnIarQ0t.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.711, 'height': 1407, 'iso_639_1': 'cn', 'file_path': '/zj7PZtHjCOOw1nZ5lARNL4CafaX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/rJFbUt5CVBxOzJkrmaEnGJtma5x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.695, 'height': 2304, 'iso_639_1': 'ko', 'file_path': '/u3y3Ex9c69T4hRBZcIIPIrKUXsw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1602}, {'aspect_ratio': 0.75, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/7eNOyX67wrsmJpuFeVmjzVL9KWw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1125}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fi', 'file_path': '/aojNRY7yRJIQ51nkW2q0ApQ9vol.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/cKEM1ERV1lqVH83F95845FO8AW6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'zh', 'file_path': '/rFiVxVt83lFU5e3UyUjePo8wKeR.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.663, 'height': 754, 'iso_639_1': 'en', 'file_path': '/dAUwS3wmSrA9IH02xukDKxB6CQK.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.705, 'height': 750, 'iso_639_1': 'en', 'file_path': '/4tkTHjYJ7UHRDLZc1gfQzmEj6Qo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 529}, {'aspect_ratio': 0.7, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/zzcwe9aqLY39rEwULxYmSfOlWuF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 525}, {'aspect_ratio': 0.705, 'height': 750, 'iso_639_1': 'en', 'file_path': '/taqB3T5bt7rgYPozK56GQfU3aBf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 529}, {'aspect_ratio': 0.675, 'height': 1280, 'iso_639_1': 'en', 'file_path': '/zhHWbDF0BdCSUoLmcQMHDqM8cBI.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 864}, {'aspect_ratio': 0.724, 'height': 750, 'iso_639_1': 'pl', 'file_path': '/mepdUhSur3MXxM8VCuMaJwLShFJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 543}, {'aspect_ratio': 0.667, 'height': 1440, 'iso_639_1': 'it', 'file_path': '/pDc2SDH2ndElbg93aR2Id9eTgoJ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 960}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/qVs4jjEngrT71XLclmmJKMr2h72.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/tTOiMCTNSZ1IbLF0GkhKsO5YUb6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/6doRIUrCTNjUEk2WzC3DU6QMG4U.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1080, 'iso_639_1': 'en', 'file_path': '/bxdRr1isvADfem0j3W5ZwSG6fE6.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 720}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/xHzULcM3LKhw532adNt54SMfdmG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.71, 'height': 2048, 'iso_639_1': 'cn', 'file_path': '/8murHJQyYQezDHm3CHn261Zw2zs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1455}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/vIZ4X0FTDNoxhlvGKwv17CEnpUo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/iWsnznzdtlgMYBaftnLbu8i1wkg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/zlvv836AMk92uUUWIFY1DWeRUn4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}, {'aspect_ratio': 0.707, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bkbIkAPWoVsDFJK7ria2fOBFw1A.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1061}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/eQ72Hdf6sKBOnzA1HWTx5jYeuzE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/1I0wbQjSg7M2sXj5M6rllkl8sET.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1600, 'iso_639_1': 'en', 'file_path': '/uZ9i1ivL7rtqY6Z4FxgGkSnF4mZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1066}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'en', 'file_path': '/drfusGgi3MnZs7WQROzmWRdCIhf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.666, 'height': 1688, 'iso_639_1': 'en', 'file_path': '/8oKHBckmdhH4EVhH8CE0R2IxTrw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1125}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'en', 'file_path': '/5oZO16FhBzkZ1LcMKIlm92PQQsD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1280}, {'aspect_ratio': 0.666, 'height': 1920, 'iso_639_1': 'en', 'file_path': '/MaLLF6QmfoZvGy4RH3vQTu3eWD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1279}, {'aspect_ratio': 0.672, 'height': 2197, 'iso_639_1': 'ro', 'file_path': '/kGbx95vZRmJGv6yiwDs3GyvK5LF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1476}, {'aspect_ratio': 0.667, 'height': 2147, 'iso_639_1': 'ja', 'file_path': '/z6i9Qc7UMtiSX6TbK2BpfMrFWJN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1431}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'vi', 'file_path': '/1ua0jberyWnXlOQ9JXpVLTb9vjS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'el', 'file_path': '/d2ir64IkXExrdLgJXtbqNEduAhZ.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/1HQavodBAhgkLqr29PPt4Jy2ebF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/jg7vZUBlhF9I3JAGyOjLtPi8N7Q.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bhNfqgdaf8QuVvT75sLx26UzdpE.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bcRK1ykUiB0PKGVIvjf0UTlamus.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/vmwSCgBIkvJAKqmEPIByHqH4px0.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/zjlAlpz5HaUL9bZQGg4SYqH55Oo.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/3AEGRu7g8U1dwvyvMQmpsQlzODD.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hr', 'file_path': '/hPnKJDvliL2cOHFL8xPZ2BmcJ5a.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/9wvNBOWpUpqAP4IquQWtNar77av.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1583, 'iso_639_1': 'en', 'file_path': '/eqFhruWEIRwjkvqgJN48VPuR50Q.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1055}, {'aspect_ratio': 0.667, 'height': 853, 'iso_639_1': None, 'file_path': '/geKOL5vnXoqTEH8D2qVoYGIkfys.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 569}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg', 'vote_average': 4.982, 'vote_count': 123, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/ptpr0kGAckfQkJeJIt8st5dglvd.jpg', 'vote_average': 6.24, 'vote_count': 89, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/q2uyutja5fBQJ595oEAfticrcfU.jpg', 'vote_average': 5.88, 'vote_count': 124, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/e5H3wpl1t4EOzad9LpjJAhNPka4.jpg', 'vote_average': 5.79, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/boAUuJBeID7VNp4L7LNMQs8mfQS.jpg', 'vote_average': 5.586, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aqZ75oN6yd7UTShYIMNlpSdDbbH.jpg', 'vote_average': 5.568, 'vote_count': 70, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2y48XTa483LRFIb5fDKOwr8DHWz.jpg', 'vote_average': 5.5, 'vote_count': 68, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/gC88YsrMe1sKCctzfnV955tcr6c.jpg', 'vote_average': 5.46, 'vote_count': 29, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/eHjIEiEKTnb9euehI7IbCxtGH5N.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/9AiHV08v8RyyuHcO5wuTaTXBxfe.jpg', 'vote_average': 5.454, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/4mHVnPcbOmycA5n3AKREsNho1tO.jpg', 'vote_average': 5.412, 'vote_count': 30, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1575, 'iso_639_1': 'zh', 'file_path': '/aGfEOxRPwp5lEeYfUU0cBpQ0k9K.jpg', 'vote_average': 5.412, 'vote_count': 30, 'width': 1050}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/55Mshyp5vXEyZYlGF9phGdR2gsG.jpg', 'vote_average': 5.398, 'vote_count': 14, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/a6v21Mgz2w6OQL7ezkQxGbGA92W.jpg', 'vote_average': 5.396, 'vote_count': 12, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/3yw39HIxi8bS3i0I75GygeOGVbL.jpg', 'vote_average': 5.39, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/ncKCQVXgk4BcQV6XbvesgZ2zLvZ.jpg', 'vote_average': 5.388, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/iAv3HAlrrIgjcf2yCFvedJzekXT.jpg', 'vote_average': 5.384, 'vote_count': 51, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/8OQzw8keE6sDNH25sOqPRTxhFTO.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/oPfQrmf2YgwSKKdaqDohtk0LciQ.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pt', 'file_path': '/c0DCmfC7Et2K3URnIJ4ahJpeXR2.jpg', 'vote_average': 5.384, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/rc2naqhwFHtl5xzut3KlUQKed9x.jpg', 'vote_average': 5.372, 'vote_count': 37, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aiFAq6HrEENrP2Hs9UCrjC9siVI.jpg', 'vote_average': 5.342, 'vote_count': 48, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1894, 'iso_639_1': 'es', 'file_path': '/8HCoPfguQ3u1QhiunBBJxHSy2K1.jpg', 'vote_average': 5.322, 'vote_count': 5, 'width': 1263}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ar', 'file_path': '/fj4Sw2PihpjJkkeyhAWV5x933no.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2048, 'iso_639_1': 'tr', 'file_path': '/mmZi0tyPFfbcCqEsJIPxVldCPOL.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1364}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/oejIAXQupayIdy2H5FKXidNGj02.jpg', 'vote_average': 5.318, 'vote_count': 3, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'vi', 'file_path': '/ixLH2iM9at8BbuLr5wQWnCfwhJO.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ar', 'file_path': '/qsX1in0bR35lbtS0m9Sdaal02K4.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1284, 'iso_639_1': 'he', 'file_path': '/ywj717tJsdtMjD1iC4dCrSJAYTw.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 856}, {'aspect_ratio': 0.667, 'height': 1863, 'iso_639_1': 'ar', 'file_path': '/2AXxc5qrYsix01mD7uyy7PTMnQq.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1242}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'hu', 'file_path': '/89fbqq5nnnzroLpD13T4TJ55Llf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2380, 'iso_639_1': 'cs', 'file_path': '/uwOo42nxRKeD5pyG2aREp0Dfu2a.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1587}, {'aspect_ratio': 0.667, 'height': 1941, 'iso_639_1': 'ar', 'file_path': '/95mVJrYVxxZX8y7IA9QJWw21Sxe.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1294}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'bg', 'file_path': '/ooOGz4YyBgp7EewnnpavQISCr25.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'kk', 'file_path': '/yyChRudT9X0C4234kvTSNsvXirf.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 2846, 'iso_639_1': 'ar', 'file_path': '/cEhBHpf1tyaYM4nMAd6PW9a3oZ3.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1896}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'el', 'file_path': '/efoCIdMmNgSdOlsNwovGxByjlOR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/3syYwwZbmk8xRhFKBYvbiY0B037.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fa', 'file_path': '/vkecMXHRfnQ2G3n3BBbRXlrsLbR.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/joNffSkuJd4n4GlzDhmCJFwpDyC.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ro', 'file_path': '/3sUflKm4wyhABAcgSxiB8zDJ3WJ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/5t05uhX5ULn8Um2f1ZuznVvIffU.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'de', 'file_path': '/k1qmORaMZVfF5vQArYJD8PODapt.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.708, 'height': 2542, 'iso_639_1': 'de', 'file_path': '/vrcpQICJZvIfhstaWhprHP2t1pJ.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 1800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/fRtaxfyynWMJI6DhejyA6JOzVTB.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/jpD6z9fgNe7OqsHoDeAWQWoULde.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/8aL8aGfyKo3KsmLJXuuPZVCeQzB.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'pl', 'file_path': '/qefIXX7dwY8eKfMUcedn98HBMhb.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'pl', 'file_path': '/dt9ODfEeCnHBZn0rRZMLwudeGAo.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/xtiPrwnOI7cMCXwWC32GQLiWRET.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/vTtUTK447f0OQWUYLEouDg8Yank.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/riSS1kglPxjrM4zxnMsCX6zDEqi.jpg', 'vote_average': 5.312, 'vote_count': 1, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/j4KO91h5R4jrXHu3yWw1xBnPmyG.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2976, 'iso_639_1': 'en', 'file_path': '/yg7B62JJbJrkBwiQrRf8vMDogLB.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1984}, {'aspect_ratio': 0.675, 'height': 2048, 'iso_639_1': 'en', 'file_path': '/AvqMWPV1oyhlceU9Eq0LNRkSKe7.jpg', 'vote_average': 5.258, 'vote_count': 6, 'width': 1382}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'ko', 'file_path': '/kAYtsVpE7q6NhLz6vKYAxOM6LmN.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 947}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/2j5oI4E5BRJkdU0UWaelNDo0iZZ.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/649ruw8GkG4Ey5JDMXxJDLC6jfD.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/bNoTicKwuf13iwqSmmGjjJAQac7.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/jvaI1gezzvhkKid00goKxz9fAso.jpg', 'vote_average': 5.252, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aEY57WJu84nUn0b9PknyVAPu3xX.jpg', 'vote_average': 5.248, 'vote_count': 82, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 3000, 'iso_639_1': None, 'file_path': '/47noGzgMSj01xFnpnVUhPeNMfb2.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1999}, {'aspect_ratio': 0.666, 'height': 2048, 'iso_639_1': 'tr', 'file_path': '/ga6K522LfGAlHoTaMbc0kESNn6O.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1364}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'ko', 'file_path': '/4ZLnVUfiCe3wX8Ut9eyujndpyvA.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 947}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/ePpU7vi2awWZOzfiDGVRbdsKnde.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1620, 'iso_639_1': 'fa', 'file_path': '/fjZv6ATsZxMGJDVC8KRATSnnoLH.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1080}, {'aspect_ratio': 0.666, 'height': 1024, 'iso_639_1': 'ru', 'file_path': '/3ZsKFl9BX8bmOoGw2lVmVMHuqdh.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 682}, {'aspect_ratio': 0.667, 'height': 2865, 'iso_639_1': 'ko', 'file_path': '/qxv1LPu17lzOZvOrhtQchU1foxy.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1910}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/aefB62fAcx2OxoaSWMEPt5ezvHQ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/wxcbunCEyKxbhuaTjZv91D4f0a5.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/cZ7GfieJMbcDmb7HzXo32V8gBNT.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 800}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/PnXkWrMH4WHaqD3SjulfK9otmw.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/lrcuwcNiiZjoB68fzvSOPwu9JWv.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/dT00YQDn7wiH5OGO9DziqASAw4j.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/imYs1UAGvlXq0euT2Jee8PbmFWG.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/iCvn9DQkrD1gjizYR7UkOEO1QzQ.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/8ITnnLLlOB7XhZsj8WOhpICFX5i.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.679, 'height': 1236, 'iso_639_1': 'en', 'file_path': '/3iD4rpmdg82TajZ8fMvfykF7By0.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 839}, {'aspect_ratio': 0.667, 'height': 1920, 'iso_639_1': 'en', 'file_path': '/4tbvuLIzuEKfwsNFEhP3i3usCED.jpg', 'vote_average': 5.246, 'vote_count': 2, 'width': 1280}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/h2NqJnjixzVGaK0G8EVAtwO1Z8J.jpg', 'vote_average': 5.238, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/x2NrJAi1hqYnS5CSRtaqmldMfzW.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/8KBYRWm2EyHKli5quoIVDHCd6F8.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/9zwb8QIbAV2l8cSKHzFIAj1322A.jpg', 'vote_average': 5.19, 'vote_count': 5, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/7wYG2Rowz7TwOosomGBvuqLAfe5.jpg', 'vote_average': 5.186, 'vote_count': 20, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/5NyGSpXYgJ8ZG0At8URp4muckL0.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/9fZaYcdfuHLCWUYabdVzaZnLHFW.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/idq4eV7xRhEeI2JTOC2PmOjjhTk.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/uXhV97FuB8OFt1pSEvIdf3Pnvgg.jpg', 'vote_average': 5.18, 'vote_count': 3, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ko', 'file_path': '/z3PjbQPksbnAwwzSfLnSph3ZJyA.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/barGT1G6ElVIdyFrOohQ0gtUp4F.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'es', 'file_path': '/lfPDe1GRL5sASJc3yf0YEPwiAmP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'he', 'file_path': '/j8zvODfD3ZKx1rizFN3Ai3kqX1O.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1350, 'iso_639_1': 'es', 'file_path': '/sCUySzcdrsHrGmvpkgsQ4bRMhvB.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1350, 'iso_639_1': 'es', 'file_path': '/5GbB0I4zSnc1HeLrErwSMcz31KP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 900}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'cs', 'file_path': '/xluNQVt0p3pXzLWLby0qH1NIeQu.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 500}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/jBthaXnKQzdpC2adZsN14KtFGdk.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': None, 'file_path': '/xPtwGWt72dRDIRlpHgCMmriK1EG.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'pt', 'file_path': '/umM0Bt8GOqpWhmVbdEY9fg0Op6K.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/5RfTJgNOA1UOysOHtVOXaJWvaCZ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'fr', 'file_path': '/hjgOCeGIn56Y0syegaceC57k6gP.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/25k4Bz7HaoLjOCnVZBz52IJDVQq.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.674, 'height': 1930, 'iso_639_1': 'fa', 'file_path': '/2UBFPLKt5YbYJMov4ToKAbX9dXQ.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1300}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'it', 'file_path': '/vNcKXmUI4Hvn5VMvCpCWlnoQVz4.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/3bRQcScE7LhTrxAyETY4xHG76cb.jpg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/pkxwlwcYfH1s66Ye2mO5ttOObOO.jpg', 'vote_average': 5.146, 'vote_count': 10, 'width': 2000}, {'aspect_ratio': 0.677, 'height': 2048, 'iso_639_1': 'zh', 'file_path': '/dvSCpCMcfBHqe5etXDDtFHe2Eld.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 1387}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'zh', 'file_path': '/3PYDPnCq27g1juniyMvePYtfVSJ.jpg', 'vote_average': 5.128, 'vote_count': 6, 'width': 947}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/wPYBGNV4KREkgZ4ELBZ2axd6NH6.jpg', 'vote_average': 5.114, 'vote_count': 41, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/eOOjas7U0O2QYvOh2vsN6krVWxX.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 1999}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/4qFBCufnzW1BubZjJoj1e5H4fhC.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1200, 'iso_639_1': 'en', 'file_path': '/nu3oii71mRekR6beDNpiihd6GSL.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 799}, {'aspect_ratio': 0.666, 'height': 1178, 'iso_639_1': 'de', 'file_path': '/ePxV40QYOSZgrpBEZOmDtlQRR6g.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 785}, {'aspect_ratio': 0.667, 'height': 960, 'iso_639_1': 'de', 'file_path': '/9UYo2H6XTPUMpYiTxewsr4laxbz.jpg', 'vote_average': 5.106, 'vote_count': 2, 'width': 640}, {'aspect_ratio': 0.75, 'height': 1350, 'iso_639_1': 'fr', 'file_path': '/3D9w3Vv1G1YxSdqwKnfiKDXuz1V.jpg', 'vote_average': 5.056, 'vote_count': 5, 'width': 1012}, {'aspect_ratio': 0.666, 'height': 2560, 'iso_639_1': 'en', 'file_path': '/A5DGdsvMWIDgc75qXzDIX1ufLnh.jpg', 'vote_average': 5.044, 'vote_count': 3, 'width': 1706}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/mgjKNDzFINGvNFtHSqzfUZ4pk6Y.jpg', 'vote_average': 5.018, 'vote_count': 19, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/ekfE5ChBWPGF5p3VWhrpKgLFYwa.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/t2GFUkjgEfynpmxqHf60cbIrj9Y.jpg', 'vote_average': 5.01, 'vote_count': 8, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/gO6UfLfoOGnbmbrnbF3KMTNqfNC.jpg', 'vote_average': 5.006, 'vote_count': 17, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/lTEyneX42noQDG8Cxc8DJvkUB6m.jpg', 'vote_average': 4.996, 'vote_count': 6, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/v6614PcDdocBAKYJMkfKaLSMVJA.jpg', 'vote_average': 4.992, 'vote_count': 24, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': None, 'file_path': '/3cKaEyoEUhxhnZG48dRG0iufPxs.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/4QCAm7J3nfjZygFQOuWace6ULPX.jpg', 'vote_average': 4.982, 'vote_count': 4, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/7p4JCF9ptaE7Ptc9SLxTPv7QdfH.jpg', 'vote_average': 4.938, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/iJOJRVSdKGx3yYdbwfqCiAPHxfK.jpg', 'vote_average': 4.922, 'vote_count': 5, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2457, 'iso_639_1': 'zh', 'file_path': '/1eCxQQUEhMVS0nWOSD1SlVbGUWI.jpg', 'vote_average': 4.828, 'vote_count': 9, 'width': 1638}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/9Yg7DZE4ip2Yl0K2BUm6hAd8iRK.jpg', 'vote_average': 4.828, 'vote_count': 9, 'width': 2000}, {'aspect_ratio': 0.709, 'height': 2820, 'iso_639_1': 'uk', 'file_path': '/p81GFBwd9YaZnx6luJO5bJOqqHJ.jpg', 'vote_average': 4.81, 'vote_count': 7, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'uk', 'file_path': '/wIAxpY365lKSlSXaM8BH7pB3y0M.jpg', 'vote_average': 4.6, 'vote_count': 16, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/mesnygQJfEJaWMA89rLk8VEZNj8.jpg', 'vote_average': 4.398, 'vote_count': 18, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'uk', 'file_path': '/pyWvLGCaaI7N8U92BRLBNul2vuI.jpg', 'vote_average': 4.398, 'vote_count': 18, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/gF1XEP9gfE6og6s8MGvyFI4Muig.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/q7zrl3Kvu9E3t1ZCzm8w0lOaQW5.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 2100, 'iso_639_1': 'th', 'file_path': '/xloEW5DQGqkR9i4EbJ0RXag3DIS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1399}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'cn', 'file_path': '/or2wuvAbf2AG9MWylxPUisb85Ew.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.666, 'height': 1421, 'iso_639_1': 'cs', 'file_path': '/uejpfeP1atdbdEea84cHFNKL24g.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 947}, {'aspect_ratio': 0.71, 'height': 1080, 'iso_639_1': 'cn', 'file_path': '/ObORCPqtaZgRhIvPnTTXGk5rAN.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 767}, {'aspect_ratio': 0.666, 'height': 800, 'iso_639_1': 'th', 'file_path': '/ryW8AqLEt7viQZI40obvCVgKyEF.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 533}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/guswIMwCLrDDrLfyiUBJJktmhBh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1351, 'iso_639_1': 'ar', 'file_path': '/y3I2XL5436scaaiQh5cfSXHEHnV.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 900}, {'aspect_ratio': 0.667, 'height': 1587, 'iso_639_1': 'lt', 'file_path': '/tYFY9CkTy6yoaqTZTEu1IAtMBgT.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1058}, {'aspect_ratio': 0.71, 'height': 1126, 'iso_639_1': 'cn', 'file_path': '/atkSaDwZEcINEaoL0JF25DDdcni.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 800}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/aDIFDU7niNbIHUp5vdCsSxthpeW.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1420, 'iso_639_1': 'ko', 'file_path': '/pb9giHGBgA4wbRREbbd8XL4XaN7.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 947}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'vi', 'file_path': '/akndvu1UcoMrEh4NQHXRLxGPTGg.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/dW9C0FKB3HvwugUUtKXEXBFqcIL.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2304, 'iso_639_1': 'en', 'file_path': '/t0uXoXeF9GMdviHgMW7UQzQ4eSG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1536}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/utCBEg4YNuZYaWSZaY13MXj1Z9G.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'he', 'file_path': '/m75xCRghGBAyXRKuiWbJvDPPGrS.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2976, 'iso_639_1': 'en', 'file_path': '/eb6vkfY72J5gZhEnnRncsXSDftz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1984}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'nl', 'file_path': '/jtTHxuJhuZpFAnCI4vGjg1LGmpY.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ru', 'file_path': '/qp595lmvI6UTWb1Gc8DD5SnLHnm.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.739, 'height': 1623, 'iso_639_1': 'sk', 'file_path': '/gz0LUZClgzS6hCzurFk89e5G5d1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1200}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/aQxeSwWXB3NaRTiN1DRNHIxReAG.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/1YX789imfZI5xaztsaqmtz6DVmX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'en', 'file_path': '/dRRjhIncQlg2Kak1oASyzGEtZ0t.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/kphZJTxd47ThurGYP01s67m8Dmt.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.666, 'height': 1367, 'iso_639_1': 'en', 'file_path': '/6uq1c4QTytke0y2NWUsCpi0tISw.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 911}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/bbYXxNaOAFtJjQnygqPKm13AC7a.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'it', 'file_path': '/hRJNOQBGkdU7K7DZTB9pGVYpfok.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.679, 'height': 1236, 'iso_639_1': 'en', 'file_path': '/j5GfnhEeBTl46SSc54CMDouRE7Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 839}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'fr', 'file_path': '/kR32sxbb7wNK5pJLlwTido7RCAz.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'en', 'file_path': '/x451yAdEA1OAnt5P2KVRgMoV5Ba.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.711, 'height': 2702, 'iso_639_1': 'cn', 'file_path': '/cp7zu2Spi1hkkeI408Ebrhv4zc1.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1920}, {'aspect_ratio': 0.701, 'height': 1152, 'iso_639_1': 'ru', 'file_path': '/lnxdR1XCdhV268bwOykdsRcUN1x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 808}, {'aspect_ratio': 0.701, 'height': 1426, 'iso_639_1': 'ru', 'file_path': '/hZcoR85iY5uDvzlSxAYTGvOLvV9.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'th', 'file_path': '/mXOpcMOEruhz4BX3vXnIYe3rYDM.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'zh', 'file_path': '/udw0rc91ixvWneOwuEftXOfzF0x.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'cn', 'file_path': '/yef6p6pDg3YNk8I31wlQpotsaYa.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ko', 'file_path': '/obAL7JCj46c7ogTt0PERbEYJlXn.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'es', 'file_path': '/44ZIBFFkkVtBPtjdC2aPMH4YeYf.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 2842, 'iso_639_1': 'zh', 'file_path': '/5s3LUmU4G5ogVueGsWdbSTnMA0o.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1895}, {'aspect_ratio': 0.675, 'height': 2963, 'iso_639_1': 'zh', 'file_path': '/6TgpVL16UT5ptzRrepVUaYjrg2Y.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1500, 'iso_639_1': 'ka', 'file_path': '/94UsD1QNU1f4tlkj8Ex3Jim4dj4.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1000}, {'aspect_ratio': 0.707, 'height': 1527, 'iso_639_1': 'ja', 'file_path': '/1jLg9oKyMfQlcLtAUskZ5MDra5W.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1080}, {'aspect_ratio': 0.667, 'height': 3000, 'iso_639_1': 'ru', 'file_path': '/9cObSJoxDSVclz9OJzZiSUsYF4i.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 2000}, {'aspect_ratio': 0.667, 'height': 1110, 'iso_639_1': None, 'file_path': '/iY1FDQM6taKwO7bG6YH09nE8NSs.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 740}, {'aspect_ratio': 0.667, 'height': 2454, 'iso_639_1': None, 'file_path': '/7QjqXSW8pl2PCSaYSUHdO1qc0vh.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 1636}, {'aspect_ratio': 0.667, 'height': 750, 'iso_639_1': 'en', 'file_path': '/uL0iqPb4dtICVCCMKYem2yRPBRX.jpg', 'vote_average': 0.0, 'vote_count': 0, 'width': 500}]\n"
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the movie id of \"Titanic\"\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"\",\n    \"year\": 0,\n    \"primary_release_year\": 0\n}\n\n# Make a request to search for the movie \"Titanic\"\nresponse = requests.get(movie_search_url, headers=headers, params=params)\ndata = response.json()\n\n# Check if the movie \"Titanic\" exists in the result\nif data[\"total_results\"] > 0:\n    movie_id = data[\"results\"][0][\"id\"]\n    \n    # Now, we have the movie_id of \"Titanic\", let's get the keywords associated with the movie\n    keywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n    response = requests.get(keywords_url, headers=headers)\n    keywords_data = response.json()\n    \n    # Extract and print the keywords associated with the movie \"Titanic\"\n    keywords = [keyword[\"name\"] for keyword in keywords_data[\"keywords\"]]\n    print(keywords)\nelse:\n    print(\"Movie 'Titanic' not found.\")\n```",
        "usage": [
            274,
            8439,
            8713
        ],
        "executed": "['epic', 'ship', 'drowning', 'panic', 'shipwreck', 'evacuation', 'iceberg', 'titanic', 'forbidden love', 'ocean liner', 'based on true story', 'rich woman poor man', 'love', 'tragedy', 'tragic love', 'disaster', 'historical fiction', 'class differences', 'love affair', 'historical event', 'lifeboat', 'star crossed lovers', 'sinking ship', 'steerage', 'rich snob', 'disaster movie', '1910s', 'sunken ship']\n"
    },
    {
        "query": "Give me a show that is currently on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Define the API URL\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Define the parameters\nparams = {\n    \"page\": 1  # You can change the page number if needed\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    # Get the JSON data from the response\n    tv_shows = response.json()\n    \n    # Print the first TV show from the list\n    print(tv_shows['results'][0])\nelse:\n    print(\"Failed to fetch data\")\n```",
        "usage": [
            317,
            7704,
            8021
        ],
        "executed": "{'adult': False, 'backdrop_path': '/h0y3OzHzG4yNvn8u3Za6ByH8lrQ.jpg', 'genre_ids': [18, 10766], 'id': 45789, 'origin_country': ['DE'], 'original_language': 'de', 'original_name': 'Sturm der Liebe', 'overview': 'These are the stories of relationships taking place in the fictional five-star hotel F\u00fcrstenhof, located in Feldkirchen-Westerham near Rosenheim with the plot revolving around members of the family room area, the hotel owners, and employees.', 'popularity': 4153.22, 'poster_path': '/9oZjOh3Va3FsiLGouhSogFsBX9G.jpg', 'first_air_date': '2005-09-26', 'name': 'Sturm der Liebe', 'vote_average': 7.25, 'vote_count': 14}\n"
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Search for Clint Eastwood\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Clint Eastwood\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nclint_eastwood_id = response.json()[\"results\"][0][\"id\"]\n\n# 2. Get the movie credits for Clint Eastwood\ncredits_url = f\"https://api.themoviedb.org/3/person/{clint_eastwood_id}/movie_credits\"\nresponse = requests.get(credits_url, headers=headers)\nlatest_movie_release_date = response.json()[\"cast\"][0][\"release_date\"]\n\nprint(f\"Clint Eastwood's latest movie is scheduled to be released on: {latest_movie_release_date}\")\n```",
        "usage": [
            349,
            8563,
            8912
        ],
        "executed": "Clint Eastwood's latest movie is scheduled to be released on: 1997-02-14\n"
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the base url and endpoint\nbase_url = \"https://api.themoviedb.org/3\"\nendpoint = \"/search/movie\"\n\n# Set the query string to search for movie \"The Dark Knight\"\nquery = \"The Dark Knight\"\n\n# Prepare the parameters for the API call\nparams = {\n    \"query\": query,\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"  # Assuming US region for release dates\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(base_url + endpoint, headers=headers, params=params)\n\n# Get the results\nresults = response.json()\n\n# Retrieve and display the reviews for The Dark Knight movie\nif 'results' in results and len(results['results']) > 0:\n    movie_id = results['results'][0]['id']\n    \n    reviews_endpoint = f\"/movie/{movie_id}/reviews\"\n    reviews_response = requests.get(base_url + reviews_endpoint, headers=headers)\n    \n    reviews = reviews_response.json()\n    \n    if 'results' in reviews:\n        movie_reviews = reviews['results']\n        print(movie_reviews)\n    else:\n        print(\"No reviews found for The Dark Knight\")\nelse:\n    print(\"No movie found for The Dark Knight\")\n```",
        "usage": [
            438,
            8765,
            9203
        ],
        "executed": "[{'author': 'tricksy', 'author_details': {'name': '', 'username': 'tricksy', 'avatar_path': None, 'rating': None}, 'content': 'Excellent movie. Best of the trilogy. Lovely music. Nolan is a genius. So is Heath Ledger.', 'created_at': '2015-06-09T07:21:30.464Z', 'id': '557693fac3a368569a003fab', 'updated_at': '2021-06-23T15:57:35.053Z', 'url': 'https://www.themoviedb.org/review/557693fac3a368569a003fab'}, {'author': 'talisencrw', 'author_details': {'name': '', 'username': 'talisencrw', 'avatar_path': None, 'rating': 10.0}, 'content': \"This has no competition. It is the very finest comic-book character movie ever made. Knowing the Burton, Donner and Nolan filmic adaptations of Batman and Superman exist helps me to sleep at night. They are Exhibit A of 'How to Make a Comic-Book Movie'. Nothing else has ever come even remotely close. These seven films (I include 'Superman II' because it was mostly Donner's work)--and Nolan's trilogy especially--are what I imagine a great director like Kubrick, Hitchcock or Kurosawa would have come up with, if they had ever been asked to make a Superman or Batman movie. They are the easiest for an audience to identify with because in these the scripts most approximate human emotions and the typical conundrums of the human experience--in short, are the closest, in a good way, they come to the complexities of the human condition. Peerless.\", 'created_at': '2016-05-25T23:49:13.042Z', 'id': '574639f9c3a36806b00002c1', 'updated_at': '2021-06-23T15:57:47.911Z', 'url': 'https://www.themoviedb.org/review/574639f9c3a36806b00002c1'}, {'author': 'erickprieto', 'author_details': {'name': '', 'username': 'erickprieto', 'avatar_path': '/clCvYPqM4EgLo9msno2xSPSGNJ6.jpg', 'rating': None}, 'content': 'Perhaps the best Batman movie of all times. I think that this Batman trilogy presents the well-known superhero history in an unexpected way with the capable to maintain on the edge of the chair all time.\\r\\n**Heath Ledger** present an excellent impersonification of a psychopath.\\r\\nAll support roles are magnificent.\\r\\nAnd Bruce Wayne role played by Christian Bale, shows a human being behind of the mask.', 'created_at': '2018-11-06T09:42:05.673Z', 'id': '5be161edc3a3680a00009915', 'updated_at': '2021-06-23T15:58:14.241Z', 'url': 'https://www.themoviedb.org/review/5be161edc3a3680a00009915'}, {'author': 'moubledian', 'author_details': {'name': '', 'username': 'moubledian', 'avatar_path': None, 'rating': None}, 'content': 'I used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\\r\\n\\r\\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it\\'s definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\\r\\n\\r\\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\\r\\n\\r\\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson\\'s portrayal is true unpredictability. It\\'s obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn\\'t easy. How exactly does one take him down when he\\'s woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\\r\\n\\r\\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\\r\\n\\r\\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can\\'t represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we\\'ve seen just the prelude to the Dark Knight\\'s upcoming legendary battles with the worst of Gotham City\\'s dark underside.\\r\\n\\r\\n\"The Dark Knight\" gets a solid 10 of 10 stars.\\r\\n\\r\\nI used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\\r\\n\\r\\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it\\'s definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\\r\\n\\r\\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\\r\\n\\r\\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson\\'s portrayal is true unpredictability. It\\'s obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn\\'t easy. How exactly does one take him down when he\\'s woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\\r\\n\\r\\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\\r\\n\\r\\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can\\'t represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we\\'ve seen just the prelude to the Dark Knight\\'s upcoming legendary battles with the worst of Gotham City\\'s dark underside.\\r\\n\\r\\n\"The Dark Knight\" gets a solid 10 of 10 stars.\\r\\n\\r\\nI used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\\r\\n\\r\\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it\\'s definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\\r\\n\\r\\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\\r\\n\\r\\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson\\'s portrayal is true unpredictability. It\\'s obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn\\'t easy. How exactly does one take him down when he\\'s woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\\r\\n\\r\\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\\r\\n\\r\\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can\\'t represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we\\'ve seen just the prelude to the Dark Knight\\'s upcoming legendary battles with the worst of Gotham City\\'s dark underside.\\r\\n\\r\\n\"The Dark Knight\" gets a solid 10 of 10 stars.', 'created_at': '2019-03-23T06:05:56.233Z', 'id': '5c95ccc40e0a2645f151d76d', 'updated_at': '2021-06-23T15:58:19.727Z', 'url': 'https://www.themoviedb.org/review/5c95ccc40e0a2645f151d76d'}, {'author': 'tmdb22590444', 'author_details': {'name': '', 'username': 'tmdb22590444', 'avatar_path': None, 'rating': 10.0}, 'content': 'One of the best movies of all time. Christopher Nolan has brought us the Batman trilogy that it made it feel it could happen today. Christian Bale returns as Batman, was able to perform as wonderfully as he did in Batman Begins. The one person that ultimately stole the show had to be the late Heath Ledger who played as the Joker. His performance as a psychotic clown terrorizing Gotham City was one of the best performance as a superhero villain. One of the best parts of the Joker was when he was telling his victims on how \u201che got his scars?\u201d. Another great part was when he kidnapped a police officer and he was recording it while scaring the man and also giving a warning to Batman. The supporting actor and actresses did a good job of delivering the story. I was disappointed that Katie Holmes did not return as Rachael Dawes but the actress how played as her Maggie Gyllenhaal did a really good job. One of the best parts of Christopher Nolan is that in every movie of his, the cinematography would look amazing and this movie is no exception.', 'created_at': '2019-05-03T05:43:10.850Z', 'id': '5ccbd4ee0e0a262fcd009b52', 'updated_at': '2021-06-23T15:58:21.563Z', 'url': 'https://www.themoviedb.org/review/5ccbd4ee0e0a262fcd009b52'}, {'author': 'tmdb79614358', 'author_details': {'name': '', 'username': 'tmdb79614358', 'avatar_path': None, 'rating': 10.0}, 'content': 'A Masterpiece!!! I Love how The Dark Knight shows to me the \"Dark & Gritty Tone\". Overall, Nolan give us the Game changing, best superhero film OF ALL TIME. For me it\\'s 10/10', 'created_at': '2020-11-30T14:22:09.262Z', 'id': '5fc50011420228003dc3d744', 'updated_at': '2021-06-23T15:58:48.204Z', 'url': 'https://www.themoviedb.org/review/5fc50011420228003dc3d744'}, {'author': 'EDSR', 'author_details': {'name': '', 'username': 'EDSR', 'avatar_path': None, 'rating': 3.0}, 'content': 'A sickening, borderline fascist film that is simultaneously dull and harmful. The editing represents that of an anti-pirate commercial and the politics are beyond reprehensible. The film ends with a monologue about how violent law-enforcement and brutality is what the country needs, but does not deserve. Nolan clearly did not intend for any subtext, yet that is not an excuse, if anything, that makes it worse. He includes these scenes to make the film more dark and edgy, yet there are people, from suppressed countries, who have to live through the hardships of violence from law-enforcers and dictatorship every day, and in his obliviousness, Nolan thinks that using this in a superhero film is a good excuse for self-importance. He is a war profiteer, and exploiter, and this is nothing short of disgusting.', 'created_at': '2021-09-13T10:03:55.272Z', 'id': '613f220ba6ddcb002c698ab8', 'updated_at': '2021-09-20T16:28:41.430Z', 'url': 'https://www.themoviedb.org/review/613f220ba6ddcb002c698ab8'}, {'author': 'AstroNoud', 'author_details': {'name': '', 'username': 'AstroNoud', 'avatar_path': '/6zLnrhVdSDzTjhwjKxE5xQdk2Wu.jpg', 'rating': 10.0}, 'content': 'Unforgettable crime film with good dialogue, thrilling action and chase scenes and once again a magnificent cast (most notably a terrifically terrifying Ledger) and superb score.\\r\\n\\r\\n10/10', 'created_at': '2022-02-26T21:06:50.918Z', 'id': '621a966ad7a70a00430d4c21', 'updated_at': '2022-02-26T21:06:50.918Z', 'url': 'https://www.themoviedb.org/review/621a966ad7a70a00430d4c21'}, {'author': 'CinemaSerf', 'author_details': {'name': 'CinemaSerf', 'username': 'Geronimo1967', 'avatar_path': '/1kks3YnVkpyQxzw36CObFPvhL5f.jpg', 'rating': 7.0}, 'content': 'Heath Ledger is outstanding in this follow up to the 2006 \"Batman Begins\" outing for the caped crusader. His portrayal of the malevolent \"Joker\\' is confident and highly entertaining, treading a fine line between supreme intellect and total insanity with considerable aplomb. He comes back to terrorise \"Gotham\" after \"Batman\" (Christian Bale), \"Gordon\" (Gary Oldman) - now Commissioner in charge of the police force, and newly installed District Attorney \"Dent\" (Aaron Eckhart) had made progress getting the criminals off the street. The \"Joker\", meantime, decides that the best strategy is to rob the mob - and pitching them all against each other, and with the help of the duplicitous \"Lau\" (Chin Han) manages to secure enough of their funds to initiate a campaign of lawlessness that is ruthless, manipulative and good fun to watch. Not only has the man in black his new, potent, nemesis to deal with - but he also begins to realise that his childhood sweetheart \"Rachel\" (this time Maggie Gyllenhaal) is drifting into the arms of the new DA. it is also pretty clear that they are both now proving to be an useful additional weapon in the armoury of his enemy who knows, increasingly, which buttons to press to cause maximum anxiety among those who would bring him down. It\\'s over 2\u00bd hours long, but really does fly by as the quickly paced action really does kick in right from the start. The story is dark and gritty but the pace isn\\'t ponderous and moody - Ledger exudes a sense of peril throughout the whole thing, but that has an edge to it - a sophistication that plays well against the flawed superhero who is increasingly having to identify and cope with his own demons. Sir Michael Caine pops up now and again as his shrewd butler \"Alfred\", always striving to keep his boss on the right side of sanity, and Morgan Freeman continues to feature (sparingly) and his quartermaster. On that latter front, there are loads of new gadgets that still have that element of plausibility to them (no super-powers!). On balance I think I still preferred the first film, but as sequels go - this takes, and will take, some beating. On a big screen in a packed cinema, it\\'s just a great experience.', 'created_at': '2022-07-14T06:48:17.528Z', 'id': '62cfbc31394a8704ae5c02a3', 'updated_at': '2022-07-14T06:48:17.528Z', 'url': 'https://www.themoviedb.org/review/62cfbc31394a8704ae5c02a3'}, {'author': 'The Movie Mob', 'author_details': {'name': 'The Movie Mob', 'username': 'mooney240', 'avatar_path': '/blEC280vq31MVaDcsWBXuGOsYnB.jpg', 'rating': 10.0}, 'content': \"**Overall : A cinematic marvel and once-in-a-decade masterpiece.**\\r\\n\\r\\nThis isn't simply a superhero movie or a Christopher Nolan film. The Dark Knight is a masterpiece. A perfect film. An epic scale with magnificent action pieces, oscar-winning performances, incredible writing, excellent pacing, dazzling special effects, and the list goes on and on, including the set design, costumes, and more. But, Christopher Nolan did more than make the greatest superhero movie of all time. He made one of the greatest movies of all time! All this is elevated further by Heath Ledger's once-in-a-lifetime portrayal of the Joker. Ledger was born for this role with a performance in league with Anthony Hopkins' Hannibal Lecter or Val Kilmer's Doc Holliday.\", 'created_at': '2022-08-19T23:15:37.597Z', 'id': '63001999097c49007f5fced9', 'updated_at': '2022-09-03T15:17:20.030Z', 'url': 'https://www.themoviedb.org/review/63001999097c49007f5fced9'}, {'author': 'drystyx', 'author_details': {'name': '', 'username': 'drystyx', 'avatar_path': '/hLLsAvAnVT0cFU7JuuaaItTWXv8.jpg', 'rating': 1.0}, 'content': 'Even worse than Tim Burton\\'s Batman, although obviously copying the neo Nazi ideology of \"kill all the brunettes you can in a movie\".\\r\\nThis is so predictable and so poorly written that it boggles the mind. Yet there is a fan base of what can only be described as neo Nazis. I guess those fans were poor cuckolds who got jilted by too many brunettes at a young age, and they couldn\\'t get over it.\\r\\nThat\\'s about the entire story here. Oh, the Joker kills anything he sees. Whoopee. And he\\'s invulnerable. And he\\'s a demigod who can only be beaten by another demigod.\\r\\nSo, we\\'ve got traditional mundane Greek heroes and villains here, just like most Hollywood movies.\\r\\nUnfortunately, the fans of these traditional Hollywood movies are the loudest people on Earth, and the biggest control freaks. It\\'s ridiculous to believe there are actually this big a percentage of fans for this kind of depressing Hollywood formula movie making, but if you look at Imdb\\'s top 250, you see such movies make up over half of the top 250. Are they voted up because control freaks vote more than non control freaks? Or are they voted up because control freaks use many fake user names? Probably both, which explains why over half of the top 250 are nothing more than Greek traditional idolizations of control freaks.\\r\\nOh, and Batman turns totally gay, which would be okay if he\\'d admit it, but he\\'s given the choice of saving a man from death or a hot woman from death, and he chooses to save the man. This isn\\'t any real Batman. It\\'s just another contrived story line for the Nolan Nazi merit badge. They are not even subtle. They bang you over the head with their worship of Adolf and Eva. \\r\\nGod help the world if this garbage still has a fan base fifty years from now. But it could happen. We may have drug addicts and meth heads around for even longer than that, praising the hate and feeding the hate. It would be nice if someone made a real Batman movie with a real story line involving some degree of motivation.', 'created_at': '2023-04-18T19:52:54.996Z', 'id': '643ef51668b7660524ee929b', 'updated_at': '2023-04-18T19:52:55.078Z', 'url': 'https://www.themoviedb.org/review/643ef51668b7660524ee929b'}, {'author': 'Andre Gonzales', 'author_details': {'name': 'Andre Gonzales', 'username': 'SoSmooth1982', 'avatar_path': '/ast1oGYDI7Li9daLuOV4UxGiXj.jpg', 'rating': 7.0}, 'content': 'I enjoyed watching the Dark Knight. They were at least able to keep the same batman from the the last one made too.', 'created_at': '2023-04-25T20:12:25.938Z', 'id': '64483429b76cbb0492a3bf0f', 'updated_at': '2023-04-25T20:12:26.017Z', 'url': 'https://www.themoviedb.org/review/64483429b76cbb0492a3bf0f'}, {'author': 'JN2012', 'author_details': {'name': '', 'username': 'JN2012', 'avatar_path': '/6EFUKllgSm0UzLibTMHF1piWHZd.jpg', 'rating': 8.0}, 'content': 'If I can hold my pee for a whole two and a half hours rewatching a film I\u2019ve already seen then I love it.', 'created_at': '2023-10-14T16:31:32.429Z', 'id': '652ac2641511aa013886872f', 'updated_at': '2023-10-19T02:26:50.433Z', 'url': 'https://www.themoviedb.org/review/652ac2641511aa013886872f'}]\n"
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the person details for Francis Ford Coppola\nperson_id = 1934  # Francis Ford Coppola's id\nurl = f\"https://api.themoviedb.org/3/person/{person_id}\"\n\n# Make the GET request to get the details of Francis Ford Coppola\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the movie credits for Francis Ford Coppola\n    person_details = response.json()\n    \n    # Check if the known_for array is not empty\n    if len(person_details[\"known_for\"]) > 0:\n        # Get the first movie known for Francis Ford Coppola\n        movie_id = person_details[\"known_for\"][0][\"id\"]\n        \n        # Define the API endpoint to get similar movies for the selected movie\n        url = f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\n\n        # Make the GET request to get the similar movies\n        response = requests.get(url, headers=headers)\n        \n        # Check if the request was successful\n        if response.status_code == 200:\n            # Extract the list of similar movies\n            similar_movies = response.json()[\"results\"]\n            # Print the similar movies\n            for movie in similar_movies:\n                print(movie[\"title\"])\n\n    else:\n        print(\"No movie known for Francis Ford Coppola.\")\nelse:\n    print(\"Failed to get details for Francis Ford Coppola.\")\n```",
        "usage": [
            316,
            9797,
            10113
        ],
        "executed": null
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the latest movie API\nlatest_movie_url = \"https://api.themoviedb.org/3/movie/latest\"\nresponse = requests.get(latest_movie_url, headers=headers)\n\n# Extract the lead actor from the response\nif response.status_code == 200:\n    latest_movie_data = response.json()\n    cast = latest_movie_data.get('cast', [])\n    if len(cast) > 0:\n        lead_actor = cast[0].get('name')\n        print(f\"The lead actor in the latest released movie is: {lead_actor}\")\n    else:\n        print(\"No cast information available for the latest released movie.\")\nelse:\n    print(\"Error: Unable to fetch data from the API\")\n```",
        "usage": [
            323,
            10795,
            11118
        ],
        "executed": "No cast information available for the latest released movie.\n"
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# API url to get list of movies currently in theaters\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Parameters for the API call\nparams = {\n    \"page\": 1,  # specifying the page number\n    \"region\": \"US\"  # specifying the region (for example, US)\n}\n\n# Http header with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Getting the JSON response\ndata = response.json()\n\n# Checking if the response contains any movie data\nif 'results' in data and len(data['results']) > 0:\n    # Getting the poster path of the first movie in the list\n    poster_path = data['results'][0]['poster_path']\n    \n    # Generating the image URL using the poster path\n    if poster_path:\n        image_url = f\"https://image.tmdb.org/t/p/original{poster_path}\"\n        print(image_url)\n    else:\n        print(\"No poster image available for the movie.\")\nelse:\n    print(\"No movies currently in theaters.\")\n```",
        "usage": [
            406,
            8565,
            8971
        ],
        "executed": "https://image.tmdb.org/t/p/original/hu40Uxp9WtpL34jv3zyWLb5zEVY.jpg\n"
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the popular movies API to get the most popular movie\nurl_popular_movies = \"https://api.themoviedb.org/3/movie/popular\"\nparams_popular_movies = {\n    \"page\": 1,  # Get the first page of results\n    \"region\": \"US\"  # Filter by US region\n}\nresponse = requests.get(url_popular_movies, headers=headers, params=params_popular_movies)\ndata = response.json()\nmost_popular_movie = data['results'][0]\n\n# Get the keywords for the most popular movie\nurl_keywords = f\"https://api.themoviedb.org/3/movie/{most_popular_movie['id']}/keywords\"\nresponse_keywords = requests.get(url_keywords, headers=headers)\ndata_keywords = response_keywords.json()\n\nkeywords = [keyword['name'] for keyword in data_keywords['keywords']]\n\nprint(\"Most Popular Movie:\")\nprint(\"Title:\", most_popular_movie['title'])\nprint(\"Overview:\", most_popular_movie['overview'])\nprint(\"Release Date:\", most_popular_movie['release_date'])\nprint(\"Popularity:\", most_popular_movie['popularity'])\nprint(\"Vote Average:\", most_popular_movie['vote_average'])\nprint(\"Keywords:\", keywords)\n```",
        "usage": [
            424,
            9322,
            9746
        ],
        "executed": "Most Popular Movie:\nTitle: No Way Up\nOverview: Characters from different backgrounds are thrown together when the plane they're travelling on crashes into the Pacific Ocean. A nightmare fight for survival ensues with the air supply running out and dangers creeping in from all sides.\nRelease Date: 2024-02-16\nPopularity: 1480.125\nVote Average: 5.733\nKeywords: ['ocean', 'bodyguard', 'rescue mission', 'childhood trauma', 'shark', 'airplane trip', 'sharks', 'air crash', 'survivor']\n"
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# API url to get the list of popular movies\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Parameters for the request\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Adding authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Checking if the request was successful\nif response.status_code == 200:\n    # Extracting the movie id of the most popular movie\n    most_popular_movie_id = response.json()[\"results\"][0][\"id\"]\n\n    # API url to get the keywords of the most popular movie\n    keyword_url = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\n\n    # Sending GET request to get the keywords of the most popular movie\n    keyword_response = requests.get(keyword_url, headers=headers)\n\n    # Checking if the request was successful\n    if keyword_response.status_code == 200:\n        keywords = keyword_response.json()[\"keywords\"]\n        print(keywords)\n\n    else:\n        print(\"Failed to retrieve keywords\")\n\nelse:\n    print(\"Failed to retrieve the list of popular movies\")\n```",
        "usage": [
            423,
            8610,
            9033
        ],
        "executed": "[{'id': 270, 'name': 'ocean'}, {'id': 3088, 'name': 'bodyguard'}, {'id': 11107, 'name': 'rescue mission'}, {'id': 5707, 'name': 'childhood trauma'}, {'id': 15097, 'name': 'shark'}, {'id': 167040, 'name': 'airplane trip'}, {'id': 275172, 'name': 'sharks'}, {'id': 282692, 'name': 'air crash'}, {'id': 298724, 'name': 'survivor'}]\n"
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching a movie\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for searching the movie Titanic\nparams_search_movie = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False,  # Exclude adult content\n}\n\n# Make the API request\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\n\n# Get the results\nresults = response_search_movie.json()\n\n# Check if there are any movies found\nif results[\"total_results\"] > 0:\n    # Get the movie id of the first result\n    movie_id = results[\"results\"][0][\"id\"]\n\n    # Define the API url for getting the credits of the movie\n    url_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n    # Make the API request to get the movie credits\n    response_movie_credits = requests.get(url_movie_credits, headers=headers)\n    \n    # Get the cast of the movie\n    cast = response_movie_credits.json()[\"cast\"]\n    \n    # Get the names of the actors who starred in the movie Titanic\n    actors = [actor[\"name\"] for actor in cast]\n    \n    # Print the list of actors who starred in the movie Titanic\n    print(actors)\nelse:\n    print(\"No movies found for the query 'Titanic'\")\n```",
        "usage": [
            304,
            9019,
            9323
        ],
        "executed": "['Leonardo DiCaprio', 'Kate Winslet', 'Billy Zane', 'Kathy Bates', 'Frances Fisher', 'Gloria Stuart', 'Victor Garber', 'Bill Paxton', 'Bernard Hill', 'David Warner', 'Jonathan Hyde', 'Lewis Abernathy', 'Suzy Amis', 'Nicholas Cascone', 'Danny Nucci', 'Jason Barry', 'Lew Palter', 'Eric Braeden', 'Ewan Stewart', 'Bernard Fox', 'Ioan Gruffudd', 'Jonny Phillips', 'Edward Fletcher', 'Scott G. Anderson', 'Martin East', 'Gregory Cooke', 'Alexandrea Owens', 'Seth Adkins', 'Michael Ensign', 'Anatoly M. Sagalevitch', 'Martin Hub', 'Mark Lindsay Chapman', 'Richard Graham', 'Paul Brightwell', 'Craig Kelly', 'Ron Donachie', 'Charlotte Chatton', 'Fannie Brett', 'Jenette Goldstein', 'Camilla Overbye Roos', 'Linda Kerns', 'Amy Gaipa', 'Martin Jarvis', 'Rosalind Ayres', 'Rochelle Rose', 'Jonathan Evans-Jones', 'Rocky Taylor', 'Liam Tuohy', 'Simon Crane', 'James Lancaster', 'Elsa Raven', 'Reece P. Thompson III', 'Laramie Landis', 'Mark Rafael Truitt', 'John Walcutt', 'Terry Forrestal', 'Derek Lea', 'Richard Ashton', 'Sean Nepita', 'Brendan Connolly', 'David Cronnelly', 'Garth Wilton', 'Richard Fox', 'Nick Meaney', 'Kevin Owers', 'Mark Capri', 'Marc Cass', 'Paul Herbert', 'Emmett James', 'Chris Byrne', 'Oliver Page', 'James Garrett', 'Erik Holland', 'Jari Kinnunen', 'Anders Falk', 'Barry Dennen', 'Vern Urich', 'Rebecca Klingler', \"Tricia O'Neil\", 'Kathleen S. Dunn', 'Romeo Francis', 'Mandana Marino', 'Van Ling', 'Bj\u00f8rn Olsen', 'Dan Pettersson', 'Shay Duffin', 'Greg Ellis', 'Diana Morgan', 'Kris Andersson', 'Bobbie Bates', 'Aaron James Cash', 'Anne Fletcher', 'Edmond Alan Forsyth', 'Andie Hicks', 'Scott Hislop', 'Stan Mazin', 'Lisa Ratzin', 'Julene Renee', 'Brian Walsh', 'Alexandra Boyd', 'James Cameron', 'Mike Butters', 'Bruno Campolo', 'Kevin De La Noy', 'Tony Kenny', 'Sean Lawlor', 'Don Lynch', 'Johnny Martin', 'Ryan McClurkin', 'Meghan McLeod', \"Mike O'Neal\", 'Phil Parlapiano', 'Steven Quale', 'R. Gern Trowbridge', 'Olivia Rosewood', 'John Slade', 'Brian McDermott', 'Bret Aaron Knower']\n"
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for getting the details of the company by company_id\nurl = \"https://api.themoviedb.org/3/company/4\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the logo path from the API response\n    company_details = response.json()\n    logo_path = company_details[\"logo_path\"]\n\n    # Print the logo path\n    print(\"Logo path for Paramount Pictures:\", logo_path)\nelse:\n    print(\"Error:\", response.status_code, response.text)\n```",
        "usage": [
            313,
            9943,
            10256
        ],
        "executed": "Logo path for Paramount Pictures: /gz66EfNoYPqHTYI4q9UEN4CbHRc.png\n"
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\nimport requests\n\n# Set the API endpoint\nurl = \"https://api.themoviedb.org/3/search/company\"\n\n# Set the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameters for searching the company\nparams = {\n    \"query\": \"universal pictures\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Check if there are any results for the company search\n    if data[\"total_results\"] > 0:\n        # Get the id of the first company that matches the search query\n        company_id = data[\"results\"][0][\"id\"]\n        \n        # Make a new API request to get the details of the company by id\n        company_details_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n        company_response = requests.get(company_details_url, headers=headers)\n        \n        if company_response.status_code == 200:\n            company_data = company_response.json()\n            headquarters = company_data[\"headquarters\"]\n            print(f\"The company 'Universal Pictures' was founded in {headquarters}.\")\n        else:\n            print(\"Error: Failed to fetch company details by id.\")\n    else:\n        print(\"Error: No results found for the company search query.\")\nelse:\n    print(\"Error: API request failed.\")\n\n```",
        "usage": [
            464,
            7394,
            7858
        ],
        "executed": "The company 'Universal Pictures' was founded in Universal City, California.\n"
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nsearch_results = response.json()\n\n# Find the movie \"Titanic\" in the search results\ntitanic_id = None\nfor result in search_results[\"results\"]:\n    if result[\"title\"] == \"Titanic\":\n        titanic_id = result[\"id\"]\n        break\n\n# If \"Titanic\" is found, get the release dates\nif titanic_id:\n    release_date_url = f\"https://api.themoviedb.org/3/movie/{titanic_id}/release_dates\"\n    release_response = requests.get(release_date_url, headers=headers)\n    release_info = release_response.json()\n\n    # Extract the release dates\n    for result in release_info[\"results\"]:\n        if result[\"iso_3166_1\"] == \"US\":  # Considering US release date\n            print(f\"The movie 'Titanic' was released in the US on: {result['release_dates'][0]['release_date']}\")\n            break\nelse:\n    print(\"Movie 'Titanic' not found in search results.\")\n```",
        "usage": [
            461,
            8105,
            8566
        ],
        "executed": "The movie 'Titanic' was released in the US on: 1997-12-14T00:00:00.000Z\n"
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the base url and API key\nbase_url = \"https://api.themoviedb.org/3\"\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the Star Wars collection to get the collection id\nsearch_collection_url = f\"{base_url}/search/collection\"\nparams = {\n    \"query\": \"Star Wars\"\n}\nresponse = requests.get(search_collection_url, headers=headers, params=params)\ncollection_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the details of the first movie in the collection\ncollection_details_url = f\"{base_url}/collection/{collection_id}\"\nresponse = requests.get(collection_details_url, headers=headers)\nfirst_movie_id = response.json()[\"parts\"][0][\"id\"]\n\n# Get the credits (cast) for the first movie\ncredits_url = f\"{base_url}/movie/{first_movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncast = response.json()[\"cast\"]\n\n# Extract the names of the actors\nactors = [actor[\"name\"] for actor in cast]\n\nprint(actors)\n```",
        "usage": [
            262,
            9598,
            9860
        ],
        "executed": null
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Harry Potter\",\n    \"page\": 1\n}\n\n# Define the headers containing the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Display the movie covers from the search results\nif response.status_code == 200:\n    data = response.json()\n    results = data.get('results', [])\n    for result in results:\n        print(f\"Name: {result.get('name')}\")\n        print(f\"Poster URL: {result.get('poster_path')}\")\n        print(\"\\n\")\nelse:\n    print(\"Error getting data from the API\")\n```",
        "usage": [
            331,
            10886,
            11217
        ],
        "executed": "Name: Harry Potter Collection\nPoster URL: /eVPs2Y0LyvTLZn6AP5Z6O2rtiGB.jpg\n\n\n"
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the collection id of \"The Hunger Games\"\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\n    \"query\": \"The Hunger Games\"\n}\n# Make the GET request to search for the collection id of \"The Hunger Games\"\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ndata_search_collection = response_search_collection.json()\n\n# Get the collection id of \"The Hunger Games\"\ncollection_id = data_search_collection['results'][0]['id']\n\n# Define the API url to get the keywords for a movie of the collection The Hunger Games\nurl_keywords = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\n\n# Make the GET request to get the keywords for a movie of the collection The Hunger Games\nresponse_keywords = requests.get(url_keywords, headers=headers)\ndata_keywords = response_keywords.json()\n\n# Extract the keywords\nkeywords = [keyword['name'] for keyword in data_keywords['keywords']]\nprint(keywords)\n```",
        "usage": [
            229,
            7946,
            8175
        ],
        "executed": null
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Define the API key and base url\napi_key = \"YOUR_API_KEY\"\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the headers\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the collection id of \"The Hobbit\"\nsearch_collection_url = f\"{base_url}/search/collection\"\nparams = {\n    \"query\": \"The Hobbit\"\n}\nresponse = requests.get(search_collection_url, headers=headers, params=params)\ncollection_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the collection details to retrieve the movie ids\ncollection_details_url = f\"{base_url}/collection/{collection_id}\"\nresponse = requests.get(collection_details_url, headers=headers)\nmovie_ids = [part[\"id\"] for part in response.json()[\"parts\"]]\n\n# Get the release dates for each movie in the collection\nrelease_dates = []\nfor movie_id in movie_ids:\n    movie_details_url = f\"{base_url}/movie/{movie_id}/release_dates\"\n    response = requests.get(movie_details_url, headers=headers)\n    for result in response.json()[\"results\"]:\n        release_date = result[\"release_dates\"][0][\"release_date\"]\n        release_dates.append(release_date)\n\nprint(release_dates)\n```",
        "usage": [
            266,
            10074,
            10340
        ],
        "executed": null
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the query parameters\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\n\n# Set the headers with Authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the JSON response\ndata = response.json()\n\n# Extract and print the list of movies from The Fast and the Furious collection\nmovies = []\nfor result in data['results']:\n    movies.append(result['name'])\n\nprint(movies)\n```",
        "usage": [
            296,
            8048,
            8344
        ],
        "executed": "['The Fast and the Furious Collection']\n"
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\nimport requests\n\n# Set the API url to search for collections\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the headers with the provided Authorization bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the parameters for searching for the collection with the query \"The Fast and the Furious\"\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\n\n# Make a GET request to search for collections\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params)\n\n# Check if the response was successful\nif response_search_collection.status_code == 200:\n    # Extract the collection'id from the search results\n    collection_id = response_search_collection.json()[\"results\"][0][\"id\"]\n\n    # Set the API url to get the reviews of a collection by its id\n    url_reviews = f\"https://api.themoviedb.org/3/collection/{collection_id}/reviews\"\n\n    # Make a GET request to get the reviews of the collection\n    response_reviews = requests.get(url_reviews, headers=headers)\n\n    # Check if the reviews response was successful\n    if response_reviews.status_code == 200:\n        # Print out the reviews of the movie from the The Fast and the Furious collection\n        print(response_reviews.json())\n\n    else:\n        print(\"Error in fetching reviews for the collection\")\nelse:\n    print(\"Error in searching for the collection\")\n```",
        "usage": [
            457,
            8160,
            8617
        ],
        "executed": "Error in fetching reviews for the collection\n"
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Search for Collection - Lord of the Rings\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Lord of the Rings\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\ncollection_id = search_response.json()[\"results\"][0][\"id\"]\n\n# 2. Get Collection Details by ID\ncollection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\ncollection_response = requests.get(collection_url, headers=headers)\nfirst_movie_release_date = collection_response.json()[\"parts\"][0][\"release_date\"]\n\nprint(f\"The first movie of the collection Lord of the Rings was released on: {first_movie_release_date}\")\n```",
        "usage": [
            334,
            6645,
            6979
        ],
        "executed": "The first movie of the collection Lord of the Rings was released on: 2002-04-01\n"
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\n# Set the API endpoint for searching TV shows\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the query parameters\nparams = {\n    \"query\": \"House of Cards\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"first_air_date_year\": 2013\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the response JSON data\n    data = response.json()\n\n    # Get the TV show id for House of Cards\n    tv_id = data['results'][0]['id']\n\n    # Set the API endpoint for getting the credits of the first season of House of Cards\n    credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1/credits\"\n\n    # Make the API request to get the credits\n    credits_response = requests.get(credits_url, headers=headers)\n\n    # Check if the credits request was successful\n    if credits_response.status_code == 200:\n        # Parse the credits response JSON data\n        credits_data = credits_response.json()\n\n        # Extract the director(s) from the crew data\n        crew = credits_data['crew']\n        directors = [member['name'] for member in crew if member['job'] == 'Director']\n\n        print(directors)\n    else:\n        print(\"Failed to retrieve credits information\")\nelse:\n    print(\"Failed to retrieve TV show information\")\n```",
        "usage": [
            331,
            7915,
            8246
        ],
        "executed": "[]\n"
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the base URL for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the API endpoints\nsearch_tv_endpoint = \"/search/tv\"\nsimilar_tv_endpoint = \"/tv/{tv_id}/similar\"\n\n# Set the API key\napi_key = \"YOUR_API_KEY\"\n\n# Set the headers with authorization\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show \"House of Cards\"\nparams = {\n    \"query\": \"House of Cards\"\n}\nsearch_response = requests.get(f\"{base_url}{search_tv_endpoint}\", headers=headers, params=params)\nsearch_results = search_response.json()\n\n# Get the TV show ID for House of Cards\ntv_id = search_results[\"results\"][0][\"id\"]\n\n# Get a list of similar TV shows to House of Cards\nparams = {\n    \"page\": 1\n}\nsimilar_response = requests.get(f\"{base_url}{similar_tv_endpoint.format(tv_id=tv_id)}\", headers=headers, params=params)\nsimilar_results = similar_response.json()\n\n# Print the list of similar TV shows\nprint(similar_results[\"results\"])\n```",
        "usage": [
            243,
            6856,
            7099
        ],
        "executed": null
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of shows currently on the air\nresponse = requests.get(\"https://api.themoviedb.org/3/tv/on_the_air\", headers=headers)\ndata = response.json()\n\n# Get the details of the most popular TV show currently on the air\ntv_id = data['results'][0]['id']\ntv_name = data['results'][0]['name']\n\n# Call the API to get the primary TV show details by id\nresponse = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_id}\", headers=headers)\nshow_details = response.json()\n\n# Get the start date of the TV show\nstart_date = show_details['first_air_date']\n\nprint(f\"The most popular TV show currently on the air is '{tv_name}' and it started on {start_date}\")\n```",
        "usage": [
            355,
            10322,
            10677
        ],
        "executed": "The most popular TV show currently on the air is 'Sturm der Liebe' and it started on 2005-09-26\n"
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the director of Django Unchained\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Django Unchained\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\ndirector_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get the movie credits for the director\ncredits_url = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\ncredits_params = {}\ncredits_response = requests.get(credits_url, headers=headers, params=credits_params)\ndirector_works = credits_response.json()[\"cast\"]\n\n# Extract a few more works directed by the director\nworks_directed_by_director = []\nfor work in director_works:\n    if \"director\" in work[\"job\"].lower():\n        works_directed_by_director.append(work[\"title\"])\n\nprint(works_directed_by_director)\n```",
        "usage": [
            390,
            10666,
            11056
        ],
        "executed": null
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the API url to get the list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Define the parameters (if needed)\nparams = {\n    \"page\": 1\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the TV show ID of the first show on the air\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Define the API url to get the credits (cast) of a specific TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n\n# Make a GET request to the API for the credits of the TV show\nresponse_credits = requests.get(url_credits, headers=headers)\n\n# Get the cast information of the TV show on the air\ncast = response_credits.json()[\"cast\"]\n\n# Print the cast information\nprint(cast)\n```",
        "usage": [
            393,
            8494,
            8887
        ],
        "executed": "[{'adult': False, 'gender': 2, 'id': 1237276, 'known_for_department': 'Acting', 'name': 'Dirk Galuba', 'original_name': 'Dirk Galuba', 'popularity': 6.304, 'profile_path': '/yYjGRTKpBW2XHaBfoA8ilJtmXDq.jpg', 'character': 'Werner Saalfeld', 'credit_id': '52596ce4760ee34661a10fe1', 'order': 2}, {'adult': False, 'gender': 2, 'id': 18730, 'known_for_department': 'Acting', 'name': 'Sepp Schauer', 'original_name': 'Sepp Schauer', 'popularity': 6.922, 'profile_path': '/9uULTWVv1p4CR5LUfIvt2lo0HP3.jpg', 'character': 'Alfons Sonnbichler', 'credit_id': '52596ce6760ee34661a1101c', 'order': 4}, {'adult': False, 'gender': 1, 'id': 43686, 'known_for_department': 'Acting', 'name': 'Antje Hagen', 'original_name': 'Antje Hagen', 'popularity': 7.061, 'profile_path': '/8r3c92gsghsNFlf40GUMuCIGIb9.jpg', 'character': 'Hildegard Sonnbichler', 'credit_id': '52596ce4760ee34661a10ff9', 'order': 5}, {'adult': False, 'gender': 2, 'id': 1256857, 'known_for_department': 'Acting', 'name': 'Erich Altenkopf', 'original_name': 'Erich Altenkopf', 'popularity': 2.925, 'profile_path': '/nMDLJZbcllPQggIFes4PnKkkU1B.jpg', 'character': 'Michael Niederb\u00fchl', 'credit_id': '52596cea760ee34661a1108c', 'order': 11}, {'adult': False, 'gender': 2, 'id': 43164, 'known_for_department': 'Acting', 'name': 'Dieter Bach', 'original_name': 'Dieter Bach', 'popularity': 9.269, 'profile_path': '/njFl1thZDLxqV9iuRcjB4dBPOi8.jpg', 'character': 'Christoph Saalfeld', 'credit_id': '5d0dda1b925141779dba4b66', 'order': 26}, {'adult': False, 'gender': 0, 'id': 4391697, 'known_for_department': 'Acting', 'name': 'Soluna-Delta Kokol', 'original_name': 'Soluna-Delta Kokol', 'popularity': 0.833, 'profile_path': '/70vE88bOCcbYDSuYrG8Xb8GLIDa.jpg', 'character': 'Ana Alves', 'credit_id': '655e7d831dbc880100e1e74f', 'order': 62}, {'adult': False, 'gender': 0, 'id': 2866117, 'known_for_department': 'Acting', 'name': 'Robin Schick', 'original_name': 'Robin Schick', 'popularity': 0.75, 'profile_path': '/nahIRf8mVFm4racNbj3pQe4MmqR.jpg', 'character': 'Philipp Brandes', 'credit_id': '655e7d96b2681f00abba054f', 'order': 63}, {'adult': False, 'gender': 2, 'id': 1628452, 'known_for_department': 'Acting', 'name': 'Martin Walde', 'original_name': 'Martin Walde', 'popularity': 5.566, 'profile_path': '/AoC1CQRtyYf0UG5wocxyUNtvCOj.jpg', 'character': 'Vincent Ritter', 'credit_id': '655e7da47dfda600ac20d8e2', 'order': 64}, {'adult': False, 'gender': 2, 'id': 66061, 'known_for_department': 'Acting', 'name': 'Sven Waasner', 'original_name': 'Sven Waasner', 'popularity': 3.879, 'profile_path': '/wjosfX2GuJFInKpXWu0oFypBNqH.jpg', 'character': 'Erik Vogt', 'credit_id': '655e7de51d356300e11038cb', 'order': 65}, {'adult': False, 'gender': 1, 'id': 1249925, 'known_for_department': 'Acting', 'name': 'Tanja Lan\u00e4us', 'original_name': 'Tanja Lan\u00e4us', 'popularity': 4.727, 'profile_path': '/rHnGT7gzB6fZvHy9c8txq2HMJmp.jpg', 'character': 'Yvonne Klee', 'credit_id': '655e7df4244182012da9d3ff', 'order': 66}, {'adult': False, 'gender': 1, 'id': 3155850, 'known_for_department': 'Acting', 'name': 'Sabine Werner', 'original_name': 'Sabine Werner', 'popularity': 1.189, 'profile_path': '/owiu36yjlR7YVty9Pj7jxlytlhv.jpg', 'character': 'Helene Richter', 'credit_id': '655e7e04180dea0100bd0bba', 'order': 67}, {'adult': False, 'gender': 2, 'id': 3117593, 'known_for_department': 'Acting', 'name': 'Daniela Kiefer', 'original_name': 'Daniela Kiefer', 'popularity': 1.896, 'profile_path': '/qXEq4uCvt3C1RQ5LdUBz1Jw37vy.jpg', 'character': 'Alexandra Schwarzbach', 'credit_id': '655e7e1a180dea0100bd0bbf', 'order': 68}, {'adult': False, 'gender': 2, 'id': 1815165, 'known_for_department': 'Acting', 'name': 'Timo Ben Sch\u00f6fer', 'original_name': 'Timo Ben Sch\u00f6fer', 'popularity': 1.712, 'profile_path': '/iYJIKGyK1FpNJ1SjchOQLwAEuf9.jpg', 'character': 'Markus Schwarzbach', 'credit_id': '655e7e29244182014e875b51', 'order': 69}, {'adult': False, 'gender': 0, 'id': 2483494, 'known_for_department': 'Acting', 'name': 'Christopher Jan Busse', 'original_name': 'Christopher Jan Busse', 'popularity': 2.07, 'profile_path': '/cbBxGyjnlw6AQTLxL3BuwilyLm3.jpg', 'character': 'Noah Schwarzbach', 'credit_id': '655e7e4024418200ca7552d2', 'order': 70}, {'adult': False, 'gender': 1, 'id': 1235095, 'known_for_department': 'Acting', 'name': 'Laura Osswald', 'original_name': 'Laura Osswald', 'popularity': 7.408, 'profile_path': '/iuqXfgnOKU3wiphLUCFNiGe6MZi.jpg', 'character': 'Greta Bergmann', 'credit_id': '655e7e4d1dbc88013be3d1dc', 'order': 71}, {'adult': False, 'gender': 1, 'id': 1796464, 'known_for_department': 'Acting', 'name': 'Yeliz Simsek', 'original_name': 'Yeliz Simsek', 'popularity': 2.133, 'profile_path': None, 'character': 'Lale Ceylan', 'credit_id': '655e7e5db2681f00abba0596', 'order': 72}, {'adult': False, 'gender': 2, 'id': 1874867, 'known_for_department': 'Acting', 'name': 'Tim Borys', 'original_name': 'Tim Borys', 'popularity': 3.55, 'profile_path': '/eM8gdbRTGLSOSwv8X6D7OSlXob.jpg', 'character': 'Julian Specht', 'credit_id': '655e7e6ab2681f0138baa6a3', 'order': 73}, {'adult': False, 'gender': 0, 'id': 4391718, 'known_for_department': 'Acting', 'name': 'Dionne Wudu', 'original_name': 'Dionne Wudu', 'popularity': 0.84, 'profile_path': '/gSvoRh6lRnLM0FduX3sIciTIj17.jpg', 'character': 'Nicole Alves', 'credit_id': '655e7e781d356300abc04743', 'order': 74}, {'adult': False, 'gender': 2, 'id': 3624219, 'known_for_department': 'Acting', 'name': 'Lukas Leibe', 'original_name': 'Lukas Leibe', 'popularity': 0.996, 'profile_path': '/knJxStM65Zao5t9rd2hObQzSbet.jpg', 'character': 'Theo Licht', 'credit_id': '655e7e841d356300e11038ec', 'order': 75}, {'adult': False, 'gender': 0, 'id': 2672641, 'known_for_department': 'Acting', 'name': 'Isabell Stern', 'original_name': 'Isabell Stern', 'popularity': 2.304, 'profile_path': '/mj7m87c7AzJ8SBaWiPTdqqcAcdG.jpg', 'character': 'Katja Neubach', 'credit_id': '655e7e97706e5600e1514680', 'order': 76}, {'adult': False, 'gender': 0, 'id': 4523727, 'known_for_department': 'Acting', 'name': 'Milan Marcus', 'original_name': 'Milan Marcus', 'popularity': 1.186, 'profile_path': '/q800OjDGKPO75uAcSmhqo1MW0X0.jpg', 'character': 'Tom Dammann', 'credit_id': '65c3d3782fe2fa016229f2e3', 'order': 84}]\n"
    },
    {
        "query": "I need a review for Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# API url for searching a TV show\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the query and page number\nquery = \"Breaking Bad\"\npage = 1\n\n# Parameters for the request\nparams = {\n    \"query\": query,\n    \"page\": page\n}\n\n# Make the API request\nresponse = requests.get(url_search_tv, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    tv_results = response.json()['results']\n    \n    # Extracting TV show id for Breaking Bad\n    tv_id = None\n    for result in tv_results:\n        if result['name'] == \"Breaking Bad\":\n            tv_id = result['id']\n            break\n    \n    if tv_id:\n        # API url for getting reviews for a TV show\n        url_tv_reviews = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\n        \n        # Make the API request\n        response_reviews = requests.get(url_tv_reviews, headers=headers)\n        \n        # Check if the request was successful\n        if response_reviews.status_code == 200:\n            reviews = response_reviews.json()['results']\n            \n            # Display the reviews\n            for review in reviews:\n                print(f\"Author: {review['author']}\")\n                print(f\"Content: {review['content']}\")\n                print(f\"URL: {review['url']}\\n\")\n        else:\n            print(\"Failed to fetch TV show reviews\")\n    else:\n        print(\"Breaking Bad TV show not found in the search results\")\nelse:\n    print(\"Failed to search for the TV show\") \n```",
        "usage": [
            356,
            10026,
            10382
        ],
        "executed": "Author: slyone10001\nContent: Wow....where to start. Not really into \"DRUG\" inspired shows. But this one had me from the start. The only bad about this show was the split seasons when it was a first run show. But now you can go right through to the next episode with out having to wait.....MUST WATCH ! !\nURL: https://www.themoviedb.org/review/5accdbe6c3a3687e2702d058\n\nAuthor: Dean\nContent: I'll be honest, at first when I started this TV show and finished first season, I didn't like it. It felt boring for me and I stopped watching, but after few years, I decided to give it a chance and continue. I'm so happy because of my decision, because after finishing this TV show, I can definitely tell that it was a masterpiece! 5th season is a bomb and 14th season was shocking! It left me with sad, euphoric shock feeling. It was mind blowing! I'm not gonna spoil you what happened, but if you started first season and you don't like it, for goodness sake, give it a chance and continue watching. I promise you won't regret.\r\n\r\nCharacters are very well developed. Acting is superb! Plot is very interesting. Whole TV show is tense, especially the last season. The only downside I can think about is camera. Sometimes it's shaking on some certain scenes. I don't know why they didn't pay attention to this, but this is nothing, just a very minor minus. Everything else is great about this TV show.\nURL: https://www.themoviedb.org/review/5d91c4a2172d7f001759ca0a\n\nAuthor: l33t5p34k3r\nContent: Started out really good, but dropped quality after the second to last season\nURL: https://www.themoviedb.org/review/5ee08bdd90dde0001fa67192\n\nAuthor: drystyx\nContent: This is the kind of TV show for the \"formula lovers\" who want to feel superior.\r\nThere is an air of the superiority complex of the \"drug knowledgeable\" crowd in this series about a \"smart guy\" breaking into the drug trade.\r\nHis \"talent\" makes him the important cog in the machine. He can call his shots.\r\nStill, the ruffians give him a rough way to go, because criminals really are stupid.\r\nOnce they learn that they are nothing without him, he gets his way.\r\nMuch like a Western town blacksmith, he's the needed ingredient.\r\nHowever, things get very formula early on in the show. And there's always this sense of a superiority complex from the sort of people who push shows like this onto their friends and acquaintances. The directing writing team tap into the control freak crowd very well.\r\nBut it is a dull show about dull people.\nURL: https://www.themoviedb.org/review/6429b5168de0ae00978d836a\n\n"
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Set the API url for getting TV show recommendations\nurl = \"https://api.themoviedb.org/3/tv/100617/recommendations\"  # Assuming '100617' is the TV ID for \"The Last Of Us\"\n\n# Set the parameters for the request\nparams = {\n    \"page\": 1  # Specify which page to query\n}\n\n# Set the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Print the JSON response\n    print(response.json())\nelse:\n    print(\"Error: Unable to fetch TV show recommendations\")\n```",
        "usage": [
            322,
            8508,
            8830
        ],
        "executed": "{'page': 1, 'results': [{'adult': False, 'backdrop_path': '/owhEUs8ZVyuXpxsD2BIcriBotUo.jpg', 'id': 32910, 'name': 'Transformers: Prime', 'original_language': 'en', 'original_name': 'Transformers: Prime', 'overview': 'Roll out with Optimus Prime, Bumblebee, Arcee, Ratchet, Bulkhead, and the rest of the heroic Autobots as they battle the evil Decepticons. Now that big bad Megatron has returned with a mysterious and dangerous element, Team Prime must prepare for an epic battle.', 'poster_path': '/ilOKsGRHYc78R2tSMusAd3xGJWq.jpg', 'media_type': 'tv', 'genre_ids': [10759, 16, 10762], 'popularity': 83.683, 'first_air_date': '2010-11-26', 'vote_average': 8.065, 'vote_count': 397, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/6USilErg8aOh2en3ozjjquOrAL0.jpg', 'id': 117682, 'name': 'Transformers: War for Cybertron: Earthrise', 'original_language': 'en', 'original_name': 'Transformers: War for Cybertron: Earthrise', 'overview': 'While Megatron takes drastic measures to save the Decepticons, the Autobots fight to save all of Cybertron from both on the planet and aboard the Ark.', 'poster_path': '/63E619RuPL9EUjPzVTWCs2jUChl.jpg', 'media_type': 'tv', 'genre_ids': [16, 10759, 10765], 'popularity': 26.387, 'first_air_date': '2020-12-30', 'vote_average': 7.608, 'vote_count': 116, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/tT6OSlLvHGM75z2Cvl51WEQ8txU.jpg', 'id': 4269, 'name': 'The Transformers', 'original_language': 'en', 'original_name': 'The Transformers', 'overview': 'The Transformers is the first animated television series in the Transformers franchise. The series depicts a war among giant robots that can transform into vehicles and other objects.', 'poster_path': '/evcHcl8Q3hCRqEIiUHevrHj3B5p.jpg', 'media_type': 'tv', 'genre_ids': [16, 10762, 10759, 10765], 'popularity': 132.309, 'first_air_date': '1984-10-06', 'vote_average': 7.847, 'vote_count': 338, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/9zcbqSxdsRMZWHYtyCd1nXPr2xq.jpg', 'id': 82856, 'name': 'The Mandalorian', 'original_language': 'en', 'original_name': 'The Mandalorian', 'overview': 'After the fall of the Galactic Empire, lawlessness has spread throughout the galaxy. A lone gunfighter makes his way through the outer reaches, earning his keep as a bounty hunter.', 'poster_path': '/eU1i6eHXlzMOlEq0ku1Rzq7Y4wA.jpg', 'media_type': 'tv', 'genre_ids': [10765, 10759, 18], 'popularity': 227.975, 'first_air_date': '2019-11-12', 'vote_average': 8.445, 'vote_count': 9657, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/4WIglfr4lDFVjCEcXzCeu6cJsOh.jpg', 'id': 93741, 'name': 'Jurassic World Camp Cretaceous', 'original_language': 'en', 'original_name': 'Jurassic World Camp Cretaceous', 'overview': 'Six teens attending an adventure camp on the opposite side of Isla Nublar must band together to survive when dinosaurs wreak havoc on the island.', 'poster_path': '/nkCbCmlwjwT6QL44DqG7qE9ch8H.jpg', 'media_type': 'tv', 'genre_ids': [16, 10762, 10759], 'popularity': 118.131, 'first_air_date': '2020-09-18', 'vote_average': 8.023, 'vote_count': 1781, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/q3jHCb4dMfYF6ojikKuHd6LscxC.jpg', 'id': 84958, 'name': 'Loki', 'original_language': 'en', 'original_name': 'Loki', 'overview': 'After stealing the Tesseract during the events of \u201cAvengers: Endgame,\u201d an alternate version of Loki is brought to the mysterious Time Variance Authority, a bureaucratic organization that exists outside of time and space and monitors the timeline. They give Loki a choice: face being erased from existence due to being a \u201ctime variant\u201d or help fix the timeline and stop a greater threat.', 'poster_path': '/voHUmluYmKyleFkTu3lOXQG702u.jpg', 'media_type': 'tv', 'genre_ids': [18, 10765], 'popularity': 246.535, 'first_air_date': '2021-06-09', 'vote_average': 8.18, 'vote_count': 11150, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/hTExot1sfn7dHZjGrk0Aiwpntxt.jpg', 'id': 48866, 'name': 'The 100', 'original_language': 'en', 'original_name': 'The 100', 'overview': \"100 years in the future, when the Earth has been abandoned due to radioactivity, the last surviving humans live on an ark orbiting the planet \u2014 but the ark won't last forever. So the repressive regime picks 100 expendable juvenile delinquents to send down to Earth to see if the planet is still habitable.\", 'poster_path': '/wcaDIAG1QdXQLRaj4vC1EFdBT2.jpg', 'media_type': 'tv', 'genre_ids': [10765, 18, 10759], 'popularity': 335.402, 'first_air_date': '2014-03-19', 'vote_average': 7.908, 'vote_count': 7861, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/aTjbqMONy77fHJrIYu14g1F0d5h.jpg', 'id': 88396, 'name': 'The Falcon and the Winter Soldier', 'original_language': 'en', 'original_name': 'The Falcon and the Winter Soldier', 'overview': 'Following the events of \u201cAvengers: Endgame\u201d, the Falcon, Sam Wilson and the Winter Soldier, Bucky Barnes team up in a global adventure that tests their abilities, and their patience.', 'poster_path': '/6kbAMLteGO8yyewYau6bJ683sw7.jpg', 'media_type': 'tv', 'genre_ids': [10759, 18], 'popularity': 85.999, 'first_air_date': '2021-03-19', 'vote_average': 7.668, 'vote_count': 8194, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/8rK0S1ZWmfF4EqVabdqB9PMIFTS.jpg', 'id': 113988, 'name': 'Dahmer - Monster: The Jeffrey Dahmer Story', 'original_language': 'en', 'original_name': 'Dahmer - Monster: The Jeffrey Dahmer Story', 'overview': 'This series examines the gruesome and horrific true crimes of Jeffrey Dahmer and the systemic failures that enabled one of America\u2019s most notorious serial killers to continue his murderous spree in plain sight for over a decade.', 'poster_path': '/f2PVrphK0u81ES256lw3oAZuF3x.jpg', 'media_type': 'tv', 'genre_ids': [80, 18], 'popularity': 133.602, 'first_air_date': '2022-09-21', 'vote_average': 8.029, 'vote_count': 2377, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/82qpvU7AzT9D8oC02fIceb5KAz8.jpg', 'id': 46648, 'name': 'True Detective', 'original_language': 'en', 'original_name': 'True Detective', 'overview': 'An American anthology police detective series utilizing multiple timelines in which investigations seem to unearth personal and professional secrets of those involved, both within or outside the law.', 'poster_path': '/cuV2O5ZyDLHSOWzg3nLVljp1ubw.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 449.62, 'first_air_date': '2014-01-12', 'vote_average': 8.303, 'vote_count': 3111, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/IONmheNL3iMogzOYX0PYlpmkxA.jpg', 'id': 96677, 'name': 'Lupin', 'original_language': 'fr', 'original_name': 'Lupin', 'overview': 'Inspired by the adventures of Ars\u00e8ne Lupin, gentleman thief Assane Diop sets out to avenge his father for an injustice inflicted by a wealthy family.', 'poster_path': '/h6Z2oogE4mJk2uffdtIlLhb0EHx.jpg', 'media_type': 'tv', 'genre_ids': [80, 18, 9648], 'popularity': 150.905, 'first_air_date': '2021-01-08', 'vote_average': 7.765, 'vote_count': 2077, 'origin_country': ['FR']}, {'adult': False, 'backdrop_path': '/rIe3PnM6S7IBUmvNwDkBMX0i9EZ.jpg', 'id': 1399, 'name': 'Game of Thrones', 'original_language': 'en', 'original_name': 'Game of Thrones', 'overview': \"Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond.\", 'poster_path': '/1XS1oqL89opfnbLl8WnZY1O1uJx.jpg', 'media_type': 'tv', 'genre_ids': [10765, 18, 10759], 'popularity': 994.002, 'first_air_date': '2011-04-17', 'vote_average': 8.446, 'vote_count': 22760, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/nTvM4mhqNlHIvUkI1gVnW6XP7GG.jpg', 'id': 85937, 'name': 'Demon Slayer: Kimetsu no Yaiba', 'original_language': 'ja', 'original_name': '\u9b3c\u6ec5\u306e\u5203', 'overview': 'It is the Taisho Period in Japan. Tanjiro, a kindhearted boy who sells charcoal for a living, finds his family slaughtered by a demon. To make matters worse, his younger sister Nezuko, the sole survivor, has been transformed into a demon herself. Though devastated by this grim reality, Tanjiro resolves to become a \u201cdemon slayer\u201d so that he can turn his sister back into a human, and kill the demon that massacred his family.', 'poster_path': '/xUfRZu2mi8jH6SzQEJGP6tjBuYj.jpg', 'media_type': 'tv', 'genre_ids': [16, 10759, 10765], 'popularity': 143.462, 'first_air_date': '2019-04-06', 'vote_average': 8.673, 'vote_count': 5920, 'origin_country': ['JP']}, {'adult': False, 'backdrop_path': '/mhAWfN7iDXxINW3wiTDvxjBkwkj.jpg', 'id': 38881, 'name': 'Transformers: Rescue Bots', 'original_language': 'en', 'original_name': 'Transformers: Rescue Bots', 'overview': 'A team of specialized Autobots not quite ready for prime-time battles against the Decepticons is given a vital mission by Optimus Prime. The goal for the Bots is to learn about mankind and how to help others to find out what it really means to be a hero.', 'poster_path': '/rPxGxcPaKgnFvwMQU0XYnie7X2G.jpg', 'media_type': 'tv', 'genre_ids': [10759, 16, 10762, 10765], 'popularity': 71.979, 'first_air_date': '2012-02-18', 'vote_average': 7.4, 'vote_count': 31, 'origin_country': ['CA', 'US']}, {'adult': False, 'backdrop_path': '/1i1N0AVRb54H6ZFPDTwbo9MLxSF.jpg', 'id': 85271, 'name': 'WandaVision', 'original_language': 'en', 'original_name': 'WandaVision', 'overview': 'Wanda Maximoff and Vision\u2014two super-powered beings living idealized suburban lives\u2014begin to suspect that everything is not as it seems.', 'poster_path': '/glKDfE6btIRcVB5zrjspRIs4r52.jpg', 'media_type': 'tv', 'genre_ids': [10765, 9648, 18], 'popularity': 97.133, 'first_air_date': '2021-01-15', 'vote_average': 8.246, 'vote_count': 11618, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/lHe8iwM4Cdm6RSEiara4PN8ZcBd.jpg', 'id': 44217, 'name': 'Vikings', 'original_language': 'en', 'original_name': 'Vikings', 'overview': \"The adventures of Ragnar Lothbrok, the greatest hero of his age. The series tells the sagas of Ragnar's band of Viking brothers and his family, as he rises to become King of the Viking tribes. As well as being a fearless warrior, Ragnar embodies the Norse traditions of devotion to the gods. Legend has it that he was a direct descendant of Odin, the god of war and warriors.\", 'poster_path': '/bQLrHIRNEkE3PdIWQrZHynQZazu.jpg', 'media_type': 'tv', 'genre_ids': [10759, 18, 10768], 'popularity': 595.21, 'first_air_date': '2013-03-03', 'vote_average': 8.091, 'vote_count': 6597, 'origin_country': ['CA']}, {'adult': False, 'backdrop_path': '/80BRASQnT9KT7BkFeEI0EdeRIF3.jpg', 'id': 1403, 'name': \"Marvel's Agents of S.H.I.E.L.D.\", 'original_language': 'en', 'original_name': \"Marvel's Agents of S.H.I.E.L.D.\", 'overview': 'Agent Phil Coulson of S.H.I.E.L.D. (Strategic Homeland Intervention, Enforcement and Logistics Division) puts together a team of agents to investigate the new, the strange and the unknown around the globe, protecting the ordinary from the extraordinary.', 'poster_path': '/gHUCCMy1vvj58tzE3dZqeC9SXus.jpg', 'media_type': 'tv', 'genre_ids': [18, 10765, 10759], 'popularity': 339.604, 'first_air_date': '2013-09-24', 'vote_average': 7.491, 'vote_count': 3329, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/aDBRtunw49UF4XmqfyNuD9nlYIu.jpg', 'id': 63174, 'name': 'Lucifer', 'original_language': 'en', 'original_name': 'Lucifer', 'overview': \"Bored and unhappy as the Lord of Hell, Lucifer Morningstar abandoned his throne and retired to Los Angeles, where he has teamed up with LAPD detective Chloe Decker to take down criminals.\\xa0But the longer he's away from the underworld, the greater the threat that the worst of humanity could escape.\", 'poster_path': '/ekZobS8isE6mA53RAiGDG93hBxL.jpg', 'media_type': 'tv', 'genre_ids': [80, 10765], 'popularity': 526.325, 'first_air_date': '2016-01-25', 'vote_average': 8.477, 'vote_count': 14232, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/9wCsImxDW4MCVP47vVjny0Wa06s.jpg', 'id': 87784, 'name': 'Defending Jacob', 'original_language': 'en', 'original_name': 'Defending Jacob', 'overview': \"A family's lives are irreparably disrupted when the 14-year-old son is accused of murdering a fellow classmate.\", 'poster_path': '/JTmkzwSDRiS9nvSPwpDB9fmZj2.jpg', 'media_type': 'tv', 'genre_ids': [18, 9648, 80], 'popularity': 57.482, 'first_air_date': '2020-04-24', 'vote_average': 8.344, 'vote_count': 1343, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/r1tMESor8QuPVKP2VxcVEX6t6ad.jpg', 'id': 43348, 'name': 'Pablo Escobar: The Drug Lord', 'original_language': 'es', 'original_name': 'Pablo Escobar: El Patr\u00f3n del Mal', 'overview': 'Pablo is a man with a natural ability for business. Early in his life, Pablo is introduced to the business of cocaine and the power it yields. A young life of crime lands Pablo in and out of jail as he builds his criminal empire. Pablo expands his power through politics but it is not long before his conflicts as a Congressman and a drug lord collide. Pablo has his enemies executed, but not before the United States activates its own war on the Medellin cartel.', 'poster_path': '/5u02bo70uzUFpEV9Pd0lFkLA9Es.jpg', 'media_type': 'tv', 'genre_ids': [80, 18], 'popularity': 279.527, 'first_air_date': '2012-05-28', 'vote_average': 7.606, 'vote_count': 3439, 'origin_country': ['CO']}, {'adult': False, 'backdrop_path': '/8Ep5ppQvqFvaMQrX3ENmM4jpNPI.jpg', 'id': 10926, 'name': 'Sonic X', 'original_language': 'ja', 'original_name': '\u30bd\u30cb\u30c3\u30afX', 'overview': 'After getting stranded on Earth, Sonic and his friends team up with 12-year-old Chris Thorndyke to collect all the Chaos Emeralds and defeat the evil Dr. Eggman.', 'poster_path': '/mudrU2unvo34g65WvCrFRz2GSpc.jpg', 'media_type': 'tv', 'genre_ids': [16, 10759, 35], 'popularity': 99.89, 'first_air_date': '2003-04-06', 'vote_average': 7.6, 'vote_count': 267, 'origin_country': ['JP']}], 'total_pages': 2, 'total_results': 40}\n"
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\ndef get_tv_show_recommendations(tv_id):\n    # API URL for getting TV show recommendations\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\n    \n    # Parameters for the API request\n    params = {\n        \"page\": 1\n    }\n\n    # Make the GET request to the API\n    response = requests.get(url, headers=headers, params=params)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        recommendations = response.json()['results']\n        return recommendations\n    else:\n        return None\n\n# Assuming the tv_id for 'The Last Of Us' is 12345, replace it with the correct value\ntv_id = 12345\n\n# Get TV show recommendations for 'The Last Of Us'\nrecommendations = get_tv_show_recommendations(tv_id)\n\n# Display the recommendations\nif recommendations:\n    for recommendation in recommendations:\n        print(recommendation['name'])  # Assuming 'name' key represents the title of the TV show\nelse:\n    print(\"Failed to fetch recommendations\")\n```",
        "usage": [
            407,
            9282,
            9689
        ],
        "executed": null
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get credits of a specific TV episode\ndef get_credits(tv_id, season_number, episode_number):\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits\"\n    response = requests.get(url, headers=headers)\n    data = response.json()\n    return data\n\n# Get the credits for Friends season 3 episode 24\ntv_id = 1668  # Friends TV show id\nseason_number = 3\nepisode_number = 24\ncredits_data = get_credits(tv_id, season_number, episode_number)\n\n# Extract guest stars from the credits data\nguest_stars = credits_data['guest_stars']\nfor guest_star in guest_stars:\n    print(guest_star['name'])\n```",
        "usage": [
            347,
            10174,
            10521
        ],
        "executed": null
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Http header for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API to get the list of the current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show with the highest popularity\nmost_popular_show = max(data['results'], key=lambda x: x['popularity'])\n\n# Extract the TV id of the most popular show\ntv_id = most_popular_show['id']\n\n# API to get the credits (cast and crew) for the most popular TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the lead actor of the most popular TV show\nlead_actor = data_credits['cast'][0]['name']\nlead_actor\n```",
        "usage": [
            383,
            9813,
            10196
        ],
        "executed": ""
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\n# Import the requests library\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/top_rated\"\n\n# Set the parameters for the request\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the JSON response\ndata = response.json()\n\n# Get the keywords for the top-1 rated TV show\nif data[\"results\"]:\n    top_rated_tv_show_keywords_url = f\"https://api.themoviedb.org/3/tv/{data['results'][0]['id']}/keywords\"\n    keywords_response = requests.get(top_rated_tv_show_keywords_url, headers=headers)\n    keywords_data = keywords_response.json()\n    keyword = None\n    if keywords_data[\"results\"]:\n        keyword = keywords_data[\"results\"][0][\"name\"]\n    print(keyword)\nelse:\n    print(\"No top rated TV shows found\")\n```",
        "usage": [
            379,
            8233,
            8612
        ],
        "executed": "hotel\n"
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show \"2 Broke Girls\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the poster path of \"2 Broke Girls\"\nif data.get(\"results\") and len(data[\"results\"]) > 0:\n    tv_id = data[\"results\"][0].get(\"id\")\n    tv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    response = requests.get(tv_details_url, headers=headers)\n    tv_data = response.json()\n    \n    poster_path = tv_data.get(\"poster_path\")\n    if poster_path:\n        poster_url = f\"https://image.tmdb.org/t/p/original/{poster_path}\"\n        print(\"Poster URL of 2 Broke Girls:\", poster_url)\n    else:\n        print(\"Poster not available for 2 Broke Girls\")\nelse:\n    print(\"TV show '2 Broke Girls' not found\")\n```",
        "usage": [
            403,
            9195,
            9598
        ],
        "executed": "Poster URL of 2 Broke Girls: https://image.tmdb.org/t/p/original//qCa4ANpF1QOioqRUNHgk2B3KFMZ.jpg\n"
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Get the TV show id for 2 Broke Girls\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"2 Broke Girls\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get the details of the TV show including the number of seasons and episodes\ntv_show_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}\"\nresponse = requests.get(tv_show_url, headers=headers)\ntotal_episodes = 0\nif response.status_code == 200:\n    total_seasons = response.json()[\"number_of_seasons\"]\n    for i in range(1, total_seasons + 1):\n        season_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/{i}\"\n        response = requests.get(season_url, headers=headers)\n        if response.status_code == 200:\n            total_episodes += len(response.json()[\"episodes\"])\n\nprint(total_episodes)\n```",
        "usage": [
            410,
            11687,
            12097
        ],
        "executed": "137\n"
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the company that produced The Big Bang Theory\nquery = \"The Big Bang Theory\"\nsearch_company_url = \"https://api.themoviedb.org/3/search/company\"\nparams = {\n    \"query\": query\n}\nresponse = requests.get(search_company_url, headers=headers, params=params)\ncompany_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the details of the company\ncompany_details_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse = requests.get(company_details_url, headers=headers)\nfounded_date = response.json().get(\"description\")\n\nprint(f\"The company that produced The Big Bang Theory was founded on: {founded_date}\")\n```",
        "usage": [
            325,
            10104,
            10429
        ],
        "executed": null
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ],
        "results": "```python\nimport requests\n\n# API url to get the details of the latest TV show\nurl = \"https://api.themoviedb.org/3/tv/latest\"\n\n# Parameters not required for this API\nparams = {}\n\n# Call the API to get the details of the latest TV show\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response status code is successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    \n    # Extract the 'first_air_date' of the latest TV show\n    first_air_date = data.get(\"first_air_date\")\n    \n    print(\"The first air date of the TV show 'The Big Bang Theory' is:\", first_air_date)\nelse:\n    print(\"Failed to get information from the API\")\n```",
        "usage": [
            171,
            9381,
            9552
        ],
        "executed": "The first air date of the TV show 'The Big Bang Theory' is: 2018-11-12\n"
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the popular TV shows API\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the first TV show's ID\ntv_show_id = data['results'][0]['id']\n\n# Call the keywords API for the most popular TV show\nkeywords_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/keywords\"\nresponse_keywords = requests.get(keywords_url, headers=headers)\nkeywords_data = response_keywords.json()\n\n# Extracting the keyword of the TV show\nkeyword = keywords_data['results'][0]['name']\n\nprint(keyword)\n```  ",
        "usage": [
            339,
            7815,
            8154
        ],
        "executed": "germany\n"
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for getting the details of the third episode of the second season of Westworld\nurl = \"https://api.themoviedb.org/3/tv/63247/season/2/episode/3\"\n\n# Include the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n\n    # Extract the overview of the third episode of the second season of Westworld\n    episode_overview = data.get(\"overview\")\n\n    print(\"The overview of the third episode of the second season of Westworld is:\")\n    print(episode_overview)\n\nelse:\n    print(\"Failed to retrieve the episode details. Status code:\", response.status_code)\n```",
        "usage": [
            340,
            9101,
            9441
        ],
        "executed": "The overview of the third episode of the second season of Westworld is:\nThere is beauty in who we are. Shouldn't we, too, try to survive? Truth is, we don't all deserve to make it. Dolores makes her next move as Charlotte scrambles to protect Delos' most prized asset. Bernard gets closer to the truth and Maeve continues the search for her daughter.\n"
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ],
        "results": "```python\nimport requests\n\n# Define the headers for the API call\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Game of Thrones\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Game of Thrones\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(search_url, headers=headers, params=search_params)\ndata = response.json()\n\n# Get the TV id of \"Game of Thrones\"\nif data.get('results'):\n    tv_id = data['results'][0]['id']\n\n    # Get the details of the first season of \"Game of Thrones\"\n    season_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1\"\n    response = requests.get(season_url, headers=headers)\n    data = response.json()\n\n    # Get the air date of the second season\n    if data.get('season_number') == 1:\n        second_season_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2\"\n        response = requests.get(second_season_url, headers=headers)\n        data = response.json()\n\n        air_date = data.get('air_date')\n        print(f\"The air date of the second season of Game of Thrones is: {air_date}\")\n    else:\n        print(\"Season 1 details not found\")\n\nelse:\n    print(\"TV show not found\")\n```",
        "usage": [
            464,
            10058,
            10522
        ],
        "executed": "The air date of the second season of Game of Thrones is: 2012-03-31\n"
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the TV show ID of Band of Brothers\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Band of Brothers\"\n}\nresponse = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_id = response.json()['results'][0]['id']\n\n# Get the images of the third episode of Band of Brothers\nurl_episode_images = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1/episode/3/images\"\nresponse = requests.get(url_episode_images, headers=headers)\nposter_path = response.json()['stills'][0]['file_path']\n\nprint(poster_path)\n```",
        "usage": [
            327,
            7664,
            7991
        ],
        "executed": "/122cDgrjc5lFqUZ7cYi8vUVrcrn.jpg\n"
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# Http headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the details of Game of Thrones TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Game of Thrones\",\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\ngame_of_thrones_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the primary TV show details by id (Game of Thrones)\nurl = f\"https://api.themoviedb.org/3/tv/{game_of_thrones_id}\"\nresponse = requests.get(url, headers=headers)\nnetwork_id = response.json()[\"networks\"][0][\"id\"]\n\n# Get the TV network logos by id\nurl = f\"https://api.themoviedb.org/3/network/{network_id}/images\"\nresponse = requests.get(url, headers=headers)\n\n# Get the logo of the network that produced Game of Thrones\nlogo_url = response.json()[\"logos\"][0][\"file_path\"]\n\nprint(f\"The logo of the network that produced Game of Thrones: https://image.tmdb.org/t/p/original{logo_url}\")\n```",
        "usage": [
            408,
            10085,
            10493
        ],
        "executed": "The logo of the network that produced Game of Thrones: https://image.tmdb.org/t/p/original/tuomPhY2UtuPTqqFnKMVHvSb724.png\n"
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the details of a TV show by id\nurl = \"https://api.themoviedb.org/3/tv/1399\"\n\n# Define the parameters needed (no extra parameters required for this API)\nparams = {}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the network id that produced Game of Thrones\nnetwork_id = response.json()[\"networks\"][0][\"id\"]\n\n# Define the API url to get the details of a network by id\nurl_network = f\"https://api.themoviedb.org/3/network/{network_id}\"\n\n# Make the GET request to the API\nresponse_network = requests.get(url_network, headers=headers, params=params)\n\n# Get the homepage of the network\nnetwork_homepage = response_network.json()[\"homepage\"]\n\nprint(network_homepage)\n```",
        "usage": [
            186,
            10961,
            11147
        ],
        "executed": "https://www.hbo.com\n"
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\n    \"page\": 1\n}\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the call was successful\nif response.status_code == 200:\n    # Get the keyword of the most popular TV show\n    results = response.json()[\"results\"]\n    if len(results) > 0:\n        tv_id = results[0][\"id\"]\n        keyword_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n        keyword_response = requests.get(keyword_url, headers=headers)\n        if keyword_response.status_code == 200:\n            keyword_data = keyword_response.json()\n            if len(keyword_data[\"results\"]) > 0:\n                popular_keyword = keyword_data[\"results\"][0][\"name\"]\n                print(f\"The keyword of the most popular TV show currently is: {popular_keyword}\")\n            else:\n                print(\"No keyword found for the most popular TV show.\")\n        else:\n            print(\"Error retrieving keyword data.\")\n    else:\n        print(\"No TV show results found.\")\nelse:\n    print(\"Error retrieving TV show data.\")\n```",
        "usage": [
            433,
            8508,
            8941
        ],
        "executed": "The keyword of the most popular TV show currently is: germany\n"
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to retrieve the list of current popular TV shows\npopular_tv_url = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}\nresponse = requests.get(popular_tv_url, headers=headers, params=params)\npopular_tv_data = response.json()\n\n# Get the company id of the production company of the most popular TV show\nmost_popular_tv_show = popular_tv_data['results'][0]\ncompany_id = most_popular_tv_show['production_companies'][0]['id']\n\n# Call the API to get the details of the production company\ncompany_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse = requests.get(company_url, headers=headers)\ncompany_data = response.json()\n\n# Extract the headquarters location of the company\nheadquarters_location = company_data.get('headquarters', 'Location not available')\n\nprint(f\"The headquarter of the company that produced the most popular TV show is: {headquarters_location}\")\n```",
        "usage": [
            388,
            9323,
            9711
        ],
        "executed": null
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the base URL for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the API endpoint for searching TV shows\nendpoint = \"/search/tv\"\n\n# Set the parameters for the query (searching for \"The Mandalorian\")\nparams = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": \"false\"\n}\n\n# Set the API key in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(base_url + endpoint, headers=headers, params=params)\n\n# Parse the JSON response\ndata = response.json()\n\n# Extracting the genre name of The Mandalorian\nif 'results' in data and len(data['results']) > 0:\n    genre_ids = data['results'][0]['genre_ids']\n    genre_names = []\n\n    # Map genre ids to genre names\n    for genre_id in genre_ids:\n        if genre_id == 10759:\n            genre_names.append(\"Action & Adventure\")\n        elif genre_id == 10765:\n            genre_names.append(\"Sci-Fi & Fantasy\")\n        elif genre_id == 37:\n            genre_names.append(\"Western\")\n\n    print(\"The genre of The Mandalorian is: \", genre_names)\nelse:\n    print(\"No results found for The Mandalorian\")\n```",
        "usage": [
            438,
            8695,
            9133
        ],
        "executed": "The genre of The Mandalorian is:  ['Sci-Fi & Fantasy', 'Action & Adventure']\n"
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "results": "```python\nimport requests\n\n# Http header to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(url, headers=headers)\ntrending_tv_shows = response.json()\n\n# Get the lead actor\nlead_actor_id = trending_tv_shows['results'][0]['credits']['cast'][0]['id']\n\n# Get the lead actor's details\nurl_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse_person = requests.get(url_person, headers=headers)\nlead_actor_details = response_person.json()\n\n# Get the birthday of the lead actor\nlead_actor_birthday = lead_actor_details['birthday']\n\nprint(f\"The birthday of the lead actor of today's most trending TV show is: {lead_actor_birthday}\")\n```",
        "usage": [
            346,
            11748,
            12094
        ],
        "executed": null
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ],
        "results": "```python\nimport requests\n\n# Define the base url for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the API key\napi_key = \"YOUR_API_KEY_HERE\"\n\n# Define the headers with Authorization token\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Get the trending TV shows\ntrending_url = f\"{base_url}/trending/tv/day\"\ntrending_response = requests.get(trending_url, headers=headers)\ntrending_data = trending_response.json()\n\n# Get the network id of the most trending TV show\nnetwork_id = trending_data[\"results\"][0][\"networks\"][0][\"id\"]\n\n# Get the details of the network\nnetwork_url = f\"{base_url}/network/{network_id}\"\nnetwork_response = requests.get(network_url, headers=headers)\nnetwork_data = network_response.json()\n\n# Get the homepage of the network\nhomepage = network_data[\"homepage\"]\n\nprint(f\"The homepage of the network that produced today's most trending TV show is: {homepage}\")\n```",
        "usage": [
            216,
            10784,
            11000
        ],
        "executed": null
    },
    {
        "query": "give me a review of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "results": "```python\nimport requests\n\n# API url for getting the daily trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Params dictionary to specify which page to query\n# We assume we want the first page of trending TV shows\nparams = {\n    \"page\": 1\n}\n\n# HTTP header with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending a GET request to the API endpoint\nresponse = requests.get(url, headers=headers, params=params)\n\n# Checking if the request was successful\nif response.status_code == 200:\n    trending_tv_shows = response.json()\n    # Assuming the first trending TV show is the most trending\n    most_trending_tv_show_id = trending_tv_shows['results'][0]['id']\n    \n    # API url to get reviews for the most trending TV show\n    review_url = f\"https://api.themoviedb.org/3/tv/{most_trending_tv_show_id}/reviews\"\n    review_params = {\n        \"page\": 1\n    }\n\n    # Sending a GET request to get reviews for the most trending TV show\n    review_response = requests.get(review_url, headers=headers, params=review_params)\n\n    if review_response.status_code == 200:\n        review_data = review_response.json()\n        reviews = review_data['results']\n        print(\"Reviews of today's most trending TV show:\")\n        for review in reviews:\n            print(\"Author:\", review['author'])\n            print(\"Content:\", review['content'])\n            print(\"-\" * 50)\n    else:\n        print(\"Failed to retrieve reviews for the most trending TV show.\")\n\nelse:\n    print(\"Failed to retrieve trending TV shows.\")\n```",
        "usage": [
            515,
            7897,
            8412
        ],
        "executed": "Reviews of today's most trending TV show:\n"
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\n# Define the base URL for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Find the most trending TV show for today\ntrending_url = f\"{base_url}/trending/tv/day\"\nresponse = requests.get(trending_url, headers=headers)\ntrending_tv_id = response.json()['results'][0]['id']\n\n# Get recommended TV shows for the most trending TV show\nsimilar_url = f\"{base_url}/tv/{trending_tv_id}/recommendations\"\nresponse = requests.get(similar_url, headers=headers)\nrecommended_shows = response.json()['results']\n\nrecommended_show_names = [show['name'] for show in recommended_shows]\nprint(recommended_show_names)\n```",
        "usage": [
            331,
            7721,
            8052
        ],
        "executed": "['American Nightmare', 'Rick and Morty', 'Game of Thrones', 'Stranger Things', 'Star Wars: The Clone Wars', 'The Boys', 'Loki', 'Breaking Bad', 'The Night Of', 'The Last of Us', 'Chernobyl', 'Westworld', 'Fear the Walking Dead', 'Reacher', 'The Book of Boba Fett', 'The Falcon and the Winter Soldier', 'Band of Brothers', 'The Expanse', 'Cobra Kai', 'Ozark', 'The Lord of the Rings: The Rings of Power']\n"
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    if 'results' in data and len(data['results']) > 0:\n        trending_tv_show = data['results'][0]\n        poster_path = trending_tv_show.get('poster_path')\n        if poster_path:\n            poster_url = f\"https://image.tmdb.org/t/p/original/{poster_path}\"\n            print(poster_url)\n        else:\n            print(\"No poster found for the trending TV show\")\n    else:\n        print(\"No results found for trending TV shows\")\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            329,
            9340,
            9669
        ],
        "executed": "https://image.tmdb.org/t/p/original//e5hw7bThIs8u6WBHjYHhwTIRsL2.jpg\n"
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/latest"
        ],
        "results": "```python\nimport requests\n\n# Set the API key and header\napi_key = \"YOUR_API_KEY\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for Jeremy Clarkson's person id\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nperson_search_params = {\n    \"query\": \"Jeremy Clarkson\"\n}\nresponse = requests.get(person_search_url, headers=headers, params=person_search_params)\nperson_search_results = response.json()\njeremy_clarkson_id = person_search_results[\"results\"][0][\"id\"]\n\n# Get the TV show credits for Jeremy Clarkson\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{jeremy_clarkson_id}/tv_credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\ntv_credits_results = response.json()\n\n# Find the most popular TV show for Jeremy Clarkson\nmost_popular_show = None\nmax_popularity = 0\nfor credit in tv_credits_results[\"cast\"]:\n    if credit[\"popularity\"] > max_popularity:\n        most_popular_show = credit\n        max_popularity = credit[\"popularity\"]\n\n# Get the cast and crew for the most popular show\ntv_id = most_popular_show[\"id\"]\ntv_credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\ntv_credits_results = response.json()\n\n# Find who has worked with Jeremy Clarkson in the most popular show\ncollaborators = []\nfor credit in tv_credits_results[\"cast\"]:\n    if credit[\"name\"] != \"Jeremy Clarkson\":\n        collaborators.append(credit[\"name\"])\n\n# Print the collaborators\nprint(collaborators)\n```",
        "usage": [
            371,
            10755,
            11126
        ],
        "executed": null
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show Black Mirror\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Black Mirror\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\ntv_show_id = search_results['results'][0]['id']\n\n# Get the credits for the second season of Black Mirror\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/2/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_results = credits_response.json()\n\n# Get the information about the lead actor of the first episode\nlead_actor_name = credits_results['cast'][0]['name']\nlead_actor_profile_path = credits_results['cast'][0]['profile_path']\n\nprint(f\"The lead actor of the first episode of the second season of Black Mirror is {lead_actor_name}\")\n\n# Get the image of the lead actor\nif lead_actor_profile_path:\n    image_url = f\"https://image.tmdb.org/t/p/original/{lead_actor_profile_path}\"\n    image_response = requests.get(image_url)\n    with open(f\"{lead_actor_name}.jpg\", \"wb\") as file:\n        file.write(image_response.content)\n        print(f\"Image of the actor {lead_actor_name} saved as {lead_actor_name}.jpg\")\nelse:\n    print(\"No profile image available for the lead actor\")\n```  ",
        "usage": [
            497,
            8635,
            9132
        ],
        "executed": null
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/discover/tv"
        ],
        "results": "```python\nimport requests\n\n# API url to search for the TV show \"The Mandalorian\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\n\n# Call the API to search for the TV show \"The Mandalorian\"\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show ID\ntv_id = data_search_tv[\"results\"][0][\"id\"]\n\n# API url to get the credits for the TV show\nurl_credits_tv = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n\n# Call the API to get the credits of the TV show\nresponse_credits_tv = requests.get(url_credits_tv, headers=headers)\ndata_credits_tv = response_credits_tv.json()\n\n# Get the lead actor ID\nlead_actor_id = data_credits_tv[\"cast\"][0][\"id\"]\n\n# API url to get the person details by ID\nurl_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n\n# Call the API to get the person details\nresponse_person = requests.get(url_person, headers=headers)\ndata_person = response_person.json()\n\n# Get the birthday of the lead actor\nbirthday = data_person[\"birthday\"]\nprint(birthday)  # Output: e.g. \"1980-06-01\"\n```",
        "usage": [
            319,
            10134,
            10453
        ],
        "executed": "1975-04-02\n"
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Call the endpoint to get the list of popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}  # Get the first page\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    # Get the TV show with the highest popularity\n    popular_shows = response.json()[\"results\"]\n    most_popular_show = max(popular_shows, key=lambda x: x[\"popularity\"])\n    tv_id = most_popular_show[\"id\"]\n    \n    # Call the endpoint to get the credits for the most popular TV show\n    url_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    response_credits = requests.get(url_credits, headers=headers)\n    \n    if response_credits.status_code == 200:\n        # Get the lead actor of the most popular TV show\n        credits = response_credits.json()\n        cast = credits[\"cast\"]\n        \n        # Assuming lead actor is the first person in the cast list\n        lead_actor = cast[0][\"name\"]\n        print(f\"The lead actor of today's most popular TV show is: {lead_actor}\")\n    else:\n        print(\"Error fetching credits for the TV show\")\nelse:\n    print(\"Error fetching popular TV shows\")\n```",
        "usage": [
            337,
            10247,
            10584
        ],
        "executed": "Error fetching popular TV shows\n"
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting the TV show ID of the most popular show\ntv_show_id = response.json()['results'][0]['id']\n\n# Define the TV show credits API endpoint\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n\n# Make the API call to get the credits of the TV show\nresponse_credits = requests.get(url_credits, headers=headers)\n\n# Extracting the lead actor ID\nlead_actor_id = response_credits.json()['cast'][0]['id']\n\n# Define the images API endpoint for the lead actor\nurl_images = f\"https://api.themoviedb.org/3/person/{lead_actor_id}/images\"\n\n# Make the API call to get the images of the lead actor\nresponse_images = requests.get(url_images, headers=headers)\n\n# Get the image path of the lead actor\nlead_actor_image_path = response_images.json()['profiles'][0]['file_path']\n\n# Print the full image URL\nprint(f\"Image URL: https://image.tmdb.org/t/p/original/{lead_actor_image_path}\")\n```",
        "usage": [
            463,
            9504,
            9967
        ],
        "executed": "Image URL: https://image.tmdb.org/t/p/original//yYjGRTKpBW2XHaBfoA8ilJtmXDq.jpg\n"
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Cate Blanchett\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nperson_search_params = {\n    \"query\": \"Cate Blanchett\",\n    \"include_adult\": False\n}\nresponse = requests.get(person_search_url, headers=headers, params=person_search_params)\nresults = response.json()[\"results\"]\n\nif len(results) > 0:\n    person_id = results[0][\"id\"]\n\n    # Get the TV credits for Cate Blanchett\n    tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n    response = requests.get(tv_credits_url, headers=headers)\n    tv_credits = response.json()\n\n    if len(tv_credits[\"cast\"]) > 0:\n        # Get the latest TV show\n        latest_tv_show_id = tv_credits[\"cast\"][0][\"id\"]\n\n        # Get the reviews for the latest TV show\n        tv_reviews_url = f\"https://api.themoviedb.org/3/tv/{latest_tv_show_id}/reviews\"\n        response = requests.get(tv_reviews_url, headers=headers)\n        tv_reviews = response.json()[\"results\"]\n        \n        # Print out the reviews\n        for review in tv_reviews:\n            print(\"Author:\", review[\"author\"])\n            print(\"Content:\", review[\"content\"])\n            print(\"URL:\", review[\"url\"])\n            print(\"----------------------------------------\")\n\n    else:\n        print(\"No TV credits found for Cate Blanchett.\")\nelse:\n    print(\"Cate Blanchett not found.\")\n```",
        "usage": [
            504,
            11436,
            11940
        ],
        "executed": ""
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# Http header for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for David Schwimmer\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Retrieve David Schwimmer's person id\nperson_id = data['results'][0]['id']\n\n# Get the TV show credits for David Schwimmer\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Find the most popular TV show\nmost_popular_show = None\nmax_popularity = 0\nfor show in data['cast']:\n    if show['popularity'] > max_popularity:\n        most_popular_show = show['name']\n        max_popularity = show['popularity']\n\nprint(f\"David Schwimmer's most popular TV show is: {most_popular_show}\")\n```",
        "usage": [
            405,
            10030,
            10435
        ],
        "executed": "David Schwimmer's most popular TV show is: The Daily Show\n"
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/42009/season/2/episode/3\"\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Get the director's name from the API response\nif response.status_code == 200:\n    episode_details = response.json()\n    crew = episode_details.get('crew', [])\n    for person in crew:\n        if person.get('job') == 'Director':\n            director_name = person.get('name')\n            print(f\"The director of the third episode of the second season of Black Mirror is: {director_name}\")\n            break\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            337,
            8966,
            9303
        ],
        "executed": "The director of the third episode of the second season of Black Mirror is: Bryn Higgins\n"
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Set the parameters\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Call the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()[\"results\"]\n    \n    # Check if there are results\n    if results:\n        # Get the known_for list of the first person\n        known_for = results[0][\"known_for\"]\n        \n        # Check if the known_for list is not empty\n        if known_for:\n            # Extract the movie titles\n            movies_known_for = [item[\"title\"] for item in known_for if item[\"media_type\"] == \"movie\"]\n            print(movies_known_for)\n        else:\n            print(\"No movies found for Christopher Nolan\")\n    else:\n        print(\"No results found for Christopher Nolan\")\nelse:\n    print(\"Error: Unable to retrieve data\")  \n```",
        "usage": [
            241,
            9351,
            9592
        ],
        "executed": "['Inception', 'Interstellar', 'The Dark Knight']\n"
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Avatar movie\nquery_avatar = \"Avatar\"\nparams_avatar = {\n    \"query\": query_avatar,\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse_avatar = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=params_avatar)\ndata_avatar = response_avatar.json()\n\n# Search for Avatar: The Way of Water movie\nquery_avatar_water = \"Avatar: The Way of Water\"\nparams_avatar_water = {\n    \"query\": query_avatar_water,\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse_avatar_water = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=params_avatar_water)\ndata_avatar_water = response_avatar_water.json()\n\n# Get the average rating for each movie\nrating_avatar = data_avatar[\"results\"][0][\"vote_average\"] if data_avatar[\"results\"] else 0\nrating_avatar_water = data_avatar_water[\"results\"][0][\"vote_average\"] if data_avatar_water[\"results\"] else 0\n\n# Compare the ratings\nif rating_avatar > rating_avatar_water:\n    print(f\"{query_avatar} has a higher rating than {query_avatar_water}\")\nelif rating_avatar_water > rating_avatar:\n    print(f\"{query_avatar_water} has a higher rating than {query_avatar}\")\nelse:\n    print(f\"{query_avatar} and {query_avatar_water} have the same rating\")\n```",
        "usage": [
            475,
            8196,
            8671
        ],
        "executed": "Avatar: The Way of Water has a higher rating than Avatar\n"
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# Provide the API url\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n\n# Specify the parameters\nparams = {\n    \"sort_by\": \"vote_average.desc\",\n    \"primary_release_year\": 2021,\n    \"vote_average.gte\": 7.0,\n    \"with_original_language\": \"en\",\n    \"page\": 1\n}\n\n# Request the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()\n    movie_list = results['results']\n    \n    # Print the movie list\n    for movie in movie_list:\n        print(\"Title:\", movie['title'])\n        print(\"Release Date:\", movie['release_date'])\n        print(\"Vote Average:\", movie['vote_average'])\n        print(\"Overview:\", movie['overview'])\n        print(\"------------------------------\")\nelse:\n    print(\"Error: Unable to retrieve data\")\n```",
        "usage": [
            213,
            10360,
            10573
        ],
        "executed": "Title: MORT THEORY: The Crimes of Mort\nRelease Date: 2021-07-27\nVote Average: 10.0\nOverview: A man named \"The theorizer\" goes insane as he analyzes the character Mort from \"Madagascar\", he delves into shows such as \"All hail king Julien\"  and \"Penguins of madagascar\". And the end results are shocking\n------------------------------\nTitle: Dreamers: Cleo Ice Queen feat. Tio Nason\nRelease Date: 2021-01-03\nVote Average: 10.0\nOverview: Learn everything you can learn now while you are young. If you think you are old now, well let me remind you that NOTHING IS TOO LATE. If you will start it now, you are never too old to do it! Don\u2019t wait for another year older for you to learn something new. JUST DO IT\n------------------------------\nTitle: Chin Godzilla - A Phantasmagorical Film\nRelease Date: 2021-11-17\nVote Average: 10.0\nOverview: While being pursued by fighter jets, Zilla discovers the magnificent powers his chin holds. Following this, Zilla begins to use his newly acquired chin powers to solve all his problems.\n------------------------------\nTitle: Average Joe\nRelease Date: 2021-12-14\nVote Average: 10.0\nOverview: Watch the enthralling underdog story that started it all!\n------------------------------\nTitle: The Torture Memos\nRelease Date: 2021-01-01\nVote Average: 10.0\nOverview: An independent Goreploitation film dealing with the  very real horrors of child abduction, torture and  murder.\n------------------------------\nTitle: Funny\nRelease Date: 2021-11-09\nVote Average: 10.0\nOverview: A mystery drama about girls' friendship.\n------------------------------\nTitle: Paperbag\nRelease Date: 2021-02-28\nVote Average: 10.0\nOverview: An eerie night, supposedly outside of reality, becomes darker when \u201cUnnamed\u201d stumbles upon a white dressed man with a paper bag for a head.\n------------------------------\nTitle: The Camorra\nRelease Date: 2021-06-30\nVote Average: 10.0\nOverview: Set in the 1940s, Detective Robert Gallahan and Detective Thomas Briggs are in charge of the murder case of Patricia Adams. An unemployed woman in poverty trying her best to live. Turns out this case is much bigger than anticipated. The murder involves a ruthless gang of thieves and killers who rob, murder and deter on the streets of old Manchester. But things are never as they seem. The detective's need to keep their eyes peeled.\n------------------------------\nTitle: Inkubi\nRelease Date: 2021-05-16\nVote Average: 10.0\nOverview: A man is visited by an evil spirit.\n------------------------------\nTitle: Medusa\nRelease Date: 2021-11-02\nVote Average: 10.0\nOverview: An aquatic journey\n------------------------------\nTitle: Through Hell & Rice 2\nRelease Date: 2021-10-30\nVote Average: 10.0\nOverview: After Haukur gets magically turned into a girl, her friends must find a way to turn him back into a boy whilst defeating the evil mastermind behind it.\n------------------------------\nTitle: What Happened At The Americana?\nRelease Date: 2021-01-22\nVote Average: 10.0\nOverview: A group of actors are invited to a cast dinner where they discover the dead body of their director. As the situation escalates they soon forget about the murder and become focused only on their own personal agendas and problems.\n------------------------------\nTitle: Wrath of Briand\nRelease Date: 2021-08-28\nVote Average: 10.0\nOverview: After the murder of his wife and children, Cash Briand seeks vengeance while losing his identity in the process....\n------------------------------\nTitle: The Grassening\nRelease Date: 2021-01-14\nVote Average: 10.0\nOverview: A man is attacked for his weed\n------------------------------\nTitle: Edge of the Valley\nRelease Date: 2021-11-20\nVote Average: 10.0\nOverview: A nine-year-old Syrian refugee girl contemplates her increasingly bleak future after being forced to drop out of school in the midst of Lebanon\u2019s unprecedented economic collapse and battle with Covid-19.\n------------------------------\nTitle: Drifting\nRelease Date: 2021-08-31\nVote Average: 10.0\nOverview: A teenager contemplates his relationship with God and others as his days are filled with loneliness.\n------------------------------\nTitle: Seconds\nRelease Date: 2021-01-31\nVote Average: 10.0\nOverview: A depiction of the varying passage of time.\n------------------------------\nTitle: Bad Piggies II: The Countdown to Balls\nRelease Date: 2021-04-17\nVote Average: 10.0\nOverview: It has been about a week since the Bad Piggy was found in a local man's home, but he hasn't been seen since then. Several people have been on the lookout for the Bad Piggy, including a guy named Mike. and during his 20th Annual Nut Countdown, a familiar face appears.\n------------------------------\nTitle: The Secret of the Orchard\nRelease Date: 2021-05-09\nVote Average: 10.0\nOverview: A long time ago lived a king named Lenoire. One day he was granted one of the greatest gifts that man can ever receive and, instead of accepting this gift, he refused it, sealing it in the darkest meanders of the wood.\n------------------------------\nTitle: The God Can\nRelease Date: 2021-07-20\nVote Average: 10.0\nOverview: A young man grapples with addiction, recovery and a newfound sense of faith.\n------------------------------\n"
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the query parameters\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"include_adult\": False,\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the genre of the movie Lord of the Rings\nif response.status_code == 200:\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        movie_genre_ids = data[\"results\"][0][\"genre_ids\"]\n        print(\"Genre IDs of the movie Lord of the Rings:\", movie_genre_ids)\n    else:\n        print(\"No results found for the movie Lord of the Rings.\")\nelse:\n    print(\"Failed to fetch data. Status code:\", response.status_code)\n```",
        "usage": [
            352,
            9710,
            10062
        ],
        "executed": "Genre IDs of the movie Lord of the Rings: [12, 14, 28]\n"
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "results": "```python\nimport requests\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url for getting the list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\nresponse = requests.get(url, headers=headers)\n\n# Get the results of popular people\ndata = response.json()\npopular_people = data['results']\n\n# Find the most popular person\nmost_popular_person = max(popular_people, key=lambda x: x['popularity'])\n\n# Get the id of the most popular person\nmost_popular_person_id = most_popular_person['id']\n\n# API url for getting the details of the most popular person\nurl_person = f\"https://api.themoviedb.org/3/person/{most_popular_person_id}\"\nresponse_person = requests.get(url_person, headers=headers)\n\n# Get the birthday of the most popular person\nbirthday = response_person.json()['birthday']\nprint(birthday)\n```",
        "usage": [
            355,
            10160,
            10515
        ],
        "executed": "1967-07-26\n"
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the TV show ID of \"Big Bang Theory\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Big Bang Theory\",\n    \"include_adult\": False\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_id = response_search_tv.json()[\"results\"][0][\"id\"]\n\n# Define the API endpoint to get the images of the second season of \"Big Bang Theory\"\nurl_tv_season_images = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/images\"\nresponse_tv_season_images = requests.get(url_tv_season_images, headers=headers)\n\n# Get the poster path of the second season of \"Big Bang Theory\"\nposter_path = response_tv_season_images.json()[\"posters\"][0][\"file_path\"]\n\nprint(f\"The poster path for the second season of Big Bang Theory is: {poster_path}\")\n```",
        "usage": [
            212,
            8313,
            8525
        ],
        "executed": "The poster path for the second season of Big Bang Theory is: /2NBwUBZ4clwj6qO9fBinfxiB0dR.jpg\n"
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2/episode/3\"\n\n# Define the headers with the provided authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the json data from the response\n    data = response.json()\n    # Extract the name of the third episode of the second season of Mandalorian\n    episode_name = data.get(\"name\")\n    print(episode_name)\nelse:\n    print(\"Error in accessing the API\")\n```",
        "usage": [
            320,
            10286,
            10606
        ],
        "executed": "Chapter 11: The Heiress\n"
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for the movie \"The Shawshank Redemption\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Make a request to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie_id of \"The Shawshank Redemption\"\nmovie_id = data_search_movie['results'][0]['id']\n\n# Define the API endpoint to get the credits of the movie\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make a request to get the credits of the movie\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Get the lead actor's id\nlead_actor_id = data_movie_credits['cast'][0]['id']\n\n# Define the API endpoint to get the details of the lead actor by id\nurl_person_details = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n\n# Make a request to get the details of the lead actor\nresponse_person_details = requests.get(url_person_details, headers=headers)\ndata_person_details = response_person_details.json()\n\n# Get the birthday of the lead actor\nlead_actor_birthday = data_person_details['birthday']\nprint(\"The birthday of the lead actor of the movie The Shawshank Redemption is:\", lead_actor_birthday)\n```",
        "usage": [
            359,
            7904,
            8263
        ],
        "executed": "The birthday of the lead actor of the movie The Shawshank Redemption is: 1958-10-16\n"
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Shawshank Redemption\" to get the director's credit ID\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\nmovie_results = response.json()[\"results\"]\ndirector_credit_id = None\n\nif len(movie_results) > 0:\n    # Get the director's credit ID\n    movie_id = movie_results[0][\"id\"]\n    movie_credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response = requests.get(movie_credits_url, headers=headers)\n    credits = response.json()\n    for crew in credits[\"crew\"]:\n        if crew[\"job\"] == \"Director\":\n            director_credit_id = crew[\"credit_id\"]\n\nif director_credit_id:\n    # Get the director's details, including birthday\n    person_credits_url = f\"https://api.themoviedb.org/3/credit/{director_credit_id}\"\n    response = requests.get(person_credits_url, headers=headers)\n    director_details = response.json()\n    birthday = director_details[\"person\"][\"birthday\"]\n    print(\"The birthday of the director of the movie 'The Shawshank Redemption' is:\", birthday)\nelse:\n    print(\"Director for 'The Shawshank Redemption' not found.\")\n```",
        "usage": [
            472,
            8918,
            9390
        ],
        "executed": null
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching movie\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for searching the movie \"The Shawshank Redemption\"\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"  # Assuming the movie was released in the US\n}\n\n# Make a GET request to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params)\nresult_search_movie = response_search_movie.json()\n\n# Assume the first result is the movie The Shawshank Redemption\nif result_search_movie['total_results'] > 0:\n    company_id = result_search_movie['results'][0]['production_company'][0]  # Get the company id\nelse:\n    print(\"Movie not found.\")\n    # In case the movie is not found, it will stop here\n\n# Define the API url for getting company details\nurl_company_details = f\"https://api.themoviedb.org/3/company/{company_id}\"\n\n# Make a GET request to get the company details\nresponse_company_details = requests.get(url_company_details, headers=headers)\nresult_company_details = response_company_details.json()\n\n# Extract the headquarters information for the company\nheadquarters = result_company_details['headquarters']\n\nprint(\"The headquarters of the company that created The Shawshank Redemption is:\", headquarters)\n```  ",
        "usage": [
            310,
            8091,
            8401
        ],
        "executed": null
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the collection with name Star Wars\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\n    \"query\": \"Star Wars\"\n}\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ndata_search_collection = response_search_collection.json()\n\n# Get the company id that created the Star Wars collection\ncompany_id = data_search_collection[\"results\"][0][\"id\"]\n\n# Define the API endpoint to get the company details by id\nurl_company_details = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse_company_details = requests.get(url_company_details, headers=headers)\ndata_company_details = response_company_details.json()\n\n# Get the headquarters of the company that created the Star Wars collection\ncompany_headquarters = data_company_details[\"headquarters\"]\nprint(company_headquarters)\n```",
        "usage": [
            193,
            6593,
            6786
        ],
        "executed": "\n"
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# Define the URL for searching the movie \"The Double Life of Veronique\"\nsearch_url_veronique = \"https://api.themoviedb.org/3/search/movie\"\n# Define the parameters for searching the movie \"The Double Life of Veronique\"\nparams_veronique = {\n    \"query\": \"The Double Life of Veronique\",\n    \"include_adult\": False\n}\n\n# Make a GET request to search for the movie \"The Double Life of Veronique\"\nresponse_veronique = requests.get(search_url_veronique, headers=headers, params=params_veronique)\ndata_veronique = response_veronique.json()\n\n# Extracting the release date of the movie \"The Double Life of Veronique\"\nveronique_results = data_veronique[\"results\"]\nveronique_release_date = veronique_results[0][\"release_date\"]\n\n# Define the URL for searching the movie \"Mulholland Drive\"\nsearch_url_drive = \"https://api.themoviedb.org/3/search/movie\"\n# Define the parameters for searching the movie \"Mulholland Drive\"\nparams_drive = {\n    \"query\": \"Mulholland Drive\",\n    \"include_adult\": False\n}\n\n# Make a GET request to search for the movie \"Mulholland Drive\"\nresponse_drive = requests.get(search_url_drive, headers=headers, params=params_drive)\ndata_drive = response_drive.json()\n\n# Extracting the release date of the movie \"Mulholland Drive\"\ndrive_results = data_drive[\"results\"]\ndrive_release_date = drive_results[0][\"release_date\"]\n\n# Comparing the release dates of the two movies\nif veronique_release_date < drive_release_date:\n    print(\"The Double Life of Veronique has an earlier release date than Mulholland Drive.\")\nelse:\n    print(\"Mulholland Drive has an earlier release date than The Double Life of Veronique.\")\n```",
        "usage": [
            398,
            10631,
            11029
        ],
        "executed": "The Double Life of Veronique has an earlier release date than Mulholland Drive.\n"
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the crew of a TV season\ndef get_crew_of_season(tv_id, season_number):\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits\"\n    response = requests.get(url, headers=headers)\n    data = response.json()\n    return data['crew']\n\n# Get the crew of Twin Peaks Season 1\ntwin_peaks_crew = get_crew_of_season(82, 1)  # Assuming TV Show ID for Twin Peaks is 82 and Season Number is 1\n\n# Get the crew of Mulholland Drive Season 1\nmulholland_drive_crew = get_crew_of_season(857, 1)  # Assuming TV Show ID for Mulholland Drive is 857 and Season Number is 1\n\n# Extract the directors from the crews\ntwin_peaks_directors = [crew['name'] for crew in twin_peaks_crew if crew['job'] == 'Director']\nmulholland_drive_directors = [crew['name'] for crew in mulholland_drive_crew if crew['job'] == 'Director']\n\n# Check if the same person directed both Twin Peaks Season 1 and Mulholland Drive\nsame_director = any(director in twin_peaks_directors for director in mulholland_drive_directors)\nprint(same_director)\n```",
        "usage": [
            467,
            9915,
            10382
        ],
        "executed": null
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the movie details of \"Mulholland Drive\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters to search for the movie \"Mulholland Drive\"\nparams_search_movie = {\n    \"query\": \"Mulholland Drive\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"\",\n    \"year\": \"\",\n    \"primary_release_year\": \"\"\n}\n\n# Call the API to search for the movie \"Mulholland Drive\"\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie id of \"Mulholland Drive\"\nmovie_id = data_search_movie['results'][0]['id']\n\n# Define the API url to get the credits of the movie\nurl_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Call the API to get the credits of the movie \"Mulholland Drive\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the director's name of the movie\nfor crew_member in data_credits['crew']:\n    if crew_member['job'] == \"Director\":\n        director_id = crew_member['id']\n        break\n\n# Define the API url to get the details of the director\nurl_person = f\"https://api.themoviedb.org/3/person/{director_id}\"\n\n# Call the API to get the details of the director\nresponse_person = requests.get(url_person, headers=headers)\ndata_person = response_person.json()\n\n# Get the birth place of the director\ndirector_birthplace = data_person['place_of_birth']\nprint(f\"The director of Mulholland Drive was born in: {director_birthplace}\")\n```",
        "usage": [
            392,
            9208,
            9600
        ],
        "executed": "The director of Mulholland Drive was born in: Missoula, Montana, USA\n"
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for getting the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    # Get the list of top rated movies from the API response\n    top_rated_movies = response.json()[\"results\"]\n    \n    # Find Mulholland Drive in the top rated movies\n    is_mulholland_drive_top_rated = False\n    for movie in top_rated_movies:\n        if movie[\"title\"] == \"Mulholland Drive\":\n            is_mulholland_drive_top_rated = True\n            break\n    \n    # Print the result\n    if is_mulholland_drive_top_rated:\n        print(\"Mulholland Drive is in the Top-10 rated list of TMDB.\")\n    else:\n        print(\"Mulholland Drive is not in the Top-10 rated list of TMDB.\")\nelse:\n    print(\"Failed to retrieve data from the API.\")\n```",
        "usage": [
            410,
            7988,
            8398
        ],
        "executed": "Mulholland Drive is not in the Top-10 rated list of TMDB.\n"
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define function to get the director's movie count\ndef get_director_movie_count(director_name):\n    url = f\"https://api.themoviedb.org/3/search/person\"\n    params = {\n        \"query\": director_name,\n        \"include_adult\": \"false\"\n    }\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n    if data.get(\"total_results\", 0) > 0:\n        return data[\"results\"][0][\"known_for_department\"], len(data[\"results\"][0][\"known_for\"])\n    else:\n        return None, 0\n\n# Get movie count for Akira Kurosawa\nakira_department, akira_movie_count = get_director_movie_count(\"Akira Kurosawa\")\n\n# Get movie count for Spielberg\nspielberg_department, spielberg_movie_count = get_director_movie_count(\"Steven Spielberg\")\n\n# Compare the movie counts for the directors\nif akira_movie_count > spielberg_movie_count:\n    print(\"Akira Kurosawa directed more movies.\")\nelif akira_movie_count < spielberg_movie_count:\n    print(\"Steven Spielberg directed more movies.\")\nelse:\n    print(\"Akira Kurosawa and Steven Spielberg have directed an equal number of movies.\")\n\n```",
        "usage": [
            437,
            9882,
            10319
        ],
        "executed": null
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n# Set the base url for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Get the director id for Mulholland Drive\nresponse = requests.get(f\"{base_url}/movie/10183/credits\", headers={\"Authorization\": f\"Bearer {api_key}\"})\ndirector_id = None\nif response.status_code == 200:\n    data = response.json()\n    for crew_member in data[\"crew\"]:\n        if crew_member[\"job\"] == \"Director\":\n            director_id = crew_member[\"id\"]\n\n# Get the TV series directed by the director of Mulholland Drive\ntv_series_list = []\nif director_id:\n    response = requests.get(f\"{base_url}/person/{director_id}/tv_credits\", headers={\"Authorization\": f\"Bearer {api_key}\"})\n    if response.status_code == 200:\n        data = response.json()\n        for tv_show in data[\"crew\"]:\n            tv_series_list.append(tv_show[\"original_name\"])\n\nprint(tv_series_list)\n```",
        "usage": [
            242,
            8129,
            8371
        ],
        "executed": "[]\n"
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API key\napi_key = \"YOUR_API_KEY\"\n\n# Define the base url and headers\nbase_url = \"https://api.themoviedb.org/3/\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for Scarlett Johansson\nsearch_url = base_url + \"search/person\"\nparams = {\n    \"query\": \"Scarlett Johansson\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nsearch_results = response.json()\n\n# Get Scarlett Johansson's person id\nperson_id = search_results['results'][0]['id']\n\n# Get Scarlett Johansson's birthday\nperson_details_url = base_url + f\"person/{person_id}\"\nresponse = requests.get(person_details_url, headers=headers)\nperson_details = response.json()\n\n# Print Scarlett Johansson's birthday\nprint(\"Scarlett Johansson's birthday is:\", person_details['birthday'])\n```",
        "usage": [
            201,
            8969,
            9170
        ],
        "executed": null
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching TV shows\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for searching 'Sword Art Online' TV show\nparams = {\n    \"query\": \"Sword Art Online\",\n    \"include_adult\": \"false\"\n}\n\n# Make the HTTP request to search for TV shows\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the response to get the total number of seasons\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        tv_id = data[\"results\"][0][\"id\"]  # Get the TV show ID for Sword Art Online\n\n        # Define the API endpoint for getting TV show details\n        url_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n\n        # Make the HTTP request to get details of the TV show\n        response_details = requests.get(url_details, headers=headers)\n\n        if response_details.status_code == 200:\n            # Parse the response to get the number of seasons\n            data_details = response_details.json()\n            num_seasons = data_details[\"number_of_seasons\"]\n            print(f\"Number of seasons of Sword Art Online: {num_seasons}\")\n        else:\n            print(\"Error in getting TV show details\")\n    else:\n        print(\"Sword Art Online TV show not found\")\nelse:\n    print(\"Error in searching TV shows\")\n```",
        "usage": [
            323,
            9580,
            9903
        ],
        "executed": "Number of seasons of Sword Art Online: 4\n"
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/person\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Yui Aragaki\nparams_yui = {\n    \"query\": \"Yui Aragaki\",\n    \"page\": 1\n}\nresponse_yui = requests.get(url, headers=headers, params=params_yui)\nyui_data = response_yui.json()\nyui_id = yui_data['results'][0]['id']\n\n# Search for Gen Hoshino\nparams_gen = {\n    \"query\": \"Gen Hoshino\",\n    \"page\": 1\n}\nresponse_gen = requests.get(url, headers=headers, params=params_gen)\ngen_data = response_gen.json()\ngen_id = gen_data['results'][0]['id']\n\n# Check if both Yui Aragaki and Gen Hoshino are co-starring in We Married as Job\nco_starring = False\nurl_job = \"https://api.themoviedb.org/3/person/\" + str(yui_id) + \"/tv_credits\"\nresponse_job = requests.get(url_job, headers=headers)\njob_data = response_job.json()\nfor credit in job_data['cast']:\n    if credit['id'] == gen_id and credit['name'] == \"We Married as Job\":\n        co_starring = True\n\nif co_starring:\n    print(\"Yui Aragaki and Gen Hoshino are co-starring in We Married as Job.\")\nelse:\n    print(\"Yui Aragaki and Gen Hoshino are not co-starring in We Married as Job.\")\n```",
        "usage": [
            500,
            9865,
            10365
        ],
        "executed": "Yui Aragaki and Gen Hoshino are not co-starring in We Married as Job.\n"
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Set the API key\nAPI_KEY = \"0dbab590c7eaca07ebcfa5d4e6f6c370\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the age of a person given their birthdate\ndef get_age(birthdate):\n    current_year = 2022\n    birth_year = int(birthdate[:4])\n    return current_year - birth_year\n\n# Get the director of the movie 'Barbie'\nmovie_id = 36658\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(url_movie_credits, headers=headers)\ndata = response.json()\ndirector_birthdate = \"\"\nfor crew_member in data[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director_birthdate = crew_member[\"birthday\"]\n        break\n\n# Get the lead actor of the TV show 'DEATH NOTE'\ntv_id = 457\nurl_tv_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\nresponse = requests.get(url_tv_credits, headers=headers)\ndata = response.json()\nactor_birthdate = \"\"\nfor cast_member in data[\"cast\"]:\n    if cast_member[\"order\"] == 0:\n        actor_birthdate = cast_member[\"birthday\"]\n        break\n\n# Calculate the ages and age difference\ndirector_age = get_age(director_birthdate)\nactor_age = get_age(actor_birthdate)\nage_difference = abs(director_age - actor_age)\n\nprint(f\"The director of the movie 'Barbie' is {director_age} years old.\")\nprint(f\"The lead actor of the TV show 'DEATH NOTE' is {actor_age} years old.\")\nprint(f\"The age difference is {age_difference} years.\")\n```",
        "usage": [
            546,
            11313,
            11859
        ],
        "executed": null
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for Katherine LaNasa to get her person id\nsearch_params = {\n    \"query\": \"Katherine LaNasa\",\n    \"include_adult\": False\n}\n\nsearch_response = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=search_params)\nsearch_data = search_response.json()\n\nif search_data['total_results'] == 0:\n    print(\"Katherine LaNasa not found.\")\nelse:\n    katherine_id = search_data['results'][0]['id']\n\n    # Step 2: Get the movie credits for Katherine LaNasa\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{katherine_id}/movie_credits\"\n    movie_credits_response = requests.get(movie_credits_url, headers=headers)\n    movie_credits_data = movie_credits_response.json()\n\n    if len(movie_credits_data['cast']) > 0:\n        latest_movie = movie_credits_data['cast'][0]['title']\n        print(f\"Katherine LaNasa's latest movie appearance: {latest_movie}\")\n    else:\n        print(\"No movie credits found for Katherine LaNasa.\")\n```",
        "usage": [
            423,
            9807,
            10230
        ],
        "executed": "Katherine LaNasa's latest movie appearance: Black Karen\n"
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Step 1: Search for the movie Oppenheimer\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Oppenheimer\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nresults = response.json()[\"results\"]\n\nif len(results) > 0:\n    movie_id = results[0][\"id\"]\n\n    # Step 2: Get the images of the movie\n    images_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n    response = requests.get(images_url, headers=headers)\n    images = response.json()\n\n    # Get the first cover image of the movie\n    if \"posters\" in images:\n        first_cover_image = images[\"posters\"][0][\"file_path\"]\n        print(f\"The cover image for Oppenheimer is: {first_cover_image}\")\n    else:\n        print(\"No cover images found for Oppenheimer.\")\nelse:\n    print(\"Oppenheimer movie not found.\")\n```",
        "usage": [
            266,
            9641,
            9907
        ],
        "executed": null
    }
]