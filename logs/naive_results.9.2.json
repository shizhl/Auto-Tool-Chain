[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for person with name Sofia Coppola\nsearch_person_url = 'https://api.themoviedb.org/3/search/person'\nparams = {\n    'query': 'Sofia Coppola',\n    'include_adult': False,\n    'page': 1,\n    'region': 'US'\n}\nresponse_person = requests.get(search_person_url, headers=headers, params=params)\nperson_id = response_person.json()['results'][0]['id']  # get the person id\n\n# Get movie credits for Sofia Coppola\nmovies_credits_url = f'https://api.themoviedb.org/3/person/{person_id}/movie_credits'\nresponse_credits = requests.get(movies_credits_url, headers=headers)\nmovies_list = response_credits.json()['cast']\n\n# Count the number of movies directed by Sofia Coppola\nnum_movies_directed = 0\nfor movie in movies_list:\n    if 'director' in movie['job'].lower():\n        num_movies_directed += 1\n\nprint(\"Number of movies directed by Sofia Coppola:\", num_movies_directed)\n```"
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for the movie \"The Dark Knight\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Parameters for searching the movie \"The Dark Knight\"\nparams_movie = {\n    \"query\": \"The Dark Knight\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the API request to search for the movie\nresponse_movie = requests.get(url_search_movie, headers=headers, params=params_movie)\nmovie_results = response_movie.json()[\"results\"]\n\nif len(movie_results) > 0:\n    # Retrieve the movie id of \"The Dark Knight\"\n    movie_id = movie_results[0][\"id\"]\n\n    # Define the API endpoint to get the cast and crew for the movie\n    url_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n    # Make the API request to get the cast and crew of the movie\n    response_credits = requests.get(url_credits, headers=headers)\n    credits = response_credits.json()\n    \n    # Check if there is a lead actor in the cast\n    for cast_member in credits[\"cast\"]:\n        if cast_member[\"order\"] == 0:  # Lead actor usually has order 0\n            lead_actor = cast_member[\"name\"]\n            print(f\"The lead actor in the movie 'The Dark Knight' is: {lead_actor}\")\n            break\nelse:\n    print(\"No results found for the movie 'The Dark Knight'\")\n```"
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "results": "```python\nimport requests\n\n# API url for getting the top rated movies\nurl_top_rated = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Parameters for the API call\nparams_top_rated = {\n    \"page\": 1\n}\n\n# Making the GET request to get the top rated movies\nresponse_top_rated = requests.get(url_top_rated, headers=headers, params=params_top_rated)\n\n# Getting the top-1 rated movie\ntop_rated_movie_id = response_top_rated.json()['results'][0]['id']\n\n# API url for getting the credits of the top-1 rated movie\nurl_credits = f\"https://api.themoviedb.org/3/movie/{top_rated_movie_id}/credits\"\n\n# Making the GET request to get the credits of the top-1 rated movie\nresponse_credits = requests.get(url_credits, headers=headers)\n\n# Getting the director of the top-1 rated movie\ndirector = [crew['name'] for crew in response_credits.json()['crew'] if crew['job'] == 'Director'][0]\n\nprint(\"The director of the top-1 rated movie is:\", director)\n```"
    },
    {
        "query": "give me a image for the collection Star Wars",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for collections\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\n    \"query\": \"Star Wars\"\n}\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ncollection_data = response_search_collection.json()\n\n# Step 2: Get the images for the collection by id\nif len(collection_data['results']) > 0:\n    collection_id = collection_data['results'][0]['id']\n    url_collection_images = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\n    response_collection_images = requests.get(url_collection_images, headers=headers)\n    images_data = response_collection_images.json()\n    print(images_data)\nelse:\n    print(\"Collection not found\")\n```"
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for companies\nurl = \"https://api.themoviedb.org/3/search/company\"\n\n# Set the necessary parameters for the search\nparams = {\n    \"query\": \"Walt Disney\",\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the results from the response\nresults = response.json()[\"results\"]\n\n# Get the logo path of Walt Disney if available\nfor company in results:\n    if company[\"name\"] == \"Walt Disney\":\n        logo_path = company[\"logo_path\"]\n        print(\"Logo path of Walt Disney:\", logo_path)\n        break\n```"
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "results": "```python\nimport requests\n\n# API url to search for the movie Titanic\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\n\n# Parameters to search for the movie Titanic\nparams = {\n    \"query\": \"Titanic\",\n    \"api_key\": \"YOUR_API_KEY\"  # Replace YOUR_API_KEY with your actual API key\n}\n\n# Make the request to search for the movie Titanic\nresponse = requests.get(search_movie_url, params=params)\ndata = response.json()\n\n# Get the movie id of the Titanic movie\nmovie_id = data['results'][0]['id']\n\n# API url to get the credits of the movie Titanic\nmovie_credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Parameters for the movie credits request\nparams = {\n    \"api_key\": \"YOUR_API_KEY\"  # Replace YOUR_API_KEY with your actual API key\n}\n\n# Make the request to get the credits of the movie Titanic\nresponse = requests.get(movie_credits_url, params=params)\ndata = response.json()\n\n# Get the lead actor of the Titanic movie\nlead_actor_name = data['cast'][0]['name']\n\n# API url to get the images for the lead actor of Titanic\nperson_images_url = f\"https://api.themoviedb.org/3/search/person\"\n\n# Parameters to search for images of the lead actor of Titanic\nparams = {\n    \"query\": lead_actor_name,\n    \"api_key\": \"YOUR_API_KEY\"  # Replace YOUR_API_KEY with your actual API key\n}\n\n# Make the request to search for images of the lead actor of Titanic\nresponse = requests.get(person_images_url, params=params)\ndata = response.json()\n\n# Get the profile image of the lead actor of Titanic\nlead_actor_image = data['results'][0]['profile_path']\n\n# Output the profile image of the lead actor of Titanic\nprint(f\"The lead actor of Titanic, {lead_actor_name}, looks like:\")\nprint(f\"https://image.tmdb.org/t/p/original{lead_actor_image}\")\n\n```"
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie Titanic\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\ntitanic_id = search_results['results'][0]['id']\n\n# Get a list of similar movies to Titanic\nsimilar_url = f\"https://api.themoviedb.org/3/movie/{titanic_id}/similar\"\nsimilar_params = {\n    \"page\": 1\n}\nsimilar_response = requests.get(similar_url, headers=headers, params=similar_params)\nsimilar_results = similar_response.json()\nif similar_results['results']:\n    # Get the first similar movie's reviews\n    first_similar_movie_id = similar_results['results'][0]['id']\n    reviews_url = f\"https://api.themoviedb.org/3/movie/{first_similar_movie_id}/reviews\"\n    reviews_params = {\n        \"page\": 1\n    }\n    reviews_response = requests.get(reviews_url, headers=headers, params=reviews_params)\n    reviews = reviews_response.json()['results']\n    print(reviews)\nelse:\n    print(\"No similar movies found to Titanic\")\n```"
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv"
        ],
        "results": "```python\nimport requests\n\n# Http header for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie id of Titanic\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ntitanic_id = response.json()[\"results\"][0][\"id\"]\n\n# Get recommended movies based on the movie id of Titanic\nrecommend_url = f\"https://api.themoviedb.org/3/movie/{titanic_id}/recommendations\"\nresponse = requests.get(recommend_url, headers=headers)\nrecommendations = response.json()[\"results\"]\n\n# Display the recommended movie titles\nrecommended_movies = [movie[\"title\"] for movie in recommendations]\nprint(recommended_movies)\n```"
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Set the API url to get the latest movie directed by Christopher Nolan\nurl = \"https://api.themoviedb.org/3/discover/movie\"\nparams = {\n    \"sort_by\": \"primary_release_date.desc\",\n    \"with_crew\": \"5252\",  # ID for Christopher Nolan as director\n    \"page\": 1\n}\n\n# Make the HTTP GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if there are any results\nif data[\"total_results\"] > 0:\n    latest_movie = data[\"results\"][0][\"title\"]\n    print(\"The latest movie directed by Christopher Nolan is:\", latest_movie)\nelse:\n    print(\"No movies directed by Christopher Nolan found.\")\n```"
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for person id of Martin Scorsese\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Martin Scorsese\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_id = response.json()['results'][0]['id']\n\n# Step 2: Get the movie credits for Martin Scorsese\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovie_credits = response.json()['cast']\n\n# Step 3: Find the highest rated movie directed by Martin Scorsese\nhighest_rated_movie = None\nhighest_rating = 0.0\nfor movie in movie_credits:\n    if movie['vote_average'] > highest_rating:\n        highest_rating = movie['vote_average']\n        highest_rated_movie = movie['title']\n\nprint(f\"The highest rated movie directed by Martin Scorsese is: {highest_rated_movie}\")\n```"
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for Leonardo DiCaprio\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Leonardo DiCaprio\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_results = response.json()\n\nif person_results[\"total_results\"] > 0:\n    # Get the person id of Leonardo DiCaprio\n    person_id = person_results[\"results\"][0][\"id\"]\n    \n    # Define the API endpoint to get movie credits of the person\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(movie_credits_url, headers=headers)\n    movie_credits = response.json()\n    \n    if \"cast\" in movie_credits and len(movie_credits[\"cast\"]) > 0:\n        # Get the latest movie Leonardo DiCaprio acted in\n        latest_movie = movie_credits[\"cast\"][0]\n        \n        # Get the director of the latest movie\n        director = \"\"\n        if \"crew\" in latest_movie:\n            for crew_member in latest_movie[\"crew\"]:\n                if crew_member[\"job\"] == \"Director\":\n                    director = crew_member[\"name\"]\n                    break\n        \n        print(\"The director of Leonardo DiCaprio's latest movie is:\", director)\n    else:\n        print(\"No movie credits found for Leonardo DiCaprio.\")\nelse:\n    print(\"Leonardo DiCaprio not found in the database.\")\n```"
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for a person\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the query parameter to search for Catherine Hardwicke\nparams_search_person = {\n    \"query\": \"Catherine Hardwicke\",\n    \"include_adult\": False,\n}\n\n# Make a GET request to search for Catherine Hardwicke\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\ndata_search_person = response_search_person.json()\n\n# Get the person_id of Catherine Hardwicke\nperson_id = data_search_person[\"results\"][0][\"id\"]\n\n# Define the API url to get the movie credits for Catherine Hardwicke\nurl_person_tv_credits = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n\n# Make a GET request to get the TV show credits for Catherine Hardwicke\nresponse_person_tv_credits = requests.get(url_person_tv_credits, headers=headers)\ndata_person_tv_credits = response_person_tv_credits.json()\n\n# Extract the most recent TV show directed by Catherine Hardwicke\ntv_credits = data_person_tv_credits[\"crew\"]\nrecent_tv_show_directed = None\nfor tv_crew in tv_credits:\n    if tv_crew[\"job\"] == \"Director\":\n        recent_tv_show_directed = tv_crew\n        break\n\nif recent_tv_show_directed is None:\n    print(\"There is no recent TV show directed by Catherine Hardwicke.\")\nelse:\n    print(\"The most recent TV show directed by Catherine Hardwicke is:\", recent_tv_show_directed[\"original_name\"])\n```"
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Breaking Bad\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Breaking Bad\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the TV show ID for \"Breaking Bad\"\nbreaking_bad_id = search_results['results'][0]['id']\n\n# Get TV show recommendations similar to \"Breaking Bad\"\nrecommendations_url = f\"https://api.themoviedb.org/3/tv/{breaking_bad_id}/recommendations\"\nrecommendations_params = {}\nrecommendations_response = requests.get(recommendations_url, headers=headers, params=recommendations_params)\nrecommendations = recommendations_response.json()\n\n# Output the list of recommended TV shows\nfor show in recommendations['results']:\n    print(show['name'])\n```  "
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the provided authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the daily trending movies\nurl = \"https://api.themoviedb.org/3/trending/movie/day\"\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    trending_movies = response.json()\n    \n    # Get the most trending movie id\n    most_trending_movie_id = trending_movies['results'][0]['id']\n    \n    # Get the details of the most trending movie\n    url_movie_details = f\"https://api.themoviedb.org/3/movie/{most_trending_movie_id}\"\n    params = {\"append_to_response\": \"credits\"}\n    response_movie_details = requests.get(url_movie_details, headers=headers, params=params)\n    \n    if response_movie_details.status_code == 200:\n        movie_details = response_movie_details.json()\n        \n        # Get the director of the most trending movie\n        crew = movie_details['credits']['crew']\n        director = next((member['name'] for member in crew if member['job'] == 'Director'), None)\n        \n        print(f\"The director of today's most trending movie is: {director}\")\n    else:\n        print(\"Failed to get movie details\")\nelse:\n    print(\"Failed to get trending movies\")\n```"
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# Set the API URL for searching movies\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the parameters for searching the movie \"Twilight\"\nparams = {\n    \"query\": \"Twilight\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Send a GET request to search for the movie \"Twilight\"\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie id of the movie \"Twilight\"\nmovie_id = data_search_movie['results'][0]['id']\n\n# Set the API URL for getting the credits of the movie\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Send a GET request to get the credits of the movie \"Twilight\"\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Get the crew data from the movie credits\ncrew = data_movie_credits['crew']\n\n# Find the director of the movie \"Twilight\"\ndirector = next(member['name'] for member in crew if member['job'] == 'Director')\n\nprint(f\"The director of the movie 'Twilight' is: {director}\")\n```"
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# API url to get the images of the TV episode\nurl = \"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images\"\n\n# Placeholder values for the TV show, season, and episode numbers\ntv_id = 84958  # The Witcher TV show ID\nseason_number = 1\nepisode_number = 2\n\n# Replace the placeholders in the url\nurl = url.format(tv_id=tv_id, season_number=season_number, episode_number=episode_number)\n\n# HTTP headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    # Extract the image details\n    episode_images = data[\"stills\"]\n    if episode_images:\n        # Print the file path of the first image of the episode\n        print(\"Image Path of the second episode of the first Season of the Witcher:\")\n        print(episode_images[0][\"file_path\"])\n    else:\n        print(\"No images found for the specified episode.\")\nelse:\n    print(\"Failed to retrieve episode images. Status code:\", response.status_code)\n```"
    },
    {
        "query": "What is top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Set the page parameter to 1 to get the top-rated movie\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the data from the response\n    data = response.json()\n    \n    # Get the top-1 rated movie\n    top_rated_movie = data[\"results\"][0][\"title\"]\n    print(f\"The top-1 rated movie is: {top_rated_movie}\")\nelse:\n    print(\"Failed to retrieve data\")\n```"
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Set the API url for searching movies\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the query parameters for searching \"The Matrix\" movie\nparams_search_movie = {\n    \"query\": \"The Matrix\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"  # Assuming searching for US region\n}\n\n# Make a GET request to search for \"The Matrix\" movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie_id of \"The Matrix\" movie\nif data_search_movie[\"total_results\"] > 0:\n    movie_id = data_search_movie[\"results\"][0][\"id\"]\n    # Set the API url for getting release dates of a movie\n    url_release_dates = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n    \n    # Make a GET request to get release dates of \"The Matrix\" movie\n    response_release_dates = requests.get(url_release_dates, headers=headers)\n    data_release_dates = response_release_dates.json()\n    \n    # Extract and print the release date of \"The Matrix\" movie\n    if \"results\" in data_release_dates and len(data_release_dates[\"results\"]) > 0:\n        release_date = data_release_dates[\"results\"][0][\"release_dates\"][0][\"release_date\"]\n        print(\"The release date of the movie 'The Matrix' is:\", release_date)\n    else:  # No release date found\n        print(\"Release date not found for the movie 'The Matrix'\")\nelse:  # Movie not found\n    print(\"The movie 'The Matrix' was not found.\")\n```"
    },
    {
        "query": "Who is the most popular person?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nurl = \"https://api.themoviedb.org/3/person/popular\"\nparams = {\n    \"page\": 1\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the most popular person\nmost_popular_person = data['results'][0]['name']\nprint(f\"The most popular person is: {most_popular_person}\")\n```"
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for person\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n# Define the API url to get movie credits for a person\nurl_movie_credits = \"https://api.themoviedb.org/3/person/{}/movie_credits\"\n# Define the API url to get images for a movie\nurl_movie_images = \"https://api.themoviedb.org/3/movie/{}/images\"\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for person using the query 'Christopher Nolan'\nparams_search_person = {\n    \"query\": \"Christopher Nolan\"\n}\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\nperson_results = response_search_person.json()[\"results\"]\n\n# Check if person_results is not empty\nif person_results:\n    # Get the person id to retrieve movie credits\n    person_id = person_results[0][\"id\"]\n\n    # Get the movie credits for the person\n   response_movie_credits = requests.get(url_movie_credits.format(person_id), headers=headers)\n    movie_credits = response_movie_credits.json()\n\n    cover_images = []\n\n    # Get the cover images of movies directed by Christopher Nolan\n    for movie in movie_credits['cast']:  # Check cast for movies\n        title = movie['original_title']\n        movie_id = movie['id']\n\n        # Get images for the movie using movie_id\n        response_movie_images = requests.get(url_movie_images.format(movie_id), headers=headers)\n        images = response_movie_images.json()\n\n        # Check if there are backdrops available for the movie\n        if images.get('backdrops'):\n            cover_images.append(images['backdrops'][0]['file_path'])  # Add the first backdrop image to the list\n    \n    print(cover_images)\n\nelse:\n    print(\"Person not found\")  # Output if person is not found\n```"
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for \"Titanic\" movie first\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\nif search_results[\"total_results\"] > 0:\n    # Get the movie id for Titanic\n    movie_id = search_results[\"results\"][0][\"id\"]\n\n    # Get the keywords associated with the Titanic movie\n    keywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n    keywords_response = requests.get(keywords_url, headers=headers)\n    keywords_results = keywords_response.json()\n\n    # Extract and print the keywords\n    keywords = [keyword[\"name\"] for keyword in keywords_results[\"keywords\"]]\n    print(keywords)\nelse:\n    print(\"Movie Titanic not found\")\n```"
    },
    {
        "query": "Give me a show that is currently on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# API url for getting list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# HTTP headers containing Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Getting the JSON response from the API\ndata = response.json()\n\n# Displaying the first show in the list\nif data['results']:\n    first_show = data['results'][0]\n    print(\"Show Name:\", first_show['name'])\n    print(\"Overview:\", first_show['overview'])\n    print(\"First Air Date:\", first_show['first_air_date'])\n    print(\"Popularity:\", first_show['popularity'])\nelse:\n    print(\"No shows currently on the air.\")\n```"
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Clint Eastwood\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Clint Eastwood\",\n    \"include_adult\": \"false\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nclint_eastwood_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get the movie credits for Clint Eastwood\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{clint_eastwood_id}/movie_credits\"\nmovie_credits_response = requests.get(movie_credits_url, headers=headers)\nlatest_movie_release_date = movie_credits_response.json()[\"cast\"][0][\"release_date\"]\n\nprint(\"Clint Eastwood's latest movie is scheduled to be released on:\", latest_movie_release_date)\n```"
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for a movie\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n# Define the API url to get movie reviews\nurl_movie_reviews = \"https://api.themoviedb.org/3/movie/{}/reviews\"\n\n# Set the API key in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie with the query \"The Dark Knight\"\nparams_search_movie = {\n    \"query\": \"The Dark Knight\",\n    \"page\": 1,\n    \"include_adult\": False,\n}\nresponse_search = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search = response_search.json()\n\n# Get the movie id for \"The Dark Knight\" to fetch reviews\nif 'results' in data_search and len(data_search['results']) > 0:\n    movie_id = data_search['results'][0]['id']\n\n    # Get movie reviews for \"The Dark Knight\"\n    url_movie_reviews = url_movie_reviews.format(movie_id)\n    params_movie_reviews = {\n        \"page\": 1\n    }\n    response_reviews = requests.get(url_movie_reviews, headers=headers, params=params_movie_reviews)\n    data_reviews = response_reviews.json()\n\n    # Extract and print the reviews\n    if 'results' in data_reviews:\n        reviews = data_reviews['results']\n        for review in reviews:\n            print(\"Author: {}\".format(review['author']))\n            print(\"Content: {}\".format(review['content']))\n            print(\"URL: {}\".format(review['url']))\n            print(\"-----\")\nelse:\n    print(\"Movie not found.\")\n\n```"
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\n# Define the API urls\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nperson_movie_credits_url = \"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nsimilar_movies_url = \"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\n\n# Headers for API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person with the name \"Francis Ford Coppola\"\nparams = {\n    \"query\": \"Francis Ford Coppola\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_id = response.json()['results'][0]['id']\n\n# Get the movie credits for Francis Ford Coppola\nmovie_credits_url = person_movie_credits_url.format(person_id=person_id)\nresponse = requests.get(movie_credits_url, headers=headers)\nmovie_id = response.json()['cast'][0]['id']\n\n# Get a list of similar movies to the selected movie\nparams = {\n    \"page\": 1\n}\nsimilar_movies_url = similar_movies_url.format(movie_id=movie_id)\nresponse = requests.get(similar_movies_url, headers=headers, params=params)\nsimilar_movies = response.json()['results']\n\n# Print the list of similar movies\nfor movie in similar_movies:\n    print(movie['title'])\n```"
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nurl = \"https://api.themoviedb.org/3/movie/latest\"\n\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the lead actor from the cast list\nif 'cast' in data:\n    lead_actor = data['cast'][0]['name']\n    print(f\"The lead actor in the latest released movie is: {lead_actor}\")\nelse:\n    print(\"Lead actor information not available.\")\n```"
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Define the parameters\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the image path of the first movie returned\nif response.status_code == 200:\n    data = response.json()\n    if data['results']:\n        movie = data['results'][0]\n        if 'poster_path' in movie:\n            image_path = movie['poster_path']\n            print(f\"Image path of the movie currently showing in theaters: https://image.tmdb.org/t/p/original/{image_path}\")\n    else:\n        print(\"No movies currently showing in theaters.\")\nelse:\n    print(\"Failed to retrieve data from the API.\")\n\n```"
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# Http headers to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get the list of popular movies\nurl_popular_movies = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Get the list of popular movies\nresponse_popular_movies = requests.get(url_popular_movies, headers=headers)\npopular_movies = response_popular_movies.json()\n\n# Get the most popular movie details\nmost_popular_movie = popular_movies['results'][0]\nmovie_id = most_popular_movie['id']\n\n# API url to get the keywords of a movie\nurl_keywords = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n\n# Get the keywords of the most popular movie\nresponse_keywords = requests.get(url_keywords, headers=headers)\nkeywords = response_keywords.json()\n\nprint(\"Most Popular Movie Right Now:\")\nprint(\"Title:\", most_popular_movie['title'])\nprint(\"Keywords:\", [keyword['name'] for keyword in keywords['keywords']])\n```"
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "results": "```python\nimport requests\n\n# API url to get a list of current popular movies\nurl_popular_movies = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Parameters for the API request\nparams = {\n    \"page\": 1,  # Get the first page of results\n    \"region\": \"US\"  # Specify the region as US\n}\n\n# Header with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request to get a list of popular movies\nresponse = requests.get(url_popular_movies, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie id of the most popular movie\nmost_popular_movie_id = data['results'][0]['id']\n\n# API url to get keywords of a movie by its id\nurl_keywords = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\n\n# Make the API request to get keywords of the most popular movie\nresponse_keywords = requests.get(url_keywords, headers=headers)\ndata_keywords = response_keywords.json()\n\n# Extract and print the keywords of the most popular movie\nkeywords = [keyword['name'] for keyword in data_keywords['keywords']]\nprint(keywords)\n```"
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the movie id of \"Titanic\"\nif search_results['total_results'] > 0:\n    movie_id = search_results['results'][0]['id']\n\n    # Get the credits of the movie\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    cast_crew = credits_response.json()\n\n    # Get the cast members and their characters\n    cast = cast_crew['cast']\n\n    # Extract the names of the actors and their characters\n    actors_in_titanic = []\n    for actor in cast:\n        actors_in_titanic.append((actor['name'], actor['character']))\n\n    print(actors_in_titanic)\n\nelse:\n    print(\"No results found for the movie Titanic.\")\n```"
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# API url for getting details of a company by id\nurl = \"https://api.themoviedb.org/3/company/4\"\n# Params dictionary is not needed for this API call\n\n# Headers containing Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API call\nresponse = requests.get(url, headers=headers)\n\n# Parsing the JSON response\nresponse_json = response.json()\n\n# Extracting the logo_path from the response\nlogo_path = response_json[\"logo_path\"]\n\n# Constructing the base url for logo image\nbase_url = \"https://image.tmdb.org/t/p/original\"\nimage_url = base_url + logo_path\n\nprint(f\"The logo for Paramount Pictures can be viewed at: {image_url}\")\n```"
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the headers required to make the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# First, search for the company \"Universal Pictures\" using the search/company API\nsearch_url = \"https://api.themoviedb.org/3/search/company\"\nparams = {\n    \"query\": \"Universal Pictures\"\n}\n\nresponse = requests.get(search_url, headers=headers, params=params)\ncompany_results = response.json()\n\n# Extract the company_id of Universal Pictures\ncompany_id = company_results[\"results\"][0][\"id\"]\n\n# Using the company_id, get the details of Universal Pictures\ncompany_details_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse = requests.get(company_details_url, headers=headers)\ncompany_details = response.json()\n\n# Extract the headquarters information\nheadquarters_location = company_details[\"headquarters\"]\nprint(\"The headquarters of Universal Pictures is located at:\", headquarters_location)\n```"
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\nif search_results.get(\"results\"):\n    first_result = search_results[\"results\"][0]\n    \n    # Get the movie id\n    movie_id = first_result[\"id\"]\n    \n    # Get the release date of the movie using the movie_id\n    release_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n    release_response = requests.get(release_url, headers=headers)\n    release_results = release_response.json()\n    \n    if release_results.get(\"results\"):\n        for result in release_results[\"results\"]:\n            if result.get(\"release_dates\"):\n                for release_date in result[\"release_dates\"]:\n                    if release_date.get(\"type\") == 3:  # Type 3 is Theatrical release\n                        print(f\"The movie 'Titanic' was released on: {release_date['release_date']}\")\n                        break\nelse:\n    print(\"Movie 'Titanic' not found.\")\n```"
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Set the API URL\nurl_collections_search = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameter for the Star Wars collection\nparams = {\n    \"query\": \"Star Wars\"\n}\n\n# Make the GET request to search for the Star Wars collection\nresponse_collections_search = requests.get(url_collections_search, headers=headers, params=params)\ndata_collections_search = response_collections_search.json()\n\n# Get the collection_id of the Star Wars collection\ncollection_id = data_collections_search['results'][0]['id']\n\n# Set the API URL to get details of the Star Wars collection\nurl_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n# Make the GET request to get details of the Star Wars collection\nresponse_collection_details = requests.get(url_collection_details, headers=headers)\ndata_collection_details = response_collection_details.json()\n\n# Get the first movie in the Star Wars collection\nfirst_movie = data_collection_details['parts'][0]\n\n# Get the movie_id of the first movie in the Star Wars collection\nmovie_id = first_movie['id']\n\n# Set the API URL to get the credits of the first movie in the Star Wars collection\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Make the GET request to get the cast and crew of the first movie in the Star Wars collection\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Get the cast of the first movie in the Star Wars collection\ncast = data_movie_credits['cast']\n\n# Extract the actors who starred in the first movie of the Star Wars collection\nstar_actors = []\nfor actor in cast:\n    star_actors.append(actor['name'])\n\n# Print the list of actors who starred in the first movie of the Star Wars collection\nprint(star_actors)\n```"
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collections\nquery = \"Harry Potter\"\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": query\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the collection id of the Harry Potter collection\ncollection_id = data[\"results\"][0][\"id\"]\n\n# Get collection details by id\nurl = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse = requests.get(url, headers=headers)\ndetails_data = response.json()\n\n# Get the poster path of the first movie in the collection\nposter_path = details_data[\"parts\"][0][\"poster_path\"]\n\nprint(poster_path)\n```"
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# API url for searching collections\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Parameters for the search query\nparams = {\n    \"query\": \"The Hunger Games\",  # Searching for the collection \"The Hunger Games\"\n}\n\n# HTTP headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending GET request to search for the collection\nresponse = requests.get(url, headers=headers, params=params)\n\n# Getting the response as JSON\nresult = response.json()\n\n# Extracting the collection id of \"The Hunger Games\"\ncollection_id = result['results'][0]['id']\n\n# API url for getting keywords of a movie in the collection\nurl_keywords = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n# Sending GET request to get keywords for a movie in the collection\nresponse_keywords = requests.get(url_keywords, headers=headers)\n\n# Getting the keywords of a movie in the collection as JSON\nresult_keywords = response_keywords.json()\n\n# Extracting the keywords\nkeywords = result_keywords['parts'][0]['keywords']\n\n# Printing the keywords\nprint([keyword['name'] for keyword in keywords])\n```"
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"The Hobbit\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\ncollection_id = search_results['results'][0]['id']\n\n# Get collection details by id\ncollection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\ncollection_response = requests.get(collection_url, headers=headers)\ncollection_details = collection_response.json()\n\n# Print the release dates for the movies of the collection The Hobbit\nfor part in collection_details['parts']:\n    print(f\"Movie: {part['title']} - Release Date: {part['release_date']}\")\n```"
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API URL to search for collections\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the search query for The Fast and the Furious collection\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to search for collections\nresponse = requests.get(url, headers=headers, params=params)\n\n# Print the response data\nprint(response.json())\n```"
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the collection id of \"The Fast and the Furious\"\nquery = \"The Fast and the Furious\"\nsearch_collection_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_collection_params = {\"query\": query}\nresponse = requests.get(search_collection_url, headers=headers, params=search_collection_params)\ncollection_id = response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get the reviews for a movie in the collection\nreviews_url = f\"https://api.themoviedb.org/3/movie/{collection_id}/reviews\"\nreviews_params = {\"page\": 1}\nresponse = requests.get(reviews_url, headers=headers, params=reviews_params)\nreviews = response.json()[\"results\"]\n\nprint(reviews)\n```"
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\n# Set the API url and collection name\nurl = \"https://api.themoviedb.org/3/search/collection\"\ncollection_name = \"Lord of the Rings\"\n\n# Set the query parameters\nparams = {\n    \"query\": collection_name,\n    \"page\": 1\n}\n\n# Call the API to search for the collection\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the collection id of the first result\ncollection_id = data['results'][0]['id']\n\n# Now we will get the details of the collection including its parts\nurl = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse = requests.get(url, headers=headers)\ncollection_data = response.json()\n\n# Get the first part of the collection (which should be the first movie)\nfirst_part = collection_data['parts'][0]\n\n# Get the release date of the first movie\nrelease_date = first_part['release_date']\n\nprint(f\"The first movie of the collection Lord of the Rings was released on {release_date}\")\n```"
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ],
        "results": "```python\nimport requests\n\n# API url to search for TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n# Parameters for searching House of Cards\nparams = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the TV show id of House of Cards\n    tv_id = response.json()[\"results\"][0][\"id\"]\n    \n    # API url to get credits for the first season of House of Cards\n    url_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1/credits\"\n    \n    # Make the API request\n    response_credits = requests.get(url_credits, headers=headers)\n    \n    # Check if the request was successful\n    if response_credits.status_code == 200:\n        # Extract the list of directors from the response\n        directors = [crew[\"name\"] for crew in response_credits.json()[\"crew\"] if crew[\"job\"] == \"Director\"]\n        print(directors)\n    else:\n        print(\"Error fetching credits data\")\nelse:\n    print(\"Error fetching TV show data\")\n```"
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nurl_similar_tv = \"https://api.themoviedb.org/3/tv/{tv_id}/similar\"\n\n# Set the query parameters\nparams = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\n\n# Make the API call to search for TV shows similar to House of Cards\nresponse_search = requests.get(url_search_tv, headers=headers, params=params)\nif response_search.status_code == 200:\n    search_results = response_search.json()\n    if search_results[\"total_results\"] > 0:\n        # Get the TV show id of House of Cards\n        tv_id = search_results[\"results\"][0][\"id\"]\n        # Make the API call to get similar TV shows\n        response_similar = requests.get(url_similar_tv.format(tv_id=tv_id), headers=headers, params={\"page\": 1})\n        if response_similar.status_code == 200:\n            similar_results = response_similar.json()\n            # Print the list of similar TV shows\n            for result in similar_results[\"results\"]:\n                print(result[\"name\"])\n        else:\n            print(\"Failed to get similar TV shows\")\n    else:\n        print(\"No results found for the query\")\nelse:\n    print(\"Failed to search for TV shows\")\n```"
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the list of TV shows currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API endpoint\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the details of the most popular TV show currently on the air\n    most_popular_show = data['results'][0]\n    \n    # Get the start date of the most popular TV show\n    start_date = most_popular_show['first_air_date']\n    \n    print(\"The most popular TV show currently on the air started on:\", start_date)\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```"
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "results": "```python\nimport requests\n\n# Define the API URLs\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nmovie_credits_url = \"https://api.themoviedb.org/3/movie/{}/credits\"\nperson_movie_credits_url = \"https://api.themoviedb.org/3/person/{}/movie_credits\"\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Django Unchained\" to get the director details\nsearch_params = {\n    \"query\": \"Django Unchained\",\n}\nresponse = requests.get(search_movie_url, headers=headers, params=search_params)\ndirector_id = response.json()['results'][0]['id']\n\n# Get the credits of the director\ndirector_credits_url = person_movie_credits_url.format(person_id=director_id)\nresponse = requests.get(director_credits_url, headers=headers)\ndirector_movie_credits = response.json()['crew']\n\n# Get a few more works directed by the director of Django Unchained\ndirector_other_works = []\nfor credit in director_movie_credits:\n    director_other_works.append(credit['original_title'])\n\n# Print the output of a few more works directed by the director of Django Unchained\nprint(director_other_works)\n```"
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Define the query parameters\nparams = {\"page\": 1}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    tv_shows = response.json()[\"results\"]\n    \n    # Get the first TV show on the air\n    tv_show_id = tv_shows[0][\"id\"]\n    \n    # Call the API to get the credits for the TV show\n    credits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    \n    # Check if the credits request was successful\n    if credits_response.status_code == 200:\n        # Get the cast information\n        cast = credits_response.json()[\"cast\"]\n        \n        # Print the cast information\n        for actor in cast:\n            print(actor[\"name\"])\n    else:\n        print(\"Error: Unable to fetch credits\")\nelse:\n    print(\"Error: Unable to fetch TV shows on the air\")\n```"
    },
    {
        "query": "I need a review for Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the query parameter with the TV show name \"Breaking Bad\"\nparams = {\n    \"query\": \"Breaking Bad\"\n}\n\n# Make a GET request to get the reviews for a TV show\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=params)\n\n# Print the response\nprint(response.json())\n```"
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "results": "```python\nimport requests\n\n# Set the API url to get recommendations for a TV show\nurl = \"https://api.themoviedb.org/3/tv/42009/recommendations\"  # 42009 is the tv_id for The Last of Us\n\n# Set the parameters for the API\nparams = {\n    \"page\": 1\n}\n\n# Set the header with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    # Get the recommendations from the response\n    recommendations = response.json()[\"results\"]\n\n    # Print the recommendations\n    for recommendation in recommendations:\n        print(recommendation[\"name\"])\nelse:\n    print(\"Error fetching recommendations. Status code:\", response.status_code)\n```"
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API URL to search for the TV show \"The Last Of Us\"\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\n# Specify the query parameter to search for \"The Last Of Us\"\nparams = {\n    \"query\": \"The Last Of Us\"\n}\n# Add the page and Authorization headers to the request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to search for the TV show\nresponse = requests.get(search_tv_url, headers=headers, params=params)\n# Retrieve the TV show ID from the response\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Define the API URL to get recommendations for the TV show\nrecommendations_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/recommendations\"\n# Add the page parameter for recommendations\nparams = {\n    \"page\": 1\n}\n\n# Make the GET request to get recommendations for the TV show\nresponse = requests.get(recommendations_url, headers=headers, params=params)\n# Retrieve and print the recommendations\nrecommendations = response.json()[\"results\"]\nfor recommendation in recommendations:\n    print(recommendation[\"name\"])  # Print the name of the recommended TV show\n```"
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "results": "```python\nimport requests\n\n# API url to get the TV show episodes details\nurl = \"https://api.themoviedb.org/3/tv/1668/season/3/episode/24\"\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API call\nresponse = requests.get(url, headers=headers)\n\n# Parsing the JSON response\nepisode_info = response.json()\n\n# Getting the guest stars info from the episode\nguest_stars = episode_info[\"guest_stars\"]\n\n# Printing the guest stars\nfor guest_star in guest_stars:\n    print(guest_star[\"name\"])\n```"
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get a list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\n    \"page\": 1\n}\n\n# Call the API to get the list of popular TV shows\nresponse = requests.get(url_popular_tv, headers=headers, params=params)\ndata = response.json()\n\nif 'results' in data:\n    popular_tv_shows = data['results']\n    most_popular_show = popular_tv_shows[0]  # Assuming the first show is the most popular\n    \n    show_id = most_popular_show['id']\n    \n    # API url to get the credits of the most popular TV show\n    url_credits = f\"https://api.themoviedb.org/3/tv/{show_id}/credits\"\n    \n    # Call the API to get the credits of the most popular TV show\n    response_credits = requests.get(url_credits, headers=headers)\n    data_credits = response_credits.json()\n    \n    if 'cast' in data_credits:\n        cast = data_credits['cast']\n        \n        # Assuming the lead actor is the first cast member\n        lead_actor = cast[0]['name']\n        \n        print(f\"The lead actor in the most popular TV show is: {lead_actor}\")\n    else:\n        print(\"No cast information found for the most popular TV show\")\nelse:\n    print(\"No popular TV shows data found\")\n```"
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "results": "```python\nimport requests\n\n# API url for getting the top rated TV shows\nurl = \"https://api.themoviedb.org/3/tv/top_rated\"\n\n# Parameters for the API request\nparams = {\n    \"page\": 1\n}\n\n# HTTP headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the response to get the keyword of the top-1 rated TV show\ntop_rated_shows = response.json()[\"results\"]\ntop_show_keywords = []\n\nif len(top_rated_shows) > 0:\n    # Get the TV show id of the top-1 rated show\n    top_show_id = top_rated_shows[0][\"id\"]\n    \n    # API url for getting the keywords of a TV show\n    keywords_url = f\"https://api.themoviedb.org/3/tv/{top_show_id}/keywords\"\n\n    # Make the API request to get the keywords of the top-1 show\n    keywords_response = requests.get(keywords_url, headers=headers)\n    \n    # Extract the keywords\n    keywords_data = keywords_response.json()[\"results\"]\n    if len(keywords_data) > 0:\n        top_show_keywords = [keyword[\"name\"] for keyword in keywords_data]\n\nprint(top_show_keywords)\n```"
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the query parameters\nparams = {\n    \"query\": \"2 Broke Girls\",\n}\n\n# Set the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the HTTP request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the poster path from the response\n    tv_data = response.json()\n    poster_path = tv_data['results'][0]['poster_path']\n    print(\"Poster Path:\", poster_path)\nelse:\n    print(\"Failed to retrieve the poster path.\")\n```"
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/tv"
        ],
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/tv/40896\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Parse the JSON response\ndata = response.json()\n\n# Extract the number of episodes\ntotal_episodes = data[\"number_of_episodes\"]\n\nprint(\"2 Broke Girls has a total of\", total_episodes, \"episodes.\")\n```"
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# Define the API URL for searching TV show\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for searching the TV show \"The Big Bang Theory\"\nparams = {\n    \"query\": \"The Big Bang Theory\",\n    \"include_adult\": False\n}\n\n# Make the API request\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params)\n\n# Get the company_id of the production company for The Big Bang Theory\nif response_search_tv.status_code == 200:\n    result_search_tv = response_search_tv.json()\n    if result_search_tv[\"total_results\"] > 0:\n        # Assuming the first result is the TV show we are looking for\n        tv_id = result_search_tv[\"results\"][0][\"id\"]\n        # Get the TV show details by id\n        url_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n        response_tv_details = requests.get(url_tv_details, headers=headers)\n        \n        if response_tv_details.status_code == 200:\n            tv_details = response_tv_details.json()\n            # Get the production companies array from the TV show details\n            production_companies = tv_details.get(\"production_companies\")\n\n            if production_companies:\n                for company in production_companies:\n                    # Check if the production company is Warner Bros. Television\n                    if company[\"name\"] == \"Warner Bros. Television\":\n                        company_id = company[\"id\"]\n                        # Get the details of the production company\n                        url_company_details = f\"https://api.themoviedb.org/3/company/{company_id}\"\n                        response_company_details = requests.get(url_company_details, headers=headers)\n\n                        if response_company_details.status_code == 200:\n                            company_details = response_company_details.json()\n                            founded_year = company_details.get(\"description\")\n                            print(f\"The company that produced The Big Bang Theory was founded in: {founded_year}\")\n                        else:\n                            print(\"Failed to get production company details\")\n            else:\n                print(\"Production companies not found in TV show details\")\n        else:\n            print(\"Failed to get TV show details\")\n    else:\n        print(\"TV show not found\")\nelse:\n    print(\"Failed to search for TV show\")\n\n```"
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "results": "```python\nimport requests\n\n# Set the API url\napi_url = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the query parameters\nparams = {\n    \"query\": \"The Big Bang Theory\",\n    \"include_adult\": False\n}\n\n# Set the HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(api_url, headers=headers, params=params)\n\n# Extract the creation date of The Big Bang Theory TV show\nif response.status_code == 200:\n    results = response.json()\n    if results[\"total_results\"] > 0:\n        for result in results[\"results\"]:\n            if result[\"name\"] == \"The Big Bang Theory\":\n                creation_date = result[\"first_air_date\"]\n                print(\"The TV show 'The Big Bang Theory' was created on:\", creation_date)\n                break\nelse:\n    print(\"Error occurred: Status Code\", response.status_code)\n```"
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# API url for getting the list of current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\n    \"page\": 1\n}\n\n# Adding the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extracting the keywords of the most popular TV show\ntv_show_id = data['results'][0]['id']\nurl_keywords = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/keywords\"\n\n# Making the API request to get keywords for the TV show\nresponse_keywords = requests.get(url_keywords, headers=headers)\ndata_keywords = response_keywords.json()\n\n# Extracting the keyword\nkeyword = data_keywords['results'][0]['name']\n\nprint(keyword)\n```"
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# API url to search for TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n# Parameters for the search query\nparams = {\n    \"query\": \"Westworld\",\n    \"include_adult\": False,\n    \"first_air_date_year\": 2016\n}\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n# Extract the TV show ID\ntv_id = response.json()[\"results\"][0][\"id\"]\n\n# API url to get details of the third episode of the second season of Westworld\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/episode/3\"\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Extract and print the overview of the episode\nepisode_overview = response.json()[\"overview\"]\nprint(\"The third episode of the second season of Westworld talked about:\")\nprint(episode_overview)\n```"
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Game of Thrones\" to get its ID\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Game of Thrones\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\ngame_of_thrones_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get the details of the second season of Game of Thrones\nseason_url = f\"https://api.themoviedb.org/3/tv/{game_of_thrones_id}/season/2\"\nseason_response = requests.get(season_url, headers=headers)\nsecond_season_air_date = season_response.json()[\"air_date\"]\n\nprint(\"The air date of the second season of Game of Thrones is:\", second_season_air_date)\n```"
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers to access the TMDB API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Band of Brothers\" to get its TV id\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_search_params = {\n    \"query\": \"Band of Brothers\"\n}\ntv_search_response = requests.get(tv_search_url, headers=headers, params=tv_search_params)\ntv_search_results = tv_search_response.json()\ntv_id = tv_search_results['results'][0]['id']\n\n# Get the details of the first season of \"Band of Brothers\" to get the id of the third episode\nseason_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1\"\nseason_details_response = requests.get(season_details_url, headers=headers)\nseason_details = season_details_response.json()\nepisode_id = season_details['episodes'][2]['id']\n\n# Get the images of the third episode of \"Band of Brothers\"\nepisode_images_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1/episode/3/images\"\nepisode_images_response = requests.get(episode_images_url, headers=headers)\nepisode_images = episode_images_response.json()\n\n# Extract the poster of the third episode\nposter_path = episode_images['stills'][0]['file_path']\ncomplete_poster_url = f\"https://image.tmdb.org/t/p/original{poster_path}\"\nprint(complete_poster_url)\n```"
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "results": "```python\nimport requests\n\n# Set the API url to get the primary TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/1399\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Get the JSON response\ndata = response.json()\n\n# Get the networks that produced the TV show\nnetworks = data.get(\"networks\", [])\nif networks:\n    # Get the first network\n    network_id = networks[0][\"id\"]\n    \n    # Set the API url to get the TV network logos by id\n    logo_url = f\"https://api.themoviedb.org/3/network/{network_id}/images\"\n    \n    # Make a GET request to the logos API\n    logo_response = requests.get(logo_url, headers=headers)\n    \n    # Get the JSON response for logos\n    logo_data = logo_response.json()\n    \n    # Get the first logo details\n    logos = logo_data.get(\"logos\", [])\n    if logos:\n        logo_details = logos[0]\n        print(\"Logo Details:\")\n        print(\"File Path:\", logo_details.get(\"file_path\"))\n        print(\"Width:\", logo_details.get(\"width\"))\n        print(\"Height:\", logo_details.get(\"height\"))\n    else:\n        print(\"No logo details found.\")\nelse:\n    print(\"No network information found for the TV show.\")\n```"
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the API authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Game of Thrones\" to get its ID\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\"query\": \"Game of Thrones\"}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ngame_of_thrones_id = response_search_tv.json()[\"results\"][0][\"id\"]\n\n# Get the primary details of the TV show \"Game of Thrones\" using its ID\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{game_of_thrones_id}\"\nresponse_tv_details = requests.get(url_tv_details, headers=headers)\nnetwork_id = response_tv_details.json()[\"networks\"][0][\"id\"]\n\n# Get the homepage of the network that produced Game of Thrones using the network ID\nurl_network_details = f\"https://api.themoviedb.org/3/network/{network_id}\"\nresponse_network_details = requests.get(url_network_details, headers=headers)\nnetwork_homepage = response_network_details.json()[\"homepage\"]\n\nprint(network_homepage)\n```"
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/company"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Set the HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the data from the API response\n    data = response.json()\n    \n    # Get the TV show id of the most popular TV show\n    most_popular_tv_show_id = data[\"results\"][0][\"id\"]\n    \n    # Use the TV show id to call the keywords API\n    keywords_url = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_show_id}/keywords\"\n    keywords_response = requests.get(keywords_url, headers=headers)\n    \n    # Get the keyword of the most popular TV show\n    keywords_data = keywords_response.json()\n    most_popular_tv_show_keyword = keywords_data[\"results\"][0][\"name\"]\n    \n    print(\"Keyword of the most popular TV show currently:\", most_popular_tv_show_keyword)\nelse:\n    print(\"Failed to fetch data from the API\")\n```"
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of current popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\nresponse_popular_tv = requests.get(url_popular_tv, headers=headers)\npopular_tv_data = response_popular_tv.json()\n\n# Get the company id that produced the most popular TV show\ncompany_id = popular_tv_data[\"results\"][0][\"production_companies\"][0][\"id\"]\n\n# Call the API to get the details of the company using the company id\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse_company = requests.get(url_company, headers=headers)\ncompany_data = response_company.json()\n\n# Extract the headquarters location of the company\nheadquarters = company_data[\"headquarters\"]\n\nprint(\"The headquarter of the company that produced the currently most popular TV show is:\", headquarters)\n```"
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for 'The Mandalorian'\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"The Mandalorian\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ntv_results = response_search_tv.json()[\"results\"]\n\n# Get genre details of 'The Mandalorian'\nif tv_results:\n    tv_id = tv_results[0][\"id\"]\n    url_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    response_tv_details = requests.get(url_tv_details, headers=headers)\n    genre_info = response_tv_details.json()[\"genres\"]\n    genres_list = [genre[\"name\"] for genre in genre_info]\n    print(\"The genre of The Mandalorian:\", genres_list)\nelse:\n    print(\"The Mandalorian TV show not found.\")\n```"
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for getting daily trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get trending TV shows\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the tv_id of the most trending TV show\ntv_id = data[\"results\"][0][\"id\"]\n\n# Define the API url for getting credits of a TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n\n# Call the API to get the credits of the TV show\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the lead actor details\nlead_actor_id = data_credits[\"cast\"][0][\"id\"]\n\n# Define the API url for getting person details by id\nurl_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n\n# Call the API to get the person details\nresponse_person = requests.get(url_person, headers=headers)\nperson_data = response_person.json()\n\n# Get the birthday of the lead actor\nlead_actor_birthday = person_data[\"birthday\"]\n\nprint(\"Birthday of the lead actor of today's most trending TV show is:\", lead_actor_birthday)\n```"
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "results": "```python\nimport requests\n\n# Set the API url for getting today's trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request to get the trending TV shows\nresponse = requests.get(url, headers=headers)\n\n# Parse the JSON response\ndata = response.json()\n\n# Get the network ID that produced today's most trending TV show\nnetwork_id = data['results'][0]['networks'][0]['id']\n\n# Set the API url for getting the details of a network by ID\nnetwork_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\n\n# Make the API request to get the details of the network\nnetwork_response = requests.get(network_url, headers=headers)\n\n# Parse the JSON response for the network details\nnetwork_data = network_response.json()\n\n# Get the homepage of the network\nhomepage = network_data['homepage']\n\nprint(homepage)\n```"
    },
    {
        "query": "give me a review of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the daily trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    # Get the TV show id of the most trending TV show\n    tv_id = data[\"results\"][0][\"id\"]\n    \n    # Get the reviews of the most trending TV show\n    reviews_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\n    reviews_response = requests.get(reviews_url, headers=headers)\n\n    if reviews_response.status_code == 200:\n        reviews_data = reviews_response.json()\n        # Display the review of today's most trending TV show\n        print(\"Review of today's most trending TV show:\")\n        if reviews_data[\"total_results\"] > 0:\n            print(f\"Author: {reviews_data['results'][0]['author']}\")\n            print(f\"Content: {reviews_data['results'][0]['content']}\")\n        else:\n            print(\"No reviews available for this TV show.\")\n    else:\n        print(\"Error fetching reviews API.\")\nelse:\n    print(\"Error fetching trending TV shows API.\")\n```"
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the trending TV shows\ntrending_url = \"https://api.themoviedb.org/3/trending/tv/day\"\ntrending_response = requests.get(trending_url, headers=headers)\ntrending_tv_show = trending_response.json()[\"results\"][0]  # Get the first trending TV show\n\n# Get similar TV shows to the trending TV show\nsimilar_tv_url = f\"https://api.themoviedb.org/3/tv/{trending_tv_show['id']}/similar\"\nsimilar_tv_response = requests.get(similar_tv_url, headers=headers)\nsimilar_tv_shows = similar_tv_response.json()[\"results\"]\n\nprint(similar_tv_shows)\n```"
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# HTTP header for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the daily trending TV show API\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(url, headers=headers)\n\n# Get the poster path of the first TV show in the results\nif response.status_code == 200:\n    data = response.json()\n    if \"results\" in data and data[\"results\"]:\n        poster_path = data[\"results\"][0][\"poster_path\"]\n        print(f\"Poster path of today's most trending TV show: {poster_path}\")\n    else:\n        print(\"No trending TV shows found.\")\nelse:\n    print(\"Failed to fetch trending TV shows.\")\n```"
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/company"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person with the name Jeremy Clarkson\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nperson_search_params = {\n    \"query\": \"Jeremy Clarkson\",\n}\nperson_search_response = requests.get(person_search_url, headers=headers, params=person_search_params)\nperson_search_result = person_search_response.json()\nperson_id = person_search_result['results'][0]['id']\n\n# Get the TV show credits for Jeremy Clarkson\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\ntv_credits_response = requests.get(tv_credits_url, headers=headers)\ntv_credits_result = tv_credits_response.json()\n\n# Extract Jeremy Clarkson's most popular TV show\nmost_popular_show = max(tv_credits_result['cast'], key=lambda x: x['popularity'])\n\n# Get the cast and crew for Jeremy Clarkson's most popular show\ntv_id = most_popular_show['id']\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_result = credits_response.json()\n\n# Find people who worked with Jeremy Clarkson in his most popular TV show\npeople_worked_with = []\nfor cast_member in credits_result['cast']:\n    if cast_member['name'] != \"Jeremy Clarkson\":\n        people_worked_with.append(cast_member['name'])\n\nprint(people_worked_with)\n```"
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show Black Mirror\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Black Mirror\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the TV show to find the cast\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncast = response.json()[\"cast\"]\n\n# Get the profile image for the lead actor of the first episode of the second season\nlead_actor = cast[0]  # Assuming cast list is in order of appearance\nif lead_actor[\"order\"] == 1:  # Assuming lead actor is the first in order\n    person_id = lead_actor[\"id\"]\n    images_url = f\"https://api.themoviedb.org/3/person/{person_id}/images\"\n    response = requests.get(images_url, headers=headers)\n    image_path = response.json()[\"profiles\"][0][\"file_path\"]\n\n    print(f\"The lead actor of the first episode of the second season of Black Mirror looks like: https://image.tmdb.org/t/p/original/{image_path}\")\nelse:\n    print(\"Lead actor information not found.\")\n```"
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters to search for the TV show \"The Mandalorian\"\nparams_search_tv = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False,\n    \"first_air_date_year\": 2019\n}\n\n# Send a GET request to search for \"The Mandalorian\" TV show\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show ID for \"The Mandalorian\" from the search results\ntv_id = data_search_tv['results'][0]['id']\n\n# Define the API url for getting the credits of a TV show\nurl_tv_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n\n# Send a GET request to get the credits of \"The Mandalorian\" TV show\nresponse_tv_credits = requests.get(url_tv_credits, headers=headers)\ndata_tv_credits = response_tv_credits.json()\n\n# Get the lead actor's ID\nlead_actor_id = data_tv_credits['cast'][0]['id']\n\n# Define the API url for getting the details of a person by ID\nurl_person_details = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n\n# Send a GET request to get the details of the lead actor\nresponse_person_details = requests.get(url_person_details, headers=headers)\ndata_person_details = response_person_details.json()\n\n# Get the birthdate of the lead actor of \"The Mandalorian\"\nlead_actor_birthdate = data_person_details['birthday']\n\nprint(f\"The lead actor of The Mandalorian is born on {lead_actor_birthdate}\")\n```"
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# API url to get the list of current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Parameters to specify the page of results\nparams = {\n    \"page\": 1\n}\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get a list of popular TV shows\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the id of the most popular TV show\ntv_id = data['results'][0]['id']\n\n# API url to get the credits (cast) of the most popular TV show\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n\n# Call the API to get the credits of the most popular TV show\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\n\n# Get the lead actor of the most popular TV show\nlead_actor = credits_data['cast'][0]['name']\n\nprint(f\"The lead actor of today's most popular TV show is: {lead_actor}\")\n```"
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Define the API urls\ntv_popular_url = \"https://api.themoviedb.org/3/tv/popular\"\ntv_credits_url = \"https://api.themoviedb.org/3/tv/{}/credits\"\nperson_images_url = \"https://api.themoviedb.org/3/person/{}/images\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the TV popular API to get the details of the most popular TV show\nresponse = requests.get(tv_popular_url, headers=headers)\ntv_data = response.json()\nmost_popular_show_id = tv_data[\"results\"][0][\"id\"]\n\n# Call the TV credits API to get the cast of the most popular TV show\ntv_credits_url = tv_credits_url.format(tv_id=most_popular_show_id)\nresponse = requests.get(tv_credits_url, headers=headers)\ncredits_data = response.json()\nlead_actor_id = credits_data[\"cast\"][0][\"id\"]\n\n# Call the person images API to get the images of the lead actor\nperson_images_url = person_images_url.format(person_id=lead_actor_id)\nresponse = requests.get(person_images_url, headers=headers)\nimages_data = response.json()\nactor_image_path = images_data[\"profiles\"][0][\"file_path\"]\n\nprint(actor_image_path)\n```"
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for Cate Blanchett\nsearch_params = {\n    \"query\": \"Cate Blanchett\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=search_params)\ncate_blanchett_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get TV show credits for Cate Blanchett\ncredits_url = f\"https://api.themoviedb.org/3/person/{cate_blanchett_id}/tv_credits\"\ncredits_response = requests.get(credits_url, headers=headers)\nlatest_tv_show_id = credits_response.json()[\"cast\"][0][\"id\"]\n\n# Step 3: Get reviews for Cate Blanchett's latest TV show\nreviews_url = f\"https://api.themoviedb.org/3/tv/{latest_tv_show_id}/reviews\"\nreviews_params = {\n    \"page\": 1\n}\nreviews_response = requests.get(reviews_url, headers=headers, params=reviews_params)\n\n# Parsing and displaying reviews\nreviews = reviews_response.json()[\"results\"]\nfor review in reviews:\n    print(f\"Author: {review['author']}\")\n    print(f\"Content: {review['content']}\")\n    print(\"---------------\")\n```"
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Set the API url to search for David Schwimmer\nurl = \"https://api.themoviedb.org/3/search/person\"\n# Set the query parameters\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"include_adult\": False\n}\n# Set the HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call to search for David Schwimmer\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person id of David Schwimmer\nperson_id = data['results'][0]['id']\n\n# Set the API url to get TV show credits for David Schwimmer using the person_id\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n# Make the API call to get TV show credits for David Schwimmer\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Initialize variables to store the most popular TV show's name and popularity\nmost_popular_tv_show = \"\"\nhighest_popularity = 0\n\n# Iterate over the TV shows David Schwimmer has been credited in\nfor tv_show in data['cast']:\n    if tv_show['popularity'] > highest_popularity:\n        highest_popularity = tv_show['popularity']\n        most_popular_tv_show = tv_show['name']\n\n# Print the most popular TV show\nprint(\"David Schwimmer's most popular TV show is:\", most_popular_tv_show)\n```"
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers required to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the credits of the third episode of the second season of Black Mirror\nurl = \"https://api.themoviedb.org/3/tv/42009/season/2/episode/3/credits\"\nresponse = requests.get(url, headers=headers)\n\n# Parse the response to get the director of the episode\nif response.status_code == 200:\n    data = response.json()\n    crew = data.get(\"crew\", [])\n    director = None\n    for member in crew:\n        if member.get(\"job\") == \"Director\":\n            director = member.get(\"name\")\n            break\n\n    if director:\n        print(f\"The director of the third episode of the second season of Black Mirror is: {director}\")\n    else:\n        print(\"Director information not found.\")\nelse:\n    print(\"Failed to retrieve data from the API.\")\n```"
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Set the headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the parameters for the API call\nparams = {\n    \"query\": \"Christopher Nolan\",  # Search query for Christopher Nolan\n    \"include_adult\": False,  # Exclude adult content\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()['results']\n    \n    # Get the list of movies Christopher Nolan is known for\n    known_for_movies = results[0]['known_for']\n    \n    # Print out the known for movies\n    for movie in known_for_movies:\n        print(movie['original_title'])\nelse:\n    print(\"Error in API call\")\n```"
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the movie details\nmovie_title_1 = \"Avatar\"\nmovie_title_2 = \"Avatar: The Way of Water\"\n\n# Get the movie ID for movie 1\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": movie_title_1,\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\nmovie_id_1 = data[\"results\"][0][\"id\"]\n\n# Get the movie ID for movie 2\nparams = {\n    \"query\": movie_title_2,\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\nmovie_id_2 = data[\"results\"][0][\"id\"]\n\n# Get the movie details for movie 1\nurl = f\"https://api.themoviedb.org/3/movie/{movie_id_1}\"\nparams = {}\nresponse = requests.get(url, headers=headers, params=params)\ndata1 = response.json()\n\n# Get the movie details for movie 2\nurl = f\"https://api.themoviedb.org/3/movie/{movie_id_2}\"\nparams = {}\nresponse = requests.get(url, headers=headers, params=params)\ndata2 = response.json()\n\n# Check which movie has a higher rating\nrating_movie_1 = data1[\"vote_average\"]\nrating_movie_2 = data2[\"vote_average\"]\n\nif rating_movie_1 > rating_movie_2:\n    print(f\"{movie_title_1} has a higher rating\")\nelif rating_movie_1 < rating_movie_2:\n    print(f\"{movie_title_2} has a higher rating\")\nelse:\n    print(\"Both movies have the same rating\")\n```"
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n\n# Parameters for the API call\nparams = {\n    \"primary_release_date.gte\": \"2021-01-01\",\n    \"vote_average.gte\": 7.0,\n    \"language\": \"en\",\n    \"sort_by\": \"vote_average.desc\",\n    \"include_adult\": False,  # Exclude adult movies\n    \"page\": 1\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the API call was successful\nif response.status_code == 200:\n    # Get the JSON response\n    movie_data = response.json()\n    \n    # Extract relevant movie information\n    relevant_movies = []\n    for movie in movie_data['results']:\n        relevant_movie = {\n            'title': movie['title'],\n            'release_date': movie['release_date'],\n            'vote_average': movie['vote_average']\n        }\n        relevant_movies.append(relevant_movie)\n    \n    # Print the relevant movie information\n    for movie in relevant_movies:\n        print(f\"Title: {movie['title']}\")\n        print(f\"Release Date: {movie['release_date']}\")\n        print(f\"Vote Average: {movie['vote_average']}\")\n        print(\"----------------------\")\n\nelse:\n    print(\"Error in API call. Status code:\", response.status_code)\n```"
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Lord of the Rings\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=params)\nsearch_results = search_response.json()\n\n# Get the genre of the first movie from the search results\nif 'results' in search_results and len(search_results['results']) > 0:\n    movie_id = search_results['results'][0]['id']\n    # Get the movie details by id\n    movie_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    movie_response = requests.get(movie_url, headers=headers)\n    movie_details = movie_response.json()\n    \n    # Get the genre of the movie\n    genres = []\n    if 'genres' in movie_details:\n        for genre in movie_details['genres']:\n            genres.append(genre['name'])\n\n    print(genres)\nelse:\n    print(\"Movie not found\")\n```"
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Set the page parameter to 1 to get the first page of popular people\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization token header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request to get the list of popular people\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the data from the response\n    data = response.json()\n    \n    # Get the most popular person's birthday\n    most_popular_person_birthday = data['results'][0]['birthday']\n    \n    print(\"Birthday of the most popular person right now:\", most_popular_person_birthday)\n\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```"
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# API url to search for a TV show\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters to search for TV show \"Big Bang Theory\"\nparams_search_tv = {\n    \"query\": \"Big Bang Theory\",\n    \"include_adult\": False\n}\n\n# Calling the API to search for the TV show\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Checking if any results were found\nif data_search_tv[\"total_results\"] > 0:\n    tv_id = data_search_tv[\"results\"][0][\"id\"]  # Getting the TV show ID\n\n    # API url to get images of the second season of a TV show\n    url_tv_images = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/images\"\n\n    # Calling the API to get images of the second season of the TV show\n    response_tv_images = requests.get(url_tv_images, headers=headers)\n    data_tv_images = response_tv_images.json()\n\n    # Accessing the poster of the second season of the TV show\n    if \"posters\" in data_tv_images:\n        if len(data_tv_images[\"posters\"]) > 0:\n            second_season_poster_path = data_tv_images[\"posters\"][0][\"file_path\"]\n            print(second_season_poster_path)  # Output the poster path of the second season\n\nelse:\n    print(\"TV show not found.\")\n```"
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers)\n\n# Parse the response JSON data\nif response.status_code == 200:\n    data = response.json()\n    # Extracting the name of the third episode of the second season\n    third_episode_name = data['episodes'][2]['name']\n    print(third_episode_name)\n\nelse:\n    print(\"Error occurred with status code:\", response.status_code)\n```"
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ],
        "results": "```python\nimport requests\n\n# Headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Shawshank Redemption\"\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\nmovie_data = response.json()\n\n# Get the lead actor's (first cast member's) id\nlead_actor_id = movie_data['results'][0]['id']\n\n# Get the credits for the movie with the lead actor's id\nmovie_credits_url = f\"https://api.themoviedb.org/3/movie/{lead_actor_id}/credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\ncredits_data = response.json()\n\n# Get the lead actor's details using the id\nlead_actor_id = credits_data['cast'][0]['id']\nperson_details_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse = requests.get(person_details_url, headers=headers)\nperson_details = response.json()\n\n# Extract and print the birthday of the lead actor\nlead_actor_birthday = person_details['birthday']\nprint(\"The birthday of the lead actor of the movie The Shawshank Redemption is:\", lead_actor_birthday)\n```"
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and movie id for The Shawshank Redemption\nmovie_id = 278\napi_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n\n# Set the HTTP headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(api_url, headers=headers)\n\n# Check if the response status code is successful\nif response.status_code == 200:\n    # Parse the response JSON content\n    data = response.json()\n    \n    # Get the director's id\n    crew = data.get(\"crew\", [])\n    director_id = None\n    for member in crew:\n        if member.get(\"job\") == \"Director\":\n            director_id = member.get(\"id\")\n            break\n    \n    # Call the API to get details of the director by id\n    if director_id:\n        api_url_person = f\"https://api.themoviedb.org/3/person/{director_id}\"\n        response_person = requests.get(api_url_person, headers=headers)\n        if response_person.status_code == 200:\n            data_person = response_person.json()\n            birthday = data_person.get(\"birthday\")\n            print(f\"The birthday of the director of The Shawshank Redemption is: {birthday}\")\n        else:\n            print(f\"Error in fetching the director's details: {response_person.status_code}\")\n    else:\n        print(\"Director not found for the movie\")\nelse:\n    print(f\"Error in fetching movie credits: {response.status_code}\")\n```"
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Shawshank Redemption\"\nurl_search = \"https://api.themoviedb.org/3/search/movie\"\nparams_search = {\n    \"query\": \"The Shawshank Redemption\",\n}\nresponse_search = requests.get(url_search, headers=headers, params=params_search)\ndata_search = response_search.json()\n\n# Get the movie ID for \"The Shawshank Redemption\"\nmovie_id = data_search[\"results\"][0][\"id\"]\n\n# Get the primary information about the movie\nurl_movie = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nresponse_movie = requests.get(url_movie, headers=headers)\ndata_movie = response_movie.json()\n\n# Get the production company ID for the movie\ncompany_id = data_movie[\"production_companies\"][0][\"id\"]\n\n# Get the company details by id\nurl_company = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse_company = requests.get(url_company, headers=headers)\ndata_company = response_company.json()\n\n# Get the headquarters of the company\nheadquarters = data_company[\"headquarters\"]\n\nprint(headquarters)\n```"
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the details of the Star Wars collection\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Star Wars\"\n}\n# Add the API key to headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call to get the collection details for Star Wars\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the first collection id of Star Wars\ncollection_id = data['results'][0]['id']\n\n# Define the API url to get the company details that created the Star Wars collection\nurl = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n# Make the API call to get the company details\nresponse = requests.get(url, headers=headers)\ncompany_data = response.json()\n\n# Extract the company id to get the company details\ncompany_id = company_data['parts'][0]['id']\n\n# Define the API url to get the company's headquarter details\nurl = f\"https://api.themoviedb.org/3/company/{company_id}\"\n# Make the API call to get the company details\nresponse = requests.get(url, headers=headers)\ncompany_details = response.json()\n\n# Get the headquarter of the company that created the Star Wars collection\nheadquarter = company_details['headquarters']\nprint(\"Headquarter of the company that created the Star Wars collection:\", headquarter)\n```"
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Double Life of Veronique\nsearch_query = \"The Double Life of Veronique\"\nsearch_params = {\n    \"query\": search_query\n}\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_response = requests.get(search_url, headers=headers, params=search_params).json()\n\n# Get the release date for The Double Life of Veronique\nif search_response[\"total_results\"] > 0:\n    veronique_id = search_response[\"results\"][0][\"id\"]\n    movie_info_url = f\"https://api.themoviedb.org/3/movie/{veronique_id}\"\n    veronique_info = requests.get(movie_info_url, headers=headers).json()\n    veronique_release_date = veronique_info[\"release_date\"]\nelse:\n    veronique_release_date = \"\"\n\n# Search for Mulholland Drive\nsearch_query = \"Mulholland Drive\"\nsearch_params = {\n    \"query\": search_query\n}\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_response = requests.get(search_url, headers=headers, params=search_params).json()\n\n# Get the release date for Mulholland Drive\nif search_response[\"total_results\"] > 0:\n    mulholland_id = search_response[\"results\"][0][\"id\"]\n    movie_info_url = f\"https://api.themoviedb.org/3/movie/{mulholland_id}\"\n    mulholland_info = requests.get(movie_info_url, headers=headers).json()\n    mulholland_release_date = mulholland_info[\"release_date\"]\nelse:\n    mulholland_release_date = \"\"\n\n# Compare release dates\nif veronique_release_date and mulholland_release_date:\n    if veronique_release_date < mulholland_release_date:\n        print(\"The Double Life of Veronique has an earlier release date.\")\n    elif veronique_release_date > mulholland_release_date:\n        print(\"Mulholland Drive has an earlier release date.\")\n    else:\n        print(\"Both movies have the same release date.\")\nelse:\n    print(\"One or both movies not found.\")\n```"
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with authentication token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for TV show Twin Peaks\nurl_twin_peaks_search = \"https://api.themoviedb.org/3/search/tv\"\nparams_twin_peaks = {\n    \"query\": \"Twin Peaks\"\n}\nresponse_twin_peaks = requests.get(url_twin_peaks_search, headers=headers, params=params_twin_peaks)\ntwin_peaks_data = response_twin_peaks.json()\ntwin_peaks_id = twin_peaks_data['results'][0]['id']\n\n# Step 2: Get the details of Twin Peaks Season 1\nurl_twin_peaks_season1_credits = f\"https://api.themoviedb.org/3/tv/{twin_peaks_id}/season/1/credits\"\nresponse_twin_peaks_season1 = requests.get(url_twin_peaks_season1_credits, headers=headers)\ntwin_peaks_season1_credits = response_twin_peaks_season1.json()\n\n# Extract the director info from Twin Peaks Season 1\ntwin_peaks_director = None\nfor crew_member in twin_peaks_season1_credits['crew']:\n    if crew_member['job'] == \"Director\":\n        twin_peaks_director = crew_member['name']\n        break\n\n# Step 3: Search for movie Mulholland Drive\nurl_mulholland_drive_search = \"https://api.themoviedb.org/3/search/movie\"\nparams_mulholland_drive = {\n    \"query\": \"Mulholland Drive\"\n}\nresponse_mulholland_drive = requests.get(url_mulholland_drive_search, headers=headers, params=params_mulholland_drive)\nmulholland_drive_data = response_mulholland_drive.json()\nmulholland_drive_id = mulholland_drive_data['results'][0]['id']\n\n# Step 4: Get the credits for Mulholland Drive\nurl_mulholland_drive_credits = f\"https://api.themoviedb.org/3/movie/{mulholland_drive_id}/credits\"\nresponse_mulholland_drive_credits = requests.get(url_mulholland_drive_credits, headers=headers)\nmulholland_drive_credits = response_mulholland_drive_credits.json()\n\n# Extract the director info from Mulholland Drive\nmulholland_drive_director = None\nfor crew_member in mulholland_drive_credits['crew']:\n    if crew_member['job'] == \"Director\":\n        mulholland_drive_director = crew_member['name']\n        break\n\n# Check if the directors are the same\nif twin_peaks_director is not None and mulholland_drive_director is not None:\n    if twin_peaks_director == mulholland_drive_director:\n        print(\"The director of Twin Peaks Season 1 and Mulholland Drive is the same person.\")\n    else:\n        print(\"The director of Twin Peaks Season 1 and Mulholland Drive is not the same person.\")\nelse:\n    print(\"Director information not found for one of the titles.\")\n```"
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Mulholland Drive\" using the search/movie API\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Mulholland Drive\",\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the director's information for the movie using the movie/{movie_id}/credits API\nif search_results[\"total_results\"] > 0:\n    movie_id = search_results[\"results\"][0][\"id\"]\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    credits_response = requests.get(credits_url, headers=headers)\n    credits_data = credits_response.json()\n\n    # Find the director in the crew data\n    for crew_member in credits_data[\"crew\"]:\n        if crew_member[\"job\"] == \"Director\":\n            director_id = crew_member[\"id\"]\n            break\n\n    # Get the director's information using the person/{person_id} API\n    if director_id:\n        person_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n        person_response = requests.get(person_url, headers=headers)\n        person_data = person_response.json()\n\n        # Extract the birthplace of the director\n        director_birthplace = person_data[\"place_of_birth\"]\n        print(f\"The director of Mulholland Drive was born in: {director_birthplace}\")\n    else:\n        print(\"Director information not found.\")\nelse:\n    print(\"Movie not found.\")\n```"
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Parameters for the API request\nparams = {\n    \"page\": 1  # Assuming we are checking only the first page of top rated movies\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the JSON response\ndata = response.json()\n\n# Check if Mulholland Drive is in the top-10 rated\ntop_rated_movies = data['results']\nfound = False\nfor movie in top_rated_movies:\n    if movie['title'] == 'Mulholland Drive':\n        found = True\n        break\n\nif found:\n    print(\"Mulholland Drive is in the Top-10 rated list of TMDB.\")\nelse:\n    print(\"Mulholland Drive is not in the Top-10 rated list of TMDB.\")\n```"
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "results": "```python\nimport requests\n\n# Define the API urls for searching movies directed by Akira Kurosawa and Spielberg\nakira_url = \"https://api.themoviedb.org/3/search/person\"\nspielberg_url = \"https://api.themoviedb.org/3/search/person\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Akira Kurosawa\nparams_akira = {\n    \"query\": \"Akira Kurosawa\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"\"\n}\nresponse_akira = requests.get(akira_url, headers=headers, params=params_akira)\nakira_id = response_akira.json()[\"results\"][0][\"id\"]\n\n# Search for Spielberg\nparams_spielberg = {\n    \"query\": \"Steven Spielberg\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"\"\n}\nresponse_spielberg = requests.get(spielberg_url, headers=headers, params=params_spielberg)\nspielberg_id = response_spielberg.json()[\"results\"][0][\"id\"]\n\n# Get the movie credits for Akira Kurosawa and Spielberg\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{akira_id}/movie_credits\"\nresponse_movie_credits_akira = requests.get(movie_credits_url, headers=headers)\nmovie_count_akira = len(response_movie_credits_akira.json()[\"cast\"])\n\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{spielberg_id}/movie_credits\"\nresponse_movie_credits_spielberg = requests.get(movie_credits_url, headers=headers)\nmovie_count_spielberg = len(response_movie_credits_spielberg.json()[\"cast\"])\n\n# Compare the number of movies directed\nif movie_count_akira > movie_count_spielberg:\n    print(\"Akira Kurosawa directed more movies.\")\nelif movie_count_spielberg > movie_count_akira:\n    print(\"Steven Spielberg directed more movies.\")\nelse:\n    print(\"Akira Kurosawa and Steven Spielberg directed the same number of movies.\")\n```"
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers required to make the API requests\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Mulholland Drive\" to get the director information\nsearch_movie_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_movie_params = {\n    \"query\": \"Mulholland Drive\"\n}\nsearch_movie_response = requests.get(search_movie_url, headers=headers, params=search_movie_params)\nsearch_movie_data = search_movie_response.json()\n\nif search_movie_response.status_code == 200 and search_movie_data[\"total_results\"] > 0:\n    director_name = search_movie_data[\"results\"][0][\"overview\"].split(\" is directed by \")[1]\n\n    # Search for the TV show credits of the director\n    search_person_url = f\"https://api.themoviedb.org/3/search/person\"\n    search_person_params = {\n        \"query\": director_name\n    }\n    search_person_response = requests.get(search_person_url, headers=headers, params=search_person_params)\n    search_person_data = search_person_response.json()\n\n    if search_person_response.status_code == 200 and search_person_data[\"total_results\"] > 0:\n        person_id = search_person_data[\"results\"][0][\"id\"]\n\n        # Get the TV show credits for the director\n        tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n        tv_credits_response = requests.get(tv_credits_url, headers=headers)\n        tv_credits_data = tv_credits_response.json()\n\n        if tv_credits_response.status_code == 200:\n            tv_series_directed = []\n            for credit in tv_credits_data[\"crew\"]:\n                if credit[\"job\"] == \"Director\":\n                    tv_series_directed.append(credit[\"name\"])\n\n            print(\"TV series directed by the director of Mulholland Drive:\")\n            for series in tv_series_directed:\n                print(series)\n        else:\n            print(\"Error fetching TV show credits for the director.\")\n    else:\n        print(\"Director not found.\")\nelse:\n    print(\"Movie 'Mulholland Drive' not found.\")\n```"
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ],
        "results": "```python\nimport requests\n\n# API url for searching a person\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n# API url for getting person details by id\nurl_person_details = \"https://api.themoviedb.org/3/person/{}\"\n\n# Parameters for searching Scarlett Johansson\nparams = {\n    \"query\": \"Scarlett Johansson\",\n    \"include_adult\": False\n}\n\n# Make the request to search for Scarlett Johansson\nresponse_search = requests.get(url_search_person, headers=headers, params=params)\nresult_search = response_search.json()\n\n# Get the person_id of Scarlett Johansson\nperson_id = result_search[\"results\"][0][\"id\"]\n\n# Make the request to get details of Scarlett Johansson using person_id\nresponse_details = requests.get(url_person_details.format(person_id), headers=headers)\nresult_details = response_details.json()\n\n# Extracting the birthday of Scarlett Johansson\nscarlett_birthday = result_details[\"birthday\"]\nprint(scarlett_birthday)\n```"
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "results": "```python\nimport requests\n\n# Define the headers containing the API authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Sword Art Online\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Sword Art Online\"\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\ndata = response.json()\n\n# Get the TV show id for Sword Art Online\ntv_id = data[\"results\"][0][\"id\"]\n\n# Get the details of Sword Art Online including the number of seasons\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\nresponse = requests.get(tv_details_url, headers=headers)\ndata = response.json()\n\n# Extract the number of seasons\nnum_seasons = data[\"number_of_seasons\"]\nprint(f\"The number of seasons of Sword Art Online is: {num_seasons}\")\n```"
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to search for the TV show \"We Married as Job\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters for the TV show search\nparams_tv = {\n    \"query\": \"We Married as Job\",\n    \"page\": 1\n}\n\n# Send the request to search for the TV show\nresponse_tv = requests.get(url_search_tv, headers=headers, params=params_tv)\nresult_tv = response_tv.json()\n\n# Extract the TV show ID of \"We Married as Job\"\ntv_show_id = result_tv[\"results\"][0][\"id\"]\n\n# Define the API url to get the credits of the TV show\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n\n# Send the request to get the credits of the TV show\nresponse_credits = requests.get(url_credits, headers=headers)\nresult_credits = response_credits.json()\n\n# Check if Yui Aragaki and Gen Hoshino are co-starring in the TV show\nactors = result_credits[\"cast\"]\nyui_aragaki = \"Yui Aragaki\" in [actor[\"name\"] for actor in actors]\ngen_hoshino = \"Gen Hoshino\" in [actor[\"name\"] for actor in actors]\n\nif yui_aragaki and gen_hoshino:\n    print(\"Yui Aragaki and Gen Hoshino are co-starring in We Married as Job\")\nelse:\n    print(\"Yui Aragaki and Gen Hoshino are not co-starring in We Married as Job\")\n```"
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ],
        "results": "```python\nimport requests\n\n# Set the API url for searching movies\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\nmovie_credits_url = \"https://api.themoviedb.org/3/movie/{}/credits\"\ntv_credits_url = \"https://api.themoviedb.org/3/tv/{}/credits\"\n\n# Set the headers for API authentication\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Movie query parameters\nmovie_params = {\n    \"query\": \"Barbie\",\n    \"include_adult\": False\n}\n\n# TV show query parameters\ntv_params = {\n    \"query\": \"DEATH NOTE\",\n    \"include_adult\": False\n}\n\n# Make API calls to search for movies\nmovie_response = requests.get(movie_search_url, headers=headers, params=movie_params).json()\ntv_response = requests.get(tv_search_url, headers=headers, params=tv_params).json()\n\n# Get the movie director's ID\nif len(movie_response[\"results\"]) > 0:\n    movie_id = movie_response[\"results\"][0][\"id\"]\n    movie_credits_response = requests.get(movie_credits_url.format(movie_id), headers=headers).json()\n    movie_crew = movie_credits_response[\"crew\"]\n    director = None\n    for crew_member in movie_crew:\n        if crew_member[\"job\"] == \"Director\":\n            director = crew_member\n            break\n\n# Get the lead actor's ID for the TV show\nif len(tv_response[\"results\"]) > 0:\n    tv_id = tv_response[\"results\"][0][\"id\"]\n    tv_credits_response = requests.get(tv_credits_url.format(tv_id), headers=headers).json()\n    tv_cast = tv_credits_response[\"cast\"]\n    lead_actor = tv_cast[0]\n\n# Calculate the age difference in years\nif director and lead_actor:\n    director_age = 2022 # Assume current year is 2022\n    lead_actor_age = 2022 # Assume current year is 2022\n    age_difference = abs(director_age - lead_actor_age)\n    print(\"The director of the movie Barbie is older than the lead actor of the TV show DEATH NOTE by {} years.\".format(age_difference))\nelse:\n    print(\"Director or lead actor information not found.\")\n```"
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching a person\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the query parameters for searching Katherine LaNasa\nparams_search = {\n    \"query\": \"Katherine LaNasa\",\n    \"include_adult\": False,  # We do not want adult content in the results\n    \"page\": 1,\n    \"region\": \"US\"  # Filter release dates based on US region\n}\n\n# Make a GET request to search for Katherine LaNasa\nresponse_search = requests.get(url_search_person, headers=headers, params=params_search)\ndata_search = response_search.json()\n\n# Extract the person ID of Katherine LaNasa from the search results\nif data_search[\"total_results\"] > 0:\n    person_id = data_search[\"results\"][0][\"id\"]\n    \n    # Define the API endpoint for getting movie credits of a person\n    url_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    \n    # Make a GET request to get the movie credits of Katherine LaNasa\n    response_movie_credits = requests.get(url_movie_credits, headers=headers)\n    data_movie_credits = response_movie_credits.json()\n    \n    # Extract the latest movie appearance of Katherine LaNasa\n    if data_movie_credits[\"cast\"]:\n        latest_movie = data_movie_credits[\"cast\"][0][\"title\"]\n        print(f\"Katherine LaNasa's latest movie appearance: {latest_movie}\")\n    else:\n        print(\"No movie appearances found for Katherine LaNasa.\")\nelse:\n    print(\"Katherine LaNasa not found.\")\n```"
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching a movie\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the parameters for searching the specific movie\nparams_search_movie = {\n    \"query\": \"Oppenheimer\",\n    \"include_adult\": False,\n    \"page\": 1\n}\n\n# Make a GET request to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie id of the first search result\nmovie_id = data_search_movie['results'][0]['id']\n\n# Define the API url for getting images of a movie by movie id\nurl_movie_images = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n\n# Make a GET request to get the images of the movie\nresponse_movie_images = requests.get(url_movie_images, headers=headers)\ndata_movie_images = response_movie_images.json()\n\n# Get the cover image of the movie\ncover_images = data_movie_images['posters']\nif cover_images:\n    cover_image_path = cover_images[0]['file_path']\n    print(f\"The cover image path of the movie Oppenheimer: https://image.tmdb.org/t/p/original{cover_image_path}\")\nelse:\n    print(\"No cover image found for the movie Oppenheimer.\")\n```"
    }
]