[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person with name = \"Sofia Coppola\"\nperson_url = \"https://api.themoviedb.org/3/search/person\"\nperson_params = {\n    \"query\": \"Sofia Coppola\",\n    \"include_adult\": False\n}\n\n# Make the API call to search for the person\nperson_response = requests.get(person_url, headers=headers, params=person_params)\nperson_data = person_response.json()\n\n# Get the person_id for Sofia Coppola\nperson_id = person_data[\"results\"][0][\"id\"]\n\n# Get the movie credits for Sofia Coppola\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nmovie_credits_response = requests.get(movie_credits_url, headers=headers)\nmovie_credits_data = movie_credits_response.json()\n\n# Count the number of movies directed by Sofia Coppola\ndirected_movies_count = sum(1 for credit in movie_credits_data[\"crew\"] if credit[\"job\"] == \"Director\")\n\nprint(directed_movies_count)\n```",
        "usage": [
            400,
            13924,
            14324
        ],
        "executed": "14\n"
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API URL to search for the movie \"The Dark Knight\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Dark Knight\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Perform the HTTP GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    data = response.json()\n    if data[\"total_results\"] > 0:\n        # Get the movie id\n        movie_id = data[\"results\"][0][\"id\"]\n        \n        # Use the movie id to get the credits for the movie\n        credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n        credits_response = requests.get(credits_url, headers=headers)\n        \n        if credits_response.status_code == 200:\n            credits_data = credits_response.json()\n            \n            # Get the lead actor name\n            lead_actor = credits_data[\"cast\"][0][\"name\"]\n            print(f\"The lead actor in the movie 'The Dark Knight' is: {lead_actor}\")\n        else:\n            print(\"Error getting credits data\")\n    else:\n        print(\"No movie found with the given query\")\nelse:\n    print(\"Error in the initial search request\")\n```",
        "usage": [
            298,
            12379,
            12677
        ],
        "executed": "The lead actor in the movie 'The Dark Knight' is: Christian Bale\n"
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the parameters (we will use page=1 to get the top rated movies on the first page)\nparams = {\n    \"page\": 1\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Extract the movie data from the response\n    movie_data = response.json()\n    \n    # Get the top-1 rated movie\n    top_rated_movie = movie_data[\"results\"][0]\n    \n    # Get the movie id\n    top_rated_movie_id = top_rated_movie[\"id\"]\n    \n    # Make a new API call to get the credits for the top-1 rated movie\n    credits_url = f\"https://api.themoviedb.org/3/movie/{top_rated_movie_id}/credits\"\n\n    # Make the API call to get the credits\n    credits_response = requests.get(credits_url, headers=headers)\n\n    if credits_response.status_code == 200:\n        # Extract the credits data from the response\n        credits_data = credits_response.json()\n        \n        # Get the director of the movie (assuming director's job is 'Director')\n        director = None\n        for crew_member in credits_data[\"crew\"]:\n            if crew_member[\"job\"] == \"Director\":\n                director = crew_member[\"name\"]\n                break\n\n        if director:\n            print(f\"The director of the top-1 rated movie is: {director}\")\n        else:\n            print(\"Director information not found.\")\n    else:\n        print(\"Error fetching credits data.\")\nelse:\n    print(\"Error fetching top rated movie data.\")\n```",
        "usage": [
            543,
            11680,
            12223
        ],
        "executed": "The director of the top-1 rated movie is: Frank Darabont\n"
    },
    {
        "query": "give me a image for the collection Star Wars",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url to search for the collection\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the parameters for the query\nparams = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\n\n# Call the API to search for the collection\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results from the response\n    results = response.json()[\"results\"]\n\n    # Loop through the results to find the collection with the name \"Star Wars\"\n    for result in results:\n        if result[\"name\"] == \"Star Wars\":\n            collection_id = result[\"id\"]\n            break\n\n    if collection_id:\n        # Use the collection_id to get the images for the collection\n        images_url = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\n        images_response = requests.get(images_url, headers=headers)\n\n        if images_response.status_code == 200:\n            # Get the backdrops and posters for the collection\n            backdrops = images_response.json()[\"backdrops\"]\n            posters = images_response.json()[\"posters\"]\n\n            # Print the first image for each type (backdrop and poster)\n            if backdrops:\n                print(\"Backdrop Image Path:\")\n                print(backdrops[0][\"file_path\"])\n            else:\n                print(\"No backdrop images found for the collection.\")\n\n            if posters:\n                print(\"\\nPoster Image Path:\")\n                print(posters[0][\"file_path\"])\n            else:\n                print(\"No poster images found for the collection.\")\n        else:\n            print(\"Failed to fetch images for the collection.\")\n    else:\n        print(\"Star Wars collection not found in the search results.\")\nelse:\n    print(\"API request failed.\")\n```",
        "usage": [
            387,
            12418,
            12805
        ],
        "executed": null
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url with company_id for Walt Disney (company_id = 2)\nurl = \"https://api.themoviedb.org/3/company/2/images\"\n# Define the parameters (if any)\nparams = {}\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the logo details from the API response\n    company_logo = response.json()[\"logos\"]\n    # Print the logo details\n    print(company_logo)\nelse:\n    # Print an error message if the request was not successful\n    print(\"Error: Unable to fetch company logo.\")\n```",
        "usage": [
            151,
            13754,
            13905
        ],
        "executed": "[{'aspect_ratio': 3.0, 'file_path': '/wdrCwmRnLFJhEoH8GSfymY85KHT.png', 'height': 28, 'id': '5aa16e1a0e0a2644d800ad9b', 'file_type': '.svg', 'vote_average': 5.39, 'vote_count': 6, 'width': 84}, {'aspect_ratio': 0.8695652173913043, 'file_path': '/4MbjW4f9bu6LvlDmyIvfyuT3boj.png', 'height': 575, 'id': '5aa16e1a92514160fc00ad77', 'file_type': '.svg', 'vote_average': 5.252, 'vote_count': 4, 'width': 500}, {'aspect_ratio': 3.593869731800766, 'file_path': '/t2PUBHDCsuTlsWsyqbaM4uvESDM.png', 'height': 261, 'id': '64614bafa6725400e3d1f849', 'file_type': '.svg', 'vote_average': 5.246, 'vote_count': 2, 'width': 938}, {'aspect_ratio': 0.7344173441734417, 'file_path': '/dP12C31aKgNPNE2NuHfpIsCPRud.png', 'height': 738, 'id': '64289a72a3e4ba0095f2e290', 'file_type': '.png', 'vote_average': 5.172, 'vote_count': 1, 'width': 542}, {'aspect_ratio': 3.215434083601286, 'file_path': '/oLnOQIYqC9kefk0tnGwlhurexoO.png', 'height': 311, 'id': '64614bcd8c44b900e165a648', 'file_type': '.svg', 'vote_average': 5.172, 'vote_count': 1, 'width': 1000}, {'aspect_ratio': 1.301020408163265, 'file_path': '/wszlOmgJykJXULYfuusu3Kxala4.png', 'height': 784, 'id': '5aa16e420e0a2644dd00b3ce', 'file_type': '.svg', 'vote_average': 5.118, 'vote_count': 4, 'width': 1020}, {'aspect_ratio': 1.13677811550152, 'file_path': '/cMn1GNxnxa1q0zStmnFX1jcQvZo.png', 'height': 329, 'id': '5aa16e1a0e0a2644e100bbad', 'file_type': '.svg', 'vote_average': 5.106, 'vote_count': 2, 'width': 374}]\n"
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url to get the credits for the movie Titanic\nurl = \"https://api.themoviedb.org/3/movie/597/credits\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request to get the cast and crew information for Titanic\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Extract the details of the lead actor (cast[0])\n    lead_actor = data[\"cast\"][0]\n    \n    # Output the lead actor's details\n    print(\"Lead Actor of Titanic:\")\n    print(\"Name:\", lead_actor[\"name\"])\n    print(\"Character:\", lead_actor[\"character\"])\n    print(\"Profile Path:\", lead_actor[\"profile_path\"])\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            356,
            12093,
            12449
        ],
        "executed": "Lead Actor of Titanic:\nName: Leonardo DiCaprio\nCharacter: Jack Dawson\nProfile Path: /wo2hJpn04vbtmh0B9utCFdsQhxM.jpg\n"
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameters\nparams = {\n    \"query\": \"Titanic\",  # Searching for movies with the name Titanic \n    \"page\": 1,  # Get the first page of search results\n    \"include_adult\": False  # Exclude adult content\n}\n\n# Call the API to search for movies similar to Titanic\nresponse_search = requests.get(url_search_movie, headers=headers, params=params)\n\n# Check if the request was successful\nif response_search.status_code == 200:\n    results = response_search.json()\n    \n    # Check if there are any search results\n    if results[\"total_results\"] > 0:\n        # Get the movie_id of the first movie similar to Titanic\n        movie_id = results[\"results\"][0][\"id\"]\n        \n        # Now, we will call the reviews API for this movie\n        url_reviews_movie = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n        response_reviews = requests.get(url_reviews_movie, headers=headers)\n        \n        # Check if the request was successful\n        if response_reviews.status_code == 200:\n            reviews = response_reviews.json()\n            print(reviews)  # Output the reviews\n        else:\n            print(\"Error in fetching reviews for the movie\")\n    else:\n        print(\"No movies similar to Titanic found\")\nelse:\n    print(\"Error in searching for movies similar to Titanic\")\n```",
        "usage": [
            493,
            11949,
            12442
        ],
        "executed": "{'id': 597, 'page': 1, 'results': [{'author': 'John Chard', 'author_details': {'name': '', 'username': 'John Chard', 'avatar_path': '/utEXl2EDiXBK6f41wCLsvprvMg4.jpg', 'rating': 9.0}, 'content': \"Beautiful Romance - Tragedy Unbound.\\r\\n\\r\\nIt has kind of become the popular thing to kick Titanic, the film and its achievements. It's like the love it garnered on release and the colossal waves it made in the history of cinema, never happened, or as some want you to believe, doesn't matter. I can tell you now that many of my macho fuelled friends will privately, under the influence of liquid refreshments, admit to having affection for the film, but socially in a circle environment? Not a bit of it! I have no such problems admitting my love for the film, I love it as much now as I approach 50, as I did when I sat there in awe at the cinema in 1997.\\r\\n\\r\\nYou jump - I jump.\\r\\n\\r\\nTitanic is far from flawless, where even now with the advancements in technology the effects over 15 years later look a touch creaky. While it's true as well that away from Rose and Jack the characterisations are thin on the ground. But this is Rose and Jack's story, fully fleshed out for an hour and half and then framed by the terrible tragedy that unfolds for the next hour and half. The tie-in to the present day is superbly constructed by James Cameron - the search for the diamond - the real life filming of the Titanic wreckage - and the flashback telling of the story by a delightful Gloria Stuart as old Rose, and the sinking of the ship and its aftermath is stunning and heart breaking in equal measure.\\r\\n\\r\\nNever let go.\\r\\n\\r\\nSo may scenes and dialogue exchanges stay in the memory for ever. The band playing on, the captain awaiting his fate, the mother ushering her children to sleep before the sea comes to take them, the old boy drinking his brandy as the water rushes in, or just Jack and Rose, polar opposites in society's class structure, making love, making art or just professing that neither will ever let go. It's what makes Titanic the wonderful piece of cinema it is, where beauty and tragedy merge to create something forever memorable. A film that deserved all the accolades and cash till ringing that it once did have. 9/10\", 'created_at': '2014-09-25T23:52:44.706Z', 'id': '5424aaccc3a36808760043df', 'updated_at': '2021-06-23T15:57:28.766Z', 'url': 'https://www.themoviedb.org/review/5424aaccc3a36808760043df'}, {'author': 'CinemaSerf', 'author_details': {'name': 'CinemaSerf', 'username': 'Geronimo1967', 'avatar_path': '/1kks3YnVkpyQxzw36CObFPvhL5f.jpg', 'rating': 7.0}, 'content': 'Set around the ill-fated maiden voyage of the RMS \"Titanic\", this is essentially a film in two parts. The first, weaker, element features a young \"Dawson\" (Leonardo DiCaprio) who wins a third class ticket to New York on the soon to depart liner. Meantime, the wealthy but unhappy \"Rose\" (Kate Winslet) is up in the posh cabins with her cold and unfeeling fianc\u00e9e \"Hockley\" (Billy Zane) and her equally unpleasant, venally ambitious mother \"Ruth\" (Frances Fisher). Desperately unhappy, \"Rose\" considers jumping off the prow of the boat, but luckily the charming young \"Dawson\" is on hand to talk her down, and so begins their friendship that causes much chagrin amongst her socially elite companions. That friendship culminates in him making a rather provocative drawing of her, the final straw for her boyfriend and his enforcer \"Lovejoy\" (David Warner). It all looks ominous for both until - part two begins. The ship, speeding along nicely under the command of Bernard Hill\\'s Captain Smith clips the underwater part of an iceberg and now history takes over. James Cameron offers us a purely speculative account of what might have happened as the initially incredulous crew start to realise that maybe it is not just Molly Brown (an excellent Kathy Bates) that\\'s unsinkable! What now ensues are a series of well staged scenarios depicting panic, fear, a fair degree of selfishness and some proper stiff upper lips as the ship has be evacuated and the segregation of the passengers and competencies of the crew start to become life threatening. The visual effects have dated, the smoke from the ship\\'s funnels blows in an strangely symmetrical fashion and the later scenes struggle to convince - but this is really a rather tragic love story with a strong chemistry between the engaging two characters at the top of the bill, and an effective performance from the older \"Rose\" (Gloria Stewart) who takes on the role of narrator 80 years after the disaster. I still find it uncomfortable to watch the actuality of the wreck, which features occasionally throughout the film - I feel like I am quite literally walking through someone\\'s grave; but it does lend a potent hook upon which this lengthy, but well thought out and constructed drama is presented. Criticisms have been made of it\\'s factual inaccuracies, and it may well play a bit fast and loose with some of the real characterisations - but it\\'s a drama, and to be enjoyed has to be appreciated in that sphere. Big screen is a must, it really does lose a great deal on a television.', 'created_at': '2022-06-08T11:59:42.608Z', 'id': '62a08f2e12197e565ea45214', 'updated_at': '2022-06-08T11:59:42.608Z', 'url': 'https://www.themoviedb.org/review/62a08f2e12197e565ea45214'}, {'author': 'Antoine53', 'author_details': {'name': '', 'username': 'Antoine53', 'avatar_path': None, 'rating': None}, 'content': 'Awesome', 'created_at': '2023-01-17T14:01:51.580Z', 'id': '63c6aa4f66ae4d0085cb704a', 'updated_at': '2023-01-17T15:17:41.173Z', 'url': 'https://www.themoviedb.org/review/63c6aa4f66ae4d0085cb704a'}, {'author': 'Nathan', 'author_details': {'name': 'Nathan', 'username': 'TitanGusang', 'avatar_path': '/yHGV91jVzmqpFOtRSHF0avBZmPm.jpg', 'rating': 10.0}, 'content': \"Titanic is simply a masterpiece. This movie has it all. A tremendous score, deep emotion emphasized by fantastic performances, and incredibly gripping and high-stakes action. There is really something for everyone here.\\r\\n\\r\\nBefore I continue my praise of the film, I think it has one glaring weakness: the present-day plot. For me, this just did not work all that well. I understand that it was implemented for the main story to have a more emotional impact, but it was not needed. It added almost thirty minutes to the runtime, which could have been used for more character development in the story or to have a more streamlined plot. Not to mention, the acting in this section was lackluster. That might be a hot take, but it was something that I noticed during my watch.\\r\\n\\r\\nBack to the positives. The score is magnificent here. The minute I finished the film, I had an urge to put on this score to be transported back to the Titanic. That does not happen very often to me.\\r\\n\\r\\nThe performances are great all around. Leonardo DiCaprio and Kate Winslet's chemistry was perfect. They played off each other so well and really sold this emphatic and rapid love the two shared. The movie spends a lot of time building their relationship and the payoff at the end is worth every second. Billy Zane was an over-the-top asshole, and even though it was cheesy at times, it worked for me. The other ancillary cast members did well, including Kathy Bates, Frances Fisher and Bill Paxton.\\r\\n\\r\\nThis film is really two movies put into one and both of them work excellently. The first half is a charming and cute love story that spends a lot of time on character development, laying the background for motivations and personalities. While this half may have been my favorite, it is slightly outdone by the second half, which is a gripping and suspenseful survival action story. This section is brutal, showing large scale panic and hysteria while also having some incredibly horrific deaths. The chaos was infectious and very scary to watch. Both halves create a great sense of emotion in the audience and complement each other very well.\\r\\n\\r\\nOverall, this movie had twenty-five years of hype and critical acclaim to live up to, and I am happy to say it passed expectations. Since leaving the theater, I cannot stop thinking about it.\\r\\n\\r\\nScore: 96% |\\r\\nVerdict: Masterpiece\\r\\n\\r\\nOn a side note: I did see this movie in 3D during the twenty-five-anniversary re-release. While it was great to see it remastered in 4K, I do think the 3D was poor and unneeded. This did not affect my grade however, since it was not originally designed as a 3D experience, and they 3D did not really take away for my enjoyment.\", 'created_at': '2023-02-17T14:01:29.311Z', 'id': '63ef88b95cc11d0086123924', 'updated_at': '2023-02-17T14:01:29.411Z', 'url': 'https://www.themoviedb.org/review/63ef88b95cc11d0086123924'}, {'author': 'Prodank', 'author_details': {'name': '', 'username': 'Prodank', 'avatar_path': '/d8FdQJGfhs5zAQC95GvxvpkVv5p.jpg', 'rating': 7.0}, 'content': \"Titanic was enjoyable initially, but the constant TV reruns got old fast. I don't even own a TV anymore, and I'm in no hurry to watch it again. Still, it's a good movie, deserving of a 7/10 rating.\", 'created_at': '2023-09-17T05:09:03.291Z', 'id': '650689effa27f4010c4a62ad', 'updated_at': '2023-09-18T15:40:43.196Z', 'url': 'https://www.themoviedb.org/review/650689effa27f4010c4a62ad'}], 'total_pages': 1, 'total_results': 5}\n"
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/latest"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the movie id for Titanic\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"Titanic\",\n    \"page\": 1\n}\n\nresponse = requests.get(search_url, headers=headers, params=search_params)\ntitanic_id = response.json()[\"results\"][0][\"id\"]\n\n# Get recommendations for the movie ID\nrecommendations_url = f\"https://api.themoviedb.org/3/movie/{titanic_id}/recommendations\"\nrecommendations_params = {\n    \"page\": 1\n}\n\nrecommendations_response = requests.get(recommendations_url, headers=headers, params=recommendations_params)\nrecommendations = recommendations_response.json()[\"results\"]\n\n# Print out the recommendations\nfor recommendation in recommendations:\n    print(recommendation[\"title\"])\n```",
        "usage": [
            344,
            13295,
            13639
        ],
        "executed": "Harry Potter and the Philosopher's Stone\nThe Wolf of Wall Street\nSuicide Squad\nShutter Island\nAvatar\nRomeo + Juliet\nForrest Gump\nThe Lord of the Rings: The Two Towers\nToy Story\nBatman Begins\nPirates of the Caribbean: The Curse of the Black Pearl\nThe Revenant\nKick-Ass\nMen in Black\nTwilight\nCatch Me If You Can\nInception\nThe Shawshank Redemption\nThor\nFinding Nemo\nThe Lord of the Rings: The Fellowship of the Ring\n"
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the provided Authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the latest movie directed by Christopher Nolan\nurl = \"https://api.themoviedb.org/3/discover/movie\"\nparams = {\n    \"sort_by\": \"popularity.desc\",\n    \"with_people\": \"525\",\n    \"page\": 1\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the title of the latest movie\nif data.get(\"results\"):\n    latest_movie_title = data[\"results\"][0][\"title\"]\n    print(\"The latest movie directed by Christopher Nolan is:\", latest_movie_title)\nelse:\n    print(\"No results found.\")\n```",
        "usage": [
            312,
            13106,
            13418
        ],
        "executed": "The latest movie directed by Christopher Nolan is: Oppenheimer\n"
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the person id of Martin Scorsese\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Martin Scorsese\",\n    \"include_adult\": False,\n    \"page\": 1,\n    \"region\": \"US\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\nperson_results = response.json()[\"results\"]\n\nif len(person_results) == 0:\n    print(\"Director not found\")\n    exit()\n\ndirector_id = person_results[0][\"id\"]\n\n# Step 2: Get the list of movies directed by Martin Scorsese\ndirector_movies_url = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\nresponse = requests.get(director_movies_url, headers=headers)\nmovies_results = response.json()[\"cast\"]\n\n# Step 3: Find the highest rated movie\nhighest_rated_movie = None\nhighest_rating = 0\nfor movie in movies_results:\n    if movie[\"vote_average\"] > highest_rating:\n        highest_rating = movie[\"vote_average\"]\n        highest_rated_movie = movie\n\n# Step 4: Print the highest rated movie directed by Martin Scorsese\nif highest_rated_movie:\n    print(f\"The highest rated movie directed by Martin Scorsese is {highest_rated_movie['title']} with a rating of {highest_rating}\")\nelse:\n    print(\"No movies found for Martin Scorsese\")\n```  ",
        "usage": [
            493,
            12761,
            13254
        ],
        "executed": "The highest rated movie directed by Martin Scorsese is Raging Bull: Before the Fight with a rating of 10.0\n"
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API key and headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Leonardo DiCaprio\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Leonardo DiCaprio\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse = requests.get(person_search_url, headers=headers, params=params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the movie credits for Leonardo DiCaprio\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovie_credits = response.json()[\"cast\"]\n\n# Get the latest movie as director info\nlatest_movie = max(movie_credits, key=lambda x: x[\"release_date\"])\nif \"director\" in latest_movie[\"job\"].lower():\n    director_name = latest_movie[\"name\"]\n    print(f\"The director of Leonardo DiCaprio's latest movie is: {director_name}\")\nelse:\n    print(\"Director information not found.\")\n```",
        "usage": [
            400,
            11641,
            12041
        ],
        "executed": null
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person \"Catherine Hardwicke\"\nparams_person = {\n    \"query\": \"Catherine Hardwicke\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse_person = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params_person)\nperson_results = response_person.json()[\"results\"]\n\nif len(person_results) > 0:\n    person_id = person_results[0][\"id\"]\n    \n    # Get the TV show credits for Catherine Hardwicke\n    url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n    response_tv_credits = requests.get(url, headers=headers)\n    \n    # Find the latest TV show directed by Catherine Hardwicke\n    tv_directed_by_catherine = None\n    tv_credits = response_tv_credits.json()\n    for credit in tv_credits[\"crew\"]:\n        if credit[\"job\"] == \"Director\":\n            tv_directed_by_catherine = credit\n            break\n    \n    if tv_directed_by_catherine:\n        print(\"TV Show recently directed by Catherine Hardwicke:\")\n        print(tv_directed_by_catherine)\n    else:\n        print(\"Catherine Hardwicke hasn't directed a TV show recently.\")\nelse:\n    print(\"Catherine Hardwicke was not found.\")\n```",
        "usage": [
            481,
            12921,
            13402
        ],
        "executed": "TV Show recently directed by Catherine Hardwicke:\n{'adult': False, 'backdrop_path': '/pXwEO7OYA7LhVPYyGIIqa58wwcF.jpg', 'genre_ids': [10759, 18, 37], 'id': 1401, 'origin_country': ['US', 'CA'], 'original_language': 'en', 'original_name': 'Hell on Wheels', 'overview': 'The epic story of post-Civil War America, focusing on Cullen Bohannon, a Confederate soldier who sets out to exact revenge on the Union soldiers who killed his wife. His journey takes him west to Hell on Wheels, a dangerous, raucous, lawless melting pot of a town that travels with and services the construction of the first transcontinental railroad, an engineering feat unprecedented for its time.', 'popularity': 157.497, 'poster_path': '/hK6C1Iimyw52ToE3d8WFFUh9Vn1.jpg', 'first_air_date': '2011-11-06', 'name': 'Hell on Wheels', 'vote_average': 7.605, 'vote_count': 392, 'credit_id': '53d75b9bc3a3683a25000e70', 'department': 'Directing', 'episode_count': 1, 'job': 'Director'}\n"
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the TV show \"Breaking Bad\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Breaking Bad\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nbreaking_bad_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get a list of similar TV shows to \"Breaking Bad\"\nsimilar_url = f\"https://api.themoviedb.org/3/tv/{breaking_bad_id}/similar\"\nsimilar_params = {\n    \"page\": 1\n}\nsimilar_response = requests.get(similar_url, headers=headers, params=similar_params)\n\nsimilar_tv_shows = similar_response.json()[\"results\"]\nfor show in similar_tv_shows:\n    print(show[\"name\"])  # Print the name of the similar TV show\n```",
        "usage": [
            356,
            12173,
            12529
        ],
        "executed": "Flower of Evil\nHardcastle and McCormick\nThe Sopranos\nDeadwood\nSons of Anarchy\nThe Shield\nMea culpa\nEl d\u00eda menos pensado\nThe Wright Verdicts\nLove, Now\nSenior High\nShameless\nThe Twilight Zone\nHeist\nThe Best Times\nAlpha Beta\nMatlock\nDanger of Her\nJenny\nThe Ancient Magus' Bride\n"
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the daily trending movies\nurl = \"https://api.themoviedb.org/3/trending/movie/day\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the movie ID of the most trending movie\nmovie_id = data[\"results\"][0][\"id\"]\n\n# Get the credits for the movie to find the director\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\n\n# Find the director in the crew\nfor crew_member in credits_data[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director = crew_member[\"name\"]\n        break\n\nprint(f\"The director of today's most trending movie is: {director}\")\n```",
        "usage": [
            348,
            12827,
            13175
        ],
        "executed": "The director of today's most trending movie is: Juan Carlos Fresnadillo\n"
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Twilight\"\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Twilight\"\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\n\nif response.status_code == 200:\n    # Assuming the first result in the search is the movie we are looking for\n    movie_id = response.json()[\"results\"][0][\"id\"]\n\n    # Get the credits for the movie with the extracted movie_id\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response = requests.get(credits_url, headers=headers)\n\n    if response.status_code == 200:\n        # Extract the crew list\n        crew_list = response.json()[\"crew\"]\n\n        # Find the director in the crew list\n        director = None\n        for person in crew_list:\n            if person[\"job\"] == \"Director\":\n                director = person[\"name\"]\n                break\n\n        if director:\n            print(f\"The director of the movie 'Twilight' is: {director}\")\n        else:\n            print(\"Director information not found.\")\n    else:\n        print(\"Error getting movie credits.\")\nelse:\n    print(\"Error searching for the movie.\")\n```",
        "usage": [
            441,
            11842,
            12283
        ],
        "executed": "The director of the movie 'Twilight' is: Catherine Hardwicke\n"
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"The Witcher\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\"query\": \"The Witcher\"}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show details by id\ntv_id = data_search_tv['results'][0]['id']\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\nresponse_tv_details = requests.get(url_tv_details, headers=headers)\ndata_tv_details = response_tv_details.json()\n\n# Get the images for the second episode of the first season of The Witcher\nseason_number = 1\nepisode_number = 2\nurl_episode_images = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images\"\nresponse_episode_images = requests.get(url_episode_images, headers=headers)\ndata_episode_images = response_episode_images.json()\n\n# Extract the photo details from the response\nphoto = data_episode_images['stills'][0]['file_path']\nprint(f\"Photo belong to the second episode of the first season of The Witcher: {photo}\")\n```",
        "usage": [
            447,
            11156,
            11603
        ],
        "executed": "Photo belong to the second episode of the first season of The Witcher: /7KWyZgiSXSAuagbtzjTZLrkOtNk.jpg\n"
    },
    {
        "query": "What is top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the URL of the API\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Define the parameters for the request\nparams = {\n    \"page\": 1  # Get the first page of results\n}\n\n# Include the authorization token in the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the top rated movie at position 1\n    top_rated_movie = data['results'][0]\n    \n    # Print the title of the top rated movie\n    print(\"Top-1 rated movie title: \", top_rated_movie['title'])\n\nelse:\n    print(\"Error: Unable to retrieve the top rated movie.\")\n```",
        "usage": [
            355,
            11410,
            11765
        ],
        "executed": "Top-1 rated movie title:  The Shawshank Redemption\n"
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url and parameters for searching \"The Matrix\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Matrix\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the movie_id of \"The Matrix\"\nmovie_id = data[\"results\"][0][\"id\"]\n\n# Use the movie_id to get the release dates of the movie\nrelease_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\nrelease_response = requests.get(release_url, headers=headers)\nrelease_data = release_response.json()\n\n# Extract and print the release date of \"The Matrix\"\nrelease_dates = release_data[\"results\"]\nfor result in release_dates:\n    if result[\"iso_3166_1\"] == \"US\" and result[\"release_dates\"]:\n        release_date = result[\"release_dates\"][0][\"release_date\"]\n        print(f\"The release date of 'The Matrix' is: {release_date}\")\n        break\n```",
        "usage": [
            252,
            10038,
            10290
        ],
        "executed": "The release date of 'The Matrix' is: 1999-03-24T00:00:00.000Z\n"
    },
    {
        "query": "Who is the most popular person?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Parsing the JSON response\ndata = response.json()\n\n# Finding the most popular person from the list of results\nmost_popular_person = max(data['results'], key=lambda x: x['popularity'])\n\n# Printing the most popular person's name\nprint(\"The most popular person is:\", most_popular_person['name'])\n```",
        "usage": [
            291,
            13205,
            13496
        ],
        "executed": "The most popular person is: Jason Statham\n"
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url to search for person with the name Christopher Nolan\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"  # Assuming US region for the search\n}\n\n# Make a GET request to search for the person\nresponse = requests.get(url, headers=headers, params=params)\nresults = response.json()\n\n# Get the person ID of Christopher Nolan\nperson_id = None\nif results.get(\"results\"):\n    for result in results[\"results\"]:\n        if result[\"name\"] == \"Christopher Nolan\":\n            person_id = result[\"id\"]\n            break\n\n# If person ID found, get the movie credits\nif person_id:\n    url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(url, headers=headers)\n    movie_credits = response.json()\n\n    # Get the movie IDs of movies directed by Christopher Nolan\n    movie_ids = []\n    if movie_credits.get(\"crew\"):\n        for movie in movie_credits[\"crew\"]:\n            if movie.get(\"job\") == \"Director\":\n                movie_ids.append(movie[\"id\"])\n\n    # Get the images of movies directed by Christopher Nolan\n    cover_images = []\n    for movie_id in movie_ids:\n        url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n        response = requests.get(url, headers=headers)\n        movie_details = response.json()\n        cover_image_path = movie_details.get(\"poster_path\")\n        if cover_image_path:\n            cover_images.append(f\"https://image.tmdb.org/t/p/w500/{cover_image_path}\")\n\n    # Output the list of cover images\n    print(cover_images)\n\nelse:\n    print(\"Person ID not found for Christopher Nolan\")\n```",
        "usage": [
            401,
            10520,
            10921
        ],
        "executed": "['https://image.tmdb.org/t/p/w500//gEU2QniE6E77NI6lCU6MxlNBvIx.jpg', 'https://image.tmdb.org/t/p/w500//uluMeKfYFVvfZlmHgFBXqbnHXE2.jpg', 'https://image.tmdb.org/t/p/w500//yuNs09hvpHVU1cBTCAk9zxsL2oW.jpg', 'https://image.tmdb.org/t/p/w500//oYuLEt3zVCKq57qu2F8dT7NIa6f.jpg', 'https://image.tmdb.org/t/p/w500//qJ2tW6WMUDux911r6m7haRef0WH.jpg', 'https://image.tmdb.org/t/p/w500//tRNlZbgNCNOpLpbPEz5L8G8A0JN.jpg', 'https://image.tmdb.org/t/p/w500//3bX6VVSMf0dvzk5pMT4ALG5A92d.jpg', 'https://image.tmdb.org/t/p/w500//cXDFFv6yZNW3vUHOKKUPJNnL0So.jpg', 'https://image.tmdb.org/t/p/w500//4MpN4kIEqUjW8OPtOQJXlTdHiJV.jpg', 'https://image.tmdb.org/t/p/w500//riVXh3EimGO0y5dgQxEWPRy5Itg.jpg', 'https://image.tmdb.org/t/p/w500//b4Oe15CGLL61Ped0RAS9JpqdmCt.jpg', 'https://image.tmdb.org/t/p/w500//k68nPLbIST6NP96JmTxmZijEvCA.jpg', 'https://image.tmdb.org/t/p/w500//rQ884232vYo3pbm0Ov1bCrMy6Zp.jpg', 'https://image.tmdb.org/t/p/w500//hr0L2aueqlP2BYUblTTjmtn0hw4.jpg', 'https://image.tmdb.org/t/p/w500//eqFhruWEIRwjkvqgJN48VPuR50Q.jpg', 'https://image.tmdb.org/t/p/w500//8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg', 'https://image.tmdb.org/t/p/w500//iY1FDQM6taKwO7bG6YH09nE8NSs.jpg', 'https://image.tmdb.org/t/p/w500//uL0iqPb4dtICVCCMKYem2yRPBRX.jpg']\n"
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# 1. Get the movie id for \"Titanic\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\ntitanic_movie_id = data_search_movie['results'][0]['id']\n\n# 2. Get the keywords associated with the movie \"Titanic\"\nurl_movie_keywords = f\"https://api.themoviedb.org/3/movie/{titanic_movie_id}/keywords\"\n\nresponse_movie_keywords = requests.get(url_movie_keywords, headers=headers)\ndata_movie_keywords = response_movie_keywords.json()\n\n# Extracting and printing the keywords\nkeywords = [keyword['name'] for keyword in data_movie_keywords['keywords']]\nprint(keywords)\n```",
        "usage": [
            370,
            10582,
            10952
        ],
        "executed": "['epic', 'ship', 'drowning', 'panic', 'shipwreck', 'evacuation', 'iceberg', 'titanic', 'forbidden love', 'ocean liner', 'based on true story', 'rich woman poor man', 'love', 'tragedy', 'tragic love', 'disaster', 'historical fiction', 'class differences', 'love affair', 'historical event', 'lifeboat', 'star crossed lovers', 'sinking ship', 'steerage', 'rich snob', 'disaster movie', '1910s', 'sunken ship']\n"
    },
    {
        "query": "Give me a show that is currently on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n# Define the parameters (if needed)\nparams = {\n    \"page\": 1\n}\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Get the first show that is currently on the air\n    if data[\"results\"]:\n        first_show = data[\"results\"][0]\n        print(first_show[\"name\"])\n    else:\n        print(\"No shows currently on the air.\")\nelse:\n    print(\"Failed to retrieve the show that is currently on the air.\")\n```",
        "usage": [
            338,
            10354,
            10692
        ],
        "executed": "Sturm der Liebe\n"
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/person/31/movie_credits\"\n# Clint Eastwood's person_id is 31\n\n# Set the query parameters\nparams = {\"api_key\": \"YOUR_API_KEY\"}  # Replace YOUR_API_KEY with your actual API key\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the response data\n    data = response.json()\n    \n    # Find the release date of the latest movie\n    movies = data['cast']\n    latest_movie = max(movies, key=lambda x: x['release_date'])\n    \n    print(\"Clint Eastwood's latest movie is scheduled to be released on:\", latest_movie['release_date'])\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            198,
            13216,
            13414
        ],
        "executed": "Clint Eastwood's latest movie is scheduled to be released on: 2024-03-14\n"
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Required API url\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Parameters for the API call\nparams = {\n    \"query\": \"The Dark Knight\",\n    \"page\": 1\n}\n\n# API request with the given headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extracting movie reviews\nreviews = []\nif response.status_code == 200:\n    data = response.json()\n    if \"results\" in data and len(data[\"results\"]) > 0:\n        movie_id = data[\"results\"][0][\"id\"]\n        reviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n        \n        # Making the API call to get reviews for the movie\n        reviews_response = requests.get(reviews_url, headers=headers)\n        \n        if reviews_response.status_code == 200:\n            reviews_data = reviews_response.json()\n            reviews = reviews_data[\"results\"]\n            print(reviews)  # Output the movie reviews\n        else:\n            print(\"Failed to fetch movie reviews.\")\n    else:\n        print(\"No movie found for the query.\")\nelse:\n    print(\"Failed to fetch movie data.\")\n```",
        "usage": [
            421,
            10766,
            11187
        ],
        "executed": "[{'author': 'tricksy', 'author_details': {'name': '', 'username': 'tricksy', 'avatar_path': None, 'rating': None}, 'content': 'Excellent movie. Best of the trilogy. Lovely music. Nolan is a genius. So is Heath Ledger.', 'created_at': '2015-06-09T07:21:30.464Z', 'id': '557693fac3a368569a003fab', 'updated_at': '2021-06-23T15:57:35.053Z', 'url': 'https://www.themoviedb.org/review/557693fac3a368569a003fab'}, {'author': 'talisencrw', 'author_details': {'name': '', 'username': 'talisencrw', 'avatar_path': None, 'rating': 10.0}, 'content': \"This has no competition. It is the very finest comic-book character movie ever made. Knowing the Burton, Donner and Nolan filmic adaptations of Batman and Superman exist helps me to sleep at night. They are Exhibit A of 'How to Make a Comic-Book Movie'. Nothing else has ever come even remotely close. These seven films (I include 'Superman II' because it was mostly Donner's work)--and Nolan's trilogy especially--are what I imagine a great director like Kubrick, Hitchcock or Kurosawa would have come up with, if they had ever been asked to make a Superman or Batman movie. They are the easiest for an audience to identify with because in these the scripts most approximate human emotions and the typical conundrums of the human experience--in short, are the closest, in a good way, they come to the complexities of the human condition. Peerless.\", 'created_at': '2016-05-25T23:49:13.042Z', 'id': '574639f9c3a36806b00002c1', 'updated_at': '2021-06-23T15:57:47.911Z', 'url': 'https://www.themoviedb.org/review/574639f9c3a36806b00002c1'}, {'author': 'erickprieto', 'author_details': {'name': '', 'username': 'erickprieto', 'avatar_path': '/clCvYPqM4EgLo9msno2xSPSGNJ6.jpg', 'rating': None}, 'content': 'Perhaps the best Batman movie of all times. I think that this Batman trilogy presents the well-known superhero history in an unexpected way with the capable to maintain on the edge of the chair all time.\\r\\n**Heath Ledger** present an excellent impersonification of a psychopath.\\r\\nAll support roles are magnificent.\\r\\nAnd Bruce Wayne role played by Christian Bale, shows a human being behind of the mask.', 'created_at': '2018-11-06T09:42:05.673Z', 'id': '5be161edc3a3680a00009915', 'updated_at': '2021-06-23T15:58:14.241Z', 'url': 'https://www.themoviedb.org/review/5be161edc3a3680a00009915'}, {'author': 'moubledian', 'author_details': {'name': '', 'username': 'moubledian', 'avatar_path': None, 'rating': None}, 'content': 'I used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\\r\\n\\r\\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it\\'s definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\\r\\n\\r\\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\\r\\n\\r\\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson\\'s portrayal is true unpredictability. It\\'s obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn\\'t easy. How exactly does one take him down when he\\'s woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\\r\\n\\r\\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\\r\\n\\r\\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can\\'t represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we\\'ve seen just the prelude to the Dark Knight\\'s upcoming legendary battles with the worst of Gotham City\\'s dark underside.\\r\\n\\r\\n\"The Dark Knight\" gets a solid 10 of 10 stars.\\r\\n\\r\\nI used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\\r\\n\\r\\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it\\'s definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\\r\\n\\r\\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\\r\\n\\r\\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson\\'s portrayal is true unpredictability. It\\'s obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn\\'t easy. How exactly does one take him down when he\\'s woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\\r\\n\\r\\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\\r\\n\\r\\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can\\'t represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we\\'ve seen just the prelude to the Dark Knight\\'s upcoming legendary battles with the worst of Gotham City\\'s dark underside.\\r\\n\\r\\n\"The Dark Knight\" gets a solid 10 of 10 stars.\\r\\n\\r\\nI used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\\r\\n\\r\\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it\\'s definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\\r\\n\\r\\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\\r\\n\\r\\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson\\'s portrayal is true unpredictability. It\\'s obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn\\'t easy. How exactly does one take him down when he\\'s woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\\r\\n\\r\\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\\r\\n\\r\\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can\\'t represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we\\'ve seen just the prelude to the Dark Knight\\'s upcoming legendary battles with the worst of Gotham City\\'s dark underside.\\r\\n\\r\\n\"The Dark Knight\" gets a solid 10 of 10 stars.', 'created_at': '2019-03-23T06:05:56.233Z', 'id': '5c95ccc40e0a2645f151d76d', 'updated_at': '2021-06-23T15:58:19.727Z', 'url': 'https://www.themoviedb.org/review/5c95ccc40e0a2645f151d76d'}, {'author': 'tmdb22590444', 'author_details': {'name': '', 'username': 'tmdb22590444', 'avatar_path': None, 'rating': 10.0}, 'content': 'One of the best movies of all time. Christopher Nolan has brought us the Batman trilogy that it made it feel it could happen today. Christian Bale returns as Batman, was able to perform as wonderfully as he did in Batman Begins. The one person that ultimately stole the show had to be the late Heath Ledger who played as the Joker. His performance as a psychotic clown terrorizing Gotham City was one of the best performance as a superhero villain. One of the best parts of the Joker was when he was telling his victims on how \u201che got his scars?\u201d. Another great part was when he kidnapped a police officer and he was recording it while scaring the man and also giving a warning to Batman. The supporting actor and actresses did a good job of delivering the story. I was disappointed that Katie Holmes did not return as Rachael Dawes but the actress how played as her Maggie Gyllenhaal did a really good job. One of the best parts of Christopher Nolan is that in every movie of his, the cinematography would look amazing and this movie is no exception.', 'created_at': '2019-05-03T05:43:10.850Z', 'id': '5ccbd4ee0e0a262fcd009b52', 'updated_at': '2021-06-23T15:58:21.563Z', 'url': 'https://www.themoviedb.org/review/5ccbd4ee0e0a262fcd009b52'}, {'author': 'tmdb79614358', 'author_details': {'name': '', 'username': 'tmdb79614358', 'avatar_path': None, 'rating': 10.0}, 'content': 'A Masterpiece!!! I Love how The Dark Knight shows to me the \"Dark & Gritty Tone\". Overall, Nolan give us the Game changing, best superhero film OF ALL TIME. For me it\\'s 10/10', 'created_at': '2020-11-30T14:22:09.262Z', 'id': '5fc50011420228003dc3d744', 'updated_at': '2021-06-23T15:58:48.204Z', 'url': 'https://www.themoviedb.org/review/5fc50011420228003dc3d744'}, {'author': 'EDSR', 'author_details': {'name': '', 'username': 'EDSR', 'avatar_path': None, 'rating': 3.0}, 'content': 'A sickening, borderline fascist film that is simultaneously dull and harmful. The editing represents that of an anti-pirate commercial and the politics are beyond reprehensible. The film ends with a monologue about how violent law-enforcement and brutality is what the country needs, but does not deserve. Nolan clearly did not intend for any subtext, yet that is not an excuse, if anything, that makes it worse. He includes these scenes to make the film more dark and edgy, yet there are people, from suppressed countries, who have to live through the hardships of violence from law-enforcers and dictatorship every day, and in his obliviousness, Nolan thinks that using this in a superhero film is a good excuse for self-importance. He is a war profiteer, and exploiter, and this is nothing short of disgusting.', 'created_at': '2021-09-13T10:03:55.272Z', 'id': '613f220ba6ddcb002c698ab8', 'updated_at': '2021-09-20T16:28:41.430Z', 'url': 'https://www.themoviedb.org/review/613f220ba6ddcb002c698ab8'}, {'author': 'AstroNoud', 'author_details': {'name': '', 'username': 'AstroNoud', 'avatar_path': '/6zLnrhVdSDzTjhwjKxE5xQdk2Wu.jpg', 'rating': 10.0}, 'content': 'Unforgettable crime film with good dialogue, thrilling action and chase scenes and once again a magnificent cast (most notably a terrifically terrifying Ledger) and superb score.\\r\\n\\r\\n10/10', 'created_at': '2022-02-26T21:06:50.918Z', 'id': '621a966ad7a70a00430d4c21', 'updated_at': '2022-02-26T21:06:50.918Z', 'url': 'https://www.themoviedb.org/review/621a966ad7a70a00430d4c21'}, {'author': 'CinemaSerf', 'author_details': {'name': 'CinemaSerf', 'username': 'Geronimo1967', 'avatar_path': '/1kks3YnVkpyQxzw36CObFPvhL5f.jpg', 'rating': 7.0}, 'content': 'Heath Ledger is outstanding in this follow up to the 2006 \"Batman Begins\" outing for the caped crusader. His portrayal of the malevolent \"Joker\\' is confident and highly entertaining, treading a fine line between supreme intellect and total insanity with considerable aplomb. He comes back to terrorise \"Gotham\" after \"Batman\" (Christian Bale), \"Gordon\" (Gary Oldman) - now Commissioner in charge of the police force, and newly installed District Attorney \"Dent\" (Aaron Eckhart) had made progress getting the criminals off the street. The \"Joker\", meantime, decides that the best strategy is to rob the mob - and pitching them all against each other, and with the help of the duplicitous \"Lau\" (Chin Han) manages to secure enough of their funds to initiate a campaign of lawlessness that is ruthless, manipulative and good fun to watch. Not only has the man in black his new, potent, nemesis to deal with - but he also begins to realise that his childhood sweetheart \"Rachel\" (this time Maggie Gyllenhaal) is drifting into the arms of the new DA. it is also pretty clear that they are both now proving to be an useful additional weapon in the armoury of his enemy who knows, increasingly, which buttons to press to cause maximum anxiety among those who would bring him down. It\\'s over 2\u00bd hours long, but really does fly by as the quickly paced action really does kick in right from the start. The story is dark and gritty but the pace isn\\'t ponderous and moody - Ledger exudes a sense of peril throughout the whole thing, but that has an edge to it - a sophistication that plays well against the flawed superhero who is increasingly having to identify and cope with his own demons. Sir Michael Caine pops up now and again as his shrewd butler \"Alfred\", always striving to keep his boss on the right side of sanity, and Morgan Freeman continues to feature (sparingly) and his quartermaster. On that latter front, there are loads of new gadgets that still have that element of plausibility to them (no super-powers!). On balance I think I still preferred the first film, but as sequels go - this takes, and will take, some beating. On a big screen in a packed cinema, it\\'s just a great experience.', 'created_at': '2022-07-14T06:48:17.528Z', 'id': '62cfbc31394a8704ae5c02a3', 'updated_at': '2022-07-14T06:48:17.528Z', 'url': 'https://www.themoviedb.org/review/62cfbc31394a8704ae5c02a3'}, {'author': 'The Movie Mob', 'author_details': {'name': 'The Movie Mob', 'username': 'mooney240', 'avatar_path': '/blEC280vq31MVaDcsWBXuGOsYnB.jpg', 'rating': 10.0}, 'content': \"**Overall : A cinematic marvel and once-in-a-decade masterpiece.**\\r\\n\\r\\nThis isn't simply a superhero movie or a Christopher Nolan film. The Dark Knight is a masterpiece. A perfect film. An epic scale with magnificent action pieces, oscar-winning performances, incredible writing, excellent pacing, dazzling special effects, and the list goes on and on, including the set design, costumes, and more. But, Christopher Nolan did more than make the greatest superhero movie of all time. He made one of the greatest movies of all time! All this is elevated further by Heath Ledger's once-in-a-lifetime portrayal of the Joker. Ledger was born for this role with a performance in league with Anthony Hopkins' Hannibal Lecter or Val Kilmer's Doc Holliday.\", 'created_at': '2022-08-19T23:15:37.597Z', 'id': '63001999097c49007f5fced9', 'updated_at': '2022-09-03T15:17:20.030Z', 'url': 'https://www.themoviedb.org/review/63001999097c49007f5fced9'}, {'author': 'drystyx', 'author_details': {'name': '', 'username': 'drystyx', 'avatar_path': '/hLLsAvAnVT0cFU7JuuaaItTWXv8.jpg', 'rating': 1.0}, 'content': 'Even worse than Tim Burton\\'s Batman, although obviously copying the neo Nazi ideology of \"kill all the brunettes you can in a movie\".\\r\\nThis is so predictable and so poorly written that it boggles the mind. Yet there is a fan base of what can only be described as neo Nazis. I guess those fans were poor cuckolds who got jilted by too many brunettes at a young age, and they couldn\\'t get over it.\\r\\nThat\\'s about the entire story here. Oh, the Joker kills anything he sees. Whoopee. And he\\'s invulnerable. And he\\'s a demigod who can only be beaten by another demigod.\\r\\nSo, we\\'ve got traditional mundane Greek heroes and villains here, just like most Hollywood movies.\\r\\nUnfortunately, the fans of these traditional Hollywood movies are the loudest people on Earth, and the biggest control freaks. It\\'s ridiculous to believe there are actually this big a percentage of fans for this kind of depressing Hollywood formula movie making, but if you look at Imdb\\'s top 250, you see such movies make up over half of the top 250. Are they voted up because control freaks vote more than non control freaks? Or are they voted up because control freaks use many fake user names? Probably both, which explains why over half of the top 250 are nothing more than Greek traditional idolizations of control freaks.\\r\\nOh, and Batman turns totally gay, which would be okay if he\\'d admit it, but he\\'s given the choice of saving a man from death or a hot woman from death, and he chooses to save the man. This isn\\'t any real Batman. It\\'s just another contrived story line for the Nolan Nazi merit badge. They are not even subtle. They bang you over the head with their worship of Adolf and Eva. \\r\\nGod help the world if this garbage still has a fan base fifty years from now. But it could happen. We may have drug addicts and meth heads around for even longer than that, praising the hate and feeding the hate. It would be nice if someone made a real Batman movie with a real story line involving some degree of motivation.', 'created_at': '2023-04-18T19:52:54.996Z', 'id': '643ef51668b7660524ee929b', 'updated_at': '2023-04-18T19:52:55.078Z', 'url': 'https://www.themoviedb.org/review/643ef51668b7660524ee929b'}, {'author': 'Andre Gonzales', 'author_details': {'name': 'Andre Gonzales', 'username': 'SoSmooth1982', 'avatar_path': '/ast1oGYDI7Li9daLuOV4UxGiXj.jpg', 'rating': 7.0}, 'content': 'I enjoyed watching the Dark Knight. They were at least able to keep the same batman from the the last one made too.', 'created_at': '2023-04-25T20:12:25.938Z', 'id': '64483429b76cbb0492a3bf0f', 'updated_at': '2023-04-25T20:12:26.017Z', 'url': 'https://www.themoviedb.org/review/64483429b76cbb0492a3bf0f'}, {'author': 'JN2012', 'author_details': {'name': '', 'username': 'JN2012', 'avatar_path': '/6EFUKllgSm0UzLibTMHF1piWHZd.jpg', 'rating': 8.0}, 'content': 'If I can hold my pee for a whole two and a half hours rewatching a film I\u2019ve already seen then I love it.', 'created_at': '2023-10-14T16:31:32.429Z', 'id': '652ac2641511aa013886872f', 'updated_at': '2023-10-19T02:26:50.433Z', 'url': 'https://www.themoviedb.org/review/652ac2641511aa013886872f'}]\n"
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API endpoint to search for Francis Ford Coppola's movies\nurl_director_search = \"https://api.themoviedb.org/3/search/person\"\nparams_director_search = {\n    \"query\": \"Francis Ford Coppola\",\n    \"include_adult\": False,\n}\nresponse_director_search = requests.get(url_director_search, headers=headers, params=params_director_search)\ndata_director_search = response_director_search.json()\n\n# Extract the director's ID\ndirector_id = data_director_search['results'][0]['id']\n\n# Get the movie credits for the director\nurl_movie_credits = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\n\n# Get the ID of one of the movies directed by Francis Ford Coppola\nmovie_id = data_movie_credits['cast'][0]['id']\n\n# Get a list of similar movies to the selected movie\nurl_similar_movies = f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\nparams_similar_movies = {\n    \"page\": 1\n}\nresponse_similar_movies = requests.get(url_similar_movies, headers=headers, params=params_similar_movies)\ndata_similar_movies = response_similar_movies.json()\n\n# Extract and print the list of similar movies\nsimilar_movies = data_similar_movies['results']\nfor movie in similar_movies:\n    print(movie['title'])\n```",
        "usage": [
            326,
            12992,
            13318
        ],
        "executed": "League of Exotique Dancers\nDamage Done: The Drug War Odyssey\nMarlon Brando: An Actor Named Desire\nA New Romance of Celluloid: The Miracle of Sound\nBeer Wars\nNerdcore Rising\nPrison Dogs\nMaurizio Cattelan: Be Right Back\nThe Next Step Live: The Movie\nThe Making of 'One from the Heart'\nBehind the Moomins\nA Short History of the Highrise\nBTS 2018 SUMMER PACKAGE in Saipan\nLight Years\nCheck It\nEnlighten Us: The Rise and Fall of James Arthur Ray\nTempest Storm\nSina Dino at ang Kanilang Sikreto\nWhen Elephants Were Young\nA Magical Substance Flows Into Me\n"
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the latest movie API to get the most newly created movie\nurl_latest_movie = \"https://api.themoviedb.org/3/movie/latest\"\nresponse_latest_movie = requests.get(url_latest_movie, headers=headers)\nlatest_movie_data = response_latest_movie.json()\n\n# Extract the lead actor from the response\nlead_actor = latest_movie_data['cast'][0]['name']\nprint(\"The lead actor in the latest released movie is:\", lead_actor)\n```",
        "usage": [
            271,
            11944,
            12215
        ],
        "executed": null
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Define the parameters for the request\nparams = {\n    \"page\": 1\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the image path for the first movie in the results\n    data = response.json()\n    if data['total_results'] > 0:\n        movie = data['results'][0]\n        if 'poster_path' in movie:\n            image_path = movie['poster_path']\n            image_url = f\"https://image.tmdb.org/t/p/w500{image_path}\"\n            print(image_url)\n        else:\n            print(\"No image available for this movie.\")\n    else:\n        print(\"No movies currently playing in theaters.\")\nelse:\n    print(\"Error in API request.\")\n```",
        "usage": [
            203,
            12267,
            12470
        ],
        "executed": "https://image.tmdb.org/t/p/w500/hu40Uxp9WtpL34jv3zyWLb5zEVY.jpg\n"
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get a list of the current popular movies on TMDb\nurl = \"https://api.themoviedb.org/3/movie/popular\"\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"  # Specify region as US for example\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the movie id of the most popular movie\nif data.get(\"results\"):\n    most_popular_movie_id = data[\"results\"][0][\"id\"]\n    \n    # Get the keywords of the most popular movie\n    url_keyword = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\n    response_keyword = requests.get(url_keyword, headers=headers)\n    data_keyword = response_keyword.json()\n    \n    print(\"Most popular movie keywords:\")\n    if data_keyword.get(\"keywords\"):\n        keywords = [keyword[\"name\"] for keyword in data_keyword[\"keywords\"]]\n        print(keywords)\n    else:\n        print(\"Keywords not found.\")\nelse:\n    print(\"No results found for popular movies.\")\n```",
        "usage": [
            405,
            12949,
            13354
        ],
        "executed": "Most popular movie keywords:\n['ocean', 'bodyguard', 'rescue mission', 'childhood trauma', 'shark', 'airplane trip', 'sharks', 'air crash', 'survivor']\n"
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get the list of current popular movies\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n\n# Getting the list of popular movies\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Getting the movie_id of the most popular movie\nmost_popular_movie_id = data['results'][0]['id']\n\n# API url to get keywords of a movie\nurl_keywords = f\"https://api.themoviedb.org/3/movie/{most_popular_movie_id}/keywords\"\n\n# Calling the API to get keywords of the most popular movie\nresponse_keywords = requests.get(url_keywords, headers=headers)\nkeywords_data = response_keywords.json()\n\n# Extracting the keywords of the most popular movie\nkeywords = [keyword['name'] for keyword in keywords_data['keywords']]\nprint(keywords)\n```",
        "usage": [
            354,
            11025,
            11379
        ],
        "executed": "['ocean', 'bodyguard', 'rescue mission', 'childhood trauma', 'shark', 'airplane trip', 'sharks', 'air crash', 'survivor']\n"
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the movie ID of Titanic\ntitanic_id = data['results'][0]['id']\n\n# Get the credits for the movie \"Titanic\"\nurl_credits = f\"https://api.themoviedb.org/3/movie/{titanic_id}/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Extract the cast information\ncast_info = data_credits['cast']\n\n# List of actors who starred in the movie Titanic\nactors = [actor['name'] for actor in cast_info]\nprint(actors)\n```",
        "usage": [
            365,
            11561,
            11926
        ],
        "executed": "['Leonardo DiCaprio', 'Kate Winslet', 'Billy Zane', 'Kathy Bates', 'Frances Fisher', 'Gloria Stuart', 'Victor Garber', 'Bill Paxton', 'Bernard Hill', 'David Warner', 'Jonathan Hyde', 'Lewis Abernathy', 'Suzy Amis', 'Nicholas Cascone', 'Danny Nucci', 'Jason Barry', 'Lew Palter', 'Eric Braeden', 'Ewan Stewart', 'Bernard Fox', 'Ioan Gruffudd', 'Jonny Phillips', 'Edward Fletcher', 'Scott G. Anderson', 'Martin East', 'Gregory Cooke', 'Alexandrea Owens', 'Seth Adkins', 'Michael Ensign', 'Anatoly M. Sagalevitch', 'Martin Hub', 'Mark Lindsay Chapman', 'Richard Graham', 'Paul Brightwell', 'Craig Kelly', 'Ron Donachie', 'Charlotte Chatton', 'Fannie Brett', 'Jenette Goldstein', 'Camilla Overbye Roos', 'Linda Kerns', 'Amy Gaipa', 'Martin Jarvis', 'Rosalind Ayres', 'Rochelle Rose', 'Jonathan Evans-Jones', 'Rocky Taylor', 'Liam Tuohy', 'Simon Crane', 'James Lancaster', 'Elsa Raven', 'Reece P. Thompson III', 'Laramie Landis', 'Mark Rafael Truitt', 'John Walcutt', 'Terry Forrestal', 'Derek Lea', 'Richard Ashton', 'Sean Nepita', 'Brendan Connolly', 'David Cronnelly', 'Garth Wilton', 'Richard Fox', 'Nick Meaney', 'Kevin Owers', 'Mark Capri', 'Marc Cass', 'Paul Herbert', 'Emmett James', 'Chris Byrne', 'Oliver Page', 'James Garrett', 'Erik Holland', 'Jari Kinnunen', 'Anders Falk', 'Barry Dennen', 'Vern Urich', 'Rebecca Klingler', \"Tricia O'Neil\", 'Kathleen S. Dunn', 'Romeo Francis', 'Mandana Marino', 'Van Ling', 'Bj\u00f8rn Olsen', 'Dan Pettersson', 'Shay Duffin', 'Greg Ellis', 'Diana Morgan', 'Kris Andersson', 'Bobbie Bates', 'Aaron James Cash', 'Anne Fletcher', 'Edmond Alan Forsyth', 'Andie Hicks', 'Scott Hislop', 'Stan Mazin', 'Lisa Ratzin', 'Julene Renee', 'Brian Walsh', 'Alexandra Boyd', 'James Cameron', 'Mike Butters', 'Bruno Campolo', 'Kevin De La Noy', 'Tony Kenny', 'Sean Lawlor', 'Don Lynch', 'Johnny Martin', 'Ryan McClurkin', 'Meghan McLeod', \"Mike O'Neal\", 'Phil Parlapiano', 'Steven Quale', 'R. Gern Trowbridge', 'Olivia Rosewood', 'John Slade', 'Brian McDermott', 'Bret Aaron Knower']\n"
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url to get the details of a specific company\nurl = \"https://api.themoviedb.org/3/company/4\"  # 4 is the company_id for Paramount Pictures\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Parse the JSON response\n    company_details = response.json()\n    \n    # Check if the logo_path exists in the response\n    if \"logo_path\" in company_details:\n        logo_path = company_details[\"logo_path\"]\n        print(f\"Logo path for Paramount Pictures: {logo_path}\")\n    else:\n        print(\"Logo path not found for Paramount Pictures\")\nelse:\n    print(\"Failed to retrieve company details for Paramount Pictures\")\n```",
        "usage": [
            351,
            10752,
            11103
        ],
        "executed": "Logo path for Paramount Pictures: /gz66EfNoYPqHTYI4q9UEN4CbHRc.png\n"
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/company\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query for searching \"Universal Pictures\" company\nparams = {\n    \"query\": \"Universal Pictures\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the company id of Universal Pictures\n    company_id = response.json()['results'][0]['id']\n\n    # Get the details of the company by id\n    company_details_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    company_response = requests.get(company_details_url, headers=headers)\n\n    # Check if the request for company details was successful\n    if company_response.status_code == 200:\n        # Extract the headquarters location\n        headquarters = company_response.json()['headquarters']\n        print(\"Universal Pictures was founded in:\", headquarters)\n    else:\n        print(\"Failed to get company details\")\nelse:\n    print(\"Failed to search for the company Universal Pictures\")\n```",
        "usage": [
            406,
            12001,
            12407
        ],
        "executed": "Universal Pictures was founded in: Universal City, California\n"
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with provided Bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\nresponse = requests.get(search_url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the release date of the first movie (assuming the search result contains the movie \"Titanic\")\n    movie_data = response.json()[\"results\"][0]\n    release_date = movie_data[\"release_date\"]\n    print(\"The movie 'Titanic' was released on:\", release_date)\nelse:\n    print(\"Failed to retrieve movie information\")\n```",
        "usage": [
            338,
            12757,
            13095
        ],
        "executed": "The movie 'Titanic' was released on: 1997-11-18\n"
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Provided Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the Star Wars collection\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\nstar_wars_collection = response.json()\n\n# Get the first movie in the Star Wars collection\nif 'results' in star_wars_collection and len(star_wars_collection['results']) > 0:\n    first_movie_id = star_wars_collection['results'][0]['id']\n    url = f\"https://api.themoviedb.org/3/movie/{first_movie_id}/credits\"\n    response = requests.get(url, headers=headers)\n    credits = response.json()\n    \n    # Extract the cast from the credits\n    if 'cast' in credits:\n        cast = credits['cast']\n        actors = []\n        for actor in cast:\n            actors.append(actor['name'])\n        \n        print(\"Actors who starred in the first movie of Star Wars collection:\")\n        for actor in actors:\n            print(actor)\nelse:\n    print(\"No results found for Star Wars collection.\")\n```",
        "usage": [
            415,
            13553,
            13968
        ],
        "executed": ""
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url with the required parameters\nurl = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Harry Potter\"\n}\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the movie cover image path from the response\nif response.status_code == 200:\n    results = response.json()[\"results\"]\n    if results:\n        movie_cover_path = results[0][\"poster_path\"]\n        print(f\"Movie cover image path: {movie_cover_path}\")\n    else:\n        print(\"No results found for the query.\")\nelse:\n    print(\"Error in fetching data from the API.\")\n```",
        "usage": [
            316,
            13809,
            14125
        ],
        "executed": "Movie cover image path: /eVPs2Y0LyvTLZn6AP5Z6O2rtiGB.jpg\n"
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/collection/131294/movies\"\n\n# Define the parameters\nparams = {\n    \"api_key\": \"0dbab590c7eaca07ebe625974a37ad92\"  # API key for authentication\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Get the results in JSON format\n    data = response.json()\n    \n    # Extract keywords for the first movie in the collection\n    if data[\"results\"]:\n        keywords = data[\"results\"][0][\"keywords\"]\n        keyword_names = [keyword[\"name\"] for keyword in keywords]\n        print(keyword_names)\n    else:\n        print(\"No keywords found for the collection\")\nelse:\n    print(\"Error: Could not retrieve data from the API\")\n```",
        "usage": [
            374,
            14641,
            15015
        ],
        "executed": "Error: Could not retrieve data from the API\n"
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the headers with the authentication token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameter to search for The Hobbit collection\nparams = {\n    \"query\": \"The Hobbit\"\n}\n\n# Make a GET request to search for the collection\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the collection id of The Hobbit\n    collection_id = response.json()[\"results\"][0][\"id\"]\n    \n    # Set the API url to get the collection details by id\n    collection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    \n    # Make a GET request to get the collection details\n    collection_response = requests.get(collection_url, headers=headers)\n    \n    # Check if the request was successful\n    if collection_response.status_code == 200:\n        # Extract the release dates for each movie in the collection\n        release_dates = []\n        for movie in collection_response.json()[\"parts\"]:\n            # Check if release date is available for the movie\n            if \"release_date\" in movie:\n                release_dates.append({\"title\": movie[\"title\"], \"release_date\": movie[\"release_date\"]})\n        \n        # Print the release dates for the movies of The Hobbit collection\n        for info in release_dates:\n            print(f\"{info['title']}: {info['release_date']}\")\n    else:\n        print(\"Failed to get collection details\")\nelse:\n    print(\"Failed to search for the collection\")\n```",
        "usage": [
            512,
            11834,
            12346
        ],
        "executed": "The Hobbit: An Unexpected Journey: 2012-12-12\nThe Hobbit: The Desolation of Smaug: 2013-12-11\nThe Hobbit: The Battle of the Five Armies: 2014-12-10\n"
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the query parameters\nparams = {\n    \"query\": \"The Fast and the Furious\",\n    \"page\": 1\n}\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Print the response\nprint(response.json())\n```",
        "usage": [
            263,
            13236,
            13499
        ],
        "executed": "{'page': 1, 'results': [{'adult': False, 'backdrop_path': '/56h4DCt0ogIRI7B71xD5iA5hES1.jpg', 'id': 9485, 'name': 'The Fast and the Furious Collection', 'original_language': 'en', 'original_name': 'The Fast and the Furious Collection', 'overview': 'An action film series centered on illegal street racing and heists.', 'poster_path': '/rKKSOVv6iU3nULrKQmd9uEx9gez.jpg'}], 'total_pages': 1, 'total_results': 1}\n"
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API URL to search for collections\nsearch_collection_url = \"https://api.themoviedb.org/3/search/collection\"\n\n# Parameters for searching for the collection \"The Fast and the Furious\"\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\n\n# Make a GET request to search for the collection\nresponse = requests.get(search_collection_url, headers=headers, params=params)\n\n# Extract the collection id from the search results\ncollection_id = response.json()[\"results\"][0][\"id\"]\n\n# API URL to get reviews for a movie from the collection\nreviews_url = f\"https://api.themoviedb.org/3/movie/{collection_id}/reviews\"\n\n# Make a GET request to get the reviews\nresponse = requests.get(reviews_url, headers=headers)\n\n# Print the reviews for the movie from the collection \"The Fast and the Furious\"\nprint(response.json()[\"results\"])\n```",
        "usage": [
            190,
            11530,
            11720
        ],
        "executed": null
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/tv"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to search for the collection \"Lord of the Rings\"\nsearch_collection_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\"query\": \"Lord of the Rings\", \"page\": 1}\n\nresponse = requests.get(search_collection_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the collection id of \"Lord of the Rings\"\ncollection_id = data[\"results\"][0][\"id\"]\n\n# API url to get the details of the collection by id\ncollection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse = requests.get(collection_details_url, headers=headers)\ndata = response.json()\n\n# Get the first movie of the collection and its release date\nfirst_movie = data[\"parts\"][0]\nrelease_date = first_movie[\"release_date\"]\n\nprint(\"The first movie of the collection Lord of the Rings was released on:\", release_date)\n```",
        "usage": [
            375,
            12925,
            13300
        ],
        "executed": "The first movie of the collection Lord of the Rings was released on: 2002-04-01\n"
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Get the TV show id for House of Cards\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\ntv_search_params = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\ntv_search_response = requests.get(tv_search_url, headers=headers, params=tv_search_params)\ntv_show_id = tv_search_response.json()['results'][0]['id']\n\n# Step 2: Get the credits for the first season of House of Cards\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/1/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\n\n# Step 3: Extract the directors from the credits data\ndirectors = [crew['name'] for crew in credits_data['crew'] if crew['job'] == 'Director']\n\nprint(directors)\n```",
        "usage": [
            374,
            13755,
            14129
        ],
        "executed": "[]\n"
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the query parameter to search for TV shows similar to \"House of Cards\"\nparams_search_tv = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False   # Do not include adult content\n}\n\n# Make the API request to search for TV shows similar to \"House of Cards\"\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\n\n# Check if the request was successful\nif response_search_tv.status_code == 200:\n    # Parse the JSON response\n    data_search_tv = response_search_tv.json()\n    \n    # Extract the TV shows similar to \"House of Cards\"\n    similar_tv_shows = data_search_tv.get(\"results\", [])\n    \n    # Output the list of TV shows similar to \"House of Cards\"\n    print(similar_tv_shows)\nelse:\n    # Output an error message if the request was not successful\n    print(\"Error fetching similar TV shows.\")\n```",
        "usage": [
            230,
            11122,
            11352
        ],
        "executed": "[{'adult': False, 'backdrop_path': '/ex4kvQb0Ski5KL2fsnKQU2hV3oo.jpg', 'genre_ids': [18], 'id': 1425, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'House of Cards', 'overview': 'Set in present day Washington, D.C., House of Cards is the story of Frank Underwood, a ruthless and cunning politician, and his wife Claire who will stop at nothing to conquer everything. This wicked political drama penetrates the shadowy world of greed, sex and corruption in modern D.C.', 'popularity': 141.077, 'poster_path': '/hKWxWjFwnMvkWQawbhvC0Y7ygQ8.jpg', 'first_air_date': '2013-02-01', 'name': 'House of Cards', 'vote_average': 8.0, 'vote_count': 2528}, {'adult': False, 'backdrop_path': '/1gsHQidvviNE8QKOOfPAZndWAJw.jpg', 'genre_ids': [10768, 35, 18], 'id': 21720, 'origin_country': ['GB'], 'original_language': 'en', 'original_name': 'House of Cards', 'overview': 'Frustrated at a new moderate Conservative government and deprived of a promotion to a senior position, chief whip Francis Urquhart prepares a meticulous plot to bring down the Prime Minister then to take his place.', 'popularity': 16.476, 'poster_path': '/evQlyXJtIjI9QiZUu180RsyWVCV.jpg', 'first_air_date': '1990-11-18', 'name': 'House of Cards', 'vote_average': 8.2, 'vote_count': 127}, {'adult': False, 'backdrop_path': '/CENwWZighra483aTJMAixGUtm0.jpg', 'genre_ids': [18, 35, 10768], 'id': 77041, 'origin_country': ['GB'], 'original_language': 'en', 'original_name': 'The Final Cut', 'overview': 'Urquhart aims to secure his legacy on the international stage, but faces threats both from abroad and closer to home.', 'popularity': 12.559, 'poster_path': '/7lQ6roAFARdKe9qGPF0KigYPASZ.jpg', 'first_air_date': '1995-11-05', 'name': 'The Final Cut', 'vote_average': 7.727, 'vote_count': 34}, {'adult': False, 'backdrop_path': '/csjHEM3cc852KLm18eKRdl1qaQj.jpg', 'genre_ids': [18, 35, 10768], 'id': 13868, 'origin_country': ['GB'], 'original_language': 'en', 'original_name': 'To Play the King', 'overview': \"Francis Urquhart's survival at the top is threatened by the new king's populist agenda.\", 'popularity': 11.118, 'poster_path': '/uyTPnSlh7NKic8MgYn2GzD7s0La.jpg', 'first_air_date': '1993-11-21', 'name': 'To Play the King', 'vote_average': 8.3, 'vote_count': 46}]\n"
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url to get the list of popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\n    \"page\": 1\n}\n\n# HTTP headers with Bearer token authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    if data['results']:\n        # Extracting the name and first air date of the most popular TV show\n        most_popular_show = data['results'][0]\n        show_name = most_popular_show['name']\n        first_air_date = most_popular_show['first_air_date']\n        print(f\"The most popular TV show currently on air is '{show_name}' and it first aired on {first_air_date}.\")\n    else:\n        print(\"No TV shows currently on air.\")\nelse:\n    print(\"Error in API request.\")\n```",
        "usage": [
            370,
            13027,
            13397
        ],
        "executed": "The most popular TV show currently on air is 'Sturm der Liebe' and it first aired on 2005-09-26.\n"
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the provided Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the person who directed Django Unchained\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\nparams_search_person = {\n    \"query\": \"Quentin Tarantino\"\n}\nresponse = requests.get(url_search_person, headers=headers, params=params_search_person)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the movie credits for the person\nurl_person_movie_credits = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(url_person_movie_credits, headers=headers)\nmovie_credits = response.json()[\"cast\"]\n\n# Get a few more works directed by the director\ndirector_works = []\nfor movie in movie_credits:\n    if \"director\" in movie[\"job\"].lower():  # Check if the person directed the movie\n        director_works.append(movie[\"title\"])\n\nprint(director_works)\n```",
        "usage": [
            378,
            11615,
            11993
        ],
        "executed": null
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url for getting the list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Specify the page to query\nparams = {\"page\": 1}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    results = response.json()\n    \n    # Extract the first TV show id from the results\n    tv_show_id = results['results'][0]['id']\n\n    # API url for getting the credits (cast and crew) for a TV show\n    credits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n\n    # Make the GET request to the credits API\n    credits_response = requests.get(credits_url, headers=headers)\n\n    # Check if the request was successful\n    if credits_response.status_code == 200:\n        # Parse the JSON response\n        credits_results = credits_response.json()\n\n        # Extract the cast list\n        cast = credits_results['cast']\n        \n        # Print the cast list\n        for actor in cast:\n            print(actor['name'])\n\n    else:\n        print(\"Error in retrieving credits data\")\nelse:\n    print(\"Error in retrieving TV shows data\")\n```",
        "usage": [
            294,
            12477,
            12771
        ],
        "executed": "Dirk Galuba\nSepp Schauer\nAntje Hagen\nErich Altenkopf\nDieter Bach\nSoluna-Delta Kokol\nRobin Schick\nMartin Walde\nSven Waasner\nTanja Lan\u00e4us\nSabine Werner\nDaniela Kiefer\nTimo Ben Sch\u00f6fer\nChristopher Jan Busse\nLaura Osswald\nYeliz Simsek\nTim Borys\nDionne Wudu\nLukas Leibe\nIsabell Stern\nMilan Marcus\n"
    },
    {
        "query": "I need a review for Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Breaking Bad\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Breaking Bad\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ntv_show_data = response.json()\n\n# Get the TV show id for Breaking Bad\ntv_id = tv_show_data['results'][0]['id']\n\n# Get the reviews for Breaking Bad\nreviews_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/reviews\"\nresponse = requests.get(reviews_url, headers=headers)\nreviews_data = response.json()\n\n# Print the reviews for Breaking Bad\nprint(reviews_data)\n```",
        "usage": [
            326,
            12611,
            12937
        ],
        "executed": "{'id': 1396, 'page': 1, 'results': [{'author': 'slyone10001', 'author_details': {'name': '', 'username': 'slyone10001', 'avatar_path': None, 'rating': 10.0}, 'content': 'Wow....where to start. Not really into \"DRUG\" inspired shows. But this one had me from the start. The only bad about this show was the split seasons when it was a first run show. But now you can go right through to the next episode with out having to wait.....MUST WATCH ! !', 'created_at': '2018-04-10T15:44:38.134Z', 'id': '5accdbe6c3a3687e2702d058', 'updated_at': '2021-06-23T15:58:07.601Z', 'url': 'https://www.themoviedb.org/review/5accdbe6c3a3687e2702d058'}, {'author': 'Dean', 'author_details': {'name': 'Dean', 'username': 'Ditendra', 'avatar_path': None, 'rating': 10.0}, 'content': \"I'll be honest, at first when I started this TV show and finished first season, I didn't like it. It felt boring for me and I stopped watching, but after few years, I decided to give it a chance and continue. I'm so happy because of my decision, because after finishing this TV show, I can definitely tell that it was a masterpiece! 5th season is a bomb and 14th season was shocking! It left me with sad, euphoric shock feeling. It was mind blowing! I'm not gonna spoil you what happened, but if you started first season and you don't like it, for goodness sake, give it a chance and continue watching. I promise you won't regret.\\r\\n\\r\\nCharacters are very well developed. Acting is superb! Plot is very interesting. Whole TV show is tense, especially the last season. The only downside I can think about is camera. Sometimes it's shaking on some certain scenes. I don't know why they didn't pay attention to this, but this is nothing, just a very minor minus. Everything else is great about this TV show.\", 'created_at': '2019-09-30T09:02:26.890Z', 'id': '5d91c4a2172d7f001759ca0a', 'updated_at': '2021-06-23T15:58:27.439Z', 'url': 'https://www.themoviedb.org/review/5d91c4a2172d7f001759ca0a'}, {'author': 'l33t5p34k3r', 'author_details': {'name': '', 'username': 'l33t5p34k3r', 'avatar_path': None, 'rating': 9.0}, 'content': 'Started out really good, but dropped quality after the second to last season', 'created_at': '2020-06-10T07:29:33.686Z', 'id': '5ee08bdd90dde0001fa67192', 'updated_at': '2021-06-23T15:58:39.055Z', 'url': 'https://www.themoviedb.org/review/5ee08bdd90dde0001fa67192'}, {'author': 'drystyx', 'author_details': {'name': '', 'username': 'drystyx', 'avatar_path': '/hLLsAvAnVT0cFU7JuuaaItTWXv8.jpg', 'rating': 3.0}, 'content': 'This is the kind of TV show for the \"formula lovers\" who want to feel superior.\\r\\nThere is an air of the superiority complex of the \"drug knowledgeable\" crowd in this series about a \"smart guy\" breaking into the drug trade.\\r\\nHis \"talent\" makes him the important cog in the machine. He can call his shots.\\r\\nStill, the ruffians give him a rough way to go, because criminals really are stupid.\\r\\nOnce they learn that they are nothing without him, he gets his way.\\r\\nMuch like a Western town blacksmith, he\\'s the needed ingredient.\\r\\nHowever, things get very formula early on in the show. And there\\'s always this sense of a superiority complex from the sort of people who push shows like this onto their friends and acquaintances. The directing writing team tap into the control freak crowd very well.\\r\\nBut it is a dull show about dull people.', 'created_at': '2023-04-02T17:02:14.125Z', 'id': '6429b5168de0ae00978d836a', 'updated_at': '2023-04-03T16:45:23.650Z', 'url': 'https://www.themoviedb.org/review/6429b5168de0ae00978d836a'}], 'total_pages': 1, 'total_results': 4}\n"
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url for getting the TV show id of The Last Of Us\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"The Last Of Us\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# If The Last Of Us TV show is found, get recommendations\nif data_search_tv[\"total_results\"] > 0:\n    tv_id = data_search_tv[\"results\"][0][\"id\"]\n    \n    # API url for getting recommendations for The Last Of Us\n    url_recommendations = f\"https://api.themoviedb.org/3/tv/{tv_id}/recommendations\"\n    params_recommendations = {\n        \"page\": 1\n    }\n    response_recommendations = requests.get(url_recommendations, headers=headers, params=params_recommendations)\n    data_recommendations = response_recommendations.json()\n    \n    # Output the recommendations\n    recommendations = data_recommendations[\"results\"]\n    for recommendation in recommendations:\n        print(recommendation[\"name\"])\nelse:\n    print(\"The Last Of Us TV show not found\")\n```  ",
        "usage": [
            426,
            13966,
            14392
        ],
        "executed": "The Mandalorian\nWednesday\nGame of Thrones\nChernobyl\nBreaking Bad\nStranger Things\nTulsa King\nHouse of the Dragon\nThe Walking Dead\nYou\nThe Boys\nRick and Morty\nSecret Invasion\nThe Night Agent\nBEEF\nThe Glory\nSeverance\nThe Lord of the Rings: The Rings of Power\nFrom\nVelma\nThe Queen's Gambit\n"
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/105226/recommendations\"\n\n# Define the parameters for the API\nparams = {\n    \"page\": 1\n}\n\n# Define the headers including the required Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract and print the recommendations\n    recommendations = response.json()['results']\n    for recommendation in recommendations:\n        print(recommendation['name'])\nelse:\n    print(\"Error occurred while fetching recommendations\")\n```",
        "usage": [
            311,
            12361,
            12672
        ],
        "executed": "Elite Short Stories: Guzm\u00e1n Caye Rebe\nManhattan\nElite Short Stories: Omar Ander Alexis\nScooby's All-Star Laff-A-Lympics\nFuture\nPrimer Amor, a 1000 x Hora\nConcrete Revolutio\nCriminal: Spain\nKourtney & Khlo\u00e9 Take the Hamptons\nFree Rein\nThe King's Woman\nTouching Evil\nTe Doy La Vida\nDr. Horrible's Sing-Along Blog\nAre you OK\nGr\u0113c\u012bg\u0101 Amerika\nThe Real Housewives of Beverly Hills\nNobody Knows\nQu\u00e9 Bonito Amor\nEdificio Corona\n"
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show 'Friends'\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    'query': 'Friends'\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show id for 'Friends'\ntv_id_friends = data_search_tv['results'][0]['id']\n\n# Get the credits for season 3, episode 24 of 'Friends'\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_id_friends}/season/3/episode/24/credits\"\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Extract the guest stars from the credits\nguest_stars = data_credits['guest_stars']\n\n# Extract the names of the guest stars\nguest_stars_names = [star['name'] for star in guest_stars]\n\n# Print the guest stars for season 3, episode 24 of 'Friends'\nguest_stars_names\n```",
        "usage": [
            414,
            11312,
            11726
        ],
        "executed": ""
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API to get a list of the current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Getting the id of the most popular TV show\nmost_popular_tv_show_id = data['results'][0]['id']\n\n# API to get the credits (cast and crew) that have been added to a TV show\ncredits_url = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_show_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits_data = credits_response.json()\n\n# Getting the name of the lead actor\nlead_actor = credits_data['cast'][0]['name']\n\nlead_actor\n```",
        "usage": [
            355,
            11387,
            11742
        ],
        "executed": ""
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/tv/top_rated\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the keyword of the top-1 rated TV show\n    if 'results' in data and len(data['results']) > 0:\n        top_rated_tvshow = data['results'][0]\n        tvshow_id = top_rated_tvshow['id']\n        \n        # Create the API url for getting keywords of the top-1 rated TV show\n        keywords_url = f\"https://api.themoviedb.org/3/tv/{tvshow_id}/keywords\"\n        \n        # Make the request to get keywords\n        keywords_response = requests.get(keywords_url, headers=headers)\n        \n        # Parse the keywords response\n        if keywords_response.status_code == 200:\n            keywords_data = keywords_response.json()\n            if 'results' in keywords_data and len(keywords_data['results']) > 0:\n                keyword = keywords_data['results'][0]['name']\n                print(\"Keyword of the top-1 rated TV show:\", keyword)\n            else:\n                print(\"No keywords found for the top-1 rated TV show\")\n        else:\n            print(\"Failed to get keywords for the top-1 rated TV show\")\n    else:\n        print(\"No top rated TV shows found\")\nelse:\n    print(\"Failed to retrieve top rated TV shows\")\n```",
        "usage": [
            357,
            12468,
            12825
        ],
        "executed": "Keyword of the top-1 rated TV show: hotel\n"
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"2 Broke Girls\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"2 Broke Girls\"\n}\n\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the poster of the first search result\nif data_search_tv[\"total_results\"] > 0:\n    tv_id = data_search_tv[\"results\"][0][\"id\"]\n    \n    # Get TV show details to retrieve the poster path\n    url_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    \n    response_tv_details = requests.get(url_tv_details, headers=headers)\n    data_tv_details = response_tv_details.json()\n    \n    poster_path = data_tv_details[\"poster_path\"]\n    \n    print(f\"Poster of '2 Broke Girls': https://image.tmdb.org/t/p/original{poster_path}\")\nelse:\n    print(\"No results found for '2 Broke Girls'\")\n```",
        "usage": [
            400,
            11693,
            12093
        ],
        "executed": "Poster of '2 Broke Girls': https://image.tmdb.org/t/p/original/qCa4ANpF1QOioqRUNHgk2B3KFMZ.jpg\n"
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the TV show details by id\ntv_id = 25468  # 2 Broke Girls ID\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\nparams = {}\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    if \"number_of_seasons\" in data:\n        total_seasons = data[\"number_of_seasons\"]\n        total_episodes = 0\n        # Loop through each season to get the number of episodes\n        for season_num in range(1, total_seasons + 1):\n            season_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_num}\"\n            season_response = requests.get(season_url, headers=headers, params=params)\n            if season_response.status_code == 200:\n                season_data = season_response.json()\n                if \"episodes\" in season_data:\n                    total_episodes += len(season_data[\"episodes\"])\n        \n        print(f\"2 Broke Girls has a total of {total_episodes} episodes.\")\n    else:\n        print(\"Number of seasons not found in the data.\")\nelse:\n    print(\"Error fetching data from API.\")\n```",
        "usage": [
            439,
            13319,
            13758
        ],
        "executed": "Error fetching data from API.\n"
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API key and headers\napi_key = \"0dbab590c7eaca07ebel2625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show \"The Big Bang Theory\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Big Bang Theory\",\n    \"page\": 1\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\nif search_results[\"total_results\"] > 0:\n    tv_id = search_results[\"results\"][0][\"id\"]\n    \n    # Get the details of the TV show using the ID\n    tv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    tv_details_params = {}\n    tv_details_response = requests.get(tv_details_url, headers=headers, params=tv_details_params)\n    tv_details = tv_details_response.json()\n    \n    # Get the production companies details\n    production_company_id = tv_details[\"production_companies\"][0][\"id\"]\n    company_details_url = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\n    company_details_params = {}\n    company_details_response = requests.get(company_details_url, headers=headers, params=company_details_params)\n    company_details = company_details_response.json()\n    \n    # Printing the company's founding date\n    print(f\"The company that produced The Big Bang Theory was founded in: {company_details.get('origin_country')}\")\nelse:\n    print(\"No results found for The Big Bang Theory\")\n```",
        "usage": [
            355,
            12128,
            12483
        ],
        "executed": null
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show with the query \"The Big Bang Theory\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"The Big Bang Theory\"\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_search_tv = response_search_tv.json()\n\n# Get the first TV show id from the search results\ntv_id = data_search_tv[\"results\"][0][\"id\"]\n\n# Get the primary TV show details by id\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\nresponse_tv_details = requests.get(url_tv_details, headers=headers)\ndata_tv_details = response_tv_details.json()\n\n# Extract the first air date of the TV show\nfirst_air_date = data_tv_details[\"first_air_date\"]\nprint(\"The TV show 'The Big Bang Theory' was created on:\", first_air_date)\n```",
        "usage": [
            378,
            12529,
            12907
        ],
        "executed": "The TV show 'The Big Bang Theory' was created on: 2007-09-24\n"
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Parameters\nparams = {\n    \"page\": 1\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the keyword of the most popular TV show\nif response.status_code == 200:\n    tv_shows = response.json()\n    if tv_shows.get(\"results\"):\n        most_popular_show = tv_shows[\"results\"][0]\n        show_id = most_popular_show.get(\"id\")\n\n        # Call the API to get keywords of the most popular TV show\n        keyword_url = f\"https://api.themoviedb.org/3/tv/{show_id}/keywords\"\n        \n        keyword_response = requests.get(keyword_url, headers=headers)\n\n        if keyword_response.status_code == 200:\n            keyword_data = keyword_response.json()\n            # Get the first keyword\n            keyword = keyword_data[\"results\"][0][\"name\"]\n            print(f\"The keyword of the most popular TV show is: {keyword}\")\n\n        else:\n            print(f\"Failed to get keywords for TV show. Status code: {keyword_response.status_code}\")\n\n    else:\n        print(\"No TV shows found in the response\")\nelse:\n    print(f\"Failed to get popular TV shows. Status code: {response.status_code}\")\n```",
        "usage": [
            460,
            12088,
            12548
        ],
        "executed": "The keyword of the most popular TV show is: germany\n"
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the TV show ID for Westworld\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    'query': 'Westworld'\n}\nresponse = requests.get(url_search_tv, headers=headers, params=params)\ntv_show_id = response.json()['results'][0]['id']\n\n# Get the details of the third episode of the second season of Westworld\nurl_episode = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/2/episode/3\"\nresponse = requests.get(url_episode, headers=headers)\nepisode_details = response.json()\n\n# Extract the overview of the third episode of the second season of Westworld\nepisode_overview = episode_details['overview']\nprint(episode_overview)\n```",
        "usage": [
            341,
            10542,
            10883
        ],
        "executed": "There is beauty in who we are. Shouldn't we, too, try to survive? Truth is, we don't all deserve to make it. Dolores makes her next move as Charlotte scrambles to protect Delos' most prized asset. Bernard gets closer to the truth and Maeve continues the search for her daughter.\n"
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API endpoint\nurl = \"https://api.themoviedb.org/3/tv/82/season/2\"\n# Specify the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n# Send the GET request\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    result = response.json()\n    # Extract the air date of the second season of Game of Thrones\n    air_date = result.get(\"air_date\")\n    print(\"The air date of the second season of Game of Thrones is:\", air_date)\nelse:\n    print(\"Error: Failed to retrieve data\")\n```",
        "usage": [
            309,
            11586,
            11895
        ],
        "executed": "The air date of the second season of Game of Thrones is: 1994-09-10\n"
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API URL to get the TV show details\nurl = \"https://api.themoviedb.org/3/tv/4613/season/1/episode/3\"\n# Define the API parameters\nparams = {\n    \"api_key\": \"YOUR_API_KEY\",  # Add your API key here\n}\n\n# Make the API request\nresponse = requests.get(url, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the JSON response\n    data = response.json()\n    \n    # Check if the response contains the poster path\n    if \"still_path\" in data:\n        poster_path = data[\"still_path\"]\n        print(poster_path)\n    else:\n        print(\"Poster not found for the third episode of Band of Brothers\")\nelse:\n    print(\"Error: Unable to fetch data from the API\")\n```",
        "usage": [
            188,
            11085,
            11273
        ],
        "executed": "Error: Unable to fetch data from the API\n"
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for searching TV shows\nparams_search_tv = {\n    \"query\": \"Game of Thrones\",\n    \"include_adult\": False\n}\n\n# Making the API request to search for Game of Thrones TV show\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\n\n# Checking if the request was successful\nif response_search_tv.status_code == 200:\n    data_search_tv = response_search_tv.json()\n    \n    # Getting the TV show ID for Game of Thrones to use in the next API request\n    tv_id = data_search_tv[\"results\"][0][\"id\"]\n    \n    # API url for getting TV show details by id\n    url_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n    \n    # Making the API request to get TV show details for Game of Thrones\n    response_tv_details = requests.get(url_tv_details, headers=headers)\n    \n    # Checking if the request was successful\n    if response_tv_details.status_code == 200:\n        data_tv_details = response_tv_details.json()\n        \n        # Getting the list of networks that produced Game of Thrones\n        networks = data_tv_details[\"networks\"]\n        \n        # Checking if there are any networks and getting the logo for the first network\n        if networks:\n            network_logo_path = networks[0][\"logo_path\"]\n            print(f\"The logo of the network that produced Game of Thrones: {network_logo_path}\")\n        else:\n            print(\"No networks found for Game of Thrones\")\n    else:\n        print(\"Error in getting TV show details\")\n\nelse:\n    print(\"Error in searching TV show\") \n```",
        "usage": [
            373,
            11964,
            12337
        ],
        "executed": "The logo of the network that produced Game of Thrones: /tuomPhY2UtuPTqqFnKMVHvSb724.png\n"
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show Game of Thrones\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Game of Thrones\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nshow_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get the details of the TV show by id\ntv_url = f\"https://api.themoviedb.org/3/tv/{show_id}\"\ntv_response = requests.get(tv_url, headers=headers)\nnetwork_id = tv_response.json()[\"networks\"][0][\"id\"]\n\n# Get the details of the network by id\nnetwork_url = f\"https://api.themoviedb.org/3/network/{network_id}\"\nnetwork_response = requests.get(network_url, headers=headers)\n\n# Extract and print the homepage of the network\nnetwork_homepage = network_response.json()[\"homepage\"]\nprint(network_homepage)\n```",
        "usage": [
            378,
            11370,
            11748
        ],
        "executed": "https://www.hbo.com\n"
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Calling the API\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    # Get the list of results which contains the popular TV shows\n    tv_shows = data['results']\n    # Get the first TV show in the list\n    tv_show = tv_shows[0]\n    tv_id = tv_show['id']  # Get the TV show id\n    \n    # Call the TV show keywords API for the selected TV show\n    keywords_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n    keywords_response = requests.get(keywords_url, headers=headers)\n    \n    if keywords_response.status_code == 200:\n        keywords_data = keywords_response.json()\n        # Get the first keyword from the list of keywords\n        keyword = keywords_data[\"results\"][0][\"name\"]\n        print(\"Keyword of the most popular TV show currently:\", keyword)\n    else:\n        print(\"Failed to call TV show keywords API\")\nelse:\n    print(\"Failed to call popular TV shows API\")\n```",
        "usage": [
            426,
            10115,
            10541
        ],
        "executed": "Keyword of the most popular TV show currently: germany\n"
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of the current popular TV shows\npopular_tv_url = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(popular_tv_url, headers=headers, params=params)\npopular_tv_data = response.json()\n\n# Get the production company id of the most popular TV show\ncompany_id = popular_tv_data[\"results\"][0][\"production_companies\"][0][\"id\"]\n\n# Get the details of the company by id\ncompany_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\nresponse = requests.get(company_url, headers=headers)\ncompany_data = response.json()\n\n# Get the headquarters of the company\nheadquarters = company_data[\"headquarters\"]\nprint(\"The headquarter of the company that produced currently the most popular TV show is:\", headquarters)\n```",
        "usage": [
            364,
            12131,
            12495
        ],
        "executed": null
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for The Mandalorian TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"The Mandalorian\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nmandalorian_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the TV show details to find out the genre\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{mandalorian_id}\"\nresponse = requests.get(tv_details_url, headers=headers)\ngenre_ids = response.json()[\"genres\"][0][\"id\"]\n\n# Get the list of official genres for TV shows\ngenre_url = \"https://api.themoviedb.org/3/genre/tv/list\"\nresponse = requests.get(genre_url, headers=headers)\ngenres = response.json()[\"genres\"]\n\n# Find the genre name for the genre id\nmandalorian_genre = next(genre[\"name\"] for genre in genres if genre[\"id\"] == genre_ids)\nprint(mandalorian_genre)\n```",
        "usage": [
            396,
            11324,
            11720
        ],
        "executed": null
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API key and base url\napi_key = \"YOUR_API_KEY\"\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Get the daily trending TV shows\nurl = f\"{base_url}/trending/tv/day\"\nparams = {\n    \"api_key\": api_key\n}\n\nresponse = requests.get(url, params=params)\n\n# Get the TV show id of the most trending TV show\ntv_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the most trending TV show to find the lead actor\nurl_credits = f\"{base_url}/tv/{tv_id}/credits\"\nparams_credits = {\"api_key\": api_key}\n\nresponse_credits = requests.get(url_credits, params=params_credits)\n\n# Get the lead actor's id\nlead_actor_id = response_credits.json()[\"cast\"][0][\"id\"]\n\n# Get the lead actor's details\nurl_person = f\"{base_url}/person/{lead_actor_id}\"\nparams_person = {\"api_key\": api_key}\n\nresponse_person = requests.get(url_person, params=params_person)\n\n# Get the birthday of the lead actor\nlead_actor_birthday = response_person.json()[\"birthday\"]\n\nprint(f\"The birthday of the lead actor of today's most trending TV show is: {lead_actor_birthday}\")\n```",
        "usage": [
            275,
            12961,
            13236
        ],
        "executed": null
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/popular"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get today's trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\ndata_trending_tv = response_trending_tv.json()\nmost_trending_tv_id = data_trending_tv[\"results\"][0][\"id\"]\n\n# Get details of the most trending TV show\nurl_tv_details = f\"https://api.themoviedb.org/3/tv/{most_trending_tv_id}\"\nresponse_tv_details = requests.get(url_tv_details, headers=headers)\ndata_tv_details = response_tv_details.json()\nnetwork_id = data_tv_details[\"networks\"][0][\"id\"]\n\n# Get homepage of the network\nurl_network = f\"https://api.themoviedb.org/3/network/{network_id}\"\nresponse_network = requests.get(url_network, headers=headers)\ndata_network = response_network.json()\nnetwork_homepage = data_network[\"homepage\"]\n\nprint(\"Homepage of the network that produced today's most trending TV show:\", network_homepage)\n```",
        "usage": [
            397,
            11446,
            11843
        ],
        "executed": "Homepage of the network that produced today's most trending TV show: http://www.netflix.com\n"
    },
    {
        "query": "give me a review of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url to get the trending TV shows\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Define the API url to get the reviews for a TV show\nurl_reviews = \"https://api.themoviedb.org/3/tv/{}/reviews\"\n\n# Define the headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the trending TV shows\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\nif response_trending_tv.status_code == 200:\n    trending_tv_data = response_trending_tv.json()\n    # Get the TV show id of the top trending show\n    trending_tv_id = trending_tv_data['results'][0]['id']\n\n    # Get the reviews for the top trending TV show\n    response_reviews = requests.get(url_reviews.format(trending_tv_id), headers=headers)\n    if response_reviews.status_code == 200:\n        reviews_data = response_reviews.json()\n        print(\"Review of today's most trending TV show:\")\n        for review in reviews_data['results']:\n            print(\"Author:\", review['author'])\n            print(\"Content:\", review['content'])\n            print(\"URL:\", review['url'])\n            print(\"\\n\")\n    else:\n        print(\"Failed to fetch TV show reviews\")\nelse:\n    print(\"Failed to fetch trending TV shows\")\n```",
        "usage": [
            449,
            12354,
            12803
        ],
        "executed": "Review of today's most trending TV show:\n"
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Provide the API key in the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the daily trending TV shows API\ntrending_tv_url = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(trending_tv_url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    trending_tv_data = response.json()\n\n    # Get the first trending TV show ID\n    trending_tv_id = trending_tv_data['results'][0]['id']\n\n    # Call the similar TV shows API for the trending TV show\n    similar_tv_url = f\"https://api.themoviedb.org/3/tv/{trending_tv_id}/similar\"\n    response = requests.get(similar_tv_url, headers=headers)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        similar_tv_data = response.json()\n\n        # Extract relevant information such as TV show names\n        similar_tv_shows = [show['name'] for show in similar_tv_data['results']]\n        print(similar_tv_shows)\n\n    else:\n        print(\"Failed to retrieve similar TV shows data\")\n\nelse:\n    print(\"Failed to retrieve trending TV shows data\")\n```",
        "usage": [
            424,
            11170,
            11594
        ],
        "executed": "['American Gigolo', 'Lord, Give Me Patience', 'Aladdin', 'Bad Teacher', 'FX: The Series', 'Las historias de Sussi', 'Honey, I Shrunk the Kids: The TV Show', 'Roughnecks: Starship Troopers Chronicles', 'History of the World: Part II', 'Monarch: Legacy of Monsters', 'Let Them Eat Cake', 'The Dead Zone', 'Under Pressure', 'ted', '18 Again', 'Aldo: Mais Forte que o Mundo', 'Lilo & Stitch: The Series', 'The Real Ghostbusters', 'Cruel Intentions', 'Anna Karenina']\n"
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the trending TV show API\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the poster path of the first trending TV show\n    data = response.json()\n    if data.get('results'):\n        trending_tv_show = data['results'][0]\n        if trending_tv_show.get('poster_path'):\n            poster_path = trending_tv_show['poster_path']\n            print(f\"Poster path of today's most trending TV show: https://image.tmdb.org/t/p/original{poster_path}\")\n        else:\n            print(\"No poster path available for the most trending TV show today\")\n    else:\n        print(\"No trending TV shows found\")\nelse:\n    print(\"Failed to fetch data. Status code:\", response.status_code)\n```",
        "usage": [
            364,
            13756,
            14120
        ],
        "executed": "Poster path of today's most trending TV show: https://image.tmdb.org/t/p/original/e5hw7bThIs8u6WBHjYHhwTIRsL2.jpg\n"
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people with the name Jeremy Clarkson\nparams = {\n    \"query\": \"Jeremy Clarkson\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\ndata = response.json()\n\n# Check if the search returned any results\nif data[\"total_results\"] > 0:\n    jeremy_clarkson_id = data[\"results\"][0][\"id\"]\n\n    # Get the TV show credits for Jeremy Clarkson\n    credit_params = {}\n    response = requests.get(f\"https://api.themoviedb.org/3/person/{jeremy_clarkson_id}/tv_credits\", headers=headers, params=credit_params)\n    credit_data = response.json()\n\n    # Find the most popular TV show of Jeremy Clarkson\n    max_popularity = 0\n    tv_show_id = None\n    for credit in credit_data[\"cast\"]:\n        if credit[\"popularity\"] > max_popularity:\n            max_popularity = credit[\"popularity\"]\n            tv_show_id = credit[\"id\"]\n\n    # Get the credits of the most popular TV show\n    tv_show_credits_params = {}\n    response = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\", headers=headers, params=tv_show_credits_params)\n    tv_show_credits_data = response.json()\n\n    # Find the people who have worked with Jeremy Clarkson in his most popular TV show\n    working_collaborators = []\n    for cast_member in tv_show_credits_data[\"cast\"]:\n        if cast_member[\"id\"] != jeremy_clarkson_id:  # Exclude Jeremy Clarkson himself\n            working_collaborators.append(cast_member[\"name\"])\n\n    print(\"People who have worked with Jeremy Clarkson in his most popular TV show:\")\n    for collaborator in working_collaborators:\n        print(collaborator)\nelse:\n    print(\"No results found for Jeremy Clarkson.\")\n```",
        "usage": [
            598,
            13104,
            13702
        ],
        "executed": "People who have worked with Jeremy Clarkson in his most popular TV show:\nGraham Norton\n"
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/tv/42009/season/2/episode/1/credits\"\n\n# Set the headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the response was successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Get the lead actor\n    lead_actor = data[\"cast\"][0][\"name\"]\n    \n    print(f\"The lead actor of the first episode of the second season of Black Mirror is {lead_actor}.\")\nelse:\n    print(\"Error in retrieving information\")\n```",
        "usage": [
            312,
            10613,
            10925
        ],
        "executed": null
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for \"The Mandalorian\" TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(search_url, headers=headers, params=search_params)\ntv_show_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits for The Mandalorian\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncast = response.json()[\"cast\"]\n\n# Find the lead actor's ID\nlead_actor_id = None\nfor actor in cast:\n    if actor[\"order\"] == 0:  # Lead actor usually has order 0\n        lead_actor_id = actor[\"id\"]\n        break\n\n# Get the details of the lead actor\nperson_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse = requests.get(person_url, headers=headers)\nbirth_date = response.json()[\"birthday\"]\n\nprint(f\"The lead actor of The Mandalorian was born on: {birth_date}\")\n```",
        "usage": [
            427,
            13369,
            13796
        ],
        "executed": "The lead actor of The Mandalorian was born on: 1975-04-02\n"
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of currently popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\n    \"page\": 1  # Optional parameter to specify the page\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the ID of the most popular TV show\ntv_id = data['results'][0]['id']\n\n# Get the credits for the TV show to find the lead actor\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\nresponse = requests.get(url, headers=headers)\ncredits_data = response.json()\n\n# Extract the lead actor's name\nlead_actor = credits_data['cast'][0]['name']\n\nlead_actor\n```",
        "usage": [
            345,
            10907,
            11252
        ],
        "executed": ""
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url to get the list of current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the parameters, we want to get the data for the first page\nparams = {\"page\": 1}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of current popular TV shows\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the TV show ID of the most popular show\n    tv_id = data[\"results\"][0][\"id\"]\n    \n    # Set the API url to get the credits for the TV show\n    credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    \n    # Get the credits for the TV show\n    credits_response = requests.get(credits_url, headers=headers)\n    credits_data = credits_response.json()\n    \n    # Get the profile path of the lead actor\n    lead_actor_profile_path = credits_data[\"cast\"][0][\"profile_path\"]\n    \n    # Print the full image path for the lead actor's photo\n    base_url = \"https://image.tmdb.org/t/p/original\"\n    photo_url = base_url + lead_actor_profile_path\n    print(photo_url)\nelse:\n    print(\"Error occurred while fetching data\")\n```",
        "usage": [
            465,
            11110,
            11575
        ],
        "executed": "https://image.tmdb.org/t/p/original/yYjGRTKpBW2XHaBfoA8ilJtmXDq.jpg\n"
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for Cate Blanchett\nparams = {\n    \"query\": \"Cate Blanchett\",\n    \"page\": 1\n}\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nresponse = requests.get(search_person_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person_id of Cate Blanchett\nperson_id = data['results'][0]['id']\n\n# Get Cate Blanchett's latest TV show\nperson_tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(person_tv_credits_url, headers=headers)\ndata = response.json()\n\n# Get the latest TV show\nlatest_tv_show_id = data['cast'][0]['id']\n\n# Get reviews of the latest TV show\ntv_reviews_url = f\"https://api.themoviedb.org/3/tv/{latest_tv_show_id}/reviews\"\nresponse = requests.get(tv_reviews_url, headers=headers)\ndata = response.json()\n\n# Print the reviews\nreviews = data['results']\nfor review in reviews:\n    print(f\"Author: {review['author']}\")\n    print(f\"Content: {review['content']}\")\n    print(\"--------------------------------------------------------\")\n\n```",
        "usage": [
            312,
            12424,
            12736
        ],
        "executed": null
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for David Schwimmer's person id\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"include_adult\": False\n}\n\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\ndata = response.json()\n\nif data[\"total_results\"] > 0:\n    person_id = data[\"results\"][0][\"id\"]\n\n    # Get the TV credits for David Schwimmer\n    tv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n    response = requests.get(tv_credits_url, headers=headers)\n    tv_credits_data = response.json()\n\n    # Find the most popular TV show\n    max_popularity = 0\n    popular_tv_show = \"\"\n    for credit in tv_credits_data[\"cast\"]:\n        if credit[\"popularity\"] > max_popularity:\n            max_popularity = credit[\"popularity\"]\n            popular_tv_show = credit[\"name\"]\n\n    print(f\"David Schwimmer's most popular TV show is: {popular_tv_show}\")\nelse:\n    print(\"David Schwimmer not found.\")\n```",
        "usage": [
            413,
            11325,
            11738
        ],
        "executed": "David Schwimmer's most popular TV show is: The Daily Show\n"
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the details of the second season of Black Mirror\nurl = \"https://api.themoviedb.org/3/tv/42009/season/2\"\nparams = {}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Find the crew information for the third episode of the second season\nfor episode in data[\"episodes\"]:\n    if episode[\"episode_number\"] == 3:\n        crew = episode[\"crew\"]\n        director_name = \"\"\n        for member in crew:\n            if member[\"job\"] == \"Director\":\n                director_name = member[\"name\"]\n                break\n        \n        print(\"The director of the third episode of the second season of Black Mirror is:\", director_name)\n        break\n```",
        "usage": [
            331,
            11759,
            12090
        ],
        "executed": "The director of the third episode of the second season of Black Mirror is: Bryn Higgins\n"
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people\nquery = \"Christopher Nolan\"\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": query,\n    \"include_adult\": False\n}\nresponse = requests.get(person_search_url, headers=headers, params=params)\n\nif response.status_code == 200:\n    results = response.json().get('results', [])\n    if len(results) > 0:\n        nolan_id = results[0]['id']\n        \n        # Get the movie credits of Christopher Nolan\n        movie_credits_url = f\"https://api.themoviedb.org/3/person/{nolan_id}/movie_credits\"\n        response = requests.get(movie_credits_url, headers=headers)\n        \n        if response.status_code == 200:\n            movie_results = response.json().get('cast', [])\n            movies_known_for = []\n            for movie in movie_results:\n                movies_known_for.append(movie['title'])\n                \n            print(movies_known_for)\n        else:\n            print(\"Error - Unable to fetch movie credits\")\n    else:\n        print(\"No results found for the query\")\nelse:\n    print(\"Error - Unable to search for the person\")\n```",
        "usage": [
            425,
            10384,
            10809
        ],
        "executed": "['Gotham Uncovered: Creation of a Scene', \"Inside 'Interstellar'\", \"Looking at the World in a New Way: The Making of 'Tenet'\", \"The Director's Notebook: The Cinematic Sleight of Hand of Christopher Nolan\", \"Batman Unmasked: The Psychology of 'The Dark Knight'\", 'Batman Tech', 'Cinema Futures', 'Tarantella', \"Inside Christopher Nolan's Oppenheimer\", 'Batman Begins - Behind the Story', 'To End All War: Oppenheimer & the Atomic Bomb', 'Dreams: Cinema of the Subconscious', 'The Science of Interstellar', 'Hans Zimmer: Hollywood Rebel', 'Tales from the Warner Bros. Lot', 'Making Waves: The Art of Cinematic Sound', 'The Fire Rises: The Creation and Impact of The Dark Knight Trilogy', 'Stanley Kubrick in Focus', \"Interstellar: Nolan's Odyssey\", \"Exploring 'The Tree of Life'\", 'These Amazing Shadows', 'Film Noir: Bringing Darkness to Light', 'Side by Side', 'The Batmobile', 'Cinema16: British Short Films', 'Heath Ledger: A Tribute', 'Ending the Knight', 'Catwoman: The Feline Femme Fatale', 'Joker: Put on a Happy Face', 'Secret Origin: The Story of DC Comics']\n"
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the base url for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the headers with the Bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Avatar\" and get its details\nparams_avatar = {\n    \"query\": \"Avatar\",\n    \"page\": 1\n}\nresponse_avatar = requests.get(f\"{base_url}/search/movie\", headers=headers, params=params_avatar)\navatar_results = response_avatar.json()[\"results\"]\navatar_rating = avatar_results[0][\"vote_average\"]\n\n# Search for the movie \"Avatar: The Way of Water\" and get its details\nparams_avatar_water = {\n    \"query\": \"Avatar: The Way of Water\",\n    \"page\": 1\n}\nresponse_avatar_water = requests.get(f\"{base_url}/search/movie\", headers=headers, params=params_avatar_water)\navatar_water_results = response_avatar_water.json()[\"results\"]\navatar_water_rating = avatar_water_results[0][\"vote_average\"]\n\n# Compare the ratings of the two movies\nif avatar_rating > avatar_water_rating:\n    print(\"Avatar has a higher rating than Avatar: The Way of Water\")\nelif avatar_rating < avatar_water_rating:\n    print(\"Avatar: The Way of Water has a higher rating than Avatar\")\nelse:\n    print(\"Both movies have the same rating\")\n```",
        "usage": [
            440,
            12564,
            13004
        ],
        "executed": "Avatar: The Way of Water has a higher rating than Avatar\n"
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API endpoint and parameters\nurl = \"https://api.themoviedb.org/3/discover/movie\"\nparams = {\n    \"api_key\": \"0dbab590c7eaca07ebe625974a37ad92\",\n    \"language\": \"en-US\",\n    \"vote_average.gte\": 7.0,\n    \"primary_release_date.gte\": \"2021-01-01\"\n}\n\n# Add the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract and print the results\nif response.status_code == 200:\n    movie_data = response.json()\n    for movie in movie_data['results']:\n        print(\"Title:\", movie['title'])\n        print(\"Rating:\", movie['vote_average'])\n        print(\"Release Date:\", movie['release_date'])\n        print(\"--------------------\")\nelse:\n    print(\"Failed to fetch data\")\n```",
        "usage": [
            365,
            14412,
            14777
        ],
        "executed": "Title: Dune: Part Two\nRating: 8.451\nRelease Date: 2024-02-27\n--------------------\nTitle: Poor Things\nRating: 7.958\nRelease Date: 2023-12-07\n--------------------\nTitle: Migration\nRating: 7.596\nRelease Date: 2023-12-06\n--------------------\nTitle: Kung Fu Panda 4\nRating: 7.5\nRelease Date: 2024-03-02\n--------------------\nTitle: Dune\nRating: 7.788\nRelease Date: 2021-09-15\n--------------------\nTitle: Red Right Hand\nRating: 7.044\nRelease Date: 2024-02-22\n--------------------\nTitle: Wonka\nRating: 7.201\nRelease Date: 2023-12-06\n--------------------\nTitle: The Beekeeper\nRating: 7.451\nRelease Date: 2024-01-10\n--------------------\nTitle: The Family Plan\nRating: 7.339\nRelease Date: 2023-12-14\n--------------------\nTitle: Dad or Mom\nRating: 7.3\nRelease Date: 2023-11-30\n--------------------\nTitle: Oppenheimer\nRating: 8.115\nRelease Date: 2023-07-19\n--------------------\nTitle: Barbie\nRating: 7.103\nRelease Date: 2023-07-06\n--------------------\nTitle: Fast X\nRating: 7.144\nRelease Date: 2023-05-17\n--------------------\nTitle: Boonie Bears: Guardian Code\nRating: 7.0\nRelease Date: 2023-01-22\n--------------------\nTitle: Transformers: Rise of the Beasts\nRating: 7.352\nRelease Date: 2023-06-06\n--------------------\nTitle: The Super Mario Bros. Movie\nRating: 7.689\nRelease Date: 2023-04-05\n--------------------\nTitle: Avatar: The Way of Water\nRating: 7.63\nRelease Date: 2022-12-14\n--------------------\nTitle: The Boy and the Heron\nRating: 7.475\nRelease Date: 2023-07-14\n--------------------\nTitle: Patriots Time\nRating: 7.875\nRelease Date: 2022-04-28\n--------------------\nTitle: My Fault\nRating: 7.997\nRelease Date: 2023-06-08\n--------------------\n"
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Query parameters\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the response to get the genre of the movie\nif response.status_code == 200:\n    data = response.json()\n    if 'results' in data and len(data['results']) > 0:\n        genre_ids = data['results'][0]['genre_ids']\n        print(\"Genre IDs of the movie Lord of the Rings:\", genre_ids)\n    else:\n        print(\"Movie not found\")\nelse:\n    print(\"Error fetching data\")\n```",
        "usage": [
            342,
            15309,
            15651
        ],
        "executed": "Genre IDs of the movie Lord of the Rings: [12, 14, 28]\n"
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get the list of popular people\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Sending a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Parsing the response data\nif response.status_code == 200:\n    data = response.json()\n    \n    # Getting the details of the most popular person\n    if data['results']:\n        most_popular_person = data['results'][0]\n        \n        # Getting the birthday of the most popular person\n        birthday = most_popular_person.get('birthday', 'Birthday information not available')\n        \n        print(\"The birthday of the most popular person right now is:\", birthday)\n    else:\n        print(\"No popular people found.\")\nelse:\n    print(\"Failed to fetch data from the API. Status code:\", response.status_code)\n```",
        "usage": [
            356,
            13705,
            14061
        ],
        "executed": "The birthday of the most popular person right now is: Birthday information not available\n"
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show 'Big Bang Theory'\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Big Bang Theory\",\n    \"include_adult\": False\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the TV show ID\ntv_id = search_results[\"results\"][0][\"id\"]\n\n# Get the images for the second season of the TV show\nseason_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/images\"\nseason_response = requests.get(season_url, headers=headers)\nseason_results = season_response.json()\n\n# Extract the poster path for the second season\nposter_path = season_results[\"posters\"][0][\"file_path\"]\n\nprint(f\"The poster path for the second season of Big Bang Theory is: {poster_path}\")\n```",
        "usage": [
            372,
            13040,
            13412
        ],
        "executed": "The poster path for the second season of Big Bang Theory is: /2NBwUBZ4clwj6qO9fBinfxiB0dR.jpg\n"
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url for getting the TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2/episode/3\"\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Extract the name of the third episode of the second season of Mandalorian\n    episode_name = data.get(\"name\")\n    print(\"The name of the third episode of the second season of Mandalorian is:\", episode_name)\nelse:\n    print(\"Error occurred with status code:\", response.status_code)\n```",
        "usage": [
            335,
            12458,
            12793
        ],
        "executed": "The name of the third episode of the second season of Mandalorian is: Chapter 11: The Heiress\n"
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Get the movie ID of \"The Shawshank Redemption\"\nurl = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Shawshank Redemption\"\n}\nresponse = requests.get(url, headers=headers, params=params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get the credits for the movie to find the lead actor\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncast = response.json()[\"cast\"]\n\n# Step3: Get the details of the lead actor\nlead_actor_id = cast[0][\"id\"]\nperson_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse = requests.get(person_url, headers=headers)\nlead_actor_details = response.json()\n\nbirthday = lead_actor_details[\"birthday\"]\nprint(\"The birthday of the lead actor of 'The Shawshank Redemption' is:\", birthday)\n```",
        "usage": [
            393,
            12014,
            12407
        ],
        "executed": "The birthday of the lead actor of 'The Shawshank Redemption' is: 1958-10-16\n"
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/movie/upcoming"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url to get the details of the movie The Shawshank Redemption\nmovie_id = 278  # The Shawshank Redemption movie ID\nurl = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nresponse = requests.get(url, headers=headers)\nmovie_details = response.json()\n\n# Extract the director details from the movie credits\ndirector_name = None\nfor crew_member in movie_details['credits']['crew']:\n    if crew_member['job'] == 'Director':\n        director_id = crew_member['id']\n        url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n        response = requests.get(url, headers=headers)\n        director_details = response.json()\n        director_name = director_details['name']\n        director_birthday = director_details['birthday']\n        break\n\nif director_name:\n    print(f\"The director of The Shawshank Redemption is {director_name} and their birthday is on {director_birthday}\")\nelse:\n    print(\"Director details not found for The Shawshank Redemption.\")\n```",
        "usage": [
            393,
            11634,
            12027
        ],
        "executed": null
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# API url to search for 'The Shawshank Redemption' movie\nsearch_movie_url = 'https://api.themoviedb.org/3/search/movie'\n\n# Parameters to search for 'The Shawshank Redemption' movie\nparams = {\n    'query': 'The Shawshank Redemption',\n    'page': 1,\n    'include_adult': False\n}\n\n# Making a GET request to search for 'The Shawshank Redemption' movie\nresponse = requests.get(search_movie_url, headers=headers, params=params)\n\nif response.status_code == 200:\n    # Parsing the response to get the movie details\n    movie_data = response.json()['results'][0]\n    # Getting the production company id of the movie\n    production_company_id = movie_data['production_companies'][0]['id']\n\n    # API url to get the details of the production company\n    company_url = f'https://api.themoviedb.org/3/company/{production_company_id}'\n\n    # Making a GET request to get the details of the production company\n    response_company = requests.get(company_url, headers=headers)\n\n    if response_company.status_code == 200:\n        # Parsing the response to get the headquarters of the company\n        company_data = response_company.json()\n        headquarters = company_data['headquarters']\n        print(\"The headquarter of the company that created 'The Shawshank Redemption' movie is:\", headquarters)\n    else:\n        print(\"Failed to get company details.\")\nelse:\n    print(\"Failed to get movie details.\")\n```",
        "usage": [
            322,
            10718,
            11040
        ],
        "executed": null
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Define the query parameter\nparams = {\n    \"query\": \"Star Wars\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the company_id of the company that created Star Wars collection\n    company_id = response.json()[\"results\"][0][\"id\"]\n\n    # Make a request to get the details of the company by company_id\n    company_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    company_response = requests.get(company_url, headers=headers)\n\n    # Check if the request was successful\n    if company_response.status_code == 200:\n        # Get the headquarter location of the company\n        headquarters = company_response.json()[\"headquarters\"]\n        print(\"The headquarter of the company that created the collection Star Wars is:\", headquarters)\n    else:\n        print(\"Failed to get company details. Status code:\", company_response.status_code)\nelse:\n    print(\"Failed to search for the collection. Status code:\", response.status_code)\n```",
        "usage": [
            258,
            12391,
            12649
        ],
        "executed": "The headquarter of the company that created the collection Star Wars is: \n"
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the details of \"The Double Life of Veronique\" movie\nurl_veronique = \"https://api.themoviedb.org/3/search/movie\"\nparams_veronique = {\n    \"query\": \"The Double Life of Veronique\",\n    \"include_adult\": False\n}\nresponse_veronique = requests.get(url_veronique, headers=headers, params=params_veronique)\nveronique_data = response_veronique.json()\nveronique_release_date = veronique_data['results'][0]['release_date']\n\n# Get the details of \"Mulholland Drive\" movie\nurl_mulholland = \"https://api.themoviedb.org/3/search/movie\"\nparams_mulholland = {\n    \"query\": \"Mulholland Drive\",\n    \"include_adult\": False\n}\nresponse_mulholland = requests.get(url_mulholland, headers=headers, params=params_mulholland)\nmulholland_data = response_mulholland.json()\nmulholland_release_date = mulholland_data['results'][0]['release_date']\n\n# Compare release dates and output the result\nif veronique_release_date < mulholland_release_date:\n    print(\"The Double Life of Veronique has an earlier release date.\")\nelse:\n    print(\"Mulholland Drive has an earlier release date.\")\n```",
        "usage": [
            450,
            11828,
            12278
        ],
        "executed": "The Double Life of Veronique has an earlier release date.\n"
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the credits for a TV season\ndef get_tv_season_credits(tv_id, season_number):\n    url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits\"\n    response = requests.get(url, headers=headers)\n    return response.json()\n\n# Get the director of Twin Peaks Season 1\ntwin_peaks_season_1_credits = get_tv_season_credits(1920, 1)\ncrew_twin_peaks_season_1 = twin_peaks_season_1_credits['crew']\n\n# Get the director of Mulholland Drive\nmulholland_drive_credits = get_tv_season_credits(379, 1)\ncrew_mulholland_drive = mulholland_drive_credits['crew']\n\n# Check if the director of Twin Peaks Season 1 is the same as the director of Mulholland Drive\ndirector_twin_peaks = \"\"\nfor crew_member in crew_twin_peaks_season_1:\n    if crew_member['job'] == 'Director':\n        director_twin_peaks = crew_member['name']\n        break\n\ndirector_mulholland_drive = \"\"\nfor crew_member in crew_mulholland_drive:\n    if crew_member['job'] == 'Direction':\n        director_mulholland_drive = crew_member['name']\n        break\n\nif director_twin_peaks == director_mulholland_drive:\n    print(\"The director of Twin Peaks Season 1 and Mulholland Drive is the same person.\")\nelse:\n    print(\"The director of Twin Peaks Season 1 and Mulholland Drive is different.\")\n\n```",
        "usage": [
            508,
            11179,
            11687
        ],
        "executed": null
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/101/movoe_credits\"\nmovie_id = 101  # Mulholland Drive movie id\n\n# Set the parameters\nparams = {\n    \"page\": 1\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url.format(movie_id=movie_id), headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the API response in JSON format\n    data = response.json()\n    \n    # Find the director\n    for crew_member in data[\"crew\"]:\n        if crew_member[\"job\"] == \"Director\":\n            director_id = crew_member[\"id\"]\n            break\n    \n    # Now get the details of the director\n    director_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n    director_response = requests.get(director_url, headers=headers)\n    \n    if director_response.status_code == 200:\n        director_data = director_response.json()\n        \n        # Extract the place of birth of the director\n        place_of_birth = director_data.get(\"place_of_birth\", \"Not available\")\n        \n        print(f\"The director of Mulholland Drive was born in: {place_of_birth}\")\n    else:\n        print(\"Failed to retrieve director details\")\nelse:\n    print(\"Failed to retrieve movie credits for Mulholland Drive\")\n```",
        "usage": [
            475,
            12635,
            13110
        ],
        "executed": "Failed to retrieve movie credits for Mulholland Drive\n"
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Mulholland Drive\nparams = {\n    \"query\": \"Mulholland Drive\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse_search = requests.get(\"https://api.themoviedb.org/3/search/movie\", headers=headers, params=params)\nsearch_results = response_search.json()[\"results\"]\n\n# Check if Mulholland Drive is in the top-10 rated list\nis_in_top_10 = False\nif len(search_results) > 0:\n    movie_id = search_results[0][\"id\"]\n    response_movie_details = requests.get(f\"https://api.themoviedb.org/3/movie/{movie_id}\", headers=headers)\n    movie_details = response_movie_details.json()\n\n    # Get the list of top-rated movies\n    response_top_rated = requests.get(\"https://api.themoviedb.org/3/movie/top_rated\", headers=headers)\n    top_rated_results = response_top_rated.json()[\"results\"]\n\n    # Check if Mulholland Drive is in the top-10\n    for i, movie in enumerate(top_rated_results):\n        if movie[\"id\"] == movie_id:\n            is_in_top_10 = True\n            print(f\"Mulholland Drive is in the Top-10 rated list at position {i+1}.\")\n            break\n\nif not is_in_top_10:\n    print(\"Mulholland Drive is not in the Top-10 rated list.\")\n\n```",
        "usage": [
            488,
            11438,
            11926
        ],
        "executed": "Mulholland Drive is not in the Top-10 rated list.\n"
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\n# Import the requests module\nimport requests\n\n# Define the headers including the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the base url for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Search for movies directed by Akira Kurosawa\nsearch_url_kurosawa = base_url + \"/search/person\"\nparams_kurosawa = {\n    \"query\": \"Akira Kurosawa\",\n    \"include_adult\": False\n}\nresponse_kurosawa = requests.get(search_url_kurosawa, headers=headers, params=params_kurosawa)\ndata_kurosawa = response_kurosawa.json()\nresults_kurosawa = data_kurosawa['results'][0]['known_for']\n\n# Search for movies directed by Spielberg\nsearch_url_spielberg = base_url + \"/search/person\"\nparams_spielberg = {\n    \"query\": \"Steven Spielberg\",\n    \"include_adult\": False\n}\nresponse_spielberg = requests.get(search_url_spielberg, headers=headers, params=params_spielberg)\ndata_spielberg = response_spielberg.json()\nresults_spielberg = data_spielberg['results'][0]['known_for']\n\n# Compare the number of movies directed by each director\nnum_movies_kurosawa = len(results_kurosawa)\nnum_movies_spielberg = len(results_spielberg)\n\n# Determine who directed more movies\nif num_movies_kurosawa > num_movies_spielberg:\n    print(\"Akira Kurosawa directed more movies.\")\nelif num_movies_kurosawa < num_movies_spielberg:\n    print(\"Steven Spielberg directed more movies.\")\nelse:\n    print(\"Both Akira Kurosawa and Steven Spielberg directed the same number of movies.\")\n```",
        "usage": [
            520,
            11189,
            11709
        ],
        "executed": "Both Akira Kurosawa and Steven Spielberg directed the same number of movies.\n"
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/person/287/combined_credits\"\n\n# Define the parameters\nparams = {\n    \"api_key\": \"0dbab590c7eaca07ebe625974a37ad92\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n\n    # Iterate over the credits to find the TV series directed by the director of Mulholland Drive\n    for credit in data[\"crew\"]:\n        if credit[\"id\"] == 287 and credit[\"job\"] == \"Director\" and credit[\"media_type\"] == \"tv\":\n            tv_series_directed = credit[\"name\"]\n            print(\"TV series directed by the director of Mulholland Drive: \", tv_series_directed)\n            break\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "usage": [
            223,
            11634,
            11857
        ],
        "executed": ""
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the parameters\nparams = {\n    \"query\": \"Scarlett Johansson\",\n    \"include_adult\": False,\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the response JSON data\ndata = response.json()\n\n# Extract the birthday of Scarlett Johansson\n# Note: Assuming the first result in the search is Scarlett Johansson\nif response.status_code == 200:\n    if len(data[\"results\"]) > 0:\n        scarlett = data[\"results\"][0]\n        person_id = scarlett[\"id\"]\n        \n        # Make a request to get the person details\n        person_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n        person_response = requests.get(person_url, headers=headers)\n        \n        # If person details request is successful, extract the birthday\n        if person_response.status_code == 200:\n            person_data = person_response.json()\n            scarlett_birthday = person_data.get(\"birthday\", \"Birthday not found\")\n            print(f\"Scarlett Johansson's birthday: {scarlett_birthday}\")\n        else:\n            print(\"Failed to fetch Scarlett Johansson's details\")\n    else:\n        print(\"Scarlett Johansson not found\")\nelse:\n    print(\"Failed to search for Scarlett Johansson\")\n\n```",
        "usage": [
            488,
            12108,
            12596
        ],
        "executed": "Scarlett Johansson's birthday: 1984-11-22\n"
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the base URL for the API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the endpoint to search for TV show by query\nendpoint = \"/search/tv\"\n\n# Define the query parameter\nquery = \"Sword Art Online\"\n\n# Define the API key\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Define the parameters for the request\nparams = {\n    \"query\": query\n}\n\n# Make the API call\nresponse = requests.get(base_url + endpoint, headers=headers, params=params)\n\n# Extract the results from the response\nresults = response.json()[\"results\"]\n\n# Loop through the results to find the TV show with exact name match\nfor result in results:\n    if result[\"name\"] == query:\n        tv_id = result[\"id\"]\n        break\n\n# If TV show found, proceed to get the details\nif tv_id:\n    # Define the endpoint to get the TV show details\n    endpoint = f\"/tv/{tv_id}\"\n    \n    # Make the API call to get the TV show details\n    response = requests.get(base_url + endpoint, headers=headers)\n    \n    # Extract the number of seasons from the response\n    num_seasons = response.json()[\"number_of_seasons\"]\n    \n    print(f\"The number of seasons of Sword Art Online is: {num_seasons}\")\nelse:\n    print(\"Sword Art Online TV show not found.\")\n\n```",
        "usage": [
            334,
            10778,
            11112
        ],
        "executed": null
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Yui Aragaki movies\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Yui Aragaki\",\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\naragaki_id = response.json()[\"results\"][0][\"id\"]\n\n# Search for Gen Hoshino movies\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Gen Hoshino\",\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\nhoshino_id = response.json()[\"results\"][0][\"id\"]\n\n# Check if they co-star in the movie \"We Married as Job\"\nurl = \"https://api.themoviedb.org/3/movie/573056\"\nresponse = requests.get(url, headers=headers)\nmovie_credits = response.json()[\"credits\"]\n\naragaki_movies = [credit[\"id\"] for credit in movie_credits[\"cast\"] if credit[\"id\"] == aragaki_id]\nhoshino_movies = [credit[\"id\"] for credit in movie_credits[\"cast\"] if credit[\"id\"] == hoshino_id]\n\nif aragaki_movies and hoshino_movies:\n    print(\"Yui Aragaki and Gen Hoshino are co-starring in the movie 'We Married as Job'\")\nelse:\n    print(\"Yui Aragaki and Gen Hoshino are not co-starring in the movie 'We Married as Job'\")\n```",
        "usage": [
            506,
            11829,
            12335
        ],
        "executed": null
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define headers with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get movie details for Barbie\nmovie_id_barbie = 47411\nurl_movie_barbie = f\"https://api.themoviedb.org/3/movie/{movie_id_barbie}\"\nresponse_movie_barbie = requests.get(url_movie_barbie, headers=headers)\ndata_movie_barbie = response_movie_barbie.json()\n\n# Extract the director's id from the movie details\ncrew_movie_barbie = data_movie_barbie.get('crew', [])\ndirector_id = None\nfor crew_member in crew_movie_barbie:\n    if crew_member['job'] == 'Director':\n        director_id = crew_member['id']\n        break\n\n# API url to get person details of the director\nurl_director = f\"https://api.themoviedb.org/3/person/{director_id}\"\nresponse_director = requests.get(url_director, headers=headers)\ndata_director = response_director.json()\n\n# Extract the birth year of the director\nbirth_year_director = None\nif 'birthday' in data_director.keys():\n    birth_year_director = int(data_director['birthday'].split('-')[0])\n\n# API url to get TV show details for Death Note\ntv_id_death_note = 51412\nurl_tv_death_note = f\"https://api.themoviedb.org/3/tv/{tv_id_death_note}\"\nresponse_tv_death_note = requests.get(url_tv_death_note, headers=headers)\ndata_tv_death_note = response_tv_death_note.json()\n\n# Extract the lead actor's id from the TV show details\ncast_tv_death_note = data_tv_death_note.get('credits', {}).get('cast', [])\nlead_actor_id = None\nfor cast_member in cast_tv_death_note:\n    if cast_member['order'] == 1:\n        lead_actor_id = cast_member['id']\n        break\n\n# API url to get person details of the lead actor\nurl_lead_actor = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nresponse_lead_actor = requests.get(url_lead_actor, headers=headers)\ndata_lead_actor = response_lead_actor.json()\n\n# Extract the birth year of the lead actor\nbirth_year_lead_actor = None\nif 'birthday' in data_lead_actor.keys():\n    birth_year_lead_actor = int(data_lead_actor['birthday'].split('-')[0])\n\n# Calculate the age difference between director and lead actor\nage_difference = abs(birth_year_director - birth_year_lead_actor)\n\nprint(f\"The director of Barbie is older than the lead actor of Death Note by {age_difference} years.\")\n```",
        "usage": [
            703,
            11963,
            12666
        ],
        "executed": null
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the query parameter for searching Katherine LaNasa\nparams = {\n    \"query\": \"Katherine LaNasa\",\n    \"include_adult\": False\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Check if there are any results\nif data[\"total_results\"] > 0:\n    # Get the person id of Katherine LaNasa\n    person_id = data[\"results\"][0][\"id\"]\n    \n    # Define the API url for getting movie credits\n    credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    \n    # Make the API request to get movie credits\n    credits_response = requests.get(credits_url, headers=headers)\n    credits_data = credits_response.json()\n    \n    # Check if there are any movie credits\n    if len(credits_data[\"cast\"]) > 0:\n        # Get the latest movie appearance\n        latest_movie = credits_data[\"cast\"][0][\"title\"]\n        print(f\"Katherine LaNasa's latest movie appearance is in: {latest_movie}\")\n    else:\n        print(\"Katherine LaNasa has no movie credits.\")\nelse:\n    print(\"Katherine LaNasa could not be found in the database.\")\n```",
        "usage": [
            299,
            14280,
            14579
        ],
        "executed": "Katherine LaNasa's latest movie appearance is in: Black Karen\n"
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "dataset": "tmdb",
        "results": "```python\nimport requests\n\n# Define the API url to get the movie details\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the query parameters\nparams = {\n    \"query\": \"Oppenheimer\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Define the headers with the Bearer token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the cover image path of the first movie in the search results\n    results = response.json()[\"results\"]\n    if results:\n        cover_image = results[0][\"poster_path\"]\n        print(cover_image)\n    else:\n        print(\"No movie found with the title 'Oppenheimer'\")\nelse:\n    print(\"Failed to retrieve data from the API\")\n```",
        "usage": [
            358,
            12000,
            12358
        ],
        "executed": "/8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg\n"
    }
]