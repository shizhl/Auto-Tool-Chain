[
    {
        "query": "give me the number of movies directed by Sofia Coppola",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people with the name \"Sofia Coppola\"\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nperson_search_params = {\n    \"query\": \"Sofia Coppola\",\n    \"include_adult\": False,\n}\nperson_search_response = requests.get(person_search_url, headers=headers, params=person_search_params)\nperson_search_results = person_search_response.json()\n\n# Check if the person \"Sofia Coppola\" was found\nif person_search_results[\"total_results\"] > 0:\n    person_id = person_search_results[\"results\"][0][\"id\"]\n    \n    # Get the movie credits for Sofia Coppola\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    movie_credits_response = requests.get(movie_credits_url, headers=headers)\n    movie_credits_results = movie_credits_response.json()\n    \n    # Count the number of movies directed by Sofia Coppola\n    directed_movies = [credit for credit in movie_credits_results[\"crew\"] if credit[\"job\"] == \"Director\"]\n    num_movies_directed = len(directed_movies)\n    \n    print(\"Number of movies directed by Sofia Coppola:\", num_movies_directed)\nelse:\n    print(\"Sofia Coppola not found in the database.\")\n```",
        "executed": "Number of movies directed by Sofia Coppola: 14\n"
    },
    {
        "query": "Who was the lead actor in the movie The Dark Knight?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# API url to search for the movie \"The Dark Knight\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n# Parameters to search for the movie \"The Dark Knight\"\nparams_search_movie = {\n    \"query\": \"The Dark Knight\",\n}\n# Call the API to search for the movie \"The Dark Knight\"\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Check if there are results for the movie search\nif data_search_movie[\"total_results\"] > 0:\n    # Get the movie_id of the first result for \"The Dark Knight\"\n    movie_id = data_search_movie[\"results\"][0][\"id\"]\n    \n    # API url to get the credits of the movie\n    url_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    # Call the API to get the credits of the movie\n    response_movie_credits = requests.get(url_movie_credits, headers=headers)\n    data_movie_credits = response_movie_credits.json()\n    \n    # Get the lead actor of the movie \"The Dark Knight\"\n    lead_actor = data_movie_credits[\"cast\"][0][\"name\"]\n    \n    print(f\"The lead actor in the movie 'The Dark Knight' was: {lead_actor}\")\nelse:\n    print(\"No results found for the movie 'The Dark Knight'\")\n```",
        "executed": "The lead actor in the movie 'The Dark Knight' was: Christian Bale\n"
    },
    {
        "query": "Who directed the top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for getting the top rated movies\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n# Define the parameters for the API request\nparams = {'page': 1}\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Get the director of the top-1 rated movie\n    # The director can be found in the 'crew' section under the 'results' key\n    director = data['results'][0]['crew'][0]['name']\n\n    # Print the director of the top-1 rated movie\n    print(f\"The director of the top-1 rated movie is: {director}\")\nelse:\n    print(\"Failed to retrieve data.\")\n```",
        "executed": null
    },
    {
        "query": "give me a image for the collection Star Wars",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the collection ID of Star Wars\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nparams = {\n    \"query\": \"Star Wars\"\n}\nresponse = requests.get(search_url, headers=headers, params=params)\ncollection_id = response.json()[\"results\"][0][\"id\"]  # Assume first result is correct\n\n# Step 2: Get images for the collection using the collection ID\nimage_url = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\nresponse = requests.get(image_url, headers=headers)\nimages = response.json()\n\n# Print the first backdrop image path for Star Wars collection\nprint(images[\"backdrops\"][0][\"file_path\"])\n```",
        "executed": "/d8duYyyC9J5T825Hg7grmaabfxQ.jpg\n"
    },
    {
        "query": "What is the logo of the Walt Disney?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching companies\nurl_search_company = \"https://api.themoviedb.org/3/search/company\"\n\n# Define the parameters for the query to search for Walt Disney\nparams = {\n    \"query\": \"Walt Disney\"\n}\n\n# Make a GET request to search for companies\nresponse_search_company = requests.get(url_search_company, headers=headers, params=params)\ndata_search_company = response_search_company.json()\n\n# Get the id of Walt Disney from the search results\nwalt_disney_id = None\nfor result in data_search_company['results']:\n    if result['name'] == \"Walt Disney\":\n        walt_disney_id = result['id']\n        break\n\nif walt_disney_id:\n    # Define the API url to get images of the company\n    url_company_images = f\"https://api.themoviedb.org/3/company/{walt_disney_id}/images\"\n\n    # Make a GET request to get the images of Walt Disney\n    response_company_images = requests.get(url_company_images, headers=headers)\n    data_company_images = response_company_images.json()\n\n    # Print the logo path of Walt Disney\n    if data_company_images['logos']:\n        print(\"Logo of Walt Disney:\")\n        print(data_company_images['logos'][0]['file_path'])\n    else:\n        print(\"Logo not found for Walt Disney\")\nelse:\n    print(\"Walt Disney not found in the search results\")\n```",
        "executed": "Walt Disney not found in the search results\n"
    },
    {
        "query": "What dose the lead actor of Titanic look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the movie details for Titanic\nurl_movie_details = \"https://api.themoviedb.org/3/movie/597\"\n\n# Define the API url to get the crew information for the movie\nurl_movie_credits = \"https://api.themoviedb.org/3/movie/597/credits\"\n\n# Define the headers including the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to get the details of the movie Titanic\nresponse_movie_details = requests.get(url_movie_details, headers=headers)\ndata_movie_details = response_movie_details.json()\n\n# Extract the lead actor's ID from the movie crew information\nresponse_movie_credits = requests.get(url_movie_credits, headers=headers)\ndata_movie_credits = response_movie_credits.json()\nlead_actor_id = data_movie_credits[\"cast\"][0][\"id\"]\n\n# Define the API url to get the images of the lead actor\nurl_actor_images = f\"https://api.themoviedb.org/3/person/{lead_actor_id}/images\"\n\n# Send a GET request to get the images of the lead actor\nresponse_actor_images = requests.get(url_actor_images, headers=headers)\ndata_actor_images = response_actor_images.json()\n\n# Print the image paths of the lead actor\nfor image_info in data_actor_images[\"profiles\"]:\n    print(image_info[\"file_path\"])\n```",
        "executed": "/wo2hJpn04vbtmh0B9utCFdsQhxM.jpg\n/5Brc5dLifH3UInk3wUaCuGXpCqy.jpg\n/aLUFp0zWpLVyIOgY0scIpuuKZLE.jpg\n/rQXtbTp21ZWuFxcrkuPMytyTrip.jpg\n/jqbqNrOIB3alGMX6Gh2MbOKMXZO.jpg\n/h5JnhncKehZuzRXOdGKYTH6zVWX.jpg\n/jMOipiHOPkVdx9phhKamwlVKEZT.jpg\n/nb7e6caBO5BxZ8lyIp9Hzv69oNB.jpg\n/2cMjPA5MnzWvy9FaMTFCTZ39Uau.jpg\n/dIUG8zUX5WJmnL0F2PVpfaenCrt.jpg\n/iGYNP8yCh2p23M3SL5LVQD276jB.jpg\n"
    },
    {
        "query": "give me some reviews of the first movie that is similar to Titanic",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching movies\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the parameters for searching movies\nsearch_params = {\n    \"query\": \"Titanic\",  # Search for movies similar to Titanic\n    \"page\": 1,  # Get the first page of results\n    \"include_adult\": False  # Exclude adult content\n}\n\n# Make a GET request to search for movies similar to Titanic\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Check if there are any results\nif search_results['total_results'] > 0:\n    # Get the movie id of the first movie similar to Titanic\n    movie_id = search_results['results'][0]['id']\n\n    # Define the API url for getting reviews of a movie\n    reviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n\n    # Set the parameters for getting reviews of the movie\n    reviews_params = {\n        \"page\": 1  # Get the first page of reviews\n    }\n\n    # Make a GET request to get the reviews of the first movie similar to Titanic\n    reviews_response = requests.get(reviews_url, headers=headers, params=reviews_params)\n    reviews_results = reviews_response.json()\n\n    # Extract the reviews and print them\n    reviews = reviews_results['results']\n    for review in reviews:\n        print(\"Author:\", review['author'])\n        print(\"Content:\", review['content'])\n        print(\"URL:\", review['url'])\n        print()\nelse:\n    print(\"No similar movies found for Titanic.\")\n```",
        "executed": "Author: John Chard\nContent: Beautiful Romance - Tragedy Unbound.\r\n\r\nIt has kind of become the popular thing to kick Titanic, the film and its achievements. It's like the love it garnered on release and the colossal waves it made in the history of cinema, never happened, or as some want you to believe, doesn't matter. I can tell you now that many of my macho fuelled friends will privately, under the influence of liquid refreshments, admit to having affection for the film, but socially in a circle environment? Not a bit of it! I have no such problems admitting my love for the film, I love it as much now as I approach 50, as I did when I sat there in awe at the cinema in 1997.\r\n\r\nYou jump - I jump.\r\n\r\nTitanic is far from flawless, where even now with the advancements in technology the effects over 15 years later look a touch creaky. While it's true as well that away from Rose and Jack the characterisations are thin on the ground. But this is Rose and Jack's story, fully fleshed out for an hour and half and then framed by the terrible tragedy that unfolds for the next hour and half. The tie-in to the present day is superbly constructed by James Cameron - the search for the diamond - the real life filming of the Titanic wreckage - and the flashback telling of the story by a delightful Gloria Stuart as old Rose, and the sinking of the ship and its aftermath is stunning and heart breaking in equal measure.\r\n\r\nNever let go.\r\n\r\nSo may scenes and dialogue exchanges stay in the memory for ever. The band playing on, the captain awaiting his fate, the mother ushering her children to sleep before the sea comes to take them, the old boy drinking his brandy as the water rushes in, or just Jack and Rose, polar opposites in society's class structure, making love, making art or just professing that neither will ever let go. It's what makes Titanic the wonderful piece of cinema it is, where beauty and tragedy merge to create something forever memorable. A film that deserved all the accolades and cash till ringing that it once did have. 9/10\nURL: https://www.themoviedb.org/review/5424aaccc3a36808760043df\n\nAuthor: CinemaSerf\nContent: Set around the ill-fated maiden voyage of the RMS \"Titanic\", this is essentially a film in two parts. The first, weaker, element features a young \"Dawson\" (Leonardo DiCaprio) who wins a third class ticket to New York on the soon to depart liner. Meantime, the wealthy but unhappy \"Rose\" (Kate Winslet) is up in the posh cabins with her cold and unfeeling fianc\u00e9e \"Hockley\" (Billy Zane) and her equally unpleasant, venally ambitious mother \"Ruth\" (Frances Fisher). Desperately unhappy, \"Rose\" considers jumping off the prow of the boat, but luckily the charming young \"Dawson\" is on hand to talk her down, and so begins their friendship that causes much chagrin amongst her socially elite companions. That friendship culminates in him making a rather provocative drawing of her, the final straw for her boyfriend and his enforcer \"Lovejoy\" (David Warner). It all looks ominous for both until - part two begins. The ship, speeding along nicely under the command of Bernard Hill's Captain Smith clips the underwater part of an iceberg and now history takes over. James Cameron offers us a purely speculative account of what might have happened as the initially incredulous crew start to realise that maybe it is not just Molly Brown (an excellent Kathy Bates) that's unsinkable! What now ensues are a series of well staged scenarios depicting panic, fear, a fair degree of selfishness and some proper stiff upper lips as the ship has be evacuated and the segregation of the passengers and competencies of the crew start to become life threatening. The visual effects have dated, the smoke from the ship's funnels blows in an strangely symmetrical fashion and the later scenes struggle to convince - but this is really a rather tragic love story with a strong chemistry between the engaging two characters at the top of the bill, and an effective performance from the older \"Rose\" (Gloria Stewart) who takes on the role of narrator 80 years after the disaster. I still find it uncomfortable to watch the actuality of the wreck, which features occasionally throughout the film - I feel like I am quite literally walking through someone's grave; but it does lend a potent hook upon which this lengthy, but well thought out and constructed drama is presented. Criticisms have been made of it's factual inaccuracies, and it may well play a bit fast and loose with some of the real characterisations - but it's a drama, and to be enjoyed has to be appreciated in that sphere. Big screen is a must, it really does lose a great deal on a television.\nURL: https://www.themoviedb.org/review/62a08f2e12197e565ea45214\n\nAuthor: Antoine53\nContent: Awesome\nURL: https://www.themoviedb.org/review/63c6aa4f66ae4d0085cb704a\n\nAuthor: Nathan\nContent: Titanic is simply a masterpiece. This movie has it all. A tremendous score, deep emotion emphasized by fantastic performances, and incredibly gripping and high-stakes action. There is really something for everyone here.\r\n\r\nBefore I continue my praise of the film, I think it has one glaring weakness: the present-day plot. For me, this just did not work all that well. I understand that it was implemented for the main story to have a more emotional impact, but it was not needed. It added almost thirty minutes to the runtime, which could have been used for more character development in the story or to have a more streamlined plot. Not to mention, the acting in this section was lackluster. That might be a hot take, but it was something that I noticed during my watch.\r\n\r\nBack to the positives. The score is magnificent here. The minute I finished the film, I had an urge to put on this score to be transported back to the Titanic. That does not happen very often to me.\r\n\r\nThe performances are great all around. Leonardo DiCaprio and Kate Winslet's chemistry was perfect. They played off each other so well and really sold this emphatic and rapid love the two shared. The movie spends a lot of time building their relationship and the payoff at the end is worth every second. Billy Zane was an over-the-top asshole, and even though it was cheesy at times, it worked for me. The other ancillary cast members did well, including Kathy Bates, Frances Fisher and Bill Paxton.\r\n\r\nThis film is really two movies put into one and both of them work excellently. The first half is a charming and cute love story that spends a lot of time on character development, laying the background for motivations and personalities. While this half may have been my favorite, it is slightly outdone by the second half, which is a gripping and suspenseful survival action story. This section is brutal, showing large scale panic and hysteria while also having some incredibly horrific deaths. The chaos was infectious and very scary to watch. Both halves create a great sense of emotion in the audience and complement each other very well.\r\n\r\nOverall, this movie had twenty-five years of hype and critical acclaim to live up to, and I am happy to say it passed expectations. Since leaving the theater, I cannot stop thinking about it.\r\n\r\nScore: 96% |\r\nVerdict: Masterpiece\r\n\r\nOn a side note: I did see this movie in 3D during the twenty-five-anniversary re-release. While it was great to see it remastered in 4K, I do think the 3D was poor and unneeded. This did not affect my grade however, since it was not originally designed as a 3D experience, and they 3D did not really take away for my enjoyment.\nURL: https://www.themoviedb.org/review/63ef88b95cc11d0086123924\n\nAuthor: Prodank\nContent: Titanic was enjoyable initially, but the constant TV reruns got old fast. I don't even own a TV anymore, and I'm in no hurry to watch it again. Still, it's a good movie, deserving of a 7/10 rating.\nURL: https://www.themoviedb.org/review/650689effa27f4010c4a62ad\n\n"
    },
    {
        "query": "I just finished watching Titanic and I want some other movie recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/movie/597/recommendations\"  # Assuming 597 is the movie_id for Titanic\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the recommendation results\n    results = response.json()['results']\n    \n    # Display the recommended movies\n    for result in results:\n        print(result['title'])\nelse:\n    print(\"Failed to get movie recommendations\")\n```",
        "executed": "Harry Potter and the Philosopher's Stone\nThe Wolf of Wall Street\nSuicide Squad\nShutter Island\nAvatar\nRomeo + Juliet\nForrest Gump\nThe Lord of the Rings: The Two Towers\nToy Story\nBatman Begins\nPirates of the Caribbean: The Curse of the Black Pearl\nThe Revenant\nKick-Ass\nMen in Black\nTwilight\nCatch Me If You Can\nInception\nThe Shawshank Redemption\nThor\nFinding Nemo\nThe Lord of the Rings: The Fellowship of the Ring\n"
    },
    {
        "query": "What is the latest movie directed by Christopher Nolan?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Set the API url for searching person\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Set the query parameters for searching for Christopher Nolan\nparams = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\n\n# Set the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to search for people\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the person id for Christopher Nolan\nperson_results = response.json()[\"results\"]\nnolan_id = None\nfor person in person_results:\n    if person[\"name\"] == \"Christopher Nolan\":\n        nolan_id = person[\"id\"]\n        break\n\nif nolan_id:\n    # Set the API url for getting movie credits of a person\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{nolan_id}/movie_credits\"\n    \n    # Send a GET request to get the movie credits of Christopher Nolan\n    movie_credits_response = requests.get(movie_credits_url, headers=headers)\n    \n    # Get the list of movie credits for Christopher Nolan\n    movie_credits = movie_credits_response.json()[\"cast\"]\n    \n    # Sort the movie credits by release date in descending order to get the latest movie\n    movie_credits_sorted = sorted(movie_credits, key=lambda x: x[\"release_date\"], reverse=True)\n    \n    # Get the details of the latest movie directed by Christopher Nolan\n    latest_movie = movie_credits_sorted[0]\n    latest_movie_title = latest_movie[\"title\"]\n    \n    print(f\"The latest movie directed by Christopher Nolan is: {latest_movie_title}\")\nelse:\n    print(\"Christopher Nolan not found in the search results.\")\n```",
        "executed": "The latest movie directed by Christopher Nolan is: Inside Christopher Nolan's Oppenheimer\n"
    },
    {
        "query": "tell me the highest rated movie directed by Martin Scorsese",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated"
        ],
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Set the header with the Authorization token\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for Martin Scorsese's person id\nsearch_url = \"https://api.themoviedb.org/3/search/person\"\nsearch_params = {\n    \"query\": \"Martin Scorsese\",\n    \"include_adult\": \"false\"\n}\n\nresponse = requests.get(search_url, headers=headers, params=search_params)\nresults = response.json()\n\n# Get Martin Scorsese's person id\nperson_id = results[\"results\"][0][\"id\"]\n\n# Get the movie credits for Martin Scorsese\nmovie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmovie_credits = response.json()\n\n# Find the highest rated movie directed by Martin Scorsese\nhighest_rated_movie = max(movie_credits[\"cast\"], key=lambda x: x[\"vote_average\"])\n\nprint(f\"The highest rated movie directed by Martin Scorsese is: {highest_rated_movie['title']}\")\n```",
        "executed": null
    },
    {
        "query": "Who is the director of Leonardo DiCaprio's latest movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for the person with name 'Leonardo DiCaprio'\nparams = {\n    \"query\": \"Leonardo DiCaprio\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Step 2: Get the movie credits for Leonardo DiCaprio\nresponse = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\", headers=headers)\nmovies = response.json()[\"cast\"]\n\n# Find the latest movie\nlatest_movie = max(movies, key=lambda x: x[\"release_date\"])\n\n# Step 3: Get the credits for the latest movie\nmovie_id = latest_movie[\"id\"]\nresponse = requests.get(f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\", headers=headers)\ncredits = response.json()[\"crew\"]\n\n# Find the director of the latest movie\ndirector = next((crew[\"name\"] for crew in credits if crew[\"job\"] == \"Director\"), None)\n\nprint(f\"The director of Leonardo DiCaprio's latest movie is: {director}\")\n```",
        "executed": "The director of Leonardo DiCaprio's latest movie is: Cassius Michael Kim\n"
    },
    {
        "query": "tell me a TV show recently directed by Catherine Hardwicke",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for people with query \"Catherine Hardwicke\"\nparams = {\n    \"query\": \"Catherine Hardwicke\",\n    \"include_adult\": False\n}\n\n# Call the search/person API\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=params)\n\n# Extract the person ID for Catherine Hardwicke\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the TV show credits for Catherine Hardwicke\nresponse_credits = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\", headers=headers)\n\n# Get the most recent TV show directed by Catherine Hardwicke\ncredits = response_credits.json()\nrecently_directed_show = None\nmost_recent_date = None\n\nfor credit in credits[\"crew\"]:\n    if credit[\"job\"] == \"Director\":\n        if most_recent_date is None or credit[\"first_air_date\"] > most_recent_date:\n            most_recent_date = credit[\"first_air_date\"]\n            recently_directed_show = credit[\"name\"]\n\nprint(recently_directed_show)\n```",
        "executed": "Guillermo del Toro's Cabinet of Curiosities\n"
    },
    {
        "query": "Please recommend me some TV shows similar to Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# API url to search for TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for searching similar TV shows to Breaking Bad\nparams = {\n    \"query\": \"Breaking Bad\",  # TV show to search for\n    \"include_adult\": False,  # Exclude adult content\n    \"page\": 1  # Specify page number\n}\n\n# Make the HTTP GET request to search for TV shows\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params)\n\n# Check if the request was successful\nif response_search_tv.status_code == 200:\n    # Extract the results\n    tv_results = response_search_tv.json()[\"results\"]\n    \n    # Get the TV show ID of Breaking Bad\n    breaking_bad_id = None\n    for result in tv_results:\n        if result[\"name\"] == \"Breaking Bad\":\n            breaking_bad_id = result[\"id\"]\n            break\n\n    # If Breaking Bad ID is found\n    if breaking_bad_id:\n        # API url to get recommendations for the TV show similar to Breaking Bad\n        url_recommendations = f\"https://api.themoviedb.org/3/tv/{breaking_bad_id}/recommendations\"\n\n        # Parameters for getting recommendations\n        params_recommendations = {\n            \"page\": 1  # Specify page number\n        }\n\n        # Make the HTTP GET request to get recommendations\n        response_recommendations = requests.get(url_recommendations, headers=headers, params=params_recommendations)\n\n        # Check if the request was successful\n        if response_recommendations.status_code == 200:\n            # Extract the recommended TV shows\n            recommended_tv_shows = response_recommendations.json()[\"results\"]\n            print(recommended_tv_shows)  # Print the recommended TV shows\n        else:\n            print(\"Failed to get TV show recommendations\")\n    else:\n        print(\"Breaking Bad not found in search results\")\nelse:\n    print(\"Failed to search for TV shows\")\n```",
        "executed": "[{'adult': False, 'backdrop_path': '/hPea3Qy5Gd6z4kJLUruBbwAH8Rm.jpg', 'id': 60059, 'name': 'Better Call Saul', 'original_language': 'en', 'original_name': 'Better Call Saul', 'overview': 'Six years before Saul Goodman meets Walter White. We meet him when the man who will become Saul Goodman is known as Jimmy McGill, a small-time lawyer searching for his destiny, and, more immediately, hustling to make ends meet. Working alongside, and, often, against Jimmy, is \u201cfixer\u201d Mike Ehrmantraut. The series tracks Jimmy\u2019s transformation into Saul Goodman, the man who puts \u201ccriminal\u201d in \u201ccriminal lawyer\".', 'poster_path': '/fC2HDm5t0kHl7mTm7jxMR31b7by.jpg', 'media_type': 'tv', 'genre_ids': [80, 18], 'popularity': 371.891, 'first_air_date': '2015-02-08', 'vote_average': 8.7, 'vote_count': 4721, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/rIe3PnM6S7IBUmvNwDkBMX0i9EZ.jpg', 'id': 1399, 'name': 'Game of Thrones', 'original_language': 'en', 'original_name': 'Game of Thrones', 'overview': \"Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond.\", 'poster_path': '/1XS1oqL89opfnbLl8WnZY1O1uJx.jpg', 'media_type': 'tv', 'genre_ids': [10765, 18, 10759], 'popularity': 994.002, 'first_air_date': '2011-04-17', 'vote_average': 8.446, 'vote_count': 22759, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/56v2KjBlU4XaOv9rVYEQypROD7P.jpg', 'id': 66732, 'name': 'Stranger Things', 'original_language': 'en', 'original_name': 'Stranger Things', 'overview': 'When a young boy vanishes, a small town uncovers a mystery involving secret experiments, terrifying supernatural forces, and one strange little girl.', 'poster_path': '/49WJfeN0moxb9IPfGn8AIqMGskD.jpg', 'media_type': 'tv', 'genre_ids': [18, 10765, 9648], 'popularity': 338.647, 'first_air_date': '2016-07-15', 'vote_average': 8.615, 'vote_count': 16774, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/aSGSxGMTP893DPMCvMl9AdnEICE.jpg', 'id': 1405, 'name': 'Dexter', 'original_language': 'en', 'original_name': 'Dexter', 'overview': 'Dexter Morgan, a blood spatter pattern analyst for the Miami Metro Police also leads a secret life as a serial killer, hunting down criminals who have slipped through the cracks of justice.', 'poster_path': '/q8dWfc4JwQuv3HayIZeO84jAXED.jpg', 'media_type': 'tv', 'genre_ids': [80, 18, 9648], 'popularity': 354.795, 'first_air_date': '2006-10-01', 'vote_average': 8.2, 'vote_count': 3887, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/x4salpjB11umlUOltfNvSSrjSXm.jpg', 'id': 1402, 'name': 'The Walking Dead', 'original_language': 'en', 'original_name': 'The Walking Dead', 'overview': \"Sheriff's deputy Rick Grimes awakens from a coma to find a post-apocalyptic world dominated by flesh-eating zombies. He sets out to find his family and encounters many other survivors along the way.\", 'poster_path': '/n7PVu0hSz2sAsVekpOIoCnkWlbn.jpg', 'media_type': 'tv', 'genre_ids': [10759, 18, 10765], 'popularity': 521.542, 'first_air_date': '2010-10-31', 'vote_average': 8.12, 'vote_count': 15871, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/4q6TBkY0Ilx7WtV5LX8HRqNHr5J.jpg', 'id': 19885, 'name': 'Sherlock', 'original_language': 'en', 'original_name': 'Sherlock', 'overview': 'A modern update finds the famous sleuth and his doctor partner solving crime in 21st century London.', 'poster_path': '/7WTsnHkbA0FaG6R9twfFde0I9hl.jpg', 'media_type': 'tv', 'genre_ids': [80, 18, 9648], 'popularity': 179.734, 'first_air_date': '2010-07-25', 'vote_average': 8.525, 'vote_count': 5019, 'origin_country': ['GB']}, {'adult': False, 'backdrop_path': '/rBF8wVQN8hTWHspVZBlI3h7HZJ.jpg', 'id': 60625, 'name': 'Rick and Morty', 'original_language': 'en', 'original_name': 'Rick and Morty', 'overview': \"Rick is a mentally-unbalanced but scientifically gifted old man who has recently reconnected with his family. He spends most of his time involving his young grandson Morty in dangerous, outlandish adventures throughout space and alternate universes. Compounded with Morty's already unstable family life, these events cause Morty much distress at home and school.\", 'poster_path': '/gdIrmf2DdY5mgN6ycVP0XlzKzbE.jpg', 'media_type': 'tv', 'genre_ids': [16, 35, 10765, 10759], 'popularity': 666.249, 'first_air_date': '2013-12-02', 'vote_average': 8.702, 'vote_count': 9217, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/l0qVZIpXtIo7km9u5Yqh0nKPOr5.jpg', 'id': 1668, 'name': 'Friends', 'original_language': 'en', 'original_name': 'Friends', 'overview': 'Six young people from New York City, on their own and struggling to survive in the real world, find the companionship, comfort and support they get from each other to be the perfect antidote to the pressures of life.', 'poster_path': '/2koX1xLkpTQM4IZebYvKysFW1Nh.jpg', 'media_type': 'tv', 'genre_ids': [35], 'popularity': 557.46, 'first_air_date': '1994-09-22', 'vote_average': 8.442, 'vote_count': 7568, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/rkB4LyZHo1NHXFEDHl9vSD9r1lI.jpg', 'id': 94605, 'name': 'Arcane', 'original_language': 'en', 'original_name': 'Arcane', 'overview': 'Amid the stark discord of twin cities Piltover and Zaun, two sisters fight on rival sides of a war between magic technologies and clashing convictions.', 'poster_path': '/fqldf2t8ztc9aiwn3k6mlX3tvRT.jpg', 'media_type': 'tv', 'genre_ids': [16, 18, 10765, 10759], 'popularity': 109.896, 'first_air_date': '2021-11-06', 'vote_average': 8.752, 'vote_count': 3652, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/lHe8iwM4Cdm6RSEiara4PN8ZcBd.jpg', 'id': 44217, 'name': 'Vikings', 'original_language': 'en', 'original_name': 'Vikings', 'overview': \"The adventures of Ragnar Lothbrok, the greatest hero of his age. The series tells the sagas of Ragnar's band of Viking brothers and his family, as he rises to become King of the Viking tribes. As well as being a fearless warrior, Ragnar embodies the Norse traditions of devotion to the gods. Legend has it that he was a direct descendant of Odin, the god of war and warriors.\", 'poster_path': '/bQLrHIRNEkE3PdIWQrZHynQZazu.jpg', 'media_type': 'tv', 'genre_ids': [10759, 18, 10768], 'popularity': 595.21, 'first_air_date': '2013-03-03', 'vote_average': 8.091, 'vote_count': 6596, 'origin_country': ['CA']}, {'adult': False, 'backdrop_path': '/7RySzFeK3LPVMXcPtqfZnl6u4p1.jpg', 'id': 1418, 'name': 'The Big Bang Theory', 'original_language': 'en', 'original_name': 'The Big Bang Theory', 'overview': 'Physicists Leonard and Sheldon find their nerd-centric social circle with pals Howard and Raj expanding when aspiring actress Penny moves in next door.', 'poster_path': '/ooBGRQBdbGzBxAVfExiO8r7kloA.jpg', 'media_type': 'tv', 'genre_ids': [35], 'popularity': 301.504, 'first_air_date': '2007-09-24', 'vote_average': 7.897, 'vote_count': 10733, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/r0Q6eeN9L1ORL9QsV0Sg8ZV3vnv.jpg', 'id': 1408, 'name': 'House', 'original_language': 'en', 'original_name': 'House', 'overview': 'Dr. Gregory House, a drug-addicted, unconventional, misanthropic medical genius, leads a team of diagnosticians at the fictional Princeton\u2013Plainsboro Teaching Hospital in New Jersey.', 'poster_path': '/3Cz7ySOQJmqiuTdrc6CY0r65yDI.jpg', 'media_type': 'tv', 'genre_ids': [18, 9648], 'popularity': 745.144, 'first_air_date': '2004-11-16', 'vote_average': 8.6, 'vote_count': 6092, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/20eIP9o5ebArmu2HxJutaBjhLf4.jpg', 'id': 87108, 'name': 'Chernobyl', 'original_language': 'en', 'original_name': 'Chernobyl', 'overview': 'The true story of one of the worst man-made catastrophes in history: the catastrophic nuclear accident at Chernobyl. A tale of the brave men and women who sacrificed to save Europe from unimaginable disaster.', 'poster_path': '/hlLXt2tOPT6RRnjiUmoxyG1LTFi.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 124.986, 'first_air_date': '2019-05-06', 'vote_average': 8.659, 'vote_count': 5772, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/7w165QdHmJuTHSQwEyJDBDpuDT7.jpg', 'id': 2288, 'name': 'Prison Break', 'original_language': 'en', 'original_name': 'Prison Break', 'overview': 'Due to a political conspiracy, an innocent man is sent to death row and his only hope is his brother, who makes it his mission to deliberately get himself sent to the same prison in order to break the both of them out, from the inside out.', 'poster_path': '/5E1BhkCgjLBlqx557Z5yzcN0i88.jpg', 'media_type': 'tv', 'genre_ids': [10759, 80, 18], 'popularity': 434.544, 'first_air_date': '2005-08-29', 'vote_average': 8.1, 'vote_count': 4710, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/gFZriCkpJYsApPZEF3jhxL4yLzG.jpg', 'id': 71446, 'name': 'Money Heist', 'original_language': 'es', 'original_name': 'La Casa de Papel', 'overview': 'To carry out the biggest heist in history, a mysterious man called The Professor recruits a band of eight robbers who have a single characteristic: none of them has anything to lose. Five months of seclusion - memorizing every step, every detail, every probability - culminate in eleven days locked up in the National Coinage and Stamp Factory of Spain, surrounded by police forces and with dozens of hostages in their power, to find out whether their suicide wager will lead to everything or nothing.', 'poster_path': '/reEMJA1uzscCbkpeRJeTT2bjqUp.jpg', 'media_type': 'tv', 'genre_ids': [80, 18], 'popularity': 182.036, 'first_air_date': '2017-05-02', 'vote_average': 8.25, 'vote_count': 18165, 'origin_country': ['ES']}, {'adult': False, 'backdrop_path': '/kfUWupX3phYp7AleZA2U1dmVcjX.jpg', 'id': 60574, 'name': 'Peaky Blinders', 'original_language': 'en', 'original_name': 'Peaky Blinders', 'overview': 'A gangster family epic set in 1919 Birmingham, England and centered on a gang who sew razor blades in the peaks of their caps, and their fierce boss Tommy Shelby, who means to move up in the world.', 'poster_path': '/vUUqzWa2LnHIVqkaKVlVGkVcZIW.jpg', 'media_type': 'tv', 'genre_ids': [18, 80], 'popularity': 493.534, 'first_air_date': '2013-09-12', 'vote_average': 8.538, 'vote_count': 9351, 'origin_country': ['GB']}, {'adult': False, 'backdrop_path': '/wZMY9X8jtSS5GXFue2lvhgaJkii.jpg', 'id': 42009, 'name': 'Black Mirror', 'original_language': 'en', 'original_name': 'Black Mirror', 'overview': \"Over the last ten years, technology has transformed almost every aspect of our lives before we've had time to stop and question it. In every home; on every desk; in every palm - a plasma screen; a monitor; a smartphone - a black mirror of our 21st Century existence.\", 'poster_path': '/5UaYsGZOFhjFDwQh6GuLjjA1WlF.jpg', 'media_type': 'tv', 'genre_ids': [10765, 18, 9648], 'popularity': 373.18, 'first_air_date': '2011-12-04', 'vote_average': 8.294, 'vote_count': 4682, 'origin_country': ['GB']}, {'adult': False, 'backdrop_path': '/yUOFocKDW7MCC5isx4FK8A68QFp.jpg', 'id': 4607, 'name': 'Lost', 'original_language': 'en', 'original_name': 'Lost', 'overview': 'Stripped of everything, the survivors of a horrific plane crash  must work together to stay alive. But the island holds many secrets.', 'poster_path': '/og6S0aTZU6YUJAbqxeKjCa3kY1E.jpg', 'media_type': 'tv', 'genre_ids': [9648, 10759, 18], 'popularity': 353.964, 'first_air_date': '2004-09-22', 'vote_average': 7.958, 'vote_count': 3885, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/4ceSkV7cmCon4exXaZwuhW1VdE0.jpg', 'id': 62560, 'name': 'Mr. Robot', 'original_language': 'en', 'original_name': 'Mr. Robot', 'overview': 'A contemporary and culturally resonant drama about a young programmer, Elliot, who suffers from a debilitating anti-social disorder and decides that he can only connect to people by hacking them. He wields his skills as a weapon to protect the people that he cares about. Elliot will find himself in the intersection between a cybersecurity firm he works for and the underworld organizations that are recruiting him to bring down corporate America.', 'poster_path': '/oKIBhzZzDX07SoE2bOLhq2EE8rf.jpg', 'media_type': 'tv', 'genre_ids': [80, 18], 'popularity': 262.745, 'first_air_date': '2015-06-24', 'vote_average': 8.241, 'vote_count': 4333, 'origin_country': ['US']}, {'adult': False, 'backdrop_path': '/75HgaphatW0PDI3XIHQWZUpbhn6.jpg', 'id': 70523, 'name': 'Dark', 'original_language': 'de', 'original_name': 'Dark', 'overview': 'A missing child causes four families to help each other for answers. What they could not imagine is that this mystery would be connected to innumerable other secrets of the small town.', 'poster_path': '/ov2SEqKLm9LNox10uewAonC4hsf.jpg', 'media_type': 'tv', 'genre_ids': [80, 18, 10765, 9648], 'popularity': 192.494, 'first_air_date': '2017-12-01', 'vote_average': 8.427, 'vote_count': 6302, 'origin_country': ['DE']}, {'adult': False, 'backdrop_path': '/lNpkvX2s8LGB0mjGODMT4o6Up7j.jpg', 'id': 1398, 'name': 'The Sopranos', 'original_language': 'en', 'original_name': 'The Sopranos', 'overview': \"The story of New Jersey-based Italian-American mobster Tony Soprano and the difficulties he faces as he tries to balance the conflicting requirements of his home life and the criminal organization he heads. Those difficulties are often highlighted through his ongoing professional relationship with psychiatrist Jennifer Melfi. The show features Tony's family members and Mafia associates in prominent roles and story arcs, most notably his wife Carmela and his cousin and prot\u00e9g\u00e9 Christopher Moltisanti.\", 'poster_path': '/rTc7ZXdroqjkKivFPvCPX0Ru7uw.jpg', 'media_type': 'tv', 'genre_ids': [18], 'popularity': 583.961, 'first_air_date': '1999-01-10', 'vote_average': 8.632, 'vote_count': 2469, 'origin_country': ['US']}]\n"
    },
    {
        "query": "Who is the director of today's most trending movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the trending movie API to get today's trending movie\nurl_trending = \"https://api.themoviedb.org/3/trending/all/day\"\nresponse_trending = requests.get(url_trending, headers=headers)\ntrending_movie = response_trending.json()[\"results\"][0]\n\n# Get the movie details for the trending movie\nmovie_id = trending_movie[\"id\"]\nurl_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse_credits = requests.get(url_movie_credits, headers=headers)\ncredits = response_credits.json()\n\n# Find the director of the movie\ncrew = credits[\"crew\"]\ndirector = None\nfor member in crew:\n    if member[\"job\"] == \"Director\":\n        director = member[\"name\"]\n        break\n\nprint(f\"The director of today's most trending movie is: {director}\")\n```",
        "executed": "The director of today's most trending movie is: Matthew Vaughn\n"
    },
    {
        "query": "Who is the director of the movie \"Twilight\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Twilight\" to get its movie_id\nmovie_url = \"https://api.themoviedb.org/3/search/movie\"\nmovie_params = {\n    \"query\": \"Twilight\",\n    \"include_adult\": False\n}\nresponse = requests.get(movie_url, headers=headers, params=movie_params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the movie \"Twilight\" using the movie_id\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ncredits_data = response.json()\n\n# Check if the director information is available\nfor crew_member in credits_data[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director = crew_member[\"name\"]\n\nprint(f\"The director of the movie 'Twilight' is: {director}\")\n```",
        "executed": "The director of the movie 'Twilight' is: Catherine Hardwicke\n"
    },
    {
        "query": "give me a photo belong to the second episode of the first season of the Witcher",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "results": "```python\nimport requests\n\n# Set the API url\nurl = \"https://api.themoviedb.org/3/tv/1399/season/1/episode/2/images\"\n\n# Set the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the response is successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    # Get the photos of the second episode of the first season of the Witcher\n    photos = data.get('stills', [])\n    # Print the photo details\n    for photo in photos:\n        print(\"File Path:\", photo.get('file_path'))\n        print(\"Vote Average:\", photo.get('vote_average'))\n        print(\"Vote Count:\", photo.get('vote_count'))\n        print(\"-----------------------\")\nelse:\n    print(\"Failed to retrieve data. Error:\", response.status_code)\n```",
        "executed": "File Path: /l0GJx3IR8YasbztTJi5uK0XqkEo.jpg\nVote Average: 5.384\nVote Count: 2\n-----------------------\nFile Path: /1kdHRLs05ia0E9X3Hi5Ts5Sc1jk.jpg\nVote Average: 5.312\nVote Count: 1\n-----------------------\nFile Path: /hBcErC6KDly9mZ2TYWUSwdcb0hH.jpg\nVote Average: 5.312\nVote Count: 1\n-----------------------\nFile Path: /icjOgl5F9DhysOEo6Six2Qfwcu2.jpg\nVote Average: 5.246\nVote Count: 2\n-----------------------\nFile Path: /4mjUsO5RiHoYbSjmjUzpgPSLwLS.jpg\nVote Average: 0.0\nVote Count: 0\n-----------------------\nFile Path: /rZCW3L4d22iA1DOkDb5fqRgpnpH.jpg\nVote Average: 0.0\nVote Count: 0\n-----------------------\nFile Path: /fb4RyKsX1Zjj310Wq6Z888UIQqi.jpg\nVote Average: 0.0\nVote Count: 0\n-----------------------\nFile Path: /1ThrlkkkBccfQrIgBcQp1tQh6m5.jpg\nVote Average: 0.0\nVote Count: 0\n-----------------------\nFile Path: /2iSzWMwGSCLzNkoa28gSbYOENys.jpg\nVote Average: 0.0\nVote Count: 0\n-----------------------\nFile Path: /4xGRwaINyXxggcl0dO8IXGlX4Yq.jpg\nVote Average: 0.0\nVote Count: 0\n-----------------------\nFile Path: /16Bu0ySNa4DF6gdU8V7jnXjUYtK.jpg\nVote Average: 0.0\nVote Count: 0\n-----------------------\n"
    },
    {
        "query": "What is top-1 rated movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Given API URL\nurl = \"https://api.themoviedb.org/3/movie/top_rated\"\n\n# Parameters\nparams = {\n    \"page\": 1,\n    \"region\": \"US\"\n}\n\n# HTTP Headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Parse the JSON response\ndata = response.json()\n\n# Get the top-1 rated movie\ntop_rated_movie = data['results'][0]['title']\n\n# Print the top-1 rated movie\nprint(top_rated_movie)\n```",
        "executed": "The Shawshank Redemption\n"
    },
    {
        "query": "What is the release date of the movie \"The Matrix\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular"
        ],
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Searching for the movie \"The Matrix\" to get its id\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nsearch_params = {\n    \"query\": \"The Matrix\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\nif search_results['total_results'] > 0:\n    movie_id = search_results['results'][0]['id']\n    \n    # Getting the release dates for the movie with the obtained id\n    release_date_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n    release_date_response = requests.get(release_date_url, headers=headers)\n    release_date_results = release_date_response.json()\n    \n    # Extracting the release date from the response\n    release_dates = release_date_results['results']\n    for result in release_dates:\n        if result['iso_3166_1'] == 'US':\n            release_date = result['release_dates'][0]['release_date']\n            print(f\"The release date of the movie 'The Matrix' is: {release_date}\")\n            break\nelse:\n    print(\"Movie 'The Matrix' not found.\")\n```",
        "executed": "The release date of the movie 'The Matrix' is: 1999-03-24T00:00:00.000Z\n"
    },
    {
        "query": "Who is the most popular person?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API URL\nurl = \"https://api.themoviedb.org/3/person/popular\"\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers)\n\nif response.status_code == 200:\n    data = response.json()\n    # Get the most popular person\n    most_popular_person = max(data['results'], key=lambda x: x['popularity'])\n    \n    print(\"The most popular person is:\", most_popular_person['name'])\nelse:\n    print(\"Error occurred while fetching data\")\n```",
        "executed": "The most popular person is: Jason Statham\n"
    },
    {
        "query": "Give me some cover images of movies directed by Christopher Nolan.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for person with name 'Christopher Nolan'\nquery_params = {\n    'query': 'Christopher Nolan',\n    'include_adult': 'false'\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/person\", headers=headers, params=query_params)\ndata = response.json()\n\n# Get the person id for Christopher Nolan\nperson_id = None\nif 'results' in data and len(data['results']) > 0:\n    person_id = data['results'][0]['id']\n\n# If person_id is found, get the movie credits for Christopher Nolan\nif person_id:\n    response = requests.get(f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\", headers=headers)\n    movie_credits_data = response.json()\n\n    # Extract movie ids directed by Christopher Nolan\n    movie_ids = [movie['id'] for movie in movie_credits_data['crew'] if movie['job'] == 'Director']\n    \n    # Get cover images of movies directed by Christopher Nolan\n    cover_images = []\n    for movie_id in movie_ids:\n        response = requests.get(f\"https://api.themoviedb.org/3/movie/{movie_id}/images\", headers=headers)\n        images_data = response.json()\n        \n        if 'posters' in images_data:\n            for poster in images_data['posters']:\n                cover_images.append(poster['file_path'])\n\n    print(cover_images)\nelse:\n    print(\"Person with name 'Christopher Nolan' not found.\")\n```",
        "executed": "['/b4Oe15CGLL61Ped0RAS9JpqdmCt.jpg', '/y8nvZPcNzuAIjWjplDiPeS4WZ6c.jpg', '/1VOKlC35yrwVKlfBSN52NY4zoF2.jpg', '/79mvAsULqtLpQvg5zYxgkK1Yohu.jpg', '/kO6ewhlh7OIGRRbHwylDafEM1QG.jpg', '/ebSnODDg9lbsMIaWg2uAbjn7TO5.jpg', '/zx87sFGLXZdrSF4B9WPhwjaKuQP.jpg', '/8TbAQlEpRG2EQsjMNR76IYGNuki.jpg', '/e6yYRoEz4WoHIwcCaRTcQrAmaKG.jpg', '/sInkpq76Q9L3JOEXEOVEQeJTjGl.jpg', '/cCH4jLoZCklH3rgqnvatjR7Q1AL.jpg', '/pEuitXhT6LEMOZuEvB6ecAaVa1m.jpg', '/m3xR365ajZrTN5vm2xf91L1zplv.jpg', '/3ldmcbmoQ6A9dUwphrwWxXIYQZM.jpg', '/maCv5pCoqp8mwWIxZmejzH5aCS4.jpg', '/ppqNQckAPwjVisCg5VPpdUBHxxb.jpg', '/l7sMTjCVqchwVAz6Kupm1bC62eP.jpg', '/iWzrUYxUfnpmLbm0rwyGKuFwpTO.jpg', '/lsJ6fO8rXfTr5tcJHmJomru9SS5.jpg', '/iz7bV07QjC7Ero4msP5c9usJ3Az.jpg', '/t1LPjG9KNQQSX156XtXPxn8vIm2.jpg', '/ruayowvFykAbSJr5cVNRb14KXZt.jpg', '/k6zHXaXXBSHyExTWxk6N2dtkh4a.jpg', '/QKPYFn2IS1t2neqv6hkFfAhQCc.jpg', '/r8GRroYelxUID8dOxcyeNKKol6W.jpg', '/zPRomhANBqtY8XSb9y4f2o5nHzp.jpg', '/za5q8ZKtUj3lGazCnPEDbhcp7Q4.jpg', '/jSwp3rByt0iG3LwZbrMlw40wvZP.jpg', '/3lc06ptVbouEaZyjdHfCzmIm6v7.jpg', '/sC8ci4k90aeUw7Yfd3HBlQIWBMw.jpg', '/zHqzQyu6AyAZ0JCVaYmLQGfGduQ.jpg', '/iwvcIamoONxy9yB2td7yjRcbTQ2.jpg', '/cvyJDi3hP4G8knqNSmodfnJW4Wk.jpg', '/uHBAkhW91dSHjmvm3NaVGszDGwM.jpg', '/aWPRZvXOo5MmdzXwVNqnPf4uOxm.jpg', '/vvabU7mZkohtB2yeEcVV6PcE71C.jpg', '/ggx11MEouBJgReHeWKhVOebSCno.jpg', '/zzHmycY21doYxLt2bDnhFr8xLo6.jpg', '/wMGrlJ8TGuB77jcLISUWiVlG1vY.jpg', '/cUqEgoP6kj8ykfNjJx3Tl5zHCcN.jpg', '/jkFghrF0sHmL2aPwS8fpUINOzo6.jpg', '/53qrLADLqLsGoLVGaAkpe6The0K.jpg', '/a0FWEv2NXw8zCgdCYAcI3x1M2iB.jpg', '/wHK0yX54svEWqlLNVMjoHcXXijq.jpg', '/pcVC6wvEVodaUxkTsUkXlgVrXHF.jpg', '/ii5CQ1ajuyvZlC60Q2rLFJT13UV.jpg', '/8z17OrgHGepjgyKvxIX9w5i1cBm.jpg', '/1zvQOnISwPx0jACHEqUa93WP1yF.jpg', '/b5i4fvzOBc9mTu2J29RDsqmdvaC.jpg', '/jX2GDUad2rHelr5la31MmwiL06T.jpg', '/ltbTYAXBohdIHqC72RxthWWMR8S.jpg', '/4Nw3VyTcZGgk58cJxf5BJGdBU7.jpg', '/Y9KbriUET6fnsofAOvwDnXonI9.jpg', '/bP7sTFJSRKdO1PqRXBkdr7QJG5c.jpg', '/mtXqM8rjL9rwAs4V0LxKpkZ1ca1.jpg', '/qqe7SdnqKdyuZ4txNo7UzszU8RR.jpg', '/AkEkRv6yGDKxtPaO5cta6svr8em.jpg', '/7G1swFcaEE5IOC1c9vhmsNwAnBn.jpg', '/tCrBCNzwvFpbOzpakrIzE7urv1h.jpg', '/bcukXXsDE6E1uwN9uT2a7o0IkJ3.jpg', '/820AaUpKmLqc7KJePkPUf0xWmZT.jpg', '/yAznDPQlypuw3xuPzB8mwZ7thOF.jpg', '/eHpGqOrkKcxOsjqTVU9XiRA9lBu.jpg', '/zsR6BLC3bqBpXnOVO8GAcltK5v5.jpg', '/koF819pZLTVJDKnXTbAjsCWByCj.jpg', '/b8nDCzjLwOOK84QQ8IOBSXKVYmH.jpg', '/jBMxV0Ufzn5zhhavrwmcwUPTQo1.jpg', '/emdQj6jFZ5KmoVR6z3GzPlUEAPR.jpg', '/kO2XxxuY0zHv9Xzi75tbb0tH0qq.jpg', '/irV3zgU4sxBLiZsRaJkUsFTIWiu.jpg', '/z8yFLxSTrKsVl0LnKkRp7m5jHGW.jpg', '/nGtEd7mQ12lJyeSvj6rQSzy8sG5.jpg', '/2FaEoBZkjkmeocMpRrsB4C36JZ9.jpg', '/6vbOiVLl6yzDrcmX5tziUY337O.jpg', '/4oBdVk1ndVAyU9vieLMQDjTR0Ja.jpg', '/qgISWc2owsFwQs65h45FyTpecfr.jpg', '/xWeehULdRScOlKQjvGHacs3T9F9.jpg', '/li2TmtEDnl9YiKu0EabKZ3UN2OD.jpg', '/4nk6rKWPFafh8XEOsWEL1iuqeBR.jpg', '/vBw02gViFMiuhmQBDXALhxDCoDs.jpg', '/rirlZ4Glx1IdtCnwGmax6t65KmE.jpg', '/6OXM4vZiHI38tdzNl0eZBcnJ6Py.jpg', '/hfPZSSOL9Lx8B5iSDob9ZzrWKmG.jpg', '/5YRk65QJV3oWTO0pzvMhUwHM3H8.jpg', '/wgbLSRE4hx2E2u4KC05dLejglvZ.jpg', '/uvp9JwfkHAfY98IKCVyW3wn50R5.jpg', '/rkydrPu5ozwuubWUxyGM0wBd7Zf.jpg', '/adGWCFQtxYrzJDbVfsXqJd6An1f.jpg', '/iVLaWEt8lVm8DaWb2yFX0gZzhT1.jpg', '/70n4Y3GW6BbwZf8TMspkw2S3E9.jpg', '/a45twTYksQoA7FQxHdrPbhmdymS.jpg', '/vOYYPbQwmNiFtuCZxepC5jSedK2.jpg', '/ozZUzjUrkTHm1DsXmxq5Szr33uI.jpg', '/oV1orpEEyAG6qpYvx0eXLiMDOB5.jpg', '/qRtqlnvcoWIL0Uma3HA15Ll84I6.jpg', '/ibsAJmQFKIGD5045jHCtUjZoG5V.jpg', '/xqpBQsx1pLgmCZmvlm4gs7Xkd6L.jpg', '/71bgUB7aDOX2c0KdItL7nHS5V7Z.jpg', '/m85YWSaKOQTGd4P2iDPrdx9MWle.jpg', '/cn69SQZ7JU5jGXespkOuTT4dWcN.jpg', '/uWp1gGlzks1Qbn4CRD53bwd1cYP.jpg', '/m72FNxY3or8guz8fQeR6k8rhqIm.jpg', '/477Y0JBPosetXaAq3F4JKS5cJOT.jpg', '/xYsBhycaMctERkAryDnxzbhvLNd.jpg', '/6UOBMm3SPyQwhjXg3JAuimhKH1A.jpg', '/bUVnHhgs623J25hQKdXj5HB4TV5.jpg', '/bJjDuoXQwoKwf8Ikqw5fG93SccC.jpg', '/sOV8Gs14hn3tItR9iRsT0zVXaN0.jpg', '/6mmR4jIx4lbcAlMq5jUwoxQBUNl.jpg', '/hJfvoSRul0vA8buvGEf8Y0nSMLj.jpg', '/izwq3XnagOtZG2tjTikKmWD72Gr.jpg', '/ylIWpIzgtj8Kgu2LAttG91SAOEj.jpg', '/jxeyKW2r6UJy18dJOsWnNcaO9ug.jpg', '/dEpzOsUsVOthJO50EeUV6c4OzOo.jpg', '/6DNV7P1dELhmXMTovH5nmX1chcx.jpg', '/47Nt9FTKaibRT59Jt1C6kFrIUul.jpg', '/eD87eLlEBnu7YVq1mml7Ta6vraI.jpg', '/rbIaxCfEXhKcs81cDoRciWeZbWu.jpg', '/cqUG42ME8SPfrCIBftZCTy0dIvx.jpg', '/fC17drcQkvLoSfFssEtu0nEH3Cs.jpg', '/3ZEJQbwgwr1FTEMm7gWMkTgwsZe.jpg', '/ae18mE3HWOnuiCtT0Bu1REsm2wl.jpg', '/sv1AZIcH1tLV6bcHsyouNVM3VNy.jpg', '/jJ1H0mjM9qQTv5V52RdlKvOIWMF.jpg', '/4VFkZEUnqwYYiWIoweufYEH67lE.jpg', '/5dfGY1MiYj93BC9FKMe1K1sOJAh.jpg', '/6LPkJO0phMVbuNld3jzLgoQcaYI.jpg', '/yuTd4oGNt0jlT623ElJTOCZIzoK.jpg', '/iUw4Qp5EwnLRihy5V7vGBohdwo3.jpg', '/4IJjdiRxMdnYXojJCNeUzwwXkUK.jpg', '/fbRhW1nrxIE3nwb5ByfIIQkgUni.jpg', '/8kK5FHLTrKHRT9UJvRnMlvEhvvk.jpg', '/dhSlbHJU9qGruyPmupchkDV41kc.jpg', '/mJgVk2lvmvZtwQwfq7H71fs1xVQ.jpg', '/dQ7pAZt4vpYA04dHpOOqYfhADuS.jpg', '/vYPgI0pGfiJOI41JX4lN9c70MCL.jpg', '/pvAYIDWwaQglnKjJGIGwDq02vzA.jpg', '/gqvkZN4yJwaWXLdawiY6SByPNgp.jpg', '/bVsNuqh2hPEiX17xmUEhA6726FF.jpg', '/8TjRK4ltj94BIq6d5N3aUPJSnrB.jpg', '/obQY1Ey2M5txxmJZfYSFBzPyMXX.jpg', '/spqqZhj0r8VM62hLrv3DwHyyG8E.jpg', '/jmtTd2RLeIK1JXYhZ9EW2Byj8i9.jpg', '/iXQUHNghW2FsOxWifI1wWx87XOQ.jpg', '/7wSj4SRrmiuB54VGXKNB2X0RzQt.jpg', '/jkTXanEbEreyPBfmJXabl4vErOz.jpg', '/8rTv325KOZLFjlvYW8r2wVFjHIh.jpg', '/1au2MtEbzmr9WKRnv1w5ZzX0Zbg.jpg', '/8fVpaUhCszes7r9EPtQLIvhBJfw.jpg', '/6nVrUvOygBS8hS4RWClRKYhkN0a.jpg', '/oDdYBp1ekTO2ELJwb6SNQoC9Cua.jpg', '/p3HyZzJYgw35OJj06OnojkAIjdg.jpg', '/5Pwoe5rZwYcLEmo3CyeWMND12Sp.jpg', '/7gmYun3b26zyDRDS11Lef8FkAgA.jpg', '/j21lDOxiJBOoW8ApfVvilSow0GY.jpg', '/zKJYwNZ38BmitETM9ttkG8rvjSF.jpg', '/tASJpacWyivVyRnUahaxT2cJg5L.jpg', '/3VijrH8284v86IO3AjG24Ri2jZ1.jpg', '/72SOtZnFhCumLRZhoXlX8g2IkgF.jpg', '/k68nPLbIST6NP96JmTxmZijEvCA.jpg', '/bHUmjIqaAAjrQ0p8RqagHgCmG7N.jpg', '/AdkXPG1dBkd8VnuzQIyzh6B2o0X.jpg', '/IveefzhRc6Zdd5gzQw3VFjitZP.jpg', '/iKXqUiLFDgeIGozRR6JYRvFmD5A.jpg', '/hzvQVjmagnpOd1haaJq6IPJI3es.jpg', '/2olsZGB9vcazEoQUI1eoD7NaBXI.jpg', '/aCIFMriQh8rvhxpN1IWGgvH0Tlg.jpg', '/qs13cxcA7tVTBq0WcgJ9GGplXnK.jpg', '/1jU80STrosbPsiNe3oPpwyS5cXg.jpg', '/ylQRi3edixhzUiubw7LQP1YhI6W.jpg', '/4ISu3R5OQQ39aWCzWWYrB9reSQD.jpg', '/ApP2sz8pMkPC5xRlFa3l6MjQINB.jpg', '/naWwLNGj1cQ0nVz5Ap6CC3cl0RU.jpg', '/buSr2RIxzJ5Zh6dLaLBsqAdvz3I.jpg', '/3nNhvoImY5xos82ZLMhv1jGucGM.jpg', '/hsGsdJnjvdXdqXOJyLiJHVecAt5.jpg', '/oEPLD99jMDtX1HabXB4JbHhkGWS.jpg', '/VBEruSTMZfwj1VFqMqGXBqLOro.jpg', '/kjMSOw223FtsdMzEOCUvTnyDPFY.jpg', '/cRDUa63MeEpOWdqZeXqReDz7KTx.jpg', '/m2Lb6a38TJbjP9py0Wjml6JtIdm.jpg', '/qG5B4146EZHoCRlwYgybl2C060w.jpg', '/8Rat9OEsG5Ys9YxPoLpFSwUT3Ct.jpg', '/Ae0pbv4E6YfqfN3UjKWIfQSzP9v.jpg', '/r4aygO7YvOVIl5r9xg5NmI1M6bV.jpg', '/oRkLA2EkXaRLmK63BkvK74G8tC4.jpg', '/wRlgk7KLJNUd1Kgct5FimlGgviK.jpg', '/oh8XmxWlySHgGLlx8QOBmq9k72j.jpg', '/7wHx4Vk0NExuzZuGk2KRuc8Ogw8.jpg', '/q8Py71q2dnjdZOoB6BGcUkgmy0d.jpg', '/rrKH3VhHssGTCfPuaEQkxvEoElv.jpg', '/jFAi1Uv3JjNPEgjKuneG5mBlAvA.jpg', '/jutsxphSGbnpxpGr23xzbf2ziQZ.jpg', '/igGF5CJwfsHBXO515sQbHmEwwKb.jpg', '/8W7GrgHc9FdfFhExGLSD8woZaSd.jpg', '/pBtBqPcNocjYEzVqSOzW5HQlx0E.jpg', '/n0zcpLDR6cbmPgWrIWTleGeI24j.jpg', '/zukO7q7I4kBQhEMZFSnDkVx6rm6.jpg', '/20OxuK7i84dlrYLZkWXCYD595bZ.jpg', '/w93KBwtAyLRHSwPApC9ojVbblz3.jpg', '/hTAIqYYXDHqe8xPFV5cH4ElxCqb.jpg', '/iGkkhRzdtzg56zbCOpIi9XosVps.jpg', '/sJfBFmPBgBuE4bn6LeGzt3548wc.jpg', '/gXFO3yijIcE81ToS8fex5fckQs6.jpg', '/bbsLQa2MFfjkKN1jiLJniuoVmnr.jpg', '/e17TGZsyJuV8SoSmjBpYyxpWDkF.jpg', '/m96dj44zZJ8TxpaMZDJv63TldZh.jpg', '/26UM1gxWL7siq8TdTWVoioirhiz.jpg', '/dj6ji5YuvYK4TqfrI7N3EwoRstA.jpg', '/fxWdGXi70vp3FmMwVUgaFOuz7p5.jpg', '/t20YrhZQzVKTcUarWb8hvkuVdhR.jpg', '/953c71N8KDhL0FGfFjbHltwVmNj.jpg', '/gr8rLs4QSu3c7sksYxUXqAvjTtL.jpg', '/uC2Us1kfVCbTfx0rvqwqgIIjDeu.jpg', '/ba6WSxKmNzfeK1XnfrNDYfU3rJN.jpg', '/z1NOLVngacgijfaInk6NH9teHA8.jpg', '/yrp3FwZnPk76nB4YTnVCRkLUWA8.jpg', '/n1It9EmM9R10Z3NGTQFiG1aodpl.jpg', '/9hMMIbz0Aw9zO2jXoJZPOpBiCtT.jpg', '/deLRaMU1cYxp169iIqh0Pt6MbgN.jpg', '/o4WvqfFGUKIqrGqCRPQQN4LfwPn.jpg', '/y0oS0FUbEeeDJ7zB2KneCeGBE0W.jpg', '/51gY7geyCQ7RsFMsySUcBShd1jp.jpg', '/qEFP7olEpveUjQoJBlVL7jYne5z.jpg', '/658wTC3V8AvrdZGiUKqLzFmbnHq.jpg', '/zdV05nwIfPUkJaqjENtD1Bz6dqD.jpg', '/yp8DRbAnJHunlXsrhTppHAezliH.jpg', '/4l7xavwBLzMO7XDuUSTIWS5xFbv.jpg', '/gD60HrHf3E1muyaBTiEZVSsqq3Q.jpg', '/vHBk4t6Wf777uRxTlypF28RdLc8.jpg', '/VarFilyykk24q2TM72DRGQY7Z9.jpg', '/6bBseBvhfnQwWVZUNdyKzDJ2ND7.jpg', '/3oNEdly8PgenWhQSHLZBBFXL5NZ.jpg', '/p0F78BfKkX9c3JnZILgZe0IFbjh.jpg', '/jvuXK03Tvq8Ttr4VbvjtbpNv8sV.jpg', '/68hZXVFkFGQ7KN3yjPBa5bcLyHf.jpg', '/dFjRYABWTsUmLdhnxEjWtiVGUQc.jpg', '/s5jxwhLPGI4Xow8GXwenzL1MkwF.jpg', '/5egQdoW86PIeMGbMQsaP17LTUGF.jpg', '/79n0cePpWjTt8Ge4BRQB87WL0lC.jpg', '/AtBOlZVuzeIHmlLxBi6vKa7LxSX.jpg', '/ve6nayrO4nCSV7f4kJtyDnRDZXj.jpg', '/bnP8QQWIHAjz8lyNXyP1aIC9gQy.jpg', '/r3576fzKQ1N5mlwT8jZuCn5Arwb.jpg', '/vspWqZ3YR7MR1njlehqNChhsJbY.jpg', '/aVIT5vpLhRRG0yfTWSqahSuUBy7.jpg', '/als8ezMfZQOU4qCPmWY4fE3dAYQ.jpg', '/q3VwIHJifJqW1aB13z7ypYLjIR1.jpg', '/g50V0IpNnA9aO2KzUsWx1IOGbl7.jpg', '/4QUBQUtHfGVOPA5FJr9ylj7qfk4.jpg', '/ufxaLyyrpjKTBf6s95xDMMBFhv8.jpg', '/2BcA6OuvAcZYGHYT9cGnz4OaG5w.jpg', '/wi5c5ui75273L8Xy7utfQ338JVM.jpg', '/ikH6hPtVBAjDJrfEPWV0WsdZOou.jpg', '/rvFPyynleFmssvkHkETR5dfA4wQ.jpg', '/3ethyYcHylFB0MQaR9Re8XipD9Q.jpg', '/n43gtda4d9MpkQOJuDiZsghyuDF.jpg', '/zyhbCFImhQZGUpaR0YxQo9cS8ug.jpg', '/n3r7TJ4Jg7IMLfjox9DKf20INrM.jpg', '/iFuUdZ8Sf3aUloLrwRkE9eZe9qn.jpg', '/lvGVvKUNjkYMsCiWRQvx0zmOSgf.jpg', '/wUFgurjdZ0CZLOpDddED61LsECp.jpg', '/67p7XVP5SLup521iD9cAayMNt2U.jpg', '/xXnu79NXmxeBel3GN5Q35r5M9IH.jpg', '/9SG06mt9sdAKPSV24ZwSC0BTJgP.jpg', '/gPHolElXk7RZIbtH5DZYy4x89KD.jpg', '/4yap6odXTCy4B5i4yj26CX0PP5u.jpg', '/fIkVbwSgIbtQoTXoPQFWQQYbTNo.jpg', '/r3RN7MhELaLa1TswnruOguVpbti.jpg', '/4FcXo5SMDxx3xs6Gy4Hn8ghubjF.jpg', '/gtbcNREppG3EtlWPUSBgvQX3wLl.jpg', '/aqeFTqYgC8LkYUcCP9kPw1mVW38.jpg', '/wqgyAiTZwCJglokIViEwAMk6UXR.jpg', '/yj2fK2noJy7IeC7IF7Ck89rGYOI.jpg', '/miydFfLqKN52EG0cRqX3DNVxTEV.jpg', '/lM9LUM7oJ9SekpzLxLGp64ACRBr.jpg', '/vTq8Sq4BJopStWGxDcAkmNThxdM.jpg', '/fZDEaSzIez8VlPs0s0P3qKRshaE.jpg', '/lX9WdoJGHMr7pVyV7FNI6dA3M8j.jpg', '/k9HBfQwoXSTZgw4O6SeuVBYUgiY.jpg', '/hPWQxw5dQH2nKvC8m15aEJvIeJ3.jpg', '/lRsEThuzrJuuvj6oCDDXDAxLOFF.jpg', '/9Nqx2tMrrksmq9aO5oSO0NzUEAf.jpg', '/rskwnqit2uNIGzdaRiK9xlDIcdK.jpg', '/aHt13urK4fzrOr30yHVmGT6OsE6.jpg', '/4xbiHTdPSlVKtYpTu4nABh9HfGH.jpg', '/jeHQIDSIa4vJBQPztVOHr39Z6ah.jpg', '/dFafJVFABS5A0rZ5gThMHO3lH8V.jpg', '/lhauCTw99l7NLHNMnosVcM9AR4K.jpg', '/3axgBjjEgEm0BFWViSkfuyBQcab.jpg', '/iN8mhL0vSIxsTetkmE3XsJedvAv.jpg', '/1haRSMcIshKnVUljJF6sxr0luH9.jpg', '/eMTAAOl7t37LXSfmmwQgZUQjjna.jpg', '/qnoKl9QhIfQ9ooPAltuAQgO4PdQ.jpg', '/k2hAyRUMu2yMWImzwJ0be1EK4mA.jpg', '/akyYzv6aF8EpIFp5Q7J5gBwOPys.jpg', '/azzqSt3XPpRRIYyh0WT6rs2BCe7.jpg', '/nSaf4wrXgifAZZ52ncKuXBuR989.jpg', '/6yEC8Vzeb8Jb2v92WDDlwE7o6Qp.jpg', '/vrXFOYjBMXjsVgTZTNGvX5cwsVi.jpg', '/8rmXY2DH0emfwwT1hsoGkh91bTR.jpg', '/n8gzKzi8tvpTZh0Ev8B5c5T6Lm2.jpg', '/incFPFFoGrnDR6xRtEACqkug4vN.jpg', '/sdS5LoMq4ELi9oPJdqDkn3nY3Jz.jpg', '/7iUA9SKVHzplTIxkXsVshlAYCtX.jpg', '/rpfDaRMIbEXXHXN7EfNkfLqQe0b.jpg', '/bngxk1DYQD8rzkXeyDTf9afqQS2.jpg', '/jDO05iH7DkjEkTiZcLvT9MAID3k.jpg', '/eQy2Dceeeg31cpLuLxyyGwHgq3N.jpg', '/uG3LanNAPENQSVWzSCSBMzJ8vEI.jpg', '/wdUzLcYKDuEk5hRQBy4GPWaWsU9.jpg', '/ywl38WqU29S8S9w6h1foR9jYyRR.jpg', '/f6IjjhzR3tvPCKhWAybsyGgF0aj.jpg', '/g1fDu3g7BsEScobygmBiZB6y7HU.jpg', '/jlOxsDp0ehXpYjymkzza9NCrTe7.jpg', '/ggFZHu542Iy3Uswh3iydOnrxQaP.jpg', '/e8xHyx6xnvwOEJyFF7cyyJ8vBg2.jpg', '/lrFsBGRdZtLNpMYPiQLu6iQFi0M.jpg', '/ggm8X8fgwoqUoIqE8QDcKxScLlW.jpg', '/gyMGax60ToZCkoKOKEkTDEzfUt1.jpg', '/WukyEfsKP21vRahgU8oAPwFsj2.jpg', '/GqAWQHdEHS0dzyTfGFGXJtIaq7.jpg', '/tVe3xHC97imJoyfZ1KaE55AdngU.jpg', '/epoids15egPuq933RvT0Y34L478.jpg', '/ovMjFDybSgGTkeboRl7NW1pxQwJ.jpg', '/2IRYjm9TPKOcAN05JQI7p83OYfc.jpg', '/8hGCmXRQwg1oFRPSoELXb5Y2qMy.jpg', '/zDktJ7HvvPmQfmODoQr82Vqixas.jpg', '/trcTyjkrPtJOs3VAhsKg4VXD4e3.jpg', '/1Kp80UumFADxoujem4f9XUdorns.jpg', '/c2JahdNbxE3tnuqkHzc0PV5mmaf.jpg', '/uC8TeYMb21Wbp7vBJxkdLSCVowF.jpg', '/dXEz6T9l4beYMLFQCz8CaxGahrA.jpg', '/45xZh9ckG0G1G1KDo3b3SMpCepI.jpg', '/qA0AXOdnFdEqQ5QOkXpPNBJsSaC.jpg', '/qJ6BS0pq5MmHt9eJRDIOpI6HQbr.jpg', '/zpIqjUYkRHOECYjrNIT3Q5n8E3I.jpg', '/2y9JfYSDiFLuQE883SpHjsqg725.jpg', '/pnK4oL7yhFVAvcIDgTw2qvxmcQq.jpg', '/qijkW9NBsX620z2oIO5rSIMgkZK.jpg', '/2jh51rEBFF4xd01mFeVaIuEB5Zs.jpg', '/wY5ADCiNmcriq4ztk8vFdmLLPZa.jpg', '/mlOQtpJ21PwrhJMWT82HTcR66f1.jpg', '/gqXcpvR0XbaAKdjUOFyhMnMYyCh.jpg', '/3p4m0xZDxEiJlMtfaBlJrDoRd94.jpg', '/ikprp0ljmuqwAKVF7loD0RYB1R3.jpg', '/t6Ci35eRRUgjheNjwvDlnZasLAz.jpg', '/vqPN7tSObfi2samod5YMWk3hd1T.jpg', '/f9zhIg8M1X1tFpHFUEA3scA6OYb.jpg', '/gfK480aiP5YP6LOLMcGwuCqUwod.jpg', '/4hyLO3l1QPnaL8nelSF9gcQP6Zu.jpg', '/5ie13iRwU9fwpNlaSvy10NJQdob.jpg', '/ofEnRAtapT6QDNQRgKRnEkGi9TJ.jpg', '/w2PVxCxX9uXgji5XKBjTh6ZYV5k.jpg', '/biB1eiXO8Gtlm3f9V6qztEOipCw.jpg', '/c9o3YTki4jE2KBn2U2JypADzi3l.jpg', '/k2az1QwAcRojG2DkMgq547cuUtm.jpg', '/rGMA2oKiBQJnCiyk1jTFripWnh6.jpg', '/osnMHdJcOtRn9Tt0UStGmjSW8a3.jpg', '/e6rWRXmXNIAbhLTxxWyL47Gl83U.jpg', '/eS4JP1cUqDDxSCl0SZ7N8fi5DDi.jpg', '/9kw2rw8qDeNBsyfaPQ9X2AVyI0Y.jpg', '/fmMkJ2OK8Kil3RDOErXeFyfp3c9.jpg', '/pHgdMEMLByURAvRExapzplW7zXV.jpg', '/cUvsymH3xbOqaCsEp9UpLqxuyvF.jpg', '/cIsad2oTEgIStgknjKR3uaQM16O.jpg', '/dPIhW8H3wcPuYSCkJddbeEcOYia.jpg', '/wgZH8JYBRL10gt6UjKzxPKWUl2w.jpg', '/2RvO5Q8i3Cv9ExSqPtRb64yBTPT.jpg', '/6iQh1aekQjRYxS2U9rofwGocjfZ.jpg', '/8vQuVYhXSbkrPajWxDlHPG7AdHS.jpg', '/wxwlG0M23uNvXglZ2ScUZYb9z6W.jpg', '/mGb10FlelkIYQe5OPidEKsNtZmt.jpg', '/srfebAZOcvZJHy0gMtI8TCwigCS.jpg', '/zbKHN5YeKCjdYE6JPrJFhkbdKQR.jpg', '/8JnqTXhjaLnTFkvPOoSdvofzPn7.jpg', '/4BVUrRjMj5WiyjRnHURfmAWxWME.jpg', '/gEU2QniE6E77NI6lCU6MxlNBvIx.jpg', '/mS4EvhsrT0SQZOlWrQEzWI5KiUa.jpg', '/bzONet3OeCTz5q9WOkGjVpOHMSR.jpg', '/iawqQdFKI7yTUoSkDNP8gyV3J3r.jpg', '/fX44bgxKQsS4P4ewb2iotHveEkn.jpg', '/nrSaXF39nDfAAeLKksRCyvSzI2a.jpg', '/1pnigkWWy8W032o9TKDneBa3eVK.jpg', '/9d1sCoMSGJZtghS2X9us1h9u8lW.jpg', '/nCbkOyOMTEwlEV0LtCOvCnwEONA.jpg', '/cBuvBJMhdZl85v4wRKDmEZ7Qd9B.jpg', '/4pWbfjzUkusGXAZQoduARaI0qu2.jpg', '/rPrqBqZLl8m6sUQmZCchqW7IEYo.jpg', '/iolc5VLP4PFU0XvjTVRiCb80mUR.jpg', '/xbiycuc84TrieEWwkkuH2hoEa9S.jpg', '/8ATtOkzbQ315u5muIlAxtCZESOf.jpg', '/yQvGrMoipbRoddT0ZR8tPoR7NfX.jpg', '/7uCL4gbdmokTWyeYbJxwBo5pbVT.jpg', '/fb9VcK7aCI2z4kH5nXjBKkEUVEu.jpg', '/v7Iib57HHgSEI9B7XYRF6qrs11T.jpg', '/9PTvvflydmTnfvMWMAwMMkV7X2s.jpg', '/vRJ1ScAJUDeTxuBv5cX45fDD0I0.jpg', '/6KiSSndIMLj1swkpPNq2lYppDVQ.jpg', '/omKeIQBr8oiW3MikuoGPQ6z55EG.jpg', '/tYaC23U62BOJRNVIlFGT6iowEwj.jpg', '/rgoNKrN5oEWIpfM6ZSPORbB2NYf.jpg', '/zDNAeWU0PxKolEX1D8Vn1qWhGjH.jpg', '/jM4VN1IFD2R1ElpqT3T0bt08uJt.jpg', '/2mRRFbnMPMSh4ZiRdiAK0q303Nm.jpg', '/dyUA5G7hmMOlBfa7yzAl0Zolynr.jpg', '/uODkRJ68CQN2uiHksyGXNPTYVuN.jpg', '/q6KI8ChlkIYYZww8C053cVfPQRo.jpg', '/hHdhfkkzt0Mwec33Ux177Z7CO8w.jpg', '/s7r8IkdbFP42sYhHhyPRnySmqCD.jpg', '/674XbyJKOO7z5ds6ddR6uAmoThU.jpg', '/wM0PSFUYHcFLEguYNjn3RDOEKtt.jpg', '/yCKxTlmPNQBoAl5qlHfn0GHMLjV.jpg', '/nvA7SLPXtuI3kG1ViXb5r8v8581.jpg', '/wATQX43h29TojNIbcwLuPg7OPqi.jpg', '/zrwNvkdYXrgFea41AxhJhIKopov.jpg', '/jWmRKnYYoIXfsiNuQVr7iB1DE6h.jpg', '/7fEFzWmCy6rV2gDl0uhz9smCQDS.jpg', '/vReLRjDV9XPhiOSEW7QWow4DXwf.jpg', '/fZYl4hG1Xve39hqeEN7q6UJsWPF.jpg', '/6ricSDD83BClJsFdGB6x7cM0MFQ.jpg', '/fD5OfSm5aMEKlFpYp9jbGP8IxuU.jpg', '/mQNr5d0ypstgJ6X0umnaJWoPdH4.jpg', '/th5UkDLIa7yyma9UYDAWaIgDh6z.jpg', '/bMKiLh0mES4Uiococ240lbbTGXQ.jpg', '/fbUwSqYIP0isCiJXey3staY3DNn.jpg', '/y1TKElkgWOl90iFik3GHlgJdphm.jpg', '/9rSeLJx4k1TaIUlPa4gwZK6tBxl.jpg', '/mR2OK5aK5kMOdAQYfc5kkOg06Pn.jpg', '/pOQfDNjk22UhTrAGwwN8Nwz7cyj.jpg', '/h7zAAbQ0rtEteSEQf7HklyizBg5.jpg', '/j5AiH1Ez0b0RCjI2MTMvSDgkyXP.jpg', '/7HEYmKkuWHya4WTGhkqCjSfokAv.jpg', '/lckRcubpItGlnO1v60clysNirme.jpg', '/eloxVOLxwOCPSzv1MFO2SuJYtrH.jpg', '/7v5cRygVR8hqiAUP1a9IXdV3NUB.jpg', '/3c95G7trDKHahCYKMekCXjeacdh.jpg', '/18Whj5cKOeAH01da7PLHDvKC76S.jpg', '/cA5TGzNpwxhLGeAELmWHB5klcvN.jpg', '/xrgBLpPMXWXKdyj5r36RVfmkRdb.jpg', '/990DWuNkoVgvzu8meLQO1WwTHHQ.jpg', '/e1pkIN4dPjug8rk75BRVukyIXAn.jpg', '/p6wYy2mUsOwi4TalNAk46ft4sVJ.jpg', '/5qhJeFztZ2N31T7TvG7j6M1sOtj.jpg', '/7z0QoRia9Tknxe1R1vz7jwkzUrm.jpg', '/8YZZMKVoc05O8mWdwzKMGhtM4m.jpg', '/uWZrj6K6kwggb8qdlpko76SRSG7.jpg', '/1ZOWn2VSiRhGdfWW7PdreiUOYuR.jpg', '/sOXOGIAUdlsygIovTGh0YIGeREN.jpg', '/jpxJj9mVbDNyG08fbmTyGFvZFNC.jpg', '/qvxBKd8GrgPg1W5FDG5nmwpzbb7.jpg', '/uz0owCMTNBmojwPQcDR6OpdCyL2.jpg', '/u6EAEtocvyBbc3vwmwHh569DOTs.jpg', '/90NU5EtPAjs1toYOu2cp4emP1tk.jpg', '/aQWo0r7dcqrW8OdZ5PjkKdemaXN.jpg', '/c35Vwd9rmMQfaEJuUrJRF3LZWJX.jpg', '/cv3tj98DvCW8ba75a9XwDPdiYIt.jpg', '/d1QKiYtceF3GDtxvTFXFAqwwah9.jpg', '/zq8j3XRJDVqNhiRMensg2uTkYrd.jpg', '/2QzyxZlj2HxVWiCjgjORIvjAq8T.jpg', '/qDSDtonrb6LfVOJXBbpZJNLjr2L.jpg', '/9kmFzQjRdEjSpjVQeGlvmHAzaPw.jpg', '/AtOL7JqNBGELgBA87gSHNcfzSD.jpg', '/sEgN6vtJTw1CW7hjQp4dMUCxUSh.jpg', '/ija1bykAdfthqxlSl0UHhOBI2YM.jpg', '/55JWKCqNTn54016voGvig52ikjb.jpg', '/6LlCIoqKpyJbKB63cmD4pyByHXQ.jpg', '/kfP55zsGaq9xl4CfI1C6TFDmLkZ.jpg', '/3DKszh7Ng0EN0UoTkIT01rb0SYC.jpg', '/eS79aflvTbW2f754gCO7NM1j7Ym.jpg', '/rUOaQxFj5aKIgQJnmJRF22qQXrH.jpg', '/cNr99Vx7jIa2VOnxRMAfatt1Ong.jpg', '/vm4avyFTQAYT4k3YCXasI2Q0BCz.jpg', '/x0svdinUPWHwI14CtIdeB5KXfiy.jpg', '/zLgW4iKqUXxuTBMk5DmOfhPf0zw.jpg', '/mBZgrHMZ1VQqpuhHZU8fsN03H8u.jpg', '/7I0sjfbWJ5r8e8M9jWf7WcN256j.jpg', '/zQsvYbHaMjBRfnPVxZdtbPyyFT8.jpg', '/ulLGFg2QUAhKvkgClIJp2uxuYiA.jpg', '/vA133yh9mW7Kt82x3f6dnirLd73.jpg', '/jb2lnJrWkRhDy7C3yb129YQIY6i.jpg', '/9W7qYnmi1W3648YXVJvpjk82MUf.jpg', '/hbGNJb88HjoQurnRYYWg45YBFtz.jpg', '/v6oNcydMvHwV8sxNIF8eivbw8tK.jpg', '/eX4Al8LtAmuw5RRHRLuDxs2Kn22.jpg', '/mgt3D3a51efPMqGOgwH7AaF5m67.jpg', '/hDO9K7NLSUHTis7QDeEdH64KEJ2.jpg', '/xdAzr43DN4BNMUomn8kgMsGUc7Y.jpg', '/q4emCJmjNomEE2pVGgqr3nDEIzI.jpg', '/evoEi8SBSvIIEveM3V6nCJ6vKj8.jpg', '/o0xb7oUWC8K516QdYISRg57fFJv.jpg', '/104v27KQPR4FWQJtu25WEVIKB9S.jpg', '/goxCjppjJpJhhAYgzPTTBrqbfHi.jpg', '/Ap70Jv6nsJ3RpNrK66CfcicBHTA.jpg', '/1KTTpt22QCdYkPmW7qcMsrEOA1D.jpg', '/bfMkoXy8d5HGBWPxOvCPRjtRZMF.jpg', '/yFWUnIdLuxEB00NXQDSjuzgH0fO.jpg', '/pGZpvsjeJ1F5DWBhTe5h2cjIjR9.jpg', '/6qdusBmmCndnYs1jkf7BSUrIoBr.jpg', '/7jOjfOlM9hsZS6B930Oj10X56ib.jpg', '/gTlZAMmuMjN2Ia0M4pxU2C0ZWxq.jpg', '/fkb2SwmbXhjTCfqU82XmpH9VRAr.jpg', '/fPM9jZHZAIo0JI4iMLpm5pC4OLw.jpg', '/zioKUjPlD1aAg0jSdlZY4LNuJgP.jpg', '/lGdLsK976sbGRppdSHbQ5PbAMnb.jpg', '/1T0YWRHgxkRXLh78RgPBH7yGHqU.jpg', '/gdo6oKHUdUiNLscrXzx3LZ6QcWw.jpg', '/gx36DX1RLixLu6sBWgmdiDr7Rbb.jpg', '/aDJlk2mPEo0weBzJ1eikAqZeHwS.jpg', '/6L8Eo6ZgBKz63ar5lB6esutDmCU.jpg', '/rct7HdAfPyvSqbr4H86b6z10tCE.jpg', '/lpkCFuoPC2m1tIHzkpcx6tO2JSa.jpg', '/WXwTgRstrSe83GDSJvJLhGsMia.jpg', '/jT6hhix5X8hFgFUrQBy91QwFSlE.jpg', '/ogn2abMeIel1UlLm8APU2U69Ydt.jpg', '/3CQX7KAtGFVfI4PiPRD93Uf3xzX.jpg', '/oS4PsbsKxSP16qYj3RTSYO46OtB.jpg', '/75VHAQoz8oOFISA52Ojbvpkcml9.jpg', '/15SGNP9JUGCdKzResOuK07rmOxn.jpg', '/rfgabI22dfjG30GwD87pZ3v1pJQ.jpg', '/u2PufavhWhs598P66oYfmGSj6A4.jpg', '/78SsIp2vSCwsXWoOMTcIydMl0ur.jpg', '/cheLvF0GpLQsmC56L52t2hD4TMO.jpg', '/w09DcbYm6YWno1H3OgCxUuNp2QL.jpg', '/7FmbPtk8yYu93HeOYQuiqKg81GO.jpg', '/wvvpXMNB1ocUF8ef5ENhOhcvvmc.jpg', '/nfDwAaCRwj5BLnkCitv0mgfjZAr.jpg', '/8CQOK1RyhUAZGUfiea0aAw3nCub.jpg', '/2khhc03aoTG8nHtGvehEqvcFTDQ.jpg', '/9DydKQbpAgsksnG3BvuVlV28VIs.jpg', '/fUlEUhtWOuaojBaYhBXdpgBG3VJ.jpg', '/v1M9zqBq3JAF1Et6ltN2d2i1ZS0.jpg', '/oYuLEt3zVCKq57qu2F8dT7NIa6f.jpg', '/aBGVsKeDn5gtegkyajPGBHWev25.jpg', '/mQw9lsrMGlWDHdigLoGvCqX4tz6.jpg', '/edv5CZvWj09upOsy2Y6IwDhK8bt.jpg', '/tXQvtRWfkUUnWJAn2tN3jERIUG.jpg', '/ljsZTbVsrQSqZgWeep2B1QiDKuh.jpg', '/lQEjWasu07JbQHdfFI5VnEUfId2.jpg', '/9e3Dz7aCANy5aRUQF745IlNloJ1.jpg', '/r84x4x93LbZ2gozISTBYVeq0gLZ.jpg', '/xn0Kcg4e6p0mLxVS3nAWhNmW2Ni.jpg', '/8IB2e4r4oVhHnANbnm7O3Tj6tF8.jpg', '/xlaY2zyzMfkhk0HSC5VUwzoZPU1.jpg', '/5QHWgqaBxZI1eM5e3YhyKzY5o3z.jpg', '/w3tea0HZDYVwQVyjrWBoF5x0Ofs.jpg', '/t5WUY5ZSxwVIVExaMZmmIj88BKA.jpg', '/bgIt92V3IDysoAIcEfOo2ZK9PEv.jpg', '/qzb0slJerd5bQgJxteJ5oAmfp09.jpg', '/rxHM1Cyn0cpgF7l9DVA2m3SS5Zk.jpg', '/aSY6QhgEeUYky0TMfAXjvRJj5bL.jpg', '/paNKUnfHDVDWh4hifULoOdRVzP0.jpg', '/2aQZWpZKHECecGkFKLcuWa0Cmus.jpg', '/84TynUqXvXJnYiQr8uYcdbTDDWY.jpg', '/hEYPJruVOc3VBkVbEUbyVTZ2AXd.jpg', '/xMQpKxZzJog5DVMCjSTsD99AziI.jpg', '/ubj7fEmtNqxwtZtMk6wAIc0SCFJ.jpg', '/frq4ygwcIMusECNv9rPBrvJwyxG.jpg', '/zTgjeblxSLSvomt6F6UYtpiD4n7.jpg', '/9Pfuay9ztGmoS3bt8LW2mfgGjHs.jpg', '/mJfTycNg8PxjvxzpnKnzAAG7RIP.jpg', '/2CkUNEqIRGAwOC5jiKcQgKFjw87.jpg', '/9gk7adHYeDvHkCSEqAvQNLV5Uge.jpg', '/aej3LRUga5rhgkmRP6XMFw3ejbl.jpg', '/gqgwNjwjSqGkOqkE2rppogenu4v.jpg', '/7SivRwOLuA6DR09zNJ9JIo14GyX.jpg', '/nPO8aNT4uGtDAY0bZZZACfP66Lo.jpg', '/jEsp30qRAFPAWMYFGWwK7f9ObST.jpg', '/4Kc9ij5DeAwexVwVoT0fGHWK5WM.jpg', '/jSm8mzp7sucgL8NwINIoAmx4dS5.jpg', '/anJ2PN3jfjv6nocW41Ikgqygcc6.jpg', '/dp7n2vb8bmhI2f3Fa0mkQnZnHyO.jpg', '/dVhP5LObWUYWwcHKufcdUabApII.jpg', '/dUjeL2HBcOpQKATeu6gltO1CKVc.jpg', '/ms1bJvwa4BJycBakQ7afcedGlwY.jpg', '/lFrnL8dxEOp6qVj54vyFLi0Qyw.jpg', '/vXyyn578tC5TonEUNmn49mwm4A0.jpg', '/1G1DR6LxKVNKIAH1oPjp04EIsxr.jpg', '/bPYjum1fH24yU2f1exsq8nuHEG0.jpg', '/4rHfaC6dthDRPO8SsrSTMgAgkdW.jpg', '/mKZVtEfdYqcCC8FnYnwO3rsgn2q.jpg', '/b2jBc5P7vwnfBbLm8ZziNslFb9d.jpg', '/xgPGDEKkBrXhPaNmwIlf8e2RCMk.jpg', '/k3UoZhRHg6h2XYzwNAJJvGC2yev.jpg', '/lqkIBuRyD9mFF5tQ0gKZLfBY54a.jpg', '/agvve2rnVhH5Ybuovsqui2HkxC2.jpg', '/zt5kihG59UaOYyGcXnBz3HwQxXl.jpg', '/fL4CcbigFi4P0Gx1X76vbRjgg6c.jpg', '/1UgqxtiJNxRzPeqs9pztWBUJd7k.jpg', '/eKkbXuGZ68YOkTs2sz8OYu7Y3hj.jpg', '/4VWZyyUTuOZGcamFWfdo9EccuQJ.jpg', '/iViFPY2O3rSbK84zsw2kEUtmxVP.jpg', '/o1SB1gHCmEEURs8P6dfmSC9O3iu.jpg', '/67RLqAViz6v4ez5oTy01eVH57VC.jpg', '/eARwxzrwvayasGerlMgRH2rtILs.jpg', '/uvvH40CJ38pgqA97q2yurGVyycX.jpg', '/llnw1ytJyplbttau3PWYo6P57Ma.jpg', '/uI1gJI93hpbP0L1OqjUQNwKHbq7.jpg', '/ic8sEH971i01e9qs29795s9Sjr0.jpg', '/fB1AYIHXtZFp30khynZAx8pwCb2.jpg', '/pMHZ5BPlB2FJWYVh8kpwPDMepUy.jpg', '/ida4t24BmQcVS3FUL4TY4uixoaU.jpg', '/A62DYEWb3dgRA2o4NNtuHciFJJi.jpg', '/d9ob4cNkH5vmyPppcrYIpIo6x8m.jpg', '/iunQDLut0NRyEfsLeisnRDxzFEA.jpg', '/eBtqGWtR5KUiNl6OXHLR3ri6nVm.jpg', '/efC6it8M158f76ym8BA7cHTlcBW.jpg', '/cHRXb7TUnfntX4XdGF63GNL3U4E.jpg', '/iQUateaYbt0Zbjrl8gqaGlT56iG.jpg', '/rq0UeJr9eoaAeEllw6WheF1HD9R.jpg', '/oiJOvzOcTi8g70d4bhaRVLEcQA8.jpg', '/g1z0zLD8tW94omZdM1NDg9Cb0L5.jpg', '/siwBgxiw39ox1eQ2GsTu49u7HNF.jpg', '/w7pIMKIKrkuzCAWCoUcV6H48krv.jpg', '/bmK3XsNFgAv1RfEV681KLLIKbbV.jpg', '/tLeqhlAKQicrzUoWqbTJH6Ac7Z0.jpg', '/fJgkMpctcXdDo1aQz6LZ8mwuws8.jpg', '/wGF3iLAkjDLvF2Ws1kcQI5VWGdv.jpg', '/kg03rABx8jwHNLnUhbTbhTGkoVH.jpg', '/53rhALkaIDqkft2KRZO9ZaaRrB9.jpg', '/4i1I0cvwYhUTVbU5Qe6HbD1audF.jpg', '/3xxd3Ntf6dZfTQOG2edgUPx0CzD.jpg', '/uoeYeDKCaxcjgZdal4r5UcQrSYD.jpg', '/pg4Q5CGD06jdkQQTi3Yz2TSzrU6.jpg', '/lCwO4czSKzL1LP4h85T4b8C0UWD.jpg', '/w85Z9pG9qMtw6m9QuE6PvKygEh1.jpg', '/jJKRz3f34UkncoZB7DdHJgNZFI0.jpg', '/tVmoPRtN7mMlTJLlhEZDOzqILpp.jpg', '/nJnRy3nywUceNwNZ3spYuIecIBG.jpg', '/9egFcRMV4Z3ZdcaJAYoxmnbqZE7.jpg', '/nVTLDH8DCcCn4r4hixAYo6ESjyI.jpg', '/hJmGoCN8DjH0yrw7XsLRFCL9VBJ.jpg', '/xymM5aW6MDcH5AR9I3CamSegJd6.jpg', '/qZ0kJnOwX6Qo55vIYjicbtl8WlZ.jpg', '/9nkrC15drTBc2ZWGg7T2x20MrEj.jpg', '/o8zlCwctVfRFHQYItVQgmf3mllz.jpg', '/cfxBdqeRyuBnKa2axipmAFkQJPj.jpg', '/hyfpaJO6tSIHZNd9F9qoe9whJBA.jpg', '/8S7couVqr7g4L48HQ7XD3jZkg5y.jpg', '/n9v7TUq3BrGlZRnGmdKVT5PDarg.jpg', '/klh1rwo3jpdvdRi2GVygmSoxWy1.jpg', '/8bxMHkuEzRpIC1YeVhWJKBnj5qq.jpg', '/bm1XEWLZfCZQEj77SlPcG3ZQaxd.jpg', '/aC3kqu6Lqw8Rpg9c3spTTGvgOim.jpg', '/l9uiKYEmdd4cKFExymkDVeos1ED.jpg', '/aQZOoAGDz7StBQVEA6hDiUGMMXA.jpg', '/p5NyT6SX3I6rjArOoxXl9U9fATf.jpg', '/7futGyUOW7x0yGCHyLZvkciEeAB.jpg', '/9Q7LAAkiLcgk5ohjlQPS0ocmWCe.jpg', '/d7nO6ezrtx9mkJIoaWN4QyFoloa.jpg', '/7l7GUXc4492LdNfusC3gSUKjSzk.jpg', '/eM2Y0RN3mUwp40Nm9I22Slgzl4c.jpg', '/oV5yEdlu1PodRNTyp8d2nvk2qOy.jpg', '/mVbiYFaGfi0YyYvQmUaObFzuvMj.jpg', '/jc45pxTMTuOlBilSItOejMAMH34.jpg', '/aGVZkgQVPFLAu2aVc5iwOywnskk.jpg', '/bseL9xvgcpp3KnYswS1rWmLPzJy.jpg', '/y242ckW8B10H24DrzpBAo5llXtp.jpg', '/jfnbkogB7iimhKYAcJDGsUHaW1b.jpg', '/3kB8ncO7iehDNQ2ERNcRnZCWiN3.jpg', '/l46BsZPZ49J8oQZcOyP7pdlXkjs.jpg', '/tHegx9JnXUHvIyViqZI2J9NJ2l9.jpg', '/3VAhy6bMPqwaj13rzdonbDRQm5s.jpg', '/tokT0stOvqBigBpimusd4zmheI6.jpg', '/9LohPHzsuILo2NUrf8nXudEiUcX.jpg', '/2iTpJJlMgyPsprrovf9FTFjTa4g.jpg', '/6FE1uNqLmnjRX2W350nSO4drfuR.jpg', '/dRNOQGwSZ35ByhRmKSkGMiW07Fd.jpg', '/yJ2YdBfpwzrn0As12noouKt98BE.jpg', '/ojCYOPJNUPGs9ZRrOkG08OXBQ9o.jpg', '/eQmdFJJiTeFQCLMjf1gbi6euc3v.jpg', '/ssKmJjbt0JfXTFkSWcQ8t8o3GQL.jpg', '/yw4pZVzVUKg5bjYUDHwXf5vHVvT.jpg', '/bxccL5ak0yf26rBEdxGxKQQgQfs.jpg', '/xvuafWsKv7QIzf9kqyQpnWEadZC.jpg', '/RMG2IJAXRGYh1kT0r5tppM2v7P.jpg', '/wyMil0WQy0JhPVpWVfC6rRhKpTi.jpg', '/qdqBcjf6hkimo5CvIToOVWweW5O.jpg', '/8eWOfiFdhuW1Q4JiBA1qN9xa4DD.jpg', '/z9iTcVx1SEAWjBFj36gSldWyGNz.jpg', '/jkEx6jNxNjv0CFEJEyCpqfjXrOE.jpg', '/c28DpQIVrHX2py2RHM6S5pr6Wnd.jpg', '/qUcXimqo6p55r5D7gdYvKBeOMxB.jpg', '/hzxHC3Q65MgpKsGxWKIT6I8wnxG.jpg', '/idHNmmHN7HRleTjwleWdMgU9IyC.jpg', '/efvcvRgOAZgFC2hrPUa6YqrE1KG.jpg', '/P4iP4Vgynjux22hH66oqDnrtWG.jpg', '/rT8Qs7D4JLJYYy6gnD4hzZZLp3o.jpg', '/gVhGjY9k7mUvsLn0ea2obchJXgk.jpg', '/tKBvfN5zs7RDGEPvbLue6LZfcIy.jpg', '/b1DvgHXpVyuIEECJ5tM7cK1ydUK.jpg', '/A2QSkPxjcMj4apEHO6Sz7aUCmUu.jpg', '/ew7MmtIkLjhkYFKtN8dwKBBMzd0.jpg', '/5MXQAlCa2npFrIbB7OjoquD4MG6.jpg', '/jXE9uOtbE1BhnPgk5pioQ6aGEFy.jpg', '/6DCq0lVZElOohBBYfUdLnc2wYmX.jpg', '/tSHO3YQ6bdivbI5hLxuSgrPxbNR.jpg', '/zxvAAPcJoNklMtM2XbgacvuGlel.jpg', '/ny5ggIvfGixGZfn8nR4IzSROcGK.jpg', '/h7kgZg7Bk3fCmGkOD6vd9qoqdjC.jpg', '/uluMeKfYFVvfZlmHgFBXqbnHXE2.jpg', '/eyDMENQZYq0APm8AypQT0DNOrwa.jpg', '/fTWzRx8TKAxj8EaNs0wZ17kiqCW.jpg', '/qJ2tW6WMUDux911r6m7haRef0WH.jpg', '/pyNXnq8QBWoK3b37RS6C3axwUOy.jpg', '/8aQ048h92EvpPME4HsgEN4oJIxu.jpg', '/8QDQExnfNFOtabLDKqfDQuHDsIg.jpg', '/2Pf0Dtw6P9CWshK6GYVXmmq9NFS.jpg', '/xQPgyZOBhaz1GdCQIPf5A5VeFzO.jpg', '/hAf98uHIXMFzqNN5LX1vnouCShr.jpg', '/tSIH3DTA4oFQDhPaJgHxxQZoqHh.jpg', '/iWXaUWpWLdB4tu0mlVElTKboPgD.jpg', '/6pQMQQrnRWm2zweL5vWyyMHvAa6.jpg', '/zGfUVhyIhnCb44VKiPiw7p7pdI4.jpg', '/31ASyBd8PV0GtxnhvyL4JEAB87v.jpg', '/nftQJb9550PtYFXhmTs7XiN0QhR.jpg', '/iGZX91hIqM9Uu0KGhd4MUaJ0Rtm.jpg', '/j2aDrirI121LOg82NlmkjQk8a04.jpg', '/3KAtr9OX8Bq2FAvZtrjYcdUuBYp.jpg', '/wzJZ6tLRMwhStehrcjSyiVGnn3R.jpg', '/8W0SjK3gNHG4cD2pZhcL4Rvgkc8.jpg', '/7IPCEr7ifdH5CtU97QG7XgAAtOp.jpg', '/lch0ILTsm9uFqowVwVmIeRsMcdL.jpg', '/m3N6ejIhoD160vgsOfRpBMguADg.jpg', '/4HkwsmXp3uzcrNIPlNEYo3hMbL8.jpg', '/pGq8oYx466sSukN3LUv0httsxQa.jpg', '/fCVD6ZPR7XyxsXZPJWOIp2VgF32.jpg', '/1fCoidUsB2xGzbAJr502Hm7Y2Yg.jpg', '/eMaH8xS0vXae1jm1Ry0S3yRBEhM.jpg', '/qIhsgno1mjbzUbs4H6DaRjhskAR.jpg', '/pdLAyRqMEnL6pzkVgYwMS0a3fEm.jpg', '/dxWaYQtgpLbycqUpHzkqqYkT5I3.jpg', '/7EfSqviKvXwbiGhUjHyUBGVdoiW.jpg', '/gHc2zbaIdc8l2e3aGCiIThgOQiz.jpg', '/wsOr8j0xoUwDfcY7k815rEJXgr1.jpg', '/bIqPWFTrB15fna9010pLGfTiPuL.jpg', '/uOIdtyKs6Jk0kSnMRQsWpxBnGcC.jpg', '/AabbWDWAwtxHxTJV3v8C9e67E2p.jpg', '/9ICUbdveP56jRoMMVkXSOr3ceyV.jpg', '/eP5NL7ZlGoW9tE9qnCdHpOLH1Ke.jpg', '/1PEFfYM4PV80dDqqO7jkCBdjbZa.jpg', '/sqj3UE4Rahv2NYFaxXYvXzqUz5L.jpg', '/vGYJRor3pCyjbaCpJKC39MpJhIT.jpg', '/ggax1nyhiGIwbq1Ynk0otH2sD6.jpg', '/j10MzKeRM0LrfVgD6tHiO3OVOqU.jpg', '/uruzphNWfIo0MxygPDQ5dvlgEQh.jpg', '/5GTnnwpF1aj2kc91IogJHSn229K.jpg', '/rqoWYzCuNdQewVfKw6H8dFfg4dd.jpg', '/5JSt5BraClSv0XgvDeTYM1FsFjG.jpg', '/dxabgTYgwysyXP25lgc6L70IJJj.jpg', '/f6dNinWX8rBM79JXKcShkfSh2oA.jpg', '/vLFCrzI3V4kbze877tP1H7TqppL.jpg', '/A6LnuOLkxOsi9xicfzNege4fjWA.jpg', '/i9D9jRDaPKM9GpmJdy0a2yDO0B3.jpg', '/shTcPSqtnQqddboWe5Mw7WAYxQh.jpg', '/d031gvt75HMZq9LxcMG381Hy9ko.jpg', '/xynOH3rrt2X4hSe1YQgYAkBXfy.jpg', '/25cE7rTmSWVoRbBWTqIHAcvCtlK.jpg', '/r9BQs8VaMziqG2pVD7mcS3ORCWd.jpg', '/pKKvCaL1TPTVtbI6EeliyND3api.jpg', '/z4XwvnDZSm40PCdg9vFJmo0W9ri.jpg', '/30bVZPX7ZRkoOhh7hCXAoDomDgQ.jpg', '/yfY6QdlQ6QQczjUaazFdKTVrxDr.jpg', '/bqFQKVRAs4rVRBiiHDUHWJIbzTk.jpg', '/cFfhGHjxv7sWjXS4uABHJi9mvzW.jpg', '/c94GEWkz12pYfg9fO1weiN1ibU4.jpg', '/1QF5OFkYCOMmCCMSr7vC5A6DE5s.jpg', '/f4KUne3zM29fIq2Nnyn4e0j34mt.jpg', '/yjwJM3VcItwvkEDW6GklMrQNBhU.jpg', '/csraeJmUm7GSXEoalvb83AFFq6W.jpg', '/7MQT7G87WK7Y6ZeDB7c6mGRrzK9.jpg', '/paIt2d08ZhrwltpmhkQYZiJXYCP.jpg', '/z9Otej9dIEYuPH6teXXu2I8Oh6V.jpg', '/2Ka2nOtSlwuFlsHtrtfHKMIjldC.jpg', '/kMq65QVRSL6YWpN5WQwLbaQjV3P.jpg', '/Ak8vHeUtTuBhLLB48iC1o8JjRnc.jpg', '/6IOvN7okabMadYJOznljdYq3cGV.jpg', '/z2E98ETb6PZ99VMqIC7PUEAeYDA.jpg', '/bRZRXgW3UTUV1a19qGpGhm6W5uE.jpg', '/oOv23H19CiK1F2MTzyx76q7dGwk.jpg', '/gN4qbFbuneR9CUXleYGQzomGUjW.jpg', '/axyvLjcRhH2IqFrPSdudJL5ohmh.jpg', '/wltraa6BO2g7OowPmUKuTUvIjHk.jpg', '/jsvX5vNggD0ObzHDXp2uUwC2Chs.jpg', '/8t7ceMgYm6dX0FA71yJ6UO0rNO.jpg', '/txSJ30aWZY9rDg9OuE2QpDJ7WwZ.jpg', '/aArYQMWP5R6PwlFpSSawLLpYEvy.jpg', '/r05GcDOai2tlc5hASixe6BB4zpj.jpg', '/h2Q0Bjzb4rOulc0ekz6mH1FFaoI.jpg', '/fh0VioO7JZfM6p1mOEsA0YA2xXC.jpg', '/lvNjH1zyN1w3FYkO8ZZJsICKpgN.jpg', '/tAgldVsdvZQ9GZuFMifjtl7kMTn.jpg', '/k6hExQBHOLPiGe0K5CBWrVaM3XK.jpg', '/rKyMQvIGjBe80zyytNLXvGomWlZ.jpg', '/e1nMtpUTtaJGXbeZZ2ajaIOyTgU.jpg', '/8E6MS99JaEZ9mNYZUupTe2nTeKY.jpg', '/pV8U6MAtQBKcjcbq8zesh4Uhe6q.jpg', '/qW85opMaI2Ln5Ea3KxBpeg6qjLG.jpg', '/plGiCQxuksbGT3ClQDMLlUufo9K.jpg', '/gKMDmGde8aAD8M6dvm6j7wciSbJ.jpg', '/6ZQsIxobvm7Z0yrtS9NSeRMxuFv.jpg', '/4s74Ob1e11tLDVL5FbCmfcKHm64.jpg', '/An3B1Vh3vEHJN1LZh8GwkbRmRn9.jpg', '/9lPoG7vJOk3GRDIRC4rZyDVOGWE.jpg', '/jDxcL8SYCgLHh1a1kiT1kA8y4A5.jpg', '/zq8epazaprZpsI1HsqsBAHWHOBm.jpg', '/noYJ2sbKQE5384I9kB4h0k2YTlG.jpg', '/utDBwHoh6lqBgNEwDlm5i40COYQ.jpg', '/3Z5y3P6CLweBgXazo5V2iebq28H.jpg', '/pacP7NdLG0F3EbOYd4CTvu1DB9x.jpg', '/ghxS6itn1mGzejZb0SYiTo2SOMR.jpg', '/qxBQaS8bxhARdZu0feQO7dZPUIw.jpg', '/dQ7saTbB4h7hPpAMPkCj7lPaSAQ.jpg', '/aabgm6CLRVUZ3EgnDYIBDD9RjH0.jpg', '/nZfPDfwBX4cLulKTIitPLsjobXd.jpg', '/suA9dX1bvn528mDAiSHVzMgXpVr.jpg', '/o8i8EDSWiwzTIiaMgyPnESKYIVd.jpg', '/hZUSv4mCne1DP05ihoVDoh8Dg0W.jpg', '/tnM9lt8QD8PseK7ED65Yt0fIZMd.jpg', '/cswulqzPjSEaFF58pzOmiYpUfjq.jpg', '/eWbIUAJchJjhkfncbKrmtUPCUrO.jpg', '/zAQJ08Tw4DhYcpFCHoJ2wmVt6lA.jpg', '/9pwp1Maj4c1lRl4QkyXEaktA22g.jpg', '/bTOmCkefIK8YNhQNe3IOSueYGNZ.jpg', '/4Vv2UznWz86TY64m7KWO7yhVT5A.jpg', '/taZARyNlDUDw2qhDVqz2LpE8sy7.jpg', '/zKw1XjlUrg6SThnelftIV4g0wUF.jpg', '/u8InfsF7vwXyoSH8rgfDZYQzv3n.jpg', '/cCCZ5lhbfvRvseWZHX8yOuSpRDJ.jpg', '/pJAKIBOvsCc9dBhDDgIRGQGULRR.jpg', '/a1UL3FTJDgQikYIebnMDhTPFVfm.jpg', '/967Swdyk4pvSz3n4CpGBJiGVQFr.jpg', '/m393i9D8M70Wu8Pc2bLOEILfIcn.jpg', '/8eJ1cTMyQHk9FOYk1TAyJLR4eDF.jpg', '/la1BpzspX6ZejdGFa4MRMhUAz2x.jpg', '/sjv42EQebn1nbKGx7vOquhfi5KO.jpg', '/11Zx6SodSThTbMEVoQtxt11lckL.jpg', '/t63vUEzIPnZXa5JYFFIK499O6Mr.jpg', '/bwQPehOhS14ePNRF4EBmN1GqSB1.jpg', '/jQEN95EYetUtDGvpF4F78TVsRPF.jpg', '/z1DfRQf2CgnROyhVZ6ch8FbWt71.jpg', '/8X41aAuDesg3ZUbxwoiYEIlkFUI.jpg', '/1M1Y77HhjJ5SgTc4IOdrkszi0nz.jpg', '/kaNc6kCjNMZx7kH7j7uXn4WQN8b.jpg', '/vV2SS4fSc5qlvqHAB43t3A0mzOw.jpg', '/2QeXdLNwrD5SufAWhszm4VzpwV6.jpg', '/j0NNGfcbrYRKO8szyrJj4E2h03y.jpg', '/bl3k5MKSmayH4bDAOWhESa9lFfi.jpg', '/ix8teqIt5kn6vJQQF5PukRaJGj4.jpg', '/gloStgr5JUbEYHX4tMJrvTfkGUq.jpg', '/cqjHJ7jQ0RDJCNZglISv1HDcpEr.jpg', '/l2Nxri5wXgaVQgpOiztMHWHxIsR.jpg', '/kBMA1HLVQYG9RpcCH7FmtDOE78y.jpg', '/xsWMuavHCm08R0NxmTff1g5Q9OU.jpg', '/gdhjkyfc85dIm9KYc7tzsFewJsB.jpg', '/btIXVwMUHTlSq1XiEafPn1LSw6p.jpg', '/kX7H27dYIHXt5UhPys64oEC0q5u.jpg', '/nJO79lEYO9Ldz2Zjq0OJ1IGP941.jpg', '/8zdR3dg39eU01sTnmoTO7aT4ZYa.jpg', '/rQ884232vYo3pbm0Ov1bCrMy6Zp.jpg', '/4MpN4kIEqUjW8OPtOQJXlTdHiJV.jpg', '/6yMWU1vWkOBbNRIwOxhetd2aHhO.jpg', '/olxE3239oOQGaSShbWLJs1NQXBe.jpg', '/1P3ZyEq02wcTMd3iE4ebtLvncvH.jpg', '/lXRSRP5QMfrr9cSiupvcGDJW1Sa.jpg', '/77NraO0uqhXOG0xqLz0nIuockDf.jpg', '/j8F9HJBcrRD3xevxf4NMF2IhQE2.jpg', '/s4I1JYIacFbi6amQYqRKB7ifrHx.jpg', '/q7OK13aqXAwppQAF6yT6wZeKtc6.jpg', '/2DkutTDxhB7173ItFi9cVDMFqUK.jpg', '/pqB8Xlu0QdwsONakoiKtortANdn.jpg', '/h8Qi8uIYAGh4lZ357ua6NNJ8Pui.jpg', '/ezD8iZcSj9zQkIbBNpDZvdMxr8P.jpg', '/b1V6Qp0xcNoxrpXu9tKhJ2PoYEW.jpg', '/3F2Rbu2DCC8Q7WGWqlsWI26Bw5P.jpg', '/54Jxp5zy190oQXqxcwBUPCVngTU.jpg', '/e5F9ACInAM2802QxsBmmixyaXrU.jpg', '/9nBRExEia2xF2nDzCZNtQUknZGD.jpg', '/f1pQPzFmBXyFaScnrqeSm8lvCH9.jpg', '/AanMvzySJHlfIiScoU6edjNvIFH.jpg', '/fIfmG3EaIy3eqebyq7hXjl1ymQW.jpg', '/gDpMT5nrgsuSAgX3NfRg2ZOsr0d.jpg', '/zBVNawbcB9z3cQw3uOvQ6dTLBS2.jpg', '/sPX89Td70IDDjVr85jdSBb4rWGr.jpg', '/8grKo5VUbtnnJWX5iQBhmKOQxHY.jpg', '/vGKHM0WKkjt5KYKYr6dmX7RZfJZ.jpg', '/8pF4KoiRlXEf1MJCKTfZ5cyJz5l.jpg', '/A92FwaxylVAEC1g88ncRjPNupJE.jpg', '/mpdTFukLMNAALO2j0yfViyoI2TF.jpg', '/e8MB1d69fmzyonT6mz9iQs3rhw7.jpg', '/oyjEePAoGmeyAkpLgloOfCB2ijG.jpg', '/qLrkL9RUirxJkDW7KTTfrkNsL64.jpg', '/8RW2runSEc34IwKN2D1aPcJd2UL.jpg', '/rdXILMlfINsio98WbUFoXTXPz5S.jpg', '/h4QzFwldlUaEvJgVwumGTPOBA59.jpg', '/uheYLZ7KxfGolGOJr6nnKiNuQKh.jpg', '/jrYbYRMRwCO7vNtTdoqNcgALwAi.jpg', '/taKcn26BMWnsUcMFSlr5RfGDtFB.jpg', '/3oOBjD1LZCjfrLPPL49xP9fFgeR.jpg', '/xWufUAYvji3mgltweOd41kh3MRK.jpg', '/AdhhQHrgb9eWTcmBh7pThBzU0Ra.jpg', '/5Ml3AHO8D5Kil22e5FnDg8sgBn0.jpg', '/pQFtEAJC8QSs97rIYiKCmbxJseL.jpg', '/mx5zvtwTTWBwlNzBZCKvbcjJFIH.jpg', '/48sBwODorRIoJjHFeDHttVU3XAF.jpg', '/udMtQ5TQ0q856XqRyqQxE2F2wTB.jpg', '/oih8KKRAhnRtyU5kzKoSMaaLhQM.jpg', '/jHX4YIJtWFIteg7jIy5lZITP40C.jpg', '/sb3V2fPhNDRRUvHJW4pQaeHbDxm.jpg', '/zKgfW9KhKmIQyjL6b2nVFOsyeZh.jpg', '/aBVr0YMCeAYVrtmEtt54DrtLZeq.jpg', '/7hys0bs5xfxR9tu3G5InB0xDhat.jpg', '/gsKwOfUesyN0pZtag0ulh7bpxJX.jpg', '/tqeP1OW2welQt6cVM9YwKOTU3z8.jpg', '/8G6WFTx91CAQeVopRQtVCZDYpb1.jpg', '/8D2CZEClyq9H5zY0BaD9F2miS25.jpg', '/ziFjqY3ABYTJZ2kHMzjr3eeyMQZ.jpg', '/iTFxTcAZtxvSrPV87IEnmnvyQGw.jpg', '/z9iIvDrc4A6WqBg3qzmfQmRFLwe.jpg', '/kb9pouNQIuXhBjPzt1VWawIrEFM.jpg', '/e22BN2rABXSkDS8RChni1E9VSvP.jpg', '/A5zTY0UJg0UcuzuXE51Lc21OhUI.jpg', '/voA7jH8LIkPMlmtdYAp83z7bKiS.jpg', '/ur3wsVMVubcr9wiKP6oyEHJMF75.jpg', '/jCgGjUHt9Ut7nGibLS71ePCBnV.jpg', '/1CvxVIiBT9XWN2WQZCm1bqIKchw.jpg', '/zQSuZTwBI81CiXUxxUKExcafnO9.jpg', '/oGby1unkAP5qH9I7AavC7QWtTNt.jpg', '/9ghkbUgt5lAYzkL4DuehL2DHn4X.jpg', '/2mRyNFKpRT37vAcZdHzBrCpmH51.jpg', '/k5Pq6DFqKZ6k6Q1kX5MarcugysV.jpg', '/vrwZ91I7j5QIrSm3TQEbadvA0sP.jpg', '/aGdng8Ic4ONpcepU3bVXPSLmNd3.jpg', '/VwksWozHDudb7i1XBQBYeEfxiP.jpg', '/uGGUIOwp1F3iSMB0ZyFZJ1Uorvy.jpg', '/3TAzUgbseHTVopZYIrPPeuRtxi1.jpg', '/bY1SD4t8to0OJh3NBTan4kpMM7M.jpg', '/jULqFuAvuikqjp870awMKXcfiXK.jpg', '/d5CPMykx24J2FZ77Coun40mkRS.jpg', '/oarR8scEjqKmgbFAYHfUdpOP8Oz.jpg', '/peVchL19Z1JJobkGOoWBfdGyUNP.jpg', '/52xooeUA0yHufOpwzeEEuQA61LW.jpg', '/cub46jQ4bLQYYbpbSL9Q24wofS2.jpg', '/ocEnq79nVKZbhKAllMVpxnbAQQ5.jpg', '/66BlmYvDr92ZOJXWOLMfs55p5pD.jpg', '/mrkFKMgjs1TWAXHVujASiBv0PTi.jpg', '/v0ANxUnWwyfkf053ijLfu1nxi0K.jpg', '/1Cfe1HTWMXUeaxLi3xF072Jkf0o.jpg', '/1wVhoU0bBGhJYaiu5K8DrSCqDDY.jpg', '/5v9MVHgHWjA1c6Rx2BlA2ty6SU.jpg', '/rSZXvInOa94udX9F4hXSruyKm3u.jpg', '/jZdal8sHUCJ9mMN9qQOniaxajFF.jpg', '/eKdPunkhnw2y7KL5XRKqbhoowOd.jpg', '/53lvq1hrL8NcFW1VXEhfXH0UmWt.jpg', '/ksFkFAevvjpyj6UYl7OZ8TKJ5FS.jpg', '/6VtoPn1CBUEjugkkXZzD3R31PWG.jpg', '/3HT2Dd9H97qF7f0MwTLpYlIVNi2.jpg', '/njDm6YxpTM6eGWemXTXEIAl1QTg.jpg', '/eIxXgEJoPlnZKDXTVhZqayooGFe.jpg', '/heHTe9kEUtExNnLhlU1JdXjRdov.jpg', '/miHituxAvyTN1EiVd3ivHATPMuH.jpg', '/8BKhFMoI4nLdRcNsGa0917WpFcv.jpg', '/uwUJyAVJecME2Za05MO3Os5NgMN.jpg', '/1tmW4YcZbbnVXsdhOF5l1Vw4hrn.jpg', '/bqGfUxcgh0h2G0piN14kcUp1jtX.jpg', '/8hQ30FJB9OSLeF3qDDS8dEuXavd.jpg', '/bhbM9ubZ1ntgG6Nb7W2aSMMHUg2.jpg', '/dj3gMEPXmisUr0sAfQEqguL5CcG.jpg', '/wn6M8RUu4aXAkm5CDYi925TjF5x.jpg', '/o7RGTaHBMKbcoaBmVhalbxF9iyr.jpg', '/kuq4rOo5xaeE4O9UrbmYePsnGk.jpg', '/lvH8MQw49D2y6YfdReuVimJ2M56.jpg', '/ilsnLZHdsfu3BBBxDNpTtD6AcUF.jpg', '/mg3pPorXcQMxwKTCGyGgUlD3AGr.jpg', '/r10xlLTZACGRPk3DdUFsMbKXC6S.jpg', '/67rpL2zu7XbpfnUck4EDq5dJ0oq.jpg', '/fVaJ6lIPG01GbRf6CiZVWLqdRWP.jpg', '/aLcqG3KYjn7UcaP9RkwoDCCVtDM.jpg', '/fqCX3kCbnIoo7e0WzoYnCJpjaiA.jpg', '/rcvFrSxNHleYiECFK5C9UTRo6pt.jpg', '/5U3zBsuLdMobHmgsImRcz9v4zJo.jpg', '/151LQXEVZNcEUnHrJ6zrmC4IrJY.jpg', '/lZERCEFV7eEz4HhKEc8oAV3mILn.jpg', '/kF1LegAFVXVLpBuncjtA2vWU4te.jpg', '/b8PrXkCXucjcpMDF6wTack7XLox.jpg', '/n4wda3f2nN5ZydGFyxgVDtpGZ1s.jpg', '/AkTECnZFMA9eiHhAGTFknHRCEru.jpg', '/gC0NNBDPMv9hCE3lFDlXpxRXutJ.jpg', '/jfZk3qhdEHpbhOgoe6LWiWQH1vw.jpg', '/b7Fu087b4lbgvD2Zkh9uuUzGvGW.jpg', '/qJULvvrFj2jcQSW5CpBurl5F0GH.jpg', '/2iLknZbwsuo2DU2XMwFustMv1Wc.jpg', '/unbyPHlYp98fZXIycBs69iIqG7X.jpg', '/1wTXK636CyqDhvJ3AHcbTQdbqzA.jpg', '/vpl0SgFYGJASU4X5otf4bXfN3CQ.jpg', '/eVmnHzShdLNGN6WNIEwD9lAW0XL.jpg', '/b3UIToGx8JIpRqUTGkaoyaNLuU3.jpg', '/bCS4nLmIb1Trem2XD1Gmv7QVCkq.jpg', '/roZDhuv0u5LOAbybq2lgQpSVOGY.jpg', '/7oj5A9xCVwSgocb9eQfoTEFQs0L.jpg', '/ijKpiStjMetB43uxOAXpE8RAQR7.jpg', '/f8dHlNWaxXLod6NQ5cSJmzwxvzp.jpg', '/oSAVoPnVgQmYnEN3e39aXjGicnd.jpg', '/6mp9FB58YtnvvluKr2uYntlOUA6.jpg', '/4wrnEENDwfqQqWw3iibW4TO7uz2.jpg', '/4vj4UFn2neMtq37tdiPNKizl3yZ.jpg', '/oZ6USHIpL6A7r6JWDxodgguYVmb.jpg', '/mao3SD11TSZW40HbM2Hbc3q6Cg8.jpg', '/aw5qvRlY31AixBLr5op0CIqCMdS.jpg', '/tRNlZbgNCNOpLpbPEz5L8G8A0JN.jpg', '/bdN3gXuIZYaJP7ftKK2sU0nPtEA.jpg', '/gcphM7ZLxS5HPeCZgjZobfz907x.jpg', '/Ag2B2KHKQPukjH7WutmgnnSNurZ.jpg', '/37Fr7lY4QBHsuxlLJIfTNxW6nGW.jpg', '/a03qYIZM0zkEutN5JRZddTBmQqY.jpg', '/utdVHiRHQHKIMd11VHx1KOFdxFC.jpg', '/ti7W0gh3WyHnQGiBzZDMH7TpYtD.jpg', '/wiSuje8hdVuwM0pvhtSFirCHmJF.jpg', '/bQNVJKVuSoyoa5iLvkesxRa8DH0.jpg', '/v5aGIxVprgv85Qa1XDbxYN2xpt6.jpg', '/pvSESD7ujxWZwtYDb9l57qE0ywq.jpg', '/9QxqZI7ssVzyKEBwdUvOt3AUWzA.jpg', '/lIl2CrnWohGrZSO9eyKRptxZ7Hs.jpg', '/nQP63IbCJ5B9O348h5FAAmGWanG.jpg', '/2ZOzyhoW08neG27DVySMCcq2emd.jpg', '/9yOIPXWQ9ttsZfzHvmcS7XiV8To.jpg', '/rOa94QOq3wbqKBHjSqL0WtPPJm1.jpg', '/rwEc7SgXu7b5Yo8Co4CvSinF91v.jpg', '/9jMvxh1Ib6BPnE0pprRcaNibKDO.jpg', '/6NHAZLR4AJhBAVU4qFzkucfyhVl.jpg', '/76lhZonZ0Fa2T8dq5tBtsV9yDCK.jpg', '/agcgaJ1ieNc972XWGBvsJkDxo08.jpg', '/qKnagY6ksIlZsbsUunXQCvbMk7K.jpg', '/8bLzqR9BuEUmVxficFYakJIQUan.jpg', '/pvW6UoBZOp9IrMqpT5ha29snsDR.jpg', '/3noVrrRbPU0iEcVhRRLGa7hnqY.jpg', '/AdT50fOv8Sn7wnRMU4IUsLwy4CQ.jpg', '/29bgk0clNyU7xS6DkcgVFYos7yG.jpg', '/cibtd0x7yrEnbl2by7OnNY61bEM.jpg', '/9pJJXtw7j0nSs1TvBGPKYwQuId0.jpg', '/syor3JlLzuzPkeheD2QHSYaJEQN.jpg', '/rN2eGbRpbJw8ZFVDiQfDxsknirP.jpg', '/wx6gj3KKbnOsrGnwA6CyfXRrVF0.jpg', '/uuxtLLbfMVzWL4ythAgX87JinR3.jpg', '/rHQWJ745h6vk9IzMN4NKBkxpYcR.jpg', '/4oanOpX1VAK62iU77RvOq3WcrzA.jpg', '/7bw2iBAdTu3fZoAKvZobbuMojMz.jpg', '/8wkZx4FbABuNyOFIb94DFDC3CcZ.jpg', '/dKoKG8SyvDjOW3ZC4OO6mSza8xZ.jpg', '/9DQtfm51BsRQFVe5lOPNMY2w23O.jpg', '/qosQop2cGWG4WCtf1tbx98xXcDj.jpg', '/punmWKefqHUGo2f3dO3lpfRbOB2.jpg', '/89BhTcxt9s7daMsx44HLrH1yoYm.jpg', '/j6bxCWwMpM44nwpbcosrE2fFNSr.jpg', '/xKsiJimxRa44FArhlfGHnylrT0i.jpg', '/9cH4zoed31NY6xxgeMTzlzEvXaN.jpg', '/wtjVc3Yja1cTITPfgsXLgGy79MF.jpg', '/rqLdxsUoGDWst28yXAmMIN1uVv6.jpg', '/A0eycgzccYk6VlpWF89L7ia2hNO.jpg', '/qTOHCFcgQH1NJZ0VI8KKuZxpd2s.jpg', '/bv15haKwQdMyGoVdnmP02MYE2bg.jpg', '/fAjOgo4NMGzqSfgvOzCBrU51hbb.jpg', '/tuLCSrXvRSXVlumY4e1TGb9zAc2.jpg', '/2SZAFZw6ITYtgRio3y5QDy2lvs0.jpg', '/cNpg2TjWtsut8QUBqezkbHXQFgb.jpg', '/7GyVI1QpkycimTgFPlrpUq3jqiT.jpg', '/h4SgwOskf3CIBlsEiZwVFDkB7Gy.jpg', '/m624LrPxlbXkMZVyM9tyDkI8g0M.jpg', '/atJR8vClEvAU7MtB5hy4oxuf4RK.jpg', '/zOwP4sWiVUffsbzQva742GL3ZXA.jpg', '/aE4PR92KPazsbZKEha06roRoXgv.jpg', '/dOdURWFzv6UGYK1tBzXsn9mY7oD.jpg', '/ujX6Liubmg9cBdqZIm7MxYm6DvZ.jpg', '/jb4GtFklHbxTJ9u3zMgUvJ5dkeE.jpg', '/8zoy0oZ0CiCXleCsnQaPWVogAir.jpg', '/t72QYzBgFNVECrvln688z3Xf2aG.jpg', '/u5sQzZtxe3VnWNZh8ExijDQG9yZ.jpg', '/yVyVqv7D6l2LpggHbwBkut7wHdw.jpg', '/jKFVa9Dq2lSc7VePdMs8ApZbGX4.jpg', '/tPAAA4p8NqKbkhIAxPz3MaAkjMA.jpg', '/fqTQIMWqjHoHVQouignErrOy3Co.jpg', '/wsUt98RThQsNXbTY3OT5Fl2zYFa.jpg', '/hGGmC4a3F9JYYQUM2ePz6lw4rj6.jpg', '/dyXgxnqRdHPzoGXqwYKNnsJ7bgl.jpg', '/yfUZxBmAdXF6DNQnBWSJqekOOJc.jpg', '/mrwOUto3pCzo7EygRTjgZOJ60nk.jpg', '/mrf31ezhckXfkIUd0p8LHqksvbG.jpg', '/cq5RVLOYxYWGkGI3FWGmoTYWheV.jpg', '/riVXh3EimGO0y5dgQxEWPRy5Itg.jpg', '/t3oYtCqDue393e7uhDn5f8NBQRx.jpg', '/6Vwc5vgioIXUhLQGAqmp3uDDKJJ.jpg', '/eJ49J6QXrTJryC61p43NTAULms.jpg', '/74Tw91IVP3Q8AjfeNSqgfZ0FGWK.jpg', '/u8qp8FKo6sU7SUOER8guCd8LVsv.jpg', '/dVppgIoMNu3NvK3GThHdXjqOHYD.jpg', '/7IKbG5NpqnT8UKP6bigmeQmmR2k.jpg', '/tptisxjbdI4LInxdjrU95DYCXnT.jpg', '/gjHergpHMkxtgpSr8fTbasVmXDS.jpg', '/cwB0t4OHX1Pw1Umzc9jPgzalUpS.jpg', '/eJ7Rg29Gf9OMBRJTx7S1MWkoIDy.jpg', '/6O3eA55DO3fHicwlAE3DaSrA5Uv.jpg', '/gAP5xELKJrIdLjc20W7QUSD2q9Z.jpg', '/o9KCIyB81bxUIysFYa32tRmDLLa.jpg', '/iUVqFNAsczEZDKMZ0WUwmijFXXi.jpg', '/xr5vqYTGDDNp1czYWS3FXDgTLgS.jpg', '/6NyOWQ32k1uh6DOtwJQkc3Gsq0V.jpg', '/yfvof5mHWcHI51d985ty8Md5Unz.jpg', '/xKbkg7hXd2sxjC4yog7wRsa0Htf.jpg', '/eQ0fpkk2DSlMGWp3E4BzEqAxxD5.jpg', '/iwU4g5UynQRp5PSMR6gLIW84FdE.jpg', '/lHZXeG4sTkWREgkP7iJCWGJkPmp.jpg', '/7pfpRJMkk7iy4pby2gnIX8dmPQc.jpg', '/yWXumElnl9Ma5upfZ0lVXzJoSIZ.jpg', '/hpUFOvUg4QEBaYf17ptfBgftF1A.jpg', '/wz3tHxlBIlVXrwdcxi4V6RgBDLQ.jpg', '/2QsdTyaPOEeH3Hs9IZ7wP4Q47KI.jpg', '/zeZ2KBilr4i1weqDgaJMXwfszfB.jpg', '/iHFgXmnl8kI5Mj7M2FIgVNidh1K.jpg', '/lVEKzRlME0PzVhhsYIjSozUzOjG.jpg', '/meHgOaJw1qG4ghyOQpgcAEnGiYL.jpg', '/lgikX0J6y1HQwd2olhpAO6uFaRM.jpg', '/ydO1cCU9rNkSCMwYRAj0uAXh2jc.jpg', '/6r0kwSACT5ByguAtPOD2jEBX4Bk.jpg', '/8ex63HADjW4Aq0Yyi7I206fPD4w.jpg', '/poUximKxGghA1MgjN0DNUYTb8aK.jpg', '/sWBfP7vfft2EcmDet9wMVS1RgZt.jpg', '/grgvwGEAUNurWDsIyTLeGSQkc5r.jpg', '/8y9yQAwWlWYVzLxz0spQRoKWh3T.jpg', '/z2im6qUwtDIn2KMiWoRg0dRIXIC.jpg', '/5mGl3dFFCzeTCG3otMmsjY71Bdm.jpg', '/l95SOzLzZ9x9qY0EdBPYa6mnFDL.jpg', '/bctwBm75A0hCMIkRAv9hudqJgxU.jpg', '/q9rKjv1XucoqDg6046hqvfuQInA.jpg', '/pMs8nZuoLPrzL20dcS7cZM11ba9.jpg', '/2uTHwj5aHXiDlw8V99wzRrmTljD.jpg', '/yuNs09hvpHVU1cBTCAk9zxsL2oW.jpg', '/nWtySDlffTfwAa0rSfq61o33ZXV.jpg', '/uprP8rtOgMYJQ2h3ldDFvGsaBgH.jpg', '/3jFQqn81xdYqNquQZtsu8PJBPiB.jpg', '/nzlv62aC0octS5AklAiWpXLX9Z0.jpg', '/j0W26SOwnorl6Kga9A90wCypjcr.jpg', '/adRNs1fR1ggpsUQejMvzRiyu7F2.jpg', '/rO9d5ES2v5h2xDDZzVWUfQwdZ42.jpg', '/vqxdADPdy0ZVJr8dMB3mh6C5Vsv.jpg', '/tBS1gqYTGS31sM9vAGc5fKCAJTA.jpg', '/neHrQLVfT3KPqvv30pNPyRb6chQ.jpg', '/wqG9YXPBpDbC4NpV1Xc42BOm2hO.jpg', '/uSae85DR1D4uKknQIsHbuqO1RgN.jpg', '/pXLnKcUzbUZI8OwkznA8te5dOSt.jpg', '/7leBWM27Q0TUnvmhw6WnFNgGn4G.jpg', '/fKTPH2WvH8nHTXeBYBVhawtRqtR.jpg', '/xILX5k6PvSeCQ0NFVjKQJKkiJr2.jpg', '/iQmjFjtM4bf85KY3ToZTjJPNfx0.jpg', '/exU1uUwNuF7EXy6G9nKVUJfGG4l.jpg', '/psE5eio91dVL1k5nTwPUNLp7Kuy.jpg', '/dH4wSoQx5Pn5Ig3lPediWEJvzzl.jpg', '/iWr4SwGJTF9Pamoeaan8tLgp0r5.jpg', '/ogpwO0trLk4Fc4eqgy5S4ShH3oJ.jpg', '/AoLzLn8Z5akd1zHfBcrIiF2MdPw.jpg', '/6BHA8tT4d4M5bpj45VCmehpaKyV.jpg', '/uCgVdMeAaGKNgXjkRoQEHuOOn6x.jpg', '/5Pe6iiwZyExtIzeuk2Q5LNxLuHO.jpg', '/3PcEBIneICSp2Bct3eVDUztPkV6.jpg', '/6ONkGH38ajR7uFvg5WX8SbkbfVP.jpg', '/d2dbk2s4Nnlw5FxJ4f0mues6kp3.jpg', '/dCCsDcMeJFVOUN0mt9QYGHZDquq.jpg', '/oAvAkTk0cta7o1hB1WlmUYV8txT.jpg', '/jEiaUHh062AlNNDdIIB6W7DMb1V.jpg', '/cNKT3GNCndTIHlzhEU8Ga6kMNEj.jpg', '/orak5VWu5CPaty1XCzdYWnxtEEd.jpg', '/ytzQijCzGG8KDzHYri9nc0jyJdh.jpg', '/nkmokS8g0GHjxdhmRNfYueYvUN5.jpg', '/f3AKnpK3aFPwnjHTSRkviTkuobr.jpg', '/31yNVJl968krAHy3f5nFB6kLl7i.jpg', '/qaXfDrZCdd3wix2XYor5HDDpFrT.jpg', '/tDDUPuvdCLjx4hwRYPHdZxt2uB4.jpg', '/2zjoduvmZzBWRPYti8pdBxr4tSt.jpg', '/tLFV34gBCjuc55xFwFL7zyoCClK.jpg', '/pFj339q3hoXg0NYbo7BvnmdBRhK.jpg', '/5ZbII3voM1KrQYgM76ZnnkBHXB4.jpg', '/iJeqcL4vlz8u1emUeZzcBBdaLoy.jpg', '/gaky2GoDZHmt1p3HwPYiiS7SOeC.jpg', '/60SUpn8uryJRorPOOwXYLfwNCDV.jpg', '/bzu9nTQPO690uSYOOy7hXjK1vn5.jpg', '/k34v0hBeMdVl41w47QKqZL3UH0Y.jpg', '/e8aNU97T9zggNstlyc922c1qOPA.jpg', '/3bX6VVSMf0dvzk5pMT4ALG5A92d.jpg', '/fmls6kOMCfKWrJaq43PLCWVr6ve.jpg', '/odvmwLXNfkE1JmvfVBraaMGbtQQ.jpg', '/r1pjXIXCwlFhtrEvPXxhw2wwqry.jpg', '/g5svlJvwpUpo8NeNzIGeBoctgTX.jpg', '/8Ta8uxDusA18OsIb3ksLOH4qTxv.jpg', '/8uWjDveJ8bkhcolpwoMMDNDOkFL.jpg', '/lK9LE5D67HNyPlhJcjKAgnRh0OO.jpg', '/ob9dYT7cuEcVrjkQXajnIgQsXHt.jpg', '/eaIXDmrHIwYSXjSK0N6hcXM0gGx.jpg', '/5giub1nKK3sFRvZxmebe31scQOo.jpg', '/ctqienHJX0uuQCIv7Qr0WvXshld.jpg', '/cfNxgChrQI4rQqcDtWx0XbUHIP.jpg', '/a3TkBxEd4gS4l9JAqMOnkChguv3.jpg', '/oiouMT6o8ss9Iro2Y1wS6As0IS0.jpg', '/7EpzeTKziFdjMYMtcqtu9QYmSLu.jpg', '/9xKxkCc3aotmu7r8iQT5jvgMRMp.jpg', '/l7EEYEjW9je0VYqQKpWe5GQqKxO.jpg', '/pCti3dACGQQpvD0gQnG7pacZwAD.jpg', '/iLYLgzHXAf6sJUjWBTF7gkFgvYZ.jpg', '/g4PdSeyLwpspxd47miKPFBnv7yK.jpg', '/hSgNpJ92Vi4SmW915qb7wzSH8aP.jpg', '/aN4HPRZvaNawxmDs92HrEwV7LPl.jpg', '/rXHdIfyJ5ojQYsN2wPrmf9aIIyN.jpg', '/rzgaiEqMSvSQJWwgk5phFQnlTIa.jpg', '/qrB8po1jncE4tK8t3UXV040NTVb.jpg', '/cXDFFv6yZNW3vUHOKKUPJNnL0So.jpg', '/mJGIjkALIOmj1TGv48l3qGvJQuy.jpg', '/7kSYGg6zrsXBsLvZnaNwoteiruv.jpg', '/hr0L2aueqlP2BYUblTTjmtn0hw4.jpg', '/rcqIPCMhvYpreMHzMuHiezQqBK3.jpg', '/rrS7K8tXVFUBliIKWaRuSq65nWr.jpg', '/8JoNBc8AMLcTXbAURDJXXZpTo9j.jpg', '/ApcGBERN0p9I0nDOIwJeEmpnLU5.jpg', '/8JCu1wi83pirpHEbVpmpfowDolX.jpg', '/sJTxiMt4slbmTnQoV5UyA2HlYx4.jpg', '/85cWkCVftiVs0BVey6pxX8uNmLt.jpg', '/bOizb8SnashwNbFCpwie5pmLi1m.jpg', '/ht5Jqka646AW8P3IsdrUPf8W8La.jpg', '/mQyK6KLWCwvrG8lBpfDWEWd6lK1.jpg', '/bfezKMcrzCIU4p72SljoZMjJUsW.jpg', '/9LfroB8zJD7HqP5hsxeDPHrzbw0.jpg', '/oWIhEWtHbSlvttp5qbBEutPOV7G.jpg', '/vvPsRFPzOMqnlzbFfxYR2EPqUeg.jpg', '/guMc9QD270iEVYLpEJiAndSyO7G.jpg', '/1Z07Kqke0JyOn3ODt2t3qd2CEpN.jpg', '/wUpqWb7YZW1Jz2oyF4UJgItYXDC.jpg', '/mKq0xiEM0BoETIJ3Mrs4lc5Oamw.jpg', '/3viEo7Rt7swwh573wBCZffcM7eo.jpg', '/jtB2vPm7Drpw0AToSxKIcxjRcgC.jpg', '/f1Lt6pJEb25LVEIodLxZDgIhTks.jpg', '/2NaeRiOuxkpWv8s0uBzSlp7SuCn.jpg', '/gP3KJvuqZGwYEZ0BWXNadYAMFO3.jpg', '/jpoA8SXWQpCsEXDeXbK6xoKccWV.jpg', '/c0GcUqVFuklMyuNJuag3NRpGZpu.jpg', '/eq5P71YHwwaacEYKaQ72Wxy6BlT.jpg', '/rc1iRerRJIw3iStmlsdQIZUp49J.jpg', '/mBxOeqHQvdF5lxGtDUB6XVcJNi5.jpg', '/6XDLzDabcJpuURgilfSTX080lNZ.jpg', '/ws4Hj54pdDsk2DdIEPDwZU8z5KT.jpg', '/eTOmj92I7sLydsEXoHE4UPFjynG.jpg', '/tTiMHKsTeA30CXJS3byz2jG1MlR.jpg', '/stbZZs3WMPr9rvAT92Qd8gXCUfx.jpg', '/1EePZmyG7B1Gm9qubLWVtlICDiG.jpg', '/70fWwkCYjsHPhPRUF9OydhbEkVC.jpg', '/4Op2hWPNa5JygwbmLs1O1pDAm7L.jpg', '/fN0YkgaNUNR8Tf2d4MdpaHwREg8.jpg', '/pi6mwFCtTDIAHOHWan4AQ36Tdh2.jpg', '/oAletUf008Es7TQmWIZjjPTQw1R.jpg', '/3dboviWGRZdGHXVEKqCU6jq5BX3.jpg', '/xwfcNOXVaaauEG6zX73ECq5Vj6k.jpg', '/j3U7vzNilUnu3E3zMgBaSSRhTqF.jpg', '/ezAOlzdExzNXzmsTxQUTwo6F3gZ.jpg', '/df17TKgMV104fbEIfPstCkAvBbe.jpg', '/s9oQj6ZzPDVeQctL8ZDVchtDquw.jpg', '/1u2GII8LtwIRWLyGTotC6AlIZL8.jpg', '/u0HJjTs5ZQd7jL9QG4mVyUVYqQD.jpg', '/fp7cZ3ENxJmKBSA46XrkqGmSZdx.jpg', '/h9x3h93HG5iCjevWwUppofmkuwW.jpg', '/i6Wdrls4gsFXmwbC2MYmabHOWzn.jpg', '/wDnmRGxiA2lUgmxgoFtYdvvzYVN.jpg', '/3eYugifQ739WRTuG6q5CumYpB6.jpg', '/tQnmavK2agVr1jz0CEnPa0hsYBp.jpg', '/8EF7hJ1lWRA7ngk1SR0TePbYD6n.jpg', '/6Y3tH8PrZKr0Cv6KroaWlvMIlaU.jpg', '/vzvKcPQ4o7TjWeGIn0aGC9FeVNu.jpg', '/hrJUZ5Jo2G3Czy391evhlxgbEdJ.jpg', '/rOD0IgjAop4LA2vuimhNRLyGijf.jpg', '/zRwO5BPPgkTNo1PoomZPE7wkKvQ.jpg', '/irP27RDYv9JjF7fVPKYKUODhr0S.jpg', '/p2JzxFRAlbxS4EvWMo4yiYZXu1W.jpg', '/d9EYFtoo4QJMCl5qWzS8zAblAlf.jpg', '/nIImGBHeBW90jAxCpp7RwGN2Mgk.jpg', '/v4FHdJCRg94cOKX9hwKU9aTad7k.jpg', '/tCQtssGTb74NQV198XaaTFOxywV.jpg', '/z5bRqRQv9UIieAuySQ82CTmtU6t.jpg', '/8AYfVmtQX0MgcaAMmowLkvQv47K.jpg', '/hg9rnax7IcerZOiOvi2oEshBt7f.jpg', '/mZrnY7zrfEqjJKJT8UFs03QlTpe.jpg', '/tFB5SGE30So69tRz7mebiMSCFZ3.jpg', '/pU1DqL2OhZY8i1FLb74qYWMGASa.jpg', '/dqlxzH1DEIFTSYCv6HM0C1sxVB7.jpg', '/nOI2Siljlsi0HbzVpcaP2zaI3qO.jpg', '/lAFXWGCUAPSF6v671gaobbfz9mq.jpg', '/3opgrJowXttqeFgLRzIdHTLmdHI.jpg', '/jDheQYsH7fwtTon6354CWxLxnbc.jpg', '/gaivVSK2pOIOAWNGGKyMGpIAC2z.jpg', '/hDni6zlvNgGW4Li3SIdzhsL54uI.jpg', '/A3omWIGbMcGTP43nbQBn75qHjei.jpg', '/6OApdDSChDhlNmi5L2NdL4fverK.jpg', '/211ixGjXqxXNe2yeYZTAG5sd4HU.jpg', '/iRpMKBjY1sXcRWL6monOQKBfzAJ.jpg', '/je9RusBcFosNylhdRrweTkLkamx.jpg', '/a14jV8DjI5enrPMX3MIRxBoXoMP.jpg', '/v1jB1xjTZpW5TYtLaHnagIErFsp.jpg', '/z4h5z2ultilQ4KaEhD2dSsYbqB.jpg', '/9gtc3GLDCeLZ9vhaq2e0PZQyGDo.jpg', '/gegAwg4aVl3jpS3oi8sij7fpArL.jpg', '/lEeOaKZf16R1cZCuryP859SKgE7.jpg', '/nYvQZLi9P7kmR3lmgkp5tujxiMP.jpg', '/uG4D95vfcZ3SQc7AMpvQCy2kfCT.jpg', '/bZhj71lpvfAIkHUMdvgftD2h1bY.jpg', '/kOKvBKLCiUx1yk8wVNvp3e1DBWt.jpg', '/s9ZLJz5haARLcLm8GGvAeTSslqc.jpg', '/6Wkqvkg5EMaJMLuacz4sz8T9ijp.jpg', '/5xM2crlkyRwtbbfMQFb26A6NVmr.jpg', '/6YUrt0c9Q30UpUYskc0ppbO7DXH.jpg', '/s6Kf3qHvRKjnZjyVj7YcbhTHrxi.jpg', '/zGoxNkACbex9VoAmJS6iAQvXoHs.jpg', '/nQfJRcsHoEnPX0RY1oHJqQl2gI4.jpg', '/h7go9xdRhf4fE7rkDzWe7eGUxR6.jpg', '/oKXQPPmeAf4zMK5L9WzQuItTI9y.jpg', '/vak0Hclk3ih11ljYdp6HPYZ1czh.jpg', '/lNYltGAlgtyNmuGKHoX8iQAeit9.jpg', '/icpIopNi4fFtgxlcWeRDH5nZPG4.jpg', '/fA2hFBbo1Y8sSIUtUAkUn8UiICI.jpg', '/3gdTo4OmciK2nGFBtAazDpozP95.jpg', '/4w4TQUzYmiz99Pg5OqjUt1TOEAe.jpg', '/bVnHnrojrIUMLnLDSSXi3krg4VJ.jpg', '/zInSl0P8Rk04mgAHz4E1xR1hmmH.jpg', '/vt3Jf9fzHKO2WYQNCQQTsXJcdCM.jpg', '/y0I9F5u7yianHQuFYzy8xsR94q9.jpg', '/guG09K0cxo9UJMBlbYRTwh2GylW.jpg', '/poNBHaE54CXOtTjmAcnrb729pDQ.jpg', '/xbXzUM2cQoaHNUJrp6kOKFkf3LL.jpg', '/8MhqFD41aixsEGKQAfycoH4RSR5.jpg', '/osjIjyDc6le4lqqNZvq9d5qj0jC.jpg', '/mhiwE3OIgeURZcAecAR1Ew6W2sQ.jpg', '/vXVked88FPWAqVJNX7qqFarBWMP.jpg', '/i5BTtItJTaqGoZ0hEKlj5SzQOkh.jpg', '/ghmlIwKMK1c0cQDmGH9fnIarQ0t.jpg', '/zj7PZtHjCOOw1nZ5lARNL4CafaX.jpg', '/rJFbUt5CVBxOzJkrmaEnGJtma5x.jpg', '/u3y3Ex9c69T4hRBZcIIPIrKUXsw.jpg', '/7eNOyX67wrsmJpuFeVmjzVL9KWw.jpg', '/aojNRY7yRJIQ51nkW2q0ApQ9vol.jpg', '/cKEM1ERV1lqVH83F95845FO8AW6.jpg', '/rFiVxVt83lFU5e3UyUjePo8wKeR.jpg', '/dAUwS3wmSrA9IH02xukDKxB6CQK.jpg', '/4tkTHjYJ7UHRDLZc1gfQzmEj6Qo.jpg', '/zzcwe9aqLY39rEwULxYmSfOlWuF.jpg', '/taqB3T5bt7rgYPozK56GQfU3aBf.jpg', '/zhHWbDF0BdCSUoLmcQMHDqM8cBI.jpg', '/mepdUhSur3MXxM8VCuMaJwLShFJ.jpg', '/pDc2SDH2ndElbg93aR2Id9eTgoJ.jpg', '/qVs4jjEngrT71XLclmmJKMr2h72.jpg', '/tTOiMCTNSZ1IbLF0GkhKsO5YUb6.jpg', '/6doRIUrCTNjUEk2WzC3DU6QMG4U.jpg', '/bxdRr1isvADfem0j3W5ZwSG6fE6.jpg', '/xHzULcM3LKhw532adNt54SMfdmG.jpg', '/8murHJQyYQezDHm3CHn261Zw2zs.jpg', '/vIZ4X0FTDNoxhlvGKwv17CEnpUo.jpg', '/iWsnznzdtlgMYBaftnLbu8i1wkg.jpg', '/zlvv836AMk92uUUWIFY1DWeRUn4.jpg', '/bkbIkAPWoVsDFJK7ria2fOBFw1A.jpg', '/eQ72Hdf6sKBOnzA1HWTx5jYeuzE.jpg', '/1I0wbQjSg7M2sXj5M6rllkl8sET.jpg', '/uZ9i1ivL7rtqY6Z4FxgGkSnF4mZ.jpg', '/drfusGgi3MnZs7WQROzmWRdCIhf.jpg', '/8oKHBckmdhH4EVhH8CE0R2IxTrw.jpg', '/5oZO16FhBzkZ1LcMKIlm92PQQsD.jpg', '/MaLLF6QmfoZvGy4RH3vQTu3eWD.jpg', '/kGbx95vZRmJGv6yiwDs3GyvK5LF.jpg', '/z6i9Qc7UMtiSX6TbK2BpfMrFWJN.jpg', '/1ua0jberyWnXlOQ9JXpVLTb9vjS.jpg', '/d2ir64IkXExrdLgJXtbqNEduAhZ.jpg', '/1HQavodBAhgkLqr29PPt4Jy2ebF.jpg', '/jg7vZUBlhF9I3JAGyOjLtPi8N7Q.jpg', '/bhNfqgdaf8QuVvT75sLx26UzdpE.jpg', '/bcRK1ykUiB0PKGVIvjf0UTlamus.jpg', '/vmwSCgBIkvJAKqmEPIByHqH4px0.jpg', '/zjlAlpz5HaUL9bZQGg4SYqH55Oo.jpg', '/3AEGRu7g8U1dwvyvMQmpsQlzODD.jpg', '/hPnKJDvliL2cOHFL8xPZ2BmcJ5a.jpg', '/9wvNBOWpUpqAP4IquQWtNar77av.jpg', '/eqFhruWEIRwjkvqgJN48VPuR50Q.jpg', '/geKOL5vnXoqTEH8D2qVoYGIkfys.jpg', '/8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg', '/ptpr0kGAckfQkJeJIt8st5dglvd.jpg', '/q2uyutja5fBQJ595oEAfticrcfU.jpg', '/e5H3wpl1t4EOzad9LpjJAhNPka4.jpg', '/boAUuJBeID7VNp4L7LNMQs8mfQS.jpg', '/aqZ75oN6yd7UTShYIMNlpSdDbbH.jpg', '/2y48XTa483LRFIb5fDKOwr8DHWz.jpg', '/gC88YsrMe1sKCctzfnV955tcr6c.jpg', '/eHjIEiEKTnb9euehI7IbCxtGH5N.jpg', '/9AiHV08v8RyyuHcO5wuTaTXBxfe.jpg', '/4mHVnPcbOmycA5n3AKREsNho1tO.jpg', '/aGfEOxRPwp5lEeYfUU0cBpQ0k9K.jpg', '/55Mshyp5vXEyZYlGF9phGdR2gsG.jpg', '/a6v21Mgz2w6OQL7ezkQxGbGA92W.jpg', '/3yw39HIxi8bS3i0I75GygeOGVbL.jpg', '/ncKCQVXgk4BcQV6XbvesgZ2zLvZ.jpg', '/iAv3HAlrrIgjcf2yCFvedJzekXT.jpg', '/8OQzw8keE6sDNH25sOqPRTxhFTO.jpg', '/oPfQrmf2YgwSKKdaqDohtk0LciQ.jpg', '/c0DCmfC7Et2K3URnIJ4ahJpeXR2.jpg', '/rc2naqhwFHtl5xzut3KlUQKed9x.jpg', '/aiFAq6HrEENrP2Hs9UCrjC9siVI.jpg', '/8HCoPfguQ3u1QhiunBBJxHSy2K1.jpg', '/fj4Sw2PihpjJkkeyhAWV5x933no.jpg', '/mmZi0tyPFfbcCqEsJIPxVldCPOL.jpg', '/oejIAXQupayIdy2H5FKXidNGj02.jpg', '/ixLH2iM9at8BbuLr5wQWnCfwhJO.jpg', '/qsX1in0bR35lbtS0m9Sdaal02K4.jpg', '/ywj717tJsdtMjD1iC4dCrSJAYTw.jpg', '/2AXxc5qrYsix01mD7uyy7PTMnQq.jpg', '/89fbqq5nnnzroLpD13T4TJ55Llf.jpg', '/uwOo42nxRKeD5pyG2aREp0Dfu2a.jpg', '/95mVJrYVxxZX8y7IA9QJWw21Sxe.jpg', '/ooOGz4YyBgp7EewnnpavQISCr25.jpg', '/yyChRudT9X0C4234kvTSNsvXirf.jpg', '/cEhBHpf1tyaYM4nMAd6PW9a3oZ3.jpg', '/efoCIdMmNgSdOlsNwovGxByjlOR.jpg', '/3syYwwZbmk8xRhFKBYvbiY0B037.jpg', '/vkecMXHRfnQ2G3n3BBbRXlrsLbR.jpg', '/joNffSkuJd4n4GlzDhmCJFwpDyC.jpg', '/3sUflKm4wyhABAcgSxiB8zDJ3WJ.jpg', '/5t05uhX5ULn8Um2f1ZuznVvIffU.jpg', '/k1qmORaMZVfF5vQArYJD8PODapt.jpg', '/vrcpQICJZvIfhstaWhprHP2t1pJ.jpg', '/fRtaxfyynWMJI6DhejyA6JOzVTB.jpg', '/jpD6z9fgNe7OqsHoDeAWQWoULde.jpg', '/8aL8aGfyKo3KsmLJXuuPZVCeQzB.jpg', '/qefIXX7dwY8eKfMUcedn98HBMhb.jpg', '/dt9ODfEeCnHBZn0rRZMLwudeGAo.jpg', '/xtiPrwnOI7cMCXwWC32GQLiWRET.jpg', '/vTtUTK447f0OQWUYLEouDg8Yank.jpg', '/riSS1kglPxjrM4zxnMsCX6zDEqi.jpg', '/j4KO91h5R4jrXHu3yWw1xBnPmyG.jpg', '/yg7B62JJbJrkBwiQrRf8vMDogLB.jpg', '/AvqMWPV1oyhlceU9Eq0LNRkSKe7.jpg', '/kAYtsVpE7q6NhLz6vKYAxOM6LmN.jpg', '/2j5oI4E5BRJkdU0UWaelNDo0iZZ.jpg', '/649ruw8GkG4Ey5JDMXxJDLC6jfD.jpg', '/bNoTicKwuf13iwqSmmGjjJAQac7.jpg', '/jvaI1gezzvhkKid00goKxz9fAso.jpg', '/aEY57WJu84nUn0b9PknyVAPu3xX.jpg', '/47noGzgMSj01xFnpnVUhPeNMfb2.jpg', '/ga6K522LfGAlHoTaMbc0kESNn6O.jpg', '/4ZLnVUfiCe3wX8Ut9eyujndpyvA.jpg', '/ePpU7vi2awWZOzfiDGVRbdsKnde.jpg', '/fjZv6ATsZxMGJDVC8KRATSnnoLH.jpg', '/3ZsKFl9BX8bmOoGw2lVmVMHuqdh.jpg', '/qxv1LPu17lzOZvOrhtQchU1foxy.jpg', '/aefB62fAcx2OxoaSWMEPt5ezvHQ.jpg', '/wxcbunCEyKxbhuaTjZv91D4f0a5.jpg', '/cZ7GfieJMbcDmb7HzXo32V8gBNT.jpg', '/PnXkWrMH4WHaqD3SjulfK9otmw.jpg', '/lrcuwcNiiZjoB68fzvSOPwu9JWv.jpg', '/dT00YQDn7wiH5OGO9DziqASAw4j.jpg', '/imYs1UAGvlXq0euT2Jee8PbmFWG.jpg', '/iCvn9DQkrD1gjizYR7UkOEO1QzQ.jpg', '/8ITnnLLlOB7XhZsj8WOhpICFX5i.jpg', '/3iD4rpmdg82TajZ8fMvfykF7By0.jpg', '/4tbvuLIzuEKfwsNFEhP3i3usCED.jpg', '/h2NqJnjixzVGaK0G8EVAtwO1Z8J.jpg', '/x2NrJAi1hqYnS5CSRtaqmldMfzW.jpg', '/8KBYRWm2EyHKli5quoIVDHCd6F8.jpg', '/9zwb8QIbAV2l8cSKHzFIAj1322A.jpg', '/7wYG2Rowz7TwOosomGBvuqLAfe5.jpg', '/5NyGSpXYgJ8ZG0At8URp4muckL0.jpg', '/9fZaYcdfuHLCWUYabdVzaZnLHFW.jpg', '/idq4eV7xRhEeI2JTOC2PmOjjhTk.jpg', '/uXhV97FuB8OFt1pSEvIdf3Pnvgg.jpg', '/z3PjbQPksbnAwwzSfLnSph3ZJyA.jpg', '/barGT1G6ElVIdyFrOohQ0gtUp4F.jpg', '/lfPDe1GRL5sASJc3yf0YEPwiAmP.jpg', '/j8zvODfD3ZKx1rizFN3Ai3kqX1O.jpg', '/sCUySzcdrsHrGmvpkgsQ4bRMhvB.jpg', '/5GbB0I4zSnc1HeLrErwSMcz31KP.jpg', '/xluNQVt0p3pXzLWLby0qH1NIeQu.jpg', '/jBthaXnKQzdpC2adZsN14KtFGdk.jpg', '/xPtwGWt72dRDIRlpHgCMmriK1EG.jpg', '/umM0Bt8GOqpWhmVbdEY9fg0Op6K.jpg', '/5RfTJgNOA1UOysOHtVOXaJWvaCZ.jpg', '/hjgOCeGIn56Y0syegaceC57k6gP.jpg', '/25k4Bz7HaoLjOCnVZBz52IJDVQq.jpg', '/2UBFPLKt5YbYJMov4ToKAbX9dXQ.jpg', '/vNcKXmUI4Hvn5VMvCpCWlnoQVz4.jpg', '/3bRQcScE7LhTrxAyETY4xHG76cb.jpg', '/pkxwlwcYfH1s66Ye2mO5ttOObOO.jpg', '/dvSCpCMcfBHqe5etXDDtFHe2Eld.jpg', '/3PYDPnCq27g1juniyMvePYtfVSJ.jpg', '/wPYBGNV4KREkgZ4ELBZ2axd6NH6.jpg', '/eOOjas7U0O2QYvOh2vsN6krVWxX.jpg', '/4qFBCufnzW1BubZjJoj1e5H4fhC.jpg', '/nu3oii71mRekR6beDNpiihd6GSL.jpg', '/ePxV40QYOSZgrpBEZOmDtlQRR6g.jpg', '/9UYo2H6XTPUMpYiTxewsr4laxbz.jpg', '/3D9w3Vv1G1YxSdqwKnfiKDXuz1V.jpg', '/A5DGdsvMWIDgc75qXzDIX1ufLnh.jpg', '/mgjKNDzFINGvNFtHSqzfUZ4pk6Y.jpg', '/ekfE5ChBWPGF5p3VWhrpKgLFYwa.jpg', '/t2GFUkjgEfynpmxqHf60cbIrj9Y.jpg', '/gO6UfLfoOGnbmbrnbF3KMTNqfNC.jpg', '/lTEyneX42noQDG8Cxc8DJvkUB6m.jpg', '/v6614PcDdocBAKYJMkfKaLSMVJA.jpg', '/3cKaEyoEUhxhnZG48dRG0iufPxs.jpg', '/4QCAm7J3nfjZygFQOuWace6ULPX.jpg', '/7p4JCF9ptaE7Ptc9SLxTPv7QdfH.jpg', '/iJOJRVSdKGx3yYdbwfqCiAPHxfK.jpg', '/1eCxQQUEhMVS0nWOSD1SlVbGUWI.jpg', '/9Yg7DZE4ip2Yl0K2BUm6hAd8iRK.jpg', '/p81GFBwd9YaZnx6luJO5bJOqqHJ.jpg', '/wIAxpY365lKSlSXaM8BH7pB3y0M.jpg', '/mesnygQJfEJaWMA89rLk8VEZNj8.jpg', '/pyWvLGCaaI7N8U92BRLBNul2vuI.jpg', '/gF1XEP9gfE6og6s8MGvyFI4Muig.jpg', '/q7zrl3Kvu9E3t1ZCzm8w0lOaQW5.jpg', '/xloEW5DQGqkR9i4EbJ0RXag3DIS.jpg', '/or2wuvAbf2AG9MWylxPUisb85Ew.jpg', '/uejpfeP1atdbdEea84cHFNKL24g.jpg', '/ObORCPqtaZgRhIvPnTTXGk5rAN.jpg', '/ryW8AqLEt7viQZI40obvCVgKyEF.jpg', '/guswIMwCLrDDrLfyiUBJJktmhBh.jpg', '/y3I2XL5436scaaiQh5cfSXHEHnV.jpg', '/tYFY9CkTy6yoaqTZTEu1IAtMBgT.jpg', '/atkSaDwZEcINEaoL0JF25DDdcni.jpg', '/aDIFDU7niNbIHUp5vdCsSxthpeW.jpg', '/pb9giHGBgA4wbRREbbd8XL4XaN7.jpg', '/akndvu1UcoMrEh4NQHXRLxGPTGg.jpg', '/dW9C0FKB3HvwugUUtKXEXBFqcIL.jpg', '/t0uXoXeF9GMdviHgMW7UQzQ4eSG.jpg', '/utCBEg4YNuZYaWSZaY13MXj1Z9G.jpg', '/m75xCRghGBAyXRKuiWbJvDPPGrS.jpg', '/eb6vkfY72J5gZhEnnRncsXSDftz.jpg', '/jtTHxuJhuZpFAnCI4vGjg1LGmpY.jpg', '/qp595lmvI6UTWb1Gc8DD5SnLHnm.jpg', '/gz0LUZClgzS6hCzurFk89e5G5d1.jpg', '/aQxeSwWXB3NaRTiN1DRNHIxReAG.jpg', '/1YX789imfZI5xaztsaqmtz6DVmX.jpg', '/dRRjhIncQlg2Kak1oASyzGEtZ0t.jpg', '/kphZJTxd47ThurGYP01s67m8Dmt.jpg', '/6uq1c4QTytke0y2NWUsCpi0tISw.jpg', '/bbYXxNaOAFtJjQnygqPKm13AC7a.jpg', '/hRJNOQBGkdU7K7DZTB9pGVYpfok.jpg', '/j5GfnhEeBTl46SSc54CMDouRE7Y.jpg', '/kR32sxbb7wNK5pJLlwTido7RCAz.jpg', '/x451yAdEA1OAnt5P2KVRgMoV5Ba.jpg', '/cp7zu2Spi1hkkeI408Ebrhv4zc1.jpg', '/lnxdR1XCdhV268bwOykdsRcUN1x.jpg', '/hZcoR85iY5uDvzlSxAYTGvOLvV9.jpg', '/mXOpcMOEruhz4BX3vXnIYe3rYDM.jpg', '/udw0rc91ixvWneOwuEftXOfzF0x.jpg', '/yef6p6pDg3YNk8I31wlQpotsaYa.jpg', '/obAL7JCj46c7ogTt0PERbEYJlXn.jpg', '/44ZIBFFkkVtBPtjdC2aPMH4YeYf.jpg', '/5s3LUmU4G5ogVueGsWdbSTnMA0o.jpg', '/6TgpVL16UT5ptzRrepVUaYjrg2Y.jpg', '/94UsD1QNU1f4tlkj8Ex3Jim4dj4.jpg', '/1jLg9oKyMfQlcLtAUskZ5MDra5W.jpg', '/9cObSJoxDSVclz9OJzZiSUsYF4i.jpg', '/iY1FDQM6taKwO7bG6YH09nE8NSs.jpg', '/7QjqXSW8pl2PCSaYSUHdO1qc0vh.jpg', '/uL0iqPb4dtICVCCMKYem2yRPBRX.jpg']\n"
    },
    {
        "query": "What are some common keywords associated with movie \"Titanic\"?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# API key to access TMDB API\napi_key = \"0dbab590c7eaca07eb625974a37ad92\" \n# Define the headers to access the API\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Step 1: Get the movie ID for \"Titanic\"\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\"\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\nmovie_id = response.json()['results'][0]['id']\n\n# Step 2: Get the keywords associated with the movie ID\nkeywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\nresponse = requests.get(keywords_url, headers=headers)\nkeywords = response.json()['keywords']\n\n# Extract and print the common keywords associated with the movie \"Titanic\"\ncommon_keywords = [keyword['name'] for keyword in keywords]\nprint(common_keywords)\n```",
        "executed": null
    },
    {
        "query": "Give me a show that is currently on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\nparams = {\n    \"page\": 1\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Print the first show that is currently on the air\nif 'results' in data and len(data['results']) > 0:\n    first_show = data['results'][0]\n    print(\"First show currently on the air:\")\n    print(\"Name:\", first_show['name'])\n    print(\"First Air Date:\", first_show['first_air_date'])\n    print(\"Overview:\", first_show['overview'])\nelse:\n    print(\"No shows currently on the air\")\n```",
        "executed": "First show currently on the air:\nName: The Daily Show\nFirst Air Date: 1996-07-22\nOverview: The World's Fakest News Team tackle the biggest stories in news, politics and pop culture.\n"
    },
    {
        "query": "When is Clint Eastwood's latest movie scheduled to be released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/discover/movie"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and Clint Eastwood's person_id\nperson_id = 31\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the release date of Clint Eastwood's latest movie\nlatest_movie_release_date = data['cast'][0]['release_date'] # Assuming the first movie in cast array is the latest\n\nprint(f\"Clint Eastwood's latest movie is scheduled to be released on: {latest_movie_release_date}\")\n```",
        "executed": "Clint Eastwood's latest movie is scheduled to be released on: 1994-06-23\n"
    },
    {
        "query": "Give me some movie reviews about The Dark Knight",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint URL\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the HTTP headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the query parameter\nparams = {\n    \"query\": \"The Dark Knight\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the movie ID for \"The Dark Knight\" movie\n    movie_id = response.json()['results'][0]['id']\n    \n    # Define the API endpoint URL to get reviews for the movie\n    reviews_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n\n    # Make the request to get reviews of the movie\n    reviews_response = requests.get(reviews_url, headers=headers)\n\n    # Check if the reviews request was successful\n    if reviews_response.status_code == 200:\n        # Get the reviews from the response\n        reviews = reviews_response.json()['results']\n        print(reviews)  # Output the reviews\n    else:\n        print(\"Failed to get reviews\")\nelse:\n    print(\"Failed to get movie ID\")\n```",
        "executed": "[{'author': 'tricksy', 'author_details': {'name': '', 'username': 'tricksy', 'avatar_path': None, 'rating': None}, 'content': 'Excellent movie. Best of the trilogy. Lovely music. Nolan is a genius. So is Heath Ledger.', 'created_at': '2015-06-09T07:21:30.464Z', 'id': '557693fac3a368569a003fab', 'updated_at': '2021-06-23T15:57:35.053Z', 'url': 'https://www.themoviedb.org/review/557693fac3a368569a003fab'}, {'author': 'talisencrw', 'author_details': {'name': '', 'username': 'talisencrw', 'avatar_path': None, 'rating': 10.0}, 'content': \"This has no competition. It is the very finest comic-book character movie ever made. Knowing the Burton, Donner and Nolan filmic adaptations of Batman and Superman exist helps me to sleep at night. They are Exhibit A of 'How to Make a Comic-Book Movie'. Nothing else has ever come even remotely close. These seven films (I include 'Superman II' because it was mostly Donner's work)--and Nolan's trilogy especially--are what I imagine a great director like Kubrick, Hitchcock or Kurosawa would have come up with, if they had ever been asked to make a Superman or Batman movie. They are the easiest for an audience to identify with because in these the scripts most approximate human emotions and the typical conundrums of the human experience--in short, are the closest, in a good way, they come to the complexities of the human condition. Peerless.\", 'created_at': '2016-05-25T23:49:13.042Z', 'id': '574639f9c3a36806b00002c1', 'updated_at': '2021-06-23T15:57:47.911Z', 'url': 'https://www.themoviedb.org/review/574639f9c3a36806b00002c1'}, {'author': 'erickprieto', 'author_details': {'name': '', 'username': 'erickprieto', 'avatar_path': '/clCvYPqM4EgLo9msno2xSPSGNJ6.jpg', 'rating': None}, 'content': 'Perhaps the best Batman movie of all times. I think that this Batman trilogy presents the well-known superhero history in an unexpected way with the capable to maintain on the edge of the chair all time.\\r\\n**Heath Ledger** present an excellent impersonification of a psychopath.\\r\\nAll support roles are magnificent.\\r\\nAnd Bruce Wayne role played by Christian Bale, shows a human being behind of the mask.', 'created_at': '2018-11-06T09:42:05.673Z', 'id': '5be161edc3a3680a00009915', 'updated_at': '2021-06-23T15:58:14.241Z', 'url': 'https://www.themoviedb.org/review/5be161edc3a3680a00009915'}, {'author': 'moubledian', 'author_details': {'name': '', 'username': 'moubledian', 'avatar_path': None, 'rating': None}, 'content': 'I used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\\r\\n\\r\\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it\\'s definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\\r\\n\\r\\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\\r\\n\\r\\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson\\'s portrayal is true unpredictability. It\\'s obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn\\'t easy. How exactly does one take him down when he\\'s woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\\r\\n\\r\\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\\r\\n\\r\\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can\\'t represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we\\'ve seen just the prelude to the Dark Knight\\'s upcoming legendary battles with the worst of Gotham City\\'s dark underside.\\r\\n\\r\\n\"The Dark Knight\" gets a solid 10 of 10 stars.\\r\\n\\r\\nI used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\\r\\n\\r\\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it\\'s definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\\r\\n\\r\\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\\r\\n\\r\\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson\\'s portrayal is true unpredictability. It\\'s obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn\\'t easy. How exactly does one take him down when he\\'s woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\\r\\n\\r\\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\\r\\n\\r\\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can\\'t represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we\\'ve seen just the prelude to the Dark Knight\\'s upcoming legendary battles with the worst of Gotham City\\'s dark underside.\\r\\n\\r\\n\"The Dark Knight\" gets a solid 10 of 10 stars.\\r\\n\\r\\nI used to leave a theatre after seeing a highly anticipated movie, specifically a sequel, and be so revved up about what I saw that I would declare that movie to be the best of a series. After each of the prequel \"Star Wars\" films, I rated that one the best, as good as any of the originals...for a time, until my opinion balanced out and I had a more well-rounded take. For that reason, I steer away from that mindset, and did for \"Dark Knight\".\\r\\n\\r\\nThough my opinion is solidifying already after having seen a Warner Bros. screening last night, \"Dark Knight\" ably stands on its own with or without \"Batman Begins\". At a two and a half hour runtime, it\\'s definitely an epic of a movie, but one that never runs out of gas. A delightful addition to this experience was a healthy amount of IMAX footage, which significantly adds to the feel of being on a personal, and gruesome, tour of Gotham City.\\r\\n\\r\\nChristian Bale plays such a well rounded Batman and Bruce Wayne, qualities that none of those who have donned the cowl before him have pulled off. I still have to remember that Bale is British since he speaks with such a spot on American accent. Bale has a particular slurring lisp that serves him quite well, charmingly for Bruce Wayne and threateningly for Batman.\\r\\n\\r\\nCountering him is the late Heath Ledger, who plays such a scary and creepy Joker that I found it impossible to NOT have chills half the time I saw him on screen. What really separates this brand of Joker from Jack Nicholson\\'s portrayal is true unpredictability. It\\'s obvious that, to be a good guy and think like the Joker, it really takes a toll, and it sure isn\\'t easy. How exactly does one take him down when he\\'s woven his harebrained plot around multiple hostages, explosives, or disappearing parlor tricks?\\r\\n\\r\\nInitially, I was uneasy about how the character of Harvey Dent would be handled. In my mind, there was really only one faithful portrayal of him, and that could be found in the \"Batman\" animated series of the early 90s. As well as Tommy Lee Jones COULD have handled him in \"Batman Forever\", he certainly did not, though it still was a highlight of that movie. Aaron Eckhart ably assumes the mantle here, delivering a performance out of this world, easily on par with the Batman animated series.\\r\\n\\r\\nBe it known, this caped avenger stands for the good of Gotham City that the police force and its counterparts can\\'t represent, the good that has no jurisdiction, no procedures...and no rules, save for one. I can only hope that we\\'ve seen just the prelude to the Dark Knight\\'s upcoming legendary battles with the worst of Gotham City\\'s dark underside.\\r\\n\\r\\n\"The Dark Knight\" gets a solid 10 of 10 stars.', 'created_at': '2019-03-23T06:05:56.233Z', 'id': '5c95ccc40e0a2645f151d76d', 'updated_at': '2021-06-23T15:58:19.727Z', 'url': 'https://www.themoviedb.org/review/5c95ccc40e0a2645f151d76d'}, {'author': 'tmdb22590444', 'author_details': {'name': '', 'username': 'tmdb22590444', 'avatar_path': None, 'rating': 10.0}, 'content': 'One of the best movies of all time. Christopher Nolan has brought us the Batman trilogy that it made it feel it could happen today. Christian Bale returns as Batman, was able to perform as wonderfully as he did in Batman Begins. The one person that ultimately stole the show had to be the late Heath Ledger who played as the Joker. His performance as a psychotic clown terrorizing Gotham City was one of the best performance as a superhero villain. One of the best parts of the Joker was when he was telling his victims on how \u201che got his scars?\u201d. Another great part was when he kidnapped a police officer and he was recording it while scaring the man and also giving a warning to Batman. The supporting actor and actresses did a good job of delivering the story. I was disappointed that Katie Holmes did not return as Rachael Dawes but the actress how played as her Maggie Gyllenhaal did a really good job. One of the best parts of Christopher Nolan is that in every movie of his, the cinematography would look amazing and this movie is no exception.', 'created_at': '2019-05-03T05:43:10.850Z', 'id': '5ccbd4ee0e0a262fcd009b52', 'updated_at': '2021-06-23T15:58:21.563Z', 'url': 'https://www.themoviedb.org/review/5ccbd4ee0e0a262fcd009b52'}, {'author': 'tmdb79614358', 'author_details': {'name': '', 'username': 'tmdb79614358', 'avatar_path': None, 'rating': 10.0}, 'content': 'A Masterpiece!!! I Love how The Dark Knight shows to me the \"Dark & Gritty Tone\". Overall, Nolan give us the Game changing, best superhero film OF ALL TIME. For me it\\'s 10/10', 'created_at': '2020-11-30T14:22:09.262Z', 'id': '5fc50011420228003dc3d744', 'updated_at': '2021-06-23T15:58:48.204Z', 'url': 'https://www.themoviedb.org/review/5fc50011420228003dc3d744'}, {'author': 'EDSR', 'author_details': {'name': '', 'username': 'EDSR', 'avatar_path': None, 'rating': 3.0}, 'content': 'A sickening, borderline fascist film that is simultaneously dull and harmful. The editing represents that of an anti-pirate commercial and the politics are beyond reprehensible. The film ends with a monologue about how violent law-enforcement and brutality is what the country needs, but does not deserve. Nolan clearly did not intend for any subtext, yet that is not an excuse, if anything, that makes it worse. He includes these scenes to make the film more dark and edgy, yet there are people, from suppressed countries, who have to live through the hardships of violence from law-enforcers and dictatorship every day, and in his obliviousness, Nolan thinks that using this in a superhero film is a good excuse for self-importance. He is a war profiteer, and exploiter, and this is nothing short of disgusting.', 'created_at': '2021-09-13T10:03:55.272Z', 'id': '613f220ba6ddcb002c698ab8', 'updated_at': '2021-09-20T16:28:41.430Z', 'url': 'https://www.themoviedb.org/review/613f220ba6ddcb002c698ab8'}, {'author': 'AstroNoud', 'author_details': {'name': '', 'username': 'AstroNoud', 'avatar_path': '/6zLnrhVdSDzTjhwjKxE5xQdk2Wu.jpg', 'rating': 10.0}, 'content': 'Unforgettable crime film with good dialogue, thrilling action and chase scenes and once again a magnificent cast (most notably a terrifically terrifying Ledger) and superb score.\\r\\n\\r\\n10/10', 'created_at': '2022-02-26T21:06:50.918Z', 'id': '621a966ad7a70a00430d4c21', 'updated_at': '2022-02-26T21:06:50.918Z', 'url': 'https://www.themoviedb.org/review/621a966ad7a70a00430d4c21'}, {'author': 'CinemaSerf', 'author_details': {'name': 'CinemaSerf', 'username': 'Geronimo1967', 'avatar_path': '/1kks3YnVkpyQxzw36CObFPvhL5f.jpg', 'rating': 7.0}, 'content': 'Heath Ledger is outstanding in this follow up to the 2006 \"Batman Begins\" outing for the caped crusader. His portrayal of the malevolent \"Joker\\' is confident and highly entertaining, treading a fine line between supreme intellect and total insanity with considerable aplomb. He comes back to terrorise \"Gotham\" after \"Batman\" (Christian Bale), \"Gordon\" (Gary Oldman) - now Commissioner in charge of the police force, and newly installed District Attorney \"Dent\" (Aaron Eckhart) had made progress getting the criminals off the street. The \"Joker\", meantime, decides that the best strategy is to rob the mob - and pitching them all against each other, and with the help of the duplicitous \"Lau\" (Chin Han) manages to secure enough of their funds to initiate a campaign of lawlessness that is ruthless, manipulative and good fun to watch. Not only has the man in black his new, potent, nemesis to deal with - but he also begins to realise that his childhood sweetheart \"Rachel\" (this time Maggie Gyllenhaal) is drifting into the arms of the new DA. it is also pretty clear that they are both now proving to be an useful additional weapon in the armoury of his enemy who knows, increasingly, which buttons to press to cause maximum anxiety among those who would bring him down. It\\'s over 2\u00bd hours long, but really does fly by as the quickly paced action really does kick in right from the start. The story is dark and gritty but the pace isn\\'t ponderous and moody - Ledger exudes a sense of peril throughout the whole thing, but that has an edge to it - a sophistication that plays well against the flawed superhero who is increasingly having to identify and cope with his own demons. Sir Michael Caine pops up now and again as his shrewd butler \"Alfred\", always striving to keep his boss on the right side of sanity, and Morgan Freeman continues to feature (sparingly) and his quartermaster. On that latter front, there are loads of new gadgets that still have that element of plausibility to them (no super-powers!). On balance I think I still preferred the first film, but as sequels go - this takes, and will take, some beating. On a big screen in a packed cinema, it\\'s just a great experience.', 'created_at': '2022-07-14T06:48:17.528Z', 'id': '62cfbc31394a8704ae5c02a3', 'updated_at': '2022-07-14T06:48:17.528Z', 'url': 'https://www.themoviedb.org/review/62cfbc31394a8704ae5c02a3'}, {'author': 'The Movie Mob', 'author_details': {'name': 'The Movie Mob', 'username': 'mooney240', 'avatar_path': '/blEC280vq31MVaDcsWBXuGOsYnB.jpg', 'rating': 10.0}, 'content': \"**Overall : A cinematic marvel and once-in-a-decade masterpiece.**\\r\\n\\r\\nThis isn't simply a superhero movie or a Christopher Nolan film. The Dark Knight is a masterpiece. A perfect film. An epic scale with magnificent action pieces, oscar-winning performances, incredible writing, excellent pacing, dazzling special effects, and the list goes on and on, including the set design, costumes, and more. But, Christopher Nolan did more than make the greatest superhero movie of all time. He made one of the greatest movies of all time! All this is elevated further by Heath Ledger's once-in-a-lifetime portrayal of the Joker. Ledger was born for this role with a performance in league with Anthony Hopkins' Hannibal Lecter or Val Kilmer's Doc Holliday.\", 'created_at': '2022-08-19T23:15:37.597Z', 'id': '63001999097c49007f5fced9', 'updated_at': '2022-09-03T15:17:20.030Z', 'url': 'https://www.themoviedb.org/review/63001999097c49007f5fced9'}, {'author': 'drystyx', 'author_details': {'name': '', 'username': 'drystyx', 'avatar_path': '/hLLsAvAnVT0cFU7JuuaaItTWXv8.jpg', 'rating': 1.0}, 'content': 'Even worse than Tim Burton\\'s Batman, although obviously copying the neo Nazi ideology of \"kill all the brunettes you can in a movie\".\\r\\nThis is so predictable and so poorly written that it boggles the mind. Yet there is a fan base of what can only be described as neo Nazis. I guess those fans were poor cuckolds who got jilted by too many brunettes at a young age, and they couldn\\'t get over it.\\r\\nThat\\'s about the entire story here. Oh, the Joker kills anything he sees. Whoopee. And he\\'s invulnerable. And he\\'s a demigod who can only be beaten by another demigod.\\r\\nSo, we\\'ve got traditional mundane Greek heroes and villains here, just like most Hollywood movies.\\r\\nUnfortunately, the fans of these traditional Hollywood movies are the loudest people on Earth, and the biggest control freaks. It\\'s ridiculous to believe there are actually this big a percentage of fans for this kind of depressing Hollywood formula movie making, but if you look at Imdb\\'s top 250, you see such movies make up over half of the top 250. Are they voted up because control freaks vote more than non control freaks? Or are they voted up because control freaks use many fake user names? Probably both, which explains why over half of the top 250 are nothing more than Greek traditional idolizations of control freaks.\\r\\nOh, and Batman turns totally gay, which would be okay if he\\'d admit it, but he\\'s given the choice of saving a man from death or a hot woman from death, and he chooses to save the man. This isn\\'t any real Batman. It\\'s just another contrived story line for the Nolan Nazi merit badge. They are not even subtle. They bang you over the head with their worship of Adolf and Eva. \\r\\nGod help the world if this garbage still has a fan base fifty years from now. But it could happen. We may have drug addicts and meth heads around for even longer than that, praising the hate and feeding the hate. It would be nice if someone made a real Batman movie with a real story line involving some degree of motivation.', 'created_at': '2023-04-18T19:52:54.996Z', 'id': '643ef51668b7660524ee929b', 'updated_at': '2023-04-18T19:52:55.078Z', 'url': 'https://www.themoviedb.org/review/643ef51668b7660524ee929b'}, {'author': 'Andre Gonzales', 'author_details': {'name': 'Andre Gonzales', 'username': 'SoSmooth1982', 'avatar_path': '/ast1oGYDI7Li9daLuOV4UxGiXj.jpg', 'rating': 7.0}, 'content': 'I enjoyed watching the Dark Knight. They were at least able to keep the same batman from the the last one made too.', 'created_at': '2023-04-25T20:12:25.938Z', 'id': '64483429b76cbb0492a3bf0f', 'updated_at': '2023-04-25T20:12:26.017Z', 'url': 'https://www.themoviedb.org/review/64483429b76cbb0492a3bf0f'}, {'author': 'JN2012', 'author_details': {'name': '', 'username': 'JN2012', 'avatar_path': '/6EFUKllgSm0UzLibTMHF1piWHZd.jpg', 'rating': 8.0}, 'content': 'If I can hold my pee for a whole two and a half hours rewatching a film I\u2019ve already seen then I love it.', 'created_at': '2023-10-14T16:31:32.429Z', 'id': '652ac2641511aa013886872f', 'updated_at': '2023-10-19T02:26:50.433Z', 'url': 'https://www.themoviedb.org/review/652ac2641511aa013886872f'}]\n"
    },
    {
        "query": "What are some movies that are similar to one of the movies directed by Francis Ford Coppola?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/popular"
        ],
        "results": "```python\nimport requests\n\n# Http headers required to call the API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Step 1: Search for movies directed by Francis Ford Coppola\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\nparams_director = {\n    \"query\": \"Francis Ford Coppola\",\n    \"include_adult\": False\n}\nresponse_director = requests.get(url_search_person, headers=headers, params=params_director)\ndirector_results = response_director.json()[\"results\"]\n\n# Step 2: Get movie credits for the director\nif director_results:  # Check if director is found\n    director_id = director_results[0][\"id\"]\n    url_movie_credits = f\"https://api.themoviedb.org/3/person/{director_id}/movie_credits\"\n    response_movie_credits = requests.get(url_movie_credits, headers=headers)\n    movie_credits = response_movie_credits.json()\n\n    # Step 3: Get similar movies to one of the movies directed by Francis Ford Coppola\n    if movie_credits[\"cast\"]:  # Check if the director has casted in movies\n        movie_id = movie_credits[\"cast\"][0][\"id\"]  # Select the first movie in the cast\n        url_similar_movies = f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\n        params_similar_movies = {\n            \"page\": 1\n        }\n        response_similar_movies = requests.get(url_similar_movies, headers=headers, params=params_similar_movies)\n        similar_movies = response_similar_movies.json()[\"results\"]\n\n        # Output the list of similar movies\n        for movie in similar_movies:\n            print(movie[\"title\"])\n    else:\n        print(\"No movie credits found for the director.\")\nelse:\n    print(\"Director not found.\")\n```",
        "executed": "Fighting the Silence\nNe me quitte pas\nEmoticons\nUnder Snow\nBorn Naked (MLB)\nTell Them Who You Are\nReflections of 'The Dark Crystal'\nOh! Man\nHollywood Singing and Dancing: A Musical History\nSuperjews\nThe Making of 'One from the Heart'\nBehind the Moomins\nSmile\nEarth: The Power of the Planet\nThrough the Eyes of Forrest Gump\nThe Magical Life of Long Tack Sam\nDes Amandiers aux Amandiers\nThe Future of Food\nThe Agreement\nEleganssi\n"
    },
    {
        "query": "Who is the lead actor in the latest released movie?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ],
        "results": "```python\nimport requests\n\n# Http headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Function to get the latest movie details and cast\ndef get_latest_movie_details():\n    url = \"https://api.themoviedb.org/3/movie/latest\"\n    response = requests.get(url, headers=headers)\n    data = response.json()\n    return data\n\n# Get the latest movie information\nlatest_movie_data = get_latest_movie_details()\n\n# Extract the lead actor from the cast information\nlead_actor = latest_movie_data[\"cast\"][0][\"name\"]\n\nprint(\"The lead actor in the latest released movie is:\", lead_actor)\n```",
        "executed": null
    },
    {
        "query": "give me one image of the movie that is currently showing in theaters",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# API url to get a list of movies in theaters\nurl = \"https://api.themoviedb.org/3/movie/now_playing\"\n\n# Parameters for the API\nparams = {\n    \"page\": 1,\n}\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the image path for the first movie in the results\nif response.status_code == 200:\n    data = response.json()\n    if data['total_results'] > 0:\n        movie = data['results'][0]\n        poster_path = movie['poster_path']\n\n        # Print the image path\n        print(\"Image path for the first movie in theaters: \", poster_path)\n    else:\n        print(\"No movies currently playing in theaters.\")\nelse:\n    print(\"Failed to retrieve movie data.\")\n```",
        "executed": "Image path for the first movie in theaters:  /hu40Uxp9WtpL34jv3zyWLb5zEVY.jpg\n"
    },
    {
        "query": "What is the most popular movie right now and what is its keywords?",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/genre/tv/list"
        ],
        "results": "```python\nimport requests\n\n# HTTP header with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get the list of current popular movies\nurl = \"https://api.themoviedb.org/3/movie/popular\"\n# Parameters for the request\nparams = {\n    \"page\": 1,  # Default page 1\n    \"region\": \"US\"  # Example region code\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the most popular movie details\nif data.get(\"results\"):\n    popular_movie = data[\"results\"][0]\n    movie_id = popular_movie.get(\"id\")\n    \n    # API url to get keywords for the most popular movie\n    keywords_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n    response_keywords = requests.get(keywords_url, headers=headers)\n    data_keywords = response_keywords.json()\n    \n    # Display the movie title and keywords\n    movie_title = popular_movie.get(\"title\")\n    keywords = [keyword[\"name\"] for keyword in data_keywords.get(\"keywords\", [])]\n    print(f\"The most popular movie right now is '{movie_title}' with keywords: {', '.join(keywords)}\")\nelse:\n    print(\"No results found for popular movies.\")\n```",
        "executed": "The most popular movie right now is 'No Way Up' with keywords: ocean, bodyguard, rescue mission, childhood trauma, shark, airplane trip, sharks, air crash, survivor\n"
    },
    {
        "query": "What are the keywords of the most popular movie right now",
        "solution": [
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get list of the current popular movies\nparams = {'page': 1}  # Assuming we want the first page\nresponse = requests.get(\"https://api.themoviedb.org/3/movie/popular\", headers=headers, params=params)\ndata = response.json()\n\n# Get the most popular movie's id\nmovie_id = data['results'][0]['id']\n\n# Get the keywords for the most popular movie\nresponse_keywords = requests.get(f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\", headers=headers)\nkeywords_data = response_keywords.json()\n\n# Extracting keywords\nkeywords = [keyword['name'] for keyword in keywords_data['keywords']]\nprint(keywords)\n```",
        "executed": "['ocean', 'bodyguard', 'rescue mission', 'childhood trauma', 'shark', 'airplane trip', 'sharks', 'air crash', 'survivor']\n"
    },
    {
        "query": "Who has starred in a movie \"Titanic\"",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"Titanic\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nresult = response.json()\n\n# Get the movie_id for \"Titanic\"\nmovie_id = None\nif result['total_results'] > 0:\n    movie_id = result['results'][0]['id']\n\n# Get the cast and crew for the movie\nif movie_id:\n    credits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response = requests.get(credits_url, headers=headers)\n    credits_result = response.json()\n\n    # Extract the cast members\n    cast = credits_result['cast']\n    cast_names = [actor['name'] for actor in cast]\n    print(f\"The cast of Titanic includes: {', '.join(cast_names)}\")\nelse:\n    print(\"Movie Titanic not found.\")\n```",
        "executed": "The cast of Titanic includes: Leonardo DiCaprio, Kate Winslet, Billy Zane, Kathy Bates, Frances Fisher, Gloria Stuart, Victor Garber, Bill Paxton, Bernard Hill, David Warner, Jonathan Hyde, Lewis Abernathy, Suzy Amis, Nicholas Cascone, Danny Nucci, Jason Barry, Lew Palter, Eric Braeden, Ewan Stewart, Bernard Fox, Ioan Gruffudd, Jonny Phillips, Edward Fletcher, Scott G. Anderson, Martin East, Gregory Cooke, Alexandrea Owens, Seth Adkins, Michael Ensign, Anatoly M. Sagalevitch, Martin Hub, Mark Lindsay Chapman, Richard Graham, Paul Brightwell, Craig Kelly, Ron Donachie, Charlotte Chatton, Fannie Brett, Jenette Goldstein, Camilla Overbye Roos, Linda Kerns, Amy Gaipa, Martin Jarvis, Rosalind Ayres, Rochelle Rose, Jonathan Evans-Jones, Rocky Taylor, Liam Tuohy, Simon Crane, James Lancaster, Elsa Raven, Reece P. Thompson III, Laramie Landis, Mark Rafael Truitt, John Walcutt, Terry Forrestal, Derek Lea, Richard Ashton, Sean Nepita, Brendan Connolly, David Cronnelly, Garth Wilton, Richard Fox, Nick Meaney, Kevin Owers, Mark Capri, Marc Cass, Paul Herbert, Emmett James, Chris Byrne, Oliver Page, James Garrett, Erik Holland, Jari Kinnunen, Anders Falk, Barry Dennen, Vern Urich, Rebecca Klingler, Tricia O'Neil, Kathleen S. Dunn, Romeo Francis, Mandana Marino, Van Ling, Bj\u00f8rn Olsen, Dan Pettersson, Shay Duffin, Greg Ellis, Diana Morgan, Kris Andersson, Bobbie Bates, Aaron James Cash, Anne Fletcher, Edmond Alan Forsyth, Andie Hicks, Scott Hislop, Stan Mazin, Lisa Ratzin, Julene Renee, Brian Walsh, Alexandra Boyd, James Cameron, Mike Butters, Bruno Campolo, Kevin De La Noy, Tony Kenny, Sean Lawlor, Don Lynch, Johnny Martin, Ryan McClurkin, Meghan McLeod, Mike O'Neal, Phil Parlapiano, Steven Quale, R. Gern Trowbridge, Olivia Rosewood, John Slade, Brian McDermott, Bret Aaron Knower\n"
    },
    {
        "query": "What do the logo looks like for Paramount Pictures?",
        "solution": [
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get details of a company by ID\nurl = \"https://api.themoviedb.org/3/company/4/images\"\n\n# Define the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the response data in JSON format\n    data = response.json()\n    \n    # Extract the logo URLs for Paramount Pictures (company_id = 4)\n    paramount_images = [image for image in data['logos'] if image['id'] == 'paramount-pictures']\n    logo_urls = [image['file_path'] for image in paramount_images]\n\n    if logo_urls:\n        print(\"Logo URLs for Paramount Pictures:\")\n        for url in logo_urls:\n            print(url)\n    else:\n        print(\"No logo found for Paramount Pictures.\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "executed": "No logo found for Paramount Pictures.\n"
    },
    {
        "query": "tell me where the company \"universal pictures\" was founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching companies\nurl_search_company = \"https://api.themoviedb.org/3/search/company\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\nparams = {\n    \"query\": \"universal pictures\"\n}\nresponse = requests.get(url_search_company, headers=headers, params=params)\ndata = response.json()\n\n# Extract the company_id of Universal Pictures\ncompany_id_universal = None\nfor company in data['results']:\n    if company['name'].lower() == \"universal pictures\":\n        company_id_universal = company['id']\n        break\n\n# If Universal Pictures is found, get the details of the company\nif company_id_universal:\n    url_company_details = f\"https://api.themoviedb.org/3/company/{company_id_universal}\"\n    response_details = requests.get(url_company_details, headers=headers)\n    details = response_details.json()\n    \n    # Print the headquarters of Universal Pictures\n    print(f\"Universal Pictures was founded in: {details['headquarters']}\")\nelse:\n    print(\"Universal Pictures not found in the database.\")\n```",
        "executed": "Universal Pictures was founded in: Universal City, California\n"
    },
    {
        "query": "When is the movie \"Titanic\" released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie ",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Titanic\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Titanic\"\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the release date of the first result (assuming it is the movie \"Titanic\")\nif data_search_movie['results']:\n    movie_id = data_search_movie['results'][0]['id']\n    \n    url_release_dates = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n    response_release_dates = requests.get(url_release_dates, headers=headers)\n    data_release_dates = response_release_dates.json()\n\n    release_dates = data_release_dates['results']\n    \n    # Looking for the release date with type \"Theatrical\"\n    for result in release_dates:\n        for r in result['release_dates']:\n            if r['type'] == 3:\n                release_date = r['release_date']\n                print(f\"The movie 'Titanic' was released on: {release_date}\")\n                break\n        else:\n            continue\n        break\nelse:\n    print(\"Movie 'Titanic' not found.\")\n```",
        "executed": "The movie 'Titanic' was released on: 2012-04-06T00:00:00.000Z\n"
    },
    {
        "query": "Who has starred in the first movie of Star Wars collection?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# API url to search for collections\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Parameters for the API request\nparams = {\n    \"query\": \"Star Wars\",\n    \"page\": 1\n}\n\n# API headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Making the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the collection id of the first result\nif 'results' in data and len(data['results']) > 0:\n    collection_id = data['results'][0]['id']\n\n    # API url to get collection details by id\n    collection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n\n    # Making the API request to get collection details\n    collection_response = requests.get(collection_url, headers=headers)\n    collection_data = collection_response.json()\n\n    # Get the cast of the first movie in the collection\n    if 'parts' in collection_data and len(collection_data['parts']) > 0:\n        cast = collection_data['parts'][0]['cast']\n\n        # Extracting the names of the stars\n        stars = [actor['name'] for actor in cast]\n\n        print(stars)\n    else:\n        print(\"No cast information available for the first movie in the collection.\")\nelse:\n    print(\"No collection found for the query.\")\n```",
        "executed": null
    },
    {
        "query": "give me a movie cover of a movie from the collection Harry Potter",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collection\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\n    \"query\": \"Harry Potter\"\n}\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ndata_search_collection = response_search_collection.json()\n\n# Get the collection id of Harry Potter\n# Assuming the first collection in the search results is the Harry Potter collection\nif data_search_collection['results']:\n    harry_potter_collection_id = data_search_collection['results'][0]['id']\n\n    # Get details of the Harry Potter collection\n    url_collection_details = f\"https://api.themoviedb.org/3/collection/{harry_potter_collection_id}\"\n    response_collection_details = requests.get(url_collection_details, headers=headers)\n    data_collection_details = response_collection_details.json()\n\n    # Get the poster path of the first part (movie) in the Harry Potter collection\n    if data_collection_details['parts']:\n        harry_potter_movie_poster = data_collection_details['parts'][0]['poster_path']\n        print(f\"Poster path of the first movie in Harry Potter collection: {harry_potter_movie_poster}\")\n    else:\n        print(\"No movies found in the Harry Potter collection\")\nelse:\n    print(\"No collection found for Harry Potter\")\n```",
        "executed": "Poster path of the first movie in Harry Potter collection: /wuMc08IPKEatf9rnMNXvIDxqP4W.jpg\n"
    },
    {
        "query": "What are some keywords for a movie of the collection The Hunger Games?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# API url to search for collection\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\n\n# Parameters for searching for the collection\nparams_search_collection = {\n    \"query\": \"The Hunger Games\"\n}\n\n# Call the search collection API\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ncollection_id = response_search_collection.json()[\"results\"][0][\"id\"]\n\n# API url to get keywords for a movie in the collection\nurl_movie_keywords = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\n\n# Call the movie keywords API\nresponse_movie_keywords = requests.get(url_movie_keywords, headers=headers)\nkeywords = response_movie_keywords.json()[\"keywords\"]\n\nprint(keywords)\n```",
        "executed": null
    },
    {
        "query": "When are the release dates for the movies of the collection The Hobbit?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection with the name \"The Hobbit\"\ncollection_search_url = \"https://api.themoviedb.org/3/search/collection\"\ncollection_search_params = {\"query\": \"The Hobbit\"}\ncollection_search_response = requests.get(collection_search_url, headers=headers, params=collection_search_params)\n\nif collection_search_response.status_code == 200:\n    collection_search_results = collection_search_response.json()\n    \n    if collection_search_results[\"total_results\"] > 0:\n        collection_id = collection_search_results[\"results\"][0][\"id\"]\n        \n        # Get the collection details by id\n        collection_details_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n        collection_details_response = requests.get(collection_details_url, headers=headers)\n        \n        if collection_details_response.status_code == 200:\n            collection_details = collection_details_response.json()\n            \n            movie_release_dates = []\n            for movie in collection_details[\"parts\"]:\n                movie_id = movie[\"id\"]\n                \n                # Get the movie details by id\n                movie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n                movie_details_response = requests.get(movie_details_url, headers=headers)\n                \n                if movie_details_response.status_code == 200:\n                    movie_details = movie_details_response.json()\n                    movie_title = movie_details[\"title\"]\n                    release_date = movie_details[\"release_date\"]\n                    movie_release_dates.append({movie_title: release_date})\n                    \n            print(movie_release_dates)\n        else:\n            print(\"Failed to get collection details\")\n    else:\n        print(\"Collection 'The Hobbit' not found\")\nelse:\n    print(\"Failed to search for the collection 'The Hobbit'\")\n```",
        "executed": "[{'The Hobbit: An Unexpected Journey': '2012-12-12'}, {'The Hobbit: The Desolation of Smaug': '2013-12-11'}, {'The Hobbit: The Battle of the Five Armies': '2014-12-10'}]\n"
    },
    {
        "query": "List movies from The Fast and the Furious collection",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/company"
        ],
        "results": "```python\nimport requests\n\n# HTTP header with Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for collection id of The Fast and the Furious\nurl_search_collection = \"https://api.themoviedb.org/3/search/collection\"\nparams_search_collection = {\"query\": \"The Fast and the Furious\"}\nresponse_search_collection = requests.get(url_search_collection, headers=headers, params=params_search_collection)\ncollection_id = response_search_collection.json()[\"results\"][0][\"id\"]\n\n# Get movies of The Fast and the Furious collection by collection id\nurl_collection_details = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse_collection_details = requests.get(url_collection_details, headers=headers)\nmovies = response_collection_details.json()[\"parts\"]\n\n# Output movie titles\nfor movie in movies:\n    print(movie[\"title\"])\n```",
        "executed": "2 Fast 2 Furious\nThe Fast and the Furious: Tokyo Drift\nThe Fast and the Furious\nFast Five\nFast & Furious 6\nFurious 7\nFast & Furious\nThe Fate of the Furious\nFast X\nF9\nFast X: Part 2\n"
    },
    {
        "query": "Give me a review of a movie from the collection The Fast and the Furious.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/latest"
        ],
        "results": "```python\nimport requests\n\n# Set the API endpoint\nurl = \"https://api.themoviedb.org/3/search/collection\"\n\n# Set the headers containing the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Set the parameters for the search\nparams = {\n    \"query\": \"The Fast and the Furious\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract the collection ID from the search results\ncollection_id = data['results'][0]['id']\n\n# Use the collection ID to get the movie details\nreviews_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nreviews_response = requests.get(reviews_url, headers=headers)\nreviews_data = reviews_response.json()\n\n# Get the reviews for the movie\nreviews = reviews_data['parts']\n\n# Display the reviews\nfor review in reviews:\n    print(f\"Author: {review['author']}\")\n    print(f\"Content: {review['content']}\\n\")\n```",
        "executed": null
    },
    {
        "query": "When was the first movie of the collection Lord of the Rings released?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the collection ID of \"Lord of the Rings\"\nsearch_url = \"https://api.themoviedb.org/3/search/collection\"\nsearch_params = {\n    \"query\": \"Lord of the Rings\",\n}\nresponse = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = response.json()\n\n# Get the collection ID for \"Lord of the Rings\"\ncollection_id = search_results['results'][0]['id']\n\n# Get the details of the collection to find the first movie release date\ncollection_url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\nresponse = requests.get(collection_url, headers=headers)\ncollection_details = response.json()\n\n# Get the release date of the first movie in the collection\nfirst_movie_release_date = collection_details['parts'][0]['release_date']\n\n# Output the first movie release date of the collection \"Lord of the Rings\"\nprint(f\"The first movie of the collection Lord of the Rings was released on: {first_movie_release_date}\")\n```",
        "executed": "The first movie of the collection Lord of the Rings was released on: 2002-04-01\n"
    },
    {
        "query": "tell me the directors of the first season of House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set up the parameters for the query\nparams = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Extract the TV show ID for House of Cards\n    tv_id = response.json()[\"results\"][0][\"id\"]\n\n    # Define the API endpoint to get the credits for the first season of House of Cards\n    credits_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/1/credits\"\n\n    # Make the API request to get the credits for the first season of House of Cards\n    credits_response = requests.get(credits_url, headers=headers)\n\n    # Check if the request was successful\n    if credits_response.status_code == 200:\n        # Extract the crew information (directors) for the first season of House of Cards\n        crew = credits_response.json()[\"crew\"]\n        \n        # Filter out the directors from the crew information\n        directors = [member[\"name\"] for member in crew if member[\"job\"] == \"Director\"]\n\n        # Print the list of directors for the first season of House of Cards\n        print(\"Directors of the first season of House of Cards:\")\n        for director in directors:\n            print(director)\n    else:\n        print(\"Failed to retrieve credits for the first season of House of Cards.\")\nelse:\n    print(\"Failed to retrieve TV show ID for House of Cards.\")\n```",
        "executed": "Directors of the first season of House of Cards:\n"
    },
    {
        "query": "I want some tv shows that similar to House of Cards",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Set the API url\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsimilar_url = \"https://api.themoviedb.org/3/tv/{}/similar\"\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for TV show by query\nparams = {\n    \"query\": \"House of Cards\",\n    \"include_adult\": False\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nsearch_results = response.json()\n\n# Get the TV show id of House of Cards\nif \"results\" in search_results and len(search_results[\"results\"]) > 0:\n    house_of_cards_id = search_results[\"results\"][0][\"id\"]\n    \n    # Get a list of similar TV shows\n    response = requests.get(similar_url.format(house_of_cards_id), headers=headers)\n    similar_results = response.json()\n    \n    # Extract relevant information for similar TV shows\n    similar_tv_shows = []\n    if \"results\" in similar_results:\n        for show in similar_results[\"results\"]:\n            similar_show_info = {\n                \"name\": show[\"name\"],\n                \"overview\": show[\"overview\"],\n                \"poster_path\": show[\"poster_path\"],\n                \"vote_average\": show[\"vote_average\"]\n            }\n            similar_tv_shows.append(similar_show_info)\n    \n    print(similar_tv_shows)\nelse:\n    print(\"TV show 'House of Cards' not found.\")\n```",
        "executed": "[{'name': 'Haunted Hair', 'overview': 'When the hair of a famous female model, Kesinee, who died mysteriously was taken to make a wig by the hands of envious enemies, her best friend Mintra and Kawin seek out to find the truth. Their obstacles don\u2019t come as easy when the other party are powerful and others vengeful spirits.', 'poster_path': '/w7CchTHmRlK0q6zAWdETgg4xTSu.jpg', 'vote_average': 8.0}, {'name': 'Fuera de control', 'overview': 'Silvana returns to Chile with an intense desire to take revenge on the seven people who had to do with the overturn that her life gave after an insidious \"joke\" 12 years ago.', 'poster_path': '/tJ2JiKMTnfecAI8TmWZI5YwjpLA.jpg', 'vote_average': 2.0}, {'name': 'Queen of Ambition', 'overview': 'When you grow up in extreme poverty, the experience can instill a steely resolve to succeed at all costs. Joo Da Hae is determined to leave her life of poverty behind and will stop at nothing until she achieves the wealth and lifestyle she so desires. Ha Ryu, who loved Da Hae and would have done anything for her, is used and betrayed by her in her greedy quest. He later becomes a public prosecutor who must bring her down. But the heartless Da Hae, who rises to become First Lady, has plenty of others who will sacrifice themselves at her whim, including the smitten Baek Do Hoon. Can the ruthless Da Hae be stopped before she goes too far?', 'poster_path': '/o9H70FsxH4XoighY70YzWrXjq3o.jpg', 'vote_average': 6.2}, {'name': 'The Escape Artist', 'overview': 'A chilling and bloody legal thriller that explores the line between law and justice. Will Burton, a talented junior barrister of peerless intellect and winning charm, specialises in spiriting people out of tight legal corners. He is in high demand as he has never lost a case. But when his talents acquit the notorious prime suspect in an horrific murder trial, that brilliance comes back to bite him with unexpected and chilling results, not to mention a shocking twist.', 'poster_path': '/vIKU5IHQdavwz9KbMCKY8zJK8rU.jpg', 'vote_average': 7.0}, {'name': 'Fugitives', 'overview': 'Julian\u2019s life changes when he is accused of a crime he did not commit and is taken to prison. The only way out will be to open his heart and find the strength to escape and prove his innocence.', 'poster_path': '/tq2dApzh9DpIRjAEgQqz5JwLyhd.jpg', 'vote_average': 8.7}, {'name': 'Princess Agents', 'overview': 'During the Warring Period, the Western Wei enslaved large numbers of civilians. The slave girl, Chu Qiao, is thrown into a forest along with other slaves and becomes the next hunting target for the rich lords. She is saved by the Prince of Northern Wei, Yan Xun. Afterwards, she is brought into a powerful family of Yuwen and witnesses their bloody power struggle. Seeing this, she swears to take her younger sister and flee from the situation. However, she catches the attention of Yuwen Yue, and undergoes strict training while building a sense of companionship with Yan Xun. Unfortunately, Western Wei goes into battle and Yan Xun\u2019s family is slaughtered. After that incident, Yan Xun grows ambitious and cruel to avenge for the things and the people he lost. He doubts Chu Qiao and takes advantages of her loyalty and love many times, disregarding their relationship as well as the sacrifices he will have to make for power. Disappointed with the man she once loved, Chu Qiao eventually breaks off her relationship with Yan Xun and chooses to fight with Yuwen Yue, destroying Yan Xun\u2019s plans of vengeance. She eventually convinces Yuwen to free the country from slavery, becoming a successful military strategist/female general in the people\u2019s hearts.', 'poster_path': '/diUHWYpMmCmA0Ad8RLtwPJGaCkW.jpg', 'vote_average': 7.5}, {'name': 'Queen For Seven Days', 'overview': 'In the Joseon period, a noblewoman from a powerful clan marries the Crown Prince but is deposed after only seven days as queen when he becomes king.', 'poster_path': '/S4RzpajATNmKbI76IDDUJNJdsH.jpg', 'vote_average': 5.7}, {'name': 'Winning Time: The Rise of the Lakers Dynasty', 'overview': 'A fast-break series chronicling the professional and personal lives of the 1980s Los Angeles Lakers, one of sports\u2019 most revered and dominant dynasties \u2014 a team that defined an era, both on and off the court.', 'poster_path': '/6B9hTge98t52bQofyvs1M370k7n.jpg', 'vote_average': 7.758}, {'name': 'Stay-at-Home Maison', 'overview': 'A fashionable condominium found by a newlywed, but the living conditions are limited to \"house husband\"? Maison de Otto, a condominium limited to full-time husbands\\' families. Although it is a fashionable 2LDK in a prime location in Shibuya, Tokyo, the rent is only 50,000 yen a month, so to live in this super-favorable condominium, Riku became a \"house husband\" without even thinking about it. Kamiya Riku moves with his wife, and the story begins! A heart-full romantic comedy that provides dreams, longing, and healing.', 'poster_path': '/iAImEiAam3MAh4sprYLXGje5Ip6.jpg', 'vote_average': 0.0}, {'name': '5th Republic', 'overview': \"5th Republic is a controversial political drama about the Fifth Republic of South Korea, one of the most turbulent times in modern Korean history. The 41-episode television series covered the key aspects of the period from President Park Chung-hee's assassination to general Chun Doo-hwan's military coup and his bloody rise to power, as well as the ensuing conflicts between the pro-democratic movement and Chun's military regime and the behind-the-scenes power struggles that ultimately led to Roh Tae-woo's presidential succession in 1987.\\n\\nGiven the sensitive nature of the subject matter, 5th Republic tread a fine line between fact and fiction, and faced many challenges even before the start of the production - one of which was pressures from actual political figures who threatened to sue the network for defamation if the script was not modified. Moreover, there was concern over the possible glorification of the drama's lead character Chun Doo-hwan played by Lee Deok-hwa whose strong charisma helped draw in big audience during the drama's initial broadcast on MBC in 2005.\", 'poster_path': '/rkL9UzEOVV1aYsmHGjmTMNxkUxN.jpg', 'vote_average': 9.4}, {'name': 'Vanished', 'overview': 'Government agencies investigate the mysterious disappearance of a powerful presidential adviser.', 'poster_path': '/pdFfxlUHeCYBOKE3jPOq0TeHd08.jpg', 'vote_average': 7.5}, {'name': 'G.B.H.', 'overview': 'GBH was a seven-part British television drama written by Alan Bleasdale shown in the summer of 1991 on Channel 4. The protagonists were Michael Murray, the Militant tendency-supporting Labour leader of a city council in the North of England and Jim Nelson, the headmaster of a school for disturbed children.\\n\\nThe series was controversial partly because Murray appeared to be based on Derek Hatton, former Deputy Leader of Liverpool City Council \u2014 in an interview in the G.B.H. DVD Bleasdale recounts an accidental meeting with Hatton before the series, who indicates that he has caught wind of Bleasdale\\'s intentions but does not mind as long as the actor playing him is \"handsome\".\\n\\nIn normal parlance, the initials \"GBH\" refer to the criminal charge of grievous bodily harm - however, the actual intent of the letters is that it is supposed to stand for Great British Holiday.', 'poster_path': '/fBlFKneBgEGAH1yeV0x3Nxll1AZ.jpg', 'vote_average': 6.8}, {'name': '\u68a7\u6850\u96e8', 'overview': '', 'poster_path': '/7RepputHGBSPLQxqsGmtm47S9mN.jpg', 'vote_average': 0.0}, {'name': 'The Dance of the Storm', 'overview': 'Through a series of missions, a man discovers that the people he has been working for has unspeakable connections to dangerous organizations. Through the help of his love interest, they piece together clues to uncover the truth.\\n\\nAs a child, Li Jun Jie grew up under the loving care of his parents. He led a life that was the definition of a happy family. His parents were top scientists but when he turned twelve, they suddenly died in an accident in Pin Cheng. After becoming an orphan, Li Jun Jie is sent back to his hometown of Chong Hai. Rumors that his father betrayed his own country started spreading and his relatives refused to take him in. Left without a home, Li Jun Jie is sent to an orphanage where he meets Shi Yun Hao. They become the best of friends and through the recommendation of Chen Gang, they enter a security agency as new recruits. The two meet and fall for Zhou Zi Xuan.', 'poster_path': '/dWa4pZQ2Sh4BvLL1r8ZDHxNVYs6.jpg', 'vote_average': 5.0}, {'name': 'Unknown Woman', 'overview': 'Hong Ji Won grew up at an orphanage. To escape from her poor background, she studied hard and graduated from a prestigious university. She then worked as a secretary at a large company. Finally, Hong Ji Won married the owner of the company and gave birth to a son. Now, Hong Ji Won learns that her son has a disease. She decides that she will do anything for her son.\\n\\nSon YeoRi was raised by wealthy foster parents, but she is abandoned by foster parents and her boyfriend. To protect her child, Son Yeo Ri goes to prison.', 'poster_path': '/9bjPfb6qMFiv1GIxU1aDkiSjIeY.jpg', 'vote_average': 6.0}, {'name': 'Bring On The Night', 'overview': \"Following a recent setback, life becomes so-so and depressing for Kabir. But one night, he happens to discover his friend's 200-year old, obscure cottage in the city, and everything changes.\", 'poster_path': '/8Qdx4pPtXrGCOSnj0yMNohFKaFi.jpg', 'vote_average': 0.0}, {'name': 'The English', 'overview': 'An aristocratic Englishwoman, Lady Cornelia Locke, arrives into the new and wild landscape of the American West to wreak revenge on the man she sees as responsible for the death of her son.', 'poster_path': '/aAFAwxj0VzBRyX5biAHUJM73qYG.jpg', 'vote_average': 7.35}, {'name': '1993', 'overview': \"Rome, 30 April 1993. A crowd throws coins at Italian politician Bettino Craxi - as if the Civil War has begun. Be quick if you want a place in the new system. Now, it's every man for himself. 1993 is the last chance to set up the Second Republic. Everyone fights their own battles.\", 'poster_path': '/w1hMZOQn4VdNuR5H1fkETn7xqM7.jpg', 'vote_average': 7.184}, {'name': 'Luoyang', 'overview': 'Set in the ancient capital Luoyang during the era of 13 dynasties, it revolves around three people who come together to investigate a series of mysterious incidents involving the conspiracy to overthrow Empress Wu Ze Tian. Adapted from the novel Luoyang by Ma Bo Yong.', 'poster_path': '/gvDUgJM9Jjjufa5FPJEPyffKYRD.jpg', 'vote_average': 5.75}, {'name': 'Psychologist', 'overview': \"Due to negative feedback to a public service announcement on suicide prevention that she created, psychologist He Dun experiences a blow to her career. To cheer up, she meets her best friend at a restaurant where she runs into Qian Kai Yi. He is now hosting a radio program dealing with emotional issues. At his insistence, He Dun agrees to be his collaborator and co-host. As the show gains listenership He Dun's counseling clinic becomes equally busy.\", 'poster_path': '/5ctcpatyweEuwRgcuq8ofYpdp50.jpg', 'vote_average': 3.5}]\n"
    },
    {
        "query": "When did the most popular TV show currently on the air start?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get list of shows that are currently on the air\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Parsing the response to get the start date of the most popular show\nif response.status_code == 200:\n    data = response.json()\n    if 'results' in data and len(data['results']) > 0:\n        most_popular_show = max(data['results'], key=lambda x: x['popularity'])\n        start_date = most_popular_show['first_air_date']\n        print(\"The most popular TV show currently on the air started on: \", start_date)\n    else:\n        print(\"No results found.\")\nelse:\n    print(\"Failed to retrieve data. Status code:\", response.status_code)\n```",
        "executed": "The most popular TV show currently on the air started on:  2005-09-26\n"
    },
    {
        "query": "tell me a few more works directed by the director of Django Unchained",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching movies\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\n\n# Set the query parameters for searching movies by the director of Django Unchained\nparams_search_movie = {\n    \"query\": \"Quentin Tarantino\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\",\n    \"year\": 0,\n    \"primary_release_year\": 0\n}\n\n# Make a GET request to the API to search for movies by the director\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\n\n# Extract the director's movie id for credits information\nif response_search_movie.status_code == 200:\n    data_search_movie = response_search_movie.json()\n    if data_search_movie[\"total_results\"] > 0:\n        director_movie_id = data_search_movie[\"results\"][0][\"id\"]\n\n        # Define the API url for getting credits of a movie\n        url_movie_credits = f\"https://api.themoviedb.org/3/movie/{director_movie_id}/credits\"\n\n        # Make a GET request to the API to get credits of the director's movie\n        response_movie_credits = requests.get(url_movie_credits, headers=headers)\n\n        if response_movie_credits.status_code == 200:\n            data_movie_credits = response_movie_credits.json()\n\n            # Extract the director's movie crew information\n            director_crew = data_movie_credits[\"crew\"]\n\n            # Find other works directed by the director\n            other_works_directed = []\n            for crew_member in director_crew:\n                if crew_member[\"job\"] == \"Director\":\n                    other_works_directed.append(crew_member[\"original_title\"])\n\n            print(other_works_directed)\n\n        else:\n            print(\"Failed to retrieve movie credits.\")\n    else:\n        print(\"Director's movie not found.\")\nelse:\n    print(\"Failed to search for movies by the director.\")\n```",
        "executed": null
    },
    {
        "query": "tell me the cast of a TV show on the air",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\n# Define the API URL\nurl = \"https://api.themoviedb.org/3/tv/on_the_air\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    tv_shows = response.json()['results']\n    \n    # Pick the first TV show\n    if len(tv_shows) > 0:\n        tv_show_id = tv_shows[0]['id']\n        \n        # Get the credits for the selected TV show\n        credits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\n        credits_response = requests.get(credits_url, headers=headers)\n        \n        if credits_response.status_code == 200:\n            # Get the cast from the credits response\n            cast = credits_response.json()['cast']\n            \n            # Print the cast\n            print(\"Cast of the TV show on the air:\")\n            for actor in cast:\n                print(actor['name'])\n        else:\n            print(\"Error fetching credits data\")\n    else:\n        print(\"No TV shows currently on the air\")\nelse:\n    print(\"Error fetching TV shows data\")\n```",
        "executed": "Cast of the TV show on the air:\n"
    },
    {
        "query": "I need a review for Breaking Bad",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "results": "```python\nimport requests\n\n# Http headers for API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to search for a TV show\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameter for searching the TV show Breaking Bad\nparams = {\n    'query': 'Breaking Bad',\n    'page': 1,\n    'include_adult': False\n}\n\n# Making the GET request to search for the TV show\nresponse = requests.get(search_url, headers=headers, params=params)\n\n# Checking if the request was successful\nif response.status_code == 200:\n    # Extracting the TV show ID for Breaking Bad from the response\n    tv_show_result = response.json()['results'][0]\n    tv_show_id = tv_show_result['id']\n\n    # API url to get the reviews for the TV show Breaking Bad\n    reviews_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/reviews\"\n\n    # Making the GET request to get the reviews for Breaking Bad\n    response_reviews = requests.get(reviews_url, headers=headers)\n\n    # Checking if the request was successful\n    if response_reviews.status_code == 200:\n        reviews = response_reviews.json()['results']\n        print(\"Reviews for Breaking Bad:\")\n        for review in reviews:\n            print(f\"Author: {review['author']}\")\n            print(f\"Content: {review['content']}\")\n            print(\"--------------\")\n    else:\n        print(\"Failed to get reviews for Breaking Bad\")\nelse:\n    print(\"Failed to search for TV show\")\n```",
        "executed": "Reviews for Breaking Bad:\nAuthor: slyone10001\nContent: Wow....where to start. Not really into \"DRUG\" inspired shows. But this one had me from the start. The only bad about this show was the split seasons when it was a first run show. But now you can go right through to the next episode with out having to wait.....MUST WATCH ! !\n--------------\nAuthor: Dean\nContent: I'll be honest, at first when I started this TV show and finished first season, I didn't like it. It felt boring for me and I stopped watching, but after few years, I decided to give it a chance and continue. I'm so happy because of my decision, because after finishing this TV show, I can definitely tell that it was a masterpiece! 5th season is a bomb and 14th season was shocking! It left me with sad, euphoric shock feeling. It was mind blowing! I'm not gonna spoil you what happened, but if you started first season and you don't like it, for goodness sake, give it a chance and continue watching. I promise you won't regret.\r\n\r\nCharacters are very well developed. Acting is superb! Plot is very interesting. Whole TV show is tense, especially the last season. The only downside I can think about is camera. Sometimes it's shaking on some certain scenes. I don't know why they didn't pay attention to this, but this is nothing, just a very minor minus. Everything else is great about this TV show.\n--------------\nAuthor: l33t5p34k3r\nContent: Started out really good, but dropped quality after the second to last season\n--------------\nAuthor: drystyx\nContent: This is the kind of TV show for the \"formula lovers\" who want to feel superior.\r\nThere is an air of the superiority complex of the \"drug knowledgeable\" crowd in this series about a \"smart guy\" breaking into the drug trade.\r\nHis \"talent\" makes him the important cog in the machine. He can call his shots.\r\nStill, the ruffians give him a rough way to go, because criminals really are stupid.\r\nOnce they learn that they are nothing without him, he gets his way.\r\nMuch like a Western town blacksmith, he's the needed ingredient.\r\nHowever, things get very formula early on in the show. And there's always this sense of a superiority complex from the sort of people who push shows like this onto their friends and acquaintances. The directing writing team tap into the control freak crowd very well.\r\nBut it is a dull show about dull people.\n--------------\n"
    },
    {
        "query": "I'm watching the tv series The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for 'The Last Of Us'\nsearch_tv_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Last Of Us\",\n    \"include_adult\": False,\n    \"page\": 1\n}\nsearch_response = requests.get(search_tv_url, headers=headers, params=search_params)\ntv_show_id = search_response.json()[\"results\"][0][\"id\"]\n\n# Get recommendations for 'The Last Of Us'\nrecommendations_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/recommendations\"\nrecommendations_params = {\n    \"page\": 1\n}\nrecommendations_response = requests.get(recommendations_url, headers=headers, params=recommendations_params)\nrecommendations = recommendations_response.json()[\"results\"]\n\n# Display recommendations\nfor recommendation in recommendations:\n    print(recommendation[\"name\"])\n```",
        "executed": "The Mandalorian\nWednesday\nGame of Thrones\nChernobyl\nBreaking Bad\nStranger Things\nTulsa King\nHouse of the Dragon\nThe Walking Dead\nYou\nThe Boys\nRick and Morty\nSecret Invasion\nThe Night Agent\nBEEF\nThe Glory\nSeverance\nThe Lord of the Rings: The Rings of Power\nFrom\nVelma\nThe Queen's Gambit\n"
    },
    {
        "query": "I'm watching a TV show called The Last Of Us and I need some more recommendations",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the base URL for the TMDB API\nbase_url = \"https://api.themoviedb.org/3\"\n\n# Define the headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"The Last Of Us\"\nquery = \"The Last Of Us\"\nsearch_url = f\"{base_url}/search/tv\"\nparams = {\n    \"query\": query\n}\nresponse = requests.get(search_url, headers=headers, params=params)\nshow_id = response.json()[\"results\"][0][\"id\"]\n\n# Get recommendations for the TV show\nrecommendations_url = f\"{base_url}/tv/{show_id}/recommendations\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(recommendations_url, headers=headers, params=params)\nrecommended_shows = response.json()[\"results\"]\n\n# Print the list of recommended TV shows\nfor show in recommended_shows:\n    print(show[\"name\"])\n```",
        "executed": "The Mandalorian\nWednesday\nGame of Thrones\nChernobyl\nBreaking Bad\nStranger Things\nTulsa King\nHouse of the Dragon\nThe Walking Dead\nYou\nThe Boys\nRick and Morty\nSecret Invasion\nThe Night Agent\nBEEF\nThe Glory\nSeverance\nThe Lord of the Rings: The Rings of Power\nFrom\nVelma\nThe Queen's Gambit\n"
    },
    {
        "query": "tell me the guest star from season 3, episode 24 of Friends",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint for searching TV show \"Friends\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters for searching \"Friends\" TV show\nparams_search_tv = {\n    \"query\": \"Friends\",\n    \"include_adult\": False\n}\n\n# Make a GET request the search API to get the TV show id for \"Friends\"\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\nresult_search_tv = response_search_tv.json()\n\n# Get the TV show ID for \"Friends\" to use in the next API call\ntv_id_friends = result_search_tv[\"results\"][0][\"id\"]\n\n# Define the API endpoint for getting the credits of a specific episode of a TV show\nurl_get_credits = f\"https://api.themoviedb.org/3/tv/{tv_id_friends}/season/3/episode/24/credits\"\n\n# Make a GET request to get the credits of season 3, episode 24 of \"Friends\"\nresponse_get_credits = requests.get(url_get_credits, headers=headers)\nresult_get_credits = response_get_credits.json()\n\n# Get the guest stars for season 3, episode 24 of \"Friends\"\nguest_stars = result_get_credits[\"guest_stars\"]\nfor star in guest_stars:\n    print(star[\"name\"])  # Print the name of each guest star\n```",
        "executed": "Christine Taylor\nJames Hong\nJon Favreau\nSteve Park\nJoe O'Connor\nRobin Williams\nBilly Crystal\nBruce Buffer\nJohn McCarthy\nSam McMurray\n"
    },
    {
        "query": "Who is the lead actor in the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the headers with the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send request to the API\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Get the results from the response\nresults = data.get('results', [])\n\nif results:\n    # Get the first show from the list of popular TV shows\n    most_popular_show = results[0]\n    \n    # Get the details of the most popular show\n    show_id = most_popular_show['id']\n    \n    # Define the API endpoint to get credits for the TV show\n    credits_url = f\"https://api.themoviedb.org/3/tv/{show_id}/credits\"\n    \n    # Send request to the API to get the credits\n    credits_response = requests.get(credits_url, headers=headers)\n    credits_data = credits_response.json()\n    \n    # Get the cast and crew information\n    cast = credits_data.get('cast', [])\n    \n    if cast:\n        # Assuming the first person in the cast list is the lead actor\n        lead_actor = cast[0]['name']\n        print(f\"The lead actor in the most popular TV show is: {lead_actor}\")\n    else:\n        print(\"No cast information available.\")\nelse:\n    print(\"No popular TV shows found.\")\n```",
        "executed": "The lead actor in the most popular TV show is: Jimmy Fallon\n"
    },
    {
        "query": "give me a keyword of the top-1 rated TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# API information\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\ntop_rated_url = \"https://api.themoviedb.org/3/tv/top_rated\"\nparams = {\n    \"page\": 1\n}\n\n# Call the API to get the list of top rated TV shows\nresponse = requests.get(top_rated_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the ID of the top-1 rated TV show\ntop_show_id = data['results'][0]['id']\n\n# Call the API to get the keywords of the top-1 rated TV show\nkeywords_url = f\"https://api.themoviedb.org/3/tv/{top_show_id}/keywords\"\nresponse_keywords = requests.get(keywords_url, headers=headers)\nkeywords_data = response_keywords.json()\n\n# get the keyword of the top-1 rated TV show\ntop_show_keyword = keywords_data['results'][0]['name']\n\nprint(top_show_keyword)\n```",
        "executed": null
    },
    {
        "query": "give me a poster of 2 Broke Girls",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/search/movie"
        ],
        "results": "```python\nimport requests\n\n# API url to search for a TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for the query\nparams = {\n    \"query\": \"2 Broke Girls\",\n    \"include_adult\": False\n}\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Extract and print the poster path of 2 Broke Girls\nif 'results' in data and len(data['results']) > 0:\n    poster_path = data['results'][0]['poster_path']\n    print(\"Poster path of '2 Broke Girls':\", poster_path)\nelse:\n    print(\"Poster path not found for '2 Broke Girls'\")\n```",
        "executed": "Poster path of '2 Broke Girls': /qCa4ANpF1QOioqRUNHgk2B3KFMZ.jpg\n"
    },
    {
        "query": "How many episodes does 2 Broke Girls have in total?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/review/{review_id}"
        ],
        "results": "```python\nimport requests\n\n# API URL to search for a TV show\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters to search for the TV show \"2 Broke Girls\"\nparams = {\n    \"page\": 1,\n    \"query\": \"2 Broke Girls\",\n    \"include_adult\": False,\n    \"first_air_date_year\": \"\"\n}\n\n# Calling the API to search for the TV show \"2 Broke Girls\"\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params)\ntv_show_results = response_search_tv.json()\n\n# Check if there are any results and get the TV show ID\nif tv_show_results[\"total_results\"] > 0:\n    tv_id = tv_show_results[\"results\"][0][\"id\"]\n\n    # API URL to get the primary TV show details by id\n    url_tv_details = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\n\n    # Calling the API to get the primary TV show details\n    response_tv_details = requests.get(url_tv_details, headers=headers)\n    tv_details = response_tv_details.json()\n\n    total_episodes = tv_details[\"number_of_episodes\"]\n    \n    print(f\"The total number of episodes of 2 Broke Girls is: {total_episodes}\")\n\nelse:\n    print(\"TV show '2 Broke Girls' not found.\")\n```",
        "executed": "The total number of episodes of 2 Broke Girls is: 137\n"
    },
    {
        "query": "When was the company that produced The Big Bang Theory founded?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# First, search for the TV show \"The Big Bang Theory\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Big Bang Theory\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_data = search_response.json()\n\n# Get the TV show id for \"The Big Bang Theory\"\ntv_id = search_data['results'][0]['id']\n\n# Get the primary TV show details by id to retrieve production company\ntv_details_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\ntv_details_response = requests.get(tv_details_url, headers=headers)\ntv_details_data = tv_details_response.json()\n\n# Get the id of the production company for \"The Big Bang Theory\"\nproduction_company_id = tv_details_data['production_companies'][0]['id']\n\n# Get the details of the production company\ncompany_details_url = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\ncompany_details_response = requests.get(company_details_url, headers=headers)\ncompany_details_data = company_details_response.json()\n\n# Extract the foundation date of the company\nfoundation_date = company_details_data['description']\n\nprint(f\"The company that produced The Big Bang Theory was founded: {foundation_date}\")\n```",
        "executed": "The company that produced The Big Bang Theory was founded: \n"
    },
    {
        "query": "When was the TV show The Big Bang Theory created?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/latest"
        ],
        "results": "```python\nimport requests\n\n# API endpoint to search for TV shows\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Parameters for the search query\nparams = {\n    \"query\": \"The Big Bang Theory\",\n    \"include_adult\": False\n}\n\n# API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()[\"results\"]\n\n    # Check if there are any results\n    if results:\n        # Get the first result which should be The Big Bang Theory\n        big_bang_theory_id = results[0][\"id\"]\n\n        # API endpoint to get TV show details by id\n        tv_show_url = f\"https://api.themoviedb.org/3/tv/{big_bang_theory_id}\"\n\n        # API request to get details of The Big Bang Theory TV show\n        tv_show_response = requests.get(tv_show_url, headers=headers)\n\n        # Check if the request was successful\n        if tv_show_response.status_code == 200:\n            # Get the first air date of The Big Bang Theory\n            first_air_date = tv_show_response.json()[\"first_air_date\"]\n            print(\"The Big Bang Theory was created on:\", first_air_date)\n        else:\n            print(\"Error getting TV show details\")\n    else:\n        print(\"The Big Bang Theory TV show not found\")\nelse:\n    print(\"Error searching for TV show\")\n```",
        "executed": "The Big Bang Theory was created on: 2007-09-24\n"
    },
    {
        "query": "give me a keyword of the most popular TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# API url to get a list of popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Send GET request to get the list of popular TV shows\nresponse = requests.get(url_popular_tv, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    data = response.json()\n    \n    # Get the first TV show from the list\n    if len(data['results']) > 0:\n        tv_id = data['results'][0]['id']\n        \n        # API url to get the keywords of the most popular TV show\n        url_keywords = f\"https://api.themoviedb.org/3/tv/{tv_id}/keywords\"\n        \n        # Send GET request to get the keywords\n        response_keywords = requests.get(url_keywords, headers=headers)\n        \n        # Check if the request was successful\n        if response_keywords.status_code == 200:\n            keywords_data = response_keywords.json()\n            \n            # Get the first keyword from the list\n            if len(keywords_data['results']) > 0:\n                keyword = keywords_data['results'][0]['name']\n                print(f\"The keyword of the most popular TV show is: {keyword}\")\n            else:\n                print(\"No keywords found for the most popular TV show.\")\n        else:\n            print(\"Failed to get keywords for the most popular TV show.\")\n    else:\n        print(\"No popular TV shows found.\")\nelse:\n    print(\"Failed to get popular TV shows.\")\n```",
        "executed": null
    },
    {
        "query": "What did the third episode of the second season of Westworld talk about?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching TV shows\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\n\n# Define the parameters for searching Westworld TV show\nparams = {\n    \"query\": \"Westworld\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make a GET request to search for Westworld TV show\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params)\ndata_search_tv = response_search_tv.json()\n\n# Get the TV show id for Westworld\nwestworld_id = data_search_tv['results'][0]['id']\n\n# Define the API url for getting the details of the third episode of second season of Westworld\nurl_episode_details = f\"https://api.themoviedb.org/3/tv/{westworld_id}/season/2/episode/3\"\n\n# Make a GET request to get the details of the third episode of second season of Westworld\nresponse_episode_details = requests.get(url_episode_details, headers=headers)\ndata_episode_details = response_episode_details.json()\n\n# Extract and print the overview of the third episode of the second season of Westworld\nprint(data_episode_details['overview'])\n```",
        "executed": "There is beauty in who we are. Shouldn't we, too, try to survive? Truth is, we don't all deserve to make it. Dolores makes her next move as Charlotte scrambles to protect Delos' most prized asset. Bernard gets closer to the truth and Maeve continues the search for her daughter.\n"
    },
    {
        "query": "Tell me the air date of the second season of Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and parameters\nurl = \"https://api.themoviedb.org/3/search/tv\"\nparams = {\n    \"query\": \"Game of Thrones\",\n    \"include_adult\": False\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\n\n# Extract the TV show ID of Game of Thrones\nshow_id = response.json()[\"results\"][0][\"id\"]\n\n# Define the API url using the show_id to get the details of seasons\nurl = f\"https://api.themoviedb.org/3/tv/{show_id}/season/2\"\n\n# Make the API call to get the details of the second season of Game of Thrones\nresponse = requests.get(url, headers=headers)\n\n# Extract the air date of the second season of Game of Thrones\nair_date = response.json()[\"air_date\"]\n\nprint(f\"The air date of the second season of Game of Thrones is: {air_date}\")\n```",
        "executed": "The air date of the second season of Game of Thrones is: 2012-03-31\n"
    },
    {
        "query": " give me a poster of the third episode of Band of Brothers",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the headers with the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show Band of Brothers\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Band of Brothers\"\n}\nresponse_tv_search = requests.get(url_search_tv, headers=headers, params=params_search_tv)\ndata_tv_search = response_tv_search.json()\n\n# Get the ID of Band of Brothers TV show\ntv_show_id = data_tv_search['results'][0]['id']\n\n# Get the images of the third episode of Band of Brothers\nurl_episode_images = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/season/1/episode/3/images\"\nresponse_episode_images = requests.get(url_episode_images, headers=headers)\ndata_episode_images = response_episode_images.json()\n\n# Extract the poster path of the third episode\nposter_path = data_episode_images['stills'][0]['file_path']\n\nprint(poster_path)\n```",
        "executed": "/122cDgrjc5lFqUZ7cYi8vUVrcrn.jpg\n"
    },
    {
        "query": "What is the logo of the network that produced Game of Thrones?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get TV show details by id\nurl = \"https://api.themoviedb.org/3/tv/{}/credits\".format(82)  # 82 is the TV show id for Game of Thrones\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Parse the response to get the network details\ndata = response.json()\nnetworks = data.get(\"networks\", [])\n\n# Retrieve the logo of the network that produced Game of Thrones\nfor network in networks:\n    if network[\"name\"] == \"HBO\":  # Assuming HBO is the network that produced Game of Thrones\n        logo_path = network[\"logo_path\"]\n        print(\"Logo path of the network that produced Game of Thrones: \", logo_path)\n        break\n```",
        "executed": ""
    },
    {
        "query": "give me the homepage of the network that produced Game of Thrones",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and network_id of the show 'Game of Thrones'\nurl = \"https://api.themoviedb.org/3/tv/1399\"\nnetwork_id = 49  # HBO network id\n\n# Call the API to get the primary TV show details\nresponse = requests.get(f\"{url}?api_key=YOUR_API_KEY\", headers=headers)\ndata = response.json()\n\n# Get the production companies for the TV show\nproduction_companies = data.get(\"production_companies\")\n\n# Find the network with the provided network_id\nnetwork = None\nfor company in production_companies:\n    if company.get(\"id\") == network_id:\n        network = company\n        break\n\n# Check if the network is found and get the homepage\nif network:\n    network_id = network.get(\"id\")\n    network_response = requests.get(f\"https://api.themoviedb.org/3/network/{network_id}?api_key=YOUR_API_KEY\", headers=headers)\n    network_data = network_response.json()\n    network_homepage = network_data.get(\"homepage\")\n    print(network_homepage)\nelse:\n    print(\"Network not found for Game of Thrones\")\n```",
        "executed": "Network not found for Game of Thrones\n"
    },
    {
        "query": "give me a keyword of the most popular TV show currently",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url\nurl = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Define the parameters\nparams = {\n    \"page\": 1\n}\n\n# Add the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the results\ntv_shows = response.json()['results']\n\n# Get the first TV show\ntv_show_id = tv_shows[0]['id']\n\n# Call the TV show keywords API\nkeywords_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/keywords\"\nkeywords_response = requests.get(keywords_url, headers=headers)\n\n# Get the keyword of the most popular TV show currently\nkeyword = keywords_response.json()['results'][0]['name']\n\nprint(f\"Keyword of the most popular TV show currently: {keyword}\")\n```",
        "executed": "Keyword of the most popular TV show currently: new york city\n"
    },
    {
        "query": "Where is the headquarter of the company that produced currently the most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "results": "```python\nimport requests\n\n# Define the headers for the API request\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of the current popular TV shows\nurl = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\n    \"page\": 1\n}\nresponse = requests.get(url, headers=headers, params=params)\npopular_tv_shows = response.json()[\"results\"]\n\n# Get the company details for each popular TV show\ncompany_headquarters = {}\nfor tv_show in popular_tv_shows:\n    company_id = tv_show[\"production_companies\"][0][\"id\"]\n    company_url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    company_response = requests.get(company_url, headers=headers)\n    company_details = company_response.json()\n    company_headquarters[company_details[\"name\"]] = company_details[\"headquarters\"]\n\n# Find the company that produced the currently most popular TV show\nmost_popular_company = max(company_headquarters, key=company_headquarters.get)\nheadquarters_location = company_headquarters[most_popular_company]\n\nprint(f\"The headquarter of the company that produced currently the most popular TV show is located at: {headquarters_location}\")\n```",
        "executed": null
    },
    {
        "query": "What is the genre of The Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching a TV show\nurl = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set the parameters for the query\nparams = {\n    \"query\": \"The Mandalorian\",\n    \"include_adult\": False\n}\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the genre of The Mandalorian\nif data[\"total_results\"] > 0:\n    tv_show = data[\"results\"][0]\n    genre_ids = tv_show[\"genre_ids\"]\n    genre = \"\"\n    \n    # The genre ID can be cross-referenced with a genre list to get the actual genre name\n    genre_list = {\n        28: \"Action\",\n        12: \"Adventure\",\n        16: \"Animation\",\n        35: \"Comedy\",\n        80: \"Crime\",\n        99: \"Documentary\",\n        18: \"Drama\",\n        10751: \"Family\",\n        14: \"Fantasy\",\n        36: \"History\",\n        27: \"Horror\",\n        10402: \"Music\",\n        9648: \"Mystery\",\n        10749: \"Romance\",\n        878: \"Science Fiction\",\n        10770: \"TV Movie\",\n        53: \"Thriller\",\n        10752: \"War\",\n        37: \"Western\"\n    }\n    \n    for genre_id in genre_ids:\n        if genre_id in genre_list:\n            genre += genre_list[genre_id] + \", \"\n    \n    # Remove the trailing comma and space\n    genre = genre[:-2]\n    \n    print(\"The genre of The Mandalorian is:\", genre)\nelse:\n    print(\"The Mandalorian TV show is not found.\")\n```",
        "executed": "The genre of The Mandalorian is: Drama\n"
    },
    {
        "query": "When is the birthday of the lead actor of today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the most trending TV show\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending_tv = requests.get(url_trending_tv, headers=headers)\ntrending_tv_data = response_trending_tv.json()\n\nif 'results' in trending_tv_data and len(trending_tv_data['results']) > 0:\n    # Get the TV show id of the most trending TV show\n    tv_id = trending_tv_data['results'][0]['id']\n    \n    # Get the credits for the TV show\n    url_tv_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n    response_tv_credits = requests.get(url_tv_credits, headers=headers)\n    tv_credits_data = response_tv_credits.json()\n    \n    if 'cast' in tv_credits_data and len(tv_credits_data['cast']) > 0:\n        # Get the id of the lead actor\n        lead_actor_id = tv_credits_data['cast'][0]['id']\n        \n        # Get the details of the lead actor\n        url_actor_details = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n        response_actor_details = requests.get(url_actor_details, headers=headers)\n        actor_details_data = response_actor_details.json()\n        \n        if 'birthday' in actor_details_data:\n            birthday = actor_details_data['birthday']\n            print(f\"The birthday of the lead actor of today's most trending TV show is: {birthday}\")\n        else:\n            print(\"Birthday information not found for the lead actor.\")\n    else:\n        print(\"Cast information not found for the most trending TV show.\")\nelse:\n    print(\"Trending TV show information not found.\")\n\n```",
        "executed": "The birthday of the lead actor of today's most trending TV show is: 1984-12-16\n"
    },
    {
        "query": "What is the homepage of the network that produced today's most trending TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# Define the headers containing the Authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the trending TV shows \nurl_trending = \"https://api.themoviedb.org/3/trending/tv/day\"\nresponse_trending = requests.get(url_trending, headers=headers)\njson_trending = response_trending.json()\n\n# Get the network id of the most trending TV show\nnetwork_id = json_trending[\"results\"][0][\"networks\"][0][\"id\"]\n\n# Get the network details using the network id\nurl_network = f\"https://api.themoviedb.org/3/network/{network_id}\"\nresponse_network = requests.get(url_network, headers=headers)\njson_network = response_network.json()\n\n# Extract the homepage of the network\nnetwork_homepage = json_network[\"homepage\"]\n\nprint(network_homepage)\n```",
        "executed": null
    },
    {
        "query": "give me a review of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Given API endpoint\nurl_trending_tv = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Use the headers provided\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call\nresponse = requests.get(url_trending_tv, headers=headers)\n\n# Check if the response was successful\nif response.status_code == 200:\n    # Parse the JSON response to get the TV show id of the most trending show\n    trending_tv_id = response.json()[\"results\"][0][\"id\"]\n\n    # Use the trending TV show id to get the reviews for that TV show\n    url_tv_reviews = f\"https://api.themoviedb.org/3/tv/{trending_tv_id}/reviews\"\n    response_reviews = requests.get(url_tv_reviews, headers=headers)\n\n    if response_reviews.status_code == 200:\n        # Get the reviews of today's most trending TV show\n        reviews = response_reviews.json()[\"results\"]\n        for review in reviews:\n            print(\"Author:\", review[\"author\"])\n            print(\"Content:\", review[\"content\"])\n            print(\"URL:\", review[\"url\"])\n            print(\"\\n\")\n    else:\n        print(\"Error: Unable to get TV show reviews\")\nelse:\n    print(\"Error: Unable to get trending TV show\")\n```",
        "executed": ""
    },
    {
        "query": "I prefer a TV show that similar to today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "results": "```python\nimport requests\n\n# API url for getting the daily trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Headers with authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Sending GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Parse the response\nif response.status_code == 200:\n    trending_tv_shows = response.json()[\"results\"]\n    if trending_tv_shows:\n        # Get the most trending TV show by selecting the first one from the list\n        most_trending_tv_show = trending_tv_shows[0]\n        tv_id = most_trending_tv_show[\"id\"]\n        \n        # API url for getting the similar TV shows to the most trending TV show\n        similar_tv_url = f\"https://api.themoviedb.org/3/tv/{tv_id}/similar\"\n        \n        # Sending GET request to get the similar TV shows\n        similar_tv_response = requests.get(similar_tv_url, headers=headers)\n        \n        # Parse the response for similar TV shows\n        if similar_tv_response.status_code == 200:\n            similar_tv_shows = similar_tv_response.json()[\"results\"]\n            print(similar_tv_shows)\n        else:\n            print(\"Failed to fetch similar TV shows\")\n    else:\n        print(\"No trending TV show found\")\nelse:\n    print(\"Failed to fetch trending TV shows\")\n```",
        "executed": "[{'adult': False, 'backdrop_path': '/g64LG7nV1vpRPTmNxM1oTkf0pWq.jpg', 'genre_ids': [9648, 10765, 18], 'id': 46616, 'origin_country': ['FR'], 'original_language': 'fr', 'original_name': 'Les Revenants', 'overview': 'In the shadow of an enormous hydraulic dam, the lives of the residents of a small French town are changed to their core when hundreds of previously dead relatives all return home on the same day.', 'popularity': 29.531, 'poster_path': '/x6B2UTMMU06GNzRgbDfaObuWFT6.jpg', 'first_air_date': '2012-11-26', 'name': 'The Returned', 'vote_average': 7.439, 'vote_count': 239}, {'adult': False, 'backdrop_path': None, 'genre_ids': [16, 10751, 18, 10759, 10762], 'id': 46438, 'origin_country': ['JP'], 'original_language': 'ja', 'original_name': '\u3042\u3089\u3057\u306e\u3088\u308b\u306b \u301c\u3072\u307f\u3064\u306e\u3068\u3082\u3060\u3061\u301c', 'overview': '', 'popularity': 40.555, 'poster_path': '/wwulccmYXbFNEdCrlwBq8OnITMX.jpg', 'first_air_date': '2012-04-04', 'name': 'On a Stormy Night: Secret Friends', 'vote_average': 8.0, 'vote_count': 2}, {'adult': False, 'backdrop_path': '/8OapOjQUbA52qDdog8GGIIy8bdh.jpg', 'genre_ids': [10759, 18], 'id': 167, 'origin_country': ['US', 'CA'], 'original_language': 'en', 'original_name': 'La Femme Nikita', 'overview': 'La Femme Nikita was a Canadian action/drama television series based on the French film Nikita by Luc Besson. The series was co-produced by Jay Firestone of Fireworks Entertainment and Warner Bros.. It was adapted for television by Joel Surnow. The series was first telecast in North America on the USA Network cable channel on January 13, 1997, and ran for five television seasons\u2014until March 2001. The series was also aired in Canada on the over-the-air CTV Television Network. La Femme Nikita was the highest-rated drama on American basic cable during its first two seasons. It was also distributed in some other countries, and it continues to have a strong cult following.', 'popularity': 161.685, 'poster_path': '/pvm8hc0JzbDOcH85bPmlqmMJDvT.jpg', 'first_air_date': '1997-01-13', 'name': 'La Femme Nikita', 'vote_average': 7.451, 'vote_count': 226}, {'adult': False, 'backdrop_path': '/hGtx3dAB6x0ShXpDk4BBvt74Mtx.jpg', 'genre_ids': [18, 35, 10765], 'id': 99654, 'origin_country': ['KR'], 'original_language': 'ko', 'original_name': '18 \uc5b4\uac8c\uc778', 'overview': \"At a difficult place in his marriage and career, a middle-aged man gets a shot at a do-over when he's transformed back into his 18-year-old body.\", 'popularity': 97.606, 'poster_path': '/AwoC5PiNdi1RZTZTgOGGdHqCzrC.jpg', 'first_air_date': '2020-09-21', 'name': '18 Again', 'vote_average': 8.348, 'vote_count': 201}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18], 'id': 1337, 'origin_country': ['CA'], 'original_language': 'en', 'original_name': 'FX: The Series', 'overview': 'Rollie Tyler, a special effects expert, helps his detective friend solve crimes by making criminals see what they want to see. But what is real and what is illusion?', 'popularity': 66.314, 'poster_path': '/kLdsiEqnLEdVde4mq32i15xgEBi.jpg', 'first_air_date': '1996-09-09', 'name': 'FX: The Series', 'vote_average': 6.133, 'vote_count': 15}, {'adult': False, 'backdrop_path': '/hmFP1VIQ2IFCPMBUotgJxtF44CU.jpg', 'genre_ids': [35, 16, 10759], 'id': 231821, 'origin_country': ['CA'], 'original_language': 'en', 'original_name': 'Open Season: Call of Nature', 'overview': 'Follow best friends Boog, a lovable, risk-averse grizzly bear, and Elliot, a fast-talking, \"act-first, think-later\" deer. When the pair discover an abandoned summer camp in the middle of nowhere, they embark on a brave and hilarious adventure to create a new place to live where animals get to embrace their inner wild!', 'popularity': 31.408, 'poster_path': '/6hgNirgp2PGUxw0sbxirocnJKGY.jpg', 'first_air_date': '2023-11-03', 'name': 'Open Season: Call of Nature', 'vote_average': 5.5, 'vote_count': 2}, {'adult': False, 'backdrop_path': '/8t1Qdx4JSwPEY2LxffehwC1qfgV.jpg', 'genre_ids': [10765, 10759, 35, 80], 'id': 5191, 'origin_country': ['CA'], 'original_language': 'en', 'original_name': 'RoboCop: The Series', 'overview': 'RoboCop: The Series is a 1994 television series based on the film of the same name. It stars Richard Eden as the title character. Made to appeal primarily to children and young teenagers, it lacks the graphic violence that was the hallmark of RoboCop and RoboCop 2. RoboCop has several non-lethal alternatives to killing criminals, which ensures that certain villains can be recurring. The OCP Chairman and his corporation are treated as simply na\u00efve and ignorant, in contrast to their malicious and immoral behavior from the second film onward.', 'popularity': 33.113, 'poster_path': '/lKPeX5a04E1qrzAVeI43ocfinM.jpg', 'first_air_date': '1994-03-12', 'name': 'RoboCop: The Series', 'vote_average': 6.097, 'vote_count': 67}, {'adult': False, 'backdrop_path': '/oCEk2jiHkQaqCYakr5IdCEYiWSb.jpg', 'genre_ids': [35], 'id': 4719, 'origin_country': ['CA', 'US'], 'original_language': 'en', 'original_name': 'Police Academy: The Series', 'overview': \"Police Academy: The Series is a syndicated 1997 television series spin-off from the Police Academy series of films. Michael Winslow was the only actor from the Police Academy films to have a recurring role on the show, although several of the film's cast made occasional guest appearances. The series was written by Paul Maslansky and produced by James Margellos and Gary M. Goodman. Music by Ari Wise and Jim Guttridge\", 'popularity': 33.449, 'poster_path': '/9KAPETuGQmuOI17h5rYWeABAICv.jpg', 'first_air_date': '1997-09-22', 'name': 'Police Academy: The Series', 'vote_average': 5.6, 'vote_count': 22}, {'adult': False, 'backdrop_path': None, 'genre_ids': [18], 'id': 228528, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Cruel Intentions', 'overview': \"At an elite Washington, D.C., college, two ruthless step-siblings will do anything to stay on top of the cutthroat social hierarchy. After a brutal hazing incident threatens the entire Panhellenic system at their school, they'll do whatever is necessary to preserve their power and reputation, even if that means seducing the daughter of the vice president of the United States.\", 'popularity': 5.917, 'poster_path': None, 'first_air_date': '', 'name': 'Cruel Intentions', 'vote_average': 0.0, 'vote_count': 0}, {'adult': False, 'backdrop_path': '/mgvMMxKz4eDLeompM9oJRDufNdW.jpg', 'genre_ids': [10759, 16, 35, 9648], 'id': 2286, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'The Real Ghostbusters', 'overview': 'The continuing adventures of paranormal investigators Dr. Peter Venkman, Dr. Egon Spengler, Dr. Ray Stantz, Winston Zeddemore, their secretary Janine Melnitz and their mascot ghost Slimer.', 'popularity': 125.84, 'poster_path': '/j1xlBYeyOQcH51xQc4gEFJK6o13.jpg', 'first_air_date': '1986-09-13', 'name': 'The Real Ghostbusters', 'vote_average': 7.498, 'vote_count': 226}, {'adult': False, 'backdrop_path': '/1LyPGN2D5MtMeCPzmfq5QC5zaXv.jpg', 'genre_ids': [35], 'id': 202213, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'History of the World: Part II', 'overview': 'Explore different periods of human history through a variety of sketches.', 'popularity': 31.569, 'poster_path': '/6PlHUsScubMx3VADGRh1kIylML2.jpg', 'first_air_date': '2023-03-06', 'name': 'History of the World: Part II', 'vote_average': 5.361, 'vote_count': 54}, {'adult': False, 'backdrop_path': '/cElydeQSNZmX8NRFPEB0FTTYigo.jpg', 'genre_ids': [18], 'id': 74169, 'origin_country': ['IT'], 'original_language': 'it', 'original_name': 'Anna Karenina', 'overview': 'Anna and Kitty. Two lives. One of desperate passion that ends in tragedy, the other, an existence made real through love. Two destinies that interweave, giving rise to two, so very different stories, yet lived in pursuit of the same desire- to find a love that lets them fully be themselves, to live without having to conform to society\u2019s pretenses.', 'popularity': 19.062, 'poster_path': '/b6seDdJl7B1bRcy32qgAqZAMNNY.jpg', 'first_air_date': '2013-12-02', 'name': 'Anna Karenina', 'vote_average': 7.286, 'vote_count': 14}, {'adult': False, 'backdrop_path': '/lwcRxaeAYNox5dyoUYqEDS9NZYK.jpg', 'genre_ids': [35], 'id': 127620, 'origin_country': ['ES'], 'original_language': 'es', 'original_name': 'Se\u00f1or, dame paciencia', 'overview': '', 'popularity': 10.211, 'poster_path': '/9oIcKDhNXpi6wVdLhQQApdp9YLz.jpg', 'first_air_date': '2022-01-02', 'name': 'Lord, Give Me Patience', 'vote_average': 4.25, 'vote_count': 4}, {'adult': False, 'backdrop_path': '/yYPFzdQdRzeidwl3llxFFOKyNwe.jpg', 'genre_ids': [18, 80], 'id': 127585, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'American Gigolo', 'overview': 'Julian Kaye has always been an object of desire, so much so that people are willing to destroy him in order to have him. Exonerated, after 15 years in prison for a murder he didn\u2019t commit, he now faces the challenge of picking up the pieces as the detective who put him behind bars tries to unravel the mystery that led to his wrongful incarceration.', 'popularity': 37.733, 'poster_path': '/m0nRFOLYUju4XHG7v2jZZf3n6vs.jpg', 'first_air_date': '2022-09-11', 'name': 'American Gigolo', 'vote_average': 7.054, 'vote_count': 56}, {'adult': False, 'backdrop_path': '/iS0zzzkRHmE1nsDLJWfaYlQbXF5.jpg', 'genre_ids': [18], 'id': 4278, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Friday Night Lights', 'overview': 'The trials and triumphs of life in the small town of Dillon, Texas, where high school football is everything.', 'popularity': 120.301, 'poster_path': '/Eu7MzZY1DldJ683z7vLkILHNRD.jpg', 'first_air_date': '2006-10-03', 'name': 'Friday Night Lights', 'vote_average': 8.0, 'vote_count': 250}, {'adult': False, 'backdrop_path': '/4yvQlzOaOWleR2kFW4zs1pllMYU.jpg', 'genre_ids': [35], 'id': 1462, 'origin_country': ['GB'], 'original_language': 'en', 'original_name': 'Let Them Eat Cake', 'overview': 'Let Them Eat Cake is a British sitcom starring Dawn French and Jennifer Saunders set in France, 1782, just seven years before the French Revolution. It is one of the few programmes in which French and Saunders have appeared which they did not create themselves.', 'popularity': 7.906, 'poster_path': '/x3qKj73qC65xMGBpwRsXlK2VLDZ.jpg', 'first_air_date': '1999-09-09', 'name': 'Let Them Eat Cake', 'vote_average': 6.8, 'vote_count': 5}, {'adult': False, 'backdrop_path': '/iXrseWaiQSmGQjePTj8pmd4pMCp.jpg', 'genre_ids': [18, 10765], 'id': 1475, 'origin_country': ['US', 'CA'], 'original_language': 'en', 'original_name': 'The Dead Zone', 'overview': 'Johnny Smith discovers he has developed psychic abilities after a coma.', 'popularity': 89.1, 'poster_path': '/j9l4svOscUWoVqGoATtGEDfTms.jpg', 'first_air_date': '2002-06-16', 'name': 'The Dead Zone', 'vote_average': 7.2, 'vote_count': 131}, {'adult': False, 'backdrop_path': '/4EDRjZAxcqwVv4Qj4ZoNbA1S8U1.jpg', 'genre_ids': [35, 16, 10762], 'id': 2831, 'origin_country': ['CA', 'US'], 'original_language': 'en', 'original_name': 'Ace Ventura: Pet Detective', 'overview': 'Ace Ventura: Pet Detective is an animated television series based on the film of the same name. The series was produced by Morgan Creek Productions and Nelvana for Warner Bros. Studios. It aired for two seasons from 1995 to 1997 on CBS. A third season and reruns of previous episodes aired on Nickelodeon from 1999 to 2000.', 'popularity': 65.226, 'poster_path': '/hMaEc8qqRgBP1DLbx89r70nvNUW.jpg', 'first_air_date': '1995-12-09', 'name': 'Ace Ventura: Pet Detective', 'vote_average': 4.543, 'vote_count': 23}, {'adult': False, 'backdrop_path': '/qciatHh45qIWn6cn8MU7l4Ogo5r.jpg', 'genre_ids': [10759, 9648, 18, 10765], 'id': 2925, 'origin_country': ['AU', 'CA', 'US'], 'original_language': 'en', 'original_name': 'BeastMaster', 'overview': 'BeastMaster is a Canadian television series that aired from 1999 to 2002. It was loosely based on a 1982 MGM film The Beastmaster. The series aired for three complete seasons. It is produced by Coote/Hayes Productions.\\n\\nThe series was nominated for the Open Craft Award in the category of cinematography by the Australian Film Institute in 2000, and for the Saturn Award for Best Syndicated/Cable Television Series by the Academy of Science Fiction, Fantasy, and Horror Films, USA, in 2001. BeastMaster is currently running in syndication on Sci-Fi Channel in the USA, but not in any prime-time slots.', 'popularity': 65.157, 'poster_path': '/kp0BYJwFfPlkSejAoIGc2GR77bD.jpg', 'first_air_date': '1999-10-09', 'name': 'BeastMaster', 'vote_average': 6.2, 'vote_count': 45}, {'adult': False, 'backdrop_path': '/jPyKuRjloYkjVWNPtXCrYxtg3Bu.jpg', 'genre_ids': [10759, 16, 35, 10765, 10762], 'id': 2745, 'origin_country': ['US'], 'original_language': 'en', 'original_name': 'Aladdin', 'overview': 'Aladdin is an animated television series made by Walt Disney Television which aired from 1994 to 1995, based on the original 1992 feature. It was animated at the Slightly Offbeat Productions Studios in Penrose, Auckland, New Zealand. Coming on the heels of the direct-to-video sequel The Return of Jafar, the series picked up where that installment left off, with Aladdin now living in the palace, engaged to beautiful and spunky Princess Jasmine. \"Al\" and Jasmine went together into peril among sorcerers, monsters, thieves, and more. Monkey sidekick Abu, the animated Magic Carpet, and the fast-talking, shape-shifting Genie came along to help, as did sassy, complaining parrot Iago, formerly Jafar\u2019s pet but now an antihero. Jafar, having previously been destroyed in the second movie, returns in only one episode which also serves as a crossover with Hercules: The Animated Series.', 'popularity': 113.404, 'poster_path': '/nlaiczW81kY46GBdfIcTrBIqr8I.jpg', 'first_air_date': '1994-02-06', 'name': 'Aladdin', 'vote_average': 6.9, 'vote_count': 315}]\n"
    },
    {
        "query": "I need a poster of today's most trending TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/popular"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for getting today's trending TV shows\nurl = \"https://api.themoviedb.org/3/trending/tv/day\"\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the GET request to the API\nresponse = requests.get(url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the poster path of the most trending TV show\n    trending_tv_show = response.json()[\"results\"][0]\n    poster_path = trending_tv_show[\"poster_path\"]\n    \n    # Print the URL of the poster image\n    print(f\"The poster of today's most trending TV show: https://image.tmdb.org/t/p/original{poster_path}\")\nelse:\n    print(\"Error in fetching data\")\n```",
        "executed": "The poster of today's most trending TV show: https://image.tmdb.org/t/p/original/e5hw7bThIs8u6WBHjYHhwTIRsL2.jpg\n"
    },
    {
        "query": "Who has worked with Jeremy Clarkson in his most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Jeremy Clarkson first\nurl = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Jeremy Clarkson\",\n    \"include_adult\": False\n}\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person ID of Jeremy Clarkson\nperson_id = data['results'][0]['id']\n\n# Get the TV show credits for Jeremy Clarkson\nurl = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Find the most popular TV show of Jeremy Clarkson\nmost_popular_show = None\nmax_popularity = 0\nfor show in data['cast']:\n    if show['popularity'] > max_popularity:\n        max_popularity = show['popularity']\n        most_popular_show = show\n\n# Get the TV show credits for the most popular show\ntv_id = most_popular_show['id']\nurl = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\nresponse = requests.get(url, headers=headers)\ndata = response.json()\n\n# Find the people who worked with Jeremy Clarkson in his most popular TV show\ncollaborators = []\nfor person in data['cast']:\n    if person['name'] != \"Jeremy Clarkson\":\n        collaborators.append(person['name'])\n\nprint(collaborators)\n```",
        "executed": "['Graham Norton']\n"
    },
    {
        "query": "What does the lead actor of the first episode of second season of Black Mirror look like?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/on_the_air"
        ],
        "results": "```python\nimport requests\n\n# Headers for authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of TV shows named 'Black Mirror'\nquery_params = {\n    \"query\": \"Black Mirror\",\n    \"page\": 1,\n    \"include_adult\": False\n}\nresponse = requests.get(\"https://api.themoviedb.org/3/search/tv\", headers=headers, params=query_params)\nresults = response.json()\n\n# Get the lead actor details of the first episode of the second season of 'Black Mirror'\nif results[\"total_results\"] > 0:\n    tv_id = results[\"results\"][0][\"id\"]  # Get the TV show id\n    response = requests.get(f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/episode/1\", headers=headers)\n    episode_details = response.json()\n    \n    if \"crew\" in episode_details:\n        lead_actor = None\n        for person in episode_details[\"crew\"]:\n            if person[\"job\"] == \"Director\":\n                lead_actor = person\n                break\n        \n        if lead_actor:\n            print(\"Lead Actor of the first episode of the second season of Black Mirror:\")\n            print(lead_actor)\n        else:\n            print(\"Lead actor not found for the first episode of the second season of Black Mirror\")\n    else:\n        print(\"No crew details found for the first episode of the second season of Black Mirror\")\nelse:\n    print(\"TV show 'Black Mirror' not found\")\n```",
        "executed": "Lead Actor of the first episode of the second season of Black Mirror:\n{'job': 'Director', 'department': 'Directing', 'credit_id': '5cf78e3b92514153b7b8cdb3', 'adult': False, 'gender': 2, 'id': 220702, 'known_for_department': 'Directing', 'name': 'Owen Harris', 'original_name': 'Owen Harris', 'popularity': 7.019, 'profile_path': '/cRmmAqvKQfnroB0KuzA0wCaypkg.jpg'}\n"
    },
    {
        "query": "When is the lead actor of The Mandalorian born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show \"The Mandalorian\"\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"The Mandalorian\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Extract the TV show ID of \"The Mandalorian\"\ntv_show_id = search_results[\"results\"][0][\"id\"]\n\n# Get the credits for the TV show \"The Mandalorian\"\ncredits_url = f\"https://api.themoviedb.org/3/tv/{tv_show_id}/credits\"\ncredits_response = requests.get(credits_url, headers=headers)\ncredits = credits_response.json()\n\n# Get the lead actor ID of \"The Mandalorian\"\nlead_actor_id = credits[\"cast\"][0][\"id\"]\n\n# Get the details of the lead actor\nperson_url = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\nperson_response = requests.get(person_url, headers=headers)\nperson_details = person_response.json()\n\n# Extract the birthdate of the lead actor of \"The Mandalorian\"\nlead_actor_birthday = person_details[\"birthday\"]\n\nprint(f\"The lead actor of The Mandalorian is born on: {lead_actor_birthday}\")\n```",
        "executed": null
    },
    {
        "query": "Who is the lead actor of today's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations"
        ],
        "results": "```python\nimport requests\n\n# Define the headers containing the authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Get the list of the current popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\nparams = {\"page\": 1}  # Get the first page of popular TV shows\nresponse_popular_tv = requests.get(url_popular_tv, headers=headers, params=params)\ndata_popular_tv = response_popular_tv.json()\n\n# Get the ID of the most popular TV show\nif data_popular_tv[\"results\"]:  # Check if there are any results\n    most_popular_tv_id = data_popular_tv[\"results\"][0][\"id\"]  # Get the ID of the first TV show\nelse:\n    print(\"No popular TV shows found.\")\n    most_popular_tv_id = None\n\nlead_actor_name = None\n\nif most_popular_tv_id:\n    # Get the credits for the most popular TV show\n    url_credits = f\"https://api.themoviedb.org/3/tv/{most_popular_tv_id}/credits\"\n    response_credits = requests.get(url_credits, headers=headers)\n    data_credits = response_credits.json()\n\n    # Check if there are any cast members\n    if data_credits[\"cast\"]:\n        # Get the name of the lead actor (first cast member)\n        lead_actor_name = data_credits[\"cast\"][0][\"name\"]\n    else:\n        print(\"No cast members found.\")\n\nprint(\"The lead actor of today's most popular TV show is:\", lead_actor_name)\n```",
        "executed": "The lead actor of today's most popular TV show is: Jimmy Fallon\n"
    },
    {
        "query": "give me a photo of the lead actor of the most popular TV show of this week",
        "solution": [
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the list of current popular TV shows\nurl_popular_tv = \"https://api.themoviedb.org/3/tv/popular\"\n\n# Set the required parameters for the API\nparams = {\n    'page': 1  # We only want to get the data for the first page\n}\n\n# Define the HTTP headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make a GET request to the API to get the list of popular TV shows\nresponse = requests.get(url_popular_tv, headers=headers, params=params)\ndata = response.json()\n\n# Get the TV show ID of the most popular TV show\ntv_id = data['results'][0]['id']\n\n# Define the API url to get the credits of the TV show (cast and crew)\nurl_credits = f\"https://api.themoviedb.org/3/tv/{tv_id}/credits\"\n\n# Make a GET request to the API to get the credits of the TV show\nresponse_credits = requests.get(url_credits, headers=headers)\ndata_credits = response_credits.json()\n\n# Get the profile path of the lead actor of the TV show\nlead_actor_profile_path = data_credits['cast'][0]['profile_path']\n\nprint(lead_actor_profile_path)\n```",
        "executed": "/fHrPNc8fCbnd1vALo0S38E2E51N.jpg\n"
    },
    {
        "query": "give me some reviews of Cate Blanchett's latest TV show",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/collection"
        ],
        "results": "```python\nimport requests\n\n# Provided API url\nurl_person_search = \"https://api.themoviedb.org/3/search/person\"\nurl_person_tv_credits = \"https://api.themoviedb.org/3/person/{}/tv_credits\"\nurl_tv_reviews = \"https://api.themoviedb.org/3/tv/{}/reviews\"\n\n# HTTP header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for Cate Blanchett\nparams_person_search = {\n    \"query\": \"Cate Blanchett\",\n    \"include_adult\": False\n}\nresponse_person_search = requests.get(url_person_search, headers=headers, params=params_person_search)\nperson_id = response_person_search.json()[\"results\"][0][\"id\"]\n\n# Get TV credits for Cate Blanchett\nresponse_person_tv_credits = requests.get(url_person_tv_credits.format(person_id), headers=headers)\ntv_credits = response_person_tv_credits.json()[\"cast\"]\n\n# Find the latest TV show\nlatest_tv_show_id = None\nfor credit in tv_credits:\n    if credit[\"media_type\"] == \"tv\":\n        latest_tv_show_id = credit[\"id\"]\n        break\n\nif latest_tv_show_id is not None:\n    # Get reviews for the latest TV show\n    params_tv_reviews = {\n        \"page\": 1\n    }\n    response_tv_reviews = requests.get(url_tv_reviews.format(latest_tv_show_id), headers=headers, params=params_tv_reviews)\n    reviews = response_tv_reviews.json()[\"results\"]\n\n    print(reviews)\nelse:\n    print(\"No TV shows found for Cate Blanchett.\")\n```",
        "executed": null
    },
    {
        "query": "What is David Schwimmer's most popular TV show?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for David Schwimmer\nsearch_person_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"David Schwimmer\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\nresponse = requests.get(search_person_url, headers=headers, params=params)\ndata = response.json()\n\n# Get the person_id for David Schwimmer\nperson_id = data['results'][0]['id']\n\n# Get David Schwimmer's TV show credits\ntv_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\nresponse = requests.get(tv_credits_url, headers=headers)\ndata = response.json()\n\n# Find the most popular TV show\nmost_popular_tv_show = max(data['cast'], key=lambda x: x['vote_average'])\n\nmost_popular_tv_show_title = most_popular_tv_show['original_name']\nprint(\"David Schwimmer's most popular TV show is:\", most_popular_tv_show_title)\n```  ",
        "executed": "David Schwimmer's most popular TV show is: The Single Guy\n"
    },
    {
        "query": "Who directed the third episode of the second season of Black Mirror?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get the credits for a TV episode\nurl = \"https://api.themoviedb.org/3/tv/42009/season/2/episode/3/credits\"  # Assuming TV show id for Black Mirror is 42009\n\n# Set the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API call to get the credits for the third episode of the second season of Black Mirror\nresponse = requests.get(url, headers=headers)\n\n# Parse the API response and extract the director of the episode\nif response.status_code == 200:\n    data = response.json()\n    crew = data.get(\"crew\", [])\n    \n    for person in crew:\n        if person.get(\"job\") == \"Director\":\n            director_name = person.get(\"name\")\n            print(f\"The director of the third episode of the second season of Black Mirror is: {director_name}\")\n            break\nelse:\n    print(\"Failed to retrieve the information.\")\n```",
        "executed": "The director of the third episode of the second season of Black Mirror is: Bryn Higgins\n"
    },
    {
        "query": "give me some movies that Christopher Nolan known for",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/network/{network_id}"
        ],
        "results": "```python\nimport requests\n\n# API url to search for people\nurl_search_person = \"https://api.themoviedb.org/3/search/person\"\n# API url to get details of a movie\nurl_movie_details = \"https://api.themoviedb.org/3/movie/{}\"\n# API url to get similar movies\nurl_similar_movies = \"https://api.themoviedb.org/3/movie/{}/similar\"\n\n# Parameters to search for Christopher Nolan\nparams_search_person = {\n    \"query\": \"Christopher Nolan\",\n    \"include_adult\": False\n}\n\n# Get list of people matching the search query\nresponse_search_person = requests.get(url_search_person, headers=headers, params=params_search_person)\nsearch_results = response_search_person.json()\n# Check if results are found\nif search_results[\"total_results\"] > 0:\n    # Get the ID of the first person (assuming it's Christopher Nolan)\n    person_id = search_results[\"results\"][0][\"id\"]\n\n    # Get the known_for list of the person\n    known_for = search_results[\"results\"][0][\"known_for\"]\n    for movie in known_for:\n        movie_id = movie[\"id\"]\n        # Get details of the movie\n        response_movie_details = requests.get(url_movie_details.format(movie_id), headers=headers)\n        movie_details = response_movie_details.json()\n        print(f\"Movie Title: {movie_details['title']}\")\n\n        # Get similar movies\n        response_similar_movies = requests.get(url_similar_movies.format(movie_id), headers=headers)\n        similar_movies = response_similar_movies.json()\n        print(\"Similar Movies:\")\n        for similar_movie in similar_movies[\"results\"]:\n            print(similar_movie[\"title\"])\n        print(\"\\n\")\n\nelse:\n    print(\"No results found for Christopher Nolan.\")\n```",
        "executed": "Movie Title: Inception\nSimilar Movies:\nExcess Baggage\nThe Liquidator\nThe Nude Bomb\nCome Drink with Me\nSpymate\nThe Brother from Another Planet\nThe Invisible Man vs. The Human Fly\nXtro\nCardcaptor Sakura: The Movie\nRetro Puppet Master\nPuppet Master vs Demonic Toys\nThe Sorcerer's Apprentice\nConflict of Interest\nDark of the Sun\nThis Time it Must Be Caviar\nThe Call Up\nHollow Scream\nRobin-B-Hood\nThe Adventures of Petey and Friends\nBob le Flambeur\n\n\nMovie Title: Interstellar\nSimilar Movies:\nThe Invisible Boy\nEverybody's Fine\nSome Girls Do\nRed Planet Mars\nProject Moon Base\nGlory Alley\nTarzan the Ape Man\n4D Man\nQuatermass and the Pit\nThe Man They Could Not Hang\nMystery Science Theater 3000: Shorts, Volume 3\nFive Little Peppers in Trouble\nI Came From The Future\nAce in the Hole\nDestination Moon\nDamnation Alley\nAnna Christie\nDaemonium: Soldier of the Underworld\nKafedra\nThe Wild Country\n\n\nMovie Title: The Dark Knight\nSimilar Movies:\nMr. Majestyk\nThe Stone Killer\nDe Dana Dan\nDeath Wish 4: The Crackdown\nThe Incredible Hulk Returns\nThe Trial of the Incredible Hulk\nMasterminds\nThe Last Seduction\nThe Mob\nChildren of the Corn III: Urban Harvest\nSo You Like the Neighborhood\nWalking Tall\n72 Hours\nMarked Woman\nPoint Blank\nMean Guns\nThe Enforcer\nHouse of Games\nNo Mercy\nClicK\n\n\n"
    },
    {
        "query": "Avatar versus Avatar: The Way of Water, which has a higher rating",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/popular",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews"
        ],
        "results": "```python\nimport requests\n\n# Define the authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the first Avatar movie\nurl_avatar = \"https://api.themoviedb.org/3/search/movie\"\nparams_avatar = {\n    \"query\": \"Avatar\",\n    \"page\": 1\n}\nresponse_avatar = requests.get(url_avatar, headers=headers, params=params_avatar)\ndata_avatar = response_avatar.json()\navatar_rating = data_avatar['results'][0]['vote_average']\n\n# Search for the Avatar: The Way of Water movie\nurl_avatar_water = \"https://api.themoviedb.org/3/search/movie\"\nparams_avatar_water = {\n    \"query\": \"Avatar: The Way of Water\",\n    \"page\": 1\n}\nresponse_avatar_water = requests.get(url_avatar_water, headers=headers, params=params_avatar_water)\ndata_avatar_water = response_avatar_water.json()\navatar_water_rating = data_avatar_water['results'][0]['vote_average']\n\n# Compare the ratings\nif avatar_rating > avatar_water_rating:\n    print(\"Avatar has a higher rating than Avatar: The Way of Water\")\nelif avatar_rating < avatar_water_rating:\n    print(\"Avatar: The Way of Water has a higher rating than Avatar\")\nelse:\n    print(\"Avatar and Avatar: The Way of Water have the same rating\")\n```",
        "executed": "Avatar: The Way of Water has a higher rating than Avatar\n"
    },
    {
        "query": "Show me some English movies rating no less than 7.0 and no earlier than 2021",
        "solution": [
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/movie/popular"
        ],
        "results": "```python\nimport requests\n\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\nurl = \"https://api.themoviedb.org/3/discover/movie\"\n\nparams = {\n    \"sort_by\": \"vote_average.desc\",\n    \"primary_release_date.gte\": \"2021-01-01\",\n    \"vote_average.gte\": 7.0,\n    \"with_original_language\": \"en\",\n    \"page\": 1\n}\n\nresponse = requests.get(url, headers=headers, params=params)\n\nif response.status_code == 200:\n    data = response.json()\n    movies = data.get(\"results\", [])\n    \n    for movie in movies:\n        print(movie.get(\"title\"))\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "executed": "Chocolate - Director's Cut\nTwelve Days\nJester and Chester's \"All Things Kitchen\"\nBee's Knee's\nAfter Rock\nFrom Sound Check To Stage: Emergency Break\nVictor\nCampaign Day\nSnowman Bully\nEggenheimer\nFrame by Frame\nKing Serio\nMORT THEORY: The Crimes of Mort\nHome! Home!\nIMMORTAL HEART\nThe Metamorphosis Project\nGRUFF\nPurgatorium\noneirophrenia\nOut Past Dark\n"
    },
    {
        "query": "What is the genre of the movie Lord of the Ring?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/company/{company_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint\nurl = \"https://api.themoviedb.org/3/search/movie\"\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Define the query parameter\nparams = {\n    \"query\": \"Lord of the Rings\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Get the results\n    results = response.json()[\"results\"]\n    \n    # Get the genre_ids of the first movie\n    if results:\n        genre_ids = results[0][\"genre_ids\"]\n        \n        # Print the genre_ids\n        print(\"Genre ids of the movie Lord of the Rings:\", genre_ids)\n    else:\n        print(\"Movie not found.\")\nelse:\n    print(\"Error occurred with status code:\", response.status_code)\n```",
        "executed": "Genre ids of the movie Lord of the Rings: [12, 14, 28]\n"
    },
    {
        "query": "What is the birthday of the most popular person right now?",
        "solution": [
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/tv/on_the_air",
            "GET https://api.themoviedb.org/3/search/company",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar"
        ],
        "results": "```python\nimport requests\n\n# Headers for API authorization\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Call the API to get the list of popular people\npopular_people_url = \"https://api.themoviedb.org/3/person/popular\"\nparams = {\"page\": 1}  # Specify the page as 1\npopular_people_response = requests.get(popular_people_url, headers=headers, params=params).json()\n\n# Get the person with the highest popularity\nmost_popular_person = popular_people_response['results'][0]\nperson_id = most_popular_person['id']\n\n# Call the API to get the details of the most popular person\nperson_details_url = f\"https://api.themoviedb.org/3/person/{person_id}\"\nperson_details_response = requests.get(person_details_url, headers=headers).json()\n\n# Extract the birthday of the most popular person\nbirthday = person_details_response['birthday']\n\nprint(\"The birthday of the most popular person right now is:\", birthday)\n```",
        "executed": "The birthday of the most popular person right now is: 1967-07-26\n"
    },
    {
        "query": "give me a poster of the second season of Big Bang Theory",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/airing_today",
            "GET https://api.themoviedb.org/3/search/person"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers needed to access the TMDB API\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the TV show \"Big Bang Theory\"\nurl_search_tv = \"https://api.themoviedb.org/3/search/tv\"\nparams_search_tv = {\n    \"query\": \"Big Bang Theory\",\n    \"include_adult\": False\n}\nresponse_search_tv = requests.get(url_search_tv, headers=headers, params=params_search_tv)\nresult_search_tv = response_search_tv.json()\n\nif 'results' in result_search_tv and len(result_search_tv['results']) > 0:\n    tv_id = result_search_tv['results'][0]['id']\n    \n    # Get the details of the second season of the TV show\n    url_season_images = f\"https://api.themoviedb.org/3/tv/{tv_id}/season/2/images\"\n    response_season_images = requests.get(url_season_images, headers=headers)\n    result_season_images = response_season_images.json()\n    \n    if 'posters' in result_season_images and len(result_season_images['posters']) > 0:\n        poster_url = f\"https://image.tmdb.org/t/p/original{result_season_images['posters'][0]['file_path']}\"\n        print(poster_url)\n    else:\n        print(\"No poster found for the second season of Big Bang Theory\")\nelse:\n    print(\"TV show Big Bang Theory not found\")\n```",
        "executed": "https://image.tmdb.org/t/p/original/2NBwUBZ4clwj6qO9fBinfxiB0dR.jpg\n"
    },
    {
        "query": "What is the name of the third episod of the second season of Mandalorian?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/review/{review_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}"
        ],
        "results": "```python\nimport requests\n\n# API information\nurl = \"https://api.themoviedb.org/3/tv/82856/season/2/episode/3\"\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers)\n\n# Get the name of the third episod of the second season of Mandalorian\nif response.status_code == 200:\n    data = response.json()\n    third_episode_name = data[\"name\"]\n    print(\"The name of the third episode of the second season of Mandalorian is:\", third_episode_name)\nelse:\n    print(\"Failed to retrieve data\")\n```",
        "executed": "The name of the third episode of the second season of Mandalorian is: Chapter 11: The Heiress\n"
    },
    {
        "query": "When is the bitrhday of the lead actor of the movie The Shawshank Redemptionn?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/network/{network_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie The Shawshank Redemption\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"The Shawshank Redemption\",\n    \"include_adult\": False\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the lead actor's birthday\nif data_search_movie[\"total_results\"] > 0:\n    movie_id = data_search_movie[\"results\"][0][\"id\"]\n    url_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response_credits = requests.get(url_credits, headers=headers)\n    data_credits = response_credits.json()\n\n    # Find the lead actor's id\n    lead_actor_id = None\n    for cast_member in data_credits[\"cast\"]:\n        if cast_member[\"order\"] == 1:\n            lead_actor_id = cast_member[\"id\"]\n            break\n\n    if lead_actor_id:\n        url_person = f\"https://api.themoviedb.org/3/person/{lead_actor_id}\"\n        response_person = requests.get(url_person, headers=headers)\n        data_person = response_person.json()\n\n        # Output the lead actor's birthday\n        if \"birthday\" in data_person:\n            print(f\"The lead actor's birthday is: {data_person['birthday']}\")\n        else:\n            print(\"Birthday information not available.\")\n    else:\n        print(\"Lead actor information not found.\")\nelse:\n    print(\"Movie not found.\")\n```",
        "executed": "The lead actor's birthday is: 1937-06-01\n"
    },
    {
        "query": "When is the birthday of the director of the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"The Shawshank Redemption\"\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\nparams = {\n    \"query\": \"The Shawshank Redemption\"\n}\nresponse = requests.get(movie_search_url, headers=headers, params=params)\nmovie_id = response.json()[\"results\"][0][\"id\"]\n\n# Get the credits for the movie\ncredits_url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\nresponse = requests.get(credits_url, headers=headers)\ndirector_id = None\nfor crew_member in response.json()[\"crew\"]:\n    if crew_member[\"job\"] == \"Director\":\n        director_id = crew_member[\"id\"]\n        break\n\n# Get the details of the director\nif director_id:\n    person_url = f\"https://api.themoviedb.org/3/person/{director_id}\"\n    response = requests.get(person_url, headers=headers)\n    director_birthday = response.json()[\"birthday\"]\n    print(\"The birthday of the director of The Shawshank Redemption is:\", director_birthday)\nelse:\n    print(\"Director not found for the movie The Shawshank Redemption.\")\n```",
        "executed": "The birthday of the director of The Shawshank Redemption is: 1959-01-28\n"
    },
    {
        "query": "Where is the headquarter of the company that created the movie The Shawshank Redemption?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/person/{person_id}/images"
        ],
        "results": "```python\nimport requests\n\n# Define the API url for searching the movie\nsearch_url = \"https://api.themoviedb.org/3/search/movie\"\n\n# Specify the query parameter for searching \"The Shawshank Redemption\"\nparams = {\n    \"query\": \"The Shawshank Redemption\",\n    \"page\": 1,\n    \"include_adult\": False\n}\n\n# Make the API request to search for the movie\nresponse = requests.get(search_url, headers=headers, params=params)\nsearch_results = response.json()\n\n# Get the movie_id of \"The Shawshank Redemption\" from the search results\nmovie_id = search_results['results'][0]['id']\n\n# Define the API url for getting the movie details\nmovie_details_url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n\n# Make the API request to get the details of \"The Shawshank Redemption\"\nresponse = requests.get(movie_details_url, headers=headers)\nmovie_details = response.json()\n\n# Get the production company id of the movie\nproduction_company_id = movie_details['production_companies'][0]['id']\n\n# Define the API url for getting the company details\ncompany_details_url = f\"https://api.themoviedb.org/3/company/{production_company_id}\"\n\n# Make the API request to get the details of the company\nresponse = requests.get(company_details_url, headers=headers)\ncompany_details = response.json()\n\n# Get the headquarter of the company that created \"The Shawshank Redemption\"\nheadquarter = company_details['headquarters']\n\nprint(\"The headquarter of the company that created the movie 'The Shawshank Redemption' is:\", headquarter)\n```",
        "executed": "The headquarter of the company that created the movie 'The Shawshank Redemption' is: New York City, New York, USA\n"
    },
    {
        "query": "Where is the headquarter of the company that created the collection Star Wars?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/collection/{collection_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/movie/upcoming",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API url to get collection details by id\napi_url = \"https://api.themoviedb.org/3/collection/10\"\n\n# Set the authorization token in headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Send a GET request to the API\nresponse = requests.get(api_url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n    \n    # Get the headquarters of the company that created the collection\n    company_headquarters = data.get(\"parent_company\", {}).get(\"headquarters\", \"Not available\")\n    \n    print(\"The headquarter of the company that created the Star Wars collection is:\", company_headquarters)\nelse:\n    print(\"Error:\", response.status_code)\n```",
        "executed": "The headquarter of the company that created the Star Wars collection is: Not available\n"
    },
    {
        "query": "Who has an earlier release date, The Double Life of Veronique or Mulholland Drive?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/company/{company_id}"
        ],
        "results": "```python\nimport requests\n\n# HTTP headers with authorization token\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for 'The Double Life of Veronique'\nsearch_url_veronique = \"https://api.themoviedb.org/3/search/movie\"\nparams_veronique = {\n    \"query\": \"The Double Life of Veronique\",\n    \"include_adult\": False\n}\nresponse_veronique = requests.get(search_url_veronique, headers=headers, params=params_veronique)\nveronique_data = response_veronique.json()\nveronique_release_date = veronique_data['results'][0]['release_date']\n\n# Search for 'Mulholland Drive'\nsearch_url_drive = \"https://api.themoviedb.org/3/search/movie\"\nparams_drive = {\n    \"query\": \"Mulholland Drive\",\n    \"include_adult\": False\n}\nresponse_drive = requests.get(search_url_drive, headers=headers, params=params_drive)\ndrive_data = response_drive.json()\ndrive_release_date = drive_data['results'][0]['release_date']\n\n# Compare release dates\nif veronique_release_date < drive_release_date:\n    print(\"The Double Life of Veronique has an earlier release date.\")\nelse:\n    print(\"Mulholland Drive has an earlier release date.\")\n```",
        "executed": "The Double Life of Veronique has an earlier release date.\n"
    },
    {
        "query": "Is the director of Twin Peaks Season 1 and Mulholland Drive the same person?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/recommendations",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list"
        ],
        "results": "```python\nimport requests\n\n# Define the base url and API key\nbase_url = \"https://api.themoviedb.org/3\"\napi_key = \"0dbab590c7eaca07ebe625974a37ad92\"\n\n# Define the headers with the API key\nheaders = {\n    \"Authorization\": \"Bearer \" + api_key\n}\n\n# Search for the TV show \"Twin Peaks\"\nsearch_tv_url = f\"{base_url}/search/tv\"\nparams = {\n    \"query\": \"Twin Peaks\"\n}\nresponse = requests.get(search_tv_url, headers=headers, params=params)\ntwin_peaks_id = response.json()['results'][0]['id']\n\n# Get the credits for Twin Peaks Season 1\nseason_credits_url = f\"{base_url}/tv/{twin_peaks_id}/season/1/credits\"\nresponse = requests.get(season_credits_url, headers=headers)\ntwin_peaks_credits = response.json()\n\n# Search for the movie \"Mulholland Drive\"\nsearch_movie_url = f\"{base_url}/search/movie\"\nparams = {\n    \"query\": \"Mulholland Drive\"\n}\nresponse = requests.get(search_movie_url, headers=headers, params=params)\nmulholland_drive_id = response.json()['results'][0]['id']\n\n# Get the credits for Mulholland Drive\nmovie_credits_url = f\"{base_url}/movie/{mulholland_drive_id}/credits\"\nresponse = requests.get(movie_credits_url, headers=headers)\nmulholland_drive_credits = response.json()\n\n# Extract the director information for Twin Peaks Season 1 and Mulholland Drive\ntwin_peaks_director = None\nmulholland_drive_director = None\n\nfor crew_member in twin_peaks_credits['crew']:\n    if crew_member['job'] == 'Director':\n        twin_peaks_director = crew_member['name']\n\nfor crew_member in mulholland_drive_credits['crew']:\n    if crew_member['job'] == 'Director':\n        mulholland_drive_director = crew_member['name']\n\n# Check if the directors are the same person\nif twin_peaks_director and mulholland_drive_director and twin_peaks_director == mulholland_drive_director:\n    print(f\"The director of Twin Peaks Season 1 and Mulholland Drive is the same person: {twin_peaks_director}\")\nelse:\n    print(\"The director of Twin Peaks Season 1 and Mulholland Drive are different.\")\n\n```",
        "executed": null
    },
    {
        "query": "Where was the director of Mulholland Drive born?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/search/collection",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}"
        ],
        "results": "```python\nimport requests\n\n# Http headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Mulholland Drive\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Mulholland Drive\",\n}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie).json()\n\n# Get the details of the movie using the movie_id obtained from the search result\nif response_search_movie[\"total_results\"] > 0:\n    movie_id = response_search_movie[\"results\"][0][\"id\"]\n    url_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response_movie_credits = requests.get(url_movie_credits, headers=headers).json()\n\n    # Find the director's name from the crew information\n    for crew_member in response_movie_credits[\"crew\"]:\n        if crew_member[\"job\"] == \"Director\":\n            director_id = crew_member[\"id\"]\n            break\n\n    # Get the director's birthplace\n    if director_id:\n        url_person_details = f\"https://api.themoviedb.org/3/person/{director_id}\"\n        response_person_details = requests.get(url_person_details, headers=headers).json()\n        director_birthplace = response_person_details[\"place_of_birth\"]\n        print(\"Where was the director of Mulholland Drive born?\")\n        print(director_birthplace)\n    else:\n        print(\"Director information not found.\")\nelse:\n    print(\"Movie not found.\")\n```",
        "executed": "Where was the director of Mulholland Drive born?\nMissoula, Montana, USA\n"
    },
    {
        "query": "Is Mulholland Drive in the Top-10 rated list of the TMDB?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/top_rated",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/release_dates",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/discover/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# Set the API key\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n\n}\n\n# Call the endpoint to get the top rated movies\ntop_rated_url = \"https://api.themoviedb.org/3/movie/top_rated\"\ntop_rated_params = {\n    \"page\": 1\n}\n\ntop_rated_response = requests.get(top_rated_url, headers=headers, params=top_rated_params)\n\nif top_rated_response.status_code == 200:\n    top_rated_movies = top_rated_response.json()[\"results\"]\n    \n    # Check if \"Mulholland Drive\" is in the top-10 rated movies\n    is_in_top_10 = False\n    for index, movie in enumerate(top_rated_movies):\n        if movie[\"title\"] == \"Mulholland Drive\":\n            is_in_top_10 = True\n            print(\"Mulholland Drive is in the Top-10 rated list.\")\n            break\n    \n    if not is_in_top_10:\n        print(\"Mulholland Drive is not in the Top-10 rated list.\")\nelse:\n    print(\"Failed to retrieve the top rated movies.\")\n\n```",
        "executed": "Mulholland Drive is not in the Top-10 rated list.\n"
    },
    {
        "query": "Who directed more movies, Akira Kurosawa or Spielberg?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}/images",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/tv/top_rated",
            "GET https://api.themoviedb.org/3/tv/airing_today"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoints\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nperson_movie_credits_url = \"https://api.themoviedb.org/3/person/{}/movie_credits\"\n\n# Set the API key\napi_key = \"YOUR_API_KEY\"\n\n# Set the HTTP headers\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Define a function to get the number of movies directed by a person\ndef get_directed_movies_count(person_name):\n    # Search for the person\n    params = {\n        \"query\": person_name\n    }\n    response = requests.get(person_search_url, headers=headers, params=params)\n    results = response.json()\n    \n    # Get the person's ID\n    person_id = results[\"results\"][0][\"id\"]\n    \n    # Get the movie credits for the person\n    credits_url = person_movie_credits_url.format(person_id)\n    response = requests.get(credits_url, headers=headers)\n    credits = response.json()\n    \n    # Count the number of movies directed by the person\n    directed_movies_count = 0\n    for movie in credits[\"crew\"]:\n        if movie[\"job\"] == \"Director\":\n            directed_movies_count += 1\n            \n    return directed_movies_count\n\n# Get the number of movies directed by Akira Kurosawa\nakira_directed_movies_count = get_directed_movies_count(\"Akira Kurosawa\")\n\n# Get the number of movies directed by Spielberg\nspielberg_directed_movies_count = get_directed_movies_count(\"Steven Spielberg\")\n\n# Compare the number of movies directed\nif akira_directed_movies_count > spielberg_directed_movies_count:\n    print(\"Akira Kurosawa directed more movies.\")\nelif spielberg_directed_movies_count > akira_directed_movies_count:\n    print(\"Steven Spielberg directed more movies.\")\nelse:\n    print(\"Both directors directed the same number of movies.\")\n```",
        "executed": null
    },
    {
        "query": "What TV series has the director of Mulholland Drive directed?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/reviews",
            "GET https://api.themoviedb.org/3/collection/{collection_id}/images",
            "GET https://api.themoviedb.org/3/genre/tv/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/reviews",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/keywords"
        ],
        "results": "```python\nimport requests\n\n# Http header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Mulholland Drive\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\"query\": \"Mulholland Drive\"}\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\nmovie_results = response_search_movie.json()[\"results\"]\n\nif len(movie_results) > 0:\n    # Extract the director of \"Mulholland Drive\"\n    movie_id = movie_results[0][\"id\"]\n    url_movie_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    response_movie_credits = requests.get(url_movie_credits, headers=headers)\n    \n    cast = response_movie_credits.json()[\"crew\"]\n    director = next((member[\"name\"] for member in cast if member[\"job\"] == \"Director\"), None)\n\n    if director:\n        # Get the TV show credits for the director\n        url_director_tv_credits = f\"https://api.themoviedb.org/3/search/person/2877/tv_credits\"\n        response_director_tv_credits = requests.get(url_director_tv_credits, headers=headers)\n        tv_results = response_director_tv_credits.json()[\"cast\"]\n\n        # Extract the TV series directed by the director of \"Mulholland Drive\"\n        tv_series_directed = [tv[\"name\"] for tv in tv_results]\n\n        print(f\"TV series directed by the director of Mulholland Drive: {tv_series_directed}\")\n    else:\n        print(\"Director of Mulholland Drive not found\")\nelse:\n    print(\"Mulholland Drive movie not found\")\n```",
        "executed": null
    },
    {
        "query": "Tell me about actor Scarlett Johansson's birthday",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/credits",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/discover/tv",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API endpoint to get the person details by id\nurl = \"https://api.themoviedb.org/3/search/person\"\n\n# Define the query parameters\nparams = {\n    \"query\": \"Scarlett Johansson\",\n    \"page\": 1,\n    \"include_adult\": False,\n    \"region\": \"US\"\n}\n\n# Include the Authorization header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Make the API request\nresponse = requests.get(url, headers=headers, params=params)\n\n# Get the person ID for Scarlett Johansson\nperson_id = response.json()[\"results\"][0][\"id\"]\n\n# Define the API endpoint to get the person's details by ID\nurl = f\"https://api.themoviedb.org/3/person/{person_id}\"\n\n# Make the API request to get the person's details\nresponse = requests.get(url, headers=headers)\n\n# Extract and print Scarlett Johansson's birthday\nif response.status_code == 200:\n    person_info = response.json()\n    birthday = person_info[\"birthday\"]\n    print(\"Scarlett Johansson's birthday is:\", birthday)\nelse:\n    print(\"Error fetching data\")\n```",
        "executed": "Scarlett Johansson's birthday is: 1984-11-22\n"
    },
    {
        "query": "How many seasons of Sword Art Online are there?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/person/{person_id}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}"
        ],
        "results": "```python\nimport requests\n\n# Set the API key\napi_key = \"0dbab590c7eaca07ebf3c70398\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Search for the TV show Sword Art Online\nsearch_url = \"https://api.themoviedb.org/3/search/tv\"\nsearch_params = {\n    \"query\": \"Sword Art Online\"\n}\nsearch_response = requests.get(search_url, headers=headers, params=search_params)\nsearch_results = search_response.json()\n\n# Get the TV show details by id\ntv_id = search_results[\"results\"][0][\"id\"]\ndetails_url = f\"https://api.themoviedb.org/3/tv/{tv_id}\"\ndetails_response = requests.get(details_url, headers=headers)\ndetails = details_response.json()\n\n# Check how many seasons the TV show has\nnum_seasons = details[\"number_of_seasons\"]\n\nprint(f\"The number of seasons of Sword Art Online is: {num_seasons}\")\n```",
        "executed": null
    },
    {
        "query": "Are Yui Aragaki and Gen Hoshino co-starring in We Married as Job?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/recommendations",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/network/{network_id}/images",
            "GET https://api.themoviedb.org/3/person/{person_id}",
            "GET https://api.themoviedb.org/3/trending/{media_type}/{time_window}",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/collection/{collection_id}"
        ],
        "results": "```python\nimport requests\n\n# Define the API url and parameters for searching the movie \"We Married as Job\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"We Married as Job\",\n    \"include_adult\": False\n}\n\n# Make a GET request to search for the movie\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Check if the movie \"We Married as Job\" is found\nif data_search_movie[\"total_results\"] > 0:\n    # Get the movie id of \"We Married as Job\"\n    movie_id = data_search_movie[\"results\"][0][\"id\"]\n    \n    # Define the API url for getting the cast and crew of the movie\n    url_credits = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    \n    # Make a GET request to get the cast and crew of the movie\n    response_credits = requests.get(url_credits, headers=headers)\n    data_credits = response_credits.json()\n    \n    # Check if Yui Aragaki and Gen Hoshino are co-starring in the movie\n    yui_aragaki_co_starring = False\n    gen_hoshino_co_starring = False\n    for cast_member in data_credits[\"cast\"]:\n        if cast_member[\"name\"] == \"Yui Aragaki\":\n            yui_aragaki_co_starring = True\n        if cast_member[\"name\"] == \"Gen Hoshino\":\n            gen_hoshino_co_starring = True\n    \n    if yui_aragaki_co_starring and gen_hoshino_co_starring:\n        print(\"Yui Aragaki and Gen Hoshino are co-starring in We Married as Job.\")\n    else:\n        print(\"Yui Aragaki and Gen Hoshino are not co-starring in We Married as Job.\")\nelse:\n    print(\"Movie 'We Married as Job' not found in the database.\")\n```",
        "executed": "Yui Aragaki and Gen Hoshino are co-starring in We Married as Job.\n"
    },
    {
        "query": "Who is older, by how many years, the director of film Barbie or the lead actor of television DEATH NOTE?",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/credits",
            "GET https://api.themoviedb.org/3/search/tv",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/credits",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/movie/popular",
            "GET https://api.themoviedb.org/3/tv/latest",
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/credits"
        ],
        "results": "```python\nimport requests\n\n# Define the API URLs\nmovie_search_url = \"https://api.themoviedb.org/3/search/movie\"\ntv_search_url = \"https://api.themoviedb.org/3/search/tv\"\n\n# Set headers\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Barbie\"\nmovie_params = {\n    \"query\": \"Barbie\"\n}\nmovie_response = requests.get(movie_search_url, headers=headers, params=movie_params).json()\n\n# Get the ID of the director of the movie \"Barbie\"\nbarbie_movie_id = movie_response[\"results\"][0][\"id\"]\nmovie_credits_url = f\"https://api.themoviedb.org/3/movie/{barbie_movie_id}/credits\"\ndirector_response = requests.get(movie_credits_url, headers=headers).json()\ndirector_name = director_response[\"crew\"][0][\"name\"]\ndirector_birthday = director_response[\"crew\"][0].get(\"birthday\")\n\n# Search for the TV show \"DEATH NOTE\"\ntv_params = {\n    \"query\": \"DEATH NOTE\"\n}\ntv_response = requests.get(tv_search_url, headers=headers, params=tv_params).json()\n\n# Get the ID of the lead actor of the TV show \"DEATH NOTE\"\ndeath_note_id = tv_response[\"results\"][0][\"id\"]\ntv_credits_url = f\"https://api.themoviedb.org/3/tv/{death_note_id}/credits\"\nactor_response = requests.get(tv_credits_url, headers=headers).json()\nactor_name = actor_response[\"cast\"][0][\"name\"]\nactor_birthday = actor_response[\"cast\"][0].get(\"birthday\")\n\n# Calculate the age difference\nage_diff = 0\nif director_birthday and actor_birthday:\n    # Assuming the format of dates is \"YYYY-MM-DD\"\n    director_year = int(director_birthday.split(\"-\")[0])\n    actor_year = int(actor_birthday.split(\"-\")[0])\n    age_diff = abs(director_year - actor_year)\n\n# Output the results\nprint(f\"The director of film Barbie is: {director_name}\")\nprint(f\"The lead actor of television DEATH NOTE is: {actor_name}\")\nprint(f\"The age difference between them is: {age_diff} years\")\n```",
        "executed": "The director of film Barbie is: Rodrigo Prieto\nThe lead actor of television DEATH NOTE is: Mamoru Miyano\nThe age difference between them is: 0 years\n"
    },
    {
        "query": "Tell me about Katherine LaNasa's latest movie appearance.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/person",
            "GET https://api.themoviedb.org/3/person/{person_id}/movie_credits",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/images",
            "GET https://api.themoviedb.org/3/person/popular",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/similar",
            "GET https://api.themoviedb.org/3/movie/now_playing",
            "GET https://api.themoviedb.org/3/person/{person_id}/tv_credits",
            "GET https://api.themoviedb.org/3/movie/latest",
            "GET https://api.themoviedb.org/3/search/tv"
        ],
        "results": "```python\nimport requests\n\n# Define the API key and headers\napi_key = \"0dbab590c7eaca07ebel625974a37ad92\"\nheaders = {\n    \"Authorization\": f\"Bearer {api_key}\"\n}\n\n# Step 1: Search for the person \"Katherine LaNasa\"\nperson_search_url = \"https://api.themoviedb.org/3/search/person\"\nparams = {\n    \"query\": \"Katherine LaNasa\"\n}\nresponse = requests.get(person_search_url, headers=headers, params=params)\nperson_results = response.json()\n\n# Step 2: Get the movie credits for the person\nif person_results['total_results'] > 0:\n    person_id = person_results['results'][0]['id']\n    movie_credits_url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    response = requests.get(movie_credits_url, headers=headers)\n    movie_credits = response.json()\n\n    # Get the latest movie appearance\n    latest_movie = movie_credits['cast'][0]  # Assuming the first movie is the latest\n    print(f\"Katherine LaNasa's latest movie appearance is in the movie '{latest_movie['title']}' released on {latest_movie['release_date']}\")\nelse:\n    print(\"Katherine LaNasa not found in the database.\")\n```",
        "executed": null
    },
    {
        "query": "Give me one cover image of the movie Oppenheimer.",
        "solution": [
            "GET https://api.themoviedb.org/3/search/movie",
            "GET https://api.themoviedb.org/3/movie/{movie_id}/images",
            "GET https://api.themoviedb.org/3/company/{company_id}",
            "GET https://api.themoviedb.org/3/genre/movie/list",
            "GET https://api.themoviedb.org/3/tv/{tv_id}/season/{season_number}/episode/{episode_number}/images",
            "GET https://api.themoviedb.org/3/credit/{credit_id}",
            "GET https://api.themoviedb.org/3/network/{network_id}",
            "GET https://api.themoviedb.org/3/tv/{tv_id}",
            "GET https://api.themoviedb.org/3/tv/popular"
        ],
        "results": "```python\nimport requests\n\n# Set the API key in the header\nheaders = {\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwZGJhYjU5MGM3ZWFjYTA3ZWJlNjI1OTc0YTM3YWQ5MiIsInN1YiI6IjY1MmNmODM3NjYxMWI0MDBmZmM3MDM5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.McsK4Wm5XnRSDLn62Jhy787YUAwZcQz0X5qzkGuLe_s\"\n}\n\n# Search for the movie \"Oppenheimer\"\nurl_search_movie = \"https://api.themoviedb.org/3/search/movie\"\nparams_search_movie = {\n    \"query\": \"Oppenheimer\",\n    \"include_adult\": False\n}\n\nresponse_search_movie = requests.get(url_search_movie, headers=headers, params=params_search_movie)\ndata_search_movie = response_search_movie.json()\n\n# Get the movie id for Oppenheimer\nif data_search_movie[\"total_results\"] > 0:\n    movie_id = data_search_movie[\"results\"][0][\"id\"]\n\n    # Get the images for the movie with the id\n    url_movie_images = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n    response_movie_images = requests.get(url_movie_images, headers=headers)\n    data_movie_images = response_movie_images.json()\n\n    # Extract and print one cover image\n    cover_image = data_movie_images[\"posters\"][0][\"file_path\"]\n    print(f\"The cover image for Oppenheimer is: {cover_image}\")\nelse:\n    print(\"Oppenheimer movie not found.\")\n```  ",
        "executed": "The cover image for Oppenheimer is: /8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg\n"
    }
]